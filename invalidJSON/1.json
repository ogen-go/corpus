{"File":{"__typename":"FileMatch","repository":{"name":"github.com/42Crunch/vscode-openapi"},"file":{"name":"snippets.json.use.edit.test.ts","path":"src/test/suite/snippets.json.use.edit.test.ts","content":"import assert from \"assert\";\nimport {\n  assertTagsOrder,\n  ignoreJsonTextFeatures,\n  replaceKey,\n  replaceValue,\n  withRandomFileEditor,\n} from \"../utils\";\nimport {\n  addBasePath,\n  addDefinitionObject,\n  addHost,\n  addInfo,\n  addOperation,\n  addParameterBody,\n  addParameterOther,\n  addParameterPath,\n  addPath,\n  addResponse,\n  addSecurity,\n  addSecurityDefinitionApiKey,\n  addSecurityDefinitionBasic,\n  addSecurityDefinitionOauth2Access,\n  v3addComponentsParameter,\n  v3addComponentsResponse,\n  v3addComponentsSchema,\n  v3addInfo,\n  v3addSecuritySchemeApiKey,\n  v3addSecuritySchemeBasic,\n  v3addSecuritySchemeJWT,\n  v3addSecuritySchemeOauth2Access,\n  v3addServer,\n} from \"../commands\";\nimport { parserOptions } from \"../../parser-options\";\nimport { Cache } from \"../../cache\";\nimport { readFileSync } from \"fs\";\nimport { resolve } from \"path\";\nimport { safeParse } from \"../../util\";\n\nconst selectors = {\n  json: { language: \"json\" },\n  jsonc: { language: \"jsonc\" },\n  yaml: { language: \"yaml\" },\n};\n\nsuite(\"Snippets For JSON with Edit\", () =\u003e {\n  //@ts-ignore passing null to Cache should be okay in the context of the test\n  const cache = new Cache(parserOptions, Object.values(selectors), null);\n\n  test(\"Version 3 Spaces 2\", async () =\u003e {\n    const text = '{\\n  \"openapi\": \"3.0.0\"\\n}';\n    const expected = readFileSync(resolve(__dirname, \"../../../tests/snippets/v3.spaces2.json\"), {\n      encoding: \"utf8\",\n    });\n    assertTagsOrder(safeParse(expected, \"json\"));\n\n    await withRandomFileEditor(text, \"json\", async (editor, doc) =\u003e {\n      await v3addInfo(cache, true);\n\n      await v3addComponentsResponse(cache, true);\n      await replaceKey(editor, \"/components/responses/name\", \"responsesKey\");\n      await v3addComponentsResponse(cache, true);\n\n      await v3addComponentsParameter(cache, true);\n      await replaceKey(editor, \"/components/parameters/name\", \"parametersKey\");\n      await v3addComponentsParameter(cache, true);\n\n      await v3addComponentsSchema(cache, true);\n      await replaceKey(editor, \"/components/schemas/name\", \"schemasKey\");\n      await v3addComponentsSchema(cache, true);\n\n      await v3addSecuritySchemeBasic(cache, true);\n      await replaceKey(editor, \"/components/securitySchemes/name\", \"schemeBasic\");\n\n      await v3addSecuritySchemeApiKey(cache, true);\n      await replaceKey(editor, \"/components/securitySchemes/name\", \"schemeApiKey\");\n\n      await v3addSecuritySchemeJWT(cache, true);\n      await replaceKey(editor, \"/components/securitySchemes/name\", \"schemeJWT\");\n\n      await v3addSecuritySchemeOauth2Access(cache, true);\n      await replaceKey(editor, \"/components/securitySchemes/name\", \"schemeOauth2Access\");\n\n      await v3addServer(cache, true);\n      await replaceValue(editor, \"/servers/0/url\", \"https://elvis.bom/v1\");\n      await v3addServer(cache, true);\n\n      await addPath(cache, true);\n      await replaceKey(editor, \"/paths/~1name\", \"/path1\");\n      await replaceKey(editor, \"/paths/~1path1/get\", \"put\");\n      await addOperation(cache, { parent: { key: \"/path1\" } }, true);\n      await addPath(cache, true);\n\n      assert.ok(doc.isDirty);\n      assert.strictEqual(doc.getText(), expected);\n    });\n  });\n\n  test(\"Version 3 Spaces 3\", async () =\u003e {\n    const text = readFileSync(resolve(__dirname, \"../../../tests/snippets/v3.spaces3.draft.json\"), {\n      encoding: \"utf8\",\n    });\n    const expected = readFileSync(resolve(__dirname, \"../../../tests/snippets/v3.spaces3.json\"), {\n      encoding: \"utf8\",\n    });\n    assertTagsOrder(safeParse(expected, \"json\"));\n\n    await withRandomFileEditor(text, \"json\", async (editor, doc) =\u003e {\n      await v3addInfo(cache, true);\n\n      await v3addComponentsResponse(cache, true);\n      await replaceKey(editor, \"/components/responses/name\", \"responsesKey\");\n      await v3addComponentsResponse(cache, true);\n\n      await v3addComponentsParameter(cache, true);\n      await replaceKey(editor, \"/components/parameters/name\", \"parametersKey\");\n      await v3addComponentsParameter(cache, true);\n\n      await v3addComponentsSchema(cache, true);\n      await replaceKey(editor, \"/components/schemas/name\", \"schemasKey\");\n      await v3addComponentsSchema(cache, true);\n\n      await v3addSecuritySchemeBasic(cache, true);\n      await replaceKey(editor, \"/components/securitySchemes/name\", \"schemeBasic\");\n\n      await v3addSecuritySchemeApiKey(cache, true);\n      await replaceKey(editor, \"/components/securitySchemes/name\", \"schemeApiKey\");\n\n      await v3addSecuritySchemeJWT(cache, true);\n      await replaceKey(editor, \"/components/securitySchemes/name\", \"schemeJWT\");\n\n      await v3addSecuritySchemeOauth2Access(cache, true);\n      await replaceKey(editor, \"/components/securitySchemes/name\", \"schemeOauth2Access\");\n\n      await v3addServer(cache, true);\n      await replaceValue(editor, \"/servers/0/url\", \"https://elvis.bom/v1\");\n      await v3addServer(cache, true);\n\n      await addPath(cache, true);\n      await replaceKey(editor, \"/paths/~1name\", \"/path1\");\n      await replaceKey(editor, \"/paths/~1path1/get\", \"put\");\n      await addOperation(cache, { parent: { key: \"/path1\" } }, true);\n      await addPath(cache, true);\n\n      assert.ok(doc.isDirty);\n      assert.strictEqual(ignoreJsonTextFeatures(doc.getText()), expected);\n    });\n  });\n\n  test(\"Version 2 Spaces 4\", async () =\u003e {\n    const text = '{\\n    \"swagger\": \"2.0\"\\n}';\n    const expected = readFileSync(resolve(__dirname, \"../../../tests/snippets/v2.spaces4.json\"), {\n      encoding: \"utf8\",\n    });\n    assertTagsOrder(safeParse(expected, \"json\"));\n\n    await withRandomFileEditor(text, \"json\", async (editor, doc) =\u003e {\n      await addBasePath(cache, true);\n      await addHost(cache, true);\n      await addInfo(cache, true);\n      await addPath(cache, true);\n\n      await addSecurityDefinitionBasic(cache, true);\n      await replaceKey(editor, \"/securityDefinitions/name\", \"defBasicBasicKey\");\n\n      await addSecurityDefinitionOauth2Access(cache, true);\n      await replaceKey(editor, \"/securityDefinitions/name\", \"defOauth2Access\");\n\n      await addSecurityDefinitionApiKey(cache, true);\n      await replaceKey(editor, \"/securityDefinitions/name\", \"defApiKey\");\n\n      await addSecurity(cache, true);\n      await replaceKey(editor, \"/security/0/name\", \"securityKey\");\n      await addSecurity(cache, true);\n\n      await addDefinitionObject(cache, true);\n      await replaceKey(editor, \"/definitions/name\", \"defKey\");\n      await addDefinitionObject(cache, true);\n\n      await addParameterPath(cache, true);\n      await replaceKey(editor, \"/parameters/name\", \"paramKey\");\n\n      await addParameterBody(cache, true);\n      await replaceKey(editor, \"/parameters/name\", \"bodyKey\");\n\n      await addParameterOther(cache, true);\n      await replaceKey(editor, \"/parameters/name\", \"otherKey\");\n\n      await addResponse(cache, true);\n      await replaceKey(editor, \"/responses/code\", \"200\");\n      await addResponse(cache, true);\n\n      await replaceKey(editor, \"/paths/~1name\", \"/path1\");\n      await replaceKey(editor, \"/paths/~1path1/get\", \"put\");\n      await addOperation(cache, { parent: { key: \"/path1\" } }, true);\n      await addPath(cache, true);\n\n      assert.ok(doc.isDirty);\n      assert.strictEqual(doc.getText(), expected);\n    });\n  });\n\n  test(\"Version 2 Spaces 5\", async () =\u003e {\n    const text = readFileSync(resolve(__dirname, \"../../../tests/snippets/v2.spaces5.draft.json\"), {\n      encoding: \"utf8\",\n    });\n    const expected = readFileSync(resolve(__dirname, \"../../../tests/snippets/v2.spaces5.json\"), {\n      encoding: \"utf8\",\n    });\n    assertTagsOrder(safeParse(expected, \"json\"));\n\n    await withRandomFileEditor(text, \"json\", async (editor, doc) =\u003e {\n      await addBasePath(cache, true);\n      await addHost(cache, true);\n      await addInfo(cache, true);\n      await addPath(cache, true);\n\n      await addSecurityDefinitionBasic(cache, true);\n      await replaceKey(editor, \"/securityDefinitions/name\", \"defBasicBasicKey\");\n\n      await addSecurityDefinitionOauth2Access(cache, true);\n      await replaceKey(editor, \"/securityDefinitions/name\", \"defOauth2Access\");\n\n      await addSecurityDefinitionApiKey(cache, true);\n      await replaceKey(editor, \"/securityDefinitions/name\", \"defApiKey\");\n\n      await addSecurity(cache, true);\n      await replaceKey(editor, \"/security/0/name\", \"securityKey\");\n      await addSecurity(cache, true);\n\n      await addDefinitionObject(cache, true);\n      await replaceKey(editor, \"/definitions/name\", \"defKey\");\n      await addDefinitionObject(cache, true);\n\n      await addParameterPath(cache, true);\n      await replaceKey(editor, \"/parameters/name\", \"paramKey\");\n\n      await addParameterBody(cache, true);\n      await replaceKey(editor, \"/parameters/name\", \"bodyKey\");\n\n      await addParameterOther(cache, true);\n      await replaceKey(editor, \"/parameters/name\", \"otherKey\");\n\n      await addResponse(cache, true);\n      await replaceKey(editor, \"/responses/code\", \"200\");\n      await addResponse(cache, true);\n\n      await replaceKey(editor, \"/paths/~1name\", \"/path1\");\n      await replaceKey(editor, \"/paths/~1path1/get\", \"put\");\n      await addOperation(cache, { parent: { key: \"/path1\" } }, true);\n      await addPath(cache, true);\n\n      assert.ok(doc.isDirty);\n      assert.strictEqual(ignoreJsonTextFeatures(doc.getText()), expected);\n    });\n  });\n});\n"}},"Error":"invalid json"}