{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/teamdigitale/api-openapi-samples"
		},
		"file": {
			"name": "dati.mit.gov.it.yaml.src",
			"path": "external-apis/dati.mit.gov.it.yaml.src",
			"content": "x-commons:\n  common-responses: \u0026common_responses\n    '400':\n      $ref: '#/components/responses/400BadRequest'\n    '429':\n      $ref: '#/components/responses/429TooManyRequests'\n    '503':\n      $ref: '#/components/responses/503ServiceUnavailable'\n    default:\n      $ref: '#/components/responses/default'\n  common-headers: \u0026common_headers\n    X-RateLimit-Limit:\n      $ref: 'https://raw.githubusercontent.com/teamdigitale/openapi/0.0.1/docs/headers/v3.yaml#/X-RateLimit-Limit'\n    X-RateLimit-Remaining:\n      $ref: 'https://raw.githubusercontent.com/teamdigitale/openapi/0.0.1/docs/headers/v3.yaml#/X-RateLimit-Remaining'\n    X-RateLimit-Reset:\n      $ref: 'https://raw.githubusercontent.com/teamdigitale/openapi/0.0.1/docs/headers/v3.yaml#/X-RateLimit-Reset'\n\nopenapi: 3.0.0\nservers:\n  - url: 'http://dati.mit.gov.it/catalog/api/3/action'\ninfo:\n  x-summary: \u003e-\n    API per ricercare e visualizzare gli open data del Ministero delle Infrastrutture e dei Trasporti.\n  description: \u003e\n    #### Documentazione\n    Il portale dei dati aperti dati.mit.gov.it è realizzato e manutenuto dal Ministero delle infrastrutture\n    e dei trasporti con il coordinamento della Direzione generale per i Sistemi Informativi e Statistici.\n\n    Tramite queste API è possibile ricercare e\n    visualizzare gli open data nazionali presenti sul portale.\n\n\n    #### Note\n\n    Per ulteriori informazioni si veda la pagina [crediti di opencantieri](http://opencantieri.mit.gov.it/crediti)\n\n    #### Informazioni tecniche ed esempi\n\n    Queste API non sono strettamente REST e **non utilizzano i metodi PUT e DELETE**,\n    ma solamente i metodi GET e POST.\n\n    ##### Autenticazione\n\n    Le API esposte non richiedono autenticazione e permettono solamente il download dei dati.\n\n    ##### Esempi\n    Query di esempio:\n\n      * elenca i dataset\n    ```\n    curl \"http://dati.mit.gov.it/catalog/api/3/action/package_list?limit=5\"\n    ```\n\n      * mostra il dataset __abitazioni__\n\n    ```\n    curl \"http://dati.mit.gov.it/catalog/api/3/action/package_show?id=digiroa\"\n    ```\n\n  version: '3'\n  title: Opendata MIT\n  x-api-id: 28a40681-4c28-45c9-9bda-7e55d1d6ec68\n  contact:\n    name: \"Ministero Infrastrutture e Trasporti\"\n    email: opendata@mit.gov.it\n    url: 'http://opencantieri.mit.gov.it/crediti'\n  termsOfService: \u003e-\n    http://www.mit.gov.it/note-legali\n  x-audience:\n    - public\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: public\n    description: Operations available to all citizens\npaths:\n  /package_list:\n    get:\n      tags:\n        - public\n      summary: List all datasets within given limit\n      operationId: listInventory\n      description: |\n        List or search all datasets\n      parameters:\n        - in: query\n          name: offset\n          description: 'when limit is given, the offset to start returning packages from'\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: \u003e-\n            if given, the list of datasets will be broken into pages of at most\n            limit datasets per page and only one page will be returned at a time\n            (optional)\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \u003c\u003c: *common_responses\n        '200':\n          $ref: '#/components/responses/CkanResponse'\n\n  /package_search:\n    get:\n      tags:\n        - public\n      summary: Search among all datasets\n      operationId: searchInventory\n      description: |\n        List or search all datasets\n      parameters:\n        - in: query\n          name: q\n          description: 'the solr query. For example ``name:pdf-testi``'\n          required: false\n          schema:\n            type: string\n            default: '*:*'\n        - in: query\n          name: fq\n          description: \u003e\n            any filter queries to apply. Note: +site_id:{ckan_site_id} is added\n            to this string prior to the query being executed.\n          schema:\n            type: string\n        - in: query\n          name: sort\n          description: \u003e\n            sorting of the search results. Optional. **Default: 'relevance asc,\n            metadata_modified desc'**. As per the solr documentation, this is a\n            comma-separated string of field names and sort-orderings.\n          required: false\n          schema:\n            type: string\n            default: 'relevance asc, metadata_modified desc'\n        - in: query\n          name: rows\n          description: \u003e-\n            the number of matching rows to return. There is a hard limit of 1000\n            datasets per query.\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: start\n          description: \u003e-\n            the offset in the complete result for where the set of returned\n            datasets should begin.\n          schema:\n            type: integer\n        - in: query\n          name: include_drafts\n          description: \u003e-\n            if True, draft datasets will be included in the results. A user will\n            only be returned their own draft datasets, and a sysadmin will be\n            returned all draft datasets. Optional, the default is False.\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \u003c\u003c: *common_responses\n        '200':\n          $ref: '#/components/responses/CkanResponse'\n        '409':\n          description: Conflict (can result e.g. from incorrectly formatted solr query)\n  /package_show:\n    get:\n      tags:\n        - public\n      summary: Get details of one package\n      operationId: showInventory\n      description: |\n        List or search all datasets\n      parameters:\n        - in: query\n          name: id\n          description: the id or name of the dataset\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: include_tracking\n          description: |\n            add tracking information to dataset and resources (default: False)\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \u003c\u003c: *common_responses\n        '200':\n          $ref: '#/components/responses/CkanResponse'\n  /organization_list:\n    get:\n      tags:\n        - public\n      summary: List all groups within given parameters\n      operationId: listOrgs\n      description: |\n        List or search all datasets\n      parameters:\n        - in: query\n          name: sort\n          description: \u003e\n            sorting of the search results. Optional. Default: “name asc” string\n            of field name and sort-order. The allowed fields are ‘name’,\n            ‘package_count’ and ‘title’\n          required: false\n          schema:\n            type: string\n            default: name asc\n        - in: query\n          name: limit\n          description: \u003e\n            if given, the list of organizations will be broken into pages of at\n            most limit organizations per page and only one page will be returned\n            at a time (optional)\n          schema:\n            type: integer\n            format: int32\n        - in: query\n          name: offset\n          description: \u003e\n            when limit is given, the offset to start returning organizations\n            from\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - in: query\n          name: organizations\n          description: \u003e\n            a list of names of the groups to return, if given only groups whose\n            names are in this list will be returned (optional)\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: all_fields\n          description: \u003e\n            return group dictionaries instead of just names. Only core fields\n            are returned - get some more using the include_* options. Returning\n            a list of packages is too expensive, so the packages property for\n            each group is deprecated, but there is a count of the packages in\n            the package_count property. (optional, default: False)\n          required: false\n          schema:\n            type: boolean\n        - in: query\n          name: include_dataset_count\n          description: \u003e\n            if all_fields, include the full package_count (optional, default:\n            True)\n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: include_extras\n          description: \u003e\n            if all_fields, include the organization extra fields (optional,\n            default: False)\n          schema:\n            type: boolean\n            default: false\n        - in: query\n          name: include_tags\n          description: \u003e\n            if all_fields, include the organization tags (optional, default:\n            False)\n          schema:\n            type: boolean\n            default: false\n        - in: query\n          name: include_groups\n          description: \u003e\n            if all_fields, include the organizations the organizations are in\n            (optional, default: False)\n          schema:\n            type: boolean\n            default: false\n        - in: query\n          name: include_users\n          description: \u003e\n            if all_fields, include the organization users (optional, default:\n            False).\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \u003c\u003c: *common_responses\n        '200':\n          $ref: '#/components/responses/CkanResponse'\n  /user_list:\n    get:\n      tags:\n        - consumers\n      summary: List all groups within given parameters\n      description: |\n        List or search all datasets\n      operationId: listUsers\n      parameters:\n        - name: sort\n          in: query\n          description: |\n            sorting of the search results. Optional. Default: “name asc” string of field name and sort-order. The allowed fields are ‘name’, ‘package_count’ and ‘title’\n          required: false\n          schema:\n            default: name asc\n            type: string\n        - name: limit\n          in: query\n          description: |\n            if given, the list of organizations will be broken into pages of at most limit organizations per page and only one page will be returned at a time (optional)\n          schema:\n            format: int32\n            type: integer\n        - name: offset\n          in: query\n          description: |\n            when limit is given, the offset to start returning organizations from\n          required: false\n          schema:\n            format: int32\n            type: integer\n        - name: organizations\n          in: query\n          description: |\n            a list of names of the groups to return, if given only groups whose names are in this list will be returned (optional)\n          required: false\n          schema:\n            type: string\n        - name: all_fields\n          in: query\n          description: |\n            return group dictionaries instead of just names. Only core fields are returned\n            - get some more using the include_* options. Returning a list of packages is too\n            expensive, so the packages property for each group is deprecated, but there is a\n            count of the packages in the package_count property. (optional, default: False)\n          required: false\n          schema:\n            type: boolean\n        - name: include_dataset_count\n          in: query\n          description: |\n            if all_fields, include the full package_count (optional, default: True)\n          schema:\n            default: true\n            type: boolean\n        - name: include_extras\n          in: query\n          description: |\n            if all_fields, include the organization extra fields (optional, default: False)\n          schema:\n            default: false\n            type: boolean\n        - name: include_tags\n          in: query\n          description: |\n            if all_fields, include the organization tags (optional, default: False)\n          schema:\n            default: false\n            type: boolean\n        - name: include_groups\n          in: query\n          description: |\n            if all_fields, include the organizations the organizations are in (optional, default: False)\n          schema:\n            default: false\n            type: boolean\n        - name: include_users\n          in: query\n          description: |\n            if all_fields, include the organization users (optional, default: False).\n          schema:\n            default: false\n            type: boolean\n      responses:\n        \u003c\u003c: *common_responses\n        200:\n          $ref: '#/components/responses/CkanResponse'\n\n\ncomponents:\n  responses:\n    CkanResponse:\n      description: |\n        Standard Ckan Reply. See http://docs.ckan.org/en/latest/api/index.html.\n      headers:\n        \u003c\u003c: *common_headers\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CkanReply'\n    400BadRequest:\n      description: |\n        Invalid input\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CkanError'\n    403Forbidden:\n      description: |\n        Missing authorization key\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CkanError'\n    409AlreadyExists:\n      description: |\n        Item already exists\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CkanError'\n    429TooManyRequests:\n      description: \u003e-\n        Too Many Requests\n      headers:\n        \u003c\u003c: *common_headers\n        Retry-After:\n          $ref: 'https://raw.githubusercontent.com/teamdigitale/openapi/0.0.1/docs/headers/v3.yaml#/Retry-After'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CkanError'\n    503ServiceUnavailable:\n      description: \u003e-\n        Service Unavailable\n      headers:\n        Retry-After:\n          $ref: 'https://raw.githubusercontent.com/teamdigitale/openapi/0.0.1/docs/headers/v3.yaml#/Retry-After'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CkanError'\n    default:\n      description: \u003e-\n        Unexpected error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CkanError'\n\n  securitySchemes:\n    ckanapikey:\n      type: apiKey\n      name: Authorization\n      in: header\n  schemas:\n    CkanError:\n      type: object\n      required:\n        - result\n        - success\n        - help\n        - error\n      properties:\n        success:\n          type: string\n        result:\n          anyOf:\n            - type: object\n            - type: array\n        error:\n          type: object\n        help:\n          type: string\n          format: url\n        status:\n          type: boolean\n          enum:\n            - false\n    CkanReply:\n      type: object\n      required:\n        - result\n        - success\n        - help\n      properties:\n        success:\n          type: string\n        result:\n          anyOf:\n            - type: object\n            - type: array\n        error:\n          type: object\n        help:\n          type: string\n          format: url\n        status:\n          type: boolean\n          enum:\n            - true\n            - false\n"
		}
	},
	"Error": "invalid json"
}