{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/swagger-api/swagger-parser"
		},
		"file": {
			"name": "oas3.yaml.template",
			"path": "modules/swagger-parser-v3/src/test/resources/oas3.yaml.template",
			"content": "---\nopenapi: 3.0.1\nservers:\n- url: http://petstore.swagger.io/v2\n- url: https://development.gigantic-server.com/v1\n  description: Development server\n- url: https://{username}.gigantic-server.com:{port}/{basePath}\n  x-server: server extension\n  description: The production API server\n  variables:\n      username:\n        # note! no enum here means it is an open value\n        default: demo\n        description: this value is assigned by the service provider, in this example `gigantic-server.com`\n      port:\n        enum:\n          - 8443\n          - 443\n        default: 8443\n      basePath:\n        # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`\n        default: v2\n        description: testing overwriting\n        enum:\n          - 2222\n          - 333\nx-origin:\n- url: http://petstore.swagger.io/v2/swagger.json\n  format: swagger\n  version: '2.0'\n  converter:\n    url: https://github.com/mermade/swagger2openapi\n    version: 1.2.1\nx-api-title: pet store test api\nsecurity:\n  - api_key: []\n  - tokenAuth: []\ninfo:\n  description: 'This is a sample server Petstore'\n  title: Sample Pet Store App\n  termsOfService: http://swagger.io/terms/\n  x-info: info extension\n  contact:\n    name: API Support\n    url: http://www.example.com/support\n    email: support@example.com\n    x-contact: contact extension\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n    x-license: license extension\n  version: 1.0.1\ntags:\n- name: pet\n  description: Everything about your Pets\n  externalDocs:\n    description: Find out more\n    url: http://swagger.io\n- name: store\n  description: Access to Petstore orders\n- name: user\n  description: Operations about user\n  externalDocs:\n    description: Find out more about our store\n    url: http://swagger.io\npaths:\n  \"/pathItemRef2\":\n    \"$ref\": '#/paths/~1pet'\n  \"/mockResponses/objectMultipleExamples\":\n    get:\n      responses:\n        '200':\n          description: A string\n          content:\n           application/json:\n             schema:\n               $ref: '#/components/schemas/User1'\n             examples:\n               ArthurDent:\n                  $ref: '#/components/examples/Arthur'\n               Trillian:\n                 $ref: '#/components/examples/Trillian'\n           application/yaml:\n             schema:\n               $ref: '#/components/schemas/User1'\n             examples:\n               ArthurDent:\n                 $ref: '#/components/examples/Arthur'\n               Trillian:\n                 $ref: '#/components/examples/Trillian'\n           application/xml:\n             schema:\n               $ref: '#/components/schemas/User1'\n             examples:\n               ArthurDent:\n                 $ref: '#/components/examples/Arthur'\n               Trillian:\n                 $ref: '#/components/examples/Trillian'\n  \"/pathItemRef\":\n    \"$ref\": 'http://localhost:${dynamicPort}/remote/path#/paths/~1pet'\n  \"/pet\":\n    summary: summary\n    description: description\n    trace:\n      description: Dummy operation to test retrieval of trace operations\n      responses:\n        200:\n          description: Dummy response\n    post:\n      externalDocs:\n        description: Find out more\n        url: http://swagger.io\n      tags:\n      - pet\n      summary: Add a new pet to the store\n      description: ''\n      operationId: addPet\n      parameters: []\n      responses:\n        '405':\n          description: Invalid input\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                title: header schema\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      requestBody:\n        \"$ref\": \"#/components/requestBodies/requestBody1\"\n    servers:\n    - url: http://petstore.swagger.io/v2\n    parameters:\n    - name: status\n      in: query\n      description: Status values that need to be considered for filter\n      required: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n          - available\n          - pending\n          - sold\n          default: available\n    - \"$ref\": \"#/components/parameters/skipParam\"\n    put:\n      tags:\n      - pet\n      summary: Update an existing pet\n      description: ''\n      operationId: updatePet\n      parameters: []\n      responses:\n        '400':\n          description: A complex object array response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VeryComplexType'\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      requestBody:\n        \"$ref\": \"#/components/requestBodies/requestBody1\"\n  \"/pet/findByStatus\":\n    get:\n      tags:\n      - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n      - name: status\n        in: query\n        description: Status values that need to be considered for filter\n        required: true\n        example: \"example\"\n        schema:\n          title: title test\n          format: int64\n          minimum: 1\n          maximum: 10\n          allOf:\n          - $ref: '#/components/schemas/Pet'\n          - type: object\n            properties:\n              huntingSkill:\n                type: string\n                description: The measured skill for hunting\n                enum:\n                - clueless\n                - lazy\n                - adventurous\n                - aggressive\n          xml:\n            namespace: http://example.com/schema/sample\n            prefix: sample\n          enum:\n          - available\n          - pending\n          - sold\n          type: object\n          properties:\n            id:\n              type: integer\n              format: int64\n            name:\n              type: string\n              xml:\n                namespace: http://inside/properties/schema\n                prefix: inside properties schema\n          required:\n          - name\n          - pet\n          example:\n            name: Puma\n            id: 1\n          externalDocs:\n            description: External Docs Inside Schema\n            url: http://swagger.io inside Schema\n          items:\n            type: string\n            enum:\n            - available\n            - pending\n            - sold\n            default: available\n        content:\n          'application/json':\n            schema:\n              type: array\n              items:\n                type: string\n            example: example string\n            examples:\n              list:\n                summary: List of Names\n                value:\n                  - Bob\n                  - Diane\n                  - Mary\n                  - Bill\n              empty:\n                summary: Empty\n                value: {}\n            encoding:\n              historyMetadata:\n                # require XML Content-Type in utf-8 encoding\n                contentType: application/xml; charset=utf-8\n              profileImage:\n                # only accept png/jpeg\n                contentType: image/png, image/jpeg\n                headers:\n                  X-Rate-Limit:\n                    description: calls per hour allowed by the user\n                    schema:\n                      type: integer\n                      format: int32\n          'application/xml':\n            examples:\n              list:\n                summary: List of names\n                value: \"\u003cUsers\u003e\u003cUser name='Bob'/\u003e\u003cUser name='Diane'/\u003e\u003cUser name='Mary'/\u003e\u003cUser name='Bill'/\u003e\u003c/Users\u003e\"\n              empty:\n                summary: Empty list\n                value: \"\u003cUsers/\u003e\"\n          'text/plain':\n            examples:\n              list:\n                summary: List of names\n                value: \"Bob,Diane,Mary,Bill\"\n              empty:\n                summary: Empty\n                value: \"\"\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/Pet\"\n        '400':\n          description: Invalid status value\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      requestBody:\n        description: pet store to add to the system\n        required: true\n        content:\n          multipart/mixed:\n            schema:\n              type: object\n              properties:\n                id:\n                  # default is text/plain\n                  type: string\n                  format: uuid\n                  \"$ref\": \"#/components/schemas/Pet\"\n                address:\n                  # default is application/json\n                  type: object\n                  properties: {}\n                historyMetadata:\n                  # need to declare XML format!\n                  description: metadata in XML format\n                  type: object\n                  properties: {}\n                profileImage:\n                  # default is application/octet-stream, need to declare an image type only!\n                  type: string\n                  format: binary\n            encoding:\n              historyMetadata:\n                # require XML Content-Type in utf-8 encoding\n                contentType: application/xml; charset=utf-8\n              profileImage:\n                # only accept png/jpeg\n                contentType: image/png, image/jpeg\n                headers:\n                  X-Rate-Limit:\n                    description: calls per hour allowed by the user\n                    schema:\n                      type: integer\n                      format: int32\n                  X-Expires-After:\n                    description: date in UTC when token expires\n                    schema:\n                      type: string\n                      format: date-time\n      callbacks:\n        mainHook:\n          '$request.body#/url':\n            post:\n              responses:\n                '200':\n                  description: webhook successfully processed operation\n  \"/pet/findByTags\":\n    get:\n      tags:\n      - pet\n      summary: Finds Pets by tags\n      description: Muliple tags can be provided with comma separated strings. Use\n        tag1, tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n      - name: tags\n        in: query\n        description: Tags to filter by\n        required: true\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/Pet\"\n        '400':\n          description: Invalid tag value\n      callbacks:\n        mainHook:\n          '$ref': \"#/components/callbacks/failed\"\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      deprecated: true\n  \"/pet/{petId}\":\n    get:\n      tags:\n      - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                \"$ref\": \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Pet\"\n      callbacks:\n        mainHook:\n          '$request.body#/url':\n            post:\n              responses:\n                '200':\n                  description: successful operation\n                  content:\n                    application/xml:\n                      schema:\n                        \"$ref\": \"#/components/schemas/Pet\"\n      security:\n      - api_key: []\n    post:\n      tags:\n      - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet that needs to be updated\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '405':\n          description: Invalid input\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                  required: false\n                status:\n                  description: Updated status of the pet\n                  type: string\n                  required: false\n    delete:\n      tags:\n      - pet\n      summary: Deletes a pet\n      description: ''\n      operationId: deletePet\n      parameters:\n      - name: api_key\n        in: header\n        required: false\n        schema:\n          type: string\n      - name: petId\n        in: path\n        description: Pet id to delete\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n  \"/pet/{petId}/uploadImage\":\n    post:\n      tags:\n      - pet\n      summary: uploads an image\n      description: ''\n      operationId: uploadFile\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet to update\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ApiResponse\"\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n  \"/store/inventory\":\n    get:\n      tags:\n      - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      parameters:\n      - \"$ref\": \"#/components/parameters/limitParam\"\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n      security:\n      - api_key: []\n  \"/store/order\":\n    post:\n      tags:\n      - store\n      summary: Place an order for a pet\n      description: ''\n      operationId: placeOrder\n      parameters: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                \"$ref\": \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Order\"\n        '400':\n          description: Invalid Order\n      requestBody:\n        content:\n          application/json:\n            description: order placed for purchasing the pet\n            schema:\n              \"$ref\": \"#/components/schemas/Order\"\n  \"/store/order/{orderId}\":\n    get:\n      tags:\n      - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value \u003e= 1 and \u003c= 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n      - name: orderId\n        in: path\n        description: ID of pet that needs to be fetched\n        required: true\n        schema:\n          type: integer\n          format: int64\n          minimum: 1\n          maximum: 10\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                \"$ref\": \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Order\"\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n    delete:\n      tags:\n      - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value.\n        Negative or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n      - name: orderId\n        in: path\n        description: ID of the order that needs to be deleted\n        required: true\n        schema:\n          type: integer\n          format: int64\n          minimum: 1\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n  \"/user\":\n    post:\n      tags:\n      - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      parameters: []\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            description: Created user object\n            schema:\n              \"$ref\": \"#/components/schemas/User\"\n  \"/user/createWithArray\":\n    post:\n      tags:\n      - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithArrayInput\n      parameters: []\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        \"$ref\": \"#/components/requestBodies/requestBody2\"\n  \"/user/createWithList\":\n    post:\n      tags:\n      - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithListInput\n      parameters: []\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        \"$ref\": \"#/components/requestBodies/requestBody2\"\n  \"/user/login\":\n    get:\n      tags:\n      - user\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      parameters:\n      - name: username\n        in: query\n        description: The user name for login\n        required: true\n        schema:\n          type: string\n      - name: password\n        in: query\n        description: The password for login in clear text\n        required: true\n        schema:\n          type: string\n          format: password\n      responses:\n        '200':\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: Invalid username/password supplied\n  \"/user/logout\":\n    get:\n      tags:\n      - user\n      summary: Logs out current logged in user session\n      description: ''\n      operationId: logoutUser\n      parameters: []\n      responses:\n        default:\n          description: successful operation\n  \"/user/{username}\":\n    get:\n      tags:\n      - user\n      summary: Get user by user name\n      description: ''\n      operationId: getUserByName\n      parameters:\n      - name: username\n        in: path\n        description: 'The name that needs to be fetched. Use user1 for testing. '\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n  \"/producesTest\":\n    get:\n      parameters: []\n      responses:\n        '200':\n          description: it works\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  name:\n                    type: string\n    put:\n      tags:\n      - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n      - name: username\n        in: path\n        description: name that need to be updated\n        required: true\n        schema:\n          type: string\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n      requestBody:\n        content:\n          application/json:\n            description: Updated user object\n            schema:\n              \"$ref\": \"#/components/schemas/User\"\n    delete:\n      tags:\n      - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n      - name: username\n        in: path\n        description: The name that needs to be deleted\n        required: true\n        schema:\n          type: string\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\ncomponents:\n  schemas:\n    RemoteSchema:\n      \"$ref\": \"http://localhost:${dynamicPort}/remote/schema#/components/schemas/RemoteSchema\"\n    VeryComplexType:\n      type: integer\n      format: int32\n    ExtendedErrorModel:\n      allOf:\n      - type: object\n        required:\n        - rootCause\n        properties:\n          rootCause:\n            type: string\n            \"$ref\": \"#/components/schemas/Category\"\n    Order:\n      type: object\n      not:\n        type: integer\n        format: int32\n      additionalProperties:\n        type: integer\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n          - placed\n          - approved\n          - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    OrderRef:\n      type: object\n      not:\n        type: integer\n        format: int32\n        \"$ref\": \"#/components/schemas/Category\"\n      additionalProperties:\n        type: integer\n        \"$ref\": \"http://localhost:${dynamicPort}/remote/schema#/components/schemas/User\"\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n          - placed\n          - approved\n          - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    User1:\n      type: object\n      xml:\n        name: USER\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 4\n          xml:\n            attribute: true\n            name: ID\n        name:\n          type: string\n          example: Arthur Dent\n          xml:\n            name: NAME\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n      - name\n      - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          \"$ref\": \"#/components/schemas/Category\"\n        user:\n          type: string\n          example: doggie\n          \"$ref\": \"http://localhost:${dynamicPort}/remote/schema#/components/schemas/User\"\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            \"$ref\": \"http://localhost:${dynamicPort}/remote/schema#/components/schemas/ExampleSchema\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n          - available\n          - pending\n          - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      required:\n      - name\n      - photoUrls\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n  responses:\n    Found:\n      description: Entity not found.\n      \"$ref\": \"http://localhost:${dynamicPort}/remote/response#/responses/RemoteResponse\"\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n      headers:\n        X-Ref-Limit-Limit:\n          \"$ref\": \"#/components/headers/X-Rate-Limit-Reset\"\n      links:\n        address:\n          \"$ref\": \"#/components/links/unsubscribe\"\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ExtendedErrorModel'\n  parameters:\n    contentParameter:\n      in: query\n      name: coordinates\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ExtendedErrorModel'\n      examples:\n        cat:\n          summary: An example of a cat\n          value:\n            name: Fluffy\n            petType: Cat\n            color: White\n            gender: male\n            breed: Persian\n    refParam:\n      \"$ref\": \"#/components/parameters/limitParam\"\n    remoteParameter:\n      \"$ref\": \"http://localhost:${dynamicPort}/remote/parameter\"\n    newParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n        \"$ref\": \"#/components/schemas/Tag\"\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  examples:\n    Trillian:\n      value:\n        id: 3\n        name: Tricia McMillan\n    Arthur:\n      value:\n        id: 4\n        name: Arthur Dent\n    referenceCat:\n      \"$ref\": \"http://localhost:${dynamicPort}/remote/example\"\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: \"#/components/examples/cat\"\n  requestBodies:\n    reference:\n      \"$ref\": \"http://localhost:${dynamicPort}/remote/requestBody#/requestBodies/remote_requestBody\"\n    requestBody1:\n      description: request body in components\n      content:\n        application/json:\n          description: Pet object that needs to be added to the store\n          schema:\n            \"$ref\": \"#/components/schemas/Pet\"\n        application/xml:\n          description: Pet object that needs to be added to the store\n          schema:\n            \"$ref\": \"#/components/schemas/Pet\"\n    requestBody2:\n      content:\n        application/json:\n          description: List of user object\n          schema:\n            type: array\n            items:\n              \"$ref\": \"#/components/schemas/User\"\n    requestBody3:\n      \"$ref\": \"#/components/requestBodies/requestBody2\"\n  securitySchemes:\n    reference:\n      \"$ref\": \"#/components/securitySchemes/api_key\"\n    remote_reference:\n      \"$ref\": \"http://localhost:${dynamicPort}/remote/security#/petstore_remote\"\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: http://petstore.swagger.io/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n    petstore_auth_password:\n      type: oauth2\n      flows:\n        password:\n          tokenUrl: http://petstore.swagger.io/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n    petstore_auth_clientCredentials:\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: http://petstore.swagger.io/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n    petstore_auth_authorizationCode:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: http://petstore.swagger.io/oauth/dialog\n          tokenUrl: http://petstore.swagger.io/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    api_key_cookie:\n      type: apiKey\n      name: api_key\n      in: cookie\n    http:\n      type: http\n      scheme: Basic\n    openID:\n      type: openIdConnect\n      openIdConnectUrl : http://openIdConnect.example.com\n  headers:\n    X-Ref-Limit-Limit:\n      \"$ref\": \"#/components/headers/X-Rate-Limit-Reset\"\n    X-Rate-Limit-Limit:\n      description: The number of allowed requests in the current period\n      schema:\n        type: integer\n      example: \"This is a header example\"\n    X-Rate-Limit-Remaining:\n      description: The number of remaining requests in the current period\n      schema:\n        type: integer\n        \"$ref\": \"http://localhost:${dynamicPort}/remote/schema#/components/schemas/User\"\n    X-Rate-Limit-Reset:\n      description: The number of seconds left in the current period\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ExtendedErrorModel'\n      examples:\n        headerExample:\n            $ref: \"#/components/examples/dog\"\n  links:\n    referenced:\n      \"$ref\": \"#/components/links/unsubscribe\"\n    unsubscribe:\n      operationId: cancelHookCallback\n      parameters:\n        id: $response.body#/hookId\n      x-link: link extension\n    subscribe:\n      \"$ref\": \"http://localhost:${dynamicPort}/remote/link\"\n  callbacks:\n    remoteCallback:\n      \"$ref\": \"http://localhost:${dynamicPort}/remote/callback\"\n    referenced:\n      \"$ref\": \"#/components/callbacks/failed\"\n    heartbeat:\n      '$request.query.heartbeat-url':\n        post:\n          requestBody:\n            $ref: '#/components/requestBodies/requestBody3'\n          responses:\n            '200':\n              description: Consumer acknowledged the callback\n    failed:\n      '$response.body#/failedUrl':\n        post:\n          requestBody:\n            $ref: '#/components/requestBodies/requestBody3'\n          responses:\n            '200':\n              description: Consumer acknowledged the callback failed\n    success:\n      '$response.body#/successUrl':\n        post:\n          requestBody:\n            $ref: '#/components/requestBodies/requestBody1'\n          responses:\n            '200':\n              description: Consumer acknowledged the callback\n  x-component:\n  - url: http://component.swagger.io/v2/swagger.json\n    format: OAS\n    version: '3.0'\n    converter:\n      url: https://github.com/mermade/oas3\n      version: 1.2.3\n  x-api-title: pet store test api in components\n"
		}
	},
	"Error": "invalid json"
}