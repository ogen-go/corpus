{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/modelix/modelix"
		},
		"file": {
			"name": "model-server.json",
			"size": 0,
			"path": "model-server/doc/model-server.json",
			"byteSize": 13640,
			"content": "{\n  \"openapi\": \"3.0.2\",\n  \"info\": {\n    \"title\": \"Modelix Model Server\",\n    \"version\": \"0.0.37\"\n  },\n  \"paths\": {\n    \"/\": {\n      \"get\": {\n        \"tags\": [\n          \"meta\"\n        ],\n        \"description\": \"Verify if the server is up and running\",\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"It returns the string 'Model Server'\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"Model Server\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/health\": {\n      \"get\": {\n        \"tags\": [\n          \"meta\"\n        ],\n        \"description\": \"Verify if the server is working correctly\",\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The server is healthy'\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"healthy\"\n                }\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"The server is not healthy\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"not healthy\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/headers\": {\n      \"get\": {\n        \"tags\": [\n          \"debugging\"\n        ],\n        \"description\": \"Print back the headers of the request\",\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The list of headers (name and value), one per line\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"Accept: */*\\nX-Request-ID: dbe2938410b8e80c0444ddf552492546\\nX-Forwarded-Host: mymodelserver.com\\nX-Forwarded-Proto: https\\nX-Original-URI: /headers\\nUser-Agent: PostmanRuntime/7.26.8\\nHost: mymodelserver.com\\nAccept-Encoding: gzip, deflate, br\\nX-Forwarded-Port: 443\\nX-Forwarded-For: 10.33.52.250\\nPostman-Token: 74a163b4-b454-499c-9003-f2f35cc8fc91\\nContent-Length: 14\\nX-Real-IP: 10.99.99.99\\nX-Scheme: https\\nContent-Type: application/json\\n\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/{key}\": {\n      \"get\": {\n        \"tags\": [\n          \"key/value store\"\n        ],\n        \"description\": \"Read the value associated to key\",\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"example\": \"my-key\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The value associated with the key\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"My amazing key value\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"If the user is not authorized or the key is protected (keys prefixed with '$$$' are considered protected)\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"Not authorized.\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"If the key is not found\"\n          }\n        }\n      }\n    },\n    \"/generateToken\": {\n      \"get\": {\n        \"tags\": [\n          \"authorization\"\n        ],\n        \"description\": \"Generate an authentication token for the user. It first check for the header X-Forwarded-Email. The X-Forwarded-Email header is added by the OAuth proxy. Users of the API shouldn't provide it directly. The purpose of this token is, that we can use the API from MPS without having to provide an OAuth client inside MPS. In case the value is not present or empty and the address is trusted the email value default to localhost\",\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The token is created and stored, with an expiration of 7 days\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"49fc40bb2d884c078c2d535504daa1ec\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"If no email value is present and the address is not trusted the token cannot be generated\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"Not logged in.\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/getEmail\": {\n      \"get\": {\n        \"tags\": [\n          \"authorization\"\n        ],\n        \"description\": \"Retrieve the email associated to a given token\",\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"It returns the email associated with the token, if a token has been provided. Otherwise it returns the value '<no email>'\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"foo@bar.com\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"If there is not proper authorization. Proper authorization is presented either when the request comes from a trusted address or when the Authorization header contains a proper value\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"Not authorized.\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/counter/{key}\": {\n      \"post\": {\n        \"tags\": [\n          \"key/value store\"\n        ],\n        \"description\": \"Increase a counter associated with the key. When the model client connects to the model server it uses this to  receive a unique client ID. This client ID is used for the first 32 bits of all generated node IDs.\",\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"example\": \"my-key\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The value associated with the key\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"1\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"If there is not proper authorization. Proper authorization is presented either when the request comes from a trusted address or when the Authorization header contains a proper value. Also requests for protected keys cause this answer\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"Not authorized.\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/getRecursively/{key}\": {\n      \"get\": {\n        \"tags\": [\n          \"key/value store\"\n        ],\n        \"description\": \"Read the value associated with the key. The value is then examined for hashes, which are then explored, recursively\",\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"example\": \"my-key\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The values associated with the key and its descendants. Note that if a key has no associated value the corresponding JSON element will not have the value entry\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"key\": {\n                        \"type\": \"string\"\n                      },\n                      \"value\": {\n                        \"type\": \"string\",\n                      },\n                    },\n                    \"required\": [\"key\"]\n                  },\n                  \"example\": \"[\\n    {\\n        \\\"value\\\": \\\"12\\\",\\n        \\\"key\\\": \\\"abc\\\"\\n    }\\n]\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"If the user is not authorized or the key is protected (keys prefixed with '$$$' are considered protected)\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"Not authorized.\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"If the key is not found\"\n          }\n        }\n      }\n    },\n    \"/put/{key}\": {\n      \"put\": {\n        \"tags\": [\n          \"key/value store\"\n        ],\n        \"description\": \"Set the value associated to key\",\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"example\": \"my-key\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"Value to associate to the key\",\n          \"required\": true,\n          \"content\": {\n            \"text/plain\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A simple confirmation message\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"OK\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"If the user is not authorized or the key is protected (keys prefixed with '$$$' are considered protected)\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"Not authorized.\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"If traversing the key we encounter an unknown key\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/putAll\": {\n      \"put\": {\n        \"tags\": [\n          \"key/value store\"\n        ],\n        \"description\": \"Set a list of given keys and values\",\n        \"parameters\": [\n\n        ],\n        \"requestBody\": {\n          \"description\": \"List of keys and values\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"key\": {\n                      \"type\": \"string\"\n                    },\n                    \"value\": {\n                      \"type\": \"string\",\n                    }\n                  },\n                  \"required\": [\"key\"]\n                },\n                \"example\": \"[\\n    {\\n        \\\"value\\\": \\\"12\\\",\\n        \\\"key\\\": \\\"abc\\\"\\n    }\\n]\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A simple confirmation message\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"2 entries written\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"If the user is not authorized or the key is protected (keys prefixed with '$$$' are considered protected)\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"If traversing the key we encounter an unknown key\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/subscribe/{key}\": {\n      \"get\": {\n        \"tags\": [\n          \"key/value store\"\n        ],\n        \"description\": \"Subscribe to get notified of changes to a given key\",\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"example\": \"my-key\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"default\": {\n            \"description\": \"Changes for subscribed key\",\n            \"content\": {\n              \"x-events\": {\n                \"example\": \"the-new-key-value\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/github.com/modelix/modelix@efb4b04e128fa876c5018dd61a7f299181a2e85f/-/blob/model-server/doc/model-server.json",
			"externalURLs": [
				{
					"url": "https://github.com/modelix/modelix/blob/efb4b04e128fa876c5018dd61a7f299181a2e85f/model-server/doc/model-server.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidJSON: consume: object: object: object: object: object: object: object: object: object: object: object: object: unexpected byte 125 '}'"
}