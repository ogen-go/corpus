{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kyhau/aws-tools"
		},
		"file": {
			"name": "private-api-backend.yaml.bkup",
			"path": "APIGateway/cfn/private-api-backend.yaml.bkup",
			"content": "AWSTemplateFormatVersion: 2010-09-09\nTransform: AWS::Serverless-2016-10-31\nDescription: Private API demo backend resources\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n    - Label:\n        default: Access control\n      Parameters:\n      - pTrustedPrincipals\n      - pAPIAccessList\n      - pAllowedVPCEndpoints\n      - pEnableWAF\n    - Label:\n        default: API details\n      Parameters:\n      - pAPIStageName\n      - pAPIAccessLogRetention\n      - pAPIGatewayAccountRole\n    - Label:\n        default: Network details (optional)\n      Parameters:\n      - pVPCID\n      - pLambdaSubnetIDs\n      - pCreateDDBEndpoint\n      - pLambdaSubnetRouteTable\n    ParameterLabels:\n      pTrustedPrincipals:\n        default: Who can assume the role for API access?\n      pAPIAccessList:\n        default: Who can access the API directly (without assuming the role)?\n      pAllowedVPCEndpoints:\n        default: VPC Endpoint IDs to whitelist\n      pAPIStageName:\n        default: API Stage name\n      pAPIAccessLogRetention:\n        default: API Access Log retention\n      pAPIGatewayAccountRole:\n        default: Create a Cloudwatch Logs role for API Gateway?\n      pEnableWAF:\n        default: Enable AWS WAF on the API?\n      pVPCID:\n        default: VPC ID\n      pLambdaSubnetIDs:\n        default: List of Lambda function VPC subnets\n      pCreateDDBEndpoint:\n        default: Create DDB VPC endpoint?\n      pLambdaSubnetRouteTable:\n        default: ID of the route table to update with DDB endpoint\nParameters:\n  pTrustedPrincipals:\n    Description: 'For access using assume role: The list of principals (AWS accounts\n      or ARNs) that can assume the API execution role'\n    Type: CommaDelimitedList\n    Default: Nobody\n  pAPIAccessList:\n    Description: 'For direct access from the client: List of principals that will\n      be explicitly  granted access to the API via resource policy'\n    Type: String\n    Default: None\n    AllowedPattern: ^[a-zA-Z0-9\\-,_:\\/]*$\n  pAllowedVPCEndpoints:\n    Description: 'Comma separated whitelist of VPC endpoint IDs that will be added\n      to the condition  on the API Gateway resource policy. '\n    Type: String\n    Default: None\n    AllowedPattern: ^[a-zA-Z0-9\\-,]*$\n  pAPIStageName:\n    Description: API stage name (first component of the API path).\n    Type: String\n    Default: Prod\n    AllowedPattern: ^[a-zA-Z0-9\\-_]+$\n  pAPIAccessLogRetention:\n    Description: Number of days to retain API Gateway access logs in CloudWatch\n    Type: Number\n    Default: 60\n    AllowedValues:\n    - 1\n    - 3\n    - 5\n    - 7\n    - 14\n    - 30\n    - 60\n    - 90\n    - 120\n    - 150\n    - 180\n    - 365\n    - 400\n    - 545\n    - 731\n    - 1827\n    - 3653\n  pAPIGatewayAccountRole:\n    Description: Whether to create an account level role for API gateway allowing\n      Cloudwatch Logs access.  Required only if it has not already been set.\n    Type: String\n    Default: 'Yes'\n    AllowedValues:\n    - 'Yes'\n    - 'No'\n  pEnableWAF:\n    Description: Whether to enable AWS WAF on the API\n    Type: String\n    Default: 'Yes'\n    AllowedValues:\n    - 'Yes'\n    - 'No'\n  pVPCID:\n    Description: VPC ID in which to deploy the API backend Lambda function and DynamoDB\n      endpoint. This value is optional, if you do not specify a VPC there will be\n      no VPC configuration applied.\n    Type: String\n    Default: ''\n  pLambdaSubnetIDs:\n    Description: List of subnet IDs for the Lambda function ENIs.  Required only if\n      you are deploying into a VPC.\n    Type: CommaDelimitedList\n    Default: ''\n  pCreateDDBEndpoint:\n    Description: Set to No if there is already a DDB endpoint in your VPC. This is\n      ignored if you are not deploying into a VPC.\n    Type: String\n    Default: 'Yes'\n    AllowedValues:\n    - 'Yes'\n    - 'No'\n  pLambdaSubnetRouteTable:\n    Description: ID of the route table to update with the DDB endpoint route. Required\n      only if you are deploying into a VPC and creating the DDB endpoint.\n    Type: String\n    Default: None\n    AllowedPattern: ^(None|[a-zA-Z0-9\\-]*)$\nConditions:\n  cHasAllowedEndpoints:\n    Fn::Not:\n    - Fn::Equals:\n      - Ref: pAllowedVPCEndpoints\n      - None\n  cAPIAccessSpecified:\n    Fn::Not:\n    - Fn::Equals:\n      - Ref: pAPIAccessList\n      - None\n  cRoleTrustSpecified:\n    Fn::Not:\n    - Fn::Equals:\n      - Fn::Select:\n        - 0\n        - Ref: pTrustedPrincipals\n      - Nobody\n  cCreateAPIGatewayAccountRole:\n    Fn::Equals:\n    - Ref: pAPIGatewayAccountRole\n    - 'Yes'\n  cEnableWAF:\n    Fn::Equals:\n    - Ref: pEnableWAF\n    - 'Yes'\n  cDeployToVPC:\n    Fn::Not:\n    - Fn::Equals:\n      - Ref: pVPCID\n      - ''\n  cCreateDDBEndpoint:\n    Fn::And:\n    - Condition: cDeployToVPC\n    - Fn::Equals:\n      - Ref: pCreateDDBEndpoint\n      - 'Yes'\n  cUpdateRouteTable:\n    Fn::And:\n    - Condition: cDeployToVPC\n    - Fn::Not:\n      - Fn::Equals:\n        - Ref: pLambdaSubnetRouteTable\n        - None\nResources:\n  rAccessLogsGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName:\n        Fn::Sub: ${AWS::StackName}-APIAccessLogs\n      RetentionInDays:\n        Ref: pAPIAccessLogRetention\n  rAPIGatewayAccountRole:\n    Type: AWS::IAM::Role\n    Condition: cCreateAPIGatewayAccountRole\n    Properties:\n      ManagedPolicyArns:\n      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service: apigateway.amazonaws.com\n          Action: sts:AssumeRole\n  rAPIGatewayAccountSettings:\n    Type: AWS::ApiGateway::Account\n    Condition: cCreateAPIGatewayAccountRole\n    DependsOn: rAPI\n    Properties:\n      CloudWatchRoleArn:\n        Fn::GetAtt:\n        - rAPIGatewayAccountRole\n        - Arn\n  rAPIAccessRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal:\n            AWS:\n              Fn::If:\n              - cRoleTrustSpecified\n              - Ref: pTrustedPrincipals\n              - Ref: AWS::AccountId\n          Action: sts:AssumeRole\n  rAPIAccessPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      Roles:\n      - Ref: rAPIAccessRole\n      PolicyName:\n        Fn::Sub: ${AWS::StackName}-APIAccessPolicy\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Action: execute-api:Invoke\n          Resource:\n            Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${rAPI}/*\n  rAPI:\n    Type: AWS::Serverless::Api\n    DependsOn: rAPIFunction\n    Properties:\n      AccessLogSetting:\n        DestinationArn:\n          Fn::GetAtt:\n          - rAccessLogsGroup\n          - Arn\n        Format: '{ \"requestId\":\"$context.requestId\", \"waf-error\":\"$context.waf.error\",\n          \"waf-status\":\"$context.waf.status\", \"waf-latency\":\"$context.waf.latency\",\n          \"waf-response\":\"$context.waf.wafResponseCode\", \"authenticate-error\":\"$context.authenticate.error\",\n          \"authenticate-status\":\"$context.authenticate.status\", \"authenticate-latency\":\"$context.authenticate.latency\",\n          \"integration-error\":\"$context.integration.error\", \"integration-status\":\"$context.integration.status\",\n          \"integration-latency\":\"$context.integration.latency\", \"integration-requestId\":\"$context.integration.requestId\",\n          \"integration-integrationStatus\":\"$context.integration.integrationStatus\",\n          \"response-latency\":\"$context.responseLatency\", \"ip\": \"$context.identity.sourceIp\",\n          \"caller\":\"$context.identity.caller\", \"user\":\"$context.identity.user\", \"arn\":\"$context.identity.userArn\",\n          \"account\":\"$context.identity.accountId\", \"requestTime\":\"$context.requestTime\",\n          \"httpMethod\":\"$context.httpMethod\", \"resourcePath\":\"$context.resourcePath\",\n          \"status\":\"$context.status\", \"message\":\"$context.error.message\", \"protocol\":\"$context.protocol\",\n          \"responseLength\":\"$context.responseLength\" }'\n      Auth:\n        DefaultAuthorizer: AWS_IAM\n        InvokeRole: NONE\n      EndpointConfiguration: PRIVATE\n      Name:\n        Fn::Sub: ${AWS::StackName}-API\n      StageName:\n        Ref: pAPIStageName\n      MethodSettings:\n      - HttpMethod: '*'\n        ResourcePath: /*\n        LoggingLevel: INFO\n        MetricsEnabled: true\n      DefinitionBody:\n        openapi: 3.0.1\n        info:\n          title: Private API Demo\n          version: '0.1'\n        paths:\n          /:\n            get:\n              x-amazon-apigateway-integration:\n                uri:\n                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rAPIFunction.Arn}/invocations\n                content_handling: CONVERT_TO_TEXT\n                passthroughBehaviour: when_no_match\n                httpMethod: POST\n                type: aws_proxy\n        x-amazon-apigateway-policy:\n          Version: '2012-10-17'\n          Statement:\n          - Effect: Allow\n            Principal:\n              AWS:\n                Fn::Split:\n                - ','\n                - Fn::Join:\n                  - ','\n                  - - Fn::GetAtt: rAPIAccessRole.Arn\n                    - Fn::If:\n                      - cAPIAccessSpecified\n                      - Ref: pAPIAccessList\n                      - Ref: AWS::NoValue\n            Action: execute-api:Invoke\n            Resource: execute-api:/*\n          - Fn::If:\n            - cHasAllowedEndpoints\n            - Effect: Deny\n              Principal: '*'\n              Action: execute-api:Invoke\n              Resource: execute-api:/*\n              Condition:\n                StringNotEquals:\n                  aws:SourceVpce:\n                    Fn::Split:\n                    - ','\n                    - Ref: pAllowedVPCEndpoints\n            - Ref: AWS::NoValue\n  rDDBTable:\n    Type: AWS::Serverless::SimpleTable\n    Properties:\n      SSESpecification:\n        SSEEnabled: true\n        SSEType: KMS\n  rAPIFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: api-backend.handler\n      Runtime: python3.7\n      Description: Receives API requests for invocations through API Gateway\n      MemorySize: 128\n      Timeout: 10\n      Events:\n        GetApi:\n          Type: Api\n          Properties:\n            Path: /\n            Method: GET\n            RestApiId:\n              Ref: rAPI\n      CodeUri: s3://private-api-deployment-ap-southeast-2-818427450946/78f61f94d358e82299c7f3e1b2014561\n      Environment:\n        Variables:\n          DDB_TABLE:\n            Ref: rDDBTable\n      VpcConfig:\n        Fn::If:\n        - cDeployToVPC\n        - SecurityGroupIds:\n          - Fn::GetAtt:\n            - rAPIFunctionSecurityGroup\n            - GroupId\n          SubnetIds:\n            Fn::Split:\n            - ','\n            - Fn::Join:\n              - ','\n              - Ref: pLambdaSubnetIDs\n        - Ref: AWS::NoValue\n      Policies:\n      - VPCAccessPolicy: {}\n      - DynamoDBCrudPolicy:\n          TableName:\n            Ref: rDDBTable\n  rWAF:\n    Type: AWS::WAFv2::WebACL\n    Condition: cEnableWAF\n    Properties:\n      Name:\n        Fn::Sub: ${AWS::StackName}-WAF-WebACL\n      Scope: REGIONAL\n      Description: WAF WebACL with AWS Managed rules\n      DefaultAction:\n        Allow: {}\n      VisibilityConfig:\n        SampledRequestsEnabled: true\n        CloudWatchMetricsEnabled: true\n        MetricName:\n          Fn::Sub: ${AWS::StackName}-API\n      Rules:\n      - Name: AWSManagedWAFRules\n        Priority: 0\n        OverrideAction:\n          None: {}\n        VisibilityConfig:\n          SampledRequestsEnabled: true\n          CloudWatchMetricsEnabled: true\n          MetricName:\n            Fn::Sub: ${AWS::StackName}-AWSCommon\n        Statement:\n          ManagedRuleGroupStatement:\n            VendorName: AWS\n            Name: AWSManagedRulesCommonRuleSet\n            ExcludedRules: []\n  rWAFAssociation:\n    Type: AWS::WAFv2::WebACLAssociation\n    Condition: cEnableWAF\n    DependsOn: rAPIStage\n    Properties:\n      ResourceArn:\n        Fn::Sub: arn:aws:apigateway:${AWS::Region}::/restapis/${rAPI}/stages/${pAPIStageName}\n      WebACLArn:\n        Fn::GetAtt:\n        - rWAF\n        - Arn\n  rGetPLResourceFunction:\n    Type: AWS::Serverless::Function\n    Condition: cDeployToVPC\n    Properties:\n      Description: Retrieve prefix lists for use in Security Groups\n      Runtime: python3.7\n      Handler: lambda_function.handler\n      CodeUri: s3://private-api-deployment-ap-southeast-2-818427450946/3256beaa6ed5fec6c779c8c6d3b08d9e\n      Timeout: 300\n      Environment:\n        Variables:\n          Logging: Debug\n      Policies:\n      - Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Action: ec2:DescribePrefixLists\n          Resource: '*'\n  rDDBPrefixListID:\n    Type: Custom::GetPLResource\n    Condition: cDeployToVPC\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - rGetPLResourceFunction\n        - Arn\n      loglevel: debug\n      PrefixListName:\n        Fn::Sub: com.amazonaws.${AWS::Region}.dynamodb\n  rAPIFunctionSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Condition: cDeployToVPC\n    Properties:\n      Tags:\n      - Key: Name\n        Value:\n          Fn::Sub: ${AWS::StackName}-APIBackend-SecurityGroup\n      GroupDescription: Control API backend function network access\n      VpcId:\n        Ref: pVPCID\n      SecurityGroupEgress:\n      - Description: Allow DNS outbound\n        CidrIp: '0.0.0.0/0'\n        IpProtocol: udp\n        FromPort: 53\n        ToPort: 53\n      - Description: Allow DynamoDB outbound, using prefix list\n        IpProtocol: tcp\n        FromPort: 443\n        ToPort: 443\n        DestinationPrefixListId:\n          Fn::GetAtt:\n          - rDDBPrefixListID\n          - PrefixListID\n  rDDBEndpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Condition: cCreateDDBEndpoint\n    Properties:\n      VpcEndpointType: Gateway\n      VpcId:\n        Ref: pVPCID\n      ServiceName:\n        Fn::Sub: com.amazonaws.${AWS::Region}.dynamodb\n      RouteTableIds:\n      - Fn::If:\n        - cUpdateRouteTable\n        - Ref: pLambdaSubnetRouteTable\n        - Ref: AWS::NoValue\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal: '*'\n          Action:\n          - dynamodb:Batch*\n          - dynamodb:DeleteItem\n          - dynamodb:DescribeTable\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:Query\n          - dynamodb:Scan\n          - dynamodb:UpdateItem\n          Resource:\n            Fn::GetAtt:\n            - rDDBTable\n            - Arn\nOutputs:\n  APIGatewayID:\n    Description: API Gateway ID\n    Value:\n      Ref: rAPI\n  APIGatewayFQDN:\n    Description: Fully qualified domain name of the API Gateway\n    Value:\n      Fn::Sub: ${rAPI}.execute-api.${AWS::Region}.amazonaws.com\n  APIAccessRole:\n    Description: ARN of the access role for the function to assume\n    Value:\n      Fn::GetAtt:\n      - rAPIAccessRole\n      - Arn\n"
		}
	},
	"Error": "invalid json"
}