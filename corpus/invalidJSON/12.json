{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Semprini/pyMDG"
		},
		"file": {
			"name": "openapi.yaml.jinja",
			"path": "mdg/templates/Schema/openapi.yaml.jinja",
			"content": "---\nopenapi: \"3.0.0\"\n\ninfo:\n  version: 1.0.0\n  title: '{{ package.documentation }}'\n\nservers:\n- url: http://127.0.0.1:8000/{env}/api\n  variables:\n    env:\n      enum:\n        - dev\n        - test\n        - prod\n      default: dev\n\npaths:{% for cls in package.classes %}{% if cls.is_abstract == False and cls.id_attribute %}\n  \"{{ package.path | snakecase }}{{ cls.get_name() | snakecase }}/\":\n    get:\n      operationId: {{ package.path[1:] | snakecase | replace('/', '_') }}{{ cls.get_name() | snakecase }}_list\n      parameters:\n        - in: query\n          name: page_key\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: 'The max number of records to return'\n          schema:\n            type: integer{% for assoc in cls.associations_from %}{% if assoc.cardinality.name in [\"MANY_TO_ONE\", \"ONE_TO_ONE\"] %}\n        - in: query\n          name: {{ assoc.destination_name | snakecase }}\n          schema:\n            type: {{ assoc.destination.id_attribute.dest_type }}{% endif %}{% endfor %}\n      description: |\n        {{ cls.documentation.replace(\"\\n\",\"\\n        \") }}\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/{{ cls.get_name() | camelcase }}_list\"\n\n  \"{{ package.path | snakecase }}{{ cls.get_name() | snakecase }}/{% raw %}{{% endraw %}{{ cls.id_attribute.name | snakecase }}{% raw %}}{% endraw %}/\":\n    get:\n      operationId: {{ package.path[1:] | snakecase | replace('/', '_') }}{{ cls.get_name() | snakecase }}_entity\n      parameters:\n        - name: {{ cls.id_attribute.name | snakecase }}\n          in: path\n          required: true\n          schema:\n            type: {{ cls.id_attribute.dest_type }}\n      description: |\n        {{ cls.documentation.replace(\"\\n\",\"\\n        \") }}\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/{{ cls.get_name() | camelcase }}\"{% if cls.associations_from != [] or cls.associations_to != [] %}\n          links:{% for assoc in cls.associations_from %}{% if assoc.destination.is_abstract == False %}\n            {{ assoc.destination_name | snakecase }}:\n              operationId: {{ assoc.destination.package.path[1:] | snakecase | replace('/', '_') }}{{ assoc.destination.name | snakecase }}_entity\n              parameters:\n                {{ assoc.destination.id_attribute.name | snakecase }}: '$response.body#/{{ assoc.destination_name | snakecase }}'{% endif %}{% endfor %}{% for assoc in cls.associations_to %}{% if assoc.destination.is_abstract == False %}\n            {{ assoc.source_name | snakecase }}:\n              operationId: {{ assoc.source.package.path[1:] | snakecase | replace('/', '_') }}{{ assoc.source.name | snakecase }}_list\n              parameters:\n                {{ assoc.destination_name | snakecase }}: $request.path.{{ cls.id_attribute.name | snakecase }}{% endif %}{% endfor %}{% endif %}\n{% endif %}{% endfor %}\ncomponents:\n  schemas:{% for cls in package.classes %}\n    {{ cls.get_name() | camelcase }}_list:\n      type: object\n      description: 'List of {{ cls.get_name() }}'\n      properties:\n        result:\n          type: array\n          items:\n            $ref: \"#/components/schemas/{{ cls.get_name() | camelcase }}\"\n        next_page_key:\n          type: string\n\n    {{ cls.get_name() | camelcase }}_basic:\n      type: object\n      description: 'Basic view of {{ cls.get_name() }}'\n      properties:{% if cls.id_attribute %}\n        object_url:\n          type: string\n          format: uri\n          description: \"The URL to this object\"\n          readOnly: true\n        object_type:\n          type: string\n          description: \"The name of this object type\"\n          readOnly: true{% endif %}{% for attr in cls.attributes %}\n        {{ attr.name | snakecase }}:\n          description: '{{ attr.documentation.replace(\"\\n\",\"|\") }}'\n          type: {% if attr.dest_type in [\"date\",\"date-time\",\"datetime\",\"date time\"] %}string\n          format: date-time{% elif attr.classification %}string\n          enum:{% for enum in attr.classification.values %}\n          - {{ enum }}{% endfor %}{% elif attr.dest_type == \"float\" %}number\n          format: float{% else %}{{ attr.dest_type }}{% endif %}{% endfor %}\n\n    {{ cls.get_name() | camelcase }}:\n      {% if not cls.supertype %}type: object\n      description: 'Basic view of {{ cls.get_name() }}'\n      properties:\n        object_url:\n          type: string\n          format: uri\n          description: \"The URL to this object\"\n          readOnly: true\n        object_type:\n          type: string\n          description: \"The name of this object type\"\n          readOnly: true{% for attr in cls.attributes %}\n        {{ attr.name | snakecase }}:\n          description: '{{ attr.documentation.replace(\"\\n\",\"|\") }}'\n          type: {% if attr.dest_type in [\"date\",\"date-time\",\"datetime\",\"date time\"] %}string\n          format: date-time{% elif attr.classification %}string\n          enum:{% for enum in attr.classification.values %}\n          - {{ enum }}{% endfor %}{% elif attr.dest_type == \"float\" %}number\n          format: float{% else %}{{ attr.dest_type }}{% endif %}{% endfor %}{% for assoc in cls.associations_from %}\n        {{ assoc.destination_name | snakecase }}:\n          {% if assoc.cardinality.name not in [ \"MANY_TO_MANY\", \"ONE_TO_MANY\" ] %}{% if assoc.destination.name != cls.get_name() %}{% if assoc.destination.package.name == cls.package.name %}$ref: \"#/components/schemas/{{ assoc.destination.name | camelcase }}_basic\"{% else %}$ref: \"./{{ assoc.destination.package.name | camelcase }}.yaml#/components/schemas/{{ assoc.destination.name | camelcase }}_basic\"{% endif %}{% else %}  type: {{ assoc.destination.id_attribute.dest_type }}{% endif %}{% else %}type: array\n          items:\n            oneOf:\n              - type: {{ assoc.destination.id_attribute.dest_type }}\n                format: uri\n              - {% if assoc.destination.package.name == cls.package.name %}$ref: \"#/components/schemas/{{ assoc.destination.name | camelcase }}_basic\"{% else %}$ref: \"./{{ assoc.destination.package.name | camelcase }}.yaml#/components/schemas/{{ assoc.destination.name | camelcase }}_basic\"{% endif %}{% endif %}{% endfor %}{% for assoc in cls.associations_to %}{% if assoc.association_type.name == \"COMPOSITION\" %}\n        {{ assoc.source_name | snakecase }}:\n          {% if assoc.cardinality.name == \"MANY_TO_ONE\" %}type: array\n          items:\n            {% endif %}$ref: \"#/components/schemas/{{ assoc.source.name | camelcase }}_basic\"{% endif %}{% endfor %}{% else %}allOf:\n        - $ref: \"#/components/schemas/{{ cls.supertype.name | camelcase }}\"\n        - type: object{% if cls.attributes|length !=0 %}\n          properties:{% endif %}{% for attr in cls.attributes %}\n            {{ attr.name | snakecase }}:\n              type: {% if attr.dest_type in [\"date\",\"date-time\",\"datetime\",\"date time\"] %}string\n              format: date-time{% elif attr.classification %}string\n              enum:{% for enum in attr.classification.values %}\n              - {{ enum }}{% endfor %}{% elif attr.dest_type == \"float\" %}number\n              format: float{% else %}{{ attr.dest_type }}{% endif %}{% endfor %}{% for assoc in cls.associations_from %}\n            {{ assoc.destination_name | snakecase }}:\n              {% if assoc.cardinality.name not in [ \"MANY_TO_MANY\", \"ONE_TO_MANY\" ] %}{% if assoc.destination.name != cls.get_name() %}{% if assoc.destination.package.name == cls.package.name %}$ref: \"#/components/schemas/{{ assoc.destination.name | camelcase }}_basic\"{% else %}$ref: \"./{{ assoc.destination.package.name | camelcase }}.yaml#/components/schemas/{{ assoc.destination.name | camelcase }}_basic\"{% endif %}{% else %}  type: {{ assoc.destination.id_attribute.dest_type }}{% endif %}{% else %}type: array\n              items:\n                oneOf:\n                  - type: {{ assoc.destination.id_attribute.dest_type }}\n                    format: uri\n                  - {% if assoc.destination.package.name == cls.package.name %}$ref: \"#/components/schemas/{{ assoc.destination.name | camelcase }}_basic\"{% else %}$ref: \"./{{ assoc.destination.package.name | camelcase }}.yaml#/components/schemas/{{ assoc.destination.name | camelcase }}_basic\"{% endif %}{% endif %}{% endfor %}{% endif %}\n{% endfor %}\n"
		}
	},
	"Error": "invalid json"
}