{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/networknt/light-codegen"
		},
		"file": {
			"name": "template.yaml.rocker.raw",
			"path": "light-rest-4j/src/main/resources/templates/lambda/template.yaml.rocker.raw",
			"content": "@import java.util.Map\n@import java.util.List\n@import com.networknt.codegen.rest.OpenApiLambdaGenerator.OpenApiPath;\n@import com.networknt.codegen.rest.OpenApiLambdaGenerator.MethodFunction;\n@args (String projectName, String handlerPackage, boolean packageDocker, boolean useLightProxy, List\u003cMap\u003cString, Object\u003e\u003e operationList, List\u003cOpenApiPath\u003e pathList)\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: \u003e\n  @projectName\n\n  Sample SAM Template for @projectName\n\n# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst\nGlobals:\n  Function:\n    Timeout: 20\n\nResources:\n  @if(!useLightProxy){\n  ApiGateway:\n    Type: AWS::Serverless::Api\n    Properties:\n      StageName: Prod\n      DefinitionBody:\n        openapi: 3.0.1\n        info:\n          title:\n            Ref: AWS::StackName\n        components:\n          securitySchemes:\n            jwt-authorizer:\n              type: apiKey\n              name: Authorization\n              in: header\n              x-amazon-apigateway-authtype: custom\n              x-amazon-apigateway-authorizer:\n                identitySource: method.request.header.Authorization\n                type: request\n                authorizerUri:\n                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:964637446810:function:Authorizer/invocations\n                authorizerResultTtlInSeconds: 0\n        paths:\n          @for(ap: pathList){\n          @ap.getPath():\n            @for(mf: ap.getMethodList()){\n            @with(s = mf.getMethod()){@s}:\n              x-amazon-apigateway-integration:\n                httpMethod: post\n                type: aws_proxy\n                uri:\n                  @with(s = \"Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${\" + mf.getFunctionName() + \".Arn}/invocations\"){@s}\n              responses: {}\n              security:\n                - jwt-authorizer: []\n            }\n          }\n  }\n  @for(op : operationList) {\n  @with(s = op.get(\"functionName\") + \":\"){@s}\n    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction\n    Properties:\n      @if(packageDocker) {\n      PackageType: Image\n      } else {\n      @with(s = op.get(\"functionName\")){CodeUri: @s}\n      @with(s = handlerPackage + \".App::handleRequest\"){Handler: @s}\n      Runtime: provided\n      MemorySize: 512\n      FunctionName: @with(s = op.get(\"functionName\")){@s}\n      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object\n        Variables:\n          PARAM1: VALUE\n      }\n      Events:\n        @with(s = op.get(\"apiName\") + \":\"){@s}\n          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api\n          Properties:\n            @with(s = op.get(\"path\")){Path: @s}\n            @with(s = op.get(\"method\")){Method: @s}\n            @if(!useLightProxy){\n            RestApiId:\n              Ref: ApiGateway\n            }\n    @if(packageDocker) {\n    Metadata:\n      DockerTag: java11-maven-v1\n      DockerContext: ./@with(s = op.get(\"functionName\")){@s}\n      Dockerfile: Dockerfile\n    }\n  }\n  @if(!useLightProxy){\n  AuthorizerPerm:\n    Type: AWS::Lambda::Permission\n    DependsOn:\n      - ApiGateway\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: arn:aws:lambda:us-east-2:964637446810:function:Authorizer\n      Principal: apigateway.amazonaws.com\n      SourceArn:\n        'Fn::Sub': 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*'\n  }\n"
		}
	},
	"Error": "invalid json"
}