{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/arthurfauq/generator-exprest-api"
		},
		"file": {
			"name": "openapi.yml.ejs",
			"path": "generators/app/templates/src/public/doc/openapi.yml.ejs",
			"content": "openapi: 3.0.0\ninfo:\n  title: \u003c%- name %\u003e\n  version: 0.0.0\n  description: |\n    # Introduction\n    This is the API documentation of **\u003c%- name %\u003e**. It is documented in *OpenAPI* format.\n\u003c% if (jwt) { %\u003e\n    # Authentication\n    \u003c%- name %\u003e uses **JWT** Bearer authentication to authenticate requests.\n\n    Protected endpoints require an HTTP Bearer Authorization header in the form of:\n\n    ```\n    Authorization: Bearer \u003ctoken\u003e\n    ```\n\n    \u003cSecurityDefinitions /\u003e\n\u003c% } %\u003e\n    # Errors\n\n    This API uses conventional HTTP response codes to indicate the success or failure of an API request.\n\n    All errors are in the following format:\n\n    | Attribute   | Type     | Description                                                 |\n    |-------------|----------|-------------------------------------------------------------|\n    | **status**  | *number* | HTTP response code (`2xx`, `4xx`, `500`)                    |\n    | **name**    | *string* | Name of the error (`ValidationError`, `NotFoundError`, etc) |\n    | **message** | *string* | A readable error message\nservers:\n  - url: http://localhost:8080/api\n    description: Local development server\u003c% if (auth) { %\u003e\ntags:\n  - name: auth-login\n    x-displayName: Login\nx-tagGroups:\n  - name: Auth\n    tags:\n      - auth-login\u003c% } %\u003e\npaths:\n  /health:\n    get:\n      summary: Health route\n      responses:\n        200:\n          description: OK\u003c% if (auth) { %\u003e\n  /auth/login:\n    post:\n      summary: Authenticate user\n      description: Authenticates a user and returns a JWT token.\n      tags:\n        - auth-login\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginDTO'\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                properties:\n                  token:\n                    type: string\n                    description: JWT token\n        401:\n          $ref: '#/components/responses/401'\u003c% } %\u003e\ncomponents:\u003c% if (jwt) { %\u003e\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\u003c% } %\u003e\n  responses:\n    201:\n      description: Created\n    204:\n      description: No Content\n    400:\n      description: Bad Request - Invalid or missing request parameters / body\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HttpError'\n    401:\n      description: Unauthorized - Invalid or missing authorization token\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HttpError'\n    403:\n      description: Forbidden - Access forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HttpError'\n    404:\n      description: Not Found - Resource not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HttpError'\n  schemas:\n    HttpError:\n      properties:\n        status:\n          type: number\n          description: HTTP error status\n          example: 400\n        name:\n          type: string\n          description: Error name\n          example: BadRequestError\n        message:\n          type: string\n          description: Readable error message\n          example: Missing parameter 'email'\u003c% if (auth) { %\u003e\n    LoginDTO:\n      description: User's credentials\n      required:\n        - email\n        - password\n      properties:\n        email:\n          type: string\n          format: email\n          nullable: false\n          description: Email of the user\n        password:\n          type: string\n          format: password\n          nullable: false\n          description: Password of the user\u003c% } %\u003e\n"
		}
	},
	"Error": "invalid json"
}