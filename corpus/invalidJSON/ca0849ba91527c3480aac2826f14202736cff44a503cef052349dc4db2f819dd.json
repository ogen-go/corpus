{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/pinecone-io/pinecone-python-client"
		},
		"file": {
			"name": "vector_service.openapi.json",
			"size": 0,
			"path": "specs/vector_service.openapi.json",
			"byteSize": 38111,
			"content": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n        \"title\": \"Pinecone API\",\n        \"version\": \"version not set\",\n        \"contact\": {\n            \"name\": \"Pinecone.io Ops\",\n            \"url\": \"https://pinecone.io\",\n            \"email\": \"support@pinecone.io\"\n        }\n    },\n    \"tags\": [\n        {\n            \"name\": \"Vector Operations\"\n        }\n    ],\n    \"paths\": {\n        \"/describe_index_stats\": {\n            \"get\": {\n                \"summary\": \"DescribeIndexStats\",\n                \"description\": \"The `DescribeIndexStats` operation returns statistics about the index's contents.\\nFor example: The vector count per namespace and the number of dimensions.\",\n                \"operationId\": \"describe_index_stats1\",\n                \"responses\": {\n                    \"200\": {\n                      \"description\": \"A successful response.\",\n                      \"content\": {\n                        \"application/json\": {\n                          \"schema\": {\n                            \"$ref\": \"#/components/schemas/DescribeIndexStatsResponse\"\n                          }\n                        }\n                      }\n                    },\n                    \"default\": {\n                      \"description\": \"An unexpected error response.\",\n                      \"content\": {\n                        \"application/json\": {\n                          \"schema\": {\n                            \"$ref\": \"#/components/schemas/rpcStatus\"\n                          }\n                        }\n                      }\n                    }\n                },\n                \"tags\": [\n                  \"Vector Operations\"\n                ]\n            },\n            \"post\": {\n                \"summary\": \"DescribeIndexStats\",\n                \"description\": \"The `DescribeIndexStats` operation returns statistics about the index's contents.\\nFor example: The vector count per namespace and the number of dimensions.\",\n                \"operationId\": \"describe_index_stats\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"A successful response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DescribeIndexStatsResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"An unexpected error response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/rpcStatus\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"requestBody\": {\n                  \"content\": {\n                    \"application/json\": {\n                      \"schema\": {\n                        \"$ref\": \"#/components/schemas/DescribeIndexStatsRequest\"\n                      }\n                    }\n                },\n                \"tags\": [\n                    \"Vector Operations\"\n                ]\n            }\n        },\n        \"/query\": {\n            \"post\": {\n                \"summary\": \"Query\",\n                \"description\": \"The `Query` operation searches a namespace, using a query vector.\\nIt retrieves the ids of the most similar items in a namespace, along with their similarity scores.\",\n                \"operationId\": \"query\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"A successful response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/QueryResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"An unexpected error response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/rpcStatus\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/QueryRequest\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"tags\": [\n                    \"Vector Operations\"\n                ]\n            }\n        },\n        \"/vectors/delete\": {\n            \"delete\": {\n                \"summary\": \"Delete\",\n                \"description\": \"The `Delete` operation deletes vectors, by id, from a single namespace.\\nYou can delete items by their id, from a single namespace.\",\n                \"operationId\": \"delete\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"A successful response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeleteResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"An unexpected error response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/rpcStatus\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"parameters\": [\n                    {\n                        \"name\": \"ids\",\n                        \"description\": \"Vectors to delete.\",\n                        \"in\": \"query\",\n                        \"required\": false,\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"deleteAll\",\n                        \"description\": \"This indicates that all vectors in the index namespace should be deleted.\",\n                        \"in\": \"query\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": \"false\"\n                        }\n                    },\n                    {\n                        \"name\": \"namespace\",\n                        \"description\": \"The namespace to delete vectors from, if applicable.\",\n                        \"in\": \"query\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"tags\": [\n                    \"Vector Operations\"\n                ]\n            },\n            \"post\": {\n                \"summary\": \"Delete\",\n                \"description\": \"The `Delete` operation deletes vectors, by id, from a single namespace.\\nYou can delete items by their id, from a single namespace.\",\n                \"operationId\": \"delete\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"A successful response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeleteResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"An unexpected error response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/rpcStatus\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeleteRequest\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"tags\": [\n                    \"Vector Operations\"\n                ]\n            }\n        },\n        \"/vectors/fetch\": {\n            \"get\": {\n                \"summary\": \"Fetch\",\n                \"description\": \"The `Fetch` operation looks up and returns vectors, by id, from a single namespace.\\nThe returned vectors include the vector data and/or metadata.\",\n                \"operationId\": \"fetch\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"A successful response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/FetchResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"An unexpected error response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/rpcStatus\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"parameters\": [\n                    {\n                        \"name\": \"ids\",\n                        \"description\": \"The vector ids to fetch.\",\n                        \"in\": \"query\",\n                        \"required\": true,\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"namespace\",\n                        \"in\": \"query\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"tags\": [\n                    \"Vector Operations\"\n                ]\n            }\n        },\n        \"/vectors/update\": {\n            \"post\": {\n                \"summary\": \"Update\",\n                \"description\": \"The `Update` operation updates vector in a namespace.\\nIf a value is included, it will overwrite the previous value.\\nIf a set_metadata is included, the values of the fields specified in it will be added or overwrite the previous value.\",\n                \"operationId\": \"update\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"A successful response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/UpdateResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"An unexpected error response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/rpcStatus\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/UpdateRequest\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"tags\": [\n                    \"Vector Operations\"\n                ]\n            }\n        },\n        \"/vectors/upsert\": {\n            \"post\": {\n                \"summary\": \"Upsert\",\n                \"description\": \"The `Upsert` operation writes vectors into a namespace.\\nIf a new value is upserted for an existing vector id, it will overwrite the previous value.\",\n                \"operationId\": \"upsert\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"A successful response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/UpsertResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"An unexpected error response.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/rpcStatus\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/UpsertRequest\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"tags\": [\n                    \"Vector Operations\"\n                ]\n            }\n        }\n    },\n    \"security\": [\n        {\n            \"ApiKeyAuth\": []\n        }\n    ],\n    \"externalDocs\": {\n        \"description\": \"More Pinecone.io API docs\",\n        \"url\": \"https://www.pinecone.io/docs\"\n    },\n    \"servers\": [\n        {\n            \"url\": \"https://{index_name}-{project_name}.svc.{environment}.pinecone.io\",\n            \"variables\": {\n                \"index_name\": {\n                    \"default\": \"unknown\"\n                },\n                \"project_name\": {\n                    \"default\": \"unknown\"\n                },\n                \"environment\": {\n                    \"default\": \"unknown\"\n                }\n            }\n        }\n    ],\n    \"components\": {\n        \"securitySchemes\": {\n            \"ApiKeyAuth\": {\n                \"type\": \"apiKey\",\n                \"description\": \"An API Key is required to call Pinecone APIs. Get yours at https://www.pinecone.io/start/\",\n                \"name\": \"Api-Key\",\n                \"in\": \"header\"\n            }\n        },\n        \"schemas\": {\n            \"DeleteRequest\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"ids\": {\n                        \"type\": \"array\",\n                        \"example\": [\n                            \"id-0\",\n                            \"id-1\"\n                        ],\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"description\": \"Vectors to delete.\",\n                        \"maxLength\": 1000,\n                        \"minLength\": 1\n                    },\n                    \"deleteAll\": {\n                        \"type\": \"boolean\",\n                        \"example\": false,\n                        \"default\": \"false\",\n                        \"description\": \"This indicates that all vectors in the index namespace should be deleted.\"\n                    },\n                    \"namespace\": {\n                        \"type\": \"string\",\n                        \"example\": \"example-namespace\",\n                        \"description\": \"The namespace to delete vectors from, if applicable.\"\n                    },\n                    \"filter\": {\n                        \"type\": \"object\",\n                        \"description\": \"If specified, the metadata filter here will be used to select the vectors to delete. This is mutually exclusive\\nwith specifying ids to delete in the ids param or using delete_all=True.\\nSee https://www.pinecone.io/docs/metadata-filtering/`.\"\n                    }\n                },\n                \"description\": \"The request for the `Delete` operation.\"\n            },\n            \"DeleteResponse\": {\n                \"type\": \"object\",\n                \"description\": \"The response for the `Delete` operation.\"\n            },\n          \"DescribeIndexStatsRequest\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"filter\": {\n                \"type\": \"object\",\n                \"title\": \"If specified, the metadata filter here will be used to select the vectors to get stats about.\\nSee https://www.pinecone.io/docs/metadata-filtering/`\"\n              },\n              \"description\": \"The request for the `DescribeIndexStats` operation.\"\n            },\n            \"DescribeIndexStatsResponse\": {\n                \"type\": \"object\",\n                \"example\": {\n                    \"namespaces\": {\n                        \"\": {\n                            \"vectorCount\": 50000\n                        },\n                        \"example-namespace-2\": {\n                            \"vectorCount\": 30000\n                        }\n                    },\n                    \"dimension\": 1024,\n                    \"index_fullness\": 0.42\n                },\n                \"properties\": {\n                    \"namespaces\": {\n                        \"type\": \"object\",\n                        \"additionalProperties\": {\n                            \"$ref\": \"#/components/schemas/NamespaceSummary\"\n                        },\n                        \"description\": \"A mapping for each namespace in the index from namespace name to a summary of its contents.\"\n                    },\n                    \"dimension\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\",\n                        \"example\": 1024,\n                        \"description\": \"The dimension of the indexed vectors.\"\n                    },\n                    \"indexFullness\": {\n                        \"type\": \"number\",\n                        \"format\": \"float\",\n                        \"example\": 0.42,\n                        \"description\": \"The fullness of the index.\"\n                    },\n                    \"totalVectorCount\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\",\n                        \"example\": 80000,\n                        \"title\": \"The total number of vectors in the index\"\n                    }\n                },\n                \"description\": \"The response for the `DescribeIndexStats` operation.\"\n            },\n            \"FetchResponse\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"vectors\": {\n                        \"type\": \"object\",\n                        \"additionalProperties\": {\n                            \"$ref\": \"#/components/schemas/Vector\"\n                        },\n                        \"title\": \"The fetched vectors, in the form of a map between the fetched ids and the fetched vectors\"\n                    },\n                    \"namespace\": {\n                        \"type\": \"string\",\n                        \"example\": \"example-namespace\",\n                        \"description\": \"The namespace of the vectors.\"\n                    }\n                },\n                \"description\": \"The response for the `Fetch` operation.\"\n            },\n            \"NamespaceSummary\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"vectorCount\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\",\n                        \"example\": 50000,\n                        \"description\": \"The number of vectors stored in this namespace. Note that updates to this field may lag behind updates to the\\nunderlying index and corresponding query results, etc.\"\n                    }\n                },\n                \"description\": \"A summary of the contents of a namespace.\"\n            },\n            \"QueryRequest\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"namespace\": {\n                        \"type\": \"string\",\n                        \"example\": \"example-namespace\",\n                        \"description\": \"The namespace to query.\"\n                    },\n                    \"topK\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\",\n                        \"example\": 10,\n                        \"description\": \"The number of results to return for each query.\",\n                        \"maximum\": 10000,\n                        \"minimum\": 1,\n                        \"required\": [\n                            \"top_k\"\n                        ]\n                    },\n                    \"filter\": {\n                        \"type\": \"object\",\n                        \"example\": {\n                            \"genre\": {\n                                \"$in\": [\n                                    \"comedy\",\n                                    \"documentary\",\n                                    \"drama\"\n                                ]\n                            },\n                            \"year\": {\n                                \"$eq\": 2019\n                            }\n                        },\n                        \"description\": \"The filter to apply. You can use vector metadata to limit your search. See https://www.pinecone.io/docs/metadata-filtering/.\"\n                    },\n                    \"includeValues\": {\n                        \"type\": \"boolean\",\n                        \"example\": true,\n                        \"default\": \"false\",\n                        \"description\": \"Indicates whether vector values are included in the response.\"\n                    },\n                    \"includeMetadata\": {\n                        \"type\": \"boolean\",\n                        \"example\": true,\n                        \"default\": \"false\",\n                        \"description\": \"Indicates whether metadata is included in the response as well as the ids.\"\n                    },\n                    \"queries\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/QueryVector\"\n                        },\n                        \"description\": \"DEPRECATED. The query vectors.\",\n                        \"maxLength\": 10,\n                        \"minLength\": 1\n                    },\n                    \"vector\": {\n                        \"type\": \"array\",\n                        \"example\": [\n                            0.1,\n                            0.2,\n                            0.3,\n                            0.4,\n                            0.5,\n                            0.6,\n                            0.7,\n                            0.8\n                        ],\n                        \"items\": {\n                            \"type\": \"number\",\n                            \"format\": \"float\"\n                        },\n                        \"description\": \"The query vector. This should be the same length as the dimension of the index being queried.\",\n                        \"maxLength\": 20000,\n                        \"minLength\": 1\n                    },\n                    \"id\": {\n                        \"type\": \"string\",\n                        \"example\": \"example-vector-1\",\n                        \"description\": \"The vector's unique id.\",\n                        \"maxLength\": 512\n                    }\n                },\n                \"description\": \"The request for the `Query` operation.\",\n                \"required\": [\n                    \"topK\"\n                ]\n            },\n            \"QueryResponse\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"results\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/SingleQueryResults\"\n                        },\n                        \"description\": \"DEPRECATED. The results of each query. The order is the same as `QueryRequest.queries`.\"\n                    },\n                    \"matches\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/ScoredVector\"\n                        },\n                        \"description\": \"The matches for the vectors.\"\n                    },\n                    \"namespace\": {\n                        \"type\": \"string\",\n                        \"description\": \"The namespace for the vectors.\"\n                    }\n                },\n                \"description\": \"The response for the `Query` operation. These are the matches found for a particular query vector. The matches are ordered from most similar to least similar.\"\n            },\n            \"QueryVector\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"values\": {\n                        \"type\": \"array\",\n                        \"example\": [\n                            0.1,\n                            0.2,\n                            0.3,\n                            0.4,\n                            0.5,\n                            0.6,\n                            0.7,\n                            0.8\n                        ],\n                        \"items\": {\n                            \"type\": \"number\",\n                            \"format\": \"float\"\n                        },\n                        \"description\": \"The query vector values. This should be the same length as the dimension of the index being queried.\",\n                        \"maxLength\": 20000,\n                        \"minLength\": 1,\n                        \"required\": [\n                            \"values\"\n                        ]\n                    },\n                    \"topK\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\",\n                        \"example\": 10,\n                        \"description\": \"An override for the number of results to return for this query vector.\",\n                        \"maximum\": 10000,\n                        \"minimum\": 1\n                    },\n                    \"namespace\": {\n                        \"type\": \"string\",\n                        \"example\": \"example-namespace\",\n                        \"description\": \"An override the namespace to search.\"\n                    },\n                    \"filter\": {\n                        \"type\": \"object\",\n                        \"example\": {\n                            \"genre\": {\n                                \"$in\": [\n                                    \"comedy\",\n                                    \"documentary\",\n                                    \"drama\"\n                                ]\n                            },\n                            \"year\": {\n                                \"$eq\": 2019\n                            }\n                        },\n                        \"description\": \"An override for the metadata filter to apply. This replaces the request-level filter.\"\n                    }\n                },\n                \"description\": \"A single query vector within a `QueryRequest`.\",\n                \"required\": [\n                    \"values\"\n                ]\n            },\n            \"ScoredVector\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\",\n                        \"example\": \"example-vector-1\",\n                        \"description\": \"This is the vector's unique id.\",\n                        \"maxLength\": 512,\n                        \"minLength\": 1,\n                        \"required\": [\n                            \"id\"\n                        ]\n                    },\n                    \"score\": {\n                        \"type\": \"number\",\n                        \"format\": \"float\",\n                        \"example\": 0.08,\n                        \"description\": \"This is a measure of similarity between this vector and the query vector.  The higher the score, the more they are similar.\"\n                    },\n                    \"values\": {\n                        \"type\": \"array\",\n                        \"example\": [\n                            0.1,\n                            0.2,\n                            0.3,\n                            0.4,\n                            0.5,\n                            0.6,\n                            0.7,\n                            0.8\n                        ],\n                        \"items\": {\n                            \"type\": \"number\",\n                            \"format\": \"float\"\n                        },\n                        \"description\": \"This is the vector data, if it is requested.\"\n                    },\n                    \"metadata\": {\n                        \"type\": \"object\",\n                        \"example\": {\n                            \"genre\": \"documentary\",\n                            \"year\": 2019\n                        },\n                        \"description\": \"This is the metadata, if it is requested.\"\n                    }\n                },\n                \"required\": [\n                    \"id\"\n                ]\n            },\n            \"SingleQueryResults\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"matches\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/ScoredVector\"\n                        },\n                        \"description\": \"The matches for the vectors.\"\n                    },\n                    \"namespace\": {\n                        \"type\": \"string\",\n                        \"example\": \"example-namespace\",\n                        \"description\": \"The namespace for the vectors.\"\n                    }\n                },\n                \"title\": \"The query results for a single `QueryVector`\"\n            },\n            \"UpdateRequest\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\",\n                        \"example\": \"example-vector-1\",\n                        \"description\": \"Vector's unique id.\",\n                        \"maxLength\": 512,\n                        \"minLength\": 1,\n                        \"required\": [\n                            \"id\"\n                        ]\n                    },\n                    \"values\": {\n                        \"type\": \"array\",\n                        \"example\": [\n                            0.1,\n                            0.2,\n                            0.3,\n                            0.4,\n                            0.5,\n                            0.6,\n                            0.7,\n                            0.8\n                        ],\n                        \"items\": {\n                            \"type\": \"number\",\n                            \"format\": \"float\"\n                        },\n                        \"description\": \"Vector data.\",\n                        \"maxLength\": 20000,\n                        \"minLength\": 1\n                    },\n                    \"setMetadata\": {\n                        \"type\": \"object\",\n                        \"example\": {\n                            \"genre\": \"documentary\",\n                            \"year\": 2019\n                        },\n                        \"description\": \"Metadata to *set* for the vector.\"\n                    },\n                    \"namespace\": {\n                        \"type\": \"string\",\n                        \"example\": \"example-namespace\",\n                        \"description\": \"Namespace name where to update the vector.\"\n                    }\n                },\n                \"description\": \"The request for the `Upsert` operation.\",\n                \"required\": [\n                    \"id\"\n                ]\n            },\n            \"UpdateResponse\": {\n                \"type\": \"object\",\n                \"description\": \"The response for the `Update` operation.\"\n            },\n            \"UpsertRequest\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"vectors\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/Vector\"\n                        },\n                        \"description\": \"This is the actual array data.\",\n                        \"maxLength\": 1000,\n                        \"minLength\": 1,\n                        \"required\": [\n                            \"vectors\"\n                        ]\n                    },\n                    \"namespace\": {\n                        \"type\": \"string\",\n                        \"example\": \"example-namespace\",\n                        \"description\": \"This is the namespace name where you upsert vectors.\"\n                    }\n                },\n                \"description\": \"The request for the `Upsert` operation.\",\n                \"required\": [\n                    \"vectors\"\n                ]\n            },\n            \"UpsertResponse\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"upsertedCount\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\",\n                        \"example\": 10,\n                        \"description\": \"The number of vectors upserted.\"\n                    }\n                },\n                \"description\": \"The response for the `Upsert` operation.\"\n            },\n            \"Vector\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\",\n                        \"example\": \"example-vector-1\",\n                        \"description\": \"This is the vector's unique id.\",\n                        \"maxLength\": 512,\n                        \"minLength\": 1,\n                        \"required\": [\n                            \"id\"\n                        ]\n                    },\n                    \"values\": {\n                        \"type\": \"array\",\n                        \"example\": [\n                            0.1,\n                            0.2,\n                            0.3,\n                            0.4,\n                            0.5,\n                            0.6,\n                            0.7,\n                            0.8\n                        ],\n                        \"items\": {\n                            \"type\": \"number\",\n                            \"format\": \"float\"\n                        },\n                        \"description\": \"This is the vector data included in the request.\",\n                        \"maxLength\": 20000,\n                        \"minLength\": 1,\n                        \"required\": [\n                            \"values\"\n                        ]\n                    },\n                    \"metadata\": {\n                        \"type\": \"object\",\n                        \"example\": {\n                            \"genre\": \"documentary\",\n                            \"year\": 2019\n                        },\n                        \"description\": \"This is the metadata included in the request.\"\n                    }\n                },\n                \"required\": [\n                    \"id\",\n                    \"values\"\n                ]\n            },\n            \"protobufAny\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"typeUrl\": {\n                        \"type\": \"string\"\n                    },\n                    \"value\": {\n                        \"type\": \"string\",\n                        \"format\": \"byte\"\n                    }\n                }\n            },\n            \"protobufNullValue\": {\n                \"type\": \"string\",\n                \"enum\": [\n                    \"NULL_VALUE\"\n                ],\n                \"default\": \"NULL_VALUE\",\n                \"description\": \"`NullValue` is a singleton enumeration to represent the null value for the\\n`Value` type union.\\n\\n The JSON representation for `NullValue` is JSON `null`.\\n\\n - NULL_VALUE: Null value.\"\n            },\n            \"rpcStatus\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"code\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int32\"\n                    },\n                    \"message\": {\n                        \"type\": \"string\"\n                    },\n                    \"details\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/protobufAny\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
			"canonicalURL": "/github.com/pinecone-io/pinecone-python-client@105bab55a64b9008b43a9821616c37fca6bc83ce/-/blob/specs/vector_service.openapi.json",
			"externalURLs": [
				{
					"url": "https://github.com/pinecone-io/pinecone-python-client/blob/105bab55a64b9008b43a9821616c37fca6bc83ce/specs/vector_service.openapi.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidJSON: consume: object: object: read comma: unexpected EOF"
}