{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/fairhopeweb/CCP"
		},
		"file": {
			"name": "swagger.yaml.hbs",
			"path": ".skaffolder/template/server/swagger.yaml.hbs",
			"content": "**** PROPERTIES SKAFFOLDER ****\r\n{\n    \"forEachObj\": \"oneTime\",\n    \"_partials\": []\n}\r\n**** END PROPERTIES SKAFFOLDER ****\r\nopenapi: 3.0.0\ninfo:\n  title: {{project.name}}\n  description: You can obtain JWT token from login API\n  version: 0.1\nservers:\n  - url: http://localhost:3000/api\n    description: Local server for testing\npaths:\n  /login:\n    post:\n      summary: Login API\n      security: []   # No security\n      tags:\n        - Security\n      requestBody:\n        content:\n          application/json:\n            schema:      # Request body contents\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n              example:   # Sample object\n                username: admin\n                password: 62f264d7ad826f02a8af714c0a54b197935b717656b80461686d450f7b3abde4c553541515de2052b9af70f710f0cd8a1a2d3f4d60aa72608d71a63a9a93c0f5\n      responses:\n        '200':\n          description: OK\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n  /verifyToken:\n    post:\n      summary: Verify token API\n      security: [] #No security\n      tags:\n        - Security\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n  /changePassword:\n    post:\n      summary: Change password API\n      tags:\n        - Security\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                passwordNew:\n                  type: string\n                passwordOld:\n                  type: string\n      responses:\n        '200':\n          description: OK\n                \n{{#each resources}}{{#each _resources}}\n  #-----  {{name}}  -----{{#group _services by=\"url\"}}\n  {{../url}}{{value}}:\n    {{#each items}}{{lowercase method}}:\n      summary: {{description}}{{#isNull _roles}}\n      security: []   # No security{{/isNull}}\n      tags:\n        - {{../../name}}{{#notEmpty _params}}\n      parameters:{{#each _params}}\n        - name: {{name}}\n          in: path\n          description: {{description}}\n          required: true\n          schema:\n            type: {{toSwaggerType type}}{{/each}}{{/notEmpty}}\n      responses:\n        \"200\":\n          description: OK{{#or (equal crudAction 'list') (startWith crudAction 'findBy') (startWith crudAction 'addTo') (startWith crudAction 'removeFrom') (startWith crudAction 'linkTo') (startWith crudAction 'unlinkFrom')}}\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/{{../../name}}\"{{/or}}{{#or (equal crudAction 'get') (equal crudAction 'update') (equal crudAction 'create') }}\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/{{../../name}}\"{{/or}}{{#or (equal crudAction 'update') }}\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/{{../../name}}\"{{/or}}{{#or (equal crudAction 'create') }}\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:{{#each ../../_entity._attrs}}\n                {{name}}:\n                  type: {{toSwaggerType type}}{{/each}}{{/or}}\n    {{/each}}{{/group}}{{/each}}{{/each}}\n    \n  #-----  User  -----\n  /Users/{id}/changePassword:\n    post:\n      summary: Change password by admin API\n      tags:\n        - User\n      parameters:\n        - name: id\n          in: path\n          description: Id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                passwordNew:\n                  type: string\n                passwordAdmin:\n                  type: string\n      responses:\n        '200':\n          description: OK\n  /Users/{id}:\n    post:\n      summary: Update User API\n      tags:\n        - User\n      parameters:\n        - name: id\n          in: path\n          description: Id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n    delete:\n      summary: Delete User API\n      tags:\n        - User\n      parameters:\n        - name: id\n          in: path\n          description: Id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n  /Users:\n    post:\n      summary: Create User API\n      tags:\n        - User\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: 'string'\n                password: \n                  type: 'string'\n                mail: \n                  type: 'string'\n                name: \n                  type: 'string'\n                surname: \n                  type: 'string'\n                roles: \n                  type: array\n                  items:\n                    type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n    \n# JWT security\nsecurity:\n  - bearerAuth: [] \n  \n  \n# Components\ncomponents:\n\n  # Security\n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\n\n  # Data Model\n  schemas:\n    User:\n      properties:\n        username:\n          type: 'string'\n        password: \n          type: 'string'\n        mail: \n          type: 'string'\n        name: \n          type: 'string'\n        surname: \n          type: 'string'\n        roles: \n          type: array\n          items:\n            type: string\n      required:\n        - username\n        - password\n        \n{{#each resources}}{{#each _resources}}\n    {{name}}:\n      properties:\n        _id:\n          type: string{{#each _entity._attrs}}\n        {{name}}:\n          type: {{toSwaggerType type}}{{/each}}\n      required:\n        -  _id{{#each _entity._attrs}}{{#equal required true}}\n        - {{name}}{{/equal}}{{/each}}\n      \n    {{/each}}{{/each}}\n"
		}
	},
	"Error": "invalid json"
}