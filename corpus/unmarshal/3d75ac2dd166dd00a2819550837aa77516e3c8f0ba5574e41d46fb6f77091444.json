{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/swagger-api/swagger-inflector"
		},
		"file": {
			"name": "oas3.yaml",
			"size": 0,
			"path": "src/test/swagger/oas3.yaml",
			"byteSize": 45497,
			"content": "openapi: 3.0\nservers:\n- url: http://petstore.swagger.io/api\n- url: https://development.gigantic-server.com/api\n  description: Development server\n- url: https://{username}.gigantic-server.com:{port}/{basePath}\n  x-server: server extension\n  description: The production API server\n  variables:\n      username:\n        # note! no enum here means it is an open value\n        default: demo\n        description: this value is assigned by the service provider, in this example `gigantic-server.com`\n      port:\n        enum:\n          - 8443\n          - 443\n        default: 8443\n      basePath:\n        # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`\n        default: v2\n        description: testing overwriting\n        enum:\n          - 2222\n          - 333\nx-origin:\n- url: http://petstore.swagger.io/v2/swagger.json\n  format: swagger\n  version: '2.0'\n  converter:\n    url: https://github.com/mermade/swagger2openapi\n    version: 1.2.1\nx-api-title: pet store test api\nsecurity:\n  - api_key: []\n  - tokenAuth: []\ninfo:\n  description: 'This is a sample server Petstore'\n  version: 1.0.0\n  title: testing source file\n  termsOfService: http://swagger.io/terms/\n  x-info: info extension\n  contact:\n    name: API Support\n    url: http://www.example.com/support\n    email: support@example.com\n    x-contact: contact extension\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n    x-license: license extension\n    version: 1.0.1\ntags:\n- name: pet\n  description: Everything about your Pets\n  externalDocs:\n    description: Find out more\n    url: http://swagger.io\n- name: store\n  description: Access to Petstore orders\n- name: user\n  description: Operations about user\n  externalDocs:\n    description: Find out more about our store\n    url: http://swagger.io\npaths:\n  \"/fileUpload\":\n    post:\n      x-swagger-router-controller: TestController\n      operationId: uploadFile\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                theFile:\n                  type: string\n                  format: binary\n                stringMetadata:\n                  type: string\n                intMetadata:\n                  type: integer\n                  format: int32\n  \"/fileUploadPathParam/{testId}/content\":\n    post:\n      x-swagger-router-controller: TestController\n      operationId: uploadFilePathParam\n      parameters:\n        - name: testId\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                theFile:\n                  type: string\n                  format: binary\n  \"/fileUploadPathParamQueryParam/{testId}/content/{testId2}/content\":\n    post:\n      x-swagger-router-controller: TestController\n      operationId: uploadFilePathParamQueryParam\n      parameters:\n        - name: testId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: testId2\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: queryId\n          in: query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                theFile:\n                  type: string\n                  format: binary\n                stringMetadata:\n                  type: string\n                intMetadata:\n                  type: integer\n                  format: int32\n  \"/primitiveBody/binary\":\n    post:\n      x-swagger-router-controller: TestController\n      operationId: binaryBody\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n        required: false\n      responses:\n        '200':\n          description: ok!\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n  \"/multipleMediaType\":\n    post:\n      operationId: \"multipleMediaType\"\n      x-swagger-router-controller: TestController\n      summary: Returns the POSTed data\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Dog'\n          text/plain:\n            schema:\n              type: string\n              example: Hi there\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Dog'\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n                description:\n                  type: string\n      responses:\n        '200':\n          description: OK\n  \"/multipleMediaTypeWithComplexValues\":\n    post:\n      operationId: \"multipleMediaTypeWithComplexValues\"\n      x-swagger-router-controller: TestController\n      summary: Returns the POSTed data\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          text/plain:\n            schema:\n              type: string\n              example: Hi there\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n                description:\n                  type: string\n      responses:\n        '200':\n          description: OK\n  \"/multipleMediaTypeForNullValues\":\n    post:\n      operationId: \"multipleMediaTypeForNullValues\"\n      x-swagger-router-controller: TestController\n      summary: Returns the POSTed data\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Dog'\n          text/plain:\n            schema:\n              type: string\n              example: Hi there\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Dog'\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n                description:\n                  type: string\n      responses:\n        '200':\n          description: OK\n  \"/post\":\n    post:\n      operationId: \"formDataTest\"\n      x-swagger-router-controller: TestController\n      summary: Returns the POSTed data\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/PizzaOrder'\n          text/plain:\n            schema:\n              type: string\n              example: Hi there\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PizzaOrder'\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n                description:\n                  type: string\n      responses:\n        '200':\n          description: OK\n  \"/formTest\":\n    post:\n      operationId: formTest\n      x-swagger-router-controller: TestController\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                user:\n                  type: string\n      responses:\n        '200':\n          description: success!\n  \"/form\":\n    post:\n      x-swagger-router-controller: TestController\n      operationId: postFormData\n      tags:\n      - test2\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                stringMetadata:\n                  type: string\n                intMetadata:\n                  type: integer\n                  format: int64\n      responses:\n        '200':\n          description: ok\n  /pets:\n    post:\n      x-swagger-router-controller: TestController\n      operationId: updatePetByType\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PetByType'\n      responses:\n        '200':\n          description: Updated\n  /operationWithDisabledValidation:\n    post:\n      operationId: disabledInputValidation\n      x-swagger-router-controller: TestController\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/HardToValidateModel'\n    get:\n      operationId: disabledOuputValidation\n      x-swagger-router-controller: TestController\n      responses:\n        '200':\n          description: response without validation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HardToValidateModel'\n  /mockResponses/objectMultipleExamples:\n    get:\n      responses:\n        '200':\n          description: A string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User1'\n              examples:\n                Queen Victoria:\n                  $ref: '#/components/examples/Victoria'\n                Grace:\n                  $ref: '#/components/examples/Grace'\n                ArthurDent:\n                  $ref: '#/components/examples/Arthur'\n                Trillian:\n                  $ref: '#/components/examples/Trillian'\n            application/yaml:\n              schema:\n                $ref: '#/components/schemas/User1'\n              examples:\n                Queen Victoria:\n                   $ref: '#/components/examples/Victoria'\n                Grace:\n                   $ref: '#/components/examples/Grace'\n                ArthurDent:\n                  $ref: '#/components/examples/Arthur'\n                Trillian:\n                  $ref: '#/components/examples/Trillian'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User1'\n              examples:\n                Queen Victoria:\n                  $ref: '#/components/examples/Victoria'\n                Grace:\n                  $ref: '#/components/examples/Grace'\n                ArthurDent:\n                  $ref: '#/components/examples/Arthur'\n                Trillian:\n                  $ref: '#/components/examples/Trillian'\n  /mockResponses/primitiveStringMultipleExamples:\n    get:\n      responses:\n        '200':\n          description: A string\n          content:\n            application/json:\n              schema:\n                type: string\n              examples:\n                singleLine:\n                  description: Single-line string\n                  value: Hello, world!\n                multiLine:\n                  description: Multi-line string\n                  value: \u003e\n                    A long time ago\n                    in a galaxy far, far away....\n  \"/pet\":\n    summary: summary\n    description: description\n    post:\n      x-swagger-router-controller: TestController\n      externalDocs:\n        description: Find out more\n        url: http://swagger.io\n      tags:\n      - pet\n      summary: Add a new pet to the store\n      description: ''\n      operationId: addPet\n      parameters: []\n      responses:\n        '200':\n          description: party time!\n          content:\n            \"application/json\":\n              schema:\n                \"$ref\": \"#/components/schemas/Dog\"\n        '405':\n          description: Invalid input\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                title: header schema\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      requestBody:\n        description: user to add to the system\n        required: true\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/Dog'\n    servers:\n    - url: http://petstore.swagger.io/v2\n    put:\n      tags:\n      - pet\n      x-sample-extension: \"it works!\"\n      x-swagger-router-controller: TestController\n      summary: Update an existing pet\n      description: ''\n      operationId: updatePet\n      parameters: []\n      responses:\n        '400':\n          description: A complex object array response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VeryComplexType'\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      requestBody:\n        \"$ref\": \"#/components/requestBodies/requestBody1\"\n  \"/producesTest\":\n      get:\n        parameters: []\n        responses:\n          '200':\n            description: it works\n            content:\n              application/json:\n                schema:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n  \"/primitiveBody/inline\":\n    post:\n      x-swagger-router-controller: TestController\n      operationId: inlineRequiredBody\n      requestBody:\n        content:\n          \"application/json\":\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n        required: true\n      responses:\n        '200':\n          description: ok!\n  \"/primitiveBody/string\":\n    post:\n      x-swagger-router-controller: TestController\n      operationId: stringBody\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              type: string\n        required: false\n      responses:\n        '200':\n          description: ok!\n  \"/primitiveBody/integer\":\n    post:\n      x-swagger-router-controller: TestController\n      operationId: integerBody\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              type: integer\n              format: int32\n        required: false\n      responses:\n        '200':\n          description: ok!\n  \"/hidden\":\n    get:\n      x-inflector-hidden: true\n      responses:\n        default:\n          description: ok\n  \"/arrayInputTest\":\n    get:\n      x-swagger-router-controller: TestController\n      operationId: arrayInputTest\n      tags:\n      - inputTest\n      parameters:\n      - name: users\n        in: query\n        required: true\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        '200':\n          description: success!\n  \"/mockResponses\":\n      get:\n        tags:\n          - mockResponses\n        parameters:\n        - name: user\n          in: query\n          required: true\n          schema:\n            type: string\n        responses:\n          '200':\n            description: success!\n  \"/mockResponses/primitiveFloatResponse\":\n    get:\n      tags:\n        - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: number\n                format: float\n  \"/mockResponses/primitiveDoubleResponse\":\n    get:\n      tags:\n        - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: number\n                format: double\n  \"/mockResponses/primitiveStringResponse\":\n    get:\n      tags:\n        - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: string\n  \"/mockResponses/primitiveStringResponseWithExample\":\n    get:\n      tags:\n        - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: fun\n            application/json:\n              schema:\n                type: string\n                example: fun\n  \"/mockResponses/responseWithExamples\":\n    get:\n      tags:\n      - mockResponses\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              examples:\n                samplejson:\n                  value: {\"test\":\"jsonvalue\"}\n            application/yaml:\n              examples:\n                sampleyaml:\n                  value:\n                    test: yamlvalue\n  \"/mockResponses/primitiveDateResponse\":\n    get:\n      tags:\n        - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: string\n                format: date\n  \"/mockResponses/primitiveDateTimeResponse\":\n    get:\n      tags:\n        - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: string\n                format: date-time\n  \"/mockResponses/primitiveBigDecimalResponse\":\n    get:\n      tags:\n        - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: number\n  \"/mockResponses/primitiveEmailResponse\":\n    get:\n      tags:\n        - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: string\n                format: email\n  \"/mockResponses/primitiveUUIDResponse\":\n    get:\n      tags:\n        - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: string\n                format: uuid\n  \"/mockResponses/additionalPropertiesTest\":\n    get:\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  foo:\n                    type: integer\n                additionalProperties:\n                  type: string\n  \"/mockResponses/badAdditionalProperties\":\n    get:\n      responses:\n        '200':\n          description: bad request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  foo:\n                    type: integer\n                additionalProperties:\n                  type: false\n  \"/mockResponses/additionalProperties1\":\n    get:\n      responses:\n        '200':\n          description: not found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  foo:\n                    type: integer\n                additionalProperties:\n                  type: object\n                  properties:\n                    bar:\n                      type: integer\n  \"/mockResponses/primitiveMapResponse\":\n    get:\n      tags:\n        - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n  \"/mockResponses/booleanAdditionalProperties\":\n    get:\n      tags:\n        - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                properties:\n                  firstProperty:\n                    type: string\n  \"/mockResponses/booleanAdditionalPropertiesTrue\":\n    get:\n      tags:\n        - mockResponses\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n  \"/mockResponses/booleanAdditionalPropertiesFalse\":\n    get:\n      tags:\n        - mockResponses\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n  \"/mockResponses/complexResponse\":\n    get:\n      tags:\n        - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Address\"\n  \"/mockResponses/complexResponseWithExample\":\n    get:\n      tags:\n        - mockResponses\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n  \"/mockResponses/complexArrayResponse\":\n    get:\n      tags:\n      - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/Address\"\n  \"/mockResponses/complexArrayResponseWithExample\":\n    get:\n      tags:\n        - mockResponses\n      parameters:\n      - name: user\n        in: query\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n  \"/issue-125\":\n      get:\n        parameters: []\n        responses:\n          '200':\n            description: int16\n            content:\n              \"*/*\":\n                schema:\n                  type: integer\n                  format: int16\n  \"/issue-128\":\n    get:\n      responses:\n        '303':\n          description: issue 128\n          content:\n            \"application/json\":\n              schema:\n                type: string\n                format: url\n                example: http://foo.bar/other\n  \"/issue-130\":\n    get:\n      responses:\n        '200':\n          description: issue 130\n          content:\n            \"application/json\":\n              schema:\n                type: object\n                description: an object with array properties\n                properties:\n                  aStringArray:\n                    type: array\n                    items:\n                      type: string\n                      example: a string value\n                  anIntegerArray:\n                    type: array\n                    items:\n                      type: integer\n                      format: int32\n                      example: 99\n  \"/issue-132\":\n    get:\n      responses:\n        '303':\n          description: issue 132\n          headers:\n            Location:\n              schema:\n                type: string\n                format: url\n              example: 'http://foo.bar/other'\n              description: URI of the entity affected by the property change\n  \"/issue-132.2\":\n    get:\n      responses:\n        '303':\n          description: issue 133, alternate example\n          headers:\n            _links:\n              description: array of locations\n              schema:\n                type: array\n                items:\n                  type: string\n                  format: url\n                  example: 'http://foo.bar/other'\n  \"/goodbye\":\n    get:\n      operationId: goodbye\n      x-swagger-router-controller: TestController\n      parameters:\n      - name: happy\n        in: query\n        required: true\n        style: form\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n  \"/hello\":\n    get:\n      tags:\n      - test1\n      operationId: testMe\n      parameters:\n      - name: limit\n        in: query\n        required: true\n        schema:\n          minimum: 0\n          type: integer\n          format: int32\n      - name: min\n        in: query\n        required: true\n        schema:\n          minimum: 10\n          type: integer\n          format: int32\n      responses:\n        '200':\n          description: fun!\n          content:\n            application/json:\n              schema:\n                type: string\n  \"/withModelArray/{id}\":\n    post:\n      operationId: withModelArray\n      x-swagger-router-controller: TestController\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Address'\n        required: true\n      responses:\n        '200':\n          description: success!\n          content:\n            \"application/json\":\n              schema:\n                \"$ref\": \"#/components/schemas/Animal\"\n  \"/withModel/{id}\":\n    get:\n      tags:\n        - test2\n      operationId: withModel\n      x-swagger-router-controller: TestController\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/Animal\"\n    post:\n      tags:\n        - test2\n      operationId: withModel\n      x-swagger-router-controller: TestController\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              \"$ref\": \"#/components/schemas/Address\"\n        required: false\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/Address\"\n  \"/withInvalidComposedModel\":\n    post:\n      operationId: withInvalidComposedModel\n      x-swagger-router-controller: TestController\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              \"$ref\": \"#/components/schemas/ExtendedAddress\"\n        required: false\n      responses:\n        '200':\n          description: success!\n  \"/withValidComposedModel\":\n    post:\n      operationId: withValidComposedModel\n      x-swagger-router-controller: TestController\n      requestBody:\n        content:\n          \"application/json\":\n            schema:\n              \"$ref\": \"#/components/schemas/ExtendedAddress\"\n        required: false\n      responses:\n        '200':\n          description: success!\n  \"/withInvalidComposedModelArray\":\n    post:\n      operationId: withInvalidComposedModelArray\n      x-swagger-router-controller: TestController\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ExtendedAddress'\n        required: false\n      responses:\n        '200':\n          description: success!\n  \"/unmappedWithModel/{id}\":\n    post:\n      tags:\n      - test2\n      operationId: unmappedWithModelInput\n      x-swagger-router-controller: TestController\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          \"application/json\":\n            schema:\n              \"$ref\": \"#/components/schemas/Address\"\n        required: false\n      responses:\n        '200':\n          description: success!\n          content:\n            \"application/json\":\n              schema:\n                \"$ref\": \"#/components/schemas/Address\"\n  \"/mappedWithDefinedModel/{id}\":\n    post:\n      tags:\n      - test2\n      operationId: mappedWithDefinedModel\n      x-swagger-router-controller: TestController\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          \"application/json\":\n            schema:\n              \"$ref\": \"#/components/schemas/Dog\"\n        required: false\n      responses:\n        '200':\n          description: success!\n          content:\n            \"application/json\":\n              schema:\n                \"$ref\": \"#/components/schemas/Dog\"\n  \"/unmappedWithUndefinedModel/{id}\":\n    post:\n      tags:\n      - test2\n      operationId: unmappedWithUndefinedModel\n      x-swagger-router-controller: TestController\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          \"application/json\":\n            schema:\n              \"$ref\": \"#/components/schemas/UnmappedModel\"\n        required: false\n      responses:\n        '200':\n          description: success!\n  \"/withPath/{id}\":\n    get:\n      tags:\n      - test1\n      operationId: withPath\n      x-swagger-router-controller: TestController\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n  \"/withDate/{date}\":\n    get:\n      tags:\n      - test1\n      operationId: withDateTime\n      x-swagger-router-controller: TestController\n      parameters:\n      - name: date\n        in: path\n        required: true\n        schema:\n          type: string\n          format: date-time\n      responses:\n        '200':\n          description: success!\n          content:\n            \"application/json\":\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n  \"/withIntegerEnum/{stage}\":\n    get:\n      tags:\n        - test1\n      operationId: withDateTime\n      x-swagger-router-controller: TestController\n      parameters:\n      - name: stage\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int32\n          enum:\n          - 1\n          - 2\n          - 3\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n  \"/overloaded\":\n    get:\n      tags:\n      - overloaded\n      operationId: overloadedResponse\n      x-swagger-router-controller: TestController\n      parameters:\n      - name: arg1\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n  \"/throwApiException\":\n    get:\n      tags:\n      - throw\n      operationId: throwApiException\n      x-swagger-router-controller: TestController\n      responses:\n        '200':\n          description: success!\n  \"/throwApiExceptionAsCause\":\n    get:\n      tags:\n      - throw\n      operationId: throwApiExceptionAsCause\n      x-swagger-router-controller: TestController\n      responses:\n        '200':\n          description: success!\n  \"/throwNonApiException\":\n    get:\n      tags:\n      - throw\n      operationId: throwNonApiException\n      x-swagger-router-controller: TestController\n      responses:\n        '200':\n          description: success!\n  \"/returnNonRfc2616Status\":\n    get:\n      tags:\n        - throw\n      operationId: returnNonRfc2616Status\n      x-swagger-router-controller: TestController\n      responses:\n        '200':\n          description: success!\n  \"/responseHeaders\":\n    get:\n      tags:\n        - response\n      operationId: returnWithResponseHeaders\n      x-swagger-router-controller: TestController\n      responses:\n        '200':\n          description: success\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\ncomponents:\n  schemas:\n    HardToValidateModel:\n      x-skip-input-validation: true\n      x-skip-output-validation: true\n      type: object\n      required: [id]\n      properties:\n        id:\n          type: string\n    PizzaOrder:\n      type: object\n      properties:\n        custname:\n          type: string\n          example: Alice\n        custtel:\n          type: string\n          example: +1-202-555-0100\n        custemail:\n          type: string\n          format: email\n          example: alice@wonderland.net\n        size:\n          type: string\n          enum:\n            - small\n            - medium\n            - large\n        topping:\n          type: array\n          items:\n            type: string\n            enum:\n              - bacon\n              - cheese\n              - mushroom\n              - onion\n        delivery:\n          type: string\n          example: '13:30'\n        comments:\n          type: string\n          example: ASAP\n    PetByType:\n      type: object\n      properties:\n        pet_type:\n          not:\n            type: integer\n      required:\n        - pet_type\n    Water:\n      properties:\n        clear:\n          type: boolean\n        name:\n          type: string\n        prices:\n          type: array\n        id:\n          type: string\n          format: uuid\n    ExtendedAddress:\n      type: object\n      x-swagger-router-model: io.swagger.oas.test.models.ExtendedAddress\n      allOf:\n        - $ref: '#/components/schemas/Address'\n        - type: object\n          required:\n          - gps\n          properties:\n            gps:\n              type: string\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      description: the name!\n      example: |\n            {\n              \"foo\":\"bar\"\n            }\n    User1:\n      type: object\n      xml:\n        name: USER\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 4\n          xml:\n            attribute: true\n            name: ID\n        name:\n          type: string\n          example: Arthur Dent\n          xml:\n            name: NAME\n    Address:\n      required:\n      - street\n      type: object\n      x-swagger-router-model: io.swagger.oas.test.models.Address\n      properties:\n        street:\n          type: string\n          example: 12345 El Monte Road\n        city:\n          type: string\n          example: Los Altos Hills\n        state:\n          type: string\n          example: CA\n        zip:\n          type: string\n          example: '94022'\n    UnmappedModel:\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Animal:\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        address:\n          \"$ref\": \"#/components/schemas/Address\"\n      description: the name!\n    Dog:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        dogType:\n          type: string\n    VeryComplexType:\n      type: integer\n      format: int32\n    ExtendedErrorModel:\n      allOf:\n      - type: object\n        required:\n        - rootCause\n        properties:\n          rootCause:\n            type: string\n            \"$ref\": \"#/components/schemas/Category\"\n    Order:\n      type: object\n      not:\n        type: integer\n        format: int32\n      additionalProperties:\n        type: integer\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n          - placed\n          - approved\n          - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    Category:\n      x-swagger-router-model: io.swagger.oas.sample.models.Category\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: Dogs\n      xml:\n        name: category\n      type: object\n    Tag:\n      x-swagger-router-model: io.swagger.oas.sample.models.Tag\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: tag\n      type: object\n    Pet:\n      x-swagger-router-model: io.swagger.oas.sample.models.Pet\n      required:\n      - name\n      - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        name:\n          type: string\n          example: doggie\n        category:\n          $ref: '#/components/schemas/Category'\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Tag'\n            xml:\n              name: tag\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n          - available\n          - pending\n          - sold\n      xml:\n        name: pet\n      type: object\n    ApiResponse:\n      type: object\n      required:\n      - name\n      - photoUrls\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n      headers:\n        X-Ref-Limit-Limit:\n          \"$ref\": \"#/components/headers/X-Rate-Limit-Reset\"\n      links:\n        address:\n          \"$ref\": \"#/components/links/unsubscribe\"\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ExtendedErrorModel'\n  parameters:\n    contentParameter:\n      in: query\n      name: coordinates\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ExtendedErrorModel'\n      examples:\n        cat:\n          summary: An example of a cat\n          value:\n            name: Fluffy\n            petType: Cat\n            color: White\n            gender: male\n            breed: Persian\n    refParam:\n      \"$ref\": \"#/components/parameters/limitParam\"\n    newParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n        \"$ref\": \"#/components/schemas/Tag\"\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  examples:\n    Victoria:\n      value:\n        id: 6\n        name: Queen Victoria\n    Grace:\n      value:\n        id: 5\n        name: Grace Gonzalez\n    Arthur:\n      value:\n        id: 4\n        name: Arthur Dent\n    Trillian:\n      value:\n        id: 3\n        name: Tricia McMillan\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: \"#/components/examples/cat\"\n  requestBodies:\n    requestBody1:\n      description: request body in components\n      content:\n        application/json:\n          description: Pet object that needs to be added to the store\n          schema:\n            \"$ref\": \"#/components/schemas/Pet\"\n        application/xml:\n          description: Pet object that needs to be added to the store\n          schema:\n            \"$ref\": \"#/components/schemas/Pet\"\n    requestBody2:\n      content:\n        application/json:\n          description: List of user object\n          schema:\n            type: array\n            items:\n              \"$ref\": \"#/components/schemas/User\"\n    requestBody3:\n      \"$ref\": \"#/components/requestBodies/requestBody2\"\n  securitySchemes:\n    reference:\n      \"$ref\": \"#/components/securitySchemes/api_key\"\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: http://petstore.swagger.io/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n  headers:\n    X-Ref-Limit-Limit:\n      \"$ref\": \"#/components/headers/X-Rate-Limit-Reset\"\n    X-Rate-Limit-Limit:\n      description: The number of allowed requests in the current period\n      schema:\n        type: integer\n      example: \"This is a header example\"\n    X-Rate-Limit-Remaining:\n      description: The number of remaining requests in the current period\n      schema:\n        type: integer\n    X-Rate-Limit-Reset:\n      description: The number of seconds left in the current period\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ExtendedErrorModel'\n      examples:\n        dog:\n          $ref: \"#/components/examples/dog\"\n  links:\n    referenced:\n      \"$ref\": \"#/components/links/unsubscribe\"\n    unsubscribe:\n      operationId: cancelHookCallback\n      parameters:\n        id: $response.body#/hookId\n      x-link: link extension\n  callbacks:\n    referenced:\n      '$response.body#/failedUrl':\n        \"$ref\": \"#/components/callbacks/failed\"\n    heartbeat:\n      '$request.query.heartbeat-url':\n        post:\n          requestBody:\n            $ref: '#/components/requestBodies/requestBody3'\n          responses:\n            '200':\n              description: Consumer acknowledged the callback\n    failed:\n      '$response.body#/failedUrl':\n        post:\n          requestBody:\n            $ref: '#/components/requestBodies/requestBody3'\n          responses:\n            '200':\n              description: Consumer acknowledged the callback failed\n    success:\n      '$response.body#/successUrl':\n        post:\n          requestBody:\n            $ref: '#/components/requestBodies/requestBody1'\n          responses:\n            '200':\n              description: Consumer acknowledged the callback\n  x-component:\n  - url: http://component.swagger.io/v2/swagger.json\n    format: OAS\n    version: '3.0'\n    converter:\n      url: https://github.com/mermade/oas3\n      version: 1.2.3\n  x-api-title: pet store test api in components",
			"canonicalURL": "/github.com/swagger-api/swagger-inflector@3112f7e185266616e6df4a9cb30c0874706382f0/-/blob/src/test/swagger/oas3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/swagger-api/swagger-inflector/blob/3112f7e185266616e6df4a9cb30c0874706382f0/src/test/swagger/oas3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:14: json: cannot unmarshal bool into Go struct field Schema.paths.get.responses.content.schema.additionalProperties of type string"
}