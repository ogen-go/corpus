{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "npm/blockstack/stacks-blockchain-sidecar-types"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 20386,
			"content": "openapi: 3.0.2\nservers:\n  - url: //localhost:3999/\n    description: Local\n  - url: https://sidecar.staging.blockstack.xyz/\n    description: Staging\ninfo:\n  title: Stacks 2.0 Blockchain API\n  version: '1.0.0'\n  description: |\n    This is the documentation for the Stacks 2.0 Blockchain API.\n\n    It is comprised of two parts; the Stacks Blockchain API and the Stacks Core API.\n\n    [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/614feab5c108d292bffa#?env%5BStacks%20Blockchain%20API%5D=W3sia2V5Ijoic3R4X2FkZHJlc3MiLCJ2YWx1ZSI6IlNUMlRKUkhESE1ZQlE0MTdIRkIwQkRYNDMwVFFBNVBYUlg2NDk1RzFWIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJibG9ja19pZCIsInZhbHVlIjoiMHgiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6Im9mZnNldCIsInZhbHVlIjoiMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfdHgiLCJ2YWx1ZSI6IjIwMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfYmxvY2siLCJ2YWx1ZSI6IjMwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJ0eF9pZCIsInZhbHVlIjoiMHg1NDA5MGMxNmE3MDJiNzUzYjQzMTE0ZTg4NGJjMTlhODBhNzk2MzhmZDQ0OWE0MGY4MDY4Y2RmMDAzY2RlNmUwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9pZCIsInZhbHVlIjoiU1RKVFhFSlBKUFBWRE5BOUIwNTJOU1JSQkdRQ0ZOS1ZTMTc4VkdIMS5oZWxsb193b3JsZFxuIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJidGNfYWRkcmVzcyIsInZhbHVlIjoiYWJjIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9hZGRyZXNzIiwidmFsdWUiOiJTVEpUWEVKUEpQUFZETkE5QjA1Mk5TUlJCR1FDRk5LVlMxNzhWR0gxIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9uYW1lIiwidmFsdWUiOiJoZWxsb193b3JsZCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWFwIiwidmFsdWUiOiJzdG9yZSIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWV0aG9kIiwidmFsdWUiOiJnZXQtdmFsdWUiLCJlbmFibGVkIjp0cnVlfV0=)\n\n    ## Design\n\n    ### Stacks Core API vs Stacks Blockchain API\n    The blockchain's Rust implementation exposes a JSON RPC endpoint (\"Stacks Core API\"), which can be used to interface with the blockchain.\n    It can be used directly. [See the documentation for the `stacks-blockchain` in its Github repository](https://github.com/blockstack/stacks-blockchain/)\n\n    All `/v2/` routes a proxied to a Blockstack PBC-hosted Stacks Node. For a trustless architecture, you should make these requests to a self-hosted node.\n\n    All `/sidecar/` routes are provided by the Stacks 2.0 Blockchain API directly. They extend the Stacks Core API capabilities to make it eaiser to integrate with.\n\n    ### Pagination\n    To make API responses more compact, lists returned by the API are paginated. For lists, the response body includes: \n      \n      - `limit`: the number of list items return per response\n      - `offset`: the number of elements to skip (starting from `0`)\n      - `total`: the number of all available list items\n      - `results`: the array of list items (length of array equals the set limit)\n\n    Using the `limit` and `offset` properties, you can paginate through the entire list by increasing the offset by the limit until you reach the total.\n\npaths:\n  /sidecar/v1/faucets/stx:\n    parameters:\n      - name: address\n        in: path\n        description: STX address\n        required: true\n        schema:\n          type: string\n    post:\n      summary: Get STX tokens\n      description: Get STX tokens for the testnet\n      tags:\n        - Faucets\n      operationId: run_faucet_stx\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/faucet/run-faucet.schema.json\n              example:\n                $ref: ./api/faucet/run-faucet.example.json\n        500:\n          description: Failed to run faucet \n  /sidecar/v1/faucets/btc:\n    parameters:\n      - name: address\n        in: path\n        description: BTC address\n        required: true\n        schema:\n          type: string\n    post:\n      summary: Get BTC tokens\n      description: Get BTC tokens for the testnet\n      tags:\n        - Faucets\n      operationId: run_faucet_btc\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/faucet/run-faucet.schema.json\n              example:\n                $ref: ./api/faucet/run-faucet.example.json\n        500:\n          description: Failed to run faucet \n\n  /sidecar/v1/tx:\n    get:\n      summary: Get recent transactions\n      tags:\n        - Transactions\n      operationId: get_transaction_list\n      description: | \n        Get all recently mined transactions\n      \n        If using TypeScript, import typings for this response from our types package:\n\n        `import type { TransactionResults } from '@blockstack/stacks-blockchain-sidecar-types';`\n      responses:\n        200:\n          description: List of transactions\n          content:\n            application/json:\n              schema:\n                $ref: ./api/transaction/get-transactions.schema.json\n              example:\n                $ref: ./api/transaction/get-transactions.example.json\n\n  /sidecar/v1/tx/stream:\n    get:\n      summary: Stream transaction events\n      description: Stream of recent transaction events\n      tags:\n        - Transactions\n      operationId: stream_transaction_events\n      parameters:\n        - name: protocol\n          in: path\n          description: Streaming protocol\n          required: true\n          schema:\n            type: string\n            enum: [eventsource, websocket]\n\n  /sidecar/v1/tx/{tx_id}:\n    parameters:\n      - name: tx_id\n        in: path\n        description: Hash of transaction\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get transaction\n      tags:\n        - Transactions\n      operationId: get_transaction_by_id\n      description: |\n        Get a specific transaction by ID\n\n        `import type { Transaction } from '@blockstack/stacks-blockchain-sidecar-types';`\n      responses:\n        200:\n          description: Transaction\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/transactions/transaction.schema.json\n              example:\n                $ref: ./entities/transactions/transaction-4-coinbase.example.json\n        404:\n          description: Cannot find transaction for given ID\n\n  /v2/transactions:\n    post:\n      summary: Broadcast raw transaction\n      tags:\n        - Transactions\n      description: Broadcast raw transactions on the network. You can use the [stracks-transactions-js](https://github.com/blockstack/stacks-transactions-js) project to generate a raw transaction payload.\n      operationId: post_core_node_transactions\n      requestBody:\n        content:\n          text/plain:\n            example: 00000000010400bed38c2aadffa348931bcb542880ff79d607afec000000000000000000000000000000c800012b0b1fff6cccd0974966dcd665835838f0985be508e1322e09fb3d751eca132c492bda720f9ef1768d14fdabed6127560ba52d5e3ac470dcb60b784e97dc88c9030200000000000516df0ba3e79792be7be5e50a370289accfc8c9e032000000000000303974657374206d656d6f00000000000000000000000000000000000000000000000000\n      responses:\n        200:\n          description: Successful post of a raw tx to the node's mempool\n        400:\n          description: Rejections result in a 400 error\n\n  /sidecar/v1/block:\n    get:\n      summary: Get recent blocks\n      description: Get all recently mined blocks\n      tags:\n        - Blocks\n      operationId: get_block_list\n      responses:\n        200:\n          description: List of blocks\n          content:\n            application/json:\n              schema:\n                $ref: ./api/blocks/get-blocks.schema.json\n              example:\n                $ref: ./api/blocks/get-blocks.example.json\n  /sidecar/v1/block/{block_hash}:\n    parameters:\n        - name: block_hash\n          in: path\n          description: Hash of the block\n          required: true\n          schema:\n            type: string\n    get:\n      summary: Get block\n      description: Get a specific block by hash\n      tags:\n        - Blocks\n      operationId: get_block_by_hash\n      responses:\n        200:\n          description: Block\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/blocks/block.schema.json\n              example:\n                $ref: ./entities/blocks/block.example.json\n        404:\n          description: Cannot find block with given ID\n          content:\n            application/json:\n              example:\n                $ref: ./api/errors/block-not-found.json\n\n  /sidecar/v1/contract/{contract_id}:\n    get:\n      summary: Get contract info\n      description: Get contract info using the contract ID\n      tags:\n        - Smart Contracts\n      operationId: get_contract_by_id\n      responses:\n        200:\n          description: Contract found\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/transactions/transaction-1-smart-contract.schema.json\n              example:\n                $ref: ./entities/transactions/transaction-1-smart-contract.example.json\n        404:\n          description: Cannot find contract of given ID\n    parameters:\n      - name: contract_id\n        in: path\n        description: Contract identifier formatted as `\u003cprincipal_address\u003e.\u003ccontract_name\u003e`\n        required: true\n        schema:\n          type: string\n\n  /sidecar/v1/contract/{contract_id}/events:\n    get:\n      summary: Get contract events\n      description: Get contract events using a contract ID\n      tags:\n        - Smart Contracts\n      operationId: get_contract_events_by_id\n      parameters:\n        - name: contract_id\n          in: path\n          description: Contract identifier formatted as `\u003cprincipal_address\u003e.\u003ccontract_name\u003e`\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: List of events\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/transaction-events/transaction-event.schema.json\n              example:\n                $ref: ./entities/transaction-events/transaction-event-smart-contract-log.example.json\n \n  /v2/contracts/interface/{stacks_address}/{contract_name}:\n    get:\n      summary: Get contract interface\n      description: Get contract interface using a `stacks_address` and contract name\n      tags:\n        - Smart Contracts\n      operationId: get_contract_interface\n      responses:\n        200:\n          description: Contract interface\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-contract-interface.schema.json\n              example:\n                $ref: ./api/core-node/get-contract-interface.example.json\n    parameters:\n      - name: stacks_address\n        in: path\n        required: true\n        description: Stacks address\n        schema:\n          type: string\n      - name: contract_name\n        in: path\n        required: true\n        description: Contract name\n        schema:\n          type: string\n\n  /v2/map_entry/{stacks_address}/{contract_name}/{map_name}:\n    post:\n      summary: Get specific data-map inside a contract\n      tags:\n        - Smart Contracts\n      operationId: get_contract_data_map\n      description: |\n        Attempt to fetch data from a contract data map. The contract is identified with [Stacks Address] and [Contract Name] in the URL path. The map is identified with [Map Name].\n\n        The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.\n\n        In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              example: { 'data': '0x01ce...', 'proof': '0x01ab...' }\n        400:\n          description: Failed loading data map\n      parameters:\n        - name: stacks_address\n          in: path\n          required: true\n          description: Stacks address\n          schema:\n            type: string\n        - name: contract_name\n          in: path\n          required: true\n          description: Contract name\n          schema:\n            type: string\n        - name: map_name\n          in: path\n          required: true\n          description: Map name\n          schema:\n            type: string\n        - name: proof\n          in: query\n          description: Returns object without the proof field\n          schema:\n            type: integer\n      requestBody:\n        description: Hex string serialization of the lookup key (which should be a Clarity value)\n        required: true\n        content:\n          application/json\n\n  /v2/contracts/source/{stacks_address}/{contract_name}:\n    get:\n      summary: Get contract source\n      tags:\n        - Smart Contracts\n      operationId: get_contract_source\n      description: Returns the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-contract-source.schema.json\n              example:\n                $ref: ./api/core-node/get-contract-source.example.json\n    parameters:\n      - name: stacks_address\n        in: path\n        required: true\n        description: Stacks address\n        schema:\n          type: string\n      - name: contract_name\n        in: path\n        required: true\n        description: Contract name\n        schema:\n          type: string\n      - name: proof\n        in: query\n        description: Returns object without the proof field if set to 0\n        schema:\n          type: integer\n\n  /v2/contracts/call-read/{stacks_address}/{contract_name}/{function_name}:\n    post:\n      summary: Call read-only function\n      tags:\n        - Smart Contracts\n      operationId: call_read_only_function\n      description: |\n        Call a read-only public function on a given smart contract.\n\n        The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              examples:\n                success:\n                  value: { 'okay': true, 'result': '0x0011...' }\n                fail:\n                  value:\n                    $ref: ./api/core-node/post-call-read-only-fn-fail.example.json\n    parameters:\n      - name: stacks_address\n        in: path\n        required: true\n        description: Stacks address\n        schema:\n          type: string\n      - name: contract_name\n        in: path\n        required: true\n        description: Contract name\n        schema:\n          type: string\n      - name: function_name\n        in: path\n        required: true\n        description: Function name\n        schema:\n          type: string\n\n  /sidecar/v1/address/{principal}/balances:\n    get:\n      summary: Get account balances\n      tags:\n        - Accounts\n      operationId: get_account_balance\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/address/get-address-balances.schema.json\n              example:\n                $ref: ./api/address/get-address-balances.example.json\n\n  /sidecar/v1/address/{principal}/transactions:\n    get:\n      summary: Get account transactions\n      tags:\n        - Accounts\n      operationId: get_account_transactions\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/address/get-address-transactions.schema.json\n              example:\n                $ref: ./api/address/get-address-transactions.example.json\n\n  /sidecar/v1/address/{principal}/assets:\n    get:\n      summary: Get account assets\n      tags:\n        - Accounts\n      operationId: get_account_assets\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/address/get-address-assets.schema.json\n              example:\n                $ref: ./api/address/get-address-assets.example.json\n\n  /v2/accounts/{principal}:\n    get:\n      summary: Get account info\n      tags:\n        - Accounts\n      operationId: get_account_info\n      description: |\n        Get the account data for the provided principal\n\n        Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is a unsigned 64-bit integer, and the proofs are provided as hex strings.\n\n        For non-existent accounts, this does not 404, rather it returns an object with balance and nonce of 0.\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n        - name: proof\n          in: query\n          description: Returns object without the proof field if set to 0\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-account-data.schema.json\n              example:\n                $ref: ./api/core-node/get-account-data.example.json\n\n  /v2/fees/transfer:\n    get:\n      summary: Get estimated fee\n      tags:\n        - Fees\n      operationId: get_fee_transfer\n      description: Get an estimated fee rate for STX transfer transactions. This a a fee rate / byte, and is returned as a JSON integer\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              example:\n                $ref: ./api/core-node/get-fee-transfer.example.json\n\n  /v2/info:\n    get:\n      summary: Get Core API info\n      description: Get Core API information\n      tags:\n        - Info\n      operationId: get_core_api_info\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-info.schema.json\n              example:\n                $ref: ./api/core-node/get-info.example.json\n  /sidecar/v1/status:\n    get:\n      summary: Get Blockchain API status\n      description: Get Blockchain API status\n      tags:\n        - Info\n      operationId: get_status\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              examples:\n                success:\n                  value: { status: 'ready' }\n\n  /sidecar/v1/search/{id}:\n    get:\n      summary: Search\n      description: Search blocks, transactions, contracts, or accounts by hash/ID\n      tags:\n        - Search\n      operationId: search_by_id\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              example:\n                $ref: ./api/search/search-contract.example.json\n        404:\n          description: Not found\n          content:\n            application/json:\n              example:\n                $ref: ./api/errors/search-not-found.json\n",
			"canonicalURL": "/npm/blockstack/stacks-blockchain-sidecar-types@2f7720f3c6ebde24b7160d58c5e2e250be4fe12a/-/blob/openapi.yaml",
			"externalURLs": []
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 347: cannot unmarshal !!str `applica...` into map[string]ogen.Media"
}