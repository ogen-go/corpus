{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mongodb/docs-realm"
		},
		"file": {
			"name": "openapi-admin-v3.yaml",
			"size": 0,
			"path": "source/openapi-admin-v3.yaml",
			"byteSize": 145078,
			"content": "---\nopenapi: 3.0.1\ninfo:\n  description: |-\n    MongoDB Realm provides an API for programmatically performing\n    administrative tasks outside of the Realm UI. This includes tasks such\n    as modifying authentication providers, creating rules, and defining\n    functions. Client applications should not use the admin API. Instead,\n    use one of the Client SDKs for tasks like authenticating users, calling\n    functions, and interacting with services.\n\n    ## Project \u0026 Application IDs\n\n    **Note**: The terms _Project ID_ and _Group ID_ are interchangeable.\n\n    Realm APIs frequently require two parameters: your Atlas _Project/Group\n    ID_, and your Realm _Application ID_.\n\n    ### Project ID\n\n    You can find your Project ID from your MongoDB Atlas Dashboard. [Learn how to find a Project ID](https://www.mongodb.com/docs/realm/get-started/find-your-project-or-app-id#std-label-find-your-project-id).\n\n    ### Application ID\n\n    To find an Application ID, make a request to the Realm [GET /groups/{groupid}/apps](#operation/adminListApplications)\n    API endpoint.\n\n    This request has the following format, referencing the `access_token`\n    and the Group ID:\n\n    ```sh\n    curl --request GET \\\n      --header 'Authorization: Bearer \u003caccess_token\u003e' \\\n      https://realm.mongodb.com/api/admin/v3.0/groups/{groupId}/apps\n    ```\n\n    This will return a list of objects describing each Realm app in the\n    provided group. For Admin API requests, your Application ID is the\n    ObjectId value in the `_id` field, _not_ the `client_app_id`.\n\n    ```json\n    [\n      {\n        \"_id\": \"5997529e46224c6e42gb6dd9\",\n        \"group_id\": \"57879f6cc4b32dbe440bb8c5\",\n        \"domain_id\": \"5886619e46124e4c42fb5dd8\",\n        \"client_app_id\": \"myapp-abcde\",\n        \"name\": \"myapp\",\n        \"location\": \"US-VA\",\n        \"deployment_model\": \"GLOBAL\",\n        \"last_used\": 1615153544,\n        \"last_modified\": 0,\n        \"product\": \"standard\",\n        \"environment\": \"\"\n      }\n    ]\n    ```\n\n    ## Get Authentication Tokens\n\n    Every request to the Realm Admin API must include a valid and current\n    authorization token from the MongoDB Cloud API as a bearer token in the\n    `Authorization` header. You will need a valid [programmatic API key](https://docs.atlas.mongodb.com/configure-api-access)\n    for MongoDB Atlas to get a token.\n\n    Once you have an API key pair, call the authentication endpoint:\n\n    ```shell\n    curl --request POST \\\n      --header 'Content-Type: application/json' \\\n      --header 'Accept: application/json' \\\n      --data '{\"username\": \"\u003cPublic API Key\u003e\", \"apiKey\": \"\u003cPrivate API Key\u003e\"}' \\\n      https://realm.mongodb.com/api/admin/v3.0/auth/providers/mongodb-cloud/login\n    ```\n\n    If authentication succeeds, MongoDB Realm returns an access token as\n    part of the JSON response document:\n\n    ```json\n    {\n      \"access_token\": \"\u003caccess_token\u003e\",\n      \"refresh_token\": \"\u003crefresh_token\u003e\",\n      \"user_id\": \"\u003cuser_id\u003e\",\n      \"device_id\": \"\u003cdevice_id\u003e\"\n    }\n    ```\n\n    The `access_token` represents a limited-time authorization to interact\n    with the Admin API. To authenticate a request, include the token in a\n    [Bearer token](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)\n    `Authorization` header.\n\n    ```http\n    Authorization: Bearer \u003caccess_token\u003e\n    ```\n\n  version: \"3.0\"\n  title: MongoDB Realm API\nservers:\n  - url: https://realm.mongodb.com/api/admin/v3.0\n    description: The root API resource and starting point for the Realm API.\npaths:\n  \"/auth/providers\":\n    get:\n      tags:\n        - admin\n      operationId: getAdminAuthProviders\n      summary: Enumerate available Realm administration authentication providers\n      responses:\n        \"200\":\n          description: Successfully enumerated available authentication providers.\n          content:\n            application/json:\n              schema:\n                type: array\n                description: An array of authentication providers.\n                items:\n                  \"$ref\": \"#/components/schemas/ProviderSummary\"\n      security: []\n  \"/auth/providers/{provider}/login\":\n    post:\n      tags:\n        - admin\n      operationId: adminLogin\n      summary: Authenticate as a Realm administrator\n      description: |\n        Authenticate as a Realm administrator. Use [GET\n        /auth/providers](#section/adminGetLogs) to list the available\n        authentication providers.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                username:\n                  type: string\n                apiKey:\n                  type: string\n              required:\n                - username\n                - apiKey\n      responses:\n        \"200\":\n          description: Authentication was successful.\n          content:\n            application/json:\n              schema:\n                properties:\n                  access_token:\n                    type: string\n                    description: |-\n                      An access token you may provide in the `Authorization` header of API\n                      requests. [The Realm API Authentication section](#section/Get-Authentication-Tokens) demonstrates how to use this token.\n                  refresh_token:\n                    type: string\n                    description: |\n                      A refresh token you may provide in the `Authorization` header of \n                      [POST auth/session](#section/adminCreateSession)\n                      to obtain a new `access_token` for the current user session.\n                  user_id:\n                    type: string\n                    description: The unique `_id` value of the MongoDB Cloud user.\n                  device_id:\n                    type: string\n      security: []\n    parameters:\n      - name: provider\n        description: The authentication provider to use.\n        in: path\n        required: true\n        schema:\n          \"$ref\": \"#/components/schemas/ProviderType\"\n  \"/auth/profile\":\n    get:\n      tags:\n        - admin\n      operationId: getAdminProfile\n      summary: Get information about the currently logged in user\n      responses:\n        \"200\":\n          description: The profile was successfully retrieved.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/RealmProfile\"\n  \"/auth/session\":\n    post:\n      tags:\n        - admin\n      operationId: adminCreateSession\n      summary: Obtain a session access token\n      responses:\n        \"201\":\n          description: Successfully created.\n          content:\n            application/json:\n              schema:\n                properties:\n                  access_token:\n                    type: string\n      security:\n        - refreshAuth: []\n    delete:\n      tags:\n        - admin\n      operationId: adminDeleteSession\n      summary: Delete a session access token\n      responses:\n        \"401\":\n          description: \"invalid refresh token: incorrect token type\"\n  \"/groups/{groupId}/apps\":\n    get:\n      tags:\n        - apps\n      operationId: adminListApplications\n      summary: List all Realm apps in an Atlas project/group\n      description: |-\n        List all Realm apps within an Atlas\n        [project/group](https://docs.atlas.mongodb.com/tutorial/manage-projects/).\n      parameters:\n        - name: product\n          in: query\n          description: |-\n            Specify `product=atlas` to include [Atlas\n            trigger](https://docs.atlas.mongodb.com/triggers) apps.\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successfully listed.\n          content:\n            application/json:\n              schema:\n                items:\n                  \"$ref\": \"#/components/schemas/Application\"\n    post:\n      tags:\n        - apps\n      operationId: adminCreateApplication\n      summary: Create a new Realm app\n      parameters:\n        - name: defaults\n          in: query\n          description: Whether or not to create a default application.\n          required: false\n          schema:\n            type: boolean\n      requestBody:\n        description: The application to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/NewApplication\"\n      responses:\n        \"201\":\n          description: The application was successfully created.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ApplicationSummary\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n  \"/groups/{groupId}/apps/{appId}\":\n    get:\n      tags:\n        - apps\n      operationId: adminGetApplication\n      summary: Retrieve an application definition\n      responses:\n        \"200\":\n          description: The application was successfully retrieved.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Application\"\n    delete:\n      tags:\n        - apps\n      operationId: adminDeleteApplication\n      summary: Delete an application\n      responses:\n        \"204\":\n          description: The application was successfully deleted.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/export\":\n    get:\n      tags:\n        - apps\n      operationId: adminExportApplication\n      summary: Export an application as a zip file\n      description: |-\n        [Export](https://www.mongodb.com/docs/realm/manage-apps/configure/export-realm-app#std-label-export-realm-app)\n        an application as a zip file.\n      responses:\n        \"200\":\n          description: The application was successfully exported.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/triggers\":\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n    post:\n      tags:\n        - triggers\n      operationId: adminCreateTrigger\n      summary: Create a trigger\n      requestBody:\n        description: The trigger to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/TriggerRequest\"\n      responses:\n        \"201\":\n          description: Successfully created.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/TriggerResponse\"\n              example:\n                name: myTrigger\n                type: DATABASE\n                function_id: 5ae8a0c88f25b9dc5cabb21f\n                config:\n                  operation_types:\n                    - INSERT\n                    - UPDATE\n                    - DELETE\n                    - REPLACE\n                  database: HR\n                  collection: employees\n                  service_id: 5adeb649b8b998486770ae7c\n                  match: {}\n                  full_document: true\n    get:\n      tags:\n        - triggers\n      operationId: adminListTriggers\n      summary: List all triggers\n      responses:\n        \"200\":\n          description: Successfully listed triggers.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/TriggerResponse\"\n  \"/groups/{groupId}/apps/{appId}/triggers/{triggerId}\":\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/TriggerId\"\n    put:\n      tags:\n        - triggers\n      operationId: adminUpdateTrigger\n      summary: Update a trigger\n      requestBody:\n        description: The trigger to update.\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/TriggerRequest\"\n      responses:\n        \"204\":\n          description: Successfully updated the trigger.\n        \"409\":\n          description: Encountered an error while updating the trigger.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Error\"\n    get:\n      tags:\n        - triggers\n      operationId: adminGetTrigger\n      summary: Retrieve the configuration for a specific trigger\n      responses:\n        \"200\":\n          description: Successfully retrieved trigger.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/TriggerResponse\"\n    delete:\n      tags:\n        - triggers\n      operationId: adminDeleteTrigger\n      summary: Delete a trigger\n      responses:\n        \"200\":\n          description: Successfully deleted the trigger.\n          content:\n            application/json:\n              schema:\n                properties: {}\n  \"/groups/{groupId}/apps/{appId}/triggers/{triggerId}/resume\":\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/TriggerId\"\n    put:\n      tags:\n        - triggers\n      operationId: adminResumeTrigger\n      summary: Resume a suspended trigger\n      responses:\n        \"204\":\n          description: Successfully resumed the trigger.\n        \"404\":\n          description: Trigger not found.\n          content:\n            application/json:\n              schema:\n                properties:\n                  error:\n                    type: string\n                    description: A description of the error that Realm encountered.\n  \"/groups/{groupId}/apps/{appId}/values\":\n    get:\n      tags:\n        - values\n      operationId: adminListValues\n      description: |-\n        List all [values](https://www.mongodb.com/docs/realm/values-and-secrets)\n        defined in an application.\n      summary: |-\n        List all values defined in an application.\n      responses:\n        \"200\":\n          description: |-\n            [values](https://www.mongodb.com/docs/realm/values-and-secrets) were\n            successfully enumerated.\n          content:\n            application/json:\n              schema:\n                items:\n                  \"$ref\": \"#/components/schemas/ValueSummary\"\n    post:\n      tags:\n        - values\n      operationId: adminCreateValue\n      summary: Define a Value in an application.\n      description: |-\n        Define a [Value](https://www.mongodb.com/docs/realm/values-and-secrets) in\n        an application.\n      requestBody:\n        description: The value to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/NewValue\"\n      responses:\n        \"201\":\n          description: |-\n            The [value](https://www.mongodb.com/docs/realm/values-and-secrets) was\n            successfully defined.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/NewValue\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/values/{valueId}\":\n    get:\n      tags:\n        - values\n      operationId: adminGetValue\n      summary: |-\n        Retrieve a value definition from an application\n      description: |-\n        Retrieve a [value](https://www.mongodb.com/docs/realm/values-and-secrets)\n        definition from an application.\n      responses:\n        \"200\":\n          description: Successfully retrieved the value.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Value\"\n    delete:\n      tags:\n        - values\n      operationId: adminDeleteValue\n      summary: |-\n        Delete a value defined in an application.\n      description: |-\n        Delete a [value](https://www.mongodb.com/docs/realm/values-and-secrets)\n        defined in an application.\n      responses:\n        \"204\":\n          description: Successfully deleted the value.\n    put:\n      tags:\n        - values\n      operationId: adminUpdateValue\n      summary: Update a value definition in an application.\n      description: |-\n        Update a [value](https://www.mongodb.com/docs/realm/values-and-secrets)\n        definition in an application.\n      responses:\n        \"200\":\n          description: Successfully updated the value.\n          content:\n            application/json:\n              schema:\n                items:\n                  \"$ref\": \"#/components/schemas/NewValue\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ValueId\"\n  \"/groups/{groupId}/apps/{appId}/services\":\n    get:\n      tags:\n        - services\n      operationId: adminListServices\n      summary: List all services within an application.\n      description: |-\n        List all [services](https://www.mongodb.com/docs/realm/services#std-label-services) within an\n        application.\n      responses:\n        \"200\":\n          description: Successfully listed services.\n          content:\n            application/json:\n              schema:\n                items:\n                  \"$ref\": \"#/components/schemas/Service\"\n    post:\n      tags:\n        - services\n      operationId: adminCreateService\n      summary: Create a service\n      description: Create a [service](https://www.mongodb.com/docs/realm/services#std-label-services).\n      responses:\n        \"201\":\n          description: Successfully created the service.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/NewService\"\n        \"409\":\n          description: There is already a service with the given `name`.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/services/{serviceId}\":\n    get:\n      tags:\n        - services\n      operationId: adminGetService\n      summary: Retrieve a service\n      description: Retrieve a [service](https://www.mongodb.com/docs/realm/services#std-label-services).\n      responses:\n        \"200\":\n          description: The service was successfully deleted.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Service\"\n    delete:\n      tags:\n        - services\n      operationId: adminDeleteService\n      summary: Delete a service.\n      description: Delete a [service](https://www.mongodb.com/docs/realm/services#std-label-services).\n      responses:\n        \"204\":\n          description: The service was successfully deleted.\n    patch:\n      tags:\n        - services\n      operationId: adminUpdateService\n      summary: Update a service\n      description: Update a [service](https://www.mongodb.com/docs/realm/services#std-label-services).\n      responses:\n        \"200\":\n          description: Successfully updated.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ServiceId\"\n  \"/groups/{groupId}/apps/{appId}/services/{serviceId}/commands/{commandName}\":\n    post:\n      tags:\n        - services\n      operationId: adminRunCommand\n      summary: Run a command associated with a service\n      description: |-\n        Run a command associated with a\n        [service](https://www.mongodb.com/docs/realm/services#std-label-services).\n      responses:\n        \"200\":\n          description: Successfully executed.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ServiceId\"\n      - \"$ref\": \"#/components/parameters/CommandName\"\n  \"/groups/{groupId}/apps/{appId}/services/{serviceId}/commands/build_info\":\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ServiceId\"\n    get:\n      tags:\n        - services\n      operationId: getBuildInfo\n      summary: Get information about the underlying Atlas mongod\n      responses:\n        \"200\":\n          description: The build information was successfully retrieved.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/BuildInfo\"\n  \"/groups/{groupId}/apps/{appId}/services/{serviceId}/config\":\n    get:\n      tags:\n        - services\n      operationId: adminGetServiceConfig\n      summary: Retrieve a service's configuration.\n      description: |-\n        Retrieve a [service's](https://www.mongodb.com/docs/realm/services#std-label-services)\n        configuration.\n      responses:\n        \"200\":\n          description: Successfully retrieved.\n    patch:\n      tags:\n        - services\n      operationId: adminUpdateServiceConfig\n      summary: Update a service's configuration\n      description: Update a [service's](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.\n      responses:\n        \"200\":\n          description: Successfully updated.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ServiceId\"\n  \"/groups/{groupId}/apps/{appId}/services/{serviceId}/rules\":\n    get:\n      tags:\n        - services\n        - rules\n      operationId: adminListRules\n      summary: List rules\n      description: List [rules](https://www.mongodb.com/docs/realm/rules#std-label-mongodb-rules).\n      responses:\n        \"200\":\n          description: Successfully listed.\n          content:\n            application/json:\n              schema:\n                items:\n                  \"$ref\": \"#/components/schemas/Rule\"\n    post:\n      tags:\n        - services\n        - rules\n      operationId: adminCreateRule\n      summary: Create a rule\n      description: Create a [rule](https://www.mongodb.com/docs/realm/rules#std-label-mongodb-rules).\n      requestBody:\n        required: true\n        description: The rule to create.\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/Rule\"\n      responses:\n        \"201\":\n          description: Successfully created.\n          content:\n            application/json:\n              schema:\n                properties:\n                  _id:\n                    type: string\n                  name:\n                    type: string\n        \"409\":\n          description: There is already a rule with the given `name`.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ServiceId\"\n  \"/groups/{groupId}/apps/{appId}/services/{serviceId}/rules/{ruleId}\":\n    get:\n      tags:\n        - services\n        - rules\n      operationId: adminGetRule\n      summary: Retrieve a rule\n      description: Retrieve a [rule](https://www.mongodb.com/docs/realm/rules#std-label-mongodb-rules).\n      responses:\n        \"200\":\n          description: Successfully retrieved.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Rule\"\n    delete:\n      tags:\n        - services\n        - rules\n      operationId: adminDeleteRule\n      summary: Delete a rule\n      description: Delete a [rule](https://www.mongodb.com/docs/realm/rules#std-label-mongodb-rules).\n      responses:\n        \"204\":\n          description: Successfully deleted.\n    put:\n      tags:\n        - services\n        - rules\n      operationId: adminUpdateRule\n      summary: Update a rule\n      description: Update a [rule](https://www.mongodb.com/docs/realm/rules#std-label-mongodb-rules).\n      requestBody:\n        required: true\n        description: The new state of the rule.\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/Rule\"\n      responses:\n        \"200\":\n          description: Successfully updated.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ServiceId\"\n      - \"$ref\": \"#/components/parameters/RuleId\"\n  \"/groups/{groupId}/apps/{appId}/services/{serviceId}/commands/generate_schema\":\n    post:\n      tags:\n        - services\n      operationId: adminGenerateSchema\n      summary: Generate a JSON schema from sample\n      description: Sample a subset of documents in a collection to generate a JSON schema.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - database_name\n                - collection_name\n                - limit\n              properties:\n                database_name:\n                  type: string\n                  description: The name of the database that contains the collection.\n                collection_name:\n                  type: string\n                  description:\n                    The name of the collection to sample and generate a\n                    schema for.\n                limit:\n                  type: integer\n                  description: The maximum number of documents to include in the sample.\n      responses:\n        \"200\":\n          description: Successfully generated schema\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  schema:\n                    type: object\n                    description: The generated JSON schema\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ServiceId\"\n  \"/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks\":\n    get:\n      tags:\n        - services\n        - webhooks\n      operationId: adminListWebhooks\n      summary: List webhooks\n      description: List [webhooks](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).\n      responses:\n        \"200\":\n          description: Successfully listed incoming webhooks.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/IncomingWebhook\"\n    post:\n      tags:\n        - services\n        - webhooks\n      operationId: adminCreateWebhook\n      summary: Create a webhook\n      description: Create a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).\n      requestBody:\n        description: The webhook to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/IncomingWebhook\"\n      responses:\n        \"201\":\n          description: Successfully created.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ServiceId\"\n  \"/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks/{incomingWebhookId}\":\n    get:\n      tags:\n        - services\n        - webhooks\n      operationId: adminGetWebhook\n      summary: Retrieve a webhook\n      description: Retrieve a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).\n      responses:\n        \"200\":\n          description: Successfully retrieved.\n    delete:\n      tags:\n        - services\n        - webhooks\n      operationId: adminDeleteWebhook\n      summary: Delete a webhook\n      description: Delete a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).\n      responses:\n        \"204\":\n          description: Successfully deleted.\n    put:\n      tags:\n        - services\n        - webhooks\n      operationId: adminUpdateWebhook\n      summary: Update a webhook\n      description: Update a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).\n      requestBody:\n        required: true\n        description: The updated state of the webhook.\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/IncomingWebhook\"\n      responses:\n        \"200\":\n          description: Successfully updated.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ServiceId\"\n      - \"$ref\": \"#/components/parameters/IncomingWebhookId\"\n  \"/groups/{groupId}/apps/{appId}/sync/data\":\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n    get:\n      tags:\n        - sync\n      operationId: adminGetSync\n      summary: Get sync information for a specific linked MongoDB cluster.\n      description: Retrieve partition field data when using [Partition-Based Sync](https://www.mongodb.com/docs/realm/sync/data-access-patterns/partitions/).\n      responses:\n        \"200\":\n          description: Successfully retrieved.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/SyncDataResponse\"\n      parameters:\n        - in: query\n          name: service_id\n          required: true\n          schema:\n            type: string\n          description: The Service ID for the linked cluster.\n  \"/groups/{groupId}/apps/{appId}/push/notifications\":\n    get:\n      tags:\n        - notifications\n      operationId: adminListNotifications\n      summary: List push notifications\n      description: |-\n        List [push notifications](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).\n      parameters:\n        - name: state\n          in: query\n          description: Only list notifications with the given state.\n          required: false\n          schema:\n            \"$ref\": \"#/components/schemas/MessageState\"\n      responses:\n        \"200\":\n          description: Successfully listed.\n          content:\n            application/json:\n              schema:\n                items:\n                  \"$ref\": \"#/components/schemas/Message\"\n    post:\n      tags:\n        - notifications\n      operationId: adminCreateNotification\n      summary: Create a push notification\n      description: |-\n        Create a [push\n        notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).\n      requestBody:\n        required: true\n        description: The notification to create.\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/NewMessage\"\n      responses:\n        \"201\":\n          description: Successfully created.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/push/notifications/{messageId}\":\n    get:\n      tags:\n        - notifications\n      operationId: adminGetMessage\n      summary: Retrieve a push notification message\n      description: |-\n        Retrieve a [push\n        notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications)\n        message.\n      responses:\n        \"200\":\n          description: Successfully retrieved.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Message\"\n    delete:\n      tags:\n        - notifications\n      operationId: adminDeleteMessage\n      summary: Delete a push notification message\n      description: |-\n        Delete a [push\n        notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications)\n        message.\n      responses:\n        \"204\":\n          description: Successfully deleted.\n    put:\n      tags:\n        - notifications\n      operationId: adminUpdateMessage\n      summary: Update a push notification\n      description: |-\n        Update a [push\n        notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications)\n        message.\n      responses:\n        \"200\":\n          description: Successfully updated.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Message\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/MessageId\"\n  \"/groups/{groupId}/apps/{appId}/push/notifications/{messageId}/type\":\n    put:\n      tags:\n        - notifications\n      operationId: adminSetMessageType\n      summary: Set a push notification's type\n      description: |-\n        Set a [push\n        notification's](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications)\n        type.\n      responses:\n        \"200\":\n          description: Successfully set.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/MessageId\"\n  \"/groups/{groupId}/apps/{appId}/push/notifications/{messageId}/send\":\n    post:\n      tags:\n        - notifications\n      operationId: adminSendMessage\n      summary: Send a push notification\n      description: |-\n        Send a [push\n        notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).\n      responses:\n        \"200\":\n          description: Successfully sent.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/MessageId\"\n  \"/groups/{groupId}/apps/{appId}/users\":\n    get:\n      tags:\n        - users\n      operationId: adminListUsers\n      summary: List users\n      description: List [users](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).\n      parameters:\n        - \"$ref\": \"#/components/parameters/UsersAfter\"\n        - \"$ref\": \"#/components/parameters/UsersSort\"\n        - \"$ref\": \"#/components/parameters/UsersDesc\"\n      responses:\n        \"200\":\n          description: Successfully listed.\n          content:\n            application/json:\n              schema:\n                type: array\n                maxItems: 50\n                description: At most 50 results per request.\n                items:\n                  \"$ref\": \"#/components/schemas/User\"\n    post:\n      tags:\n        - users\n      operationId: adminCreateUser\n      summary: Create a user\n      description: Create a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).\n      requestBody:\n        required: true\n        description: The user to create\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n              required:\n                - email\n                - password\n      responses:\n        \"201\":\n          description: Successfully created.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/users/verify_token\":\n    post:\n      tags:\n        - users\n      operationId: adminVerifyUserAccessToken\n      summary: Verify valid client access token\n      description: |-\n        Verify a that a user's [client access\n        token](https://www.mongodb.com/docs/realm/reference/authenticate-http-client-requests#std-label-get-client-api-access-token)\n        is valid.\n      requestBody:\n        required: true\n        description: |-\n          The user's client access token. This is distinct from the\n          [API access token](https://www.mongodb.com/docs/realm/reference/authenticate-http-client-requests#std-label-get-client-api-access-token)\n          you need to authenticate to the admin API.\n        content:\n          application/json:\n            schema:\n              properties:\n                token:\n                  type: string\n              required:\n                - token\n      responses:\n        \"200\":\n          description: |-\n            Success returns this object. A 200 [may also return token\n            expired](https://www.mongodb.com/docs/realm/reference/authenticate-http-client-requests#std-label-verify-client-access-token-responses).\n          content:\n            application/json:\n              schema:\n                properties:\n                  sub:\n                    type: string\n                    description: User ID.\n                  aud:\n                    type: string\n                    description: |-\n                      Optional; specifies which Resource Servers the JWT is valid for. Omitted\n                      if empty.\n                  exp:\n                    type: integer\n                    description: Unix timestamp after which the JWT expires.\n                  iat:\n                    type: integer\n                    description: Unix timestamp at which the JWT was issued.\n                  iss:\n                    type: string\n                    description: The issuer of the JWT.\n                  custom_user_data:\n                    type: object\n                    description: |-\n                      Optional; contains [custom user\n                      data](https://www.mongodb.com/docs/realm/users/enable-custom-user-data#std-label-custom-user-data)\n                      if it exists for the user. Only present if the access token is created\n                      after custom user data is enabled and configured. Omitted if empty.\n                  domain_id:\n                    type: string\n                    description: The UID representing the app domain.\n                  data:\n                    type: string\n                    description:\n                      \"Optional: any metadata stored with the token. Omitted\n                      if empty.\"\n                  device_id:\n                    type: string\n                    description: The UID representing the device.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/users/{uid}\":\n    get:\n      tags:\n        - users\n      operationId: adminGetUser\n      summary: Retrieve a user\n      description: Retrieve a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).\n      responses:\n        \"200\":\n          description: Successfully retrieved.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n    delete:\n      tags:\n        - users\n      operationId: adminDeleteUser\n      summary: Delete a user\n      description: Delete a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).\n      responses:\n        \"204\":\n          description: Successfully deleted.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/Uid\"\n  \"/groups/{groupId}/apps/{appId}/users/{uid}/devices\":\n    get:\n      tags:\n        - users\n      operationId: adminListDevices\n      summary: List a user's devices.\n      responses:\n        \"200\":\n          description: Successfully listed.\n          content:\n            application/json:\n              schema:\n                items:\n                  type: object\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/Uid\"\n  \"/groups/{groupId}/apps/{appId}/users/{uid}/logout\":\n    put:\n      tags:\n        - users\n      operationId: adminUserLogout\n      summary: Revoke user sessions\n      description: |-\n        Revoke all of a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts)'s\n        sessions.\n      responses:\n        \"204\":\n          description: Successfully revoked.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/Uid\"\n  \"/groups/{groupId}/apps/{appId}/users/{uid}/enable\":\n    put:\n      tags:\n        - users\n      operationId: adminEnableUser\n      summary: Enable a user\n      description: Enable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).\n      responses:\n        \"204\":\n          description: Successfully enabled.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/Uid\"\n  \"/groups/{groupId}/apps/{appId}/users/{uid}/disable\":\n    put:\n      tags:\n        - users\n      operationId: adminDisableUser\n      summary: Disable a user\n      description: Disable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).\n      responses:\n        \"204\":\n          description: Successfully disabled.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/Uid\"\n  \"/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}\":\n    delete:\n      tags:\n        - users\n      operationId: adminDeletePendingUser\n      summary: Delete a pending user\n      description: Delete a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).\n      responses:\n        \"204\":\n          description: Successfully deleted.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/Email\"\n  \"/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}/send_confirm\":\n    post:\n      tags:\n        - email\n      operationId: adminSendConfirmationEmail\n      summary: Send a confirmation email\n      description: |-\n        Send a [confirmation\n        email](https://www.mongodb.com/docs/realm/authentication/email-password).\n      responses:\n        \"200\":\n          description: Successfully sent.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/Email\"\n  \"/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}/confirm\":\n    post:\n      tags:\n        - email\n      operationId: adminConfirmPendingUser\n      summary: Confirm a pending user\n      description: Confirm a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).\n      responses:\n        \"204\":\n          description: Successfully confirmed.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/Email\"\n  \"/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}/run_confirm\":\n    post:\n      tags:\n        - email\n      operationId: adminRerunPendingUserConfirmation\n      summary: Rerun a user confirmation workflow\n      description: |-\n        Reruns a pending user's [confirmation workflow](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).\n      responses:\n        \"202\":\n          description: Successfully re-ran confirmation workflow.\n        \"400\":\n          description: |-\n            User is already confirmed or Email/Password authentication is not\n            enabled.\n        \"404\":\n          description: User does not exist.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/Email\"\n  \"/groups/{groupId}/apps/{appId}/debug/execute_function\":\n    post:\n      tags:\n        - functions\n      operationId: adminExecuteFunction\n      summary: Execute a function\n      description: Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions) for testing.\n      parameters:\n        - name: user_id\n          in: query\n          description: |-\n            The user as which to execute the function. Either `user_id` or\n            `run_as_system` is required. You cannot specify both.\n          schema:\n            type: string\n          required: true\n        - name: run_as_system\n          in: query\n          description: |-\n            Determine whether or not to run as system user. Either `run_as_system`\n            or `user_id` is required. You cannot specify both.\n          schema:\n            type: boolean\n          required: true\n      requestBody:\n        required: true\n        description: The function to execute.\n        content:\n          application/json:\n            schema:\n              properties:\n                service:\n                  type: string\n                  description: The service to use when calling this function.\n                name:\n                  type: string\n                  description: The name of the function you want to run.\n                arguments:\n                  type: array\n                  description: Any arguments that your function needs.\n                  items:\n                    type: string\n              required:\n                - name\n      responses:\n        \"200\":\n          description: Successfully executed.\n          content:\n            application/json:\n              schema:\n                properties:\n                  error:\n                    type: object\n                  logs: {}\n                  result:\n                    type: object\n                  stats:\n                    properties:\n                      execution_time:\n                        type: string\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/debug/execute_function_source\":\n    post:\n      tags:\n        - functions\n      operationId: adminExecuteFunctionSource\n      summary: Execute a function's source code for testing.\n      description: |-\n        Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions)'s source code\n        for testing.\n      parameters:\n        - name: user_id\n          in: query\n          description: |-\n            The user as which to execute the function. Either `user_id` or\n            `run_as_system` is required. You cannot specify both.\n          schema:\n            type: string\n          required: true\n        - name: run_as_system\n          in: query\n          description: |-\n            Determine whether or not to run as system user. Either `run_as_system`\n            or `user_id` is required. You cannot specify both.\n          schema:\n            type: boolean\n          required: true\n      requestBody:\n        required: true\n        description: The source to execute.\n        content:\n          application/json:\n            schema:\n              properties:\n                eval_source:\n                  type: string\n                  description: |-\n                    This JSON expression must evaluate to `true` before the function may\n                    run. If this field is blank, it will evaluate to `true`.\n                source:\n                  type: string\n              required:\n                - source\n      responses:\n        \"200\":\n          description: Successfully executed.\n          content:\n            application/json:\n              schema:\n                properties:\n                  error:\n                    type: object\n                  logs: {}\n                  result:\n                    type: object\n                  stats:\n                    properties:\n                      execution_time:\n                        type: string\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/auth_providers\":\n    get:\n      tags:\n        - authproviders\n      operationId: adminListAuthProviders\n      summary: List authentication providers in a Realm app.\n      description: |-\n        List [authentication\n        providers](https://www.mongodb.com/docs/realm/authentication/providers)\n        within a Realm app.\n      responses:\n        \"200\":\n          description: Successfully listed.\n          content:\n            application/json:\n              schema:\n                items:\n                  \"$ref\": \"#/components/schemas/ProviderSummary\"\n    post:\n      tags:\n        - authproviders\n      operationId: adminCreateAuthProvider\n      summary: Create an authentication provider\n      description: |-\n        Create an [authentication\n        provider](https://www.mongodb.com/docs/realm/authentication/providers).\n      requestBody:\n        required: true\n        description: \"\"\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/NewProvider\"\n      responses:\n        \"201\":\n          description: Successfully created.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/FullProvider\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/auth_providers/{providerId}\":\n    get:\n      tags:\n        - authproviders\n      operationId: adminGetAuthProvider\n      summary: Retrieve information about authentication provider\n      description: |-\n        Retrieve information about one of an application's [authentication\n        providers](https://www.mongodb.com/docs/realm/authentication/providers)\n      responses:\n        \"200\":\n          description: Successfully retrieved.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/FullProvider\"\n    delete:\n      tags:\n        - authproviders\n      operationId: adminDeleteAuthProvider\n      summary: Delete an authentication provider\n      description: |-\n        Delete an [authentication\n        provider](https://www.mongodb.com/docs/realm/authentication/providers).\n      responses:\n        \"204\":\n          description: Successfully deleted.\n    patch:\n      tags:\n        - authproviders\n      operationId: adminUpdateAuthProvider\n      summary: Update an authentication provider\n      description: |-\n        Update an [authentication\n        provider](https://www.mongodb.com/docs/realm/authentication/providers).\n      requestBody:\n        required: true\n        description: \"\"\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/FullProvider\"\n      responses:\n        \"204\":\n          description: Successfully updated.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ProviderId\"\n  \"/groups/{groupId}/apps/{appId}/auth_providers/{providerId}/disable\":\n    put:\n      tags:\n        - authproviders\n      operationId: adminDisableAuthProvider\n      summary: Disable an authentication provider\n      description: |-\n        Disable an [authentication\n        provider](https://www.mongodb.com/docs/realm/authentication/providers).\n      responses:\n        \"204\":\n          description: Successfully disabled.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ProviderId\"\n  \"/groups/{groupId}/apps/{appId}/auth_providers/{providerId}/enable\":\n    put:\n      tags:\n        - authproviders\n      operationId: adminEnableAuthProvider\n      summary: Enable an authentication provider\n      description: |-\n        Enable an [authentication\n        provider](https://www.mongodb.com/docs/realm/authentication/providers).\n      responses:\n        \"204\":\n          description: Successfully enabled.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ProviderId\"\n  \"/groups/{groupId}/apps/{appId}/security/allowed_request_origins\":\n    get:\n      tags:\n        - security\n      operationId: adminListAllowedRequestOrigins\n      summary: List allowed HTTP origins\n      description: |-\n        List the allowed [HTTP\n        origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin)\n        from which MongoDB Realm should allow requests.\n      responses:\n        \"200\":\n          description: Successfully listed.\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n    post:\n      tags:\n        - security\n      operationId: adminSetAllowedRequestOrigins\n      summary: Set allowed HTTP origins\n      description: |-\n        Set the allowed [HTTP\n        origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin)\n        from which MongoDB Realm should allow requests.\n      requestBody:\n        required: true\n        description: A list of HTTP origins.\n        content:\n          application/json:\n            schema:\n              items:\n                description: An HTTP origin. Must be of the form `\u003cscheme\u003e://\u003chost\u003e[:port]`.\n                type: string\n      responses:\n        \"204\":\n          description: The allowed HTTP origins were successfully set.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/security/access_list\":\n    get:\n      tags:\n        - security\n      operationId: allowedIPAccessListGet\n      summary: List the allowed entries in the Access List\n      description: List the allowed entries in the Access List of your Realm app.\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                items:\n                  properties:\n                    current_ip:\n                      type: string\n                    allowed_ips:\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          _id:\n                            type: string\n                            format: ObjectID\n                            description: ObjectID\n                          address:\n                            type: string\n                          ip:\n                            type: string\n                            format: net.IP\n                            description: net.IP\n                          network:\n                            type: string\n                            format: net.IPNet\n                            description: net.IPNet\n                          comment:\n                            type: string\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n    post:\n      tags:\n        - security\n      operationId: allowedIPAccessListCreate\n      summary: Create an IP address or CIDR block in the Access List\n      description: |-\n        Create an IP address or CIDR block in the Access List for your Realm\n        app.\n      responses:\n        \"201\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _id:\n                    type: string\n                    format: ObjectID\n                    description: ObjectID\n                  address:\n                    type: string\n                  ip:\n                    type: string\n                    format: net.IP\n                    description: net.IP\n                  network:\n                    type: string\n                    format: net.IPNet\n                    description: net.IPNet\n                  comment:\n                    type: string\n  \"/groups/{groupId}/apps/{appId}/security/access_list/{ipId}\":\n    patch:\n      tags:\n        - security\n      operationId: allowedIPAccessListUpdate\n      summary: Modify an IP address or CIDR block in the Access List\n      description: |-\n        Modify an IP address or CIDR block in the Access List of your Realm\n        app\n      responses:\n        \"201\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _id:\n                    type: string\n                    format: ObjectID\n                    description: ObjectID\n                  address:\n                    type: string\n                  ip:\n                    type: string\n                    format: net.IP\n                    description: net.IP\n                  network:\n                    type: string\n                    format: net.IPNet\n                    description: net.IPNet\n                  comment:\n                    type: string\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - name: ipId\n        in: path\n        description: |-\n          The IP address entry denoted by `ip_id` with the information given in\n          the request body\n        schema:\n          type: string\n        required: true\n    delete:\n      tags:\n        - security\n      operationId: allowedIPAccessListDelete\n      summary: Delete an IP address or CIDR block from the Access List\n      description: |-\n        Delete an IP address or CIDR block from the Access List of your Realm\n        app\n      responses:\n        \"404\":\n          description: No IP addresses or CIDR blocks to delete\n  \"/groups/{groupId}/apps/{appId}/logs\":\n    get:\n      tags:\n        - logs\n      operationId: adminGetLogs\n      summary: Retrieve MongoDB Realm logs\n      parameters:\n        - name: co_id\n          in: query\n          description: Return only log messages associated with the given request ID.\n          schema:\n            type: string\n          required: false\n        - name: errors_only\n          in: query\n          description: |-\n            The value of this field does not matter. If included in the request,\n            this endpoint only returns error logs (even if the value is set to ``false``).\n            If this field is excluded from the request, this endpoint only returns non-error logs.\n          schema:\n            type: boolean\n          required: false\n        - name: user_id\n          in: query\n          schema:\n            type: string\n          description: Return only log messages associated with the given `user_id`.\n          required: false\n        - name: start_date\n          in: query\n          schema:\n            type: string\n          description: |-\n            The date and time in ISO 8601 at which to begin returning results,\n            exclusive.\n          required: false\n        - name: end_date\n          in: query\n          schema:\n            type: string\n          description: |-\n            The date and time in ISO 8601 at which to cease returning results,\n            inclusive.\n          required: false\n        - name: skip\n          in: query\n          schema:\n            type: integer\n          description: |-\n            The offset number of matching log entries to skip before including them\n            in the response.\n          required: false\n        - name: limit\n          in: query\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n          description: |-\n            The maximum number of log entries to include in the response. If the\n            query matches more than this many logs, it returns documents in\n            ascending order by date until the limit is reached.\n          required: false\n        - name: type\n          in: query\n          schema:\n            type: string\n            enum:\n              - TRIGGER_FAILURE\n              - DB_TRIGGER\n              - AUTH_TRIGGER\n              - SCHEDULED_TRIGGER\n              - FUNCTION\n              - SERVICE_FUNCTION\n              - STREAM_FUNCTION\n              - SERVICE_STREAM_FUNCTION\n              - AUTH\n              - WEBHOOK\n              - ENDPOINT\n              - PUSH\n              - API\n              - API_KEY\n              - GRAPHQL\n              - SYNC_CONNECTION_START\n              - SYNC_CONNECTION_END\n              - SYNC_SESSION_START\n              - SYNC_SESSION_END\n              - SYNC_CLIENT_WRITE\n              - SYNC_ERROR\n              - SYNC_OTHER\n              - SCHEMA_ADDITIVE_CHANGE\n              - SCHEMA_GENERATION\n              - SCHEMA_VALIDATION\n              - LOG_FORWARDER\n            description: The kind of log you would like to retrieve.\n            required: false\n      responses:\n        \"200\":\n          description: Successfully retrieved.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - nextEndDate\n                  - nextSkip\n                properties:\n                  logs:\n                    type: array\n                    maxItems: 100\n                    description: At most 100 results per request.\n                    items:\n                      type: object\n                      properties:\n                        _id:\n                          type: string\n                        co_id:\n                          type: string\n                        domain_id:\n                          type: string\n                        app_id:\n                          type: string\n                          description: |-\n                            The ObjectID of your application.\n                            [The Realm API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this\n                            value.\n                        group_id:\n                          type: string\n                          description: |-\n                            An Atlas [Project/Group\n                            ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).\n                        request_url:\n                          type: string\n                        request_method:\n                          type: string\n                        started:\n                          type: string\n                        completed:\n                          type: string\n                        error:\n                          type: string\n                        error_code:\n                          type: string\n                        status:\n                          type: integer\n                  nextEndDate:\n                    type: string\n                    description: |-\n                      The end date and time of the next page of log entries in ISO 8601\n                      format. MongoDB Realm paginates the result sets of queries that match\n                      more than 100 log entries and includes this field in paginated\n                      responses. To get the next page of up to 100 entries, pass this value as\n                      the `end_date` parameter in a subsequent request.\n                  nextSkip:\n                    type: integer\n                    description: |-\n                      The offset into the next page of log entries in ISO 8601 format. MongoDB\n                      Realm paginates the result sets of queries that match more than 100 log\n                      entries and includes this field in paginated responses where the first\n                      entry on the next page has the same timestamp as the last entry on this\n                      page. To get the next page of up to 100 entries, pass this value, if it\n                      is present, as the `skip` parameter in a subsequent request.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/log_forwarders\":\n    parameters:\n      - $ref: \"#/components/parameters/GroupId\"\n      - $ref: \"#/components/parameters/AppId\"\n    get:\n      tags: [\"log_forwarders\"]\n      operationId: \"listLogForwarders\"\n      summary: \"List log forwarders.\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/LogForwarder\"\n    post:\n      tags: [\"log_forwarders\"]\n      operationId: \"createLogForwarder\"\n      summary: \"Create a log forwarder.\"\n      requestBody:\n        required: true\n        description: \"A log forwarder configuration\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateLogForwarderRequest\"\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LogForwarder\"\n  \"/groups/{groupId}/apps/{appId}/log_forwarders/{forwarderId}\":\n    parameters:\n      - $ref: \"#/components/parameters/GroupId\"\n      - $ref: \"#/components/parameters/AppId\"\n      - $ref: \"#/components/parameters/ForwarderId\"\n    get:\n      tags: [\"log_forwarders\"]\n      operationId: \"getLogForwarder\"\n      summary: \"Get a specific log forwarder.\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LogForwarder\"\n    patch:\n      tags: [\"log_forwarders\"]\n      operationId: \"updateLogForwarder\"\n      summary: \"Update a log forwarder.\"\n      requestBody:\n        required: true\n        description: \"A log forwarder configuration\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateLogForwarderRequest\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LogForwarder\"\n    delete:\n      tags: [\"log_forwarders\"]\n      operationId: \"deleteGwarder\"\n      summary: \"Delete a log forwarder.\"\n      responses:\n        204:\n          description: No Content\n  \"/groups/{groupId}/apps/{appId}/log_forwarders/{forwarderId}/enable\":\n    parameters:\n      - $ref: \"#/components/parameters/GroupId\"\n      - $ref: \"#/components/parameters/AppId\"\n      - $ref: \"#/components/parameters/ForwarderId\"\n    put:\n      tags: [\"log_forwarders\"]\n      operationId: \"enableLogForwarder\"\n      summary: \"Enable a log forwarder.\"\n      responses:\n        204:\n          description: No Content\n  \"/groups/{groupId}/apps/{appId}/log_forwarders/{forwarderId}/disable\":\n    parameters:\n      - $ref: \"#/components/parameters/GroupId\"\n      - $ref: \"#/components/parameters/AppId\"\n      - $ref: \"#/components/parameters/ForwarderId\"\n    put:\n      tags: [\"log_forwarders\"]\n      operationId: \"disableLogForwarder\"\n      summary: \"Disable a log forwarder.\"\n      responses:\n        204:\n          description: No Content\n  \"/groups/{groupId}/apps/{appId}/api_keys\":\n    get:\n      tags:\n        - apikeys\n      operationId: adminListApiKeys\n      summary: List API keys\n      description: |-\n        List [API keys](https://www.mongodb.com/docs/realm/authentication/api-key)\n        associated with a Realm app.\n      responses:\n        \"200\":\n          description: The API keys were successfully listed.\n          content:\n            application/json:\n              schema:\n                items:\n                  properties:\n                    _id:\n                      type: string\n                    name:\n                      type: string\n                    disabled:\n                      type: boolean\n    post:\n      tags:\n        - apikeys\n      operationId: adminCreateApiKey\n      summary: Create a new API key\n      description: |-\n        Create a new [API\n        key](https://www.mongodb.com/docs/realm/authentication/api-key).\n      requestBody:\n        description: The API key to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  type: string\n              required:\n                - name\n      responses:\n        \"201\":\n          description: The API key was successfully created.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ApiKey\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}\":\n    get:\n      tags:\n        - apikeys\n      operationId: adminGetApiKey\n      summary: Retrieve information about an API key\n      description: |-\n        Retrieve information about an [API\n        key](https://www.mongodb.com/docs/realm/authentication/api-key).\n      responses:\n        \"200\":\n          description: The API key was successfully retrieved.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ApiKeyResponse\"\n    delete:\n      tags:\n        - apikeys\n      operationId: adminDeleteApiKey\n      summary: Delete an API key\n      description: |-\n        Delete an [API\n        key](https://www.mongodb.com/docs/realm/authentication/api-key).\n      responses:\n        \"204\":\n          description: The API key was successfully deleted.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ApiKeyId\"\n  \"/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}/enable\":\n    put:\n      tags:\n        - apikeys\n      operationId: adminEnableApiKey\n      summary: Enable an API key\n      description: |-\n        Enable an [API\n        key](https://www.mongodb.com/docs/realm/authentication/api-key).\n      responses:\n        \"204\":\n          description: The API key was successfully enabled.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ApiKeyId\"\n  \"/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}/disable\":\n    put:\n      tags:\n        - apikeys\n      operationId: adminDisableApiKey\n      summary: Disable an API key\n      description: |-\n        Disable an [API\n        key](https://www.mongodb.com/docs/realm/authentication/api-key).\n      responses:\n        \"204\":\n          description: The API key was successfully disabled.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/ApiKeyId\"\n  \"/groups/{groupId}/apps/{appId}/secrets\":\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n    get:\n      tags:\n        - secrets\n      operationId: adminGetAllSecrets\n      summary: List secrets\n      description: |-\n        List [secrets](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets#std-label-define-secret)\n        associated with a Realm app.\n      responses:\n        \"200\":\n          description: The Secrets were successfully listed.\n          content:\n            application/json:\n              schema:\n                items:\n                  properties:\n                    _id:\n                      type: string\n                    name:\n                      type: string\n    post:\n      tags:\n        - secrets\n      operationId: adminCreateASecret\n      summary: |-\n        Create a new Secret\n      description: |-\n        Create a new\n        [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets).\n      requestBody:\n        description: The Secret to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  type: string\n                value:\n                  type: string\n              required:\n                - name\n                - value\n      responses:\n        \"201\":\n          description: The Secret was successfully created.\n          content:\n            application/json:\n              schema:\n                properties:\n                  _id:\n                    type: string\n                  name:\n                    type: string\n  \"/groups/{groupId}/apps/{appId}/secrets/{secretId}\":\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/SecretId\"\n    put:\n      tags:\n        - secrets\n      operationId: adminModifyASecret\n      summary: Modify a Secret\n      description: |-\n        Modify a\n        [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets)\n        associated with a Realm app.\n      requestBody:\n        description: The modified value of the Secret.\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                _id:\n                  type: string\n                name:\n                  type: string\n                value:\n                  type: string\n              required:\n                - name\n                - value\n      responses:\n        \"204\":\n          description: No body returned for response\n    delete:\n      tags:\n        - secrets\n      operationId: adminDeleteSecret\n      summary: Delete a Secret\n      description: |-\n        Delete a\n        [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets)\n        associated with a Realm app.\n      responses:\n        \"204\":\n          description: The Secret was successfully deleted.\n  \"/groups/{groupId}/apps/{appId}/functions\":\n    get:\n      tags:\n        - functions\n      operationId: adminListFunctions\n      summary: List Functions\n      description: List [Functions](https://www.mongodb.com/docs/realm/functions#std-label-functions).\n      responses:\n        \"200\":\n          description: Successfully listed.\n          content:\n            application/json:\n              schema:\n                items:\n                  properties:\n                    _id:\n                      type: string\n                    name:\n                      type: string\n    post:\n      tags:\n        - functions\n      operationId: adminCreateFunction\n      summary: Create a new Function\n      description: Create a new [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).\n      requestBody:\n        description: The function to create\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/NewFunction\"\n      responses:\n        \"201\":\n          description: The function was successfully created.\n          content:\n            application/json:\n              schema:\n                properties:\n                  _id:\n                    type: string\n                    description: Unique identifier for the function.\n                  name:\n                    type: string\n                    description: Name for the function specified in the `name` field of the request.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/functions/{functionId}\":\n    get:\n      tags:\n        - functions\n      operationId: adminGetFunction\n      summary: Retrieve a Function\n      description: Retrieve a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).\n      responses:\n        \"200\":\n          description: The function was successfully retrieved.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Function\"\n    delete:\n      tags:\n        - functions\n      operationId: adminDeleteFunction\n      summary: Delete a Function\n      description: Delete a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).\n      responses:\n        \"204\":\n          description: The function was successfully deleted.\n    put:\n      tags:\n        - functions\n      operationId: adminUpdateFunction\n      summary: Update a Function\n      description: Update a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).\n      responses:\n        \"200\":\n          description: The function was successfully updated.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/NewFunction\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/FunctionId\"\n  \"/groups/{groupId}/apps/{appId}/dependencies\":\n    get:\n      tags:\n        - dependencies\n      operationId: adminGetAllDependencies\n      summary: List external dependencies\n      description: |-\n        List [external\n        dependencies](https://www.mongodb.com/docs/realm/functions#std-label-external-dependencies) uploaded\n        to the Realm app.\n      responses:\n        \"200\":\n          description: The function was successfully retrieved.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/DependenciesSummary\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/deployments\":\n    get:\n      tags:\n        - deploy\n      operationId: adminListDeployments\n      summary: List recent deployments\n      description: Return the 100 most recent application deployments.\n      responses:\n        \"200\":\n          description: Successfully listed.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/Deployment\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/drafts\":\n    get:\n      tags:\n        - deploy\n      operationId: adminListDeploymentDrafts\n      summary: Return current deployment draft\n      description: Return the current application deployment draft, if applicable.\n      responses:\n        \"200\":\n          description: Successfully listed.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/DeploymentDraft\"\n    post:\n      tags:\n        - deploy\n      operationId: adminCreateDeploymentDraft\n      summary: Create a new deployment draft\n      description: Create a new application deployment draft, if none exists.\n      responses:\n        \"200\":\n          description: Successfully created draft.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/DeploymentDraft\"\n        \"409\":\n          description: Draft already exists\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Error\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/drafts/{draftId}\":\n    delete:\n      tags:\n        - deploy\n      operationId: adminDiscardDraft\n      summary: Discard the specified deployment draft\n      description: Discard the specified application deployment draft.\n      responses:\n        \"204\":\n          description: The draft was successfully discarded.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/DraftId\"\n  \"/groups/{groupId}/apps/{appId}/drafts/{draftId}/deployment\":\n    post:\n      tags:\n        - deploy\n      operationId: adminDeployDraft\n      summary: Deploy a deployment draft\n      description: Deploy the specified application deployment draft.\n      responses:\n        \"201\":\n          description: The draft was successfully deployed.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Application\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/DraftId\"\n  \"/groups/{groupId}/apps/{appId}/drafts/{draftId}/diff\":\n    get:\n      tags:\n        - deploy\n      operationId: adminDeployDraftDiff\n      summary: Return a diff between currently deployed application and deployment draft\n      description: |-\n        Return a diff between the currently deployed application and the\n        specified draft.\n      responses:\n        \"200\":\n          description: Successfully diffed draft.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Diff\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/DraftId\"\n  \"/groups/{groupId}/apps/{appId}/hosting/assets\":\n    get:\n      tags:\n        - hosting\n      operationId: adminGetAllHostedAssets\n      summary: List all hosted assets\n      responses:\n        \"200\":\n          description: Successfully listed hosted files.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/HostedAssetMetadata\"\n    post:\n      tags:\n        - hosting\n      operationId: adminMoveCopyHostedAsset\n      summary: Move or copy a hosted asset\n      description: Move or copy a hosted asset to a new resource path.\n      requestBody:\n        description: |-\n          The hosted asset file and its metadata. (Must use\n          `Content-Type: multipart/mixed`)\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                move_from:\n                  type: string\n                  description: |-\n                    The current resource path of the asset to move. Must be used with\n                    `move_to`.\n                move_to:\n                  type: string\n                  description: |-\n                    The resource path to which the asset will move. Must be used with\n                    `move_from`.\n                copy_from:\n                  type: string\n                  description: |-\n                    The current resource path of the asset to copy. Must be used with\n                    `copy_to`.\n                copy_to:\n                  type: string\n                  description: |-\n                    The resource path to which the asset will be copied. Must be used with\n                    `copy_from`.\n      responses:\n        \"204\":\n          description: Successfully moved/copied the hosted asset.\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/apps/{appId}/hosting/assets/asset\":\n    get:\n      tags:\n        - hosting\n      operationId: adminGetHostedAsset\n      summary: Retrieve metadata for a specific hosted asset\n      parameters:\n        - \"$ref\": \"#/components/parameters/AssetResourcePath\"\n        - \"$ref\": \"#/components/parameters/AssetResourcePathPrefix\"\n      responses:\n        \"200\":\n          description: Successfully retrieved metadata for the hosted file.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/HostedAssetMetadata\"\n        \"404\":\n          description: Asset not found.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n    put:\n      tags:\n        - hosting\n      operationId: adminUploadHostedAsset\n      summary: Upload or replace a hosted asset\n      description: Upload or replace a hosted asset at a specific resource path.\n      parameters:\n        - \"$ref\": \"#/components/parameters/AssetResourcePath\"\n      requestBody:\n        description: |-\n          The hosted asset file and its metadata. (Must use\n          `Content-Type: multipart/mixed`)\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                meta:\n                  type: object\n                  \"$ref\": \"#/components/schemas/AssetMetadata\"\n                  required:\n                    - meta\n                    - file\n                  description: |-\n                    An [asset metadata\n                    document](https://www.mongodb.com/docs/realm/admin/api/v3#std-label-asset-metadata-document)\n                    (encoded as JSON).\n                file:\n                  type: string\n                  format: binary\n                  description: The asset file to upload (encoded as binary).\n      responses:\n        \"204\":\n          description: Successfully added/replaced the hosted asset.\n        \"400\":\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    \"$ref\": \"#/components/schemas/Error\"\n    patch:\n      tags:\n        - hosting\n      operationId: adminUpdateHostedAsset\n      summary: Update the metadata attributes of a hosted asset\n      description: |-\n        Update the metadata attributes of a hosted asset at a specific resource\n        path.\n      parameters:\n        - \"$ref\": \"#/components/parameters/AssetResourcePath\"\n      responses:\n        \"204\":\n          description: Successfully updated the hosted asset.\n        \"400\":\n          description: Bad Request.\n      requestBody:\n        description: |-\n          The new metadata attributes for the hosted asset. These attributes\n          replace all existing attributes for the file.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                attributes:\n                  type: array\n                  items:\n                    \"$ref\": \"#/components/schemas/MetadataAttribute\"\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n  \"/groups/{groupId}/measurements\":\n    get:\n      tags:\n        - billing\n      operationId: adminMeasurements\n      summary: List group billing usage in a given period\n      description: |-\n        List the request, compute, sync, and data transfer usage in a given\n        period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.\n      parameters:\n        - \"$ref\": \"#/components/parameters/GroupId\"\n        - name: start\n          in: query\n          description: |-\n            The ISO 8601 date and time of the start of the query period. Default is\n            00:00:00 UTC on the first day of the current month.\n          schema:\n            type: string\n          required: false\n        - name: end\n          in: query\n          description: |-\n            The ISO 8601 date and time of the end of the query period. Default is\n            23:59:59 UTC on the the last day of the current month.\n          schema:\n            type: string\n          required: false\n        - name: granularity\n          in: query\n          description: |-\n            Specifies the granularity of the query period, either P31D (31 day) or\n            PT1H (1 hour). Default is P31D.\n          schema:\n            type: string\n            enum:\n              - P31D\n              - PT1H\n          required: false\n      responses:\n        \"200\":\n          description: The measurements were successfully returned.\n          content:\n            application/json:\n              schema:\n                properties:\n                  start:\n                    type: string\n                    description: |-\n                      The [RFC 3339](https://tools.ietf.org/html/3339) date and time of the\n                      start of the query period, which can be specified with the `start` query\n                      parameter.\n                  end:\n                    type: string\n                    description: |-\n                      The [RFC 3339](https://tools.ietf.org/html/3339) date and time of the\n                      end of the query period, which can be specified with the `end` query\n                      parameter.\n                  granularity:\n                    type: string\n                    description: |-\n                      The granularity, which can be specified with the `granularity` query\n                      parameter.\n                  group_id:\n                    type: string\n                    description: |-\n                      The Atlas [Group\n                      ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).\n                  measurements:\n                    type: array\n                    description: The array of measurements.\n                    items:\n                      properties:\n                        name:\n                          type: string\n                          enum:\n                            - request_count\n                            - compute_time\n                            - data_out\n                            - sync_time\n                          description: |-\n                            The usage metric represented by each data point. See\n                            [billing](https://www.mongodb.com/docs/realm/billing).\n                        units:\n                          type: string\n                          enum:\n                            - \"\u003cempty string\u003e\"\n                            - HOURS\n                            - GIGABYTES\n                          description: The unit of the `value` of each data point.\n                        data_points:\n                          type: array\n                          description: |-\n                            The array of data points for this measurement. A finer `granularity`\n                            results in more data points.\n                          items:\n                            properties:\n                              timestamp:\n                                type: string\n                                description:\n                                  The ISO 8601 date and time of the data\n                                  point.\n                              value:\n                                type: number\n                                description:\n                                  The value at the time in the `unit` of\n                                  the measurement.\n        \"400\":\n          \"$ref\": \"#/components/responses/ClientErrorResponse\"\n  \"/groups/{groupId}/apps/{appId}/measurements\":\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n    get:\n      tags:\n        - billing\n      operationId: adminAppMeasurements\n      summary: List app billing usage\n      description: |-\n        List the request, compute, sync, data transfer, and memory usage of a\n        specific app in a given period for\n        [billing](https://www.mongodb.com/docs/realm/billing) purposes.\n      parameters:\n        - \"$ref\": \"#/components/parameters/GroupId\"\n        - \"$ref\": \"#/components/parameters/AppId\"\n        - name: start\n          in: query\n          description: |-\n            The ISO 8601 date and time of the start of the query period. Default is\n            00:00:00 UTC on the first day of the current month.\n          schema:\n            type: string\n          required: false\n        - name: end\n          in: query\n          description: |-\n            The ISO 8601 date and time of the end of the query period. Default is\n            23:59:59 UTC on the the last day of the current month.\n          schema:\n            type: string\n          required: false\n        - name: granularity\n          in: query\n          description: |-\n            Specifies the granularity of the query period, either P31D (31 day) or\n            PT1H (1 hour). Default is P31D.\n          schema:\n            type: string\n            enum:\n              - P31D\n              - PT1H\n          required: false\n      responses:\n        \"200\":\n          description: The measurements were successfully returned.\n          content:\n            application/json:\n              schema:\n                properties:\n                  start:\n                    type: string\n                    description: |-\n                      The RFC 3339 date and time of the start of the query period, which can\n                      be specified with the `start` query parameter.\n                  end:\n                    type: string\n                    description: |-\n                      The RFC 3339 date and time of the end of the query period, which can be\n                      specified with the `end` query parameter.\n                  granularity:\n                    type: string\n                    description: |-\n                      The granularity, which can be specified with the `granularity` query\n                      parameter.\n                  group_id:\n                    type: string\n                    description: |-\n                      The Atlas [Group\n                      ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).\n                  appId:\n                    type: string\n                    description: The Realm app ID specified by the `appId` path parameter.\n                  appName:\n                    type: string\n                    description:\n                      The name of the Realm app specified by the `appId`\n                      path parameter.\n                  measurements:\n                    type: array\n                    description: The array of measurements.\n                    items:\n                      properties:\n                        name:\n                          type: string\n                          enum:\n                            - request_count\n                            - compute_time\n                            - data_out\n                            - sync_time\n                            - mem_usage\n                          description: |-\n                            The usage metric represented by each data point. See\n                            [billing](https://www.mongodb.com/docs/realm/billing).\n                        units:\n                          type: string\n                          enum:\n                            - \"\u003cempty string\u003e\"\n                            - HOURS\n                            - GIGABYTES\n                            - GIGABYTE_SECONDS\n                          description: The unit of the `value` of each data point.\n                        data_points:\n                          type: array\n                          description: |-\n                            The array of data points for this measurement. A finer `granularity`\n                            results in more data points.\n                          items:\n                            properties:\n                              timestamp:\n                                type: string\n                                description:\n                                  The ISO 8601 date and time of the data\n                                  point.\n                              value:\n                                type: number\n                                description:\n                                  The value at the time in the `unit` of\n                                  the measurement.\n        \"400\":\n          \"$ref\": \"#/components/responses/ClientErrorResponse\"\n  \"/groups/{groupId}/apps/{appId}/schemas\":\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n    get:\n      tags:\n        - schemas\n      operationId: adminListSchemas\n      summary: List schemas\n      description: List all defined [schemas](https://www.mongodb.com/docs/realm/schemas).\n      responses:\n        \"200\":\n          description: \"Ok\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    _id:\n                      type: string\n                    schema:\n                      type: object\n                    metadata:\n                      \"$ref\": \"#/components/schemas/SchemaMetadata\"\n    post:\n      tags:\n        - schemas\n      operationId: adminCreateSchema\n      summary: Create a schema\n      description: Define a new [schema](https://www.mongodb.com/docs/realm/schemas) for a linked collection.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - schema\n                - metadata\n              properties:\n                _id:\n                  type: string\n                schema:\n                  type: object\n                  description: A valid [schema](https://www.mongodb.com/docs/realm/schemas) for the collection.\n                metadata:\n                  \"$ref\": \"#/components/schemas/SchemaMetadata\"\n      responses:\n        \"200\":\n          description: \"Ok\"\n          content:\n            application/json:\n              schema:\n                properties:\n                  _id:\n                    type: string\n                  metadata:\n                    \"$ref\": \"#/components/schemas/SchemaMetadata\"\n  \"/groups/{groupId}/apps/{appId}/schemas/{schemaId}\":\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/SchemaId\"\n    get:\n      tags:\n        - schemas\n      operationId: adminGetSchema\n      summary: Get a schema\n      description: Get a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                properties:\n                  _id:\n                    type: string\n                  schema:\n                    type: object\n    put:\n      tags:\n        - schemas\n      operationId: adminUpdateSchema\n      summary: Update a schema\n      description: Replace an existing [schema](https://www.mongodb.com/docs/realm/schemas) with a new one.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - schema\n              properties:\n                _id:\n                  type: string\n                schema:\n                  type: object\n                  description: A valid [schema](https://www.mongodb.com/docs/realm/schemas) for the collection.\n                relationships:\n                  type: object\n                  description: Relationships to foreign collections. Each field name is a property in the schema. The corresponding value is a [relationship](https://www.mongodb.com/docs/realm/schemas/relationships/) definition for that field.\n                  additionalProperties:\n                    \"$ref\": \"#/components/schemas/Relationship\"\n                metadata:\n                  \"$ref\": \"#/components/schemas/SchemaMetadata\"\n      responses:\n        \"204\":\n          description: No Content\n    delete:\n      tags:\n        - schemas\n      operationId: adminDeleteSchema\n      summary: Delete a schema\n      description: Delete a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.\n      responses:\n        \"204\":\n          description: No Content\n\n  \"/groups/{groupId}/apps/{appId}/endpoints\":\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n\n    get:\n      tags:\n        - endpoints\n      operationId: adminGetAllEndpoints\n      summary: Get all endpoints\n      description: Get all [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configurations.\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/Endpoint\"\n\n    post:\n      tags:\n        - endpoints\n      operationId: adminCreateEndpoint\n      summary: Create an endpoint\n      description: Create a new [endpoint](https://www.mongodb.com/docs/realm/endpoints/).\n      requestBody:\n        description: A valid [configuration object](https://www.mongodb.com/docs/realm/manage-apps/configure/config/http_endpoints/) for the new endpoint.\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/Endpoint\"\n      responses:\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Endpoint\"\n\n  \"/groups/{groupId}/apps/{appId}/endpoints/{endpointId}\":\n    parameters:\n      - \"$ref\": \"#/components/parameters/GroupId\"\n      - \"$ref\": \"#/components/parameters/AppId\"\n      - \"$ref\": \"#/components/parameters/EndpointId\"\n\n    get:\n      tags:\n        - endpoints\n      operationId: adminGetEndpoint\n      summary: Get an endpoint\n      description: Get a specific [endpoint](https://www.mongodb.com/docs/realm/endpoints/)'s configuration.\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Endpoint\"\n\n    put:\n      tags:\n        - endpoints\n      operationId: adminModifyEndpoint\n      summary: Modify an endpoint\n      description: Modify an existing [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configuration.\n      requestBody:\n        description: A valid, updated [configuration object](https://www.mongodb.com/docs/realm/manage-apps/configure/config/http_endpoints/) for the endpoint.\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/Endpoint\"\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Endpoint\"\n\n    delete:\n      tags:\n        - endpoints\n      operationId: adminDeleteEndpoint\n      summary: Delete an endpoint\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                properties: {}\n\ncomponents:\n  parameters:\n    AssetResourcePath:\n      name: path\n      in: query\n      description: The resource path of a hosted asset.\n      required: true\n      schema:\n        type: string\n    AssetResourcePathPrefix:\n      name: prefix\n      in: query\n      description: |-\n        Return only those assets where the resource path begins with the\n        specified prefix.\n      required: false\n      schema:\n        type: string\n    GroupId:\n      name: groupId\n      description: |-\n        An Atlas [Project/Group\n        ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).\n      in: path\n      required: true\n      schema:\n        type: string\n    AppId:\n      name: appId\n      description: |-\n        The ObjectID of your application.\n        [The Realm API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this\n        value.\n      in: path\n      required: true\n      schema:\n        type: string\n    ForwarderId:\n      name: \"forwarderId\"\n      description: The _id ObjectID of a log forwarder.\n      in: \"path\"\n      required: true\n      schema:\n        type: string\n    UsersAfter:\n      name: after\n      required: false\n      description: The `id` of the last user returned by a previous paginated request.\n      in: query\n      schema:\n        type: string\n    UsersSort:\n      name: sort\n      required: false\n      description: |-\n        The field name to sort to sort results by. The only valid value is the\n        default: `_id`.\n      in: query\n      schema:\n        type: string\n    UsersDesc:\n      name: desc\n      required: false\n      description: |-\n        If `true`, returns sorted results in descending order. If not specified\n        or set to `false`, results return in ascending order.\n      in: query\n      schema:\n        type: boolean\n    FunctionId:\n      name: functionId\n      description: Function ID\n      in: path\n      required: true\n      schema:\n        type: string\n    ServiceId:\n      name: serviceId\n      description: Service ID\n      in: path\n      required: true\n      schema:\n        type: string\n    SecretId:\n      name: secretId\n      description: Secret ID\n      in: path\n      required: true\n      schema:\n        type: string\n    CommandName:\n      name: commandName\n      description: Command name\n      in: path\n      required: true\n      schema:\n        type: string\n    ValueId:\n      name: valueId\n      description: Value ID\n      in: path\n      required: true\n      schema:\n        type: string\n    DraftId:\n      name: draftId\n      description: Draft ID\n      in: path\n      required: true\n      schema:\n        type: string\n    RuleId:\n      name: ruleId\n      description: Rule ID\n      in: path\n      required: true\n      schema:\n        type: string\n    IncomingWebhookId:\n      name: incomingWebhookId\n      description: Incoming webhook ID\n      in: path\n      required: true\n      schema:\n        type: string\n    Email:\n      name: email\n      description: Email address\n      in: path\n      required: true\n      schema:\n        type: string\n    MessageId:\n      name: messageId\n      description: Message ID\n      in: path\n      required: true\n      schema:\n        type: string\n    Uid:\n      name: uid\n      description: UID\n      in: path\n      required: true\n      schema:\n        type: string\n    ProviderId:\n      name: providerId\n      description: Provider ID\n      in: path\n      required: true\n      schema:\n        type: string\n    ApiKeyId:\n      name: apiKeyId\n      description: API Key ID\n      in: path\n      required: true\n      schema:\n        type: string\n    TriggerId:\n      name: triggerId\n      description: The trigger's `_id` ObjectID value.\n      in: path\n      required: true\n      schema:\n        type: string\n    SchemaId:\n      name: schemaId\n      description: The schema's `_id` ObjectID value.\n      in: path\n      required: true\n      schema:\n        type: string\n    EndpointId:\n      name: endpointId\n      description: The endpoint's `_id` ObjectID value.\n      in: path\n      required: true\n      schema:\n        type: string\n  schemas:\n    ApiKey:\n      properties:\n        _id:\n          type: string\n        key:\n          type: string\n        name:\n          type: string\n        disabled:\n          type: string\n    ApiKeyResponse:\n      properties:\n        _id:\n          type: string\n        name:\n          type: string\n        disabled:\n          type: string\n    Application:\n      type: object\n      properties:\n        _id:\n          type: string\n          description: The application's unique internal ID.\n        client_app_id:\n          type: string\n          description: The application's public App ID.\n        name:\n          type: string\n          description: The name of the application.\n        location:\n          type: string\n          description: The application's deployment region.\n        deployment_model:\n          type: string\n          description: The application's deployment model.\n        domain_id:\n          type: string\n        group_id:\n          type: string\n          description: |-\n            An Atlas [Project/Group\n            ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).\n    ApplicationSummary:\n      type: object\n      properties:\n        _id:\n          type: string\n          description: The application's unique internal ID.\n        client_app_id:\n          type: string\n          description: The application's public App ID.\n        name:\n          type: string\n          description: The name of the application.\n        location:\n          type: string\n          description: The application's deployment region.\n        deployment_model:\n          type: string\n          description: The application's deployment model.\n        domain_id:\n          type: string\n          description: The application's associated domain ID.\n        group_id:\n          type: string\n          description: The application's current owner ID.\n        last_used:\n          type: integer\n          description: The time this app was last used.\n        last_modified:\n          type: integer\n          description: The time this app was last modified.\n        product:\n          type: string\n          description: The product this app is for.\n        environment:\n          type: string\n          description: The environment the app is in.\n    BuildInfo:\n      type: object\n      properties:\n        version:\n          type: string\n          description: |-\n            Human-readable version information about the mongod instance. This\n            string will take the format `\u003cmajor\u003e.\u003cminor\u003e.\u003cpatch\u003e`.\n        gitVersion:\n          type: string\n          description: |-\n            The commit identifier that identifies the state of the code use to build\n            the mongod.\n        versionArray:\n          type: array\n          description: |-\n            An array that conveys version information about the mongod instance. See\n            version for a more readable version of this string.\n          items:\n            type: integer\n        javascriptEngine:\n          type: string\n          description: |-\n            A string that reports the JavaScript engine used in the mongod instance.\n            By default, this is `mozjs` after version `3.2`, and previously `V8`.\n        bits:\n          type: string\n          description: |-\n            A number that reflects the target processor architecture of the mongod\n            binary.\n        debug:\n          type: boolean\n          description: |-\n            A boolean that reflects whether or not the `mongod` instance was built\n            with debugging options.\n        maxBsonObjectSize:\n          type: integer\n          description: |-\n            A number that reports the [Maximum BSON Document\n            Size](https://www.mongodb.com/docs/manual/reference/limits/#BSON-Document-Size)\n    DependenciesSummary:\n      type: object\n      properties:\n        _id:\n          type: string\n          description: The dependency collection's unique internal ID.\n        location:\n          type: string\n          description: The application's deployment region.\n        user_id:\n          type: string\n          description: |-\n            The unique `_id` value of the MongoDB Cloud user that uploaded the\n            dependency collection.\n        last_modified:\n          type: integer\n          description: |-\n            The time at which the dependencies were uploaded in [Unix\n            time](https://en.wikipedia.org/wiki/Unix_time) (number of seconds since\n            January 1, 1970 at 00:00 UTC).\n        dependencies_list:\n          type: array\n          description: |-\n            An array of documents that each describe a dependency uploaded to the\n            application.\n          items:\n            \"$ref\": \"#/components/schemas/Dependency\"\n    Dependency:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the uploaded dependency.\n        version:\n          type: string\n          description: The version of the uploaded dependency.\n    DeploymentDraft:\n      type: object\n      properties:\n        _id:\n          type: string\n          description: The unique ID of the draft.\n        user_id:\n          type: string\n          description:\n            The unique `_id` value of the MongoDB Cloud user that created\n            the draft.\n        app:\n          \"$ref\": \"#/components/schemas/Application\"\n    Deployment:\n      type: object\n      properties:\n        _id:\n          type: string\n          description: The unique ID of the deployment.\n        app_id:\n          type: string\n          description: The unique `_id` value of the Realm app.\n        draft_id:\n          type: string\n          description: |-\n            The unique `_id` value of the deployment draft associated with the\n            deployment, if applicable.\n        user_id:\n          type: string\n          description:\n            The unique `_id` value of the MongoDB Cloud user that deployed\n            the draft.\n        deployed_at:\n          type: integer\n          description: |-\n            The time at which the deployment was made. Represented as the number of\n            seconds since January 1, 1970.\n        origin:\n          type: string\n          description: The deployment method used to create the deployment.\n        commit:\n          type: string\n          description: The commit hash of the deployment (Automatic GitHub Deployment)\n        status:\n          type: string\n          description:\n            A message that indicates whether or not the deployment was\n            successful.\n        status_error_message:\n          type: string\n          description: |-\n            The error message of the error that caused the deployment to fail, if\n            applicable.\n        diff_url:\n          type: string\n          description: |-\n            A link to the diff of changes in the deployment (Automatic GitHub\n            Deployment)\n    Diff:\n      type: object\n      properties:\n        diffs:\n          type: array\n          description: |-\n            A list where each item is the line-by-line diff for a specific\n            configuration file.\n          items:\n            type: string\n        hosting_files_diff:\n          type: object\n          description: |-\n            The filenames of hosted files that have been added, removed, or\n            modified.\n          properties:\n            added:\n              type: array\n              items:\n                type: string\n                description: |-\n                  A list where each element is the name of a file that was added in the\n                  draft.\n            deleted:\n              type: array\n              items:\n                type: string\n                description: |-\n                  A list where each element is the name of a file that was deleted in the\n                  draft.\n            modified:\n              type: array\n              items:\n                type: string\n                description: |-\n                  A list where each element is the name of a file that was changed in the\n                  draft.\n    Endpoint:\n      type: object\n      properties:\n        route:\n          type: string\n        http_method:\n          type: string\n          enum:\n            - \"GET\"\n            - \"POST\"\n            - \"PUT\"\n            - \"PATCH\"\n            - \"DELETE\"\n            - \"*\"\n        function_name:\n          type: string\n        validation_method:\n          type: string\n          enum:\n            - \"NO_VALIDATION\"\n            - \"SECRET_AS_QUERY_PARAM\"\n            - \"VERIFY_PAYLOAD\"\n        respond_result:\n          type: boolean\n        fetch_custom_user_data:\n          type: boolean\n        create_user_on_auth:\n          type: boolean\n        disabled:\n          type: boolean\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n          description: A message that describes the error.\n        error_code:\n          type: string\n          description: The error type.\n    NewApplication:\n      properties:\n        name:\n          type: string\n          description: Can only contain ASCII letters, numbers, underscores, and hyphens.\n        template_id:\n          type: string\n          description: |-\n            Name of [supported template\n            app](https://www.mongodb.com/docs/realm/manage-apps/create/template-apps#std-label-template-apps) to\n            serve as base template.\n        data_source:\n          \"$ref\": \"#/components/schemas/DataSource\"\n      required:\n        - name\n    DataSource:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Should be \"mongodb-atlas\".\n          example: mongodb-atlas\n          enum:\n            - mongodb-atlas\n        type:\n          type: string\n          description: Should be \"mongodb-atlas\".\n          example: mongodb-atlas\n          enum:\n            - mongodb-atlas\n        config:\n          type: object\n          properties:\n            clusterName:\n              type: string\n              description: Name of Atlas cluster associated with the Realm app.\n          required:\n            - clusterName\n      required:\n        - name\n        - type\n        - config\n    Service:\n      properties:\n        _id:\n          type: string\n        name:\n          type: string\n        type:\n          type: string\n        version:\n          type: integer\n    CreateLogForwarderRequest:\n      $ref: \"#/components/schemas/LogForwarder\"\n    UpdateLogForwarderRequest:\n      $ref: \"#/components/schemas/LogForwarder\"\n    LogForwarder:\n      type: object\n      properties:\n        _id: { type: string }\n        name: { type: string }\n        disabled: { type: boolean }\n        log_types:\n          type: array\n          items:\n            $ref: \"#/components/schemas/LogType\"\n        log_statuses:\n          type: array\n          items:\n            $ref: \"#/components/schemas/LogStatus\"\n        policy:\n          $ref: \"#/components/schemas/LogForwardingPolicy\"\n        action:\n          $ref: \"#/components/schemas/LogForwardingAction\"\n    LogType:\n      type: string\n      enum:\n        - auth\n        - function\n        - graphql\n        - push\n        - schema\n        - service\n        - sync\n        - trigger\n    LogStatus:\n      type: string\n      enum:\n        - error\n        - success\n    LogForwardingPolicy:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - single\n            - batch\n    LogForwardingAction: # We need oneOf to do this correctly.\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - collection\n            - function\n        name:\n          type: string\n        data_source:\n          type: string\n        database:\n          type: string\n        collection:\n          type: string\n    NewService:\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n        config:\n          type: object\n      required:\n        - name\n        - type\n    Rule:\n      properties:\n        name:\n          type: string\n        actions:\n          items:\n            type: string\n        when:\n          type: object\n      required:\n        - name\n        - when\n    IncomingWebhook:\n      properties:\n        name:\n          type: string\n        function_source:\n          type: string\n        respond_result:\n          type: boolean\n        options:\n          type: object\n          properties:\n            secret:\n              type: string\n            secretAsQueryParam:\n              type: boolean\n      required:\n        - name\n        - function_source\n        - respond_result\n    UserProvider:\n      type: object\n      properties:\n        id:\n          type: string\n        provider_type:\n          \"$ref\": \"#/components/schemas/ProviderType\"\n        provider_id:\n          type: string\n    ProviderSummary:\n      properties:\n        _id:\n          type: string\n        name:\n          type: string\n        type:\n          \"$ref\": \"#/components/schemas/ProviderType\"\n        disabled:\n          type: boolean\n    FullProvider:\n      properties:\n        _id:\n          type: string\n        name:\n          type: string\n        type:\n          \"$ref\": \"#/components/schemas/ProviderType\"\n        disabled:\n          type: boolean\n        config:\n          type: object\n    NewProvider:\n      properties:\n        name:\n          type: string\n        type:\n          \"$ref\": \"#/components/schemas/ProviderType\"\n        disabled:\n          type: boolean\n        config:\n          type: object\n      required:\n        - name\n        - type\n        - disabled\n    RealmProfile:\n      properties:\n        user_id:\n          type: string\n        domain_id:\n          type: string\n        identities:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/ProviderSummary\"\n        data:\n          type: object\n          properties:\n            email:\n              type: string\n            name:\n              type: string\n        type:\n          \"$ref\": \"#/components/schemas/ProfileType\"\n        roles:\n          type: array\n          items:\n            type: object\n            properties:\n              role_name:\n                type: string\n              group_id:\n                type: string\n    NewFunction:\n      properties:\n        can_evaluate:\n          type: object\n          description: |-\n            A JSON expression that evaluates to `true` if the Function is allowed to\n            run in response to an incoming request.\n        name:\n          type: string\n          description: A unique name for the Function.\n        private:\n          type: boolean\n          description: |-\n            If `true`, the function is hidden from client applications. You can\n            still call a private function from JSON expressions and other functions,\n            including incoming webhooks and triggers.\n        source:\n          type: string\n          description: |-\n            The stringified source code for the function. The code must be valid\n            ES6.\n        run_as_system:\n          type: boolean\n          description: |-\n            If `true`, the function executes with full privileges, bypassing rules\n            on all services.\n      required:\n        - name\n        - private\n        - source\n        - run_as_system\n    Function:\n      properties:\n        _id:\n          type: string\n        can_evaluate:\n          type: object\n          description: |-\n            A JSON expression that evaluates to `true` if the Function is allowed to\n            run in response to an incoming request.\n        name:\n          type: string\n          description: A unique name for the Function.\n        private:\n          type: boolean\n          description: |-\n            If `true`, the function is hidden from client applications. You can\n            still call a private function from JSON expressions and other functions,\n            including incoming webhooks and triggers.\n        source:\n          type: string\n          description: |-\n            The stringified source code for the function. The code must be valid\n            ES6.\n    ValueSummary:\n      properties:\n        _id:\n          type: string\n        name:\n          type: string\n        private:\n          type: boolean\n    NewValue:\n      properties:\n        name:\n          type: string\n        private:\n          type: boolean\n        value: {}\n      required:\n        - name\n        - private\n        - value\n    Value:\n      properties:\n        _id:\n          type: string\n        name:\n          type: string\n        private:\n          type: boolean\n        value: {}\n    ProviderType:\n      type: string\n      enum:\n        - anon-user\n        - local-userpass\n        - api-key\n        - oauth2-apple\n        - oauth2-google\n        - oauth2-facebook\n        - custom-token\n        - custom-function\n    ProfileType:\n      type: string\n      enum:\n        - normal\n        - server\n        - system\n        - unknown\n    MessageState:\n      type: string\n      enum:\n        - sent\n        - draft\n    NewMessage:\n      properties:\n        label:\n          type: string\n        message:\n          type: string\n        topic:\n          type: string\n        state:\n          \"$ref\": \"#/components/schemas/MessageState\"\n      required:\n        - label\n        - message\n        - state\n        - topic\n    Message:\n      properties:\n        allowed_ips:\n          type: string\n        appID:\n          type: string\n        label:\n          type: string\n        message:\n          type: string\n        topic:\n          type: string\n        created:\n          type: string\n        sent:\n          type: string\n        state:\n          \"$ref\": \"#/components/schemas/MessageState\"\n    User:\n      properties:\n        _id:\n          type: string\n        identities:\n          items:\n            \"$ref\": \"#/components/schemas/UserProvider\"\n        type:\n          type: string\n        creation_date:\n          type: integer\n        last_authentication_date:\n          type: integer\n        disabled:\n          type: boolean\n        data:\n          type: object\n    Partition:\n      properties:\n        key:\n          type: string\n        type:\n          type: string\n    SyncDataResponse:\n      properties:\n        service_id:\n          type: string\n          description:\n            The Service ID for the currently synced cluster, if there is\n            one.\n        partition_fields:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/Partition\"\n          description: |-\n            A list of valid partition keys based on the cluster's collection\n            schemas.\n    TriggerResponse:\n      properties:\n        _id:\n          type: string\n          description: The unique ID of the trigger.\n        name:\n          type: string\n          description: The name of the trigger.\n        type:\n          type: string\n          description: The type of the trigger.\n        function_id:\n          type: string\n          description: The ID of the function associated with the trigger.\n        function_name:\n          type: string\n          description: The name of the function associated with the trigger.\n        disabled:\n          type: boolean\n          description: If true, the trigger is disabled and will not fire.\n    TriggerRequest:\n      required:\n        - name\n        - type\n        - function_id\n      properties:\n        name:\n          type: string\n          description: The name of the trigger.\n        type:\n          type: string\n          description: The type of the trigger.\n          enum:\n            - DATABASE\n            - AUTHENTICATION\n            - SCHEDULE\n        function_id:\n          type: string\n          description: The ID of the function associated with the trigger.\n        disabled:\n          type: boolean\n          description: \"Default: `false` If true, the trigger is disabled.\"\n        config:\n          type: object\n          description: An object that defines configuration values for the trigger.\n          required:\n            - database\n            - collection\n            - operation_types\n            - operation_type\n            - service_id\n            - providers\n          properties:\n            operation_types:\n              type: array\n              items:\n                type: string\n                enum:\n                  - INSERT\n                  - UPDATE\n                  - REPLACE\n                  - DELETE\n              description: |-\n                **Required for Database Triggers** -- The [database event operation\n                types](https://www.mongodb.com/docs/realm/triggers/database-triggers#std-label-database-events) to\n                listen for. This must contain at least one value.\n            operation_type:\n              type: string\n              description: |-\n                **Required for Authentication Triggers** -- The [authentication\n                operation\n                type](https://www.mongodb.com/docs/realm/triggers/authentication-triggers#std-label-authentication-event-operation-types)\n                to listen for.\n              enum:\n                - LOGIN\n                - CREATE\n                - DELETE\n            providers:\n              type: string\n              description: |-\n                **Only Available for Authentication Triggers** -- A list of one or more\n                [authentication\n                provider](https://www.mongodb.com/docs/realm/authentication/providers) id\n                values. The trigger will only listen for authentication events produced\n                by these providers.\n            database:\n              type: string\n              description: |-\n                **Required for Database Triggers** -- The name of the MongoDB database\n                that contains the watched collection.\n            collection:\n              type: string\n              description: |-\n                **Required for Database Triggers** -- The name of the MongoDB collection\n                that the trigger watches for change events. The collection must be part\n                of the specified database.\n            service_id:\n              type: string\n              description: |-\n                **Required for Database Triggers** -- The ID of the MongoDB Service\n                associated with the trigger.\n            match:\n              type: object\n              description: |-\n                **Only Available for Database Triggers** -- A\n                [$match](https://www.mongodb.com/docs/manual/reference/operator/aggregation/match)\n                expression document that MongoDB Realm includes in the underlying change\n                stream pipeline for the trigger. This is useful when you want to filter\n                change events beyond their operation type. The trigger will only fire if\n                the expression evaluates to true for a given change event.\n            full_document:\n              type: boolean\n              description: |-\n                **Only Available for Database Triggers** -- If true, indicates that\n                `UPDATE` change events should include the most current\n                [majority-committed](https://www.mongodb.com/docs/manual/reference/read-concern-majority/)\n                version of the modified document in the `fullDocument` field.\n            full_document_before_change:\n              type: boolean\n              description: |-\n                **Only Available for Database Triggers** -- If true, indicates that the\n                `UPDATE` change event response should include a copy of the modified\n                document from before the update was applied.\n                [Preimages](https://www.mongodb.com/docs/realm/mongodb/preimages/)\n                must be enabled.\n            schedule:\n              type: string\n              description: |-\n                **Only Available for Scheduled Triggers** -- A [cron\n                expression](https://www.mongodb.com/docs/realm/triggers/cron-expressions)\n                that defines the trigger schedule.\n        event_processors:\n          type: object\n          description: |-\n            An object where each field name is an event processor ID and each value\n            is an object that configures its corresponding event processor. The\n            following event processors are supported: `AWS_EVENTBRIDGE` For an\n            example configuration object, see [Send Trigger Events to AWS\n            EventBridge](https://www.mongodb.com/docs/realm/triggers/examples/send-events-aws-eventbridge#std-label-event_processor_example).\n    MetadataAttribute:\n      type: object\n      properties:\n        name:\n          type: string\n          description: |-\n            The [metadata\n            attribute](https://www.mongodb.com/docs/realm/hosting/file-metadata-attributes)\n            name.\n        value:\n          type: string\n          description: |-\n            The [metadata\n            attribute](https://www.mongodb.com/docs/realm/hosting/file-metadata-attributes)\n            value.\n    AssetMetadata:\n      properties:\n        path:\n          type: string\n          description: The resource path of the asset\n        size:\n          type: integer\n          description: The size of the asset in bytes\n        attrs:\n          type: array\n          description: |-\n            An array of documents that each describe a [metadata\n            attribute](https://www.mongodb.com/docs/realm/hosting/file-metadata-attributes)\n            that applies to the asset.\n          items:\n            \"$ref\": \"#/components/schemas/MetadataAttribute\"\n        hash:\n          type: string\n          description: The MD5 checksum hash for the asset\n    HostedAssetMetadata:\n      properties:\n        appId:\n          type: string\n          description: The unique App ID of the Realm app that is hosting the file.\n        last_modified:\n          type: integer\n          description: |-\n            The time at which the hosted asset was last modified in [Unix\n            time](https://en.wikipedia.org/wiki/Unix_time) (number of seconds since\n            January 1, 1970 at 00:00 UTC).\n        url:\n          type: string\n          description: The full URL of the hosted asset.\n        path:\n          type: string\n          description: The resource path of the hosted asset\n        size:\n          type: integer\n          description: The size of the hosted asset in bytes\n        attrs:\n          type: array\n          description: |-\n            An array of documents that each describe a [metadata\n            attribute](https://www.mongodb.com/docs/realm/hosting/file-metadata-attributes)\n            that applies to the asset.\n          items:\n            \"$ref\": \"#/components/schemas/MetadataAttribute\"\n        hash:\n          type: string\n          description: The MD5 checksum hash for the hosted asset\n    Relationship:\n      type: object\n      description: A [relationship](https://www.mongodb.com/docs/realm/schemas/relationships/) definition.\n      properties:\n        ref:\n          type: string\n          description: A reference string for the foreign collection.\n        foreign_key:\n          type: string\n          description: The name of the field in the foreign collection that the relationship points to.\n        is_list:\n          type: boolean\n          description: |-\n            If `true`:\n\n            - the relationship may point to many foreign documents.\n            - the local field must be defined as an array in the collection schema.\n    SchemaMetadata:\n      type: object\n      description: Metadata the describes which linked collection the schema applies to.\n      properties:\n        data_source:\n          type: string\n          description: The data source name.\n        database:\n          type: string\n          description: The database name.\n        collection:\n          type: string\n          description: The collection name.\n  securitySchemes:\n    tokenAuth:\n      type: http\n      scheme: bearer\n      description: |-\n        The authorization token provided in the `access_token` field of the\n        [POST /auth/providers/{provider}/login](#section/adminLogin)\n        and  [POST /auth/session](#section/adminDeleteSession) API endpoints.\n    refreshAuth:\n      type: http\n      scheme: bearer\n      description: |-\n        The authorization token provided in the `refresh_token` field of the\n        [POST /auth/providers/{provider}/login](#section/adminLogin)\n        API endpoint.\n  responses:\n    ClientErrorResponse:\n      description: There is an error in the request.\n      content:\n        application/json:\n          schema:\n            properties:\n              error:\n                type: string\n                description: A message describing the error.\ntags:\n  - name: admin\n    x-displayName: Administrator\n    description: Log in and adminstrate Realm apps.\n  - name: apikeys\n    x-displayName: API Keys\n    description: View and manage API keys through the [API Key provider](https://www.mongodb.com/docs/realm/authentication/api-key/).\n  - name: apps\n    x-displayName: Applications\n    description: View and manage applications in an Atlas project.\n  - name: authproviders\n    x-displayName: Authentication Providers\n    description: View and manage [authentication providers](https://www.mongodb.com/docs/realm/authentication/providers/).\n  - name: billing\n    x-displayName: Billing\n    description: View billed usage of your applications.\n  - name: deploy\n    x-displayName: Deployment\n    description: |\n      ## Draft and Deploy a Group of Changes\n\n      You can [deploy](https://www.mongodb.com/docs/realm/manage-apps/deploy#std-label-application-deployment) a\n      group of application changes together by creating and deploying a draft.\n      To create and deploy a set of draft changes:\n\n      ### 1. Create a New Draft\n\n      A draft represents a group of application changes that you can deploy or\n      discard as a single unit. To create a draft, send a `POST` request to\n      the drafts endpoint:\n\n      ```shell\n      curl --request POST \\\n        --header 'Content-Type: application/json' \\\n        --header 'Authorization: Bearer \u003caccess_token\u003e' \\\n        'https://realm.mongodb.com/api/admin/v3.0/groups/{groupId}/apps/{appId}/drafts'\n      ```\n\n\n      #### One Draft Per User\n\n      Each user can only create a single draft at a time, either through the\n      UI or the Admin API. If you already have an existing draft, you can\n      discard the changes associated with it by sending a `DELETE` request to\n      the draft's endpoint:\n\n      ```shell\n      curl --request DELETE \\\n        --header 'Authorization: Bearer \u003caccess_token\u003e' \\\n        'https://realm.mongodb.com/api/admin/v3.0/groups/{groupId}/apps/{appId}/drafts/{draftId}'\n      ```\n\n      ### 2. Make Changes to Your Application\n\n      Once you've created a draft, make all of the changes that you want to\n      include in the draft. Realm adds any application changes that you make\n      to the draft so that you can deploy them together.\n\n      ### 3. Deploy the Draft\n\n      After you've made all the changes that you want to include in the\n      deployment, deploy the draft by sending a `POST` request to that draft's\n      deployment endpoint:\n\n      ```shell\n      curl --request POST \\\n        --header 'Content-Type: application/json' \\\n        --header 'Authorization: Bearer \u003caccess_token\u003e' \\\n        'https://realm.mongodb.com/api/admin/v3.0/groups/{groupId}/apps/{appId}/drafts/{draftId}/deployment'\n      ```\n\n      #### Draft Conflicts\n\n      If you deploy changes through the API but have conflicting changes in a\n      draft in the UI, your UI draft will become invalid and you will not be\n      able to deploy it. You can download your UI draft by reviewing the draft\n      in the `Deployment` page. You can use the download to deploy your\n      changes in the `realm-cli` or as a reference as you reapply changes in\n      the UI.\n  - name: dependencies\n    x-displayName: Dependencies\n    description: Manage your application's [external dependencies](https://www.mongodb.com/docs/realm/functions/add-external-dependencies/).\n  - name: endpoints\n    x-displayName: Endpoints\n    description: View and manage your app's custom [HTTPS endpoints](https://www.mongodb.com/docs/realm/endpoints/).\n  - name: functions\n    x-displayName: Functions\n    description: View and manage your app's [functions](https://www.mongodb.com/docs/realm/functions/).\n  - name: hosting\n    x-displayName: Hosting\n    description: |\n      Manage your application's [hosted files](https://www.mongodb.com/docs/realm/hosting/).\n\n      ## Asset Metadata Document Example\n\n      Asset metadata documents describe hosted asset files.\n\n      ```json\n      {\n        \"path\": \"\u003cAsset Resource Path\u003e\",\n        \"hash\": \"\u003cAsset MD5 Checksum Hash\u003e\",\n        \"size\": \u003cFile size in bytes\u003e,\n        \"attrs\": [\n            {\n              \"name\": \"\u003cMetadata Attribute Name\u003e\",\n              \"value\": \"\u003cMetadata Attribute Value\u003e\",\n            }\n        ]\n      }\n      ```\n  - name: logs\n    x-displayName: Logs\n    description: |\n      Access your application's [logs](https://www.mongodb.com/docs/realm/logs/).\n\n      ## Pagination with the Logging API\n\n      The Logging endpoint returns up to 100 log entries per page. If the\n      query matches more than 100 entries, the result will be\n      [paginated](https://en.wikipedia.org/wiki/Pagination). Such a result\n      will contain two pieces of information that you will need to request the\n      next page of entries for the same query: the `nextEndDate` and\n      `nextSkip` fields.\n\n      Paginated results always contain the `nextEndDate` field. A paginated\n      result will also contain the `nextSkip` field if the timestamp of the\n      first entry on the next page is identical to the timestamp of the last\n      entry on the current page.\n\n      To request the first page of up to 100 log entries, use the endpoint as\n      usual:\n\n      ```sh\n      curl --request GET \\\n        --header 'Authorization: Bearer \u003caccess_token\u003e' \\\n        'https://realm.mongodb.com/api/admin/v3.0/groups/{groupId}/apps/{appId}/logs'\n      ```\n\n      To request the next page of up to 100 log entries, pass the values of\n      `nextEndDate` and `nextSkip` as the `end_date` and `skip` parameters,\n      respectively:\n\n      ```sh\n      curl --request GET \\\n        --header 'Authorization: Bearer \u003caccess_token\u003e' \\\n        'https://realm.mongodb.com/api/admin/v3.0/groups/{groupId}/apps/{appId}/logs?end_date={nextEndDate of previous response}\u0026skip={nextSkip of previous response}'\n      ```\n\n      Repeat this step to get more pages until the response does not have a\n      `nextEndDate` field. This signifies that you have reached the last page.\n\n      For more information, see [GET /groups/{groupId}/apps/{appId}/logs](#section/adminGetLogs).\n  - name: log_forwarders\n    x-displayName: Log Forwarding\n    description: View and manage your application's [log forwarders](https://www.mongodb.com/docs/realm/logs/forward-logs/).\n  - name: rules\n    x-displayName: Rules\n    description: View and manage your application's [data access rules](https://www.mongodb.com/docs/realm/rules/).\n  - name: schemas\n    x-displayName: Schemas\n    description: View and manage your application's [schemas](https://www.mongodb.com/docs/realm/schemas/).\n  - name: secrets\n    x-displayName: Secrets\n    description: View and manage your application's [secrets](https://www.mongodb.com/docs/realm/values-and-secrets/).\n  - name: security\n    x-displayName: Security\n    description: Configure your application's [security](https://www.mongodb.com/docs/realm/manage-apps/secure/).\n  - name: services\n    x-displayName: Services\n    description: View and manage your application's [services](https://www.mongodb.com/docs/realm/services/).\n  - name: sync\n    x-displayName: Sync\n    description: Get information about [sync](https://www.mongodb.com/docs/realm/sync/) for your application.\n  - name: triggers\n    x-displayName: Triggers\n    description: View and manage your application's [triggers](https://www.mongodb.com/docs/realm/triggers/).\n  - name: users\n    x-displayName: Users\n    description: View and manage your application's [users](https://www.mongodb.com/docs/realm/authentication/).\n  - name: email\n    x-displayName: User Confirmation\n    description: Confirm pending users with the built-in email confirmation flow.\n  - name: values\n    x-displayName: Values\n    description: View and manage your application's [values](https://www.mongodb.com/docs/realm/values-and-secrets/).\n  - name: notifications\n    x-displayName: \"[Deprecated] Push Notifications\"\n    description: View and manage your application's [push notifications](https://www.mongodb.com/docs/realm/push-notifications/).\n  - name: webhooks\n    x-displayName: \"[Deprecated] Webhooks\"\n    description: View and manage your application's [webhooks](https://www.mongodb.com/docs/realm/services/configure/service-webhooks/).\nsecurity:\n  - tokenAuth: []\n"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal bool into Go struct field Schema.paths.get.parameters.schema.required of type []string"
}