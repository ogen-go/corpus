{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "gitlab.com/upchieve/subway"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "server/swagger/swagger.yaml",
			"byteSize": 76994,
			"content": "openapi: 3.0.0\ninfo:\n  description: |\n    UPchieve backend API\n    [http://swagger.io](http://swagger.io) or on\n    [irc.freenode.net, #swagger](http://swagger.io/irc/).\n  version: \"1.0.0\"\n  title: UPchieve\n  contact:\n    email: tech@upchieve.org\n  license:\n    name: Non-Profit Open Software License 3.0\n    url: 'https://gitlab.com/upchieve/subway/-/blob/main/LICENSE'\nservers:\n  # Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/upchieveorg/subway/1.0.0\n  - url: 'https://app.upchieve.org/v1'\ntags:\n  - name: authorization\n    description: Authentication actions to validate user\n  - name: calendar\n    description: Things to do with calendar and scheduling\n  - name: contact\n    description: How to handle sending contact forms\n  - name: education\n    description: Edu admin actions\n  - name: eligibility\n    description: Handling eligibility of schools, students and volunteers\n  - name: feedback\n    description: Actions on gathering session feedback\n  - name: moderate message\n    description: In session message moderation\n  - name: notification\n    description: Handling push notifications\n  - name: reference\n    description: Submitting and getting references\n  - name: referral\n    description: Handling referral codes\n  - name: reports\n    description: Actions on gathering and setting session feedback\n  - name: session\n    description: Session management\n  - name: students\n    description: Actions taken on or for a student user\n  - name: survey\n    description: Gathering and submitting surveys\n  - name: training\n    description: Actions for executing training\n  - name: twilio\n    description: Endpoints only used by Twilio API\n  - name: utility\n    description: Infrastructure/Metadata\n  - name: user\n    description: Actions taken on users\n  - name: verification\n    description: Validates user actions\n  - name: volunteers\n    description: Actions taken on volunteers\n  - name: whiteboard\n    description: Actions for whiteboard section\npaths:\n  /healthz:\n    get:\n      tags:\n        - utility\n      summary: Healthcheck and Metadata\n      operationId: healthcheck\n      description: |\n        Confirms the service is up and provides data like the version\n      responses:\n        '200':\n          description: successful health check\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Healthcheck'\n                example:\n                  version: \"2.0.0\"\n  /students/{studentId}/favorites:\n    get:\n      tags:\n        - students\n      summary: Gets the list of a student's favorited volunteers\n      responses:\n        '200':\n          description: The list is returned in the body\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FavoritedVolunteerList'\n        '401':\n          description: User was unauthorized to make the request\n        '404':\n          description: Student id not found or invalid\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: studentId\n          in: path\n          description: ID of student to get favorite list of\n          required: true\n          schema:\n            type: string\n            format: uuid\n    post:\n      tags:\n        - students\n      summary: Adds a volunteer to a student's favorites list\n      responses:\n        '201':\n          description: The volunteer was added or removed from the student's liter\n        '400':\n          description: Request body was invalid or malformed\n        '401':\n          description: User was unauthorized to make the request\n        '404':\n          description: Student id not found or invalid\n      security:\n        - cookieAuth: []\n      requestBody:\n        $ref: '#/components/requestBodies/FavoritesAction'\n      parameters:\n        - name: studentId\n          in: path\n          description: ID of student to modify favorite list of\n          required: true\n          schema:\n            type: string\n            format: uuid\n  /auth/login:\n    post:\n      tags:\n        - authorization\n      summary: Validates user email and password for login\n      description: |\n        Authenticates the user and grants a session if credentials are correct for login\n      security:\n        - cookieAuth: []\n      requestBody:\n        $ref: '#/components/requestBodies/EmailPassword'\n      responses:\n        '200':\n          description: Authenticates the user with a session if credentials are correct and returns a user object\n        '401':\n          description: Unsuccessful authentication of user credentials\n  /auth/logout:\n    get:\n      tags:\n        - authorization\n      summary: User logout\n      description: |\n        Removes the user's current session.\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: User is logged out and session is ended\n          content:\n            application/json:\n              example:\n                msg: \"You have been logged out\"\n  /auth/register/checkcred:\n    post:\n      tags:\n        - authorization\n      summary: Validate user credentials for registration\n      description: |\n        Check whether the credential user entered is valid. (first step of registration) The server will check for email duplications and validate the password.\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        $ref: '#/components/requestBodies/EmailPassword'\n      responses:\n        '200':\n          description: Email is not already in use and password is validated\n        '409':\n          description: Email already exists\n        '422':\n          description: Email/password not provided or password is not valid\n  /auth/register/student/open:\n    post:\n      tags:\n        - authorization\n      summary: Register new open student account\n      description: |\n        Creates a new account for a student from given parameters in request body\n      security:\n        - cookieAuth: []\n      requestBody:\n        description: Object is created after a form is correctly completed\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  email:\n                    type: string\n                  password:\n                    type: string\n                  highSchoolId:\n                    type: string\n                  firstName:\n                    type: string\n                  lastName:\n                    type: string\n                  terms:\n                    type: boolean\n      responses:\n        '200':\n          description: Successful student registration and log in\n        '403':\n          description: |\n            A 403 is generated when the backend identifies the request IP\n            as coming from a non-US IP\n        '422':\n          description: |\n            - False value for term agreement\n            - Email or password are invalid\n            - If an account with this email already exists\n            - If your high school isn't approved\n            - If any of the parameters are missing\n        '500':\n          description: Server error\n  /auth/register/student/partner:\n    post:\n      tags:\n        - authorization\n      summary: Register new partner student account\n      description: |\n        Creates a new account for a student from given parameters in request body\n      security:\n        - cookieAuth: [ ]\n      requestBody:\n        description: Object is created after a form is correctly completed\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n                studentPartnerOrg:\n                  type: string\n                partnerUserId:\n                  type: string\n                highSchoolId:\n                  type: string\n                partnerSite:\n                  type: string\n                firstName:\n                  type: string\n                lastName:\n                  type: string\n                college:\n                  type: string\n                terms:\n                  type: boolean\n              required:\n                - email\n                - password\n                - firstName\n                - lastName\n                - terms\n      responses:\n        '200':\n          description: Successful student registration and log in\n        '422':\n          description: |\n            - False value for term agreement\n            - Email or password are invalid\n            - If an account with this email already exists\n            - If any partner information isn't valid\n            - If any of the parameters are missing\n        '500':\n          description: Server error\n  /auth/register/volunteer/open:\n    post:\n      tags:\n        - authorization\n      summary: Register new open volunteer account\n      description: |\n        Creates an open volunteer account\n      security:\n        - cookieAuth: []\n      requestBody:\n        description: Object is created after a form is correctly completed\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  email:\n                    type: string\n                  password:\n                    type: string\n                  firstName:\n                    type: string\n                  lastName:\n                    type: string\n                  phone:\n                    type: string\n                  terms:\n                    type: boolean\n      responses:\n        '200':\n          description: Successful volunteer registration and log in\n        '422':\n          description: |\n            Any of the following can generate status code 422:\n             - Missing value for term agreement\n             - Missing email or password\n             - Invalid password\n  /auth/register/volunteer/partner:\n    post:\n      tags:\n        - authorization\n      summary: Register new partner volunteer account\n      description: |\n        Creates an partner volunteer account\n      security:\n        - cookieAuth: []\n      requestBody:\n        description: Object is created after a form is correctly completed\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  email:\n                    type: string\n                  password:\n                    type: string\n                  firstName:\n                    type: string\n                  lastName:\n                    type: string\n                  phone:\n                    type: string\n                  terms:\n                    type: boolean\n                  volunteerPartnerOrg:\n                    type: string\n                  referredByCode:\n                    type: string\n      responses:\n        '200':\n          description: Successful volunteer registration and log in\n        '422':\n          description: |\n            Any of the following can generate status code 422:\n             - Missing value for term agreement\n             - Missing email or password\n             - Invalid password\n             - Invalid volunteer Partner\n             - Invalid partner domain\n  /auth/partner/volunteer:\n    get:\n      tags:\n        - authorization\n      summary: Get partner manifest for volunteer sign-up\n      description: |\n        Confirms partner id from link and return partner manifest\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: partnerId\n          in: query\n          description: Where `PARTNER_ID` is the key name of the volunteer partner organization defined in `config.ts` under `volunteerPartnerManifests`\n          schema:\n            type: string\n            example: \"example3\"\n      responses:\n        '200':\n          description: Returns a volunteer partner manifest object\n        '404':\n          description: No manifest found for volunteer partner id\n  /auth/partner/student:\n    get:\n      tags:\n        - authorization\n      summary: Get partner manifest for student sign-up\n      description: |\n        Confirms partner id from link and return partner manifest\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: partnerId\n          in: query\n          description: Where `PARTNER_ID` is the key name of the volunteer partner organization defined in `config.ts` under `volunteerPartnerManifests`\n          schema:\n            type: string\n            example: \"example3\"\n      responses:\n        '200':\n          description: Returns a student partner manifest object\n        '404':\n          description: No manifest found for student partner id\n  /auth/reset/send:\n    post:\n      tags:\n        - authorization\n      summary: Requests a password reset email\n      description: |\n        Sends an email to verify the current user with unique hash. The email provided\n        will overwrite the user record's email, in the event that the two do not match.\n      security:\n        - cookieAuth: []\n      requestBody:\n        description: Object is created after a form is correctly completed\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  email:\n                    $ref: '#/components/schemas/Email'\n      responses:\n        '200':\n          description: Request successful and password reset instructions sent\n        '422':\n          description: Missing email for password reset\n  /auth/reset/confirm:\n    post:\n      tags:\n        - authorization\n      summary: Password verification\n      description: |\n        Confirms new password during reset\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  email:\n                    $ref: '#/components/schemas/Email'\n                  password:\n                    $ref: \"#/components/schemas/Email\"\n                  newpassword:\n                    type: string\n                  token:\n                    type: string\n      responses:\n        '200':\n          description: Token is accepted and password is changed\n        '422':\n          description: |\n            The following will generate status code 422:\n            - No token given in request body\n            - Missing email or password\n            - Must reenter password\n            - Passwords do not match\n  /auth/reset/verify:\n    post:\n      tags:\n        - authorization\n      summary: Verify password reset token\n      description: |\n        Verify token for password reset\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n      responses:\n        '204':\n          description: Token is valid\n        '404':\n          description: URL no longer valid\n        '422':\n          description: URL doesn't match link provided in email\n  /auth/partner/student/code:\n    get:\n      tags:\n        - authorization\n      summary: Retrieves student partner code\n      description: |\n        Retrieves student partner code\n        Where `PARTNER_SIGNUP_CODE` is equal to a `signupCode` defined in `config.ts` under `studentPartnerManifests`\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: partnerSignupCode\n          required: true\n          in: query\n          schema:\n            type: string\n            example: 'EX1'\n      responses:\n        '200':\n          description: Returns object with studentPartnerKey\n  /auth/partner/student-partners:\n    get:\n      tags:\n        - authorization\n      summary: Retrieves a list of student partners\n      description: |\n        - For admin only\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Returns an array of all student partners\n  /auth/partner/volunteer-partners:\n    get:\n      tags:\n        - authorization\n      summary: Retrieves a list of volunteer partners\n      description: |\n        - For admin only\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Returns an array of all volunteer partners\n  /auth/partner/sponsor-orgs:\n    get:\n      tags:\n        - authorization\n      summary: Retrieves a list of sponsor orgs\n      description: |\n        - For admin only\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Returns an array of all sponsor orgs          \n  /auth/register:\n    post:\n      tags:\n        - authorization\n      summary: Creates new account\n      description: Create a new account based on given information\n      deprecated: true\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  email:\n                    type: string\n                  password:\n                    type: string\n                  code:\n                    type: string\n                  highSchool:\n                    type: string\n                  firstName:\n                    type: string\n                  lastName:\n                    type: string\n  /api/csrftoken:\n    get:\n      tags:\n        - authorization\n      summary: Generates csrf token\n      description: |\n        - Generates csrf token per cookie \n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Returns a json with `csrfToken`\n          content: \n            applicaton/json: \n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/CSRFToken'\n              example:\n                csrfToken: \"FbmhS8I9-A4qxdtGylFSAfwM71GQBXOnUCOM\"\n        '403':\n          description: \n            - Request is unauthorized for non-upchieve users\n            - CSRF token does not match\n\n  /api/calendar/save:\n    post:\n      tags:\n        - calendar\n      summary: Creates a schedule\n      description: |\n        Makes a schedule based on availability\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                availability:\n                  type: object\n                  properties:\n                    Friday:\n                      $ref: \"#/components/schemas/ScheduleDay\"\n                    Monday:\n                      $ref: \"#/components/schemas/ScheduleDay\"\n                    Saturday:\n                      $ref: \"#/components/schemas/ScheduleDay\"\n                    Sunday:\n                      $ref: \"#/components/schemas/ScheduleDay\"\n                    Tuesday:\n                      $ref: \"#/components/schemas/ScheduleDay\"\n                    Thursday:\n                      $ref: \"#/components/schemas/ScheduleDay\"\n                    Wednesday:\n                      $ref: \"#/components/schemas/ScheduleDay\"\n                tz:\n                  $ref: \"#/components/schemas/TZ\"\n      responses:\n        '200':\n          description: Schedule is saved\n  /api/calendar/clear:\n    post:\n      tags:\n        - calendar\n      summary: Available in backend tests only\n      description: |\n        Removed all preset schedule on calendar\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tz:\n                  $ref: \"#/components/schemas/TZ\"\n      responses:\n        '200':\n          description: Schedule is cleared\n        '422':\n          description: Invalid arguments\n  /api/feedback:\n    get:\n      tags:\n        - feedback\n      summary:\n        - Retrieve feedback information\n      description:\n        - Returns feedback from given session ID and user type in query params\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: sessionId\n          required: true\n          in: query\n          schema:\n            $ref: \"#/components/schemas/SessionId\"\n        - name: userType\n          required: true\n          in: query\n          schema:\n            $ref: \"#/components/schemas/UserType\"\n      responses:\n        '200':\n          description: Returns an object of feedback details\n    post:\n      tags:\n        - feedback\n      summary: Submits new feedback\n      description: |\n        Submits feedback survey data\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                sessionId:\n                  $ref: \"#/components/schemas/SessionId\"\n                topic:\n                  type: string\n                subTopic:\n                  type: string\n                responseData:\n                  type: object\n                studentTutoringFeedback:\n                  type: object\n                  properties:\n                    session-goal:\n                      type: integer\n                    subject-understanding:\n                      type: integer\n                    coach-rating:\n                      type: integer\n                    coach-feedback:\n                      type: integer\n                    other-feedback:\n                      type: string\n                studentCounselingFeedback:\n                  type: object\n                  properties:\n                    rate-session:\n                      type: object\n                      properties:\n                        rating:\n                          type: integer\n                    session-goal:\n                      type: string\n                    coach-ratings:\n                      type: object\n                      properties:\n                        coach-knowedgable:\n                          type: integer\n                        coach-friendly:\n                          type: integer\n                        coach-help-again:\n                          type: integer\n                    other-feedback:\n                      type: string\n                volunteerFeedback:\n                  type: object\n                  properties:\n                    session-enjoyable:\n                      type: integer\n                    session-improvements:\n                      type: integer\n                    student-understanding:\n                      type: integer\n                    session-obstacles:\n                      type: array\n                      items:\n                        type: integer\n                    other-feedback:\n                      type: string\n                studentId:\n                  $ref: \"#/components/schemas/StudentId\"\n                volunteerId:\n                  $ref: \"#/components/schemas/VolunteerId\"\n                userType:\n                  $ref: \"#/components/schemas/UserType\"\n      responses:\n        '200':\n          description: Returns feedback id to confirm data is accepted\n  /api/moderate/message:\n    post:\n      tags:\n        - moderate message\n      summary: Moderates messages\n      description: |\n        Check if message sent is appropriate language\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                content:\n                  type: string\n      responses:\n        '200':\n          description: Returns a boolean object that determines whether message is clean or not\n  /api/push-token/save:\n    post:\n      tags:\n        - notification\n      summary: Saves token\n      description: |\n        Saves push token for notifications\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n      responses:\n        '200':\n          description: Empty response with OK status code\n  /api/reports/session-report:\n    get:\n      tags:\n        - reports\n      summary: Retrieves session report\n      description: |\n        - Admin only\n        - Return all reports from session complete\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: joinedBefore\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: joinedAfter\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: sessionRangeFrom\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: sessionRangeTo\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: highSchoolId\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: studentPartnerOrg\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: studentPartnerOrg\n          required: true\n          in: query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns an object with an array of sessions\n  /api/reports/usage-report:\n    get:\n      tags:\n        - reports\n      summary: Retrieves usage report\n      description: |\n        - Admin only\n        - Retrieves usage report\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: joinedBefore\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: joinedAfter\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: sessionRangeFrom\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: sessionRangeTo\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: highSchoolId\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: studentPartnerOrg\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: studentPartnerOrg\n          required: true\n          in: query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns an object with a list of student usage reports\n  /api/reports/volunteer-partner-report:\n    post:\n      tags:\n        - reports\n      summary: Retrieves volunteer partner reports\n      description: |\n        - Admin only\n        - Retrieves volunteer partner reports\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: fromDate\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: toDate\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: partnerOrg\n          required: true\n          in: query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns an object (data) with an array of volunteer partner reports\n  /api/reports/partner-analytics-report:\n    get:\n      tags:\n        - reports\n      summary: Downloads a corporate partner analytics report\n      description: |\n        - Admin only\n        - Downloads a corporate partner analytics report\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: partnerOrg\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: startDate\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: endDate\n          required: true\n          in: query\n          schema:\n            type: string\n      responses:\n        '201':\n          description: An excel sheet is created and automatically downloaded\n        '403':\n          description: Unauthorized for non-admin users\n        '422':\n          description: No data found or bad input from the query params\n        '500':\n          description: Internal server error\n  /api/session/new:\n    post:\n      tags:\n        - session\n      summary: Starts a new session\n      description: |\n        Submits details to establish and create a session ID\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                sessionType:\n                  $ref: '#/components/schemas/SessionType'\n                sessionSubTopic:\n                  $ref: '#/components/schemas/SessionSubTopic'\n      responses:\n        '200':\n          description: Returns an object with a session Id\n        '500':\n          description: |\n            - If request for new session is from volunteer\n            - Bad json request body\n  /api/session/current:\n    post:\n      tags:\n        - session\n      summary: Looks for a current session in progress\n      description: |\n        Looks for current session in progress and retrieve details on session\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  $ref: '#/components/schemas/UserId'\n                is_volunteer:\n                  $ref: '#/components/schemas/IsVolunteer'\n      responses:\n        '200':\n          description: Returns an object (data) with session details and the current session Id\n        '404':\n          description: No current session\n  /api/session/latest:\n    post:\n      tags:\n        - session\n      summary: Retrieves latest session\n      description: |\n        Checks and retreieves the latest completed session\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  $ref: '#/components/schemas/UserId'\n      responses:\n        '200':\n          description: Returns an object (data) with the details of the latest completed session and session Id\n        '404':\n          description: No latest session\n  /api/session/check:\n    post:\n      tags:\n        - session\n      summary: Checks for existing session\n      description: |\n        Checks session based on sessionId; if there is a session in progress use that session\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                sessionId:\n                  $ref: '#/components/schemas/SessionId'\n      responses:\n        '200':\n          description: Returns the session id confirming the session existss\n        '404':\n          description: No session found\n  /api/session/end:\n    post:\n      tags:\n        - session\n      summary: Ends a session\n      description: |\n        End the current session in progress\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                sessionId:\n                  $ref: '#/components/schemas/SessionId'\n      responses:\n        '200':\n          description: Returns the session id confirming the session has ended\n        '404':\n          description: No session found\n  /api/session/end-all:\n    post:\n      tags:\n        - session\n      summary: Ends all student sessions\n      description: |\n        - Ends all student sessions\n        - For Cypress tests\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              type: object\n      responses:\n        '200':\n          description: Returns an object with a boolean value\n  /api/sessions:\n    get:\n      tags:\n        - session\n      summary: Get all sessions\n      description: |\n        - Admin only\n        - Retrieves all session completed by user\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: page\n          in: query\n          schema:\n            type: string\n        - name: showBannedUsers\n          in: query\n          schema:\n            type: string\n        - name: showTestUsers\n          in: query\n          schema:\n            type: string\n        - name: showTestUsers\n          in: query\n          schema:\n            type: string\n        - name: sessionActivityFrom\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: sessionActivityTo\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: minMessagesSent\n          in: query\n          schema:\n            type: string\n        - name: minSessionLength\n          in: query\n          schema:\n            type: string\n        - name: studentRating\n          in: query\n          schema:\n            type: string\n        - name: volunteerRating\n          in: query\n          schema:\n            type: string\n        - name: firstTimeStudent\n          in: query\n          schema:\n            type: string\n        - name: firstTimeVolunteer\n          in: query\n          schema:\n            type: string\n        - name: isReported\n          in: query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns an object with a list of session objects\n  /api/session/review:\n    get:\n      tags:\n        - session\n      summary: Retrieves session report\n      description: |\n        - Admin only\n        - Retrieves session report\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: users\n          in: query\n          schema:\n            type: string\n        - name: page\n          in: query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns a object with a list of sessions and page location\n  /api/session/{sessionId}:\n    get:\n      tags:\n        - session\n      summary: Retrieves a session ID\n      description: |\n        - Admin only\n        - Retrieves a session ID\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: sessionId\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/SessionId'\n      responses:\n        '200':\n          description: Returns a session object\n    put:\n      tags:\n        - session\n      summary: Updates session\n      description: Updates session\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: sessionId\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/SessionId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                reviewed:\n                  type: boolean\n                toReview:\n                  type: boolean\n      responses:\n        '200':\n          description: Returns OK message when session has been updated\n  /api/session/{sessionId}/admin:\n    get:\n      tags:\n        - session\n      summary: Retrieves session details\n      description: |\n        - Admin only\n        - Retrieves session details of specific session id for admin\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: sessionId\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/SessionId'\n      responses:\n        '200':\n          description: Returns a object with details on the specified session\n  /api/session/{sessionId}/notifications:\n    get:\n      tags:\n        - session\n      summary: Retrieves session notifications\n      description: |\n        - Admin only\n        - Retrieves a list of session notifications that were sent\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: sessionId\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/SessionId'\n      responses:\n        '200':\n          description: Returns a object with a list of notifications for specified session\n  /api/session/{sessionId}/photo-url:\n    get:\n      tags:\n        - session\n      summary: Retrieves an image url\n      description: Retrieves an upload url to upload image in the session\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: sessionId\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/SessionId'\n      responses:\n        '200':\n          description: Returns an object with assigned image url and upload url\n  /api/session/{sessionId}/report:\n    post:\n      tags:\n        - session\n      summary: Reports a session\n      description: Sends details for reporting a session.\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: sessionId\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/SessionId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                reportReason:\n                  type: string\n                  enum:\n                    - 'This student was extremely rude or inappropriate'\n                    - 'I am worried for the immediate safety of this student'\n                reportMessage:\n                  type: string\n      responses:\n        '200':\n          description: Report has been submitted for the session\n        '401':\n          description: |\n            - Missing session ID or session\n            - Missing volunteer\n            - Missing user ID\n  /api/session/{sessionId}/timed-out:\n    post:\n      tags:\n        - session\n      summary: Times out a session\n      description: Sets a session time out after 15 or 45 minutes in session\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: sessionId\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/SessionId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                timeout:\n                  type: integer\n      responses:\n        '200':\n          description: Session has timed out\n  /api/survey/presession/{:sessionId}:\n    get:\n      tags:\n        - survey\n      summary: Gets presession survey\n      description: Gets presession survey\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: sessionId\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/SessionId'\n      responses:\n        '200':\n          description: Responds with an object of the survey\n    post:\n      tags:\n        - survey\n      summary:  Sends answers to survey\n      description: Sends answers to survey\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: sessionId\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/SessionId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                responseData:\n                  type: object\n                  properties:\n                    primary-goal:\n                      type: object\n                      properties:\n                        answer:\n                          type: string\n                          example: 'test-prep'\n                    topic-understanding:\n                      type: object\n                      properties:\n                        answer:\n                          type: integer\n                          example: 1\n      responses:\n        '200':\n          description: OK\n  /api/training/course/{:courseKey}:\n    get:\n      tags:\n        - training\n      summary:  Retrieves course details\n      description: Retrieves course details based on given coursekey\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: courseKey\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/CourseKey'\n      responses:\n        '200':\n          description: OK\n  /api/training/course/{:courseKey}/progress:\n    post:\n      tags:\n        - training\n      summary:  Sends information to get progress on course\n      description: Sends for progress details based on given material key and course key\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: courseKey\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/CourseKey'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                materialKey:\n                  type: string\n                  example: '31rgp3'\n      responses:\n        '200':\n          description: Responds with object detailing progress section and if the course has been completed\n  /api/training/questions:\n    post:\n      tags:\n        - training\n      summary:  Requests for questions for training\n      description: Sends a request for given category questions\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                category:\n                  $ref: \"#/components/schemas/Category\"\n      responses:\n        '200':\n          description: Responds with an object of a list of question/answer objects\n  /api/training/review/{:category}:\n    get:\n      tags:\n        - training\n      summary:  Retrieve review materials\n      description: Sets category for retrieving review materials\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: category\n          required: true\n          in: path\n          schema:\n            $ref: \"#/components/schemas/Category\"\n      responses:\n        '204':\n          description: No content\n  /training/score:\n    post:\n      tags:\n        - training\n      summary:  Sends answers from quiz\n      description: Sends answers from training quiz and returns a score\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                category:\n                  $ref: '#/components/schemas/Category'\n                idAnswerMap:\n                  type: object\n                  properties:\n                    605a355b3bc29882261d35b4:\n                      type: string\n                      example: \"c\"\n                    605a355b3bc29882261d35c2:\n                      type: string\n                      example: \"c\"\n                    605a355b3bc29882261d35cc:\n                      type: string\n                      example: \"c\"\n                    605a355b3bc29882261d35d1:\n                      type: string\n                      example: \"a\"\n                    605a355b3bc29882261d35d5:\n                      type: string\n                      example: \"a\"\n                    605a355b3bc29882261d35e4:\n                      type: string\n                      example: \"c\"\n                    605a355b3bc29882261d35e5:\n                      type: string\n                      example: \"b\"\n                    605a355b3bc29882261d35f0:\n                      type: string\n                      example: \"b\"\n                    605a355b3bc29882261d3601:\n                      type: string\n                      example: \"b\"\n                    605a355b3bc29882261d3612:\n                      type: string\n                      example: \"c\"\n                    605a355b3bc29882261d3625:\n                      type: string\n                      example: \"b\"\n      responses:\n        '200':\n          description: Responds with an object of the quiz score calculation\n  /api/user:\n    get:\n      tags:\n        - user\n      summary:  Retrieves a user profile\n      description: |\n        - Admin only\n        - Retrieves user details using authenticated req.user object\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Responds with user details object\n        '401':\n          description: User isn't authenticated\n    put:\n      tags:\n        - user\n      summary:  Updates a user profile\n      description: Accepts a request body with fields mapping to profile fields to update for the currently authenticated user\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                phone:\n                  type: string\n                isDeactivated:\n                  type: boolean\n      responses:\n        '200':\n          description: OK, user profile is updated\n    delete:\n      tags:\n        - user\n      summary:  Deletes user\n      description: |\n        - Removes a user\n        - This is a utility route used by Cypress to clean up after e2e tests\n        - Not available in production\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n      responses:\n        '200':\n          description: Responds with object of how many users are deleted\n        '405':\n          description: Responds with message endpoint is not allowed to use in production\n  /api/user/{userId}:\n    get:\n      tags:\n        - user\n      summary:  Retrieves a user profile\n      description: |\n        - Admin only\n        - Retrieves a user profile based on given userID\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userId\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/UserId'\n        - name: page\n          required: true\n          in: query\n          type: string\n      responses:\n        '200':\n          description: Returns a sanitized public user record for a user with the given id.\n    put:\n      tags:\n        - user\n      summary:  Updates a user profile\n      description: |\n        - Admin only\n        - Updates a user profile based on given userID\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userId\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/UserId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                firstName:\n                  type: string\n                lastName:\n                  type: string\n                email:\n                  type: string\n                partnerOrg:\n                  type: string\n                partnerSite:\n                  type: string\n                isVerified:\n                  type: boolean\n                isBanned:\n                  type: boolean\n                isDeactivated:\n                  type: boolean\n                isApproved:\n                  type: boolean\n      responses:\n        '200':\n          description: OK; Record is updated\n  /api/user/referred-friends:\n    get:\n      tags:\n        - user\n      summary: Retrieves a list of referred friends\n      description: Retrieves a list of referred friends with given req.user\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Returns an object with a list of referred friends\n  /api/user/volunteer-approval/background-information:\n    post:\n      tags:\n        - user\n      summary: Submits background information\n      description: Accepts volunteer's background information\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                occupation:\n                  type: string\n                experience:\n                  type: string\n                company:\n                  type: string\n                college:\n                  type: string\n                linkedInUrl:\n                  type: string\n                languages:\n                  type: string\n                country:\n                  type: string\n                state:\n                  type: string\n                city:\n                  type: string\n      responses:\n        '200':\n          description: OK; Volunteer data accepted\n  /api/user/volunteer-approval/photo-url:\n    get:\n      tags:\n        - user\n      summary: Retrieves photo upload url\n      description: Retrieves photo upload url\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: |\n            Will return an object with a boolean value if url is generated successfully or not\n            - Return an object with `success: false` or `success: true` with url\n  /api/user/volunteer-approval/reference:\n    post:\n      tags:\n        - user\n      summary: Submits information for reference\n      description: Submits information for reference\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                referenceFirstName:\n                  type: string\n                referenceLastName:\n                  type: string\n                referenceEmail:\n                  type: string\n      responses:\n        '200':\n          description: OK; Reference accepted\n  /api/user/volunteer-approval/reference/delete:\n    post:\n      tags:\n        - user\n      summary: Removes reference\n      description: Remove reference from given reference email address\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                referenceEmail:\n                  type: string\n      responses:\n        '200':\n          description: OK; deleted\n  /users:\n    get:\n      tags:\n        - user\n      summary: Retrieves a list of users\n      description: |\n        - Admin only\n        - Gets a list of users from given parameters\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: page\n          required: true\n          in: query\n        - name: userId\n          required: true\n          in: query\n        - name: firstName\n          required: true\n          in: query\n        - name: lastName\n          required: true\n          in: query\n        - name: email\n          required: true\n          in: query\n        - name: partnerOrg\n          required: true\n          in: query\n        - name: highSchool\n          required: true\n          in: query\n      responses:\n        '200':\n          description: Returns and object of users and page marker\n  /api/verificationtoken:\n    get:\n      tags:\n        - verification\n      summary: Retrieves verification token\n      description: |\n        - Admin only\n        - Retrieves verification token for given userid\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userid\n          required: true\n          in: query\n          schema:\n            $ref: '#/components/schemas/UserId'\n      responses:\n        '200':\n          description: Returns an object with `verificationToken`\n  /api/verify/send:\n    post:\n      tags:\n        - verification\n      summary: Sends verication email\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Verification email sent\n        '404':\n          description: Server unable to locate verification service\n        '429':\n          description: Too many attempts\n        '422':\n          description: |\n            Invalid arguments\n            User with verification number/address already exists\n  /api/verify/confirm:\n    post:\n      tags:\n        - verification\n      summary: Confirms verification\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n      responses:\n        '200':\n          description: Verification completed, success status in payload\n        '422':\n          description: Invalid argument\n  /api/volunteers:\n    get:\n      tags:\n        - volunteers\n      summary: Gets volunteers\n      description: |\n        - Admin only\n        - Gets a list of all volunteers\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Returns an object with a list of all volunteer user ids\n    post:\n      tags:\n        - volunteers\n      summary: Gets a list of volunteers\n      description: |\n        - Admin only\n        - Replaced by GET api/volunteers\n      depcrecated: true\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description:  Returns an object with a list of all volunteer user ids\n  /api/volunteers/availability:\n    post:\n      tags:\n        - volunteers\n      summary: Gets a map of volunteer availability\n      deprecated: true\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Returns a map of all volunteer availability by user id\n  /api/volunteers/availability/{certifiedSubject}:\n    get:\n      tags:\n        - volunteers\n      summary: Gets a map of volunteer availability\n      description: |\n        - Admin only\n        -  Gets a map of volunteer availabilities by given certified subject\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: certifiedSubject\n          required: true\n          in: path\n          schema:\n            $ref: '#/components/schemas/Category'\n      responses:\n        '200':\n          description: Returns an object of aggregated volunteer availabilities by user id\n  /api/volunteers/review:\n    get:\n      tags:\n        - volunteers\n      summary: Gets volunteer details by page\n      description: |\n        - Admin only\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: page\n          required: true\n          in: query\n      responses:\n        '200':\n          description: Returns an object of volunteers, paginated\n  /api/volunteers/review/{id}:\n    post:\n      tags:\n        - volunteers\n      summary: Submits volunteer details by given id\n      description: |\n        - Admin only\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: id\n          required: true\n          in: path\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                photoIdStatus:\n                  type: string\n                referencesStatus:\n                  type: string\n      responses:\n        '200':\n          description: OK\n  /api-public/contact/send:\n    post:\n      tags:\n        - contact\n      summary: Sends contact form\n      description: |\n        - This is where contact form submissions are sent\n        - Submits given response data and sends contact form via email service\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userId:\n                  type: string\n                userEmail:\n                  type: string\n                topic:\n                  type: string\n                message:\n                  type: string\n      responses:\n        '200':\n          description: Contact form saved in db and sent\n        '400':\n          description: Invalid data was sent in the request\n        '500':\n          description: Internal server error\n  /api-public/eligibility/ip-check:\n    get:\n      tags:\n        - eligibility\n      summary: |\n        Checks if a student's ip is from a region we allow. The server should check this from the headers or\n        from the express request object\n      responses:\n        '200':\n          description: IP is from an allowed region\n        '403':\n          description: IP is not from an allowed region\n        '500':\n          description: Internal server error\n  /api-public/eligibility/check:\n    post:\n      tags:\n        - eligibility\n      summary: Checks if student is eligible\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                schoolUpchieveId:\n                  type: string\n                email:\n                  type: string\n                referredByCode:\n                  type: string\n      responses:\n        '200':\n          description: Returns an object with boolean `isEligible`\n        '422':\n          description: Returned if email already in use\n  /api-public/eligibility/school/search:\n    get:\n      tags:\n        - eligibility\n      summary: Checks if student is eligible\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: q\n          required: true\n          in: query\n      responses:\n        '200':\n          description: Returns an object of school results\n  /api-public/eligibility/findeligible:\n    get:\n      tags:\n        - eligibility\n      summary: Paginate eligible high schools\n      description: |\n        - Available in tests only\n        - Admin only\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: Returns an object of paginated eligible schools\n  /api-public/eligibility/school/studentusers/{schoolUpchieveId}:\n    get:\n      tags:\n        - eligibility\n      summary:  List all students registered with a school\n      description: |\n        - Admin only\n        - Based off of given school id\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: schoolUpchieveId\n          required: true\n          in: path\n      responses:\n        '200':\n          description: Returns an object with student details\n  /api-public/eligibility/schoold/{schoolId}:\n    get:\n      tags:\n        - eligibility\n      summary:  Gets an eligible school\n      description: |\n        - Admin only\n        - Checks eligibility of school from given school id\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: schoolId\n          required: true\n          in: path\n      responses:\n        '200':\n          description: Returns an object with school details\n  put:\n    tags:\n      - eligibility\n    summary: Updates school eligibility\n    description: |\n      - Admin only\n      - Updates school based on given school id\n    security:\n      - cookieAuth: []\n    parameters:\n      - name: schoolId\n        required: true\n        in: path\n    requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                city:\n                  type: string\n                state:\n                  type: string\n                zipCode:\n                  type: string\n                isApproved:\n                  type: boolean\n    responses:\n      '200':\n        description: OK\n  /api-public/eligibility/schools:\n    get:\n      tags:\n        - eligibility\n      summary:  Gets eligible schools\n      description: |\n        - Admin only\n        - Gets a list of all eligible schools\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: name\n          required: true\n          in: query\n        - name: state\n          required: true\n          in: city\n        - name: page\n          required: true\n          in: query\n      responses:\n        '200':\n          description: Returns an array of school objects\n  /api-public/eligibility/school/new:\n    post:\n      tags:\n        - eligibility\n      summary:  Creates new eligible school\n      description: |\n        - Admin only\n        - Submits given body of new school for eligibility\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                city:\n                  type: string\n                state:\n                  type: string\n                zipCode:\n                  type: string\n                isApproved:\n                  type: boolean\n      responses:\n        '200':\n          description: Returns new school id\n  /api-public/eligibility/school/approval:\n    post:\n      tags:\n        - eligibility\n      summary:  Approves school\n      description: |\n        - Admin only\n        - Sets approval for eligible with given school id\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                schoolId:\n                  type: string\n                isApproved:\n                  type: boolean\n      responses:\n        '200':\n          description: OK\n  /api-public/eligibility/school/partner:\n    post:\n      tags:\n        - eligibility\n      summary:  Approves partner status\n      description: |\n        - Admin only\n        - Sets partner status for eligible with given school id\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                schoolId:\n                  type: string\n                isPartner:\n                  type: boolean\n      responses:\n        '200':\n          description: OK        \n  /api-public/eligibility/ineligible-students:\n    get:\n      tags:\n        - eligibility\n      summary:  Gets ineligible students\n      description: |\n        - Admin only\n        - Gets a list of all ineligible students\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: page\n          required: true\n          in: query\n      responses:\n        '200':\n          description: Returns an object with a paginated list of ineligible students\n  /api-public/eligibility/zip-codes/{zipCode}:\n    get:\n      tags:\n        - eligibility\n      summary: Checks an eligible zipcode\n      description: |\n        - Admin only\n        - Checks eligibility based on given zipcode\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: zipCode\n          required: true\n          in: path\n      responses:\n        '200':\n          description: Returns an object with zipcode details\n  /api-public/reference/{referenceId}:\n    get:\n      tags:\n        - reference\n      summary: Gets reference\n      description: |\n        - Gets reference based on given id\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: referenceId\n          required: true\n          in: path\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: User not found\n  /api-public/reference/${referenceId}/submit:\n    post:\n      tags:\n        - reference\n      summary:  Creates new reference\n      description: |\n        - Admin only\n        - Submits new reference based on submitted form information\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: referenceId\n          required: true\n          in: path\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                affiliation:\n                  type: string\n                relationshipLength:\n                  type: string\n                rejectionReason:\n                  type: string\n                additionalInfo:\n                  type: string\n                patient:\n                  type: boolean\n                positiveRoleModel:\n                  type: boolean\n                agreeableAndApproachable:\n                  type: boolean\n                communicatesEffectively:\n                  type: boolean\n                trustworthyWithChildren:\n                  type: boolean\n      responses:\n        '200':\n          description: OK\n  /api-public/referral/{referralCode}:\n    get:\n      tags:\n        - referral\n      summary: Gets referral\n      description: |\n        - Gets referral based on given code\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: referralCode\n          required: true\n          in: path\n      responses:\n        '200':\n          description: Returns an object of user details\n  /whiteboard/reset:\n    post:\n      tags:\n        - whiteboard\n      summary:  Resets whiteboard\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                sessionId:\n                  type: string\n      responses:\n        '200':\n          description: OK\n  /edu:\n    get:\n      tags:\n        - education\n      summary:  Gets all courses\n      description: |\n        - Returns information of course categories and subcategories\n        - Categories link to questions\n      security:\n        - cookieAuth: []\n      responses:\n        '304':\n          description: Responds with view of categories and subcategories\n  /edu/questions:\n    get:\n      tags:\n        - education\n      summary:  Gets all questions\n      security:\n        - cookieAuth: []\n      responses:\n        '304':\n          description: Responds with questions view\n    post:\n      tags:\n        - education\n      summary: Creates a question in edu admin\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                questions:\n                  type: object\n                  properties:\n                    category:\n                      type: string\n                    correctAnswer:\n                      type: string\n                    imageSrc:\n                      type: string\n                    questionText:\n                      type: string\n                    subcategory:\n                      type: string\n                    possibleAnswers:\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          txt:\n                            type: string\n                          val:\n                            type: string\n      responses:\n        '200':\n          description: Returns with object of created question\n  /edu/questions/new:\n    get:\n      tags:\n        - education\n      summary:  Gets new question form\n      responses:\n        '304':\n          description: |\n            - Responds with view of new question form\n            - Routes to `edu/questions/new`\n  /edu/categoryquestions:\n    post:\n      tags:\n        - education\n      summary:  Submits details for category specific questions\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                category:\n                  type: string\n                skip:\n                  type: string\n                limit:\n                  type: string\n      responses:\n        '200':\n          description: Returns object with questions of given category\n  /edu/questions/{id}:\n    put:\n      tags:\n        - education\n      summary: Updates a question\n      descripttion: Submits details for question update\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: id\n          required: true\n          in: path\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                questions:\n                  type: object\n                  properties:\n                    category:\n                      type: string\n                    correctAnswer:\n                      type: string\n                    imageSrc:\n                      type: string\n                    questionText:\n                      type: string\n                    subcategory:\n                      type: string\n                    possibleAnswers:\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          txt:\n                            type: string\n                          val:\n                            type: string\n      responses:\n        '200':\n          description: Returns object of updated question\n    delete:\n      tags:\n        - education\n      summary: Deletes a question from given id\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: id\n          required: true\n          in: path\n      responses:\n        '200':\n          description: Returns question that is deleted\n  /twiml/message/{message}:\n    post:\n      tags:\n        - twilio\n      summary:  Text to speech conversion\n      description: |\n        - When message text is sent, Twilio will call this endpoint\n        - This endpoints sets TwiML instructions for text to speech conversation\n        - Converts text message to voice message\n        - Responds with TwiML containing the decoded message text and the configured voice for the text-to-speech conversion\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: message\n          required: true\n          in: path\n      responses:\n        '200':\n          description: Returns TwiML in text/xml\n  /twiml/message/incoming-sms:\n    post:\n      tags:\n        - twilio\n      summary:  Twilio SMS messages\n      description: |\n        - Handles SMS messages sent to Twilio numbers\n        - Twilio calls this endpoint to generate a message response\n        - Server will send a TwiML message\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                Body:\n                  type: string\n                From:\n                  type: string\n      responses:\n        '200':\n          description: |\n            Sends message (see types below) and returns object with content type of xml\n            - Message with session url (successful)\n            - No session found\n            - Volunteer already joined session\n            - Student ended/cancelled their session\n        '404':\n          description: Missing phone number\nexternalDocs:\n  description: Find out more about Swagger\n  url: 'http://swagger.io'\ncomponents:\n  schemas:\n    AvailableHour:\n      type: boolean\n      example: true\n    Category:\n      type: string\n      example: 'geometry'\n    CourseKey:\n      type: string\n      example: 'upchieve101'\n    CSRFToken:\n      type: object\n      required:\n        - csrfToken\n      properties:\n        csrfToken:\n          type: string\n    Email:\n      type: string\n      example: \"student1@upchieve.org\"\n    FavoritedVolunteer:\n      type: object\n      required:\n        - firstName\n        - id\n        - sessionCount\n        - subjects\n      properties:\n        firstName:\n          type: string\n          minimum: 1\n        id:\n          type: string\n          minimum: 24\n          maximum: 24\n        sessionCount:\n          type: integer\n          format: int64\n        subjects:\n          type: array\n          items:\n            type: string\n    FavoritedVolunteerList:\n      type: array\n      items:\n        $ref: '#/components/schemas/FavoritedVolunteer'\n    Healthcheck:\n      type: object\n      required:\n        - version\n      properties:\n        version:\n          type: string\n    IsVolunteer:\n      type: boolean\n      example: false\n    Password:\n      type: string\n      example: \"Password123\"\n    ScheduleDay:\n      type: object\n      properties:\n        1a:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        1p:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        2a:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        2p:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        3a:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        3p:\n          $ref: \"#/components/schemas/AvailableHour\"\n        4a:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        4p:\n          $ref: \"#/components/schemas/AvailableHour\"\n        5a:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        5p:\n          $ref: \"#/components/schemas/AvailableHour\"\n        6a:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        6p:\n          $ref: \"#/components/schemas/AvailableHour\"\n        7a:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        7p:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        8a:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        8p:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        9a:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        9p:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        10a:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        10p:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        11a:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        11p:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        12a:\n          $ref: \"#/components/schemas/UnavailableHour\"\n        12p:\n          $ref: \"#/components/schemas/UnavailableHour\"\n    SessionId:\n      type: string\n      example: \"605a43e4bf39966c0e3c59ce\"\n      format: uuid\n    SessionSubTopic:\n      type: string\n      example: 'algebraone'\n    SessionType:\n      type: string\n      example: \"math\"\n    StudentId:\n      type: string\n      example: \"605a355a3bc29882261d3594\"\n      format: uuid\n    TZ:\n      type: string\n      example: \"US/Arizona\"\n    UnavailableHour:\n      type: boolean\n      example: false\n    UserId:\n      type: string\n      example: \"605a355a3bc29882261d3594\"\n    UserType:\n      type: string\n      example: \"volunteer\"\n    VolunteerId:\n      type: string\n      format: uuid\n    VolunteerIdList:\n      type: array\n      items:\n        $ref: '#/components/schemas/VolunteerId'\n  requestBodies:\n    FavoritesAction:\n      content:\n        applicaton/json:\n          schema:\n            type: object\n            required:\n              - action\n              - ids\n            properties:\n              action:\n                type: string\n                enum: ['add', 'remove']\n              ids:\n                $ref: '#/components/schemas/VolunteerIdList'\n    EmailPassword:\n      required: true\n      content:\n        application/json:\n          schema:\n              type: object\n              properties:\n                email:\n                  $ref: '#/components/schemas/Email'\n                password:\n                  $ref: '#/components/schemas/Password'\nsecuritySchemes:\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: connect.sid\n"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal array into Go struct field Response.paths.get.responses.description of type string"
}