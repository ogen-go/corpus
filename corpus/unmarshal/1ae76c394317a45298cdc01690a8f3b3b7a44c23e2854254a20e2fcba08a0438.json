{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/scpwiki/wikijump"
		},
		"file": {
			"name": "api.oas3.yaml",
			"size": 0,
			"path": "web/resources/api/api.oas3.yaml",
			"byteSize": 121897,
			"content": "openapi: 3.1.0\n\n# TODO: document navigable url construction\n# TODO: /query\n# TODO: /ftml\n\n# TODO: upgrade to OpenAPI 3.1.x (when tools are updated for VSCode, ReDoc, etc.)\n\n# Delegated to Query:\n# - Search\n# - User, Page, and Site activity\n# - Member Listing\n\n# For some next API version:\n# - Watching\n\ninfo:\n  title: Wikijump\n  description: |\n    ## Introduction\n\n    This page documents the Wikijump API, which is a HTTP interface\n    that lets you easily interact with Wikijump programatically.\n\n    The API is defined as a OpenAPI 3.0.3 schema file.\n    The implementation of this API in the Wikijump backend very closely matches this schema.\n\n    Wikijump (including this API) is subject to change as the project evolves.\n\n    ## Usage\n\n    The Wikijump API is centered around the JSON format for both sending and receiving.\n    The data expected/returned by the API will always be wrapped inside an object, even if that object contains only\n    a single property. The following code-block demonstrates an example payload:\n    ```json\n    {\n      'login': 'fake@example.com',\n      'password': 'pa$$word'\n    }\n    ```\n\n    The only exceptions to the 'JSON only' standard are files and avatars, which are sent directly.\n\n    If you plan to use this API with some sort of service, e.g. an IRC bot, it should be noted that this API is\n    fundamentally geared towards supporting frontends. Endpoints usually point to individual resources or\n    interactions, which means that any sort of service requesting information on many resources will have to send\n    a large amount of API requests if it were to use this API as a frontend would.\n\n    However, the Wikijump API has a special endpoint, `/query`, which allows complex and 'closer to the metal'\n    transactions with the Wikijump database. Services, but also frontends, can use this endpoint to\n    request information efficiently on a multitude of resources without excessive API requests and bandwidth usage.\n\n    The `/query` endpoint is currently not available.\n\n    ## Changes from Wikidot\n\n    \u003e Breaking changes to previously private components of the Wikidot interface or API\n    will not be mentioned in this section.\n\n    The following features have been deprecated, removed, or rendered nonfunctional:\n    - Contacts\n    - Account types (pro accounts)\n    - OneSignal\n    - Advertising\n    - XML-RPC API\n    - Pingbacks\n    - Twitter integration ('Tweet My Wiki')\n    - Site traffic statistics (Google Analytics is still available!)\n    - Per-site user profiles\n    - Inter-site promotion\n    - Custom layouts\n    - Custom footer\n\n    The following features have been made available universally:\n    - HTTPS (required - Wikijump is designed to use HTTPS only)\n    - Blocking site cloning\n    - Disabling the display of karma site-wide\n\n    These changes reflect Wikijump's transition away from Wikidot's business model and outdated infrastructure.\n\n    Finally, the following features **will be supported**, but aren't quite available in this API yet:\n    - Watching\n    - Activity pages (user, site, etc.) (requires `/query`)\n    - Searching (requires `/query`)\n\n    ## Constructing Navigable URLS\n\n    (todo)\n\n  contact:\n    name: Wikijump Github\n    url: https://github.com/scpwiki/wikijump\n\n  license:\n    name: GNU Affero General Public License 3.0 (AGPL 3.0)\n    url: http://www.gnu.org/licenses/agpl-3.0.html\n\n  version: 0.1.0\n\n  x-logo: # redoc\n    url: https://raw.githubusercontent.com/scpwiki/wikijump/develop/assets/logo.min.svg\n    altText: Wikijump Logo\n\nservers:\n- url: https://wikijump.com/api--v1\n  description: Contextless Public API\n- url: https://{site}.wikijump.com/api--v1\n  description: Site Context Public API\n  variables:\n    site:\n      default: www\n      description: \u003e\n        The site instance that the API should interact with.\n        Requests will generally be 'relative' to the site specified.\n\ntags:\n# -- CATEGORICAL\n- name: query\n  description: Make 'closer to the metal' transactions with Wikijump.\n- name: util\n  description: Utility endpoints for handling Wikijump resources.\n- name: auth\n  description: Handle account authentication state.\n- name: account\n  description: Retrieve or update details relating to a personal account.\n- name: notification\n  description: Retrieve and update client notifications.\n- name: user\n  description: Retrieve details about users.\n- name: membership\n  description: Retrieve and update user membership status.\n- name: category\n  description: Retrieve and update category metadata.\n- name: page\n  description: Retrieve and update pages.\n- name: revision\n  description: Retrieve details about revisions.\n- name: tag\n  description: Retrieve details about tags.\n- name: vote\n  description: Retrieve voting details and cast votes on pages.\n- name: file\n  description: Retrieve and upload files.\n- name: report\n  description: Report users and pages to the staff of a site.\n- name: abuse\n  description: Report sites, users, and pages to the platform administrators.\n- name: message\n  description: Send and retrieve private messages.\n- name: forum\n  description: Manage and interact with a site's forums.\n  x-traitTag: true\n- name: forum-misc\n- name: forum-group\n- name: forum-category\n- name: forum-thread\n- name: forum-post\n- name: moderation\n  description: Report and manage a site's users and content.\n- name: site\n  description: Manage and configure a site.\n# -- TRAITS\n- { name: paginated,      x-traitTag: true }\n- { name: not-json,       x-traitTag: true }\n- { name: avatars,        x-traitTag: true }\n- { name: platform-admin, x-traitTag: true }\n\n# redoc\nx-tagGroups:\n- name: Query\n  tags: [query]\n- name: Utility\n  tags: [util]\n- name: Client\n  tags: [auth, account, notification, message]\n- name: Users\n  tags: [user, membership]\n- name: Content\n  tags: [category, page, revision, tag, vote, file]\n- name: Forum\n  tags: [forum, forum-misc, forum-group, forum-category, forum-thread, forum-post]\n- name: Site Management\n  tags: [report, abuse, moderation, site]\n\npaths:\n\n  # -- QUERY\n\n  /query:\n    post:\n      description: INCOMPLETE - STUB\n      tags: [query]\n      operationId: queryRequest\n      security:\n      - QueryAPIAccess: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- UTIL\n\n  /util/resolveid/{id}:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n\n    get:\n      description: Resolves an ID and returns what type of object it refers to.\n      tags: [util]\n      operationId: utilResolveID\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ReferenceTypesObject' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- AUTH\n\n  /auth/login:\n    post:\n      description: Attempts a login. The login specifier can be either a username or an email address.\n      tags: [auth]\n      operationId: authLogin\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/LoginOptions' }}}\n      responses:\n        200: { $ref: '#/components/responses/RegeneratedSession' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /auth/confirm:\n    post:\n      description: Confirms the client's password.\n      tags: [auth]\n      operationId: authConfirm\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/PasswordObject' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /auth/logout:\n    delete:\n      description: Logs the client out.\n      tags: [auth]\n      operationId: authLogout\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /auth/check:\n    post:\n      description: Gets the authentication state of the client.\n      tags: [auth]\n      operationId: authCheck\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/SessionState' }}}\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /auth/refresh:\n    post:\n      description: Refreshes the client's session.\n      tags: [auth]\n      operationId: authRefresh\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/RegeneratedSession' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- ACCOUNT\n\n  /account/register:\n    post:\n      description: Registers an account. Email validation will be required.\n      tags: [account]\n      operationId: accountRegister\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/RegisterOptions' }}}\n      responses:\n        202: { $ref: '#/components/responses/RegeneratedSession' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /account/send-verification-email:\n    post:\n      description: Sends a verification email to the account's address.\n      tags: [account]\n      operationId: accountSendVerificationEmail\n      security:\n      - AccountSession: []\n      responses:\n        202: { $ref: '#/components/responses/Accepted' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /account/request-deletion:\n    post:\n      description: \u003e\n        Starts the deletion process for an account.\n        Requires additional email validation for the process to complete.\n      tags: [account]\n      operationId: accountRequestDeletion\n      security:\n      - AccountSession: []\n      responses:\n        202: { $ref: '#/components/responses/Accepted' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /account/start-recovery:\n    post:\n      description: Starts the password recovery routine.\n      tags: [account]\n      operationId: accountStartRecovery\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/EmailObject' }}}\n      responses:\n        202: { $ref: '#/components/responses/Accepted' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /account/email:\n    get:\n      description: Gets the current email address.\n      tags: [account]\n      operationId: accountGetEmail\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/EmailObject' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    put:\n      description: \u003e\n        Updates the current email address.\n        Does not immediately change the email, as the change must be verified\n        through a link that is sent to the requested email.\n      tags: [account]\n      operationId: accountUpdateEmail\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/UpdateEmail' }}}\n\n      responses:\n        202: { $ref: '#/components/responses/Accepted' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /account/password:\n    put:\n      description: Updates the current password.\n      tags: [account]\n      operationId: accountUpdatePassword\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/UpdatePassword' }}}\n\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /account/username:\n    get:\n      description: Gets the current username.\n      tags: [account]\n      operationId: accountGetUsername\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/UsernameObject' }}}\n\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    put:\n      description: Updates the current username.\n      tags: [account]\n      operationId: accountUpdateUsername\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/UsernameObject' }}}\n\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /account/settings:\n    get:\n      description: Gets the current account settings.\n      tags: [account]\n      operationId: accountGetSettings\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/AccountSettings' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    patch:\n      description: Update (patch) the client's user details.\n      tags: [account]\n      operationId: accountUpdateSettings\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/AccountSettingsPatch' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- NOTIFICATION\n\n  /notification:\n    get:\n      description: Gets the client's current notifications.\n      tags: [notification]\n      operationId: notificationGet\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/NotificationList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Dismisses all of the client's notifications.\n      tags: [notification]\n      operationId: notificationDismissAll\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- USER\n\n  /user:\n    get:\n      description: Gets the client's user details.\n      tags: [user, avatars]\n      operationId: userClientGet\n      parameters:\n      - $ref: '#/components/parameters/UserDetailsType'\n      - $ref: '#/components/parameters/Avatars'\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/UserGet' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    patch:\n      description: Update (patch) the client's user details.\n      tags: [user]\n      operationId: userClientUpdateProfile\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/UserProfilePatch' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /user/avatar:\n    get:\n      description: Gets the client's avatar. This won't return the avatar directly, but rather return the URL for it.\n      tags: [user]\n      operationId: userClientGetAvatar\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/AvatarURLObject' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Sets the client's avatar.\n      tags: [user, not-json]\n      operationId: userClientSetAvatar\n      security:\n      - AccountSession: []\n      requestBody: { content: { application/octet-stream: {} }}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Removes the client's avatar.\n      tags: [user]\n      operationId: userClientRemoveAvatar\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /user/blocked:\n    get:\n      description: Gets the list of users the client has blocked.\n      tags: [user]\n      operationId: userClientGetBlocked\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/UserBlockedList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n\n  /user/{path_type}/{path}:\n    parameters:\n    - $ref: '#/components/parameters/UserPathType'\n    - $ref: '#/components/parameters/UserPath'\n    - $ref: '#/components/parameters/Avatars'\n\n    get:\n      description: Gets a user's details.\n      tags: [user, avatars]\n      operationId: userGet\n      parameters:\n      - $ref: '#/components/parameters/UserDetailsType'\n      responses:\n        200: { $ref: '#/components/responses/UserGet' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: |\n        Resets a user's profile.\n\n        \u003e This endpoint is only available to platform administrators.\n      tags: [user, moderation, platform-admin]\n      operationId: userResetProfile\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /user/{path_type}/{path}/avatar:\n    parameters:\n    - $ref: '#/components/parameters/UserPathType'\n    - $ref: '#/components/parameters/UserPath'\n\n    get:\n      description: Gets a user's avatar. This won't return the avatar directly, but rather return the URL for it.\n      tags: [user]\n      operationId: userGetAvatar\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/AvatarURLObject' }}}\n\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: |\n        Removes a user's avatar.\n\n        \u003e This endpoint is only available to platform administrators.\n      tags: [user, moderation, platform-admin]\n      operationId: userRemoveAvatar\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /user/{path_type}/{path}/block:\n    parameters:\n    - $ref: '#/components/parameters/UserPathType'\n    - $ref: '#/components/parameters/UserPath'\n\n    get:\n      description: Gets whether or not the client has a user blocked.\n      tags: [user]\n      operationId: userGetBlocked\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/UserBlocked' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    put:\n      description: Updates whether or not the client has a user blocked.\n      tags: [user]\n      operationId: userUpdateBlocked\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/UserBlocked' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n\n  # -- MEMBERSHIP\n\n  /membership:\n    get:\n      description: Gets the sites the client is a member of.\n      tags: [membership]\n      operationId: membershipGetList\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/MembershipList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /membership/applications:\n    get:\n      description: Gets the sites the client has requested to join.\n      tags: [membership]\n      operationId: membershipGetApplications\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ApplicationSendList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /membership/invites:\n    get:\n      description: Gets the sites the client has been invited to join.\n      tags: [membership]\n      operationId: membershipGetInvites\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/InviteList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /membership/site/{site}:\n    parameters:\n    - $ref: '#/components/parameters/Site'\n\n    get:\n      description: Gets the client membership status for a site.\n      tags: [membership]\n      operationId: membershipSiteGet\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/MembershipStatus' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Requests to join a site (application).\n      tags: [membership]\n      operationId: membershipSiteApply\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/ApplicationSend' }}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Leaves a site.\n      tags: [membership]\n      operationId: membershipSiteLeave\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /member/{path_type}/{path}/membership:\n    parameters:\n    - $ref: '#/components/parameters/UserPathType'\n    - $ref: '#/components/parameters/UserPath'\n\n    get:\n      description: Gets the sites a user is a member of.\n      tags: [membership]\n      operationId: membershipUserGetList\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/MembershipList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /member/{path_type}/{path}/membership/{site}:\n    parameters:\n    - $ref: '#/components/parameters/Site'\n    - $ref: '#/components/parameters/UserPathType'\n    - $ref: '#/components/parameters/UserPath'\n\n    get:\n      description: Gets a user's membership status for a site.\n      tags: [membership]\n      operationId: membershipUserSiteGet\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/MembershipStatus' }}}\n\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /member/{path_type}/{path}/role:\n    parameters:\n    - $ref: '#/components/parameters/UserPathType'\n    - $ref: '#/components/parameters/UserPath'\n\n    get:\n      description: Gets the role of a user.\n      tags: [membership]\n      operationId: membershipUserGetRole\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/MembershipRole' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Sets the role of a user.\n      tags: [membership]\n      operationId: membershipUserSetRole\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/MembershipRole' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /member/{path_type}/{path}/invite:\n    parameters:\n    - $ref: '#/components/parameters/UserPathType'\n    - $ref: '#/components/parameters/UserPath'\n\n    post:\n      description: Invites a user to join a site.\n      tags: [membership]\n      operationId: membershipUserInvite\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/InviteSend' }}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- PAGE\n\n  /page:\n    post:\n      description: Creates a new page.\n      tags: [page]\n      operationId: pageCreate\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/PageCreateOptions' }}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /page/{path_type}/{path}:\n    parameters:\n    - $ref: '#/components/parameters/PagePathType'\n    - $ref: '#/components/parameters/PagePath'\n\n    get:\n      description: Gets a page.\n      tags: [page, avatars]\n      operationId: pageGet\n      parameters:\n      - $ref: '#/components/parameters/PageType'\n      - $ref: '#/components/parameters/Avatars'\n      responses:\n        200: { $ref: '#/components/responses/PageGet' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    patch:\n      description: Updates a page.\n      tags: [page]\n      operationId: pageUpdate\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/PagePatch' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Deletes a page.\n      tags: [page]\n      operationId: pageDelete\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /page/id/{id}/restore:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n\n    post:\n      description: Restores a previously deleted page.\n      tags: [page]\n      operationId: pageRestore\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/SlugObject' }}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /page/{path_type}/{path}/rename:\n    parameters:\n    - $ref: '#/components/parameters/PagePathType'\n    - $ref: '#/components/parameters/PagePath'\n\n    post:\n      description: Changes the path/slug/name of a page.\n      tags: [page]\n      operationId: pageRename\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/SlugObject' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- REVISION\n\n  /page/{path_type}/{path}/revision:\n    parameters:\n    - $ref: '#/components/parameters/PagePathType'\n    - $ref: '#/components/parameters/PagePath'\n    - $ref: '#/components/parameters/Cursor'\n    - $ref: '#/components/parameters/Limit'\n    - $ref: '#/components/parameters/Avatars'\n\n    get:\n      description: Gets the update/revision history of a page.\n      tags: [revision, paginated, avatars]\n      operationId: revisionPageGetHistory\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/RevisionHistory' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /page/{path_type}/{path}/revision/{revision}:\n    parameters:\n    - $ref: '#/components/parameters/PagePathType'\n    - $ref: '#/components/parameters/PagePath'\n    - $ref: '#/components/parameters/Revision'\n\n    get:\n      description: Gets the page corresponding to a revision.\n      tags: [revision, avatars]\n      operationId: revisionGet\n      parameters:\n      - $ref: '#/components/parameters/PageType'\n      - $ref: '#/components/parameters/Avatars'\n      responses:\n        200: { $ref: '#/components/responses/PageGet' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    patch:\n      description: Updates the metadata of a revision.\n      tags: [revision]\n      operationId: revisionUpdateMetadata\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/RevisionPatch' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Resets a page to a past revision.\n      tags: [revision]\n      operationId: revisionResetToRevision\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- TAG\n\n  /page/{path_type}/{path}/tags:\n    parameters:\n    - $ref: '#/components/parameters/PagePathType'\n    - $ref: '#/components/parameters/PagePath'\n\n    get:\n      description: Gets the tags of a page.\n      tags: [tag]\n      operationId: tagPageGet\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/TagListObject' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    put:\n      description: Updates the tags of a page.\n      tags: [tag]\n      operationId: tagPageUpdate\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/TagListObject' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- VOTE\n\n  /page/{path_type}/{path}/score:\n    parameters:\n    - $ref: '#/components/parameters/PagePathType'\n    - $ref: '#/components/parameters/PagePath'\n\n    get:\n      description: Gets the score of a page.\n      tags: [vote]\n      operationId: votePageGetScore\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/Score' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /page/{path_type}/{path}/voters:\n    parameters:\n    - $ref: '#/components/parameters/PagePathType'\n    - $ref: '#/components/parameters/PagePath'\n    - $ref: '#/components/parameters/Cursor'\n    - $ref: '#/components/parameters/Limit'\n    - $ref: '#/components/parameters/Avatars'\n\n    get:\n      description: Gets the voters and votes of a page.\n      tags: [vote, paginated, avatars]\n      operationId: votePageGetVoters\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/VoterList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /page/{path_type}/{path}/vote:\n    parameters:\n    - $ref: '#/components/parameters/PagePathType'\n    - $ref: '#/components/parameters/PagePath'\n\n    get:\n      description: Gets the client's voting state on a page, if any.\n      tags: [vote]\n      operationId: votePageGet\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/CastVoteStatus' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    put:\n      description: Updates/sets the client's voting state on a page.\n      tags: [vote]\n      operationId: votePageUpdateVote\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/CastVoteObject' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Removes the client's voting state on a page.\n      tags: [vote]\n      operationId: votePageRemoveVote\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- FILE\n\n  /page/{path_type}/{path}/file:\n    parameters:\n    - $ref: '#/components/parameters/PagePathType'\n    - $ref: '#/components/parameters/PagePath'\n\n    get:\n      description: Gets metadata on all files attached to a page.\n      tags: [file, paginated, avatars]\n      operationId: filePageGetMetadata\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/FileMetadataList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Adds a new file to a page.\n      tags: [file, not-json]\n      operationId: filePageAdd\n      security:\n      - AccountSession: []\n      requestBody: { content: { multipart/form-data: { schema: { $ref: '#/components/schemas/FileUpload' }}}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /file:\n    get:\n      description: |\n        Gets metadata on the files attached directly to the site instance.\n\n        \u003e This does not include files attached to _pages_.\n      tags: [file, paginated, avatars]\n      operationId: fileSiteGetMetadata\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/FileMetadataList' }}}\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Adds a new file to a site instance.\n      tags: [file, not-json]\n      operationId: fileSiteAdd\n      security:\n      - AccountSession: []\n      requestBody: { content: { multipart/form-data: {\n        schema: { $ref: '#/components/schemas/FileUpload' }\n      }}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /file/{id}:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n\n    get:\n      description: Gets a file.\n      tags: [file, not-json]\n      operationId: fileGet\n      responses:\n        200:\n          description: OK\n          content: { application/octet-stream: {} }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Deletes a file.\n      tags: [file]\n      operationId: fileDelete\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /file/metadata:\n\n    get:\n      description: Gets the site's file-system metadata, e.g. remaining file space.\n      tags: [file]\n      operationId: fileGetSiteMetadata\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/FileSiteMetadata' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n\n  /file/{id}/metadata:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n    - $ref: '#/components/parameters/Avatars'\n\n    get:\n      description: Gets a file's metadata.\n      tags: [file, avatars]\n      operationId: fileGetMetadata\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/FileMetadata' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- REPORT\n\n  /user/{path_type}/{path}/report:\n    parameters:\n    - $ref: '#/components/parameters/UserPathType'\n    - $ref: '#/components/parameters/UserPath'\n\n    get:\n      description: Gets the reports against a user.\n      tags: [report, avatars]\n      operationId: reportUserGet\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ReportList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Reports a user.\n      tags: [report]\n      operationId: reportUserSend\n      security:\n      - AccountSession: []\n      requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/ReportSend' }}}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /page/{path_type}/{path}/report:\n    parameters:\n    - $ref: '#/components/parameters/PagePathType'\n    - $ref: '#/components/parameters/PagePath'\n\n    get:\n      description: Gets a page's reports.\n      tags: [report, avatars]\n      operationId: reportPageGet\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ReportList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Reports a page.\n      tags: [report]\n      operationId: reportPageSend\n      security:\n      - AccountSession: []\n      requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/ReportSend' }}}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /report/{id}:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n\n    get:\n      description: Gets a report.\n      tags: [report, avatars]\n      operationId: reportGet\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/Report' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- ABUSE\n\n  /abuse:\n    get:\n      description: |\n        Gets the reports against a site.\n\n        \u003e This endpoint is only available to platform administrators.\n      tags: [abuse, platform-admin, avatars]\n      operationId: abuseSiteGet\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ReportList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Reports a site.\n      tags: [abuse]\n      operationId: abuseSiteSend\n      security:\n      - AccountSession: []\n      requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/ReportSend' }}}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /user/{path_type}/{path}/abuse:\n    parameters:\n    - $ref: '#/components/parameters/UserPathType'\n    - $ref: '#/components/parameters/UserPath'\n\n    get:\n      description: |\n        Gets the reports against a user.\n\n        \u003e This endpoint is only available to platform administrators.\n      tags: [abuse, platform-admin, avatars]\n      operationId: abuseUserGet\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ReportList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Reports a user.\n      tags: [abuse]\n      operationId: abuseUserSend\n      security:\n      - AccountSession: []\n      requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/ReportSend' }}}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /page/{path_type}/{path}/abuse:\n    parameters:\n    - $ref: '#/components/parameters/PagePathType'\n    - $ref: '#/components/parameters/PagePath'\n\n    get:\n      description: |\n        Gets a page's reports.\n\n        \u003e This endpoint is only available to platform administrators.\n      tags: [abuse, platform-admin, avatars]\n      operationId: abusePageGet\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ReportList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Reports a page.\n      tags: [abuse]\n      operationId: abusePageSend\n      security:\n      - AccountSession: []\n      requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/ReportSend' }}}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /abuse/{id}:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n\n\n    get:\n      description: |\n        Gets a report.\n\n        \u003e This endpoint is only available to platform administrators.\n      tags: [abuse, platform-admin, avatars]\n      operationId: abuseGet\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/Report' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- MESSAGE\n\n  /message:\n    parameters:\n    - $ref: '#/components/parameters/Cursor'\n    - $ref: '#/components/parameters/Limit'\n    - $ref: '#/components/parameters/MessageDetail'\n\n    get:\n      description: Gets all of the client's messages.\n      tags: [message, paginated, avatars]\n      operationId: messageGetList\n      parameters:\n      - $ref: '#/components/parameters/MessageArchived'\n      - $ref: '#/components/parameters/Avatars'\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/MessageList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /message/{id}:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n\n    get:\n      description: Gets a message.\n      tags: [message, avatars]\n      operationId: messageGet\n      parameters:\n      - $ref: '#/components/parameters/MessageDetail'\n      - $ref: '#/components/parameters/Avatars'\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/Message' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    patch:\n      description: Updates the metadata of a message, such as read or unread.\n      tags: [message]\n      operationId: messageUpdate\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/MessagePatch' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Deletes a message.\n      tags: [message]\n      operationId: messageDelete\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /user/{path_type}/{path}/message:\n    parameters:\n    - $ref: '#/components/parameters/UserPathType'\n    - $ref: '#/components/parameters/UserPath'\n\n    post:\n      description: Messages a user.\n      tags: [message]\n      operationId: messageSend\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/MessageSend' }}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- FORUM\n\n  /forum:\n    parameters:\n    - $ref: '#/components/parameters/Avatars'\n\n    get:\n      description: Gets the groups and categories of a forum.\n      tags: [forum, forum-misc, avatars]\n      operationId: forumGet\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/Forum' }}}\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /forum/group:\n    parameters:\n    - $ref: '#/components/parameters/Avatars'\n\n    get:\n      description: Gets the groups of a forum.\n      tags: [forum, forum-group, avatars]\n      operationId: forumGroupGetList\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ForumGroupList' }}}\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /forum/group/{id}:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n\n    get:\n      description: Gets a group.\n      tags: [forum, forum-group, avatars]\n      operationId: forumGroupGet\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ForumGroup' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    patch:\n      description: Updates a group.\n      tags: [forum, forum-group]\n      operationId: forumGroupUpdate\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/ForumGroupPatch' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Creates a new category inside of a group.\n      tags: [forum, forum-group]\n      operationId: forumGroupAddCategory\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/ForumCategoryCreate' }}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Deletes a group.\n      tags: [forum, forum-group]\n      operationId: forumGroupDelete\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /forum/group/{id}/categories:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n\n    get:\n      description: Gets the categories of a group.\n      tags: [forum, forum-group, avatars]\n      operationId: forumGroupGetCategories\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ForumCategoryList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /forum/category:\n    parameters:\n    - $ref: '#/components/parameters/Avatars'\n\n    get:\n      description: Gets the categories of a forum.\n      tags: [forum, forum-category, avatars]\n      operationId: forumCategoryGetList\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ForumCategoryList' }}}\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /forum/category/{id}:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n\n    get:\n      description: Gets a category.\n      tags: [forum, forum-category, avatars]\n      operationId: forumCategoryGet\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ForumCategory' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    patch:\n      description: Updates a category.\n      tags: [forum, forum-category]\n      operationId: forumCategoryUpdate\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/ForumCategoryPatch' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Creates a new thread inside of a category.\n      tags: [forum, forum-category]\n      operationId: forumCategoryAddThread\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/ForumThreadCreate' }}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Deletes a category.\n      tags: [forum, forum-category]\n      operationId: forumCategoryDelete\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /forum/category/{id}/threads:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n    - $ref: '#/components/parameters/Cursor'\n    - $ref: '#/components/parameters/Limit'\n    - $ref: '#/components/parameters/Avatars'\n\n    get:\n      description: Gets the threads of a category.\n      tags: [forum, forum-category, paginated, avatars]\n      operationId: forumCategoryGetThreads\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ForumThreadList' }}}\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /forum/thread/{id}:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n\n    get:\n      description: Gets a thread.\n      tags: [forum, forum-thread, avatars]\n      operationId: forumThreadGet\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ForumThread' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    patch:\n      description: Updates a thread.\n      tags: [forum, forum-thread]\n      operationId: forumThreadUpdate\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/ForumThreadPatch' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Creates a new post inside of a thread.\n      tags: [forum, forum-thread]\n      operationId: forumThreadAddPost\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/ForumPostCreate' }}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Deletes a thread.\n      tags: [forum, forum-thread]\n      operationId: forumThreadDelete\n      parameters:\n      - $ref: '#/components/parameters/ForumDeletionType'\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /forum/thread/{id}/posts:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n    - $ref: '#/components/parameters/Cursor'\n    - $ref: '#/components/parameters/Limit'\n    - $ref: '#/components/parameters/ForumPostDetail'\n    - $ref: '#/components/parameters/ForumReplyDepth'\n    - $ref: '#/components/parameters/Avatars'\n\n    get:\n      description: Gets the posts of a thread.\n      tags: [forum, forum-thread, paginated, avatars]\n      operationId: forumThreadGetPosts\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ForumPostList' }}}\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /forum/post/{id}:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n\n    get:\n      description: Gets a post.\n      tags: [forum, forum-post, avatars]\n      operationId: forumPostGet\n      parameters:\n      - $ref: '#/components/parameters/ForumPostDetail'\n      - $ref: '#/components/parameters/ForumReplyDepth'\n      - $ref: '#/components/parameters/Avatars'\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ForumPost' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    patch:\n      description: Updates a post.\n      tags: [forum, forum-post]\n      operationId: forumPostUpdate\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/ForumPostPatch' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Replies to a post with another post.\n      tags: [forum, forum-post]\n      operationId: forumPostReply\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/ForumPostCreate' }}}\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Deletes a post.\n      tags: [forum, forum-post]\n      operationId: forumPostDelete\n      parameters:\n      - $ref: '#/components/parameters/ForumDeletionType'\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /forum/post/{id}/replies:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n    - $ref: '#/components/parameters/Cursor'\n    - $ref: '#/components/parameters/Limit'\n    - $ref: '#/components/parameters/ForumPostDetail'\n    - $ref: '#/components/parameters/ForumReplyDepth'\n    - $ref: '#/components/parameters/Avatars'\n\n    get:\n      description: Gets the replies to a post.\n      tags: [forum, forum-post, paginated, avatars]\n      operationId: forumPostGetReplies\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ForumPostList' }}}\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /forum/post/{id}/revision:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n    - $ref: '#/components/parameters/Cursor'\n    - $ref: '#/components/parameters/Limit'\n    - $ref: '#/components/parameters/Avatars'\n\n    get:\n      description: Gets the update/revision history of a post.\n      tags: [forum, forum-post, paginated, avatars]\n      operationId: forumPostRevisionGetHistory\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/RevisionHistory' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /forum/post/{id}/revision/{revision}:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n    - $ref: '#/components/parameters/Revision'\n\n    get:\n      description: Gets the post corresponding to a revision.\n      tags: [forum, forum-post, avatars]\n      operationId: forumPostRevisionGet\n      parameters:\n      - $ref: '#/components/parameters/Avatars'\n      - $ref: '#/components/parameters/ForumPostDetail'\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ForumPost' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    patch:\n      description: Updates the metadata of a revision.\n      tags: [forum, forum-post]\n      operationId: forumPostRevisionUpdateMetadata\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/RevisionPatch' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Resets a forum post to a past revision.\n      tags: [forum, forum-post]\n      operationId: forumPostResetToRevision\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- MODERATION\n\n  /user/{path_type}/{path}/kick:\n    parameters:\n    - $ref: '#/components/parameters/UserPathType'\n    - $ref: '#/components/parameters/UserPath'\n\n    put:\n      description: Kicks a user from a site.\n      tags: [moderation]\n      operationId: moderationKick\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/UserKick' }}}\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /moderation/banned:\n    get:\n      description: Gets the list of users banned from a site.\n      tags: [moderation, paginated]\n      operationId: moderationBanGetList\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/UserBannedList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /user/{path_type}/{path}/ban:\n    parameters:\n    - $ref: '#/components/parameters/UserPathType'\n    - $ref: '#/components/parameters/UserPath'\n\n    get:\n      description: Gets if a user is banned.\n      tags: [moderation]\n      operationId: moderationBanGet\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/UserBanned' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    put:\n      description: Bans a user. Providing `null` for `until` describes a perma-ban.\n      tags: [moderation]\n      operationId: moderationBan\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/UserBan' }}}\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Unbans a user, if they were banned to begin with.\n      tags: [moderation]\n      operationId: moderationUnban\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- CATEGORY\n\n  /category:\n    get:\n      description: Gets the list of categories on a site.\n      tags: [category]\n      operationId: categoryGetList\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/CategoryList' }}}\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /category/default:\n    get:\n      description: Gets the default category.\n      tags: [category]\n      operationId: categoryDefaultGet\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/CategoryDefault' }}}\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    patch:\n      description: Update (patch) the default category.\n      tags: [category]\n      operationId: categoryDefaultPatch\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/CategoryDefaultPatch' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /category/id/{id}:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n\n    get:\n      description: Gets a category.\n      tags: [category]\n      operationId: categoryGet\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/Category' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    patch:\n      description: Update (patch) a category.\n      tags: [category]\n      operationId: categoryPatch\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/CategoryPatch' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  # -- SITE\n\n  /site/settings:\n    get:\n      description: Gets the site's settings.\n      tags: [site]\n      operationId: siteSettingsGet\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/SiteSettings' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    patch:\n      description: Update (patch) the site's settings.\n      tags: [site]\n      operationId: siteSettingsPatch\n      security:\n      - AccountSession: []\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/SiteSettingsPatch' }}}\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /site/application:\n    parameters:\n    - $ref: '#/components/parameters/Cursor'\n    - $ref: '#/components/parameters/Limit'\n\n    get:\n      description: Gets the site's pending applications.\n      tags: [site, paginated]\n      operationId: siteApplicationGetList\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/ApplicationList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /site/application/{id}:\n    parameters:\n    - $ref: '#/components/parameters/ID'\n\n    get:\n      description: Gets an application.\n      tags: [site]\n      operationId: siteApplicationGet\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/Application' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    post:\n      description: Accepts an application.\n      tags: [site]\n      operationId: siteApplicationAccept\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Rejects an application.\n      tags: [site]\n      operationId: siteApplicationReject\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /site/backup:\n    get:\n      description: Gets a backup of the site.\n      tags: [site, not-json]\n      operationId: siteBackupGet\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/octet-stream: {} }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /site/create:\n    post:\n      description: Creates a new site.\n      tags: [site]\n      operationId: siteCreate\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/CreateSiteSettings' }}}\n      security:\n      - AccountSession: []\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /site/request-deletion:\n    post:\n      description: \u003e\n        Starts the deletion process for the site.\n        Requires additional email validation for the process to complete.\n      tags: [site]\n      operationId: siteRequestDeletion\n      security:\n      - AccountSession: []\n      responses:\n        202: { $ref: '#/components/responses/Accepted' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /site/notification:\n    get:\n      description: Gets the site's current notifications.\n      tags: [site]\n      operationId: siteNotificationGet\n      security:\n      - AccountSession: []\n      responses:\n        200:\n          description: OK\n          content: { application/json: { schema: { $ref: '#/components/schemas/NotificationList' }}}\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n    delete:\n      description: Dismisses all of the site's notifications.\n      tags: [site]\n      operationId: siteNotificationDismissAll\n      security:\n      - AccountSession: []\n      responses:\n        200: { $ref: '#/components/responses/OK' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /site/newsletter:\n    post:\n      description: Sends a site newsletter.\n      tags: [site]\n      operationId: siteNewsletterSend\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/SiteNewsletter' }}}\n      security:\n      - AccountSession: []\n      responses:\n        201: { $ref: '#/components/responses/Created' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\n  /site/transfer:\n    post:\n      description: Transfers the site master-admin status to another user.\n      tags: [site]\n      operationId: siteTransfer\n      requestBody:\n        required: true\n        content: { application/json: { schema: { $ref: '#/components/schemas/SiteTransfer' }}}\n      security:\n      - AccountSession: []\n      responses:\n        202: { $ref: '#/components/responses/Accepted' }\n        4XX: { $ref: '#/components/responses/APIRequestError' }\n        500: { $ref: '#/components/responses/UnexpectedError' }\n\ncomponents:\n\n  parameters:\n\n    ID:\n      description: An integer which points to a resource.\n      name: id\n      in: path\n      required: true\n      schema: { $ref: '#/components/schemas/Reference' }\n\n    Site:\n      description: The name of a site.\n      name: site\n      in: path\n      required: true\n      schema: { type: string }\n\n    Limit:\n      description: Specifies how many entries a paginated response should return in a single page.\n      name: limit\n      in: query\n      schema: { type: integer, minimum: 1, maximum: 200, default: 20 }\n\n    Cursor:\n      description: Specifies which page a paginated response should return.\n      name: cursor\n      in: query\n      schema: { type: integer, minimum: 1, default: 1 }\n\n    PageType:\n      description: \u003e\n        Specifies what data to retrieve from the page.\n        Default is to retrieve no data.\n      name: type\n      in: query\n      schema:\n        type: string\n        enum: [all, metadata-html, metadata, wikitext, html, syntaxtree, none]\n        default: none\n\n    PagePathType:\n      description: Specifies whether to find a page by its ID or slug.\n      name: path_type\n      in: path\n      required: true\n      schema: { type: string, enum: [id, slug] }\n\n    PagePath:\n      description: Specifies the ID or slug to be used to identify a page.\n      name: path\n      in: path\n      required: true\n      schema: { oneOf: [\n        { title: path, $ref: '#/components/schemas/Slug' },\n        { title: id,   $ref: '#/components/schemas/Reference' }\n      ]}\n\n    UserDetailsType:\n      description: Specifies the level of detail requested for a user.\n      name: detail\n      in: query\n      schema: { type: string, enum: [identity, info, profile], default: identity }\n\n    UserPathType:\n      description: Specifies whether to find a user by their ID or name.\n      name: path_type\n      in: path\n      required: true\n      schema: { type: string, enum: [id, slug] }\n\n    UserPath:\n      description: Specifies the ID or name to be used to identify a user.\n      name: path\n      in: path\n      required: true\n      schema: { oneOf: [\n        { title: name, $ref: '#/components/schemas/Username' },\n        { title: id,   $ref: '#/components/schemas/Reference' }\n      ]}\n\n    MessageDetail:\n      description: Specifies the level of detail requested for a message.\n      name: detail\n      in: query\n      schema: { type: string, enum: [with-html, metadata], default: metadata }\n\n    MessageArchived:\n      description: Specifies if the request should only return archived messages.\n      name: archived\n      in: query\n      schema: { type: boolean, default: false }\n\n    ForumPostDetail:\n      description: Specifies the level of detail desired for a requested post.\n      name: detail\n      in: query\n      schema: { type: string, enum: [none, metadata, with-html, full], default: none }\n\n    ForumDeletionType:\n      description: Specifies thread/post deletion should result in permanent deletion rather than archival.\n      name: permanent\n      in: query\n      schema: { type: boolean, default: false }\n\n    ForumReplyDepth:\n      description: Specifies the maximum number of replies (sub-posts) included with any retrieved post.\n      name: depth\n      in: query\n      schema: { type: integer, minimum: 0, default: 0 }\n\n    Avatars:\n      description: \u003e\n        Endpoints that may return user details will have those details sent with 16x16 avatars.\n        These are meant for display on a frontend.\n        This parameter allows you to disable this behavior if you do not need the avatars.\n      name: avatars\n      in: query\n      schema: { type: boolean, default: true }\n\n    Revision:\n      description: Specifies a particular revision.\n      name: revision\n      in: path\n      required: true\n      schema: { $ref: '#/components/schemas/Reference' }\n\n  responses:\n\n    # Generic Responses\n\n    OK:              { description: OK }               # 200\n    Created:         { description: Created }          # 201\n    Accepted:        { description: Accepted }         # 202\n    UnexpectedError: { description: Unexpected Error } # 500\n\n    # Errors\n\n    APIRequestError:\n      description: API Request Error\n      content: { application/json: { schema: { $ref: '#/components/schemas/APIError' }}}\n\n    # Normal Responses\n\n    RegeneratedSession:\n      description: OK\n      content: { application/json: { schema: { $ref: '#/components/schemas/CSRF' }}}\n      headers:\n        Set-Cookie:\n          description: \u003e\n            Sets the user's session cookie.\n            This cookie must be sent with subsequent requests to authorize actions.\n          schema: { type: string }\n\n    UserGet:\n      description: OK\n      content: { application/json: { schema: { oneOf: [\n        $ref: '#/components/schemas/UserIdentity',\n        $ref: '#/components/schemas/UserInfo',\n        $ref: '#/components/schemas/UserProfile'\n      ]}}}\n\n    PageGet:\n      description: OK\n      content: { application/json: { schema: { oneOf: [\n        $ref: '#/components/schemas/Page',\n        $ref: '#/components/schemas/WikitextObject',\n        $ref: '#/components/schemas/HTMLObject',\n        $ref: '#/components/schemas/FTMLSyntaxTree'\n      ]}}}\n\n  schemas:\n\n    # -- ERRORS\n\n    APIError:\n      type: object\n      required: [error]\n      properties:\n        error: { type: string }\n\n    # # -- BASIC\n\n    Paginated:\n      description: Describes the pagination property present with all paginated responses.\n      type: object\n      required: [pagination]\n      properties:\n        pagination:\n          type: object\n          required: [cursor, limit, pages]\n          properties:\n            cursor: { type: integer, minimum: 1, default: 1 }\n            limit:  { type: integer, minimum: 1, maximum: 200, default: 20 }\n            pages:  { type: integer, minimum: 1, default: 1 }\n\n    ReferenceTypes:\n      type: string\n      enum:\n      - user\n      - page\n      - message\n      - file\n      - report\n      - abuse\n      - forum-group\n      - forum-category\n      - forum-thread\n      - forum-post\n\n    ReferenceTypesObject:\n      type: object\n      required: [type]\n      properties:\n        type: { $ref: '#/components/schemas/ReferenceTypes' }\n\n    Slug:\n      description: \u003e\n        Describes a page _slug_, a string consisting of an optional category and name.\n        It is formatted as `category:name` if a category is included.\n        If a category is not included, it is simply `name`.\n      type: string\n      format: slug\n      examples:\n      - 'category:page'\n\n    SlugObject:\n      type: object\n      required: [slug]\n      properties:\n        slug: { $ref: '#/components/schemas/Slug' }\n\n    AvatarURL:\n      title: Avatar URL\n      type: string\n      examples:\n      - https://wikijump.com/files--static/media/default-avatar.png\n\n    AvatarURLObject:\n      type: object\n      required: [avatar]\n      properties:\n        avatar: { $ref: '#/components/schemas/AvatarURL' }\n\n    SiteName:\n      title: Site Name\n      type: string\n      examples:\n      - mywiki\n\n    Username:\n      title: Username\n      type: string\n      examples:\n      - ExampleUsername\n\n    UsernameObject:\n      type: object\n      required: [username]\n      properties:\n        username: { $ref: '#/components/schemas/Username' }\n\n    Email:\n      title: Email\n      type: string\n      format: email\n\n    EmailObject:\n      type: object\n      required: [email]\n      properties:\n        email: { $ref: '#/components/schemas/Email' }\n\n    Password:\n      title: Password\n      type: string\n      format: password\n\n    PasswordObject:\n      type: object\n      required: [password]\n      properties:\n        password: { $ref: '#/components/schemas/Password' }\n\n    Reference:\n      title: Reference\n      description: An integer that uniquely points to a resource.\n      type: integer\n      examples:\n      - 1234\n\n    FileData:\n      description: A binary chunk of data representing a file.\n      title: Binary Data\n      type: string\n      contentMediaType: application/octet-stream\n      examples:\n      - FFD8FFDB00430006040506050406060506070706...\n\n    Base64:\n      description: A base64 encoded chunk of data.\n      type: string\n      format: byte\n      examples:\n      - Y3VyaW91cyBhcmVuJ3QgeW91\n\n    Wikitext:\n      description: A chunk of text in FTML format.\n      externalDocs:\n        url: https://github.com/scpwiki/wikijump/tree/develop/ftml\n      type: string\n      format: ftml\n      examples:\n      - '[[div]]/some wikitext/[[/div]]'\n\n    WikitextObject:\n      type: object\n      required: [wikitext]\n      properties: { wikitext: { $ref: '#/components/schemas/Wikitext' }}\n\n    HTML:\n      description: A chunk of text in HTML format.\n      type: string\n      format: html\n      examples:\n      - '\u003cdiv\u003e\u003ci\u003esome html\u003c/i\u003e\u003c/div\u003e'\n\n    HTMLObject:\n      type: object\n      required: [html]\n      properties: { html: { $ref: '#/components/schemas/HTML' } }\n\n\n    # -- QUERY\n\n    # -- AUTH\n\n    LoginSpecifier:\n      oneOf:\n      - { $ref: '#/components/schemas/Email' }\n      - { $ref: '#/components/schemas/Username' }\n\n    LoginOptions:\n      type: object\n      required: [login, password]\n      properties:\n        login:    { $ref: '#/components/schemas/LoginSpecifier' }\n        password: { $ref: '#/components/schemas/Password'  }\n        remember: { type: boolean }\n\n    CSRF:\n      type: object\n      required: [csrf]\n      properties:\n        csrf: { type: string }\n\n    SessionState:\n      type: object\n      required: [sessionValid, authed]\n      properties:\n        sessionValid: { type: boolean }\n        authed:       { type: boolean }\n\n    # -- ACCOUNT\n\n    UpdateEmail:\n      type: object\n      required: [oldEmail, newEmail]\n      properties:\n        oldEmail: { $ref: '#/components/schemas/Email' }\n        newEmail: { $ref: '#/components/schemas/Email' }\n\n    UpdatePassword:\n      type: object\n      required: [oldPassword, newPassword]\n      properties:\n        oldPassword: { $ref: '#/components/schemas/Password' }\n        newPassword: { $ref: '#/components/schemas/Password' }\n\n    RegisterOptions:\n      type: object\n      required: [username, email, password]\n      properties:\n        username: { $ref: '#/components/schemas/Username' }\n        email:    { $ref: '#/components/schemas/Email' }\n        password: { $ref: '#/components/schemas/Password' }\n\n    AccountSettings:\n      description: Private account settings that can govern some of Wikijump's behavior.\n      type: object\n      required: [acceptsInvites, language, allowMessages]\n      properties:\n        acceptsInvites: { type: boolean }\n        language:       { type: string }\n        allowMessages:  { type: string, enum: [registered, co-members, nobody] }\n\n    AccountSettingsPatch:\n      description: Private account settings that can govern some of Wikijump's behavior.\n      type: object\n      properties:\n        acceptsInvites: { type: boolean }\n        language:       { type: string }\n        allowMessages:  { type: string, enum: [registered, co-members, nobody] }\n\n    # -- NOTIFICATION\n\n    Notification:\n      description: Describes a notification intended to inform a user of some sort of event.\n      type: object\n      required: [level, type, name, source, time, payload]\n      properties:\n        level:  { type: string, enum: [trivial, info, important, error] }\n        type:   { type: string, enum: [account, pm, site, forum, page, other] }\n        name:   { type: string }\n        source: { type: string }\n        time:   { type: string, format: date-time }\n        payload:\n          required: [message]\n          properties:\n            message: { type: string }\n\n    NotificationList:\n      type: object\n      required: [notifications]\n      properties:\n        notifications:\n          type: array\n          uniqueItems: true\n          items: { $ref: '#/components/schemas/Notification' }\n\n    # -- USER\n\n    UserRole:\n      description: Describes a user's administrative role and membership status.\n      type: string\n      enum: [guest, registered, member, moderator, admin, master-admin, platform-admin]\n\n    UserIdentity:\n      description: Basic level of information needed to describe a user.\n      type: object\n      required: [id, username, karma, tinyavatar, role]\n      properties:\n        id:         { $ref: '#/components/schemas/Reference' }\n        username:   { $ref: '#/components/schemas/Username' }\n        tinyavatar: { $ref: '#/components/schemas/Base64', nullable: true}\n        karma:      { type: integer, minimum: 0, maximum: 5 }\n        role:       { $ref: '#/components/schemas/UserRole' }\n\n    UserInfo:\n      description: Describes a user in an intermediate amount of detail.\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/UserIdentity'\n      - type: object\n        required: [about, avatar, signature, since, lastActive]\n        properties:\n          about:      { type: [string, 'null'] }\n          avatar:     { type: [string, 'null'], format: url }\n          signature:  { $ref: '#/components/schemas/HTML', nullable: true }\n          since:      { type: string, format: date-time }\n          lastActive: { type: string, format: date-time }\n\n    UserProfile:\n      description: Fully describes a user and their personalization preferences.\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/UserInfo'\n      - type: object\n        required: [realname, pronouns, birthday, location, links]\n        properties:\n          realname:  { type: [string, 'null'],              }\n          pronouns:  { type: [string, 'null'],              }\n          birthday:  { type: [string, 'null'], format: date }\n          location:  { type: [string, 'null'],              }\n          links:\n            type: object\n            uniqueItems: true\n            additionalProperties:\n              type: string\n              format: url\n\n    UserProfilePatch:\n      description: Partial object that is used to update a user's profile.\n      type: object\n      properties:\n        about:     { type: [string, 'null'],                                 }\n        signature: { $ref: '#/components/schemas/Wikitext', nullable: true }\n        realname:  { type: [string, 'null'],                                 }\n        pronouns:  { type: [string, 'null'],                                 }\n        birthday:  { type: [string, 'null'], format: date                    }\n        location:  { type: [string, 'null'],                                 }\n        links:\n          type: [object, 'null']\n          uniqueItems: true\n          additionalProperties:\n            type: string\n            format: url\n\n    UserBlockedList:\n      type: object\n      required: [users]\n      properties:\n        users:\n          type: array\n          uniqueItems: true\n          items: { $ref: '#/components/schemas/UserIdentity' }\n\n    UserBlocked:\n      type: object\n      required: [blocked]\n      properties:\n        blocked: { type: boolean }\n\n    UserKick:\n      type: object\n      required: [reason]\n      properties:\n        reason: { type: string }\n\n    UserBan:\n      type: object\n      required: [until, reason]\n      properties:\n        until:  { type: [string, 'null'], format: date-time }\n        reason: { type: string }\n\n    UserBanned:\n      type: object\n      required: [user, when, until, reason]\n      properties:\n        user:   { $ref: '#/components/schemas/UserIdentity' }\n        when:   { type: string, format: date-time }\n        until:  { type: [string, 'null'], format: date-time }\n        reason: { type: string }\n\n    UserBannedList:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Paginated'\n      - type: object\n        required: [banned]\n        properties:\n          banned:\n            type: array\n            uniqueItems: true\n            items: { $ref: '#/components/schemas/UserBanned' }\n\n    # -- MEMBERSHIP\n\n    Membership:\n      type: object\n      required: [site, role]\n      properties:\n        site: { $ref: '#/components/schemas/SiteName' }\n        role: { $ref: '#/components/schemas/UserRole' }\n\n    MembershipStatus:\n      type: object\n      required: [status]\n      properties:\n        status:\n          $ref: '#/components/schemas/Membership'\n          nullable: true\n\n    MembershipList:\n      type: object\n      required: [memberships]\n      properties:\n        memberships:\n          type: array\n          uniqueItems: true\n          items: { $ref: '#/components/schemas/Membership' }\n\n    MembershipRole:\n      type: object\n      required: [role]\n      properties:\n        role: { type: string, enum: [member, moderator, admin] }\n\n    Application:\n      type: object\n      required: [id, sender, message, time]\n      properties:\n        id:      { $ref: '#/components/schemas/Reference' }\n        sender:  { $ref: '#/components/schemas/UserIdentity' }\n        message: { type: string }\n        time:    { type: string, format: date-time }\n\n    ApplicationList:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Paginated'\n      - type: object\n        required: [applications]\n        properties:\n          applications:\n            type: array\n            uniqueItems: true\n            items: { $ref: '#/components/schemas/Application' }\n\n    ApplicationSend:\n      type: object\n      required: [message]\n      properties:\n        message: { type: string }\n\n    ApplicationSendList:\n      type: object\n      required: [applications]\n      properties:\n        applications:\n          type: array\n          uniqueItems: true\n          items:\n            type: object\n            required: [site, message]\n            properties:\n              site:    { $ref: '#/components/schemas/SiteName' }\n              message: { type: string }\n\n    Invite:\n      type: object\n      required: [sender, site, message, time]\n      properties:\n        sender:   { $ref: '#/components/schemas/UserIdentity' }\n        site:     { $ref: '#/components/schemas/SiteName' }\n        message:  { type: string }\n        time:     { type: string, format: date-time }\n\n    InviteList:\n      type: object\n      required: [invites]\n      properties:\n        invites:\n          type: array\n          uniqueItems: true\n          items: { $ref: '#/components/schemas/Invite' }\n\n    InviteSend:\n      type: object\n      required: [site, message]\n      properties:\n        site:    { $ref: '#/components/schemas/SiteName' }\n        message: { type: string }\n\n    # -- PAGE\n\n    FTMLSyntaxTree:\n      description: Represents an FTML syntax tree.\n      externalDocs:\n        url: https://github.com/scpwiki/wikijump/blob/develop/ftml/docs/Serialization.md\n      type: object\n      format: ftmltree\n      additionalProperties: true\n\n    PageCreateOptions:\n      type: object\n      required: [slug]\n      properties:\n        slug:     { $ref: '#/components/schemas/Slug' }\n        title:    { type: string }\n        wikitext: { $ref: '#/components/schemas/Wikitext' }\n\n    Page:\n      type: object\n      required: [\n        id, slug, category, parent, children, title, tags, score, revision,\n        created, creator, updated, updater\n      ]\n      properties:\n        id:       { $ref: '#/components/schemas/Reference' }\n        slug:     { $ref: '#/components/schemas/Slug' }\n        category: { $ref: '#/components/schemas/Reference' }\n        parent:   { $ref: '#/components/schemas/Slug', nullable: true }\n        children: { type: array, items: { $ref: '#/components/schemas/Slug' }}\n        title:    { type: string }\n        tags:     { $ref: '#/components/schemas/TagList' }\n        score:    { type: number }\n        revision: { type: integer }\n        created:  { type: string,  format: date-time }\n        creator:  { $ref: '#/components/schemas/UserIdentity' }\n        updated:  { type: string,  format: date-time }\n        updater:  { $ref: '#/components/schemas/UserIdentity' }\n        # optional\n        html:     { $ref: '#/components/schemas/HTML' }\n        wikitext: { $ref: '#/components/schemas/Wikitext' }\n\n    PagePatch:\n      type: object\n      properties:\n        title:    { type: string }\n        wikitext: { $ref: '#/components/schemas/Wikitext' }\n\n    # -- REVISION\n\n    Revision:\n      type: object\n      required: [revision, updated, updater, hidden, message, flags]\n      properties:\n        revision: { type: integer }\n        updated:  { type: string,  format: date-time }\n        updater:  { $ref: '#/components/schemas/UserIdentity' }\n        hidden:   { type: boolean }\n        message:  { type: string }\n        flags:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n            enum: [created, content, file, title, revert, tag, slug]\n\n    RevisionPatch:\n      type: object\n      properties:\n        hidden:  { type: boolean }\n        message: { type: string }\n\n    RevisionHistory:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Paginated'\n      - type: object\n        required: [revisions, history]\n        properties:\n          revisions: { type: integer }\n          history:   { type: array, uniqueItems: true, items: { $ref: '#/components/schemas/Revision' }}\n\n    # -- TAG\n\n    TagList:\n      type: array\n      uniqueItems: true\n      items: { type: string }\n\n    TagListObject:\n      type: object\n      required: [tags]\n      properties:\n        tags: { $ref: '#/components/schemas/TagList' }\n\n    # -- VOTE\n\n    CastVotePlus:\n      type: integer\n      enum: [0, 1]\n\n    CastVotePlusMinus:\n      type: integer\n      enum: [-1, 0, 1]\n\n    CastVoteStar:\n      type: integer\n      enum: [1, 2, 3, 4, 5]\n\n    CastVote:\n      oneOf:\n      - $ref: '#/components/schemas/CastVotePlusMinus'\n      - $ref: '#/components/schemas/CastVoteStar'\n\n    CastVoteObject:\n      type: object\n      required: [vote]\n      properties:\n        vote: { $ref: '#/components/schemas/CastVote' }\n\n    CastVoteStatus:\n      type: object\n      required: [vote]\n      properties:\n        vote:\n          $ref: '#/components/schemas/CastVote'\n          nullable: true\n\n    Score:\n      description: |\n        Describes the score/rating of a page.\n\n        \u003e Wikijump has three different ways of rating a page:\n        \u003e - `plus`\n        \u003e - `plusminus`\n        \u003e - `star`\n        \u003e\n        \u003e You will find the format used in the `format` property.\n      type: object\n      oneOf:\n      - type: object\n        required: [format, score, count, totals]\n        properties:\n          format: { type: string, const: plus }\n          score:  { type: number }\n          count:  { type: integer }\n          totals:\n            type: object\n            required: ['0', '1']\n            properties:\n              0:  { type: integer }\n              1:  { type: integer }\n      - type: object\n        required: [format, score, count, totals]\n        properties:\n          format: { type: string, const: plusminus }\n          score:  { type: number }\n          count:  { type: integer }\n          totals:\n            type: object\n            required: ['-1', '0', '1']\n            properties:\n              -1: { type: integer }\n              0:  { type: integer }\n              1:  { type: integer }\n      - type: object\n        required: [format, score, count, totals]\n        properties:\n          format: { type: string, const: star }\n          score:  { type: number }\n          count:  { type: integer }\n          totals:\n            type: object\n            required: ['1', '2', '3', '4', '5']\n            properties:\n              1: { type: integer }\n              2: { type: integer }\n              3: { type: integer }\n              4: { type: integer }\n              5: { type: integer }\n\n    Vote:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/UserIdentity'\n      - oneOf:\n        - type: object\n          required: [format, time, vote]\n          properties:\n            format: { type: string, const: plus }\n            time:   { type: string, format: date-time }\n            vote:   { $ref: '#/components/schemas/CastVotePlus' }\n        - type: object\n          required: [format, time, vote]\n          properties:\n            format: { type: string, const: plusminus }\n            time:   { type: string, format: date-time }\n            vote:   { $ref: '#/components/schemas/CastVotePlusMinus' }\n        - type: object\n          required: [format, time, vote]\n          properties:\n            format: { type: string, const: star }\n            time:   { type: string, format: date-time }\n            vote:   { $ref: '#/components/schemas/CastVoteStar' }\n\n    VoterList:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Paginated'\n      - type: object\n        required: [score, voters]\n        properties:\n          score: { $ref: '#/components/schemas/Score' }\n          voters:\n            type: array\n            uniqueItems: true\n            items: { $ref: '#/components/schemas/Vote' }\n\n    # -- FILE\n\n    Mime:\n      description: A file MIME type and description.\n      type: object\n      required: [type, description]\n      properties:\n        type:        { type: string }\n        description: { type: string }\n\n    FileMetadata:\n      type: object\n      required: [id, size, comment, mime, uploader, uploaded, url]\n      properties:\n        id:       { $ref: '#/components/schemas/Reference' }\n        size:     { type: integer, examples: [20kb] }\n        comment:  { type: string }\n        mime:     { $ref: '#/components/schemas/Mime' }\n        uploader: { $ref: '#/components/schemas/UserIdentity' }\n        uploaded: { type: string, format: date-time }\n        url:      { type: string, format: url }\n\n    FileMetadataList:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Paginated'\n      - type: object\n        required: [files]\n        properties:\n          files:\n            type: array\n            items: { $ref: '#/components/schemas/FileMetadata' }\n\n    FileSiteMetadata:\n      type: object\n      required: [max, used, count, available]\n      properties:\n        max:       { type: integer }\n        used:      { type: integer }\n        count:     { type: integer }\n        available: { type: integer }\n\n    FileUpload:\n      type: object\n      required: [filename, comment, content]\n      properties:\n        filename: { type: string }\n        comment:  { type: string }\n        content:  { $ref: '#/components/schemas/FileData' }\n\n    # -- REPORT / ABUSE\n\n    ReportSend:\n      type: object\n      required: [reason]\n      properties:\n        reason: { type: string }\n\n    Report:\n      type: object\n      required: [id, sender, reason, time]\n      properties:\n        id:     { $ref: '#/components/schemas/Reference' }\n        target: { $ref: '#/components/schemas/Reference' }\n        sender: { $ref: '#/components/schemas/UserIdentity' }\n        reason: { type: string }\n        time:   { type: string, format: date-time }\n\n    ReportList:\n      type: object\n      required: [reports]\n      properties:\n        reports:\n          type: array\n          uniqueItems: true\n          items: { $ref: '#/components/schemas/Report' }\n\n    # -- MESSAGE\n\n    Message:\n      type: object\n      required: [id, read, time, from, subject]\n      properties:\n        id:       { $ref: '#/components/schemas/Reference' }\n        read:     { type: boolean }\n        archived: { type: boolean }\n        time:     { type: string, format: date-time }\n        from:     { $ref: '#/components/schemas/UserIdentity' }\n        subject:  { type: string }\n        # optional\n        html:     { $ref: '#/components/schemas/HTML' }\n\n    MessageList:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Paginated'\n      - type: object\n        required: [messages]\n        properties:\n          messages:\n            type: array\n            uniqueItems: true\n            items: { $ref: '#/components/schemas/Message' }\n\n    MessageSend:\n      type: object\n      required: [subject, wikitext]\n      properties:\n        subject:  { type: string }\n        wikitext: { $ref: '#/components/schemas/Wikitext' }\n\n    MessagePatch:\n      type: object\n      properties:\n        read:     { type: boolean }\n        archived: { type: boolean }\n\n    #-- FORUM\n\n    ForumSortingTypes:\n      type: string\n      enum: [newest, oldset]\n\n    ForumCreationContext:\n      type: object\n      required: [by, time]\n      properties:\n        by:   { $ref: '#/components/schemas/UserIdentity' }\n        time: { type: string, format: date-time }\n\n    Forum:\n      type: object\n      required: [threadCount, postCount, groups]\n      properties:\n        threadCount: { type: integer }\n        postCount:   { type: integer }\n        groups:\n          type: array\n          uniqueItems: true\n          items: { $ref: '#/components/schemas/ForumGroup' }\n\n    ForumGroup:\n      type: object\n      required: [id, title, summary, categories]\n      properties:\n        id:      { $ref: '#/components/schemas/Reference' }\n        title:   { type: string }\n        summary: { type: string }\n        categories:\n          type: array\n          uniqueItems: true\n          items: { $ref: '#/components/schemas/ForumCategory' }\n\n    ForumGroupPatch:\n      type: object\n      properties:\n        title:   { type: string }\n        summary: { type: string }\n        order:\n          type: array\n          uniqueItems: true\n          items: { $ref: '#/components/schemas/Reference' }\n\n    ForumCategory:\n      type: object\n      required: [id, group, title, summary, threadCount, postCount, last]\n      properties:\n        id:          { $ref: '#/components/schemas/Reference' }\n        group:       { $ref: '#/components/schemas/Reference' }\n        title:       { type: string }\n        summary:     { type: string }\n        threadCount: { type: integer }\n        postCount:   { type: integer }\n        last:        { $ref: '#/components/schemas/ForumCreationContext' }\n        permissions:\n          type: [object, 'null']\n          required: [createPosts, createThreads, edit]\n          properties:\n            createPosts:   { type: array, items: { type: string, enum: [guest, registered, member] } }\n            createThreads: { type: array, items: { type: string, enum: [guest, registered, member] } }\n            edit:          { type: array, items: { type: string, enum: [guest, registered, member, author] } }\n\n    ForumCategoryCreate:\n      type: object\n      required: [title]\n      properties:\n        title:   { type: string }\n        summary: { type: string }\n\n    ForumCategoryPatch:\n      type: object\n      properties:\n        title:   { type: string }\n        summary: { type: string }\n\n    ForumThread:\n      type: object\n      required: [id, category, group, title, stickied, locked, postCount, created, last]\n      properties:\n        id:        { $ref: '#/components/schemas/Reference' }\n        category:  { $ref: '#/components/schemas/Reference' }\n        group:     { $ref: '#/components/schemas/Reference' }\n        title:     { type: string }\n        stickied:  { type: boolean }\n        locked:    { type: boolean }\n        postCount: { type: integer }\n        created:   { $ref: '#/components/schemas/ForumCreationContext' }\n        last:      { $ref: '#/components/schemas/ForumCreationContext' }\n\n    ForumThreadCreate:\n      type: object\n      required: [title]\n      properties:\n        title:    { type: string }\n        summary:  { type: string }\n        stickied: { type: boolean }\n        locked:   { type: boolean }\n\n    ForumThreadPatch:\n      type: object\n      properties:\n        title:    { type: string }\n        summary:  { type: string }\n        stickied: { type: boolean }\n        locked:   { type: boolean }\n\n    ForumPost:\n      type: object\n      required: [id, thread, category, group, parent, created, revision, replyCount]\n      properties:\n        id:         { $ref: '#/components/schemas/Reference' }\n        category:   { $ref: '#/components/schemas/Reference' }\n        group:      { $ref: '#/components/schemas/Reference' }\n        thread:     { $ref: '#/components/schemas/Reference' }\n        parent:     { $ref: '#/components/schemas/Reference', nullable: true }\n        created:    { $ref: '#/components/schemas/ForumCreationContext' }\n        revision:   { type: integer}\n        replyCount: { type: integer }\n        # optional\n        html:      { $ref: '#/components/schemas/HTML' }\n        wikitext:  { $ref: '#/components/schemas/Wikitext' }\n        replies:   { $ref: '#/components/schemas/ForumPostList' }\n\n    ForumPostCreate:\n      type: object\n      required: [title, wikitext]\n      properties:\n        title:    { type: string }\n        wikitext: { $ref: '#/components/schemas/Wikitext' }\n\n    ForumPostPatch:\n      type: object\n      properties:\n        title:    { type: string }\n        wikitext: { $ref: '#/components/schemas/Wikitext' }\n\n    ForumGroupList:\n      type: object\n      required: [groups]\n      properties:\n        groups:\n          type: array\n          uniqueItems: true\n          items: { $ref: '#/components/schemas/ForumGroup' }\n\n    ForumCategoryList:\n      type: object\n      required: [categories]\n      properties:\n        categories:\n          type: array\n          uniqueItems: true\n          items: { $ref: '#/components/schemas/ForumCategory' }\n\n    ForumThreadList:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Paginated'\n      - type: object\n        required: [order, threads]\n        properties:\n          order: { $ref: '#/components/schemas/ForumSortingTypes' }\n          threads:\n            type: array\n            uniqueItems: true\n            items: { $ref: '#/components/schemas/ForumThread' }\n\n    ForumPostList:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Paginated'\n      - type: object\n        required: [order, posts]\n        properties:\n          order: { $ref: '#/components/schemas/ForumSortingTypes' }\n          posts:\n            type: array\n            uniqueItems: true\n            items: { $ref: '#/components/schemas/ForumPost' }\n\n    # -- CATEGORY\n\n    Category:\n      type: object\n      required: [id, name, license, ratings, discussions, autonumber, permissions]\n      properties:\n        id:          { $ref: '#/components/schemas/Reference' }\n        name:        { type: string }\n        license:     { type: [string, 'null'], }\n        ratings:     { type: [string, 'null'], enum: [disabled, plus, plusminus, star] }\n        discussions: { type: [boolean, 'null'] }\n        autonumber:  { type: boolean, default: false }\n        permissions:\n          type: [object, 'null']\n          required: [createPages, renamePages, deletePages, uploadFiles, changeFiles, showOptions, edit]\n          properties:\n            createPages: { type: array, items: { type: string, enum: [guest, registered, member] } }\n            renamePages: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            deletePages: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            uploadFiles: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            changeFiles: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            showOptions: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            edit:        { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n\n    CategoryDefault:\n      type: object\n      required: [id, name, license, ratings, discussions, autonumber, permissions]\n      properties:\n        id:          { $ref: '#/components/schemas/Reference' }\n        name:        { type: string, const: _default }\n        license:     { type: string }\n        ratings:     { type: string, enum: [disabled, plus, plusminus, star] }\n        discussions: { type: boolean }\n        autonumber:  { type: boolean, const: false }\n        permissions:\n          type: object\n          required: [createPages, renamePages, deletePages, uploadFiles, changeFiles, showOptions, edit]\n          properties:\n            createPages: { type: array, items: { type: string, enum: [guest, registered, member] } }\n            renamePages: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            deletePages: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            uploadFiles: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            changeFiles: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            showOptions: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            edit:        { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n\n    CategoryPatch:\n      type: object\n      properties:\n        license:     { type: [string, 'null'] }\n        ratings:     { type: [string, 'null'], enum: [disabled, plus, plusminus, star] }\n        discussions: { type: [boolean, 'null'] }\n        autonumber:  { type: boolean, default: false }\n        permissions:\n          type: [object, 'null']\n          properties:\n            createPages: { type: array, items: { type: string, enum: [guest, registered, member] } }\n            renamePages: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            deletePages: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            uploadFiles: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            changeFiles: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            showOptions: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            edit:        { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n\n    CategoryDefaultPatch:\n      type: object\n      properties:\n        license:     { type: string }\n        ratings:     { type: string, enum: [disabled, plus, plusminus, star] }\n        discussions: { type: boolean }\n        autonumber:  { type: boolean, const: false }\n        permissions:\n          type: object\n          properties:\n            createPages: { type: array, items: { type: string, enum: [guest, registered, member] } }\n            renamePages: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            deletePages: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            uploadFiles: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            changeFiles: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            showOptions: { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n            edit:        { type: array, items: { type: string, enum: [guest, registered, member, creator] } }\n\n    CategoryList:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Paginated'\n      - type: object\n        required: [categories]\n        properties:\n          categories:\n            type: array\n            uniqueItems: true\n            items: { $ref: '#/components/schemas/Category' }\n\n    # -- SITE\n\n    SiteSettings:\n      type: object\n      required: [general, integrations, security, appearance, forum]\n      properties:\n\n        general:\n          type: object\n          required: [address, title, subtitle, language, description, defaultPage, welcomePage]\n          properties:\n            address:     { type: string }\n            title:       { type: string }\n            subtitle:    { type: string }\n            language:    { type: string }\n            description: { type: string }\n            defaultPage: { $ref: '#/components/schemas/Slug' }\n            welcomePage: { $ref: '#/components/schemas/Slug' }\n\n        integrations:\n          type: object\n          required: [googleAnalytics]\n          properties:\n            googleAnalytics: { type: [string, 'null'] }\n\n        security:\n          type: object\n          oneOf:\n          - type: object\n            required: [policy, cloning, fileHotLinking]\n            properties:\n              policy:         { type: string, const: open }\n              cloning:        { type: boolean }\n              fileHotLinking: { type: boolean }\n          - type: object\n            required: [policy, cloning, fileHotLinking, usersCanApply, sitePassword]\n            properties:\n              policy:         { type: string, const: closed }\n              cloning:        { type: boolean }\n              fileHotLinking: { type: boolean }\n              usersCanApply:  { type: boolean }\n              sitePassword:   { type: string }\n          - type: object\n            required: [policy, usersCanApply, sitePassword, guestDefaultPage, guestHideNav, extraUsers]\n            properties:\n              policy:           { type: string, const: private }\n              usersCanApply:    { type: boolean }\n              sitePassword:     { type: string }\n              guestDefaultPage: { $ref: '#/components/schemas/Slug' }\n              guestHideNav:     { type: boolean }\n              extraUsers:\n                type: array\n                uniqueItems: true\n                items: { $ref: '#/components/schemas/UserIdentity' }\n          required: [guestAllowLinks, userLinkMinKarma]\n          properties:\n            guestAllowLinks:  { type: boolean }\n            userLinkMinKarma: { type: boolean }\n\n        appearance:\n          type: object\n          required: [userKarma, toolbar]\n          properties:\n            userKarma: { type: boolean }\n            toolbar:\n              type: object\n              required: [top, bottom]\n              properties:\n                top:    { type: boolean }\n                bottom: { type: boolean }\n\n        forum:\n          type: object\n          required: [nestingDepth, permissions]\n          properties:\n            nestingDepth: { type: integer }\n            permissions:\n              type: object\n              required: [createPosts, createThreads, edit]\n              properties:\n                createPosts:   { type: array, items: { type: string, enum: [guest, registered, member] } }\n                createThreads: { type: array, items: { type: string, enum: [guest, registered, member] } }\n                edit:          { type: array, items: { type: string, enum: [guest, registered, member, author] } }\n\n    SiteSettingsPatch:\n      type: object\n      properties:\n\n        general:\n          type: object\n          properties:\n            address:     { type: string }\n            title:       { type: string }\n            subtitle:    { type: string }\n            language:    { type: string }\n            description: { type: string }\n            defaultPage: { $ref: '#/components/schemas/Slug' }\n            welcomePage: { $ref: '#/components/schemas/Slug' }\n\n        integrations:\n          type: object\n          properties:\n            googleAnalytics: { type: [string, 'null'] }\n\n        security:\n          type: object\n          oneOf:\n          - type: object\n            properties:\n              policy:         { type: string, const: open }\n              cloning:        { type: boolean }\n              fileHotLinking: { type: boolean }\n          - type: object\n            properties:\n              policy:         { type: string, const: closed }\n              cloning:        { type: boolean }\n              fileHotLinking: { type: boolean }\n              usersCanApply:  { type: boolean }\n              sitePassword:   { type: string }\n          - type: object\n            properties:\n              policy:           { type: string, const: private }\n              usersCanApply:    { type: boolean }\n              sitePassword:     { type: string }\n              guestDefaultPage: { $ref: '#/components/schemas/Slug' }\n              guestHideNav:     { type: boolean }\n              extraUsers:\n                type: array\n                uniqueItems: true\n                items: { $ref: '#/components/schemas/Reference' }\n          properties:\n            guestAllowLinks:  { type: boolean }\n            userLinkMinKarma: { type: boolean }\n\n        appearance:\n          type: object\n          properties:\n            userKarma: { type: boolean }\n            toolbar:\n              type: object\n              properties:\n                top:    { type: boolean }\n                bottom: { type: boolean }\n\n        forum:\n          type: object\n          properties:\n            nestingDepth: { type: integer }\n            permissions:\n              type: object\n              properties:\n                createPosts:   { type: array, items: { type: string, enum: [guest, registered, member] } }\n                createThreads: { type: array, items: { type: string, enum: [guest, registered, member] } }\n                edit:          { type: array, items: { type: string, enum: [guest, registered, member, author] } }\n\n    CreateSiteSettings:\n      type: object\n      required: [address, title, subtitle, language, description, defaultPage, welcomePage, policy]\n      properties:\n        address:     { type: string }\n        title:       { type: string }\n        subtitle:    { type: string }\n        language:    { type: string }\n        description: { type: string }\n        defaultPage: { $ref: '#/components/schemas/Slug' }\n        welcomePage: { $ref: '#/components/schemas/Slug' }\n        policy:      { type: string, enum: [open, closed, private] }\n\n    SiteNewsletter:\n      type: object\n      required: [to, title, wikitext]\n      properties:\n        to:       { type: array, items: { type: string, enum: [member, moderator, admin] }}\n        title:    { type: string }\n        wikitext: { $ref: '#/components/schemas/Wikitext' }\n\n    SiteTransfer:\n      type: object\n      required: [site, current, next]\n      properties:\n        site:    { $ref: '#/components/schemas/SiteName' }\n        current: { $ref: '#/components/schemas/Reference' }\n        next:    { $ref: '#/components/schemas/Reference' }\n\n  securitySchemes:\n    QueryAPIAccess:\n      description: '`/query` API access key.'\n      name: x-api-key\n      type: apiKey\n      in: header\n\n    AccountSession:\n      description: |\n        Session token used to identify users.\n\n        \u003e This cookie is used to obtain the access token needed for requests.\n        It does not immediately grant access.\n      name: WIKIJUMP_SESSION_ID\n      type: apiKey\n      in: cookie\n"
		}
	},
	"Error": "unmarshal: callback: json: cannot unmarshal array into Go struct field Schema.type of type string"
}