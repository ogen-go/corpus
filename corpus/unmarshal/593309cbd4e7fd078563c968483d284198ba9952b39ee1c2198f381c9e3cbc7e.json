{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kubeshop/testkube"
		},
		"file": {
			"name": "testkube.yaml",
			"size": 0,
			"path": "api/v1/testkube.yaml",
			"byteSize": 76377,
			"content": "openapi: 3.0.1\n\ninfo:\n  title: Testkube API\n  description: \"Testkube provides a Kubernetes-native framework for test definition, execution and results\"\n  contact:\n    email: testkube@kubeshop.io\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\n  version: 1.0.0\n\nexternalDocs:\n  description: \"Find out more about testkube\"\n  url: http://testkube.io\n\ntags:\n  - name: api\n    description: \"Testkube API operations\"\n  - name: tests\n    description: \"Tests operations\"\n  - name: executions\n    description: \"Test suites and tests execution operations\"\n  - name: test-suites\n    description: \"Test suites orchestration operations\"\n  - name: labels\n    description: \"Listing all available labels\"\n\npaths:\n  /test-suites:\n    post:\n      tags:\n        - test-suites\n        - api\n      summary: \"Create new test suite\"\n      description: \"Create new test suite action\"\n      operationId: createTestSuite\n      requestBody:\n        description: test details body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestSuiteUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            text/yaml:\n              schema:\n                type: string\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuite\"\n        500:\n          description: \"problem with creating test suite\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      tags:\n        - test-suites\n        - api\n      summary: \"Get all test suites\"\n      description: \"Returns array of test suites\"\n      operationId: listTestSuites\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n        - $ref: \"#/components/parameters/TextSearch\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TestSuite\"\n            text/yaml:\n              schema:\n                type: string\n        500:\n          description: \"problem with getting test suites from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      tags:\n        - test-suites\n        - api\n      summary: \"delete test suites\"\n      description: \"deletes all or labeled test suites\"\n      operationId: deleteTestSuites\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suites/{id}:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test suite\n      tags:\n        - test-suites\n        - api\n      summary: \"Get test suite by ID\"\n      description: \"Returns test suite with given name\"\n      operationId: getTestSuiteByID\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuite\"\n            text/yaml:\n              schema:\n                type: string\n        500:\n          description: \"problem with getting test suite from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    patch:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test suite\n      tags:\n        - test-suites\n        - api\n      summary: \"update test suite\"\n      description: \"update test based on test suite content or git based data\"\n      operationId: updateTestSuite\n      requestBody:\n        description: test suite details body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestSuiteUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuite\"\n        400:\n          description: \"problem with test suite definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    delete:\n      tags:\n        - test-suites\n        - api\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test suite\n      summary: \"delete test suite\"\n      description: \"deletes a test suite\"\n      operationId: deleteTestSuite\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suite-with-executions:\n    get:\n      tags:\n        - test-suites\n        - api\n      summary: \"Get all test suite with executions\"\n      description: \"Returns array of test suite with executions\"\n      operationId: listTestSuiteWithExecutions\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n        - $ref: \"#/components/parameters/ExecutionSelector\"\n        - $ref: \"#/components/parameters/TextSearch\"\n        - $ref: \"#/components/parameters/TestExecutionsStatusFilter\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TestSuiteWithExecution\"\n            text/yaml:\n              schema:\n                type: string\n        500:\n          description: \"problem with getting test suite with executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suite-with-executions/{id}:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test suite\n      tags:\n        - test-suites\n        - api\n      summary: \"Get test suite by ID with execution\"\n      description: \"Returns test suite with given name with execution\"\n      operationId: getTestSuiteByIDWithExecution\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuiteWithExecution\"\n            text/yaml:\n              schema:\n                type: string\n        500:\n          description: \"problem with getting test suite with execution from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suites/{id}/executions:\n    post:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test suite\n        - in: query\n          name: namespace\n          schema:\n            type: string\n          description: kubernetes namespace\n          required: false\n      tags:\n        - api\n        - test-suites\n        - executions\n      summary: \"Starts new test suite execution\"\n      description: \"New test suite execution returns new execution details on successful execution start\"\n      operationId: executeTestSuite\n      requestBody:\n        description: body passed to configure execution\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestSuiteExecutionRequest\"\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuiteExecutionsResult\"\n        400:\n          description: \"problem with request body\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with test suite execution\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test suite\n        - $ref: \"#/components/parameters/PageSize\"\n        - $ref: \"#/components/parameters/PageIndex\"\n        - $ref: \"#/components/parameters/TestExecutionsStatusFilter\"\n        - $ref: \"#/components/parameters/StartDateFilter\"\n        - $ref: \"#/components/parameters/EndDateFilter\"\n      tags:\n        - api\n        - test-suites\n        - executions\n      summary: \"Get all test suite executions\"\n      description: \"Returns array of all available test suite executions\"\n      operationId: listTestSuiteExecutions\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuiteExecutionsResult\"\n        500:\n          description: \"problem with getting test suite executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suites/{id}/executions/{executionID}:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test suite\n        - in: path\n          name: executionID\n          schema:\n            type: string\n          required: true\n          description: ID of the test suite execution\n      tags:\n        - api\n        - test-suites\n        - executions\n      summary: \"Get test suite execution\"\n      description: \"Returns test suite execution with given executionID\"\n      operationId: getTestSuiteExecution\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuiteExecution\"\n        500:\n          description: \"problem with getting test suite executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suite-executions:\n    post:\n      parameters:\n        - in: query\n          name: namespace\n          schema:\n            type: string\n          description: kubernetes namespace\n          required: false\n        - $ref: \"#/components/parameters/Selector\"\n        - $ref: \"#/components/parameters/ConcurrencyLevel\"\n      tags:\n        - api\n        - test-suites\n        - executions\n      summary: \"Starts new test suite executions\"\n      description: \"New test suite executions returns new executions details on successful executions start\"\n      operationId: executeTestSuites\n      requestBody:\n        description: body passed to configure executions\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestSuiteExecutionRequest\"\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TestSuiteExecutionsResult\"\n        400:\n          description: \"problem with request body\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with test suites executions\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    get:\n      tags:\n        - executions\n        - api\n      summary: \"Get all test suite executions\"\n      description: \"Returns array of test suite executions\"\n      operationId: listAllTestSuiteExecutions\n      parameters:\n        - $ref: \"#/components/parameters/TestName\"\n        - $ref: \"#/components/parameters/TextSearch\"\n        - $ref: \"#/components/parameters/PageSize\"\n        - $ref: \"#/components/parameters/PageIndex\"\n        - $ref: \"#/components/parameters/TestExecutionsStatusFilter\"\n        - $ref: \"#/components/parameters/StartDateFilter\"\n        - $ref: \"#/components/parameters/EndDateFilter\"\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuiteExecutionsResult\"\n        500:\n          description: \"problem with getting test suite executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suite-executions/{id}:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test suite execution\n      tags:\n        - executions\n        - api\n      summary: \"Get test suite execution by ID\"\n      description: \"Returns test suite execution with given executionID\"\n      operationId: getTestSuiteExecutionByID\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuiteExecution\"\n        500:\n          description: \"problem with getting test suite execution from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions:\n    post:\n      parameters:\n        - in: query\n          name: namespace\n          schema:\n            type: string\n          description: kubernetes namespace\n          required: false\n        - $ref: \"#/components/parameters/Selector\"\n        - $ref: \"#/components/parameters/ExecutionSelector\"\n        - $ref: \"#/components/parameters/ConcurrencyLevel\"\n      tags:\n        - api\n        - tests\n        - executions\n      summary: \"Starts new test executions\"\n      description: \"New test executions returns new executions details on successful executions start\"\n      operationId: executeTests\n      requestBody:\n        description: body passed to configure executions\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ExecutionRequest\"\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ExecutionResult\"\n        400:\n          description: \"problem with request body\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with test executions\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    get:\n      tags:\n        - executions\n        - api\n      summary: \"Get all test executions\"\n      description: \"Returns array of test executions\"\n      operationId: listExecutions\n      parameters:\n        - $ref: \"#/components/parameters/TestName\"\n        - $ref: \"#/components/parameters/Type\"\n        - $ref: \"#/components/parameters/TextSearch\"\n        - $ref: \"#/components/parameters/PageSize\"\n        - $ref: \"#/components/parameters/PageIndex\"\n        - $ref: \"#/components/parameters/ExecutionsStatusFilter\"\n        - $ref: \"#/components/parameters/StartDateFilter\"\n        - $ref: \"#/components/parameters/EndDateFilter\"\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutionsResult\"\n        500:\n          description: \"problem with getting test executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions/{executionID}:\n    get:\n      parameters:\n        - in: path\n          name: executionID\n          schema:\n            type: string\n          required: true\n          description: ID of the test execution\n      tags:\n        - executions\n        - api\n      summary: \"Get test execution by ID\"\n      description: \"Returns execution with given executionID\"\n      operationId: getExecutionByID\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Execution\"\n        500:\n          description: \"problem with getting test executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions/{id}/artifacts:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test execution\n      tags:\n        - artifacts\n        - executions\n        - api\n      summary: \"Get execution's artifacts by ID\"\n      description: \"Returns artifacts of the given executionID\"\n      operationId: getExecutionArtifacts\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Artifact\"\n        500:\n          description: \"problem with getting execution's artifacts from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions/{id}/logs:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test execution\n      tags:\n        - logs\n        - executions\n        - api\n      summary: \"Get execution's logs by ID\"\n      description: \"Returns logs of the given executionID\"\n      operationId: getExecutionLogs\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ExecutorOutput\"\n        500:\n          description: \"problem with getting execution's logs\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions/{id}/artifacts/{filename}:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test execution\n        - in: path # minio/[bucket_exec_id]/cypress/video/somevideo.avi\n          name: filename\n          schema:\n            type: string\n          required: true\n          description: name of the file in the bucket\n      tags:\n        - artifacts\n        - executions\n        - api\n      operationId: downloadFile\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        500:\n          description: \"problem with getting artifacts from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /tests:\n    get:\n      tags:\n        - tests\n        - api\n      summary: \"List tests\"\n      description: \"List available tests\"\n      operationId: listTests\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n        - $ref: \"#/components/parameters/TextSearch\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Test\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    post:\n      tags:\n        - tests\n        - api\n      summary: \"create new test\"\n      description: \"create new test based on file content, uri or git based data\"\n      operationId: createTest\n      requestBody:\n        description: test details body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            text/yaml:\n              schema:\n                type: string\n        201:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Test\"\n        400:\n          description: \"problem with test definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      tags:\n        - tests\n        - api\n      summary: \"delete tests\"\n      description: \"deletes all or labeled tests\"\n      operationId: deleteTests\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /tests/{id}:\n    patch:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test\n      tags:\n        - tests\n        - api\n      summary: \"update test\"\n      description: \"update test based on test content or git based data\"\n      operationId: updateTest\n      requestBody:\n        description: test details body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Test\"\n        400:\n          description: \"problem with test definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      tags:\n        - tests\n        - api\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test\n      summary: \"Get test\"\n      description: \"Gets the specified test\"\n      operationId: getTest\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Test\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      tags:\n        - tests\n        - api\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test\n      summary: \"delete test\"\n      description: \"deletes a test\"\n      operationId: deleteTest\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-with-executions:\n    get:\n      tags:\n        - tests\n        - api\n      summary: \"List test with executions\"\n      description: \"List available test with executions\"\n      operationId: listTestWithExecutions\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n        - $ref: \"#/components/parameters/ExecutionSelector\"\n        - $ref: \"#/components/parameters/TextSearch\"\n        - $ref: \"#/components/parameters/ExecutionsStatusFilter\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TestWithExecution\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-with-executions/{id}:\n    get:\n      tags:\n        - tests\n        - api\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test\n      summary: \"Get test with execution\"\n      description: \"Gets the specified test with execution\"\n      operationId: getTestWithExecution\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestWithExecution\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /tests/{id}/executions:\n    post:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test\n        - in: query\n          name: namespace\n          schema:\n            type: string\n          description: kubernetes namespace\n          required: false\n      tags:\n        - api\n        - tests\n        - executions\n      summary: \"Starts new test execution\"\n      description: \"New test execution returns new execution details on successful execution start\"\n      operationId: executeTest\n      requestBody:\n        description: body passed to configure execution\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ExecutionRequest\"\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutionResult\"\n        400:\n          description: \"problem with request body\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with test execution\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test\n        - $ref: \"#/components/parameters/PageSize\"\n        - $ref: \"#/components/parameters/PageIndex\"\n        - $ref: \"#/components/parameters/ExecutionsStatusFilter\"\n        - $ref: \"#/components/parameters/StartDateFilter\"\n        - $ref: \"#/components/parameters/EndDateFilter\"\n      tags:\n        - api\n        - tests\n        - executions\n      summary: \"Get all test executions\"\n      description: \"Returns array of all available test executions\"\n      operationId: listTestExecutions\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutionsResult\"\n        500:\n          description: \"problem with getting test executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /tests/{id}/executions/{executionID}:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test\n        - in: path\n          name: executionID\n          schema:\n            type: string\n          required: true\n          description: ID of the test execution\n      tags:\n        - api\n        - tests\n        - executions\n      summary: \"Get test execution\"\n      description: \"Returns execution with given executionID\"\n      operationId: getTestExecution\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Execution\"\n        500:\n          description: \"problem with getting test executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test\n        - in: path\n          name: executionID\n          schema:\n            type: string\n          required: true\n          description: ID of the test execution\n      tags:\n        - api\n        - tests\n        - executions\n      summary: \"Aborts execution\"\n      description: \"Aborts execution and returns execution details\"\n      operationId: abortExecution\n      responses:\n        501:\n          description: not implemented yet\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutionResult\"\n\n  /executors:\n    get:\n      tags:\n        - executor\n        - api\n      summary: \"List executors\"\n      description: \"List executors available in cluster\"\n      operationId: listExecutors\n      parameters:\n        - in: query\n          name: namespace\n          schema:\n            type: string\n          description: kubernetes namespace\n          required: false\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Executor\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    post:\n      tags:\n        - executor\n        - api\n      summary: \"create new executor\"\n      description: \"create new executor based on variables passed in request\"\n      operationId: createExecutor\n      requestBody:\n        description: executor request body data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ExecutorCreateRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            text/yaml:\n              schema:\n                type: string\n        201:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutorDetails\"\n        400:\n          description: \"problem with executor definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      tags:\n        - executor\n        - api\n      summary: \"delete executors\"\n      description: \"deletes labeled executors\"\n      operationId: deleteExecutors\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executors/{name}:\n    delete:\n      parameters:\n        - in: path\n          name: name\n          schema:\n            type: string\n          required: true\n          description: Executor CRD name\n        - in: query\n          name: namespace\n          schema:\n            type: string\n          required: true\n          description: CRD namespace\n      tags:\n        - api\n        - executor\n      summary: \"Delete executor\"\n      description: \"Deletes executor by its name\"\n      operationId: deleteExecutor\n      responses:\n        204:\n          description: executor deleted successfuly\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      parameters:\n        - in: path\n          name: name\n          schema:\n            type: string\n          required: true\n          description: Executor CRD name\n        - in: query\n          name: namespace\n          schema:\n            type: string\n          description: kubernetes namespace\n          required: false\n      tags:\n        - api\n        - executor\n      summary: \"Get executor details\"\n      description: \"Returns executors data with executions passed to executor\"\n      operationId: getExecutor\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutorDetails\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with getting executor data\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /labels:\n    get:\n      tags:\n        - labels\n      summary: \"List labels\"\n      description: \"list all available labels\"\n      operationId: listLabels\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: array\n                  items:\n                    type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /webhooks:\n    get:\n      tags:\n        - webhook\n        - api\n      summary: \"List webhooks\"\n      description: \"List webhooks available in cluster\"\n      operationId: listWebhooks\n      parameters:\n        - in: query\n          name: namespace\n          schema:\n            type: string\n          description: kubernetes namespace\n          required: false\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Webhook\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    post:\n      tags:\n        - webhook\n        - api\n      summary: \"create new webhook\"\n      description: \"create new webhook based on variables passed in request\"\n      operationId: createWebhook\n      requestBody:\n        description: executor request body data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/WebhookCreateRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            text/yaml:\n              schema:\n                type: string\n        201:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Webhook\"\n        400:\n          description: \"problem with executor definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      tags:\n        - webhook\n        - api\n      summary: \"delete webhooks\"\n      description: \"deletes labeled webhooks\"\n      operationId: deleteWebhooks\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /webhooks/{name}:\n    delete:\n      parameters:\n        - in: path\n          name: name\n          schema:\n            type: string\n          required: true\n          description: Webhook CRD name\n        - in: query\n          name: namespace\n          schema:\n            type: string\n          required: true\n          description: CRD namespace\n      tags:\n        - api\n        - webhook\n      summary: \"Delete webhook\"\n      description: \"Deletes webhook by its name\"\n      operationId: deleteWebhook\n      responses:\n        204:\n          description: webhook deleted successfuly\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      parameters:\n        - in: path\n          name: name\n          schema:\n            type: string\n          required: true\n          description: Webhook CRD name\n        - in: query\n          name: namespace\n          schema:\n            type: string\n          description: kubernetes namespace\n          required: false\n      tags:\n        - api\n        - webhook\n      summary: \"Get webhook details\"\n      description: \"Returns webhook\"\n      operationId: getWebhook\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Webhook\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with getting webhook data\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /config/{key}:\n    patch:\n      parameters:\n        - in: path\n          name: key\n          schema:\n            type: string\n          required: true\n          description: Config key\n      tags:\n        - api\n      summary: \"update config key\"\n      description: \"Updates config key in cluster storage state\"\n      operationId: updateConfigKey\n      responses:\n        200:\n          description: update successful\n        502:\n          description: \"problem with updating key in cluster storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\ncomponents:\n  schemas:\n    Variables:\n      type: object\n      description: \"execution variables passed to executor converted to vars for usage in tests\"\n      additionalProperties:\n        $ref: \"#/components/schemas/Variable\"\n\n    Variable:\n      type: object\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        type:\n          $ref: \"#/components/schemas/VariableType\"\n        secretRef:\n          $ref: \"#/components/schemas/SecretRef\"\n\n    VariableType:\n      type: string\n      enum:\n        - basic\n        - secret\n\n    ObjectRef:\n      required:\n        - name\n      type: object\n      properties:\n        namespace:\n          type: string\n          description: object kubernetes namespace\n        name:\n          type: string\n          description: object name\n\n    SecretRef:\n      required:\n        - name\n        - key\n      type: object\n      properties:\n        namespace:\n          type: string\n          description: object kubernetes namespace\n        name:\n          type: string\n          description: object name\n        key:\n          type: string\n          description: object key\n\n    TestSuite:\n      type: object\n      required:\n        - name\n        - status\n        - steps\n      properties:\n        name:\n          type: string\n        namespace:\n          type: string\n        description:\n          type: string\n        before:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestSuiteStep\"\n          description: Run this step before whole suite\n        steps:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestSuiteStep\"\n          description: Steps to run\n        after:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestSuiteStep\"\n          description: Run this step after whole suite\n        labels:\n          type: object\n          description: \"test suite labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n        schedule:\n          type: string\n          description: schedule to run test suite\n        repeats:\n          type: integer\n          default: 1\n        variables:\n          $ref: \"#/components/schemas/Variables\"\n        created:\n          type: string\n          format: date-time\n\n    TestSuiteStepType:\n      type: string\n      enum:\n        - executeTest\n        - delay\n\n    TestSuiteStep:\n      type: object\n      required:\n        - name\n        - type\n        - stopTestOnFailure\n      properties:\n        stopTestOnFailure:\n          type: boolean\n          default: true\n        execute:\n          $ref: \"#/components/schemas/TestSuiteStepExecuteTest\"\n        delay:\n          $ref: \"#/components/schemas/TestSuiteStepDelay\"\n\n    TestSuiteStepExecuteTest:\n      allOf:\n        - $ref: \"#/components/schemas/ObjectRef\"\n\n    TestSuiteStepDelay:\n      type: object\n      required:\n        - duration\n        - name\n      properties:\n        duration:\n          type: integer\n          default: 0\n          description: delay duration in milliseconds\n\n    TestSuiteExecution:\n      type: object\n      description: Test suite executions data\n      required:\n        - id\n        - name\n        - test\n      properties:\n        id:\n          type: string\n          description: execution id\n          format: bson objectId\n        name:\n          type: string\n          description: \"execution name\"\n        testSuite:\n          $ref: \"#/components/schemas/ObjectRef\"\n          description: object name and namespace\n        status:\n          $ref: \"#/components/schemas/TestSuiteExecutionStatus\"\n        envs:\n          type: object\n          description: \"environment variables passed to executor\"\n          additionalProperties:\n            type: string\n          example:\n            record: \"true\"\n            prefix: \"some-\"\n        variables:\n          $ref: \"#/components/schemas/Variables\"\n        secretUUID:\n          type: string\n          description: secret uuid\n        startTime:\n          type: string\n          description: \"test start time\"\n          format: date-time\n        endTime:\n          type: string\n          description: \"test end time\"\n          format: date-time\n        duration:\n          type: string\n          description: \"test duration\"\n        stepResults:\n          type: array\n          description: \"steps execution restults\"\n          items:\n            $ref: \"#/components/schemas/TestSuiteStepExecutionResult\"\n            description: test execution results\n        labels:\n          type: object\n          description: \"test suite execution labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n\n    TestSuiteExecutionStatus:\n      type: string\n      enum:\n        - queued\n        - running\n        - passed\n        - failed\n        - cancelled\n\n    TestSuiteStepExecutionResult:\n      description: execution result returned from executor\n      type: object\n      required:\n        - status\n      properties:\n        step:\n          $ref: \"#/components/schemas/TestSuiteStep\"\n        test:\n          $ref: \"#/components/schemas/ObjectRef\"\n          description: object name and namespace\n        execution:\n          $ref: \"#/components/schemas/Execution\"\n          description: test step execution\n\n    TestSuiteExecutionsResult:\n      description: the result for a page of executions\n      type: object\n      required:\n        - totals\n        - results\n      properties:\n        totals:\n          $ref: \"#/components/schemas/ExecutionsTotals\"\n        filtered:\n          $ref: \"#/components/schemas/ExecutionsTotals\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestSuiteExecutionSummary\"\n\n    TestSuiteExecutionSummary:\n      description: test execution summary\n      type: object\n      required:\n        - id\n        - name\n        - testSuiteName\n        - status\n      properties:\n        id:\n          type: string\n          description: execution id\n          format: bson objectId\n        name:\n          type: string\n          description: execution name\n        testSuiteName:\n          type: string\n          description: name of the test suite\n        status:\n          $ref: \"#/components/schemas/TestSuiteExecutionStatus\"\n        startTime:\n          type: string\n          description: \"test suite execution start time\"\n          format: date-time\n        endTime:\n          type: string\n          description: \"test suite execution end time\"\n          format: date-time\n        duration:\n          type: string\n          description: \"test suite execution duration\"\n        execution:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestSuiteStepExecutionSummary\"\n        labels:\n          type: object\n          description: \"test suite labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n        executionLabels:\n          type: object\n          description: \"test suite execution labels\"\n          additionalProperties:\n            type: string\n\n    TestSuiteStepExecutionSummary:\n      description: test suite execution summary\n      type: object\n      required:\n        - id\n        - name\n        - status\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n          description: execution name\n        testName:\n          type: string\n          description: test name\n        status:\n          $ref: \"#/components/schemas/ExecutionStatus\"\n        type:\n          $ref: \"#/components/schemas/TestSuiteStepType\"\n\n    Test:\n      type: object\n      properties:\n        name:\n          type: string\n          description: test name\n        namespace:\n          type: string\n          description: test namespace\n        type:\n          type: string\n          description: test type\n        content:\n          $ref: \"#/components/schemas/TestContent\"\n          description: test content\n        created:\n          type: string\n          format: date-time\n        labels:\n          type: object\n          description: \"test labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n        schedule:\n          type: string\n          description: schedule to run test\n        variables:\n          $ref: \"#/components/schemas/Variables\"\n\n    TestContent:\n      type: object\n      properties:\n        type:\n          type: string\n          description: test type\n          enum:\n            - string\n            - file-uri\n            - git-file\n            - git-dir\n        repository:\n          $ref: \"#/components/schemas/Repository\"\n        data:\n          type: string\n          description: test content data as string\n        uri:\n          type: string\n          description: test content\n\n    Execution:\n      type: object\n      description: Test execution\n      properties:\n        id:\n          type: string\n          description: execution id\n          format: bson objectId\n        testName:\n          type: string\n          description: unique test name (CRD Test name)\n        testSuiteName:\n          type: string\n          description: unique test suite name (CRD Test suite name), if it's run as a part of test suite\n        testNamespace:\n          type: string\n          description: test namespace\n        testType:\n          type: string\n          description: test type e.g. postman/collection\n        name:\n          type: string\n          description: \"execution name\"\n        envs:\n          type: object\n          description: \"environment variables passed to executor\"\n          additionalProperties:\n            type: string\n          example:\n            record: \"true\"\n            prefix: \"some-\"\n        args:\n          type: array\n          description: \"additional arguments/flags passed to executor binary\"\n          example: [\"--concurrency\", \"2\", \"--remote\", \"--some\", \"blabla\"]\n          items:\n            type: string\n        variables:\n          $ref: \"#/components/schemas/Variables\"\n        variablesFile:\n          type: string\n          description: variables file content - need to be in format for particular executor (e.g. postman envs file)\n        testSecretUUID:\n          type: string\n          description: test secret uuid\n        testSuiteSecretUUID:\n            type: string\n            description: test suite secret uuid, if it's run as a part of test suite\n        content:\n          $ref: \"#/components/schemas/TestContent\"\n        startTime:\n          type: string\n          description: \"test start time\"\n          format: date-time\n        endTime:\n          type: string\n          description: \"test end time\"\n          format: date-time\n        duration:\n          type: string\n          description: \"test duration\"\n        executionResult:\n          required: true\n          description: result get from executor\n          $ref: \"#/components/schemas/ExecutionResult\"\n        labels:\n          type: object\n          description: \"test/testsuite labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n        executionLabels:\n          type: object\n          description: \"execution labels\"\n          additionalProperties:\n            type: string\n\n    Artifact:\n      type: object\n      description: API server artifact\n      properties:\n        name:\n          type: string\n          description: artifact file path\n        size:\n          type: integer\n          description: file size in bytes\n\n    ExecutionsResult:\n      description: the result for a page of executions\n      type: object\n      required:\n        - totals\n        - results\n      properties:\n        totals:\n          $ref: \"#/components/schemas/ExecutionsTotals\"\n        filtered:\n          $ref: \"#/components/schemas/ExecutionsTotals\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ExecutionSummary\"\n\n    ExecutionSummary:\n      description: execution summary\n      type: object\n      required:\n        - id\n        - name\n        - testName\n        - testType\n        - status\n      properties:\n        id:\n          type: string\n          description: execution id\n          format: bson objectId\n        name:\n          type: string\n          description: execution name\n        testName:\n          type: string\n          description: name of the test\n        testNamespace:\n          type: string\n          description: name of the test\n        testType:\n          type: string\n          description: the type of test for this execution\n        status:\n          $ref: \"#/components/schemas/ExecutionStatus\"\n        startTime:\n          type: string\n          description: \"test execution start time\"\n          format: date-time\n        endTime:\n          type: string\n          description: \"test execution end time\"\n          format: date-time\n        duration:\n          type: string\n          description: calculated test duration\n        labels:\n          type: object\n          description: \"execution labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n\n    ExecutionStatus:\n      type: string\n      enum:\n        - queued\n        - running\n        - passed\n        - failed\n        - cancelled\n\n    ExecutionResult:\n      description: execution result returned from executor\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          $ref: \"#/components/schemas/ExecutionStatus\"\n        output:\n          type: string\n          description: \"RAW Test execution output, depends of reporter used in particular tool\"\n        outputType:\n          type: string\n          description: \"output type depends of reporter used in partucular tool\"\n          enum:\n            - text/plain\n            - application/junit+xml\n            - application/json\n        errorMessage:\n          type: string\n          description: \"error message when status is error, separate to output as output can be partial in case of error\"\n        steps:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ExecutionStepResult\"\n          description: execution steps (for collection of requests)\n        reports:\n          type: object\n          properties:\n            junit:\n              type: string\n\n    ExecutionStepResult:\n      description: execution result data\n      type: object\n      required:\n        - name\n        - status\n      properties:\n        name:\n          type: string\n          description: step name\n        duration:\n          type: string\n          format: duration\n        status:\n          type: string\n          description: execution step status\n          enum: [success, error]\n        assertionResults:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AssertionResult\"\n\n    AssertionResult:\n      description: execution result data\n      type: object\n      properties:\n        name:\n          type: string\n        status:\n          type: string\n          enum: [success, error]\n        errorMessage:\n          type: string\n          nullable: true\n\n    ExecutionsTotals:\n      type: object\n      description: various execution counters\n      required:\n        - results\n        - passed\n        - failed\n        - queued\n        - running\n      properties:\n        results:\n          type: integer\n          description: the total number of executions available\n        passed:\n          type: integer\n          description: the total number of passed executions available\n        failed:\n          type: integer\n          description: the total number of failed executions available\n        queued:\n          type: integer\n          description: the total number of queued executions available\n        running:\n          type: integer\n          description: the total number of running executions available\n\n    ServerInfo:\n      type: object\n      description: Server information with build version, build commit etc.\n      required:\n        - version\n      properties:\n        version:\n          type: string\n          description: build version\n        commit:\n          type: string\n          description: build commit\n\n    Repository:\n      description: repository representation for tests in git repositories\n      type: object\n      required:\n        - type\n        - uri\n        - branch\n      properties:\n        type:\n          type: string\n          enum:\n            - git\n          description: VCS repository type\n        uri:\n          type: string\n          description: uri of content file or git directory\n        branch:\n          type: string\n          description: branch/tag name for checkout\n        path:\n          type: string\n          description: if needed we can checkout particular path (dir or file) in case of BIG/mono repositories\n        username:\n          type: string\n          description: git auth username for private repositories\n        token:\n          type: string\n          description: git auth token for private repositories\n\n    ExecutionRequest:\n      description: test execution request body\n      type: object\n      properties:\n        name:\n          type: string\n          description: test execution custom name\n          example: testing with 1000 users\n        testSuiteName:\n          type: string\n          description: unique test suite name (CRD Test suite name), if it's run as a part of test suite\n        namespace:\n          type: string\n          description: test kubernetes namespace (\"testkube\" when not set)\n          example: testkube\n        variablesFile:\n          type: string\n          description: variables file content - need to be in format for particular executor (e.g. postman envs file)\n        variables:\n          $ref: \"#/components/schemas/Variables\"\n        testSecretUUID:\n          type: string\n          description: test secret uuid\n        testSuiteSecretUUID:\n            type: string\n            description: test suite secret uuid, if it's run as a part of test suite\n        args:\n          type: array\n          description: \"additional executor binary arguments\"\n          items:\n            type: string\n          example:\n            - \"--repeats\"\n            - \"5\"\n            - \"--insecure\"\n        envs:\n          type: object\n          description: \"environment variables passed to executor\"\n          additionalProperties:\n            type: string\n          example:\n            record: \"true\"\n            prefix: \"some-\"\n        secretEnvs:\n          type: object\n          description: \"execution variables passed to executor from secrets\"\n          additionalProperties:\n            type: string\n          example:\n            secret_name1: \"kubernetes-secret-name\"\n            secret_key1: \"secret-key-name\"\n        sync:\n          type: boolean\n          description: whether to start execution sync or async\n        httpProxy:\n          type: string\n          description: http proxy for executor containers\n          example: user:pass@my.proxy.server:8080\n        httpsProxy:\n          type: string\n          description: https proxy for executor containers\n          example: user:pass@my.proxy.server:8081\n\n    TestSuiteExecutionRequest:\n      description: test suite execution request body\n      type: object\n      properties:\n        name:\n          type: string\n          description: test execution custom name\n          example: testing with 1000 users\n        namespace:\n          type: string\n          description: test kubernetes namespace (\"testkube\" when not set)\n          example: testkube\n        variables:\n          $ref: \"#/components/schemas/Variables\"\n        secretUUID:\n          type: string\n          description: secret uuid\n        labels:\n          type: object\n          description: \"execution labels\"\n          additionalProperties:\n            type: string\n          example:\n            users: \"3\"\n            prefix: \"some-\"\n        sync:\n          type: boolean\n          description: whether to start execution sync or async\n        httpProxy:\n          type: string\n          description: http proxy for executor containers\n          example: user:pass@my.proxy.server:8080\n        httpsProxy:\n          type: string\n          description: https proxy for executor containers\n          example: user:pass@my.proxy.server:8081\n\n    TestUpsertRequest:\n      description: test create request body\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/Test\"\n\n    TestSuiteUpsertRequest:\n      description: test create request body\n      type: object\n      required:\n        - name\n        - namespace\n      allOf:\n        - $ref: \"#/components/schemas/TestSuite\"\n        - $ref: \"#/components/schemas/ObjectRef\"\n\n    ExecutorCreateRequest:\n      description: executor create request body\n      type: object\n      required:\n        - name\n        - namespace\n        - types\n      allOf:\n        - $ref: \"#/components/schemas/Executor\"\n        - $ref: \"#/components/schemas/ObjectRef\"\n\n    WebhookCreateRequest:\n      description: executor create request body\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/Webhook\"\n\n    # Copied from CRD spec\n    # https://github.com/kubeshop/testkube-operator/blob/main/config/crd/bases/executor.kubtest.io_executors.yaml\n    # TODO we need to sync those in some nice way\n    Executor:\n      description: CRD based executor data\n      type: object\n      properties:\n        executorType:\n          description:\n            ExecutorType one of \"rest\" for rest openapi based executors\n            or \"job\" which will be default runners for testkube soon\n          type: string\n        image:\n          description: Image for kube-job\n          type: string\n        types:\n          description: Types defines what types can be handled by executor e.g.\n            \"postman/collection\", \":curl/command\" etc\n          items:\n            type: string\n          type: array\n        uri:\n          description: URI for rest based executors\n          type: string\n        jobTemplate:\n          description: Job template to launch executor\n          type: string\n        labels:\n          type: object\n          description: \"executor labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n\n    ExecutorDetails:\n      description: Executor details with Executor data and additional information like list of executions\n      type: object\n      properties:\n        name:\n          description: Executor name\n          type: string\n        executor:\n          $ref: \"#/components/schemas/Executor\"\n        executions:\n          $ref: \"#/components/schemas/ExecutionsResult\"\n\n    ExecutorOutput:\n      description: CRD based executor data\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n          description: One of possible output types\n          enum:\n            - error\n            - log\n            - event\n            - result\n        content:\n          type: string\n          description: Message/event data passed from executor (like log lines etc)\n          example:\n        result:\n          description: Execution result when job is finished\n          $ref: \"#/components/schemas/ExecutionResult\"\n\n    Webhook:\n      description: CRD based webhook data\n      type: object\n      required:\n        - uri\n        - types\n      properties:\n        name:\n          type: string\n        namespace:\n          type: string\n        uri:\n          type: string\n        events:\n          type: array\n          items:\n            $ref: \"#/components/schemas/WebhookEventType\"\n        labels:\n          type: object\n          description: \"webhook labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n\n    WebhookEvent:\n      description: CRD based executor data\n      type: object\n      required:\n        - type\n      properties:\n        uri:\n          type: string\n        type:\n          $ref: \"#/components/schemas/WebhookEventType\"\n        execution:\n          $ref: \"#/components/schemas/Execution\"\n\n    WebhookEventType:\n      type: string\n      enum:\n        - start-test\n        - end-test\n\n    TestWithExecution:\n      description: Test with latest Execution result\n      type: object\n      required:\n        - test\n      properties:\n        test:\n          $ref: \"#/components/schemas/Test\"\n        latestExecution:\n          $ref: \"#/components/schemas/Execution\"\n\n    TestSuiteWithExecution:\n      description: Test suite with latest execution result\n      type: object\n      required:\n        - testSuite\n      properties:\n        testSuite:\n          $ref: \"#/components/schemas/TestSuite\"\n        latestExecution:\n          $ref: \"#/components/schemas/TestSuiteExecution\"\n\n    Config:\n      description: Testkube API config data structure\n      type: object\n      required:\n        - id\n        - clusterId\n      properties:\n        id:\n          type: string\n        clusterId:\n          type: string\n        enableTelemetry:\n          type: boolean\n\n    #\n    # Errors\n    #\n\n    Problem:\n      description: problem response in case of error\n      type: object\n      properties:\n        type:\n          type: string\n          description: Type contains a URI that identifies the problem type. This URI will,\n          example: http://kubeshop.io/testkube/problems/invalidtestname\n        title:\n          type: string\n          description: Title is a short, human-readable summary of the problem type. This title SHOULD NOT change from occurrence to occurrence of the problem, except forpurposes of localization.\n          example: Invalid test name\n        status:\n          type: integer\n          description: HTTP status code for this occurrence of the problem.\n          example: 500\n        detail:\n          type: string\n          description: A human-readable explanation specific to this occurrence of the problem.\n          example: Your test name can't contain forbidden characters like \"}}}\" passed\n        instance:\n          type: string\n          description: A URI that identifies the specific occurrence of the problem. This URI may or may not yield further information if de-referenced.\n          example: http://10.23.23.123:8088/tests\n\n  #\n  # Parameters\n  #\n\n  parameters:\n    TestName:\n      in: query\n      name: test\n      schema:\n        type: string\n        default: \"\"\n      description: test namespaced name to filter\n      required: false\n    Type:\n      in: query\n      name: type\n      schema:\n        type: string\n        default: \"\"\n      description: object type\n      required: false\n    TextSearch:\n      in: query\n      name: textSearch\n      schema:\n        type: string\n        default: \"\"\n      description: text to search in name and test name\n      required: false\n    PageSize:\n      in: query\n      name: pageSize\n      schema:\n        type: integer\n        default: 100\n      description: the number of executions to get, setting to 0 will return only totals\n      required: false\n    PageIndex:\n      in: query\n      name: page\n      schema:\n        type: integer\n        default: 0\n      description: the page index to start at\n      required: false\n    StartDateFilter:\n      in: query\n      name: startDate\n      schema:\n        type: string\n        format: date\n      required: false\n      description: startDate for filtering in ISO-8601 format, i.e. \"yyyy-mm-dd\"\n    EndDateFilter:\n      in: query\n      name: endDate\n      schema:\n        type: string\n        format: date\n      required: false\n      description: endDate for filtering\n    TestExecutionsStatusFilter:\n      in: query\n      name: status\n      schema:\n        $ref: \"#/components/schemas/TestSuiteExecutionStatus\"\n      description: optional status filter containing multiple values separted by comma\n      required: false\n    ExecutionsStatusFilter:\n      in: query\n      name: status\n      schema:\n        $ref: \"#/components/schemas/ExecutionStatus\"\n      description: optional status filter containing multiple values separted by comma\n      required: false\n    Selector:\n      in: query\n      name: selector\n      schema:\n        type: string\n        description: Labels to filter by\n    ExecutionSelector:\n      in: query\n      name: executionSelector\n      schema:\n        type: string\n        description: Execution Labels to filter by\n    ConcurrencyLevel:\n      in: query\n      name: concurrency\n      schema:\n        type: integer\n        default: 10\n",
			"canonicalURL": "/github.com/kubeshop/testkube@17e6ed8344f396436352373493ded649c8ec70d9/-/blob/api/v1/testkube.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/kubeshop/testkube/blob/17e6ed8344f396436352373493ded649c8ec70d9/api/v1/testkube.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!bool `true` into []string"
}