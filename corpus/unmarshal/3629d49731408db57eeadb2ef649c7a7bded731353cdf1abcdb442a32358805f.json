{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openzim/zimfarm"
		},
		"file": {
			"name": "openapi_v1.yaml",
			"size": 0,
			"path": "dispatcher/backend/docs/openapi_v1.yaml",
			"byteSize": 63419,
			"content": "openapi: 3.0.0\nservers:\n  - description: production server\n    url: https://api.farm.openzim.org/v1\ninfo:\n  description: |\n    Zimfarm is openZIM's automated & distributed ZIM files creation engine.\n    openZIM periodically publishes updated ZIM files for a large variety of content.\n\n    This API provides public access to the scheduled ZIM files to create as well as tracking of its tasks.\n\n    This API is also used by _workers_ to fetch, process and update those tasks.\n  version: 1.0.0\n  title: Zimfarm API\n  contact:\n    email: contact+zimfarm@kiwix.org\n    url: https://kiwix.org\n  license:\n    name: GNU General Public License v3.0\n    url: https://www.gnu.org/licenses/gpl-3.0.en.html\n\ntags:\n- name: auth\n  description: Authentication-refated calls\n- name: public\n  description: Read-only operations for all\n- name: restricted\n  description: Secured user-only write calls\n- name: workers\n  description: worker-centric calls\n\npaths:\n  /auth/authorize:\n    post:\n      tags:\n        - auth\n      summary: get token using credentials\n      operationId: authWithCredentials\n      description: Authenticate using username and password and receive tokens\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                username:\n                  $ref: '#/components/schemas/Username'\n                password:\n                  type: string\n                  format: password\n                  minLength: 6\n      responses:\n        200:\n          description: Token information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n  /auth/ssh_authorize:\n    post:\n      tags:\n        - auth\n      summary: get token using SSH key\n      operationId: authWithSSH\n      description: Authenticate using an RSA private key and receive tokens\n      parameters:\n        - in: header\n          name: X-SSHAuth-Message\n          description: Message for signature verification. Username and current datetime (UTC)\n          required: true\n          schema:\n            type: string\n            format: \"username:ISO datetime\"\n            example: \"john:2019-11-19T15:36:06.563000Z\"\n        - in: header\n          name: X-SSHAuth-Signature\n          description: Base64 encoded version of the signed message using the RSA key\n          required: true\n          schema:\n            type: string\n            format: base64\n            example: aXQncyBhbiBleGFtcGxlLCBub3QgYSByZWFsIHNpZ25hdHVyZQ==\n      responses:\n        200:\n          description: Token information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /auth/test:\n    get:\n      tags:\n      - auth\n      summary: test token\n      operationId: testToken\n      description: Validate proper authentication without requesting data\n      security:\n        - token: []\n        - oauth: []\n      responses:\n        204:\n          description: Authenticated\n        401:\n          description: Unauthorized\n  /auth/token:\n    post:\n      tags:\n        - auth\n      summary: refresh tokens\n      operationId: refreshToken\n      description: Refresh tokens by providing existing valid `refresh-token`\n      parameters:\n        - in: header\n          name: refresh-token\n          description: Valid refresh-token\n          required: true\n          schema:\n            type: string\n            example: aea891db-090b-60a3-8ea8-57c0928b42e6\n      responses:\n        200:\n          description: Token information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n  /auth/validate/ssh_key:\n    post:\n      tags:\n        - auth\n      summary: verify public key\n      operationId: validateKey\n      description: Checks that provided RSA public key is valid for User\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - username\n                - key\n              properties:\n                username:\n                  $ref: '#/components/schemas/Username'\n                key:\n                  type: string\n                  format: base64 encoded RSA public key text\n                  minLength: 1\n                  example: QUFBQUIzTnphQzF5YzJFQUFBQURBUUFCQUFBQkFRRERJUlNhbStHY0tBQW5tMGpGL1ZCMTJydFhDenBGRTFnc1Q5Q25GdzVkWWJQb2NudWdkbDY0UVpxNjVSdGN5T1BJVEJ0Yk1SOUw2ZEowejI2b21mZFhYd2VFcE5JR0N0SmRtNldzWTNrc0JyNHAvREhFRUVzSDkraGR3RVovQzd3YXlpbDZ3dUlwY3BMNXJLZ2xIRnlZVVJsNDQ5Nis0c0RjMG1YbllGdmVSMkdHRmNsdmwvcTdEejNla1RaNXV4THBhRFl4Y3NrZm5LVm1PQW82b04yYzRhbmtkZ2ozRkxmemRQeHFlakovUmRXVFF4dEtGQmt5VEZ0Wmt2SW9Ub2NXRENISWw0K1k1RExOYzlFTm1TZnlDbFdsYVRxaVlBZm4rY3QvZXNrZHFxK0dHY0pkVnAwREFSWUdMb3NNV3JQbm01WWdRL3EwOHEzcmNIZ1NzOG1I\n      responses:\n        204:\n          description: Public key is valid for User\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n\n  /schedules/:\n    get:\n      tags:\n      - public\n      summary: list schedules\n      operationId: listSchedules\n      description: Query the Schedules database\n      parameters:\n      - $ref: '#/components/parameters/SkipParameter'\n      - $ref: '#/components/parameters/LimitParameter'\n      - in: query\n        name: category\n        description: Categories to filter results by (union of, if several)\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n          example:\n            - other\n            - wikipedia\n      - in: query\n        name: tag\n        description: Tags to filter results by (intersection of, if several)\n        required: false\n        schema:\n          $ref: '#/components/schemas/ScheduleTags'\n      - in: query\n        name: lang\n        description: Language code to filter results by (union of, if several)\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n            format: ISO 639-1\n          example:\n            - fr\n            - bm\n      - in: query\n        name: name\n        description: Name to filter results by (direct match or regex)\n        required: false\n        schema:\n          type: string\n        example: wikipedia_.+_football\n      responses:\n        200:\n          description: List of Schedules matching criteria\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/MetaProperty'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ScheduleItem'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n    post:\n      tags:\n      - restricted\n      summary: create schedule\n      operationId: addSchedules\n      description: Create a new Schedule\n      security:\n        - token: []\n        - oauth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Schedule'\n      responses:\n        201:\n          description: Schedule Created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _id:\n                    $ref: '#/components/schemas/MongoId'\n        401:\n          description: Unauthorized\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n  /schedules/backup/:\n    get:\n      tags:\n      - public\n      summary: dump schedules\n      operationId: dumpSchedules\n      description: Dump all Schedules (without `most_recent_task`) in a single request\n      responses:\n        200:\n          description: Complete list of Schedules\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Schedule'\n  /schedules/{scheduleName}:\n    get:\n      tags:\n      - public\n      summary: list schedules\n      operationId: getSchedule\n      description: Retrieve a Schedule's details (Secrets in config are replaced by ****** for unauthenticated requests and authenticated requests from users without schedules.update permission)\n      parameters:\n        - $ref: '#/components/parameters/ScheduleNameParameter'\n      responses:\n        200:\n          description: Schedule details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Schedule'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n      - restricted\n      summary: update schedule\n      operationId: editSchedule\n      description: Update a Schedule's details\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n        - $ref: '#/components/parameters/ScheduleNameParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: false\n              properties:\n                name:\n                  $ref: '#/components/schemas/ScheduleName'\n                language:\n                  $ref: '#/components/schemas/Language'\n                category:\n                  $ref: '#/components/schemas/ScheduleCategory'\n                tags:\n                  $ref: '#/components/schemas/ScheduleTags'\n                enabled:\n                  type: boolean\n                config:\n                  $ref: '#/components/schemas/Config'\n      responses:\n        200:\n          description: Updated\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n      - restricted\n      summary: delete schedule\n      operationId: deleteSchedule\n      description: Remove a Schedule\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n        - $ref: '#/components/parameters/ScheduleNameParameter'\n      responses:\n        200:\n          description: Schedule Deleted\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /schedules/{scheduleName}/image-names:\n    get:\n      tags:\n      - restricted\n      summary: get image tags\n      operationId: getImageTags\n      description: Retrieve Image Tags\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n      - $ref: '#/components/parameters/ScheduleNameParameter'\n      - in: query\n        name: hub_name\n        description: Docker Hub image name\n        required: true\n        schema:\n          type: string\n          example: openzim/mwoffliner\n      responses:\n        200:\n          description: List of Image Tags\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/MetaProperty'\n                  items:\n                    type: array\n                    example:\n                      [\n                        \"latest\",\n                        \"1.11.3\",\n                        \"1.11.2\",\n                      ]\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /schedules/{scheduleName}/clone:\n    post:\n      tags:\n      - restricted\n      summary: clone schedule\n      operationId: cloneSchedule\n      description: Clone a Schedule into another\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n        - $ref: '#/components/parameters/ScheduleNameParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: false\n              properties:\n                name:\n                  $ref: '#/components/schemas/ScheduleName'\n      responses:\n        201:\n          description: Schedule cloned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Schedule'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /requested-tasks/:\n    get:\n      tags:\n      - public\n      summary: list requested-tasks\n      operationId: listRequestedTasks\n      description: Query the RequestedTasks database (sorted by priority)\n      parameters:\n      - $ref: '#/components/parameters/SkipParameter'\n      - $ref: '#/components/parameters/LimitParameter'\n      - $ref: '#/components/parameters/ScheduleNameQueryParameter'\n      - in: query\n        required: false\n        name: schedule_name\n        description: filter by schedule_name\n        schema:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScheduleName'\n      - in: query\n        name: matching_cpu\n        required: false\n        schema:\n          type: integer\n          format: int32\n          example: 3\n          description: number of CPU cores required to run it\n      - in: query\n        name: matching_memory\n        required: false\n        schema:\n          type: integer\n          format: int32\n          example: 1024\n          description: RAM (in bytes) required to run it\n      - in: query\n        name: matching_disk\n        required: false\n        schema:\n          type: integer\n          format: int32\n          example: 1024\n          description: Disk space (in bytes) required to run it\n      - in: query\n        name: matching_offliners\n        required: false\n        schema:\n          type: array\n          items:\n            $ref: '#/components/schemas/Offliner'\n          example:\n            - \"youtube\"\n            - \"mwoffliner\"\n          description: list of offliners supported\n      - in: query\n        name: priority\n        required: false\n        description: filter to this or higher priority\n        schema:\n          $ref: '#/components/schemas/Priority'\n      - in: query\n        name: worker\n        required: false\n        description: filter to this or unassigned worker\n        schema:\n          $ref: '#/components/schemas/WorkerName'\n      responses:\n        200:\n          description: List of RequestedTask matching criteria\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/MetaProperty'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/RequestedTask'\n        400:\n          description: Bad Request (invalid input)\n    post:\n      tags:\n      - restricted\n      summary: create requested-task\n      operationId: addRequestedTask\n      description: Request new Task from one or many Schedules\n      security:\n        - token: []\n        - oauth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - schedule_names\n              properties:\n                schedule_names:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/ScheduleName'\n                  example:\n                    - wikipedia_fr_all\n                    - gutenberg_mul_all\n                priority:\n                  $ref: '#/components/schemas/Priority'\n      responses:\n        201:\n          description: Tasks Requested\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - requested\n                properties:\n                  requested:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/MongoId'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found (at least one, so none requested)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /requested-tasks/worker:\n    get:\n      tags:\n      - workers\n      summary: list requested-tasks (worker endpoint)\n      operationId: listRequestedTasksForWorker\n      description: Query the RequestedTasks database (sorted by priority)\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n      - in: query\n        name: avail_cpu\n        required: true\n        schema:\n          type: integer\n          format: int32\n          example: 3\n          description: number of CPU cores required to run it\n      - in: query\n        name: avail_memory\n        required: true\n        schema:\n          type: integer\n          format: int32\n          example: 1024\n          description: RAM (in bytes) required to run it\n      - in: query\n        name: avail_disk\n        required: true\n        schema:\n          type: integer\n          format: int32\n          example: 1024\n          description: Disk space (in bytes) required to run it\n      - in: query\n        name: worker\n        required: true\n        description: filter to this or unassigned worker\n        schema:\n          $ref: '#/components/schemas/WorkerName'\n      responses:\n        200:\n          description: List of 1 RequestedTask for this worker matching resources\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/MetaProperty'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/RequestedTask'\n        400:\n          description: Bad Request (invalid input)\n  /requested-tasks/{taskId}:\n    get:\n      tags:\n      - public\n      summary: get requested-tasks details\n      operationId: getRequestedTask\n      description: Retrieve a RequestedTask details\n      parameters:\n      - $ref: '#/components/parameters/TaskIdParameter'\n      responses:\n        200:\n          description: RequestedTask Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequestedTask'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n      - restricted\n      summary: update requested task\n      operationId: editRequestedTask\n      description: Change a RequestedTask's priority\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n      - $ref: '#/components/parameters/TaskIdParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - priority\n              properties:\n                priority:\n                  $ref: '#/components/schemas/Priority'\n      responses:\n        200:\n          description: RequestedTask not updated\n        202:\n          description: RequestedTask updated\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n      - restricted\n      summary: delete requested task\n      operationId: deleteRequestedTask\n      description: Remove a RequestedTask\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n      - $ref: '#/components/parameters/TaskIdParameter'\n      responses:\n        200:\n          description: RequestedTask Deleted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  deleted:\n                    type: integer\n                    format: int32\n                    example: 1\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /tasks/:\n    get:\n      tags:\n      - public\n      summary: list tasks\n      operationId: listTasks\n      description: Query the Tasks database\n      parameters:\n      - $ref: '#/components/parameters/SkipParameter'\n      - $ref: '#/components/parameters/LimitParameter'\n      - $ref: '#/components/parameters/StatusParameter'\n      - $ref: '#/components/parameters/ScheduleNameQueryParameter'\n      responses:\n        200:\n          description: List of Tasks matching criteria\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/MetaProperty'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TaskItem'\n        400:\n          description: Bad Request (invalid input)\n  /tasks/{taskId}:\n    get:\n      tags:\n      - public\n      summary: get task detail\n      operationId: getTask\n      description: Retrieve a Task's details (Secrets in config are replaced by ****** for unauthenticated requests and authenticated requests from users without tasks.create permission)\n      parameters:\n      - $ref: '#/components/parameters/TaskIdParameter'\n      responses:\n        200:\n          description: Task record\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n      - workers\n      summary: create task\n      operationId: addTask\n      description: Turn a RequestedTask into a Task\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n      - $ref: '#/components/parameters/TaskIdParameter'\n      responses:\n        201:\n          description: Task Created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _id:\n                    $ref: '#/components/schemas/MongoId'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        423:\n          description: \"Unable to create Task: created by another worker\"\n    patch:\n      tags:\n      - workers\n      summary: update task\n      operationId: editTask\n      description: Update a Task's details\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n      - $ref: '#/components/parameters/TaskIdParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: false\n              required:\n                - event\n                - payload\n              properties:\n                event:\n                  $ref: '#/components/schemas/TaskStatus'\n                payload:\n                  type: object\n                  additionalProperties: true\n                  description: event-related payload\n                  example:\n                    task_log: agbcdls213821983hjhkj-json.log\n      responses:\n        204:\n          description: Task Updated\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /tasks/{taskId}/cancel:\n    post:\n      tags:\n      - restricted\n      summary: cancel task\n      operationId: cancelTask\n      description: Request cancellation of a Task. Actual cancellation is asyncrhonous.\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n      - $ref: '#/components/parameters/TaskIdParameter'\n      responses:\n        204:\n          description: Cancelation Requested\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n\n  /languages/:\n    get:\n      tags:\n      - public\n      summary: list languages\n      operationId: listLanguages\n      description: Query the list of Languages used by Schedules\n      parameters:\n      - $ref: '#/components/parameters/SkipParameter'\n      - $ref: '#/components/parameters/LimitParameter'\n      responses:\n        200:\n          description: List of Languages matching criteria\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/MetaProperty'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Language'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n  /tags/:\n    get:\n      tags:\n      - public\n      summary: list tags\n      operationId: listTags\n      description: Query the Tags in use by Schedules\n      parameters:\n      - $ref: '#/components/parameters/SkipParameter'\n      - $ref: '#/components/parameters/LimitParameter'\n      responses:\n        200:\n          description: List of Tags matching criteria\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/MetaProperty'\n                  items:\n                    $ref: '#/components/schemas/ScheduleTags'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n  /platforms/:\n    get:\n      tags:\n      - public\n      summary: list platforms\n      operationId: listPlatforms\n      description: Query the Platforms registered in the system\n      responses:\n        200:\n          description: List of Platforms matching criteria\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/MetaProperty'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Platform'\n\n  /offliners/:\n    get:\n      tags:\n      - public\n      summary: list offliners\n      operationId: listOffliners\n      description: Query the Offliners registered in the system\n      responses:\n        200:\n          description: List of Offliners matching criteria\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/MetaProperty'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Offliner'\n  /offliners/{offliner}:\n    get:\n      tags:\n      - public\n      summary: get offliner details\n      operationId: getOffliner\n      description: Retrieve an Offliner's details (list of fields for its flags)\n      parameters:\n        - in: path\n          required: true\n          name: offliner\n          schema:\n            $ref: '#/components/schemas/Offliner'\n      responses:\n        200:\n          description: Offliner Record\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n                  required:\n                    - key\n                    - type\n                    - label\n                    - required\n                  properties:\n                    key:\n                      type: string\n                      example: username\n                      description: ID/name of the field\n                    type:\n                      type: string\n                      enum:\n                        - text\n                        - hex-color\n                        - url\n                        - email\n                        - integer\n                        - float\n                        - boolean\n                        - string-enum\n                        - list-of-string-enum\n                      description: the type of the field\n                      example: url\n                    label:\n                      type: string\n                      example: Content URL\n                      description: Human representation of the key/name\n                    required:\n                      type: boolean\n                      example: true\n                      description: whether this field's value is required\n                    description:\n                      type: string\n                      example: URL of some information\n                      description: Description to help fill the field\n                    placeholder:\n                      type: string\n                      description: the field's placeholder\n                      example: http://somecontent.tld/here\n                    choices:\n                      description: list of choices to choose a value from\n                      type: array\n                      items:\n                        type: string\n                        example:\n                          - some-value\n                          - another-value\n                    data_key:\n                      type: string\n                      description: actual param name (for when key cant be named the same)\n                      example: api-key\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /workers/:\n    get:\n      tags:\n      - public\n      summary: list workers\n      operationId: listWorkers\n      description: Query the Workers database\n      parameters:\n      - $ref: '#/components/parameters/SkipParameter'\n      - $ref: '#/components/parameters/LimitParameter'\n      - in: query\n        name: status\n        description: status (online, offline) to filter results on\n        required: false\n        schema:\n          type: string\n          example: online\n      responses:\n        200:\n          description: List of Workers matching criteria\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/MetaProperty'\n                  items:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Worker'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n  /workers/{name}/check-in:\n    put:\n      tags:\n      - workers\n      summary: list workers\n      operationId: checkWorkerIn\n      description: Check a worker in with its resources details\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n        - in: path\n          required: true\n          name: name\n          schema:\n            $ref: '#/components/schemas/WorkerName'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: false\n              required:\n                - username\n                - cpu\n                - memory\n                - disk\n                - offliners\n              properties:\n                username:\n                  $ref: '#/components/schemas/Username'\n                cpu:\n                  $ref: '#/components/schemas/Cpu'\n                memory:\n                  $ref: '#/components/schemas/Memory'\n                disk:\n                  $ref: '#/components/schemas/Disk'\n                offliners:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/Offliner'\n                  example:\n                    - \"youtube\"\n                    - \"mwoffliner\"\n      responses:\n        204:\n          description: Worker checked-in\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n  /users/:\n    get:\n      tags:\n      - restricted\n      summary: list users\n      operationId: listUsers\n      description: Query the Users database\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n      - $ref: '#/components/parameters/SkipParameter'\n      - $ref: '#/components/parameters/LimitParameter'\n      responses:\n        200:\n          description: List of Users matching criteria\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/MetaProperty'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/UserItem'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n    post:\n      tags:\n      - restricted\n      summary: create user\n      operationId: addUser\n      description: |\n        Create a new User with specific scope and credentials.\n        SSH Authentication requires an additional key upload step.\n        API user needs the `users.create` scope for this endpoint.\n      security:\n        - token: []\n        - oauth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserPayload'\n            examples:\n              username:\n                summary: John Doe\n                value: {\"username\": \"john\", \"password\": \"my-long-password\", \"email\": \"john@kiwix.org\", \"scope\": {\"schedules\": {\"read\": true}}}\n      responses:\n        201:\n          description: User Created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _id:\n                    $ref: '#/components/schemas/MongoId'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n  /users/{username}:\n    get:\n      tags:\n      - restricted\n      summary: get user details\n      operationId: getUser\n      description: Retrieve a User's details\n      security:\n        - token: []\n        - ouath: []\n      parameters:\n      - $ref: '#/components/parameters/UsernameParameter'\n      responses:\n        200:\n          description: User Record\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  username:\n                    $ref: '#/components/schemas/Username'\n                  email:\n                    $ref: '#/components/schemas/UserEmail'\n                  scope:\n                    $ref: '#/components/schemas/Scope'\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n    patch:\n      tags:\n      - restricted\n      summary: update user details\n      operationId: updateUser\n      description: Change a User's details\n      security:\n        - token: []\n        - ouath: []\n      parameters:\n      - $ref: '#/components/parameters/UsernameParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: false\n              properties:\n                email:\n                  $ref: '#/components/schemas/Email'\n                role:\n                  $ref: '#/components/schemas/Role'\n      responses:\n        204:\n          description: User Updated\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n    delete:\n      tags:\n      - restricted\n      summary: delete user\n      operationId: deleteUser\n      description: Remove a User\n      parameters:\n      - $ref: '#/components/parameters/UsernameParameter'\n      security:\n        - token: []\n        - oauth: []\n      responses:\n        200:\n          description: User Deleted\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{username}/keys/:\n    get:\n      tags:\n      - restricted\n      summary: get user's SSH keys\n      operationId: getUserKeys\n      description: Retrieve the list of registered SSH keys for User\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n      - $ref: '#/components/parameters/UsernameParameter'\n      responses:\n        200:\n          description: List of SSH Keys for User\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  required:\n                    - added\n                    - fingerprint\n                    - key\n                    - last_used\n                    - name\n                    - pkcs8_key\n                    - type\n                  properties:\n                    added:\n                      type: string\n                      format: date-time\n                      example: \"2019-05-15T09:43:37.216000Z\"\n                    fingerprint:\n                      type: string\n                      example: c470c5ba0110ce26fec082d233930fad\n                    key:\n                      type: string\n                      example: AAAAB3NzaC1yc2EAAAADAQABAAABAQDDIRSam+GcKAAnm0jF\\/VB12rtXCzpFE1gsT9CnFw5dYbP\n                    last_used:\n                      type: string\n                      format: date-time\n                      example: \"2019-08-12T08:22:10.519000Z\"\n                    name:\n                      type: string\n                      example: my-key\n                    pkcs8_key:\n                      type: string\n                      example: -----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhk\n                    type:\n                      type: string\n                      enum:\n                        - RSA\n                      example: RSA\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n      - restricted\n      summary: add SSH Key\n      operationId: addUserKeys\n      description: Upload a new SSH Public Key for User\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n      - $ref: '#/components/parameters/UsernameParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: false\n              required:\n                - name\n                - key\n              properties:\n                name:\n                  type: string\n                  example: my-key\n                  minLength: 1\n                key:\n                  type: string\n                  description: Content part of an RSA _Public_ Key\n                  minLength: 1\n                  example: AAAAB3NzaC1yc2EAAAADAQABAAABAQDDIRSam+GcKAAnm0jF\\/VB12rtXCzpFE1gsT9CnFw5dYbP\n      responses:\n        201:\n          description: SSH Key Uploaded\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{username}/keys/{fingerprint}:\n    delete:\n      tags:\n      - restricted\n      summary: delete key\n      operationId: deleteUserKey\n      description: Remove SSH Key from User\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n      - $ref: '#/components/parameters/UsernameParameter'\n      - in: path\n        required: true\n        name: fingerprint\n        schema:\n          type: string\n          description: SSH fingerprint of the key\n      responses:\n        204:\n          description: SSH Key Deleted\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{username}/password:\n    patch:\n      tags:\n      - restricted\n      summary: update password\n      operationId: updateUserPassword\n      description: Change password for User\n      security:\n        - token: []\n        - oauth: []\n      parameters:\n      - $ref: '#/components/parameters/UsernameParameter'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - new\n              properties:\n                current:\n                  type: string\n                  format: password\n                  description: Current password (required if updating own password)\n                new:\n                  type: string\n                  format: password\n                  description: New password\n                  minLength: 6\n                  example: my-super-password\n      responses:\n        204:\n          description: Password Changed\n        400:\n          description: Bad Request (invalid input)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InputError'\n        401:\n          description: Unauthorized\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  securitySchemes:\n    token:\n      type: apiKey\n      description: API Token\n      name: token\n      in: header\n    oauth:\n      type: oauth2\n      description: OAuth2\n      flows:\n        password:\n          tokenUrl: https://api.farm.openzim.org/v1/auth/oauth2\n          refreshUrl: https://api.farm.openzim.org/v1/auth/oauth2\n  parameters:\n    SkipParameter:\n      in: query\n      name: skip\n      description: number of records to skip for pagination (yay)\n      required: false\n      schema:\n        $ref: '#/components/schemas/SkipProperty'\n    LimitParameter:\n      in: query\n      name: limit\n      description: maximum number of records to return\n      required: false\n      schema:\n        $ref: '#/components/schemas/LimitProperty'\n    ScheduleNameParameter:\n      in: path\n      required: true\n      name: scheduleName\n      schema:\n        $ref: '#/components/schemas/ScheduleName'\n    ScheduleNameQueryParameter:\n      in: query\n      required: false\n      name: schedule_name\n      description: filter by schedule_name\n      schema:\n        $ref: '#/components/schemas/ScheduleName'\n    UsernameParameter:\n      in: path\n      required: true\n      name: username\n      schema:\n        $ref: '#/components/schemas/Username'\n    TaskIdParameter:\n      in: path\n      name: taskId\n      required: true\n      schema:\n        type: string\n    StatusParameter:\n      in: query\n      name: status\n      description: only those matching this statuses\n      required: false\n      schema:\n        $ref: '#/components/schemas/TaskStatus'\n  schemas:\n    Language:\n      type: object\n      required:\n      - code\n      - name_en\n      - name_native\n      properties:\n        code:\n          type: string\n          format: ISO 639-1 language code\n          example: fr\n        name_en:\n          type: string\n          example: French\n        name_native:\n          type: string\n          example: Français\n    UserItem:\n      type: object\n      required:\n      - username\n      - email\n      properties:\n        username:\n          $ref: '#/components/schemas/Username'\n        email:\n          $ref: '#/components/schemas/UserEmail'\n    UserPayload:\n      type: object\n      additionalProperties: false\n      required:\n      - username\n      - password\n      - email\n      - scope\n      properties:\n        username:\n          $ref: '#/components/schemas/Username'\n        password:\n          type: string\n          format: password\n          minLength: 6\n        email:\n          $ref: '#/components/schemas/UserEmail'\n        scope:\n          $ref: '#/components/schemas/Scope'\n    Scope:\n      type: object\n      properties:\n        schedules:\n          $ref: '#/components/schemas/ScopeItem'\n        tasks:\n          $ref: '#/components/schemas/ScopeItem'\n        users:\n          type: object\n          properties:\n            read:\n              $ref: '#/components/schemas/BooleanProperty'\n            create:\n              $ref: '#/components/schemas/BooleanProperty'\n            update:\n              $ref: '#/components/schemas/BooleanProperty'\n            delete:\n              $ref: '#/components/schemas/BooleanProperty'\n            reset_password:\n              $ref: '#/components/schemas/BooleanProperty'\n            keys:\n              type: object\n              properties:\n                read:\n                  $ref: '#/components/schemas/BooleanProperty'\n                delete:\n                  $ref: '#/components/schemas/BooleanProperty'\n    ScopeItem:\n      type: object\n      properties:\n        read:\n          $ref: '#/components/schemas/BooleanProperty'\n        create:\n          $ref: '#/components/schemas/BooleanProperty'\n        update:\n          $ref: '#/components/schemas/BooleanProperty'\n        delete:\n          $ref: '#/components/schemas/BooleanProperty'\n    BooleanProperty:\n      type: boolean\n      example: true\n    Worker:\n      type: object\n      required:\n      - name\n      - username\n      - resources\n      - offliners\n      - last_seen\n      - status\n      properties:\n        name:\n          $ref: '#/components/schemas/WorkerName'\n        username:\n          $ref: '#/components/schemas/Username'\n        resources:\n          $ref: '#/components/schemas/ConfigResources'\n        offliners:\n          type: array\n          items:\n            $ref: '#/components/schemas/Offliner'\n          example:\n            - mwoffliner\n            - youtube\n        last_seen:\n          type: string\n          format: date-time\n        status:\n          type: string\n          enum:\n            - online\n            - offline\n          example: online\n    ScheduleItem:\n      type: object\n      required:\n        - config\n        - language\n        - name\n        - category\n      properties:\n        config:\n          type: object\n          required:\n            - task_name\n          properties:\n            task_name:\n              type: string\n        category:\n          $ref: '#/components/schemas/ScheduleCategory'\n        language:\n          $ref: '#/components/schemas/Language'\n        name:\n          type: string\n        most_recent_task:\n          type: object\n          required:\n            - _id\n            - status\n            - updated_at\n          properties:\n            _id:\n              $ref: '#/components/schemas/MongoId'\n            status:\n              $ref: '#/components/schemas/TaskStatus'\n            updated_at:\n              type: string\n              format: date-time\n    ScheduleCategory:\n      type: string\n      example: wikipedia\n      enum:\n        - gutenberg\n        - other\n        - phet\n        - psiram\n        - stack_exchange\n        - ted\n        - vikidia\n        - wikibooks\n        - wikinews\n        - wikipedia\n        - wikiquote\n        - wikisource\n        - wikispecies\n        - wikiversity\n        - wikivoyage\n        - wiktionary\n    Schedule:\n      type: object\n      additionalProperties: false\n      required:\n        - category\n        - config\n        - enabled\n        - language\n        - name\n        - tags\n      properties:\n        category:\n          $ref: '#/components/schemas/ScheduleCategory'\n        config:\n          $ref: '#/components/schemas/Config'\n        enabled:\n          type: boolean\n          example: true\n        language:\n          $ref: '#/components/schemas/Language'\n        name:\n          $ref: '#/components/schemas/ScheduleName'\n        most_recent_task:\n          type: object\n          required:\n            - _id\n            - status\n            - updated_at\n          properties:\n            _id:\n              $ref: '#/components/schemas/MongoId'\n            status:\n              $ref: '#/components/schemas/TaskStatus'\n            updated_at:\n              type: string\n              format: date-time\n        periodicity:\n          $ref: '#/components/schemas/Periodicity'\n        duration:\n          $ref: '#/components/schemas/Duration'\n        tags:\n          $ref: '#/components/schemas/ScheduleTags'\n    ScheduleName:\n      type: string\n      example: wikipedia_fr_all\n    Config:\n      type: object\n      required:\n        - flags\n        - image\n        - resources\n        - task_name\n        - warehouse_path\n      properties:\n        flags:\n          type: object\n        image:\n          $ref: '#/components/schemas/ConfigImage'\n        resources:\n          $ref: '#/components/schemas/ConfigResources'\n        task_name:\n          type: string\n          example: mwoffliner\n        warehouse_path:\n          type: string\n          example: /wikipedia\n    ConfigImage:\n      type: object\n      required:\n        - name\n        - tag\n      properties:\n        name:\n          type: string\n          example: openzim/mwoffliner\n        tag:\n          type: string\n          example: latest\n    ConfigResources:\n      type: object\n      required:\n        - cpu\n        - memory\n        - disk\n      properties:\n        cpu:\n          $ref: '#/components/schemas/Cpu'\n        memory:\n          $ref: '#/components/schemas/Memory'\n        disk:\n          $ref: '#/components/schemas/Disk'\n    Cpu:\n      type: integer\n      format: int32\n      example: 3\n      description: number of CPU cores required to run it\n    Memory:\n      type: integer\n      format: int32\n      example: 1024\n      description: RAM (in bytes) required to run it\n    Disk:\n      type: integer\n      format: int32\n      description: Disk space (in bytes) required to run it\n    Offliner:\n      type: string\n      enum:\n        - mwoffliner\n        - youtube\n        - gutenberg\n        - phet\n        - sotoki\n        - nautilus\n        - kolibri\n        - openedx\n        - ted\n        - wikihow\n        - zimit\n        - ifixit\n      example:\n        - mwoffliner\n        - sotoki\n    TaskItem:\n      type: object\n      required:\n        - _id\n        - status\n        - timestamp\n      properties:\n        _id:\n          $ref: '#/components/schemas/MongoId'\n        status:\n          $ref: '#/components/schemas/TaskStatus'\n        timestamp:\n          $ref: '#/components/schemas/TaskTimestamp'\n        worker:\n          $ref: '#/components/schemas/WorkerName'\n        schedule_name:\n          $ref: '#/components/schemas/ScheduleName'\n        updated_at:\n          $ref: '#/components/schemas/SingleTimestamp'\n    RequestedTask:\n      type: object\n      required:\n        - _id\n        - status\n        - schedule_name\n        - config\n        - timestamp\n        - priority\n        - worker\n      properties:\n        _id:\n          $ref: '#/components/schemas/MongoId'\n        status:\n          $ref: '#/components/schemas/TaskStatus'\n        schedule_name:\n          $ref: '#/components/schemas/ScheduleName'\n        config:\n          type: object\n          required:\n            - task_name\n            - image\n            - resources\n          properties:\n            task_name:\n              type: string\n              example: mwoffliner\n            image:\n              $ref: '#/components/schemas/ConfigImage'\n            resources:\n              $ref: '#/components/schemas/ConfigResources'\n        timestamp:\n          type: object\n          required:\n            - requested\n          properties:\n            requested:\n              type: string\n              format: date-time\n              example: \"2019-11-19T15:36:06.563000Z\"\n        priority:\n          type: integer\n          format: Int32\n          example: 0\n        worker:\n          $ref: '#/components/schemas/WorkerName'\n    Task:\n      type: object\n      required:\n        - _id\n        - config\n        - status\n        - events\n        - schedule\n        - schedule_name\n        - timestamp\n        - worker\n        - updated_at\n      properties:\n        _id:\n          $ref: '#/components/schemas/MongoId'\n        config:\n          $ref: '#/components/schemas/Config'\n        status:\n          $ref: '#/components/schemas/TaskStatus'\n        events:\n          type: array\n          items:\n            $ref: '#/components/schemas/Event'\n        schedule:\n          $ref: '#/components/schemas/Schedule'\n        schedule_name:\n          $ref: '#/components/schemas/ScheduleName'\n        timestamp:\n          $ref: '#/components/schemas/TaskTimestamp'\n        worker:\n          $ref: '#/components/schemas/WorkerName'\n        updated_at:\n          $ref: '#/components/schemas/SingleTimestamp'\n        container:\n          type: object\n          properties:\n            command:\n              type: array\n              items:\n                type: string\n              example:\n                - mwoffliner\n                - mwUrl\n                - http://fr.wikipedia.org\n            exit_code:\n              type: integer\n              format: int32\n              example: 1\n            image:\n              type: string\n              example: openzim/mwoffliner:latest\n            log:\n              type: string\n              example: \"das878sd7sa87f8f78dsf7dsds.log\"\n        debug:\n          type: object\n          properties:\n            exception:\n              type: string\n              example: \"SyntaxError at line 1\"\n            traceback:\n              type: string\n              example: null\n            log:\n              type: string\n              example: \"[2019-11-18 15:49:30,337: INFO] starting zimfarm task-worker\"\n    Error:\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          type: string\n          example: Not Found\n    InputError:\n      type: object\n      properties:\n        message:\n          oneOf:\n            - type: object\n              example: {\"schedule_name\": \"required field\"}\n            - type: string\n              example: Invalid signature format (not base64)\n    Token:\n      type: object\n      properties:\n        access_token:\n          type: string\n          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJkaXNwYXRjaGVyIiwiZXhwIj\n        token_type:\n          type: string\n          example: bearer\n        expires_in:\n          type: integer\n          format: int32\n          example: 3600\n        refresh_token:\n          type: string\n          example: aea891db-090b-4cbb-6qer-57c0928b42e6\n    MetaProperty:\n      type: object\n      properties:\n        count:\n          type: integer\n          example: 1\n        limit:\n          type: integer\n          example: 10\n        skip:\n          type: integer\n          example: 0\n    LimitProperty:\n      type: integer\n      format: int32\n      minimum: 0\n      example: 10\n      default: 10\n    SkipProperty:\n      type: integer\n      format: int32\n      minimum: 0\n      example: 0\n      default: 0\n    MongoId:\n      type: string\n      format: uuid\n      example: 5dbc599b3b61e21c362703e4\n    Username:\n      type: string\n      example: john\n      minLength: 1\n    UserEmail:\n      type: string\n      format: email\n      example: john@doe.org\n    ScheduleTags:\n      type: array\n      items:\n        type: string\n      example:\n        - selection\n        - full\n        - top\n    TaskStatus:\n      type: string\n      example: canceled\n      enum:\n        - started\n        - scraper_started\n        - scraper_completed\n        - scraper_killed\n        - failed\n        - cancel_requested\n        - canceled\n        - succeeded\n        - created_file\n        - uploaded_file\n    SingleTimestamp:\n      type: string\n      format: date-time\n      example: \"2019-11-19T15:36:06.563000Z\"\n    Event:\n      type: object\n      properties:\n        code:\n          $ref: '#/components/schemas/TaskStatus'\n        timestamp:\n          $ref: '#/components/schemas/SingleTimestamp'\n    WorkerName:\n      type: string\n      example: worker-name\n    TaskTimestamp:\n      type: object\n      required:\n        - requested\n      properties:\n        requested:\n          $ref: '#/components/schemas/SingleTimestamp'\n        reserved:\n          $ref: '#/components/schemas/SingleTimestamp'\n        started:\n          $ref: '#/components/schemas/SingleTimestamp'\n        scraper_started:\n          $ref: '#/components/schemas/SingleTimestamp'\n        scraper_completed:\n          $ref: '#/components/schemas/SingleTimestamp'\n        scraper_killed:\n          $ref: '#/components/schemas/SingleTimestamp'\n        failed:\n          $ref: '#/components/schemas/SingleTimestamp'\n        cancel_requested:\n          $ref: '#/components/schemas/SingleTimestamp'\n        canceled:\n          $ref: '#/components/schemas/SingleTimestamp'\n        succeeded:\n          $ref: '#/components/schemas/SingleTimestamp'\n    Priority:\n      type: number\n      format: Int32\n      description: Positive int priority for requested_task. Default priority is 0.\n      example: 5\n    Periodicity:\n      type: string\n      example: monthly\n      enum:\n        - manually\n        - monthly\n        - quarterly\n        - biannually\n        - annually\n    Duration:\n      type: object\n      required:\n        - value\n        - on\n        - task\n        - worker\n      properties:\n        value:\n          type: integer\n          format: int32\n          example: 1200\n          description: duration in seconds\n        on:\n          $ref: '#/components/schemas/SingleTimestamp'\n        task:\n          $ref: '#/components/schemas/MongoId'\n        worker:\n          $ref: '#/components/schemas/WorkerName'\n    Email:\n      type: string\n      format: email\n      example: user@kiwix.org\n    Platform:\n      type: string\n      example:\n        - wikimedia\n        - youtube\n    Role:\n      type: string\n      example: admin\n      enum:\n        - editor\n        - manager\n        - admin\n        - worker\n        - processor\n",
			"canonicalURL": "/github.com/openzim/zimfarm@3daf6b4c5f67161ad4953bc495fb57b819e1b193/-/blob/dispatcher/backend/docs/openapi_v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/openzim/zimfarm/blob/3daf6b4c5f67161ad4953bc495fb57b819e1b193/dispatcher/backend/docs/openapi_v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:2387: json: cannot unmarshal Go value of type ogen.Spec: spec: json: cannot unmarshal JSON boolean into Go value of type string"
}