{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/YouTubeNLP/Backend"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "spec/swagger.yml",
			"byteSize": 9988,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  version: 0.0.1\n  title: YouTubeNLP\n  description: This is the specification for the YouTubeNLP backend services.\n\nservers:\n  - description: YouTubeNLP Backend API\n    url: https://{environment}.youtubenlp.com/v{version}\n    variables:\n      environment:\n        default: dev\n        enum:\n          - api   # YouTubeNLP Production Endpoint\n          - dev   # YouTubeNLP Development Endpoint\n          - stage # YouTubeNLP Staging Endpoint\n      version: \n        default: 0.0.1\n\npaths:\n\n  /sentiments/{videoId}/score:\n    get:\n      description: Aggregate sentiment analysis.\n      parameters:\n        - name: videoId\n          description: Video code from YouTube url.\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/VideoId'\n      responses:\n        200:\n          description: Successfully returned sentiment values.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Score'\n\n  /sentiments/{videoId}:\n    get:\n      description: Sentiment analysis sentences.\n      parameters:\n        - name: videoId\n          description: Video code from YouTube url.\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/VideoId'            \n        - name: k\n          description: Top k values.\n          in: query\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n      responses:\n        200:\n          description: Successfully returned sentiment values.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Sentence'\n\n  /comments/{videoId}:\n    get:\n      description: Most engaged comments.\n      parameters:\n        - name: videoId\n          description: Video code from YouTube url.\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/VideoId'           \n      responses:\n        200:\n          description: Successfully returned scored comments.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n\n  /comments/{videoId}/controversial:\n    get:\n      description: Most engaged comments.\n      parameters:\n        - name: videoId\n          description: Video code from YouTube url.\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/VideoId'\n        - name: k\n          description: Top k values.\n          in: query\n          required: true\n          schema:\n            type: integer\n            format: float\n            minimum: 1\n        - name: lambda1\n          description: Lower bound weight of number of dislikes.\n          in: query\n          required: true\n          schema:\n            type: integer\n            format: float\n            minimum: 0\n            maximum: 1\n        - name: lambda2\n          description: Upper bound weight of number of dislikes.\n          in: query\n          required: true\n          schema:\n            type: integer\n            format: float\n            minimum: 0\n            maximum: 1\n      responses:\n        200:\n          description: Successfully returned controversial comments string.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  controversial:\n                    type: array\n                    items:\n                      type: string\n\n  /emotions/{videoId}/score:\n    get:\n      description: Emotion analysis score.\n      parameters:\n        - name: videoId\n          description: Video code from YouTube url.\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/VideoId'\n      responses:\n        200:\n          description: Successfully returned sentiment values.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Emotion'\n\n  /ner/{videoId}:\n    get:\n      description: Named entity recognition from video.\n      parameters:\n        - name: videoId\n          description: Video code from YouTube url.\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/VideoId'\n      responses:\n        200:\n          description: Successfully returned entities as string.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entity'  \n\n  /ner/{videoId}/targeted:\n    get:\n      description: NER for targed Entity.\n      parameters:\n        - name: videoId\n          description: Video code from YouTube url.\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/VideoId'\n        - name: entity\n          description: Entity value.\n          in: query\n          required: true\n          schema: \n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: Successfully returned entities as string.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Person'\n\n  /lda/{videoId}:\n    get:\n      description: Topic modelling using linear discriminant analysis.\n      parameters:\n        - name: videoId\n          description: Video code from YouTube url.\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/VideoId'\n        - name: n\n          description: Number of topics.\n          in: query\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n      responses:\n        200:\n          description: Successfully returned sentiment values.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Topic'\n\n  /world-cloud/{videoId}:\n    get:\n      description: Word Cloud Visualization.\n      parameters:\n        - name: videoId\n          description: Video code from YouTube url.\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/VideoId'\n      responses:\n        200:\n          description: Successfully returned dictonary of words with their frequency.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Word'\n\ncomponents:\n  schemas:\n  \n    VideoId:\n      description: NA\n      type: string\n      format: uuid\n      maxLength: 11\n  \n    Score:\n      description: NA\n      type: object\n      properties:\n        positive:\n          type: integer\n          format: float\n          minimum: 0\n          maximum: 1\n        negative:\n          type: integer\n          format: float\n          minimum: 0\n          maximum: 1\n        neutral:\n          type: integer\n          format: float\n          minimum: 0\n          maximum: 1\n  \n    Sentence:\n      description: NA\n      type: object\n      properties:\n        positive:\n          type: array\n          items:\n            type: string\n        negative:\n          type: array\n          items:\n            type: string\n        neutral:\n          type: array\n          items:\n            type: string\n  \n    Comment:\n      description: NA\n      type: object\n      properties:\n        positive:\n          type: array\n          items:\n            type: string\n        negative:\n          type: array\n          items:\n            type: string\n        neutral:\n          type: array\n          items:\n            type: string\n  \n    Emotion:\n      description: NA\n      type: object\n      properties:\n        anger:\n          $ref: '#/components/schemas/Lambda'\n        sadness:\n          $ref: '#/components/schemas/Lambda'         \n        fear:\n          $ref: '#/components/schemas/Lambda'        \n        joy:\n          $ref: '#/components/schemas/Lambda'         \n        interest:\n          $ref: '#/components/schemas/Lambda'         \n        surprise:\n          $ref: '#/components/schemas/Lambda'         \n        disgust:\n          $ref: '#/components/schemas/Lambda'         \n        shame:\n          $ref: '#/components/schemas/Lambda'\n\n    Lambda:\n      description: NA\n      type: integer\n      format: double\n      minimum: 0\n      maximum: 1\n\n    Entity:\n      description: NA\n      type: object\n      properties:\n        person:\n          type: array\n          items:\n            type: string\n        place:\n          type: array\n          items:\n            type: string\n        event:\n          type: array\n          items:\n            type: string\n        time:\n          type: array\n          items:\n            type: string\n\n    Person:\n      description: NA\n      type: object\n      properties:\n        name:\n          type: string\n        sentiments:\n          type: object\n          properties:\n            positive:\n              $ref: '#/components/schemas/Sentiment'\n            negative:\n              $ref: '#/components/schemas/Sentiment'\n            neutral:\n              $ref: '#/components/schemas/Sentiment'\n\n    Sentiment:\n      description: NA\n      type: object\n      properties: \n        score: \n          type: integer\n          format: float\n          minimum: 0\n          maximum: 1\n        corresponding_sentences:\n          type: array\n          items:\n            type: string\n\n    Topic:\n      description: NA\n      type: array\n      items:\n        type: object\n        properties:\n          name:\n            type: string\n          corresponding_words:\n            type: array\n            items:\n              type: string\n\n    Word:\n      description: NA\n      type: object\n      properties:\n        name:\n          type: string\n        freqency:\n          type: integer\n          format: int32\n          minimum: 1"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal bool into Go struct field Parameter.paths.get.parameters.name of type string"
}