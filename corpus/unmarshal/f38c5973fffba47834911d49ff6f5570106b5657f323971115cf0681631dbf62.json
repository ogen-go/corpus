{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Apicurio/apicurio-registry"
		},
		"file": {
			"name": "openapi.json",
			"size": 0,
			"path": "app/src/main/resources-unfiltered/META-INF/resources/api-specifications/cncf/v0/openapi.json",
			"byteSize": 17212,
			"content": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n        \"title\": \"Cloud Native Data Schema Registry\",\n        \"version\": \"0.1\"\n    },\n    \"paths\": {\n        \"/schemagroups\": {\n            \"get\": {\n                \"tags\": [\n                    \"groups\"\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"string\"\n                                    }\n                                }\n                            }\n                        },\n                        \"description\": \"OK\"\n                    }\n                },\n                \"operationId\": \"getGroups\",\n                \"summary\": \"Get list of schema groups\",\n                \"description\": \"Get all schema groups in namespace.\"\n            }\n        },\n        \"/schemagroups/{group-id}\": {\n            \"get\": {\n                \"tags\": [\n                    \"groups\"\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/SchemaGroup\"\n                                }\n                            }\n                        },\n                        \"description\": \"OK\"\n                    },\n                    \"404\": {\n                        \"description\": \"Specified group not found\"\n                    }\n                },\n                \"operationId\": \"getGroup\",\n                \"summary\": \"Get schema group\",\n                \"description\": \"Get schema group description in registry namespace.\"\n            },\n            \"put\": {\n                \"requestBody\": {\n                    \"description\": \"schema group description\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/SchemaGroup\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"tags\": [\n                    \"groups\"\n                ],\n                \"responses\": {\n                    \"201\": {\n                        \"headers\": {\n                            \"Location\": {\n                                \"schema\": {\n                                    \"type\": \"string\"\n                                }\n                            }\n                        },\n                        \"description\": \"Created\"\n                    },\n                    \"409\": {\n                        \"description\": \"Schema group already exists\"\n                    }\n                },\n                \"operationId\": \"createGroup\",\n                \"summary\": \"Create schema group\",\n                \"description\": \"Create schema group with specified format in registry namespace.\"\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"groups\"\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"OK no content\"\n                    },\n                    \"404\": {\n                        \"description\": \"Specified group not found\"\n                    }\n                },\n                \"operationId\": \"deleteGroup\",\n                \"summary\": \"Delete schema group\",\n                \"description\": \"Delete schema group in schema registry namespace.\"\n            },\n            \"parameters\": [\n                {\n                    \"name\": \"group-id\",\n                    \"description\": \"schema group\",\n                    \"schema\": {\n                        \"type\": \"string\"\n                    },\n                    \"in\": \"path\",\n                    \"required\": true\n                }\n            ]\n        },\n        \"/schemagroups/{group-id}/schemas\": {\n            \"get\": {\n                \"tags\": [\n                    \"groups\"\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"string\"\n                                    }\n                                }\n                            }\n                        },\n                        \"description\": \"OK\"\n                    },\n                    \"404\": {\n                        \"description\": \"Group not found\"\n                    }\n                },\n                \"operationId\": \"getSchemasByGroup\",\n                \"summary\": \"List schemas for group id\",\n                \"description\": \"Returns schema by group id.\"\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"groups\"\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"OK no content\"\n                    },\n                    \"404\": {\n                        \"description\": \"Group not found\"\n                    }\n                },\n                \"operationId\": \"deleteSchemasByGroup\",\n                \"summary\": \"Deletes all schemas in group\",\n                \"description\": \"Deletes all schemas under specified group id.\"\n            },\n            \"parameters\": [\n                {\n                    \"name\": \"group-id\",\n                    \"description\": \"schema group\",\n                    \"schema\": {\n                        \"type\": \"string\"\n                    },\n                    \"in\": \"path\",\n                    \"required\": true\n                }\n            ]\n        },\n        \"/schemagroups/{group-id}/schemas/{schema-id}\": {\n            \"get\": {\n                \"tags\": [\n                    \"schemas\"\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"$ref\": \"#/components/responses/SchemaBytePayloadResponse\"\n                    }\n                },\n                \"operationId\": \"getLatestSchema\",\n                \"summary\": \"Get latest version of schema\",\n                \"description\": \"Get latest version of schema.\"\n            },\n            \"post\": {\n                \"requestBody\": {\n                    \"description\": \"schema content\",\n                    \"content\": {\n                        \"application/json;format=avro\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/SchemaBytePayload\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"tags\": [\n                    \"registration\"\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"$ref\": \"#/components/responses/SchemaIdResponse\"\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid request\"\n                    }\n                },\n                \"operationId\": \"createSchema\",\n                \"summary\": \"Register schema\",\n                \"description\": \"Register schema. If schema of specified name does not exist in specified group, schema is created at version 1. If schema of specified name exists already in specified group, schema is created at latest version + 1. If schema with identical content already exists, existing schema's ID is returned. \\n\"\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"schemas\"\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"OK no content\"\n                    },\n                    \"404\": {\n                        \"description\": \"Matching schema not found\"\n                    }\n                },\n                \"operationId\": \"deleteSchema\",\n                \"summary\": \"Delete schema\"\n            },\n            \"parameters\": [\n                {\n                    \"name\": \"group-id\",\n                    \"description\": \"schema group\",\n                    \"schema\": {\n                        \"type\": \"string\"\n                    },\n                    \"in\": \"path\",\n                    \"required\": true\n                },\n                {\n                    \"name\": \"schema-id\",\n                    \"description\": \"schema id\",\n                    \"schema\": {\n                        \"type\": \"string\"\n                    },\n                    \"in\": \"path\",\n                    \"required\": true\n                }\n            ]\n        },\n        \"/schemagroups/{group-id}/schemas/{schema-id}/versions\": {\n            \"get\": {\n                \"tags\": [\n                    \"versions\"\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json;format=avro\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"integer\"\n                                    }\n                                }\n                            }\n                        },\n                        \"description\": \"OK\"\n                    }\n                },\n                \"operationId\": \"getSchemaVersions\",\n                \"summary\": \"Get list of versions\",\n                \"description\": \"Get list of versions for specified schema\"\n            },\n            \"parameters\": [\n                {\n                    \"name\": \"group-id\",\n                    \"description\": \"schema group\",\n                    \"schema\": {\n                        \"type\": \"string\"\n                    },\n                    \"in\": \"path\",\n                    \"required\": true\n                },\n                {\n                    \"name\": \"schema-id\",\n                    \"description\": \"schema id\",\n                    \"schema\": {\n                        \"type\": \"string\"\n                    },\n                    \"in\": \"path\",\n                    \"required\": true\n                }\n            ]\n        },\n        \"/schemagroups/{group-id}/schemas/{schema-id}/versions/{version-number}\": {\n            \"get\": {\n                \"tags\": [\n                    \"versions\"\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"$ref\": \"#/components/responses/SchemaBytePayloadResponse\"\n                    },\n                    \"404\": {\n                        \"description\": \"Specified schema not found\"\n                    }\n                },\n                \"operationId\": \"getSchemaVersion\",\n                \"summary\": \"Get specified version of schema\"\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"versions\"\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"OK no content\"\n                    }\n                },\n                \"operationId\": \"deleteSchemaVersion\",\n                \"summary\": \"Delete specified version of schema\"\n            },\n            \"parameters\": [\n                {\n                    \"name\": \"group-id\",\n                    \"description\": \"schema group\",\n                    \"schema\": {\n                        \"type\": \"string\"\n                    },\n                    \"in\": \"path\",\n                    \"required\": true\n                },\n                {\n                    \"name\": \"schema-id\",\n                    \"description\": \"schema id\",\n                    \"schema\": {\n                        \"type\": \"string\"\n                    },\n                    \"in\": \"path\",\n                    \"required\": true\n                },\n                {\n                    \"name\": \"version-number\",\n                    \"description\": \"version number\",\n                    \"schema\": {\n                        \"type\": \"integer\"\n                    },\n                    \"in\": \"path\",\n                    \"required\": true\n                }\n            ]\n        },\n        \"x-codegen-contextRoot\": \"/cncf/v0.1\"\n    },\n    \"components\": {\n        \"schemas\": {\n            \"SchemaId\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"SchemaGroup\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\"\n                    },\n                    \"createdtimeutc\": {\n                        \"format\": \"date-time\",\n                        \"type\": \"string\"\n                    },\n                    \"updatedtimeutc\": {\n                        \"format\": \"date-time\",\n                        \"type\": \"string\"\n                    },\n                    \"format\": {\n                        \"type\": \"string\"\n                    },\n                    \"groupProperties\": {\n                        \"$ref\": \"#/components/schemas/GroupProperties\",\n                        \"additionalProperties\": {\n                            \"type\": \"string\"\n                        },\n                        \"x-codegen-inline\": true,\n                        \"x-codegen-type\": \"StringMap\"\n                    }\n                }\n            },\n            \"GroupProperties\": {\n                \"description\": \"Set of properties for a schemagroup.\",\n                \"type\": \"object\",\n                \"additionalProperties\": {\n                    \"type\": \"string\"\n                },\n                \"x-codegen-inline\": true,\n                \"x-codegen-type\": \"StringMap\"\n            },\n            \"SchemaBytePayload\": {\n                \"format\": \"binary\",\n                \"type\": \"string\"\n            }\n        },\n        \"responses\": {\n            \"SchemaIdResponse\": {\n                \"headers\": {\n                    \"Location\": {\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"Schema-Id\": {\n                        \"schema\": {\n                            \"format\": \"uuid\",\n                            \"type\": \"string\"\n                        },\n                        \"description\": \"unique schema identifier\"\n                    },\n                    \"Schema-Id-Location\": {\n                        \"schema\": {\n                            \"format\": \"url\",\n                            \"type\": \"string\"\n                        },\n                        \"description\": \"location of schema resource\"\n                    },\n                    \"Schema-Version\": {\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        },\n                        \"description\": \"version of returned schema\"\n                    }\n                },\n                \"content\": {\n                    \"application/json;format=avro\": {\n                        \"schema\": {\n                            \"$ref\": \"#/components/schemas/SchemaId\"\n                        }\n                    },\n                    \"application/json;format=protobuf\": {\n                        \"schema\": {\n                            \"$ref\": \"#/components/schemas/SchemaId\"\n                        }\n                    }\n                },\n                \"description\": \"OK\"\n            },\n            \"SchemaBytePayloadResponse\": {\n                \"headers\": {\n                    \"Location\": {\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"Schema-Id\": {\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"description\": \"schema identifier\"\n                    },\n                    \"Schema-Id-Location\": {\n                        \"schema\": {\n                            \"format\": \"url\",\n                            \"type\": \"string\"\n                        },\n                        \"description\": \"location of schema resource\"\n                    },\n                    \"Schema-Version\": {\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        },\n                        \"description\": \"version of returned schema\"\n                    }\n                },\n                \"content\": {\n                    \"application/json;format=avro\": {\n                        \"schema\": {\n                            \"$ref\": \"#/components/schemas/SchemaBytePayload\"\n                        }\n                    }\n                },\n                \"description\": \"OK\"\n            }\n        }\n    }\n}",
			"canonicalURL": "/github.com/Apicurio/apicurio-registry@89e7e35031841ed8b83792cc86d07a3055a8a5f5/-/blob/app/src/main/resources-unfiltered/META-INF/resources/api-specifications/cncf/v0/openapi.json",
			"externalURLs": [
				{
					"url": "https://github.com/Apicurio/apicurio-registry/blob/89e7e35031841ed8b83792cc86d07a3055a8a5f5/app/src/main/resources-unfiltered/META-INF/resources/api-specifications/cncf/v0/openapi.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 354:46: json: cannot unmarshal string into Go struct field Alias.paths of type ogen.PathItem"
}