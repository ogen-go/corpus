{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/koumoul-dev/vue-openapi"
		},
		"file": {
			"name": "petstore.json",
			"size": 0,
			"path": "test/petstore.json",
			"byteSize": 22308,
			"content": "{\n  \"openapi\": \"3.0.0-RC0\",\n  \"servers\": [{\n    \"url\": \"http://petstore.swagger.io/v2\"\n  }],\n  \"info\": {\n    \"description\": \"This is a sample server Petstore server.  You can find out more about Swagger at \u003ca href=\\\"http://swagger.io\\\"\u003ehttp://swagger.io\u003c/a\u003e or on irc.freenode.net, #swagger.  For this sample, you can use the api key \\\"special-key\\\" to test the authorization filters\",\n    \"version\": \"1.0.0\",\n    \"title\": \"Swagger Petstore\",\n    \"termsOfService\": \"http://swagger.io/terms/\",\n    \"contact\": {\n      \"url\": \"http://swagger.io\",\n      \"name\": \"Your pals at Swagger\",\n      \"email\": \"apiteam@swagger.io\"\n    },\n    \"license\": {\n      \"name\": \"Apache 2.0\",\n      \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  },\n  \"tags\": [{\n    \"name\": \"user\",\n    \"description\": \"Operations about user\"\n  }, {\n    \"name\": \"store\",\n    \"description\": \"Access to Petstore orders\",\n    \"externalDocs\": {\n      \"description\": \"Find out more\",\n      \"url\": \"http://swagger.io\"\n    }\n  }, {\n    \"name\": \"pet\",\n    \"description\": \"Everything about your Pets\",\n    \"externalDocs\": {\n      \"description\": \"Find out more\",\n      \"url\": \"http://swagger.io\"\n    }\n  }],\n  \"paths\": {\n    \"/pet\": {\n      \"post\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Add a new pet to the store\",\n        \"description\": \"\",\n        \"operationId\": \"addPet\",\n        \"parameters\": [],\n        \"responses\": {\n          \"405\": {\n            \"description\": \"Invalid input\"\n          }\n        },\n        \"security\": [{\n          \"petstore_auth\": [\n            \"write:pets\",\n            \"read:pets\"\n          ]\n        }],\n        \"requestBody\": {\n          \"$ref\": \"#/components/requestBodies/requestBody1\"\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Update an existing pet\",\n        \"description\": \"\",\n        \"operationId\": \"updatePet\",\n        \"parameters\": [],\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Pet not found\"\n          },\n          \"405\": {\n            \"description\": \"Validation exception\"\n          }\n        },\n        \"security\": [{\n          \"petstore_auth\": [\n            \"write:pets\",\n            \"read:pets\"\n          ]\n        }],\n        \"requestBody\": {\n          \"$ref\": \"#/components/requestBodies/requestBody1\"\n        }\n      }\n    },\n    \"/pet/findByStatus\": {\n      \"get\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Finds Pets by status\",\n        \"description\": \"Multiple status values can be provided with comma seperated strings\",\n        \"operationId\": \"findPetsByStatus\",\n        \"parameters\": [{\n          \"in\": \"query\",\n          \"name\": \"status\",\n          \"description\": \"Status values that need to be considered for filter\",\n          \"required\": false,\n          \"schema\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Pet\"\n                  }\n                }\n              },\n              \"application/xml\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Pet\"\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid status value\"\n          }\n        },\n        \"security\": [{\n          \"petstore_auth\": [\n            \"write:pets\",\n            \"read:pets\"\n          ]\n        }]\n      }\n    },\n    \"/pet/findByTags\": {\n      \"get\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Finds Pets by tags\",\n        \"description\": \"Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.\",\n        \"operationId\": \"findPetsByTags\",\n        \"parameters\": [{\n          \"in\": \"query\",\n          \"name\": \"tags\",\n          \"description\": \"Tags to filter by\",\n          \"required\": false,\n          \"schema\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Pet\"\n                  },\n                  \"example\": {\n                    \"name\": \"rex\",\n                    \"photoUrls\": []\n                  }\n                }\n              },\n              \"application/xml\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Pet\"\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid tag value\"\n          }\n        },\n        \"security\": [{\n          \"petstore_auth\": [\n            \"write:pets\",\n            \"read:pets\"\n          ]\n        }]\n      }\n    },\n    \"/pet/{petId}\": {\n      \"parameters\": [{\n        \"in\": \"path\",\n        \"name\": \"petId\",\n        \"description\": \"ID of pet\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        }\n      }],\n      \"get\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Find pet by ID\",\n        \"description\": \"Returns a pet when ID \u003c 10.  ID \u003e 10 or nonintegers will simulate API error conditions\",\n        \"operationId\": \"getPetById\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Pet\"\n                }\n              },\n              \"application/xml\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Pet\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Pet not found\"\n          }\n        },\n        \"security\": [{\n          \"api_key\": []\n        }, {\n          \"petstore_auth\": [\n            \"write:pets\",\n            \"read:pets\"\n          ]\n        }]\n      },\n      \"post\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Updates a pet in the store with form data\",\n        \"description\": \"\",\n        \"operationId\": \"updatePetWithForm\",\n        \"responses\": {\n          \"405\": {\n            \"description\": \"Invalid input\"\n          }\n        },\n        \"security\": [{\n          \"petstore_auth\": [\n            \"write:pets\",\n            \"read:pets\"\n          ]\n        }],\n        \"requestBody\": {\n          \"content\": {\n            \"application/x-www-form-urlencoded\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": {\n                    \"description\": \"Updated name of the pet\",\n                    \"type\": \"string\",\n                    \"required\": true\n                  },\n                  \"status\": {\n                    \"description\": \"Updated status of the pet\",\n                    \"type\": \"string\",\n                    \"required\": true\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Deletes a pet\",\n        \"description\": \"\",\n        \"operationId\": \"deletePet\",\n        \"parameters\": [{\n          \"in\": \"header\",\n          \"name\": \"api_key\",\n          \"description\": \"\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }],\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid pet value\"\n          }\n        },\n        \"security\": [{\n          \"petstore_auth\": [\n            \"write:pets\",\n            \"read:pets\"\n          ]\n        }]\n      }\n    },\n    \"/store/order\": {\n      \"post\": {\n        \"tags\": [\n          \"store\"\n        ],\n        \"summary\": \"Place an order for a pet\",\n        \"description\": \"\",\n        \"operationId\": \"placeOrder\",\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Order\"\n                }\n              },\n              \"application/xml\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Order\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid Order\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"description\": \"order placed for purchasing the pet\",\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Order\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/store/order/{orderId}\": {\n      \"parameters\": [{\n        \"in\": \"path\",\n        \"name\": \"orderId\",\n        \"description\": \"ID of the order\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"string\"\n        }\n      }],\n      \"get\": {\n        \"tags\": [\n          \"store\"\n        ],\n        \"summary\": \"Find purchase order by ID\",\n        \"description\": \"For valid response try integer IDs with value \u003c= 5 or \u003e 10. Other values will generated exceptions\",\n        \"operationId\": \"getOrderById\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Order\"\n                }\n              },\n              \"application/xml\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Order\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Order not found\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"store\"\n        ],\n        \"summary\": \"Delete purchase order by ID\",\n        \"description\": \"For valid response try integer IDs with value \u003c 1000. Anything above 1000 or nonintegers will generate API errors\",\n        \"operationId\": \"deleteOrder\",\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Order not found\"\n          }\n        }\n      }\n    },\n    \"/user\": {\n      \"post\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Create user\",\n        \"description\": \"This can only be done by the logged in user.\",\n        \"operationId\": \"createUser\",\n        \"parameters\": [],\n        \"responses\": {\n          \"default\": {\n            \"description\": \"successful operation\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"description\": \"Created user object\",\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/User\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/user/createWithArray\": {\n      \"post\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Creates list of users with given input array\",\n        \"description\": \"\",\n        \"operationId\": \"createUsersWithArrayInput\",\n        \"parameters\": [],\n        \"responses\": {\n          \"default\": {\n            \"description\": \"successful operation\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"description\": \"List of user object\",\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"User\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/user/createWithList\": {\n      \"post\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Creates list of users with given input array\",\n        \"description\": \"\",\n        \"operationId\": \"createUsersWithListInput\",\n        \"parameters\": [],\n        \"responses\": {\n          \"default\": {\n            \"description\": \"successful operation\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"description\": \"List of user object\",\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/User\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/user/login\": {\n      \"get\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Logs user into the system\",\n        \"description\": \"\",\n        \"operationId\": \"loginUser\",\n        \"parameters\": [{\n          \"in\": \"query\",\n          \"name\": \"username\",\n          \"description\": \"The user name for login\",\n          \"required\": false,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }, {\n          \"in\": \"query\",\n          \"name\": \"password\",\n          \"description\": \"The password for login in clear text\",\n          \"required\": false,\n          \"schema\": {\n            \"type\": \"string\",\n            \"format\": \"password\"\n          }\n        }],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"application/xml\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid username/password supplied\"\n          }\n        }\n      }\n    },\n    \"/user/logout\": {\n      \"get\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Logs out current logged in user session\",\n        \"description\": \"\",\n        \"operationId\": \"logoutUser\",\n        \"responses\": {\n          \"default\": {\n            \"description\": \"successful operation\"\n          }\n        }\n      }\n    },\n    \"/user/{username}\": {\n      \"parameters\": [{\n        \"in\": \"path\",\n        \"name\": \"username\",\n        \"description\": \"The user name\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"string\"\n        }\n      }],\n      \"get\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Get user by user name\",\n        \"description\": \"\",\n        \"operationId\": \"getUserByName\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/User\"\n                }\n              },\n              \"application/xml\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/User\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid username supplied\"\n          },\n          \"404\": {\n            \"description\": \"User not found\"\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Updated user\",\n        \"description\": \"This can only be done by the logged in user.\",\n        \"operationId\": \"updateUser\",\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid user supplied\"\n          },\n          \"404\": {\n            \"description\": \"User not found\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"description\": \"Updated user object\",\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/User\"\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Delete user\",\n        \"description\": \"This can only be done by the logged in user.\",\n        \"operationId\": \"deleteUser\",\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid username supplied\"\n          },\n          \"404\": {\n            \"description\": \"User not found\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"User\": {\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"xml\": {\n              \"name\": \"id\"\n            }\n          },\n          \"username\": {\n            \"type\": \"string\",\n            \"xml\": {\n              \"name\": \"username\"\n            }\n          },\n          \"firstName\": {\n            \"type\": \"string\",\n            \"xml\": {\n              \"name\": \"firstName\"\n            }\n          },\n          \"lastName\": {\n            \"type\": \"string\",\n            \"xml\": {\n              \"name\": \"lastName\"\n            }\n          },\n          \"email\": {\n            \"type\": \"string\",\n            \"xml\": {\n              \"name\": \"email\"\n            }\n          },\n          \"password\": {\n            \"type\": \"string\",\n            \"xml\": {\n              \"name\": \"password\"\n            }\n          },\n          \"phone\": {\n            \"type\": \"string\",\n            \"xml\": {\n              \"name\": \"phone\"\n            }\n          },\n          \"userStatus\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"xml\": {\n              \"name\": \"userStatus\"\n            },\n            \"description\": \"User Status\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"User\"\n        }\n      },\n      \"Category\": {\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"xml\": {\n              \"name\": \"id\"\n            }\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"xml\": {\n              \"name\": \"name\"\n            }\n          }\n        },\n        \"xml\": {\n          \"name\": \"Category\"\n        }\n      },\n      \"Pet\": {\n        \"required\": [\n          \"name\",\n          \"photoUrls\"\n        ],\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"xml\": {\n              \"name\": \"id\"\n            }\n          },\n          \"category\": {\n            \"xml\": {\n              \"name\": \"category\"\n            },\n            \"$ref\": \"#/components/schemas/Category\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\",\n            \"xml\": {\n              \"name\": \"name\"\n            }\n          },\n          \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n              \"name\": \"photoUrl\",\n              \"wrapped\": true\n            },\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n              \"name\": \"tag\",\n              \"wrapped\": true\n            },\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Tag\"\n            }\n          },\n          \"status\": {\n            \"type\": \"string\",\n            \"xml\": {\n              \"name\": \"status\"\n            },\n            \"description\": \"pet status in the store\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"Pet\"\n        }\n      },\n      \"Tag\": {\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"xml\": {\n              \"name\": \"id\"\n            }\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"xml\": {\n              \"name\": \"name\"\n            }\n          }\n        },\n        \"xml\": {\n          \"name\": \"Tag\"\n        }\n      },\n      \"Order\": {\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"xml\": {\n              \"name\": \"id\"\n            }\n          },\n          \"petId\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"xml\": {\n              \"name\": \"petId\"\n            }\n          },\n          \"quantity\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"xml\": {\n              \"name\": \"quantity\"\n            }\n          },\n          \"shipDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"xml\": {\n              \"name\": \"shipDate\"\n            }\n          },\n          \"status\": {\n            \"type\": \"string\",\n            \"xml\": {\n              \"name\": \"status\"\n            },\n            \"description\": \"Order Status\"\n          },\n          \"complete\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"Order\"\n        }\n      }\n    },\n    \"responses\": {},\n    \"parameters\": {},\n    \"examples\": {},\n    \"requestBodies\": {\n      \"requestBody1\": {\n        \"content\": {\n          \"application/json\": {\n            \"description\": \"Pet object that needs to be added to the store\",\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/Pet\"\n            },\n            \"example\": {\n              \"name\": \"rex\",\n              \"photoUrls\": []\n            }\n          },\n          \"application/xml\": {\n            \"description\": \"Pet object that needs to be added to the store\"\n          }\n        }\n      }\n    },\n    \"securitySchemes\": {\n      \"api_key\": {\n        \"type\": \"apiKey\",\n        \"name\": \"api_key\",\n        \"in\": \"header\"\n      },\n      \"petstore_auth\": {\n        \"type\": \"oauth2\",\n        \"flow\": {\n          \"implicit\": {\n            \"authorizationUrl\": \"http://petstore.swagger.io/api/oauth/dialog\",\n            \"scopes\": {}\n          }\n        }\n      }\n    },\n    \"headers\": {}\n  }\n}\n"
		}
	},
	"Error": "unmarshal: json: line 7:34: callback: json: cannot unmarshal bool into Go struct field Schema.required of type []string"
}