{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/YellowOSM/YellowOSM"
		},
		"file": {
			"name": "schema.yml",
			"size": 0,
			"path": "static/schema.yml",
			"byteSize": 8939,
			"content": "components:\n  schemas:\n    Geo58-Short:\n      properties:\n        geo58:\n          type: string\n      type: object\n    POI:\n      properties:\n        addr_city:\n          type: string\n        addr_country:\n          type: string\n        addr_housenumber:\n          type: string\n        addr_postcode:\n          type: string\n        addr_street:\n          type: string\n        address:\n          type: string\n        amenity:\n          type: string\n        contact_email:\n          type: string\n        location:\n          $ref: '#/components/schemas/coordinates'\n        name:\n          type: string\n        opening_hours:\n          type: string\n        osmid:\n          format: int32\n          type: integer\n        phone:\n          type: string\n        shop:\n          type: string\n        website:\n          type: string\n      type: object\n    XYCoordinates:\n      properties:\n        x:\n          format: float\n          type: number\n        y:\n          format: float\n          type: number\n        zoom:\n          format: float\n          type: number\n      type: object\n    coordinates:\n      properties:\n        lat:\n          format: float\n          type: number\n        lon:\n          format: float\n          type: number\n      type: object\ninfo:\n  contact:\n    name: YellowOSM\n    url: https://yellowosm.com/#contact\n  description: '# YellowOSM API\n\n\n    more information about YellowOSM and the API that lies behind these calls can\n    be found\n\n    in our\n\n    [Github Repo](https://github.com/YellowOSM/YellowOSM/tree/master/backend#backend-yellowosm)\n\n\n    The API allows to search YellowOSM data, resolve and create Geo58 short-strings\n    and get\n\n    data or vcards for specific osmIDs.\n\n\n    [YellowOSM - Repository](https://github.com/YellowOSM/YellowOSM)\n\n\n    [YellowOSM - Backend](https://github.com/YellowOSM/YellowOSM/tree/master/backend)\n\n\n    [YellowOSM - Frontend/Map](https://github.com/YellowOSM/YellowOSM/tree/master/frontend)\n\n    '\n  license:\n    name: GNU AGPL v3.0\n    url: https://www.gnu.org/licenses/agpl-3.0.en.html\n  title: Web Service\n  version: '1.0'\nopenapi: 3.0.2\npaths:\n  /api/coords_to_geo58/{zoom}/{x}/{y}: {}\n  /api/geo58/{zoom}/{x}/{y}:\n    get:\n      description: convert coordinates `z`/`x`/`y` to Geo58 short-string.\n      parameters:\n      - description: latitude from -90 to 90\n        example: 47.07424\n        in: path\n        name: x\n        required: true\n        schema:\n          type: number\n      - description: longitude from -180 to 180\n        example: 15.43258\n        in: path\n        name: y\n        required: true\n        schema:\n          type: number\n      - description: 'zoom level to be encoded in Geo58 String. must be between 5\n          and 20.\n\n          '\n        example: 20\n        in: path\n        name: zoom\n        required: true\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Geo58-Short'\n          description: get corresponding Geo58 short-string\n        '406':\n          description: coordinates invalid.\n      summary: get Geo58 short-string\n  /api/geo58_to_coords/{geo58_str}: {}\n  /api/geo58/{geo58_str}:\n    get:\n      description: convert Geo58 short-string to coordinates `z`/`x`/`y`.\n      parameters:\n      - example: 4dHEj1AKm\n        in: path\n        name: geo58_str\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/XYCoordinates'\n          description: get corresponding coordinates `z`/`x`/`y`.\n        '400':\n          description: invalid Geo58 short-code.\n      summary: get coordinates `z`/`x`/`y`\n  /api/redirect_geo58/: {}\n  /api/redirect_geo58/{geo58_str}:\n    get:\n      description: redirects to YellowOSM map with given short-string. this will resolve\n        the short-string and redirect to coordinates (`z`/`x`/`y`).\n      parameters:\n      - example: 4dHEj1AKm\n        in: path\n        name: geo58_str\n        required: true\n        schema:\n          type: string\n      responses:\n        '302':\n          description: redirect\n        '400':\n          description: invalid short code\n      summary: redirect to YellowOSM map\n  /api/get_vcard/{osm_id}: {}\n  /api/osmid/{osm_id}.vcard:\n    get:\n      description: returns a vcard for the given `osm_id`\n      parameters:\n      - description: osmID, same as on OpenStreetMap.\n        example: 317335810\n        in: path\n        name: osm_id\n        required: true\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            text/vcard:\n              schema:\n                $ref: '#/components/schemas/POI'\n          description: OK\n        '404':\n          description: osm_id not found\n        '504':\n          description: could not connect to database\n      summary: get vcard\n  /api/get_json/{osm_id}: {}\n  /api/osmid/{osm_id}:\n    get:\n      description: returns info for the given `osm_id`\n      parameters:\n      - description: osmID, same as on OpenStreetMap.\n        example: 317335810\n        in: path\n        name: osm_id\n        required: true\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/POI'\n          description: OK\n        '404':\n          description: osm_id not found\n        '504':\n          description: could not connect to database\n      summary: get osm_id info\n  /api/forward_ip: {}\n  /api/search/{query}:\n    get:\n      description: Get POIs that match `query`\n      parameters:\n      - example: Scherbe Graz\n        in: path\n        name: query\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/POI'\n          description: POIs returned.\n      summary: get search results\n  /api/search/{city}/{query}:\n    get:\n      description: Get POIs that match `query`\n      parameters:\n      - example: Weikhard\n        in: path\n        name: query\n        required: true\n        schema:\n          type: string\n      - description: limit search to 'city'\n        example: Graz\n        in: path\n        name: city\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/POI'\n          description: POIs returned.\n      summary: get search results\n  /api/search/{city}/{query}/{limit}:\n    get:\n      description: 'Get POIs that match `query`. search is limited to ''limit'' number\n        of results.\n\n        '\n      parameters:\n      - example: Sacher\n        in: path\n        name: query\n        required: true\n        schema:\n          type: string\n      - description: limit search to 'city'\n        example: Wien\n        in: path\n        name: city\n        required: true\n        schema:\n          type: string\n      - description: limit number of results to 'limit'\n        example: 10\n        in: path\n        name: limit\n        required: true\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/POI'\n          description: POIs returned.\n      summary: get search results\n  /api/search/{top_left_lat}/{top_left_lon}/{bottom_right_lat}/{bottom_right_lon}/{query}:\n    get:\n      description: 'Get POIs that match `query`. search is limited to bounding-box\n        coordinates.\n\n        '\n      parameters:\n      - example: Tribeka\n        in: path\n        name: query\n        required: true\n        schema:\n          type: string\n      - description: top left latitude of bounding-box\n        example: 47.09086\n        in: path\n        name: top_left_lat\n        required: true\n        schema:\n          type: number\n      - description: top left longitude of bounding-box\n        example: 15.39598\n        in: path\n        name: top_left_lon\n        required: true\n        schema:\n          type: number\n      - description: bottom right latitude of bounding-box\n        example: 47.03602\n        in: path\n        name: bottom_right_lat\n        required: true\n        schema:\n          type: number\n      - description: bottom right longitude of bounding-box\n        example: 15.48806\n        in: path\n        name: bottom_right_lon\n        required: true\n        schema:\n          type: number\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/POI'\n          description: POIs returned.\n      summary: get search results\n"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal bool into Go struct field Parameter.paths.get.parameters.name of type string"
}