{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nickadam/ordig"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "api/openapi.yml",
			"byteSize": 4188,
			"content": "openapi: 3.0.0\ninfo:\n  description: An API to facilitate client device enrollment with WireGuard VPN\n  version: \"1.0.0\"\n  title: ordig-api\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\nsecurity:\n  - api_key: []\npaths:\n  /api/v1/devices/{hostname}/config:\n    post:\n      summary: Get client device config\n      description: Client can get it's own device config using shared secrets\n      parameters:\n        - name: hostname\n          in: path\n          description: The device hostname\n          required: true\n          style: simple\n          explode: false,\n          schema:\n            type: string\n            example: \"nick-desktop\"\n      requestBody:\n        description: Client generated shared secret\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                key:\n                  type: string\n                  example: m0akoqv43ybi4jf0fpsg13du33vcnm66\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  succeeded:\n                    type: boolean\n                    example: true\n                  name:\n                    type: string\n                    example: wg0\n                  namespace:\n                    type: string\n                    example: example.com\n                  nameserver:\n                    type: string\n                    example: \"10.10.10.10\"\n                  config:\n                    type: string\n                    example: |\n                      [Interface]\n                      Address = 192.168.8.10/24\n                      PrivateKey = somethingsecret\n                      ListenPort = 51820\n\n                      [Peer]\n                      PublicKey = sZ9CyTvzsE502XPYBZaUuahrh043TUTt57+wzEYPZH4=\n                      AllowedIPs = 192.168.8.1/24\n                      Endpoint = wg.example.com:51820\n                      PersistentKeepalive = 25\n        400:\n          description: bad request\n          content:\n            application/json:\n              schema:\n                type: string\n                example: bad request\n        401:\n          description: unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n                example: invalid token\n        500:\n          description: error\n          content:\n            application/json:\n              schema:\n                type: string\n                example: some error\n  /api/v1/server/devices:\n    get:\n      summary: Get all device configs\n      description: The server gets a list of all the client configs\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  succeeded:\n                    type: boolean\n                    example: true\n                  configs:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        ip:\n                          type: string\n                          example: '192.168.0.2'\n                        public_key:\n                          type: string\n                          example: 'nIxqi6pp9CMEINeJOFOA31mEajKKkzMZC9DOin52pGs='\n        400:\n          description: bad request\n          content:\n            application/json:\n              schema:\n                type: string\n                example: bad request\n        401:\n          description: unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n                example: invalid token\n        500:\n          description: error\n          content:\n            application/json:\n              schema:\n                type: string\n                example: some error\ncomponents:\n  securitySchemes:\n    api_key:\n      type: http\n      scheme: bearer\n      bearerFormat: psk\n"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal string into Go struct field Parameter.paths.post.parameters.explode of type bool"
}