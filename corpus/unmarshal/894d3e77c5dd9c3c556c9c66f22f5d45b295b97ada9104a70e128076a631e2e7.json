{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/briangormanly/agora"
		},
		"file": {
			"name": "agoraApi.yaml",
			"size": 0,
			"path": "server/agoraApi.yaml",
			"byteSize": 66683,
			"content": "openapi: 3.0.2\ninfo:\n  title: Agora API\n  version: 1.0.0\n  description: Agora's super cool API. You can find out more about Agora at [https://freeagora.com](https://freeagora.com)\n  termsOfService: https://freeagora.com/terms/\n  contact:\n    email: api@freeagora.com\n  license:\n    name: BSD 3-Clause License\n    url: https://opensource.org/licenses/BSD-3-Clause\ntags:\n  - name: Tags\n    description: Manage global tags, tags are used to relate other entities and are associated to enities by users using the Tagged object.\npaths:\n  /tags:\n    get:\n      tags:\n        - Tags\n      summary: Retrieves all available tags, provide limit and offset for pagnation, top limit 100.\n      parameters:\n        - in: query\n          name: limit\n          schema:\n            type: integer\n          description: The number of records to return, maximum 100\n        - in: query\n          name: offset\n          schema:\n            type: integer\n          description: The starting record number, defaults to 0\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Tag\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    post:\n      tags:\n        - Tags\n      summary: Save a new tag. If the name of the tag already exists the current tag will not be duplicated. If the ownedBy member is provided with an existing tag name the owner will be updated to the provided value.  Only the tag value is required.\n      requestBody:\n        description: Include a Tag object to save in JSON format *NOTE* - Only the tag member is required, id will be ignored, lastUsed will be used if provided and override the default behavior of assigning the authenticed user id, lastUsed will be updated to the current time.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              $ref: \"#/components/schemas/ShortTag\"\n      responses:\n        \"201\":\n          description: New Tag created\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Tag\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"200\":\n          description: Updated existing record - the tag name already existed, current record used.\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Tag\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n  /tags/{id}:\n    get:\n      tags:\n        - Tags\n      summary: Retrieves existing tag by Id\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the tag to retrieve\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Tag\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    delete:\n      tags:\n        - Tags\n      summary: Deletes existing tag by Id\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the tag to delete\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Tag\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /tags/Tagged:\n    post:\n      tags:\n        - Tagged\n      summary: Associates a tag with an entity (by provided type and id), and a user (by user id). \n      requestBody:\n        description: Include a Tagged object to save in JSON format including a tag property with the .tag property containing the name of the tag *NOTE* - For the Tag object, only the tag member is required, id will be ignored, lastUsed will be used if provided and override the default behavior of assigning the authenticed user id, lastUsed will be updated to the current time.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              $ref: \"#/components/schemas/Tagged\"\n      responses:\n        \"201\":\n          description: New Tag association created\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Tagged\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"200\":\n          description: Updated existing record - the tag association already existed, current record used.\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Tagged\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n  /tags/tagged/{entityType}/{entityId}:\n    get:\n      tags:\n        - Tagged\n      summary: Retrieves Tags associated with an entity (by type and id)\n      parameters:\n        - in: path\n          name: entityType\n          schema:\n            type: string\n            enum: [\"unknown\", \"workspace\", \"topic\", \"resource\", \"user\"]\n            default: \"unknown\"\n            description: Type of the entity to find associated tags for\n        - in: path\n          name: entityId\n          schema:\n            type: integer\n            description: id of the entity to find associated tags for\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Tags\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /tags/tagged/{tagId}/{entityType}/{entityId}:\n    delete:\n      tags:\n        - Tagged\n      summary: Deletes a tag association, removing the tag (tagName) from an entity (by entityType, entityId) for owner (authorized api or client session user)\n      parameters:\n        - in: path\n          name: tagName\n          schema:\n            type: integer\n            description: tag to remove the association from\n        - in: path\n          name: entityType\n          schema:\n            type: string\n            enum: [\"unknown\", \"workspace\", \"topic\", \"resource\", \"user\"]\n            default: \"unknown\"\n            description: Type of the entity to remove the association from\n        - in: path\n          name: entityId\n          schema:\n            type: integer\n            description: id of the entity to remove the association from\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Tag\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /workspaces:\n    get:\n      tags:\n        - Workspaces\n      summary: Retrieves all available workspaces, provide limit and offset for pagnation, top limit 100.\n      parameters:\n        - in: query\n          name: limit\n          schema:\n            type: integer\n          description: The number of records to return, maximum 100\n        - in: query\n          name: offset\n          schema:\n            type: integer\n          description: The starting record number, defaults to 0\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Workspace/response\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    post:\n      tags:\n        - Workspaces\n      summary: Checks database for the workspace in requestBody by Id. If found and ownedBy flag set, updates existing workspace. If not found, creates new workspace.\n      requestBody:\n        description: Include a Workspace object to save in JSON format *NOTE* - Only the workspace member is required, id will be ignored.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              $ref: \"#/components/schemas/Workspace/request\"\n      responses:\n        \"201\":\n          description: New Workspace created\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Workspace/response\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"200\":\n          description: Updated existing record - the workspace name already existed, current record used.\n          application/json:\n            schema:\n              type: object\n              $ref: \"#/components/schemas/Workspace/response\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n  /workspaces/{id}:\n    get:\n      tags:\n        - Workspaces\n      summary: Retrieves existing workspace by Id\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the workspace to retrieve\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Workspace/response\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    delete:\n      tags:\n        - Workspaces\n      summary: Deletes existing workspace by Id\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the workspace to delete\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Workspace\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /workspaces/topics/{workspaceId}:\n    get:\n      tags:\n        - Workspaces\n      summary: Retrieves all topics for a given workspace.\n      parameters:\n        - in: path\n          name: workspaceId\n          schema:\n            type: integer\n          description: id of the workspace to retrieve corresponding Topics\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Topic/response\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /topics:\n    get:\n      tags:\n        - Topics\n      summary: Retrieves all available topics, provide limit and offset for pagnation, top limit 100.\n      parameters:\n        - in: query\n          name: limit\n          schema:\n            type: integer\n          description: The number of records to return, maximum 100\n        - in: query\n          name: offset\n          schema:\n            type: integer\n          description: The starting record number, defaults to 0\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Topic/response\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    post:\n      tags:\n        - Topics\n      summary: Checks database for the topic in requestBody by Id. If found and ownedBy flag set, updates existing topic. If not found, creates new topic.\n      requestBody:\n        description: Include a Topic object to save in JSON format *NOTE* - Only the topic member is required, id will be ignored.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              $ref: \"#/components/schemas/Topic/request\"\n      responses:\n        \"201\":\n          description: New Topic created\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Topic/response\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"200\":\n          description: Updated existing record - the topic name already existed, current record used.\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Topic/response\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n  /topics/shared:\n    get:\n      tags:\n        - Topics\n      summary: Retrieves all available shared topics\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Topic/response\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n  /topics/{id}:\n    get:\n      tags:\n        - Topics\n      summary: Retrieves existing topic by Id\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the topic to retrieve\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Topic/response\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    delete:\n      tags:\n        - Topics\n      summary: Deletes existing topic by Id\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the topic to delete\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Topic\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /resources:\n    get:\n      tags:\n        - Resources\n      summary: Retrieves all available resources, provide limit and offset for pagnation, top limit 100.\n      parameters:\n        - in: query\n          name: limit\n          schema:\n            type: integer\n          description: The number of records to return, maximum 100\n        - in: query\n          name: offset\n          schema:\n            type: integer\n          description: The starting record number, defaults to 0\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Resource/response\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    post:\n      tags:\n        - Resources\n      summary: Checks database for the resource in requestBody by Id. If found and ownedBy flag set, updates existing resource. If not found, creates new resource.\n      requestBody:\n        description: Include a Resource object to save in JSON format *NOTE* - Only the resouce member is required, id will be ignored.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              $ref: \"#/components/schemas/Resource/request\"\n      responses:\n        \"201\":\n          description: New Resource created\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Resource/response\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"200\":\n          description: Updated existing record - the resource name already existed, current record used.\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Resource/response\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n  /resources/user/{id}:\n    get:\n      tags:\n        - Resources\n      summary: Retrieves all available \u0026 active resources for a user\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the user to retrive their active resources\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Resource/response\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /resources/shared:\n    get:\n      tags:\n        - Resources\n      summary: Retrieves all available shared resources\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Resource/response\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n  /resources/{id}:\n    get:\n      tags:\n        - Resources\n      summary: Retrieves existing resource by Id\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the resource to retrieve\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Resource/response\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    delete:\n      tags:\n        - Resources\n      summary: Deletes existing resource by Id\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the resource to delete\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n                example: \"Success\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /discussions/workspace/{id}:\n    get:\n      tags:\n        - Discussions\n      summary: Gets the discussion by workspace ID\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the workspace\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Discussions\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    patch:\n      tags:\n        - Discussions\n      summary: \"Updates discussion using workspace ID\"\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the workspace\n      requestBody:\n        description: Json for updated text\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                discussion_text:\n                  type: string\n                  description: Text that you wish to update\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Discussions\"\n        headers:\n          x-agora-message-title:\n            schema:\n              type: string\n            description: Title of Agora API message\n          x-agora-message-message:\n            schema:\n              type: string\n            description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    post:\n      tags:\n        - Discussions\n      summary: \"Create a new discussion using workspace ID\"\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the workspace\n      requestBody:\n        description: Json for new text\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                discussion_text:\n                  type: string\n                  description: Text that you wish to start the discussion with\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Discussions\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /discussions/topic/{id}:\n    get:\n      tags:\n        - Discussions\n      summary: Gets the discussion by topic ID\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the topic\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Discussions\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    patch:\n      tags:\n        - Discussions\n      summary: \"Updates discussion using topic ID\"\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the topic\n      requestBody:\n        description: Json for updated text\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                discussion_text:\n                  type: string\n                  description: Text that you wish to update\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Discussions\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    post:\n      tags:\n        - Discussions\n      summary: \"Create a new discussion using topic id\"\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the topic\n      requestBody:\n        description: Json for updated text\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                text:\n                  type: string\n                  description: Text that you wish to update\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Discussions\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /discussions/rating/{commentid}:\n    post:\n      tags:\n        - Discussions\n      summary: \"Posts the rating for a specific comment\"\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the comment\n      requestBody:\n        description: Rating JSON\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                rating:\n                  type: boolean\n                userId:\n                  type: integer\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Comment\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    delete:\n      tags:\n        - Discussions\n      summary: \"Removes the rating for a comment\"\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the comment\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Comment\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /discussions/comment:\n    post:\n      tags:\n        - Discussions\n      summary: \"Post a new comment\"\n      requestBody:\n        description: Comment JSON requestBody\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              $ref: \"#/components/schemas/Comment\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Comment\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /discussions/comment/{id}:\n    patch:\n      tags:\n        - Discussions\n      summary: \"Change a currently existing comment\"\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the comment\n      requestBody:\n        description: Comment edit JSON object\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userId:\n                  type: integer\n                comment_text:\n                  type: integer\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Comment\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    delete:\n      tags:\n        - Discussions\n      summary: \"Deletes a currently existing comment\"\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the comment\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Comment\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /search/:\n    get:\n      parameters:\n        - in: query\n          name: q\n          schema:\n            type: string\n          description: The keyword / query\n          required: true\n        - in: query\n          name: type\n          schema:\n            type: string\n            enum: [\"all\", \"topics\", \"workspaces\", \"users\", \"resources\"]\n            default: \"all\"\n          description: Filter out by users, topics, workspaces, and resources. Can also leave as default which will search all categories\n      tags:\n        - Search\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Search\"\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n\nservers:\n  - url: http://localhost:4200/api/v1/auth\n  - url: http://freeagora.com/api/v1/auth\ncomponents:\n  securitySchemes:\n    basicAuth: # \u003c-- arbitrary name for the security scheme\n      type: http\n      scheme: basic\n  schemas:\n    ShortTag:\n      type: object\n      required:\n        - tag\n      properties:\n        id:\n          type: integer\n          description: Assigned automatically for new tags, used to update existing tag if provided\n        tag:\n          type: string\n          description: The tag name\n        ownedBy:\n          type: integer\n          description: Id of the user that first generated the tag\n        lastUsed:\n          type: string\n          description: date the tag was last used or updated. This should be set to the current time any time a tag is applied using the tagged object\n      example:\n        tag: Learning Python\n    Tag:\n      type: object\n      required:\n        - tag\n      properties:\n        id:\n          type: integer\n          description: Assigned automatically for new tags, used to update existing tag if provided\n        tag:\n          type: string\n          description: The tag name\n        ownedBy:\n          type: integer\n          description: Id of the user that first generated the tag\n        lastUsed:\n          type: string\n          description: date the tag was last used or updated. This should be set to the current time any time a tag is applied using the tagged object\n      example:\n        id: -1\n        tag: Learning Python\n        ownedBy: 1\n        lastUsed: 2022-08-07T14:04:17.935Z\n    Tags:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Tag\"\n    Tagged:\n      type: object\n      required:\n        - tag\n        - entityType\n        - entityId\n      properties:\n        id:\n          type: integer\n          description: Assigned automatically for new tags, used to update existing tag if provided\n        tag:\n          type: object\n          $ref: \"#/components/schemas/Tag\"\n          description: Tag that is being associated with a user and entity, Tag.tag property should contain the name of the tag to associate\n        entityType:\n          type: string\n          enum: [\"unknown\", \"workspace\", \"topic\", \"resource\", \"user\"]\n          default: \"unknown\"\n          description: Type of the entity that is being associated with the tag\n        entityId:\n          type: integer\n          description: Id of the entity that is being associated with the tag\n        userId:\n          type: integer\n          description: Id of the user that is associating this tag to the entity\n        lookupCount:\n          type: integer\n          description: incremented when user finds entity association via this tag, tracks popularity of this tag\n        lastUsed:\n          type: string\n          description: date the tag was last used or updated. This should be set to the current time any time a tag is applied using the tagged object, will be automatically set when saved\n        active:\n          type: boolean\n          description: Active status, inactive items will not be returned in most queries\n      example:\n        id: -1\n        tag: \n          id: -1\n          tag: Learning Python\n          ownedBy: 1\n          lastUsed: 2022-08-07T14:04:17.935Z\n        entityType: \"resource\"\n        entityId: 1\n        userId: 1\n        lookupCount: -1\n        lastUsed: 2022-08-07T14:04:17.935Z\n        active: true\n    Workspace:\n      request:\n        id: -1\n        tag:\n        type: object\n        required:\n          - workspaceName\n        properties:\n          id:\n            type: integer\n            description: Assigned automatically for new workspaces, used to update existing workspace if provided\n            uniqueItems: true\n          version:\n            type: integer\n            description: tracks the changes to workspaces and is automatically incremented on updates\n          workspaceName:\n            type: string\n            description: The tag\n          workspaceDescription:\n            type: string\n            description: Description of the workspace\n          workspaceImage:\n            type: string\n            description: filename of the associated image for the workspace\n          active:\n            type: boolean\n            description: Active status, inactive items will not be returned in most queries\n          completable:\n            type: boolean\n            description: Completable workspaces monitor progress of users through topics\n          visibility:\n            type: string\n            enum: [\"private\", \"public\"]\n            default: \"public\"\n            description: Share visibily, defaults to public\n          createTime:\n            type: timestamp\n            description: Automatically generated timestamp of record creation\n          ownedBy:\n            type: integer\n            description: Id of the user that first generated the tag\n        example:\n          workspaceId: -1\n          workspaceName: \"Learn how to use Agora\"\n          workspaceDescription: \"Follow the tutorials and other resources provided to learn the Agora system.\"\n          workspaceImage: \"myImage.png\"\n          active: true\n          completable: true\n          visibility: \"private\"\n          topics: [2, 3]\n      response:\n        type: object\n        required:\n          - workspaceName\n        properties:\n          id:\n            type: integer\n            description: Assigned automatically for new workspaces, used to update existing workspace if provided\n            uniqueItems: true\n          version:\n            type: integer\n            description: tracks the changes to workspaces and is automatically incremented on updates\n          workspaceName:\n            type: string\n            description: The tag\n          workspaceDescription:\n            type: string\n            description: Description of the workspace\n          workspaceImage:\n            type: string\n            description: filename of the associated image for the workspace\n          active:\n            type: boolean\n            description: Active status, inactive items will not be returned in most queries\n          completable:\n            type: boolean\n            description: Completable workspaces monitor progress of users through topics\n          visibility:\n            type: string\n            enum: [\"private\", \"public\"]\n            default: \"public\"\n            description: Share visibily, defaults to public\n          createTime:\n            type: timestamp\n            description: Automatically generated timestamp of record creation\n          ownedBy:\n            type: integer\n            description: Id of the user that first generated the tag\n        example:\n          rid: 1\n          id: 1\n          workspaceVersion: 1\n          workspaceName: \"Learn how to use Agora\"\n          workspaceDescription: \"Follow the tutorials and other resources provided to learn the Agora system.\"\n          workspaceImage: \"myImage.png\"\n          active: true\n          completable: true\n          visibility: \"private\"\n          version: 1\n          createTime: 2022-11-02T19:37:11.672Z\n    Workspaces:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Workspace\"\n    Topic:\n      request:\n        type: object\n        required:\n          - topicName\n          - resources\n          - resourceRequired\n        properties:\n          topicId:\n            type: integer\n            description: Assigned automatically for new topics, used to update existing topic if provided\n            uniqueItems: true\n          topicType:\n            type: integer\n            description: The type\n          topicName:\n            type: string\n            description: The tag\n          topicDescription:\n            type: string\n            description: Description of the topic\n          topicImage:\n            type: string\n            description: filename of the associated image for the topic\n          topicHtml:\n            type: string\n            description: Embedded HTML\n          assessmentId:\n            type: integer\n            description: assessment tag\n          activityId:\n            type: integer\n            description: activity tag\n          hasAssessment:\n            type: boolean\n            description: Whether topic has assessment\n          hasActivity:\n            type: boolean\n            description: Whether topic has activity\n          active:\n            type: boolean\n            description: Active status, inactive items will not be returned in most queries\n          visibility:\n            type: string\n            enum: [\"private\", \"public\"]\n            default: \"public\"\n            description: Share visibily, defaults to public\n          createTime:\n            type: timestamp\n            description: Automatically generated timestamp of record creation\n          ownedBy:\n            type: integer\n            description: Id of the user that first generated the tag\n          resources:\n            type: array\n            description: List of resources for the topic\n          resourceRequired:\n            type: array\n            description: Should always be true for every resource in resource array\n        example:\n          topicId: -1\n          topicType: 1\n          topicName: \"Understanding the Agora Dashboard\"\n          topicDescription: \"Follow the tutorials and other resources provided to learn the Agora Dashboard\"\n          topicImage: \"myImage.png\"\n          topicHtml: '\u003cdiv\u003e\u003cimg src=\"myImage.png\"\u003e\u003c/div\u003e'\n          hasActivity: false\n          hasAssessment: false\n          activityId: -1\n          assessmentId: -1\n          active: true\n          visibility: \"private\"\n          resources: [ 1, 2, 4 ]\n          resourcesRequired: [ true, true, true ]\n      response:\n        type: object\n        required:\n          - workspaceName\n        properties:\n          id:\n            type: integer\n            description: Assigned automatically for new workspaces, used to update existing workspace if provided\n            uniqueItems: true\n          version:\n            type: integer\n            description: tracks the changes to workspaces and is automatically incremented on updates\n          workspaceName:\n            type: string\n            description: The tag\n          workspaceDescription:\n            type: string\n            description: Description of the workspace\n          workspaceImage:\n            type: string\n            description: filename of the associated image for the workspace\n          active:\n            type: boolean\n            description: Active status, inactive items will not be returned in most queries\n          completable:\n            type: boolean\n            description: Completable workspaces monitor progress of users through topics\n          visibility:\n            type: string\n            enum: [\"private\", \"public\"]\n            default: \"public\"\n            description: Share visibily, defaults to public\n          createTime:\n            type: timestamp\n            description: Automatically generated timestamp of record creation\n          ownedBy:\n            type: integer\n            description: Id of the user that first generated the tag\n        example:\n          rid: 1\n          id: 1\n          workspaceVersion: 1\n          workspaceName: \"Learn how to use Agora\"\n          workspaceDescription: \"Follow the tutorials and other resources provided to learn the Agora system.\"\n          workspaceImage: \"myImage.png\"\n          active: true\n          completable: true\n          visibility: \"private\"\n          version: 1\n          createTime: 2022-11-02T19:37:11.672Z\n    Workspaces:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Workspace\"\n    Topic:\n      type: object\n      required:\n        - topicName\n      properties:\n        id:\n          type: integer\n          description: Assigned automatically for new topics, used to update existing topic if provided\n          uniqueItems: true\n        topicType:\n          type: integer\n          description: The type\n        topicName:\n          type: string\n          description: The tag\n        topicDescription:\n          type: string\n          description: Description of the topic\n        topicImage:\n          type: string\n          description: filename of the associated image for the topic\n        topicHtml:\n          type: string\n          description: Embedded HTML\n        assessmentId:\n          type: integer\n          description: assessment tag\n        activityId:\n          type: integer\n          description: activity tag\n        hasAssessment:\n          type: boolean\n          description: Whether topic has assessment\n        hasActivity:\n          type: boolean\n          description: Whether topic has activity\n        active:\n          type: boolean\n          description: Active status, inactive items will not be returned in most queries\n        visibility:\n          type: string\n          enum: [\"private\", \"public\"]\n          default: \"public\"\n          description: Share visibily, defaults to public\n        createTime:\n          type: timestamp\n          description: Automatically generated timestamp of record creation\n        ownedBy:\n          type: integer\n          description: Id of the user that first generated the tag\n      example:\n        id: 1\n        topicType: 1\n        topicName: \"Understanding the Agora Dashboard\"\n        topicDescription: \"Follow the tutorials and other resources provided to learn the Agora Dashboard\"\n        topicImage: \"myImage.png\"\n        topicHtml: '\u003cdiv\u003e\u003cimg src=\"myImage.png\" width=\"500\" height=\"500\"\u003e\u003c/div\u003e'\n        assessmentId: 1\n        hasActivity: false\n        hasAssessment: false\n        activityId: 1\n        active: true\n        visibility: \"private\"\n        createTime: \"2022-08-07T06:58:53.744Z\"\n        ownedBy: 1\n    Topics:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Topic\"\n    Discussions:\n      type: object\n      properties:\n        parent_id:\n          type: integer\n          description: The ID of the parent topic / workspace\n          uniqueItems: true\n        parent_type:\n          type: string\n          description: The type of the parent\n        discussion_text:\n          type: string\n          description: The text of the original discussion post\n        discussion_comments:\n          type: array\n          items:\n            type: object\n            $ref: \"#/components/schemas/Comment\"\n          description: Array of the comment objects made on a post, and their user ID\n      example:\n        parent_id: 1\n        parent_type: topic\n        discussion_text: Hello There!\n        discussion_comments:\n          - id: 1\n            parent_id: 1\n            parent_type: topic\n            comment_text: This is my comment!\n            user_id: 24\n            created_at: \"2022-08-07T06:58:53.744Z\"\n            updated_at: \"2022-08-07T06:59:53.744Z\"\n            likes: 1\n            dislikes: 6\n          - id: 2\n            parent_id: 1\n            parent_type: topic\n            comment_text: Another comment!\n            user_id: 42\n            created_at: \"2022-08-07T06:58:53.744Z\"\n            updated_at: \"2022-08-07T06:59:53.744Z\"\n            likes: 6\n            dislikes: 2\n    Comment:\n      type: object\n      properties:\n        id:\n          type: integer\n        parent_id:\n          type: integer\n        parent_type:\n          type: string\n        comment_text:\n          type: string\n        user_id:\n          type: integer\n        created_at:\n          type: timestamp\n        updated_at:\n          type: timestamp\n        likes:\n          type: integer\n        dislikes:\n          type: integer\n    Search:\n      type: object\n      properties:\n        search:\n          type: string\n        timeElapsed:\n          type: integer\n        results:\n          type: array\n          items: \n            type: object\n            $ref: '#/components/schemas/SearchItem'\n      example:\n        search: \"Hello There!\"\n        timeElapsed: 123456\n        results:\n          - type: topic\n            id: 1234\n            main: Hello There!\n            secondary: Some description!!!!\n          - type: workspace\n            id: 3421\n            main: Hello There Everyone!\n            secondary: I want to welcome you!\n          - type: user\n            id: 1234\n            main: HelloThere!23\n            secondary: John Doe \n          - type: resource\n            id: 1928\n            main: HelloThere! This is a resource for you!\n            secondary: This is a resource description!\n    SearchItem:\n      type: object\n      properties:\n        type:\n          type: string\n        id:\n          type: integer\n        main:\n          type: string\n        secondary:\n          type: string\n      example:\n        type: user\n        main: JohnDoe123\n        secondary: John Doe\n    Resource:\n      type: object\n      required:\n        - resourceName\n      properties:\n        id:\n          type: integer\n          description: Assigned automatically for new resources, used to update existing resource if provided\n          uniqueItems: true\n        resourceType:\n          type: string\n          description: The type\n        resourceName:\n          type: string\n          description: The tag\n        resourceDescription:\n          type: string\n          description: The synopsis\n        resourceContentHtml:\n          type: string\n          description: Additional description\n        resourceImage:\n          type: string\n          description: filename of the associated image for the resource\n        resourceLink:\n          type: string\n          description: hyperlink to referenced resource\n        isRequired:\n          type: integer\n          description: Not required status, required resources are necessary for ...\n        active:\n          type: boolean\n          description: Active status, inactive items will not be returned in most queries\n        visibility:\n          type: string\n          enum: [\"private\", \"public\"]\n          default: \"public\"\n          description: Share visibily, defaults to public\n        createTime:\n          type: timestamp\n          description: Automatically generated timestamp of record creation\n        ownedBy:\n          type: integer\n          description: Id of the user that first generated the tag\n      example:\n        id: 1\n        resourceType: 1\n        resourceName: \"Dashboard Screenshot\"\n        resourceDescription: \"The included screenshot shows the prototype Agora Dashboard\"\n        resourceContentHtml: '\u003cdiv\u003e\u003cimg src=\"myImage.png\" width=\"500\" height=\"500\"\u003e\u003c/div\u003e'\n        resourceImage: \"myImage.png\"\n        resourceLink: \"https://resourcelink.com/\"\n        isRequired: 1\n        active: true\n        visibility: \"private\"\n        createTime: \"2022-08-07T06:58:53.744Z\"\n        ownedBy: 1\n    Resources:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Resource\"\n  responses:\n    BadRequest:\n      description: The HyperText Transfer Protocol (HTTP) 400 Bad Request response status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing). See the x-agora-message-title and x-agora-message-detail response parameters for more detail.\n      headers:\n        x-agora-message-title:\n          schema:\n            type: string\n          description: Title of Agora API message\n        x-agora-message-message:\n          schema:\n            type: string\n          description: Message of Agora API message\n    UnauthorizedError:\n      description: Authentication information is missing or invalid - In basic HTTP authentication, a request contains a header field in the form of Authorization - Basic \u003ccredentials\u003e, where credentials is the Base64 encoding of ID and password joined by a single colon. See the x-agora-message-title and x-agora-message-detail response parameters for more detail.\n      headers:\n        x-agora-message-title:\n          schema:\n            type: string\n          description: Title of Agora API message\n        x-agora-message-message:\n          schema:\n            type: string\n          description: Message of Agora API message\n    ForbiddenError:\n      description: The credentials provided in the Authorization header did not authorize the user to take the requested action. See the x-agora-message-title and x-agora-message-detail response parameters for more detail.\n      headers:\n        x-agora-message-title:\n          schema:\n            type: string\n          description: Title of Agora API message\n        x-agora-message-message:\n          schema:\n            type: string\n          description: Message of Agora API message\n    NotFoundError:\n      description: The requested resource was not found. Check id provided or see the x-agora-message-title and x-agora-message-detail response parameters for more detail.\n      headers:\n        x-agora-message-title:\n          schema:\n            type: string\n          description: Title of Agora API message\n        x-agora-message-message:\n          schema:\n            type: string\n          description: Message of Agora API message\nsecurity:\n  - basicAuth: []\n",
			"canonicalURL": "/github.com/briangormanly/agora@2023a5d9a5ee7dc52d23deccd197ff9a4d0fd69e/-/blob/server/agoraApi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/briangormanly/agora/blob/2023a5d9a5ee7dc52d23deccd197ff9a4d0fd69e/server/agoraApi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1775: mapping key \"Workspaces\" already defined at line 1647; yaml: line 1779: mapping key \"Topic\" already defined at line 1651"
}