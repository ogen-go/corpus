{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/empoa"
		},
		"file": {
			"name": "big.yaml",
			"size": 0,
			"path": "empoa-jackson-serializer/src/test/resources/jackson-serializer/yaml/big.yaml",
			"byteSize": 7531,
			"content": "---\nopenapi: 3.0.1\ninfo:\n  title: Big Specification\n  description: This specification description\n  termsOfService: http://example.com/terms/\n  contact:\n    name: Support\n    url: http://www.example.com/support/\n    email: support@example.com\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  version: \"1.0\"\nservers:\n- url: http://api.example.com/\n  description: Main server\n- url: http://{version}.example-test.com:8080/{username}/\n  description: Test server\n  variables:\n    version:\n      default: v1\n      enum:\n      - v1\n      - v2\n      - v3\n    username:\n      default: alice\n      description: the developer username\ntags:\n- name: WIP\n  description: work-in-progress\npaths:\n  /tree/{name}:\n    get:\n      tags:\n      - WIP\n      summary: Return a tree of nodes\n      operationId: tree\n      parameters:\n      - name: name\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/text:\n              schema:\n                type: string\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n        \"4XX\":\n          description: Error\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - basic-auth: []\n      - api-key-auth: []\n  /messages:\n    post:\n      summary: Create a message\n      operationId: postMessage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: integer\n                  format: int32\n                description:\n                  type: string\n                language:\n                  type: string\n                  default: EN\n                  enum:\n                  - EN\n                  - FR\n                  - DE\n                  - IT\n      responses:\n        \"200\":\n          $ref: '#/components/responses/MessageResponse'\n  /messages/{id}:\n    get:\n      summary: Return a message\n      operationId: getMessage\n      parameters:\n      - $ref: '#/components/parameters/LanguageParam'\n      responses:\n        \"200\":\n          $ref: '#/components/responses/MessageResponse'\n    put:\n      summary: Update a message\n      operationId: putMessage\n      parameters:\n      - name: force\n        in: query\n        schema:\n          type: boolean\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateBody'\n      responses:\n        \"200\":\n          $ref: '#/components/responses/MessageResponse'\n    parameters:\n    - name: id\n      in: path\n      required: true\n      schema:\n        type: string\n  /subscribe:\n    post:\n      summary: Subscribe to a webhook\n      operationId: subscribeWebhook\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Body'\n        required: true\n      responses:\n        \"201\":\n          description: Webhook created\n      callbacks:\n        myEvent:\n          '{$request.body#/callbackUrl}':\n            post:\n              requestBody:\n                content:\n                  application/json:\n                    schema:\n                      type: object\n                      required:\n                      - message\n                      properties:\n                        message:\n                          type: string\n                          example: Some event happened\n                required: true\n              responses:\n                \"200\":\n                  description: Your server returns this code if it accepts the callback\n        pingEvent:\n          $ref: '#/components/callbacks/PingCallback'\ncomponents:\n  schemas:\n    Message:\n      type: object\n      properties:\n        value:\n          type: string\n        description:\n          type: string\n    Node:\n      type: object\n      properties:\n        name:\n          type: string\n        children:\n          type: array\n          items:\n            $ref: '#/components/schemas/Node'\n    Error:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Body:\n      type: object\n      required:\n      - callbackUrl\n      properties:\n        callbackUrl:\n          type: string\n          format: uri\n          example: https://myserver.com/send/callback/here\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Info'\n    Info:\n      type: object\n      oneOf:\n      - $ref: '#/components/schemas/SimpleInfo'\n      - $ref: '#/components/schemas/ExtendedInfo'\n      discriminator:\n        propertyName: infoType\n        mapping:\n          simple: '#/components/schemas/SimpleInfo'\n          extended: '#/components/schemas/ExtendedInfo'\n    SimpleInfo:\n      type: object\n      properties:\n        infoType:\n          type: string\n        description:\n          type: string\n    ExtendedInfo:\n      type: object\n      properties:\n        infoType:\n          type: string\n        code:\n          type: integer\n          format: int32\n        data:\n          type: object\n          not:\n            type: integer\n        info:\n          type: string\n    RootClass:\n      type: object\n      required:\n      - type\n      properties:\n        type:\n          type: string\n        prop0:\n          type: string\n      discriminator:\n        propertyName: type\n    ParentObject:\n      allOf:\n      - $ref: '#/components/schemas/RootClass'\n      - type: object\n        properties:\n          prop1:\n            type: string\n          prop2:\n            type: string\n    ChildObject:\n      allOf:\n      - $ref: '#/components/schemas/ParentObject'\n      - type: object\n        properties:\n          prop3:\n            type: string\n          prop4:\n            type: string\n  responses:\n    MessageResponse:\n      description: OK\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/Message'\n  parameters:\n    LanguageParam:\n      name: language\n      in: query\n      description: Language of the message\n      schema:\n        type: string\n        enum:\n        - english\n        - french\n        - german\n        - italian\n  examples:\n    ExampleEntry:\n      description: Some description\n      x-test: value\n  requestBodies:\n    UpdateBody:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n              description:\n                type: string\n  headers:\n    HeaderEntry:\n      description: Some description\n      style: simple\n      x-test: value\n  securitySchemes:\n    basic-auth:\n      type: http\n      description: Login and password\n      scheme: basic\n    api-key-auth:\n      type: apiKey\n      name: X-ACCESS-API-KEY\n      in: header\n      scheme: basic\n  links:\n    LinkEntry:\n      operationId: postMessage\n      description: Some description\n      x-test: value\n  callbacks:\n    PingCallback:\n      '{$request.body#/callbackUrl}':\n        get:\n          parameters:\n          - name: x-callback-id\n            in: header\n            description: id\n            required: true\n            schema:\n              type: string\n            style: simple\n            explode: false\n          responses:\n            \"200\":\n              description: Your server returns this code if it accepts the callback\n",
			"canonicalURL": "/github.com/OpenAPITools/empoa@03078bf7c49ad03a175e51a57ede8d730013782e/-/blob/empoa-jackson-serializer/src/test/resources/jackson-serializer/yaml/big.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenAPITools/empoa/blob/03078bf7c49ad03a175e51a57ede8d730013782e/empoa-jackson-serializer/src/test/resources/jackson-serializer/yaml/big.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!str `#/compo...` into ogen.PathItem"
}