{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/GANys/Measur3D"
		},
		"file": {
			"name": "api-docs.yaml",
			"size": 0,
			"path": "api-docs.yaml",
			"byteSize": 46714,
			"content": "openapi: 3.0.0\ninfo:\n  title: Measur3D\n  version: 0.3.0\n  description: A light and compact CityJSON management tool\n  license:\n    name: Apache-2.0\n    url: 'https://www.apache.org/licenses/LICENSE-2.0'\n  contact:\n    name: Gilles-Antoine Nys\n    email: ganys@uliege.be\nservers:\n  - url: 'http://localhost:3001/measur3d'\n    description: Measur3D RESTful API\n  - url: 'http://localhost:3001/features'\n    description: OGC API - Features\ntags:\n  - Measur3D\n  - Features\npaths:\n  /api-docs:\n    get:\n      summary: Get the full API documentation.\n      description: The documentation can be queried in YAML or JSON format.\n      tags:\n        - Measur3D\n      parameters:\n        - in: query\n          name: f\n          schema:\n            type: string\n            enum:\n              - YAML\n              - json\n            default: json\n      responses:\n        '201':\n          description: Full documentation of the APIs Measur3D and Features.\n  /uploadCityModel:\n    post:\n      summary: Uploads a CityModel.\n      description: \u003e-\n        This function allows to upload a CityJSON file (v 1.0.x). The file will\n        be processed in order to distribute the information in the different\n        documents in the database following the CityModel, AbstractCityObject\n        and Geometry schemas (other schemas will be supported in further\n        developments).\n      tags:\n        - Measur3D\n      parameters:\n        - name: jsonName\n          description: \u003e-\n            Name of the CityModel - name of the file in the Measur3D\n            application.\n          in: body\n          required: true\n          type: string\n        - name: content\n          description: The content of the JSON file as a JSON object.\n          in: body\n          required: true\n          type: object\n          schema:\n            $ref: '#/components/schemas/CityModel'\n      responses:\n        '201':\n          description: Created - upload of the CityJSON file successful.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: string\n                    default: File uploaded\n              example:\n                success: File uploaded\n        '408':\n          description: \u003e-\n            Request timeout - took over 10 minutes (Uploading a CityModel can be\n            very long).\n  /getCityModelsList:\n    get:\n      summary: Get list of available CityModels.\n      description: \u003e-\n        Concurrent models can be stored in the database. This function allows\n        describing these models providing summary information.\n      tags:\n        - Measur3D\n      responses:\n        '200':\n          description: OK - returns.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                    nbr_el:\n                      type: number\n                    filesize:\n                      type: string\n              example:\n                - name: model_1\n                  nbr_el: 845\n                  filesize: 1.24Mb\n                - name: model_2\n                  nbr_el: 642\n                  filesize: 835.1Kb\n        '404':\n          description: Not found - There is no CityModel in the database.\n  /getNamedCityModel:\n    get:\n      summary: Get a specific CityModel.\n      description: \u003e-\n        This function allows getting a specific CityModel. It gathers all\n        information related to the model in the different collections from the\n        database.\n      tags:\n        - Measur3D\n      parameters:\n        - name: name\n          description: \u003e-\n            Name of the CityModel - name of the file in the Measur3D\n            application.\n          in: body\n          required: true\n          type: string\n      responses:\n        '200':\n          description: OK - returns a '#/CityModel'.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CityModel'\n        '500':\n          description: Not found - There is no CityModel in the database.\n  /deleteNamedCityModel:\n    delete:\n      summary: Delete a specific CityModel.\n      description: \u003e-\n        This function allows deleting a specific CityModel. It deletes all\n        information related to the model in the different collections from the\n        database.\n      tags:\n        - Measur3D\n      responses:\n        '200':\n          description: OK - returns a JSON success.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: string\n                    default: City model deleted with success !\n              example:\n                success: City model deleted with success !\n        '404':\n          description: Not found - There is no document with that name.\n  /getObject:\n    get:\n      summary: Get a specific CityObject.\n      description: \u003e-\n        This function allows getting a specific CityObject. It gathers the\n        object and its highest lod geometry.\n      tags:\n        - Measur3D\n      parameters:\n        - name: name\n          description: Name of the object.\n          in: body\n          type: string\n        - name: id\n          description: Id of the object.\n          in: body\n          type: string\n        - name: CityObjectType\n          description: Type of the object.\n          in: body\n          required: true\n          type: string\n      responses:\n        '200':\n          description: OK - returns a '#/AbstractCityObject'.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AbstractCityObject'\n        '400':\n          description: Bad request - Params are not valid.\n          type: object\n          properties:\n            error:\n              type: string\n              default: Params are not valid.\n        '500':\n          description: \u003e-\n            Internal error - getObject could not find Object in Collection.\n            Error is sent by database.\n  /deleteObject:\n    delete:\n      summary: Delete a specific CityObject.\n      description: \u003e-\n        This function allows deleting a specific CityObject. It deletes an\n        object and all its related geometries.\n      tags:\n        - Measur3D\n      responses:\n        '200':\n          description: OK - returns a JSON success.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: string\n                    default: City model deleted with success !\n              example:\n                success: Object and children deleted !\n        '500':\n          description: Something went bad - error generated by the database.\n  /getObjectAttributes:\n    get:\n      summary: Get the attributes of a specific CityObject.\n      description: \u003e-\n        This function allows getting the attributes of a specific CityObject. It\n        gathers the object attributes in order to render in the\n        AttributesManager Component.\n      tags:\n        - Measur3D\n      parameters:\n        - name: name\n          description: Name of the object.\n          in: body\n          type: string\n        - name: id\n          description: Id of the object.\n          in: body\n          type: string\n        - name: CityObjectType\n          description: Type of the object.\n          in: body\n          required: true\n          type: string\n      responses:\n        '200':\n          description: OK - returns an array of all the '#/AbstractCityObject.attributes'.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n              example: Key/Value pairs\n        '400':\n          description: Bad request - Params are not valid.\n          type: object\n          properties:\n            error:\n              type: string\n              default: Params are not valid.\n        '500':\n          description: \u003e-\n            Internal error - getObjectAttributes could not find Object in\n            Collection. Error is sent by database.\n  /updateObjectAttribute:\n    put:\n      summary: Update/delete an attribute of a specific CityObject.\n      description: \u003e-\n        This function allows updating or deleting a key/value pair in the\n        attributes of a specific CityObject. It corresponds to a modification of\n        a line in the AttributesManager Component. If a new key or value is\n        given, the pair is updated. If a value is not given, the old key is\n        deleted from the document. If a new key is given, the key/value pair is\n        created within the document.\n      tags:\n        - Measur3D\n      parameters:\n        - name: jsonName\n          description: Name of the object.\n          in: body\n          type: string\n        - name: CityObjectType\n          description: Type of the object.\n          in: body\n          required: true\n          type: string\n        - name: key\n          description: The new key.\n          in: body\n          required: true\n          type: string\n        - name: old_key\n          description: The old key.\n          in: body\n          type: string\n        - name: value\n          description: The value (can be empty).\n          in: body\n          required: true\n          type: string\n      responses:\n        '200':\n          description: OK - returns a success message in a JSON object.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: string\n                    default: Object updated.\n              example: Key/Value pairs\n        '400':\n          description: Bad request - Params are not valid.\n          type: object\n          properties:\n            error:\n              type: string\n              default: Params are not valid.\n        '500':\n          description: \u003e-\n            Internal error - updateObjectAttribute could not find Object in\n            Collection. Error is sent by database.\n  /:\n    get:\n      summary: Access to the landing page.\n      description: Information can be accessed in HTML or JSON formats.\n      tags:\n        - Features\n      responses:\n        '200':\n          description: Returns the landing page of the API.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - links\n                properties:\n                  title:\n                    type: string\n                  description:\n                    type: string\n                  links:\n                    type: array\n                    items:\n                      $ref: \u003e-\n                        http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/link.yaml\n        '400':\n          description: Returns an error due to format.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: object\n                    properties:\n                      code:\n                        type: string\n                        example: InvalidParameterValue\n                      description:\n                        type: string\n                        example: Invalid format\n  /conformance:\n    get:\n      summary: Access to the conformance page.\n      description: \u003e-\n        To support \"generic\" clients that want to access multiple OGC API\n        Features implementations - and not \"just\" a specific API / server, the\n        server has to declare the conformance classes it implements and conforms\n        to.\n      tags:\n        - Features\n      responses:\n        '200':\n          description: Returns the conformance array.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - conformsTo\n                properties:\n                  conformsTo:\n                    type: array\n                    items:\n                      type: string\n  /api:\n    get:\n      summary: Get the full API documentation.\n      description: The documentation can be queried in YAML or JSON format.\n      tags:\n        - Features\n      parameters:\n        - in: query\n          name: f\n          schema:\n            type: string\n            enum:\n              - YAML\n              - json\n            default: json\n      responses:\n        '201':\n          description: Full documentation of the APIs Measur3D and Features.\n        '308':\n          description: Redirect to .html.\n        '400':\n          description: Returns an error due to format.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: object\n                    properties:\n                      code:\n                        type: string\n                        example: InvalidParameterValue\n                      description:\n                        type: string\n                        example: Invalid format\n  /api.html:\n    get:\n      summary: Get the API documentation as HTML.\n      description: \u003e-\n        NOT AVAILABLE - This function allows getting a specific CityModel. It\n        gathers all information related to the model in the different\n        collections from the database.\n      tags:\n        - Features\n  /collections:\n    get:\n      summary: Access to the collections page - About page.\n      description: Information can be accessed in HTML or JSON formats.\n      tags:\n        - Features\n      parameters:\n        - in: query\n          name: f\n          schema:\n            type: string\n            enum:\n              - HTML\n              - json\n            default: HTML\n      responses:\n        '200':\n          description: Returns an about page on collections.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - links\n                  - collections\n                properties:\n                  links:\n                    type: array\n                    items:\n                      $ref: \u003e-\n                        http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/link.yaml\n                  collections:\n                    type: array\n                    items:\n                      $ref: \u003e-\n                        http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/collection.yaml\n        '400':\n          description: Returns an error due to format.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: object\n                    properties:\n                      code:\n                        type: string\n                        example: InvalidParameterValue\n                      description:\n                        type: string\n                        example: Invalid format\n        '404':\n          description: There is no collections in the database.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: There is no collection in the database.\n  '/collections/:collectionId':\n    get:\n      summary: Get a specific collection.\n      description: \u003e-\n        This function allows getting a specific CityModel. It gathers all\n        information related to the model in the different collections from the\n        database.\n      tags:\n        - Features\n      parameters:\n        - in: query\n          name: f\n          schema:\n            type: string\n            enum:\n              - HTML\n              - json\n            default: HTML\n        - in: path\n          name: collectionId\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns a collection of features and its metadata.\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \u003e-\n                  http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/collection.yaml\n        '400':\n          description: Returns an error due to format.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: object\n                    properties:\n                      code:\n                        type: string\n                        example: InvalidParameterValue\n                      description:\n                        type: string\n                        example: Invalid format\n        '404':\n          description: There is no collections in the database.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: There is no collection in the database.\n  '/collections/:collectionId/items':\n    get:\n      summary: Get items of a specific collection.\n      description: \u003e-\n        This function allows getting all the items of a specific collection\n        (limited to 10 items by default).\n      tags:\n        - Features\n      parameters:\n        - in: query\n          name: f\n          schema:\n            type: string\n            enum:\n              - HTML\n              - json\n            default: HTML\n          style: form\n          explode: false\n          required: false\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 10000\n            default: 10\n          style: form\n          explode: false\n          required: false\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            default: 0\n          style: form\n          explode: false\n          required: false\n        - in: query\n          name: bbox\n          schema:\n            type: array\n            minItems: 4\n            maxItems: 6\n            items:\n              type: number\n          style: form\n          explode: false\n          required: false\n        - in: query\n          name: datetime\n          schema:\n            type: string\n          style: form\n          explode: false\n          required: false\n        - in: query\n          name: any\n          description: \u003e-\n            a feature property that has a simple value (for example, a string or\n            integer) that is expected to be useful for applications using the\n            service to filter the features of the collection based on this\n            property, a parameter with the name of the feature property.\n          schema:\n            type: string\n          style: form\n          explode: false\n          required: false\n        - in: path\n          name: collectionId\n          schema:\n            type: string\n      responses:\n        '200':\n          description: \u003e-\n            Returns a CityModel formalised following the OGC API Features - Part\n            1.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - id\n                  - links\n                properties:\n                  id:\n                    description: 'identifier of the collection used, for example, in URIs'\n                    type: string\n                  title:\n                    description: human readable title of the collection\n                    type: string\n                  description:\n                    description: a description of the features in the collection\n                    type: string\n                  links:\n                    type: array\n                    items:\n                      $ref: \u003e-\n                        http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/link.yaml\n                  extent:\n                    description: \u003e-\n                      The extent of the features in the collection. In the Core\n                      only spatial and temporal extents are specified.\n                      Extensions may add additional members to represent other\n                      extents, for example, thermal or pressure ranges.\n                    type: object\n                    properties:\n                      spatial:\n                        description: The spatial extent of the features in the collection.\n                        type: object\n                        properties:\n                          bbox:\n                            description: \u003e-\n                              One or more bounding boxes that describe the\n                              spatial extent of the dataset. In the Core only a\n                              single bounding box is supported. Extensions may\n                              support additional areas. If multiple areas are\n                              provided, the union of the bounding boxes\n                              describes the spatial extent.\n                            type: array\n                            minItems: 1\n                            items:\n                              description: \u003e-\n                                Each bounding box is provided as four or six\n                                numbers, depending on whether the coordinate\n                                reference system includes a vertical axis\n                                (height or depth).\n\n                                * Lower left corner, coordinate axis 1 * Lower\n                                left corner, coordinate axis 2 * Minimum value,\n                                coordinate axis 3 (optional) * Upper right\n                                corner, coordinate axis 1 * Upper right corner,\n                                coordinate axis 2 * Maximum value, coordinate\n                                axis 3 (optional)\n\n                                The coordinate reference system of the values is\n                                WGS 84 longitude/latitude\n                                (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\n                                unless a different coordinate reference system\n                                is specified in `crs`. For WGS 84\n                                longitude/latitude the values are in most cases\n                                the sequence of minimum longitude, minimum\n                                latitude, maximum longitude and maximum\n                                latitude. However, in cases where the box spans\n                                the antimeridian the first value (west-most box\n                                edge) is larger than the third value (east-most\n                                box edge). If the vertical axis is included, the\n                                third and the sixth number are the bottom and\n                                the top of the 3-dimensional bounding box. If a\n                                feature has multiple spatial geometry\n                                properties, it is the decision of the server\n                                whether only a single spatial geometry property\n                                is used to determine the extent or all relevant\n                                geometries.\n                              type: array\n                              minItems: 4\n                              maxItems: 6\n                              items:\n                                type: number\n                          crs:\n                            description: \u003e-\n                              Coordinate reference system of the coordinates in\n                              the spatial extent (property `bbox`). The default\n                              reference system is WGS 84 longitude/latitude. In\n                              the Core this is the only supported coordinate\n                              reference system. Extensions may support\n                              additional coordinate reference systems and add\n                              additional enum values.\n                            type: string\n                            enum:\n                              - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'\n                            default: 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'\n                      temporal:\n                        description: The temporal extent of the features in the collection.\n                        type: object\n                        properties:\n                          interval:\n                            description: \u003e-\n                              One or more time intervals that describe the\n                              temporal extent of the dataset. The value `null`\n                              is supported and indicates an open time intervall.\n                              In the Core only a single time interval is\n                              supported. Extensions may support multiple\n                              intervals. If multiple intervals are provided, the\n                              union of the intervals describes the temporal\n                              extent.\n                            type: array\n                            minItems: 1\n                            items:\n                              description: \u003e-\n                                Begin and end times of the time interval. The\n                                timestamps are in the coordinate reference\n                                system specified in `trs`. By default this is\n                                the Gregorian calendar.\n                              type: array\n                              minItems: 2\n                              maxItems: 2\n                              items:\n                                type: string\n                                format: date-time\n                                nullable: true\n                          trs:\n                            description: \u003e-\n                              Coordinate reference system of the coordinates in\n                              the temporal extent (property `interval`). The\n                              default reference system is the Gregorian\n                              calendar. In the Core this is the only supported\n                              temporal reference system. Extensions may support\n                              additional temporal reference systems and add\n                              additional enum values.\n                            type: string\n                            enum:\n                              - \u003e-\n                                http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\n                            default: \u003e-\n                              http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\n                  itemType:\n                    description: \u003e-\n                      indicator about the type of the items in the collection\n                      (the default value is 'feature').\n                    type: string\n                    default: feature\n                  crs:\n                    description: \u003e-\n                      the list of coordinate reference systems supported by the\n                      service\n                    type: array\n                    items:\n                      type: string\n                      default:\n                        - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'\n        '400':\n          description: Returns an error due to format. Refer the erroneous parameter.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: object\n                    properties:\n                      code:\n                        type: string\n                        example: InvalidParameterValue\n                      description:\n                        type: string\n                        example: 'Invalid # format'\n        '404':\n          description: There is no item in the database.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: There is no item in this collection.\n        '500':\n          description: There is no item in the database.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: There is no item in the database.\n  '/collections/:collectionId/items/:item':\n    get:\n      summary: Get a specific CityObject.\n      description: \u003e-\n        This function allows getting a specific CityObject. It gathers all\n        information related to the object in the different collections from the\n        database.\n      tags:\n        - Features\n      parameters:\n        - in: query\n          name: f\n          schema:\n            type: string\n            enum:\n              - HTML\n              - json\n            default: HTML\n        - in: path\n          name: collectionId\n          schema:\n            type: string\n        - in: path\n          name: item\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK - returns a '#/AbstractCityObject'.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AbstractCityObject'\n        '400':\n          description: Returns an error due to format.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: object\n                    properties:\n                      code:\n                        type: string\n                        example: InvalidParameterValue\n                      description:\n                        type: string\n                        example: Invalid format\n        '404':\n          description: This item does not exist in this collection.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: This item does not exist in this collection.\ncomponents:\n  schemas:\n    CityModel:\n      type: object\n      required:\n        - name\n        - type\n        - version\n        - CityObjects\n        - vertices\n      properties:\n        name:\n          type: string\n          description: \u003e-\n            Unique name of the CityModel (not its UUID) - created by the method\n            '#/Measur3D/uploadCityModel'. Basically the name of the uploaded\n            file.\n        type:\n          type: string\n          default: CityJSON\n          description: Imposed.\n        version:\n          type: string\n          description: \u003e-\n            A string with the version (X.Y) of CityJSON used. Minor versions are\n            not considered.\n        CityObjects:\n          type: object\n          properties:\n            '#/AbstractCityObject/name':\n              type: object\n              properties:\n                id:\n                  type: string\n                  description: UUID id of the document in the database.\n                type:\n                  type: string\n                  description: Type of the CityObject.\n          description: \u003e-\n            A collection of key-value pairs, where the key is the name of the\n            CityObject, and the value is couple of key giving the object id and\n            its type.\n        vertices:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            Remains of the initial CityJSON specs. Vertices are now stored in\n            '#/AbstractCityObject'. Should be empty.\n        extension:\n          type: object\n          properties:\n            url:\n              type: string\n              format: URL\n              description: External link to the ressource.\n            version:\n              type: string\n              description: Version of the extension.\n          description: \u003e-\n            A JSON file that allows us to document how the core data model of\n            CityJSON may be extended, and to validate CityJSON files.\n        metadata:\n          type: object\n          properties:\n            filesize:\n              type: number\n              description: \u003e-\n                Size of the CityJSON file in bits - created by the method\n                '#/Measur3D/uploadCityModel'.\n            nbr_el:\n              type: number\n              descrption: Number of AbstractCityObject in the CityModel.\n            geographicalExtent:\n              type: array\n              items:\n                type: number\n              description: 'An array with 6 values - [minx, miny, minz, maxx, maxy, maxz].'\n            spatialIndex:\n              type: boolean\n              description: A boolean specifiying if the object is spatially indexed or not.\n            location:\n              type: object\n              properties:\n                type:\n                  type: string\n                  default:\n                    - Polygon\n                coordinates:\n                  type: string\n                  format: ISO19107\n              description: \u003e-\n                A hierarchy of arrays following the ISO19107 standard. Duplicate\n                information of the '#/geographicalExtent'. Useful in order to\n                index objects spatialy.\n            referenceSystem:\n              type: string\n              format: OGC CRS URN\n              description: \u003e-\n                A string that defines a coordinate reference system. Note that\n                all CityObjects need to have the same CRS.\n            contactDetails:\n              type: object\n              properties:\n                contactName:\n                  type: string\n                phone:\n                  type: string\n                address:\n                  type: string\n                emailAddress:\n                  type: string\n                contactType:\n                  type: string\n                  enums:\n                    - individual\n                    - organization\n          description: \u003e-\n            A JSON object that may have different members giving information on\n            the CityModel.\n        transform:\n          type: object\n          required:\n            - scale\n            - translate\n          properties:\n            scale:\n              type: array\n              items:\n                type: number\n            translate:\n              type: array\n              items:\n                type: number\n          description: \u003e-\n            Scale factor and the translation needed to obtain the original\n            coordinates from the integer vertices (stored with floats/doubles).\n        appearance:\n          type: object\n          properties:\n            default-theme-texture:\n              type: string\n            default-theme-material:\n              type: string\n            materials:\n              type: array\n              items:\n                $ref: '#components/schemas/Material'\n            textures:\n              type: array\n              items:\n                $ref: '#components/schemas/Texture'\n            vertices-texture:\n              type: array\n              items:\n                type: array\n                items:\n                  type: number\n          description: JSON objects representing the textures and/or materials of surfaces.\n        geometry-templates:\n          type: object\n          properties:\n            templates:\n              type: object\n              description: Need to rework the GeometryInstance.\n            vertices-template:\n              type: array\n              items:\n                type: array\n                items:\n                  type: number\n          description: The date of the record creation.\n    AbstractCityObject:\n      type: object\n      required:\n        - name\n        - CityModel\n      properties:\n        name:\n          type: string\n          description: \u003e-\n            Unique name of the CityObject (not its UUID) - created by the method\n            '#/Measur3D/uploadCityModel'.\n        CityModel:\n          type: string\n          description: \u003e-\n            Reference to the parent CityModel - created by the method\n            '#/Measur3D/uploadCityModel'.\n        attributes:\n          type: object\n          properties:\n            class:\n              type: string\n            function:\n              type: string\n            usage:\n              type: string\n          description: \u003e-\n            Besides the standard attributes\n            (https://www.sig3d.de/codelists/standard/), any other attributes not\n            prescribed by the CityGML data model can be added with a JSON\n            key-value pair.\n        parents:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            An array of the IDs (of type string) of the City Objects that are\n            its parents.\n        children:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            An array of the IDs (of type string) of the 2nd-level City Objects\n            that are part of the City Object.\n        geographicalExtent:\n          type: array\n          items:\n            type: number\n          description: 'An array with 6 values - [minx, miny, minz, maxx, maxy, maxz].'\n        spatialIndex:\n          type: boolean\n          description: A boolean specifiying if the object is spatially indexed or not.\n        location:\n          type: object\n          properties:\n            type:\n              type: string\n              default:\n                - Polygon\n            coordinates:\n              type: string\n              format: ISO19107\n          description: \u003e-\n            A hierarchy of arrays following the ISO19107 standard. Duplicate\n            information of the '#/geographicalExtent'. Useful in order to index\n            objects spatialy.\n        geometry:\n          type: array\n          items:\n            $ref: '#/components/schemas/Geometry'\n          description: The date of the record creation.\n        transform:\n          type: object\n          required:\n            - scale\n            - translate\n          properties:\n            scale:\n              type: array\n              items:\n                type: number\n            translate:\n              type: array\n              items:\n                type: number\n          description: \u003e-\n            Scale factor and the translation needed to obtain the original\n            coordinates from the integer vertices (stored with floats/doubles)\n        vertices:\n          type: array\n          items:\n            type: array\n            items:\n              type: number\n          description: \u003e-\n            An array of coordinates of each vertex of the city object. Their\n            position in this array (0-based) is used as an index to be\n            referenced by the Geometric Objects. The indexing mechanism of the\n            format Wavefront OBJ is basically reused. Vertices are stored as\n            integer (refer to\n      example:\n        name: Liège-4000-1337\n        type: Building\n        geographicalExtent:\n          - 45789.1\n          - 123849\n          - 2.4\n          - 45789.7\n          - 123873.4\n          - 35.2\n        attributes:\n          creationDate: 1980\n          price: 415.000€\n          owner: Adrien Nougaret\n        children:\n          - Liège-4000-1234\n        geometry:\n          - ...\n    Geometry:\n      type: object\n      required:\n        - type\n        - CityModel\n        - CityObject\n        - lod\n        - boundaries\n      properties:\n        type:\n          type: string\n          format: ISO 19107\n          description: \u003e-\n            Geometric primitives that are non-decomposed objects presenting\n            information about geometric configuration.\n        CityModel:\n          type: string\n          description: \u003e-\n            Reference to the parent CityModel - created by the method\n            '#/Measur3D/uploadCityModel'.\n        CityObject:\n          type: string\n          description: \u003e-\n            Reference to the parent CityObject - created by the method\n            '#/Measur3D/uploadCityModel'.\n        lod:\n          type: number\n          description: A number identifying the level-of-detail.\n        boundaries:\n          description: \u003e-\n            A hierarchy of arrays (the depth depends on the Geometry object)\n            with integers. An integer refers to the index in the \"vertices\"\n            array of the referenced CityObject (0-based).\n          type: array\n          items:\n            type: number\n        semantics:\n          description: \u003e-\n            A JSON object representing the semantics of a surface, and may also\n            represent other attributes of the surface.\n          type: object\n          properties:\n            surfaces:\n              description: An array of Semantic Surface Objects\n              type: array\n              items:\n                type: object\n                properties:\n                  type:\n                    type: string\n                    description: Type of the object.\n                  parent:\n                    type: number\n                    description: \u003e-\n                      An integer pointing to another Semantic Object of the same\n                      geometry (index of it, 0-based).\n                  children:\n                    type: array\n                    items:\n                      type: number\n                    description: \u003e-\n                      An array of integers pointing to other Semantic Objects of\n                      the same geometry (index of it, 0-based).\n            values:\n              type: array\n              items:\n                type: number\n              description: \u003e-\n                A hierarchy of arrays with integers that refer to the index in\n                the \"surfaces\" array of the same geometry (0-based).\n        material:\n          type: object\n          $ref: '#/components/schemas/Material'\n        texture:\n          type: object\n          $ref: '#/components/schemas/Texture'\n      example:\n        type: MultiSurface\n        lod: '2,'\n        boundaries:\n          - - - 0\n              - 3\n              - 2\n              - 1\n          - - - 4\n              - 5\n              - 6\n              - 7\n          - - - 0\n              - 1\n              - 5\n              - 4\n          - - - 0\n              - 2\n              - 3\n              - 8\n          - - - 10\n              - 12\n              - 23\n              - 48\n        semantics:\n          surfaces:\n            - type: WallSurface\n              slope: 33.4\n              children:\n                - 2\n            - type: RoofSurface\n              slope: 66.6\n            - type: Door\n              parent: 0\n              colour: blue\n          values:\n            - 0\n            - 0\n            - null\n            - 1\n            - 2\n    Material:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          description: A string identifying the material.\n        ambientIntensity:\n          type: number\n          description: Value is a number between 0.0 and 1.0.\n        diffuseColor:\n          type: array\n          items:\n            type: number\n          description: Value is a number between 0.0 and 1.0 (RGB colour).\n        emissiveColor:\n          type: array\n          items:\n            type: number\n          description: Value is a number between 0.0 and 1.0 (RGB colour).\n        specularColor:\n          type: array\n          items:\n            type: number\n          description: Value is a number between 0.0 and 1.0 (RGB colour).\n        shininess:\n          type: number\n          description: Value is a number between 0.0 and 1.0.\n        transparency:\n          type: number\n          description: \u003e-\n            Value is a number between 0.0 and 1.0 (1.0 being completely\n            transparent).\n        isSmooth:\n          type: boolean\n          description: \u003e-\n            If this boolean flag is set to true, vertex normals should be used\n            for shading (Gouraud shading). Otherwise, normals should be constant\n            for a surface patch (flat shading).\n      example:\n        name: roofandground\n        ambientIntensity: 0.48\n        diffuseColor:\n          - 0.8\n          - 0.2\n          - 0.75\n        emissiveColor:\n          - 0.8\n          - 0.2\n          - 0.75\n        specularColor:\n          - 0.8\n          - 0.2\n          - 0.75\n        shininess: 0.5\n        transparency: 0.5\n        isSmooth: true\n    Texture:\n      type: object\n      required:\n        - type\n        - image\n      properties:\n        type:\n          type: string\n          description: A string with either \"PNG\" or \"JPG\" as value.\n        image:\n          type: string\n          description: \u003e-\n            A string with the name of the file. This file can be a URL, a\n            relative path or an absolute path.\n        wrapMode:\n          type: string\n          enums:\n            - none\n            - wrap\n            - mirror\n            - clamp\n            - border\n        textureType:\n          type: string\n          enums:\n            - unknown\n            - specific\n            - typical\n        borderColor:\n          type: array\n          items:\n            type: number\n          description: Numbers between 0.0 and 1.0 (RGBA colour).\n      example:\n        type: PNG\n        image: src/images/wall.png\n        wrapMode: wrap\n        textureType: unknown\n        borderColor:\n          - 0\n          - 0\n          - 0\n          - 1\n  tags:\n    '0': Measur3D\n"
		}
	},
	"Error": "unmarshal: json: line 1:31178: json: cannot unmarshal string into Go struct field Alias.tags of type ogen.Tag"
}