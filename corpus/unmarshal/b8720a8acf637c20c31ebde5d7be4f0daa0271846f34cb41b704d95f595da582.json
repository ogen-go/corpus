{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/influxdata/openapi"
		},
		"file": {
			"name": "common.yml",
			"size": 0,
			"path": "contracts/common.yml",
			"byteSize": 460368,
			"content": "openapi: 3.0.0\ninfo:\n  title: Influx Common API\n  version: 2.0.1\n  license:\n    name: MIT\n    url: 'https://opensource.org/licenses/MIT'\nservers:\n  - url: /api/v2\npaths:\n  /signin:\n    post:\n      operationId: PostSignin\n      summary: Create a user session.\n      description: |\n        Authenticates [Basic authentication credentials](#section/Authentication/BasicAuthentication)\n        for a [user](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#user),\n        and then, if successful, generates a user session.\n\n        To authenticate a user, pass the HTTP `Authorization` header with the\n        `Basic` scheme and the base64-encoded username and password--for example:\n\n        ```sh\n        Authorization: Basic USERNAME:PASSWORD\n        ```\n\n        In InfluxDB Cloud, the username is the email address the user signed up with.\n\n        _Note that many HTTP clients provide a Basic authentication option that\n        accepts the `USERNAME:PASSWORD` syntax and encodes the credentials before\n        sending the request.\n        To learn more about HTTP authentication, see\n        [Mozilla Developer Network (MDN) Web Docs, HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)._\n\n        If authentication is successful, InfluxDB creates a new session for the user\n        and then returns the session cookie in the `Set-Cookie` response header.\n        User sessions exist only in memory.\n        They expire within ten minutes and during restarts of the InfluxDB instance.\n\n        #### User sessions with authorizations\n\n        - In InfluxDB Cloud, a user session inherits all the user's permissions for\n          the organization.\n        - In InfluxDB OSS, a user session inherits all the user's permissions for all\n          the organizations that the user belongs to.\n\n        #### Related endpoints\n\n        - [Signout](#tag/Signout)\n      tags:\n        - Signin\n      security:\n        - BasicAuthentication: []\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '204':\n          description: |\n            Success.\n            The user is authenticated.\n            The `Set-Cookie` response header contains the session cookie.\n        '401':\n          description: |\n            Unauthorized.\n            This error may be caused by one of the following problems:\n              - The user doesn't have access.\n              - The user passed incorrect credentials in the request.\n              - The credentials are formatted incorrectly in the request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden. The user account is disabled.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unsuccessful authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codeSamples:\n        - lang: Shell\n          label: 'cURL: signin with --user option encoding'\n          source: |\n            curl --request POST http://localhost:8086/api/v2/signin \\\n                 --user \"USERNAME:PASSWORD\"\n  /signout:\n    post:\n      operationId: PostSignout\n      summary: Expire the current UI session\n      tags:\n        - Signout\n      description: Expires the current UI session for the user.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '204':\n          description: Session successfully expired\n        '401':\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unsuccessful session expiry\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /ping:\n    get:\n      operationId: GetPing\n      summary: Get the status and version of the instance\n      description: Returns the status and InfluxDB version of the instance.\n      servers:\n        - url: ''\n      tags:\n        - Ping\n        - System information endpoints\n      responses:\n        '204':\n          description: |\n            OK.\n            Headers contain InfluxDB version information.\n          headers:\n            X-Influxdb-Build:\n              schema:\n                type: string\n              description: The type of InfluxDB build.\n            X-Influxdb-Version:\n              schema:\n                type: integer\n              description: The version of InfluxDB.\n    head:\n      operationId: HeadPing\n      summary: Get the status and version of the instance\n      description: Returns the status and InfluxDB version of the instance.\n      servers:\n        - url: ''\n      tags:\n        - Ping\n      responses:\n        '204':\n          description: |\n            OK.\n            Headers contain InfluxDB version information.\n          headers:\n            X-Influxdb-Build:\n              schema:\n                type: string\n              description: The type of InfluxDB build.\n            X-Influxdb-Version:\n              schema:\n                type: integer\n              description: The version of InfluxDB.\n  /:\n    get:\n      operationId: GetRoutes\n      summary: List all top level routes\n      tags:\n        - Routes\n        - System information endpoints\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        default:\n          description: All routes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Routes'\n  /dbrps:\n    get:\n      operationId: GetDBRPs\n      tags:\n        - DBRPs\n      summary: List database retention policy mappings\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: orgID\n          description: Specifies the organization ID to filter on\n          schema:\n            type: string\n        - in: query\n          name: org\n          description: Specifies the organization name to filter on\n          schema:\n            type: string\n        - in: query\n          name: id\n          description: Specifies the mapping ID to filter on\n          schema:\n            type: string\n        - in: query\n          name: bucketID\n          description: Specifies the bucket ID to filter on\n          schema:\n            type: string\n        - in: query\n          name: default\n          description: Specifies filtering on default\n          schema:\n            type: boolean\n        - in: query\n          name: db\n          description: Specifies the database to filter on\n          schema:\n            type: string\n        - in: query\n          name: rp\n          description: Specifies the retention policy to filter on\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success. Returns a list of database retention policy mappings.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DBRPs'\n        '400':\n          description: Bad request. The request has one or more invalid parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostDBRP\n      tags:\n        - DBRPs\n      summary: Add a database retention policy mapping\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: The database retention policy mapping to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DBRPCreate'\n      responses:\n        '201':\n          description: Created. Returns the created database retention policy mapping.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DBRP'\n        '400':\n          description: Bad request. The mapping in the request has one or more invalid IDs.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dbrps/{dbrpID}':\n    get:\n      operationId: GetDBRPsID\n      tags:\n        - DBRPs\n      summary: Retrieve a database retention policy mapping\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: orgID\n          description: Specifies the organization ID of the mapping\n          schema:\n            type: string\n        - in: query\n          name: org\n          description: Specifies the organization name of the mapping\n          schema:\n            type: string\n        - in: path\n          name: dbrpID\n          schema:\n            type: string\n          required: true\n          description: The database retention policy mapping ID\n      responses:\n        '200':\n          description: The database retention policy requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DBRPGet'\n        '400':\n          description: if any of the IDs passed is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchDBRPID\n      tags:\n        - DBRPs\n      summary: Update a database retention policy mapping\n      requestBody:\n        description: Database retention policy update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DBRPUpdate'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: orgID\n          description: Specifies the organization ID of the mapping\n          schema:\n            type: string\n        - in: query\n          name: org\n          description: Specifies the organization name of the mapping\n          schema:\n            type: string\n        - in: path\n          name: dbrpID\n          schema:\n            type: string\n          required: true\n          description: The database retention policy mapping.\n      responses:\n        '200':\n          description: An updated mapping\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DBRPGet'\n        '400':\n          description: if any of the IDs passed is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The mapping was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteDBRPID\n      tags:\n        - DBRPs\n      summary: Delete a database retention policy\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: orgID\n          description: Specifies the organization ID of the mapping\n          schema:\n            type: string\n        - in: query\n          name: org\n          description: Specifies the organization name of the mapping\n          schema:\n            type: string\n        - in: path\n          name: dbrpID\n          schema:\n            type: string\n          required: true\n          description: The database retention policy mapping\n      responses:\n        '204':\n          description: Delete has been accepted\n        '400':\n          description: if any of the IDs passed is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /telegraf/plugins:\n    get:\n      operationId: GetTelegrafPlugins\n      tags:\n        - Telegraf Plugins\n      summary: List all Telegraf plugins\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: type\n          description: The type of plugin desired.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of Telegraf plugins.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TelegrafPlugins'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /telegrafs:\n    get:\n      operationId: GetTelegrafs\n      tags:\n        - Telegrafs\n      summary: List all Telegraf configurations\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: orgID\n          description: The organization ID the Telegraf config belongs to.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of Telegraf configurations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Telegrafs'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTelegrafs\n      tags:\n        - Telegrafs\n      summary: Create a Telegraf configuration\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Telegraf configuration to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TelegrafPluginRequest'\n      responses:\n        '201':\n          description: Telegraf configuration created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Telegraf'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}':\n    get:\n      operationId: GetTelegrafsID\n      tags:\n        - Telegrafs\n      summary: Retrieve a Telegraf configuration\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf configuration ID.\n        - in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n            default: application/toml\n            enum:\n              - application/toml\n              - application/json\n              - application/octet-stream\n      responses:\n        '200':\n          description: Telegraf configuration details\n          content:\n            application/toml:\n              example: |-\n                [agent]\n                interval = \"10s\"\n              schema:\n                type: string\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Telegraf'\n            application/octet-stream:\n              example: |-\n                [agent]\n                interval = \"10s\"\n              schema:\n                type: string\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      operationId: PutTelegrafsID\n      tags:\n        - Telegrafs\n      summary: Update a Telegraf configuration\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      requestBody:\n        description: Telegraf configuration update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TelegrafPluginRequest'\n      responses:\n        '200':\n          description: An updated Telegraf configurations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Telegraf'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteTelegrafsID\n      tags:\n        - Telegrafs\n      summary: Delete a Telegraf configuration\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf configuration ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}/labels':\n    get:\n      operationId: GetTelegrafsIDLabels\n      tags:\n        - Telegrafs\n      summary: List all labels for a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '200':\n          description: A list of all labels for a Telegraf config\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTelegrafsIDLabels\n      tags:\n        - Telegrafs\n      summary: Add a label to a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: The label added to the Telegraf config\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}/labels/{labelID}':\n    delete:\n      operationId: DeleteTelegrafsIDLabelsID\n      tags:\n        - Telegrafs\n      summary: Delete a label from a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The label ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Telegraf config not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}/members':\n    get:\n      operationId: GetTelegrafsIDMembers\n      tags:\n        - Telegrafs\n      summary: List all users with member privileges for a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '200':\n          description: A list of Telegraf config members\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTelegrafsIDMembers\n      tags:\n        - Telegrafs\n      summary: Add a member to a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      requestBody:\n        description: User to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Member added to Telegraf config\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}/members/{userID}':\n    delete:\n      operationId: DeleteTelegrafsIDMembersID\n      tags:\n        - Telegrafs\n      summary: Remove a member from a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the member to remove.\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}/owners':\n    get:\n      operationId: GetTelegrafsIDOwners\n      tags:\n        - Telegrafs\n      summary: List all owners of a Telegraf configuration\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf configuration ID.\n      responses:\n        '200':\n          description: Returns Telegraf configuration owners as a ResourceOwners list\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTelegrafsIDOwners\n      tags:\n        - Telegrafs\n      summary: Add an owner to a Telegraf configuration\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf configuration ID.\n      requestBody:\n        description: User to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Telegraf configuration owner was added. Returns a ResourceOwner that references the User.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}/owners/{userID}':\n    delete:\n      operationId: DeleteTelegrafsIDOwnersID\n      tags:\n        - Telegrafs\n      summary: Remove an owner from a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the owner to remove.\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/variables/{variableID}/labels':\n    get:\n      operationId: GetVariablesIDLabels\n      tags:\n        - Variables\n      summary: List all labels for a variable\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: variableID\n          schema:\n            type: string\n          required: true\n          description: The variable ID.\n      responses:\n        '200':\n          description: A list of all labels for a variable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostVariablesIDLabels\n      tags:\n        - Variables\n      summary: Add a label to a variable\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: variableID\n          schema:\n            type: string\n          required: true\n          description: The variable ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: The newly added label\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/variables/{variableID}/labels/{labelID}':\n    delete:\n      operationId: DeleteVariablesIDLabelsID\n      tags:\n        - Variables\n      summary: Delete a label from a variable\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: variableID\n          schema:\n            type: string\n          required: true\n          description: The variable ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The label ID to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Variable not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /write:\n    post:\n      operationId: PostWrite\n      tags:\n        - Data I/O endpoints\n        - Write\n      summary: Write data\n      description: |\n        Writes data to a bucket.\n\n        Use this endpoint to send data in [line protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) format to InfluxDB.\n\n        #### InfluxDB Cloud\n\n        - Takes the following steps when you send a write request:\n\n          1. Validates the request and queues the write.\n          2. If the write is queued, responds with an HTTP `204` status code.\n          3. Handles the write asynchronously and reaches eventual consistency.\n\n          An HTTP `2xx` status code acknowledges that the write or delete is queued.\n          To ensure that InfluxDB Cloud handles writes and deletes in the order you request them,\n          wait for a response before you send the next request.\n\n          Because writes are asynchronous, data might not yet be written\n          when you receive the response.\n\n        #### InfluxDB OSS\n\n        - Validates the request, handles the write synchronously,\n          and then responds with success or failure.\n        - If all points were written successfully, responds with HTTP `204` status code;\n          otherwise, returns the first line that failed.\n\n        #### Required permissions\n\n        - `write-buckets` or `write-bucket BUCKET_ID`.\n\n          `BUCKET_ID` is the ID of the destination bucket.\n\n        #### Rate limits (with InfluxDB Cloud)\n\n        `write` rate limits apply.\n        For more information, see [limits and adjustable quotas](https://docs.influxdata.com/influxdb/cloud/account-management/limits/).\n\n        #### Related guides\n\n        - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.3/write-data/developer-tools/api)\n        - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.3/write-data/best-practices/optimize-writes/)\n        - [Troubleshoot issues writing data](https://docs.influxdata.com/influxdb/v2.3/write-data/troubleshoot/)\n      requestBody:\n        description: |\n          Data in line protocol format.\n\n          To send compressed data, do the following:\n\n            1. Use [GZIP](https://www.gzip.org/) to compress the line protocol data.\n            2. In your request, send the compressed data and the\n               `Content-Encoding: gzip` header.\n\n          #### Related guides\n\n          - [Best practices for optimizing writes](https://docs.influxdata.com/influxdb/v2.3/write-data/best-practices/optimize-writes/)\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n              format: byte\n            examples:\n              plain-utf8:\n                value: |\n                  airSensors,sensor_id=TLM0201 temperature=73.97038159354763,humidity=35.23103248356096,co=0.48445310567793615 1630424257000000000\n                  airSensors,sensor_id=TLM0202 temperature=75.30007505999716,humidity=35.651929918691714,co=0.5141876544505826 1630424257000000000\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: header\n          name: Content-Encoding\n          description: |\n            The compression applied to the line protocol in the request payload.\n            To send a GZIP payload, pass `Content-Encoding: gzip` header.\n          schema:\n            type: string\n            description: |\n              Content coding.\n              Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.\n            default: identity\n            enum:\n              - gzip\n              - identity\n        - in: header\n          name: Content-Type\n          description: |\n            The format of the data in the request body.\n            To send a line protocol payload, pass `Content-Type: text/plain; charset=utf-8`.\n          schema:\n            type: string\n            description: |\n              `text/plain` is the content type for line protocol. `UTF-8` is the default character set.\n            default: text/plain; charset=utf-8\n            enum:\n              - text/plain\n              - text/plain; charset=utf-8\n        - in: header\n          name: Content-Length\n          description: |\n            The size of the entity-body, in bytes, sent to InfluxDB.\n            If the length is greater than the `max body` configuration option,\n            the server responds with status code `413`.\n          schema:\n            type: integer\n            description: The length in decimal number of octets.\n        - in: header\n          name: Accept\n          description: |\n            The content type that the client can understand.\n            Writes only return a response body if they fail--for example,\n            due to a formatting problem or quota limit.\n\n            #### InfluxDB Cloud\n\n              - Returns only `application/json` for format and limit errors.\n              - Returns only `text/html` for some quota limit errors.\n\n            #### InfluxDB OSS\n\n              - Returns only `application/json` for format and limit errors.\n\n            #### Related guides\n\n            - [Troubleshoot issues writing data](https://docs.influxdata.com/influxdb/v2.3/write-data/troubleshoot/)\n          schema:\n            type: string\n            description: Error content type.\n            default: application/json\n            enum:\n              - application/json\n        - in: query\n          name: org\n          description: |\n            The destination organization for writes.\n            InfluxDB writes all points in the batch to this organization.\n            If you pass both `orgID` and `org`, they must both be valid.\n\n            #### InfluxDB Cloud\n\n            - Doesn't require `org` or `orgID`.\n            - Writes to the bucket in the organization associated with the authorization (API token).\n\n            #### InfluxDB OSS\n\n            - Requires either `org` or `orgID`.\n            - InfluxDB writes all points in the batch to this organization.\n          required: true\n          schema:\n            type: string\n            description: The organization name or ID.\n        - in: query\n          name: orgID\n          description: |\n            The ID of the destination organization for writes.\n            If you pass both `orgID` and `org`, they must both be valid.\n\n            #### InfluxDB Cloud\n\n            - Doesn't require `org` or `orgID`.\n            - Writes to the bucket in the organization associated with the authorization (API token).\n\n\n            #### InfluxDB OSS\n\n            - Requires either `org` or `orgID`.\n            - InfluxDB writes all points in the batch to this organization.\n          schema:\n            type: string\n        - in: query\n          name: bucket\n          description: |\n            The destination bucket for writes.\n            InfluxDB writes all points in the batch to this bucket.\n          required: true\n          schema:\n            type: string\n            description: The bucket name or ID.\n        - in: query\n          name: precision\n          description: The precision for unix timestamps in the line protocol batch.\n          schema:\n            $ref: '#/components/schemas/WritePrecision'\n      responses:\n        '204':\n          description: |\n            Success.\n\n            #### InfluxDB Cloud\n\n            - Validated and queued the request.\n            - Handles the write asynchronously - the write might not have completed yet.\n\n            #### InfluxDB OSS\n\n            - Successfully wrote all points in the batch.\n\n            #### Related guides\n\n            - [How to check for write errors](https://docs.influxdata.com/influxdb/v2.3/write-data/troubleshoot/)\n        '400':\n          description: |\n            Bad request. The response body contains detail about the error.\n\n            InfluxDB returns this error if the line protocol data in the request is malformed.\n            The response body contains the first malformed line in the data, and indicates what was expected.\n            For partial writes, the number of points written and the number of points rejected are also included.\n            For more information, check the `rejected_points` measurement in your `_monitoring` bucket.\n\n            #### InfluxDB Cloud\n\n            - Returns this error for bucket schema conflicts.\n\n            #### InfluxDB OSS\n\n            - Returns this error if `org` or `orgID` doesn't match an organization.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LineProtocolError'\n              examples:\n                measurementSchemaFieldTypeConflict:\n                  summary: (Cloud) field type conflict thrown by an explicit bucket schema\n                  value:\n                    code: invalid\n                    message: 'partial write error (2 written): unable to parse ''air_sensor,service=S1,sensor=L1 temperature=\"90.5\",humidity=70.0 1632850122'': schema: field type for field \"temperature\" not permitted by schema; got String but expected Float'\n                orgNotFound:\n                  summary: (OSS) organization not found\n                  value:\n                    code: invalid\n                    message: 'failed to decode request body: organization not found'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '413':\n          description: |\n            The request payload is too large.\n            InfluxDB rejected the batch and did not write any data.\n\n            #### InfluxDB Cloud:\n\n             - Returns this error if the payload exceeds the 50MB size limit.\n             - Returns `Content-Type: text/html` for this error.\n\n            #### InfluxDB OSS:\n\n             - Returns this error only if the [Go (golang) `ioutil.ReadAll()`](https://pkg.go.dev/io/ioutil#ReadAll) function raises an error.\n             - Returns `Content-Type: application/json` for this error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LineProtocolLengthError'\n              examples:\n                dataExceedsSizeLimitOSS:\n                  summary: InfluxDB OSS response\n                  value: |\n                    {\"code\":\"request too large\",\"message\":\"unable to read data: points batch is too large\"}\n            text/html:\n              schema:\n                type: string\n              examples:\n                dataExceedsSizeLimit:\n                  summary: InfluxDB Cloud response\n                  value: |\n                    \u003chtml\u003e\n                      \u003chead\u003e\u003ctitle\u003e413 Request Entity Too Large\u003c/title\u003e\u003c/head\u003e\n                      \u003cbody\u003e\n                        \u003ccenter\u003e\u003ch1\u003e413 Request Entity Too Large\u003c/h1\u003e\u003c/center\u003e\n                        \u003chr\u003e\n                        \u003ccenter\u003enginx\u003c/center\u003e\n                      \u003c/body\u003e\n                    \u003c/html\u003e\n        '429':\n          description: |\n            Too many requests.\n\n            #### InfluxDB Cloud\n\n              - Returns this error if a **read** or **write** request exceeds your plan's [adjustable service quotas](https://docs.influxdata.com/influxdb/cloud/account-management/limits/#adjustable-service-quotas)\n                or if a **delete** request exceeds the maximum [global limit](https://docs.influxdata.com/influxdb/cloud/account-management/limits/#global-limits).\n              - For rate limits that reset automatically, returns a `Retry-After` header that describes when to try the write again.\n              - For limits that can't reset (for example, **cardinality limit**), doesn't return a `Retry-After` header.\n\n              Rates (data-in (writes), queries (reads), and deletes) accrue within a fixed five-minute window.\n              Once a rate limit is exceeded, InfluxDB returns an error response until the current five-minute window resets.\n\n            #### InfluxDB OSS\n\n              - Doesn't return this error.\n          headers:\n            Retry-After:\n              description: Non-negative decimal integer indicating seconds to wait before retrying the request.\n              schema:\n                type: integer\n                format: int32\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          description: |\n            Service unavailable.\n\n            - Returns this error if\n              the server is temporarily unavailable to accept writes.\n            - Returns a `Retry-After` header that describes when to try the write again.\n          headers:\n            Retry-After:\n              description: Non-negative decimal integer indicating seconds to wait before retrying the request.\n              schema:\n                type: integer\n                format: int32\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n  /delete:\n    post:\n      operationId: PostDelete\n      tags:\n        - Data I/O endpoints\n        - Delete\n      summary: Delete data\n      description: |\n        Deletes data from a bucket.\n\n        Use this endpoint to delete points from a bucket in a specified time range.\n\n        #### InfluxDB Cloud\n\n        - Does the following when you send a delete request:\n\n          1. Validates the request and queues the delete.\n          2. Returns _success_ if queued; _error_ otherwise.\n          3. Handles the delete asynchronously.\n\n        #### InfluxDB OSS\n\n        - Validates the request, handles the delete synchronously,\n          and then responds with success or failure.\n\n        #### Required permissions\n\n        - `write-buckets` or `write-bucket BUCKET_ID`.\n\n          `BUCKET_ID` is the ID of the destination bucket.\n\n        #### Rate limits (with InfluxDB Cloud)\n\n        `write` rate limits apply.\n        For more information, see [limits and adjustable quotas](https://docs.influxdata.com/influxdb/cloud/account-management/limits/).\n\n        #### Related guides\n\n        - [Delete data](https://docs.influxdata.com/influxdb/v2.3/write-data/delete-data/)\n        - Learn how to use [delete predicate syntax](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/delete-predicate/).\n        - Learn how InfluxDB handles [deleted tags](https://docs.influxdata.com/flux/v0.x/stdlib/influxdata/influxdb/schema/measurementtagkeys/)\n          and [deleted fields](https://docs.influxdata.com/flux/v0.x/stdlib/influxdata/influxdb/schema/measurementfieldkeys/).\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request POST INFLUX_URL/api/v2/delete?org=INFLUX_ORG\u0026bucket=INFLUX_BUCKET \\\n              --header 'Authorization: Token INFLUX_API_TOKEN' \\\n              --header 'Content-Type: application/json' \\\n              --data '{\n                \"start\": \"2020-03-01T00:00:00Z\",\n                \"stop\": \"2020-11-14T00:00:00Z\",\n                \"predicate\": \"tag1=\\\"value1\\\" and (tag2=\\\"value2\\\" and tag3!=\\\"value3\\\")\"\n              }'\n      requestBody:\n        description: |\n          Time range parameters and an optional **delete predicate expression**.\n\n          To select points to delete within the specified time range, pass a\n          **delete predicate expression** in the `predicate` property of the request body.\n          If you don't pass a `predicate`, InfluxDB deletes all data with timestamps\n          in the specified time range.\n\n          #### Related guides\n\n          - [Delete data](https://docs.influxdata.com/influxdb/v2.3/write-data/delete-data/)\n          - Learn how to use [delete predicate syntax](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/delete-predicate/).\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeletePredicateRequest'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: org\n          description: |\n            The organization to delete data from.\n            If you pass both `orgID` and `org`, they must both be valid.\n\n            #### InfluxDB Cloud\n\n            - Doesn't require `org` or `orgID`.\n            - Deletes data from the bucket in the organization associated with the authorization (API token).\n\n            #### InfluxDB OSS\n\n            - Requires either `org` or `orgID`.\n          schema:\n            type: string\n            description: The organization name or ID.\n        - in: query\n          name: bucket\n          description: |\n            The name or ID of the bucket to delete data from.\n            If you pass both `bucket` and `bucketID`, `bucketID` takes precedence.\n          schema:\n            type: string\n            description: The bucket name or ID.\n        - in: query\n          name: orgID\n          description: |\n            The ID of the organization to delete data from.\n            If you pass both `orgID` and `org`, they must both be valid.\n\n            #### InfluxDB Cloud\n\n            - Doesn't require `org` or `orgID`.\n            - Deletes data from the bucket in the organization associated with the authorization (API token).\n\n            #### InfluxDB OSS\n\n            - Requires either `org` or `orgID`.\n          schema:\n            type: string\n            description: The organization ID.\n        - in: query\n          name: bucketID\n          description: |\n            The ID of the bucket to delete data from.\n            If you pass both `bucket` and `bucketID`, `bucketID` takes precedence.\n          schema:\n            type: string\n            description: The bucket ID.\n      responses:\n        '204':\n          description: |\n            Success.\n\n            #### InfluxDB Cloud\n\n            - Validated and queued the request.\n            - Handles the delete asynchronously - the deletion might not have completed yet.\n\n            An HTTP `2xx` status code acknowledges that the write or delete is queued.\n            To ensure that InfluxDB Cloud handles writes and deletes in the order you request them,\n            wait for a response before you send the next request.\n\n            Because writes are asynchronous, data might not yet be written\n            when you receive the response.\n\n            #### InfluxDB OSS\n\n            - Deleted the data.\n        '400':\n          description: |\n            Bad request.\n            The response body contains detail about the error.\n\n            #### InfluxDB OSS\n\n            - Returns this error if `org` or `orgID` doesn't match an organization.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                orgNotFound:\n                  summary: Organization not found\n                  value:\n                    code: invalid\n                    message: 'failed to decode request body: organization not found'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n  /labels:\n    post:\n      operationId: PostLabels\n      tags:\n        - Labels\n      summary: Create a label\n      requestBody:\n        description: The label to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelCreateRequest'\n      responses:\n        '201':\n          description: Success. The label was created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n    get:\n      operationId: GetLabels\n      tags:\n        - Labels\n      summary: List all labels\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: orgID\n          description: The organization ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success. The response body contains a list of labels.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n  '/labels/{labelID}':\n    get:\n      operationId: GetLabelsID\n      tags:\n        - Labels\n      summary: Retrieve a label\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to update.\n      responses:\n        '200':\n          description: Success. The response body contains the label.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n    patch:\n      operationId: PatchLabelsID\n      tags:\n        - Labels\n      summary: Update a label\n      requestBody:\n        description: A label update.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelUpdate'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to update.\n      responses:\n        '200':\n          description: Success. The response body contains the updated label.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n    delete:\n      operationId: DeleteLabelsID\n      tags:\n        - Labels\n      summary: Delete a label\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Success. The delete was accepted.\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n  '/dashboards/{dashboardID}':\n    get:\n      operationId: GetDashboardsID\n      tags:\n        - Dashboards\n      summary: Retrieve a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n        - in: query\n          name: include\n          required: false\n          schema:\n            type: string\n            enum:\n              - properties\n          description: 'If `properties`, includes the cell view properties in the response.'\n      responses:\n        '200':\n          description: Retrieve a single dashboard\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Dashboard'\n                  - $ref: '#/components/schemas/DashboardWithViewProperties'\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchDashboardsID\n      tags:\n        - Dashboards\n      summary: Update a dashboard\n      requestBody:\n        description: Patching of a dashboard\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: PatchDashboardRequest\n              properties:\n                name:\n                  description: 'optional, when provided will replace the name'\n                  type: string\n                description:\n                  description: 'optional, when provided will replace the description'\n                  type: string\n                cells:\n                  description: 'optional, when provided will replace all existing cells with the cells provided'\n                  $ref: '#/components/schemas/CellWithViewProperties'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n      responses:\n        '200':\n          description: Updated dashboard\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteDashboardsID\n      tags:\n        - Dashboards\n      summary: Delete a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/cells':\n    put:\n      operationId: PutDashboardsIDCells\n      tags:\n        - Cells\n        - Dashboards\n      summary: Replace cells in a dashboard\n      description: Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Cells'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n      responses:\n        '201':\n          description: Replaced dashboard cells\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostDashboardsIDCells\n      tags:\n        - Cells\n        - Dashboards\n      summary: Create a dashboard cell\n      requestBody:\n        description: Cell that will be added\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCell'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n      responses:\n        '201':\n          description: Cell successfully added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cell'\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/cells/{cellID}':\n    patch:\n      operationId: PatchDashboardsIDCellsID\n      tags:\n        - Cells\n        - Dashboards\n      summary: Update the non-positional information related to a cell\n      description: Updates the non positional information related to a cell. Updates to a single cell's positional data could cause grid conflicts.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CellUpdate'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: The ID of the cell to update.\n      responses:\n        '200':\n          description: Updated dashboard cell\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cell'\n        '404':\n          description: Cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteDashboardsIDCellsID\n      tags:\n        - Cells\n        - Dashboards\n      summary: Delete a dashboard cell\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to delete.\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: The ID of the cell to delete.\n      responses:\n        '204':\n          description: Cell successfully deleted\n        '404':\n          description: Cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/cells/{cellID}/view':\n    get:\n      operationId: GetDashboardsIDCellsIDView\n      tags:\n        - Cells\n        - Dashboards\n        - Views\n      summary: Retrieve the view for a cell\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: The cell ID.\n      responses:\n        '200':\n          description: A dashboard cells view\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/View'\n        '404':\n          description: Cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchDashboardsIDCellsIDView\n      tags:\n        - Cells\n        - Dashboards\n        - Views\n      summary: Update the view for a cell\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/View'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: The ID of the cell to update.\n      responses:\n        '200':\n          description: Updated cell view\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/View'\n        '404':\n          description: Cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/labels':\n    get:\n      operationId: GetDashboardsIDLabels\n      tags:\n        - Dashboards\n      summary: List all labels for a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '200':\n          description: A list of all labels for a dashboard\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostDashboardsIDLabels\n      tags:\n        - Dashboards\n      summary: Add a label to a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: The label added to the dashboard\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/labels/{labelID}':\n    delete:\n      operationId: DeleteDashboardsIDLabelsID\n      tags:\n        - Dashboards\n      summary: Delete a label from a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/members':\n    get:\n      operationId: GetDashboardsIDMembers\n      tags:\n        - Dashboards\n      summary: List all dashboard members\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '200':\n          description: A list of users who have member privileges for a dashboard\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostDashboardsIDMembers\n      tags:\n        - Dashboards\n      summary: Add a member to a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      requestBody:\n        description: User to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Added to dashboard members\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/members/{userID}':\n    delete:\n      operationId: DeleteDashboardsIDMembersID\n      tags:\n        - Dashboards\n      summary: Remove a member from a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the member to remove.\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/owners':\n    get:\n      operationId: GetDashboardsIDOwners\n      tags:\n        - Dashboards\n      summary: List all dashboard owners\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '200':\n          description: A list of users who have owner privileges for a dashboard\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostDashboardsIDOwners\n      tags:\n        - Dashboards\n      summary: Add an owner to a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      requestBody:\n        description: User to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Added to dashboard owners\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/owners/{userID}':\n    delete:\n      operationId: DeleteDashboardsIDOwnersID\n      tags:\n        - Dashboards\n      summary: Remove an owner from a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the owner to remove.\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /query/ast:\n    post:\n      operationId: PostQueryAst\n      tags:\n        - Query\n      summary: Generate a query Abstract Syntax Tree (AST)\n      description: |\n        Analyzes a Flux query and returns a complete package source [Abstract Syntax\n        Tree (AST)](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#abstract-syntax-tree-ast)\n        for the query.\n\n        Use this endpoint for deep query analysis such as debugging unexpected query\n        results.\n\n        A Flux query AST provides a semantic, tree-like representation with contextual\n        information about the query. The AST illustrates how the query is distributed\n        into different components for execution.\n\n        #### Limitations\n\n        -  The endpoint doesn't validate values in the query--for example:\n\n            The following sample Flux query has correct syntax, but contains an incorrect `from()` property key:\n\n            ```js\n            from(foo: \"iot_center\")\n                |\u003e range(start: -90d)\n                |\u003e filter(fn: (r) =\u003e r._measurement == \"environment\")\n            ```\n\n            The following sample JSON shows how to pass the query in the request body:\n\n            ```js\n            from(foo: \"iot_center\")\n            |\u003e range(start: -90d)\n            |\u003e filter(fn: (r) =\u003e r._measurement == \"environment\")\n            ```\n\n            The following code sample shows how to pass the query as JSON in the request body:\n\n            ```json\n            { \"query\": \"from(foo: \\\"iot_center\\\")\\\n                            |\u003e range(start: -90d)\\\n                            |\u003e filter(fn: (r) =\u003e r._measurement == \\\"environment\\\")\"\n            }\n            ```\n\n            Passing this to `/api/v2/query/ast` will return a successful response\n            with a generated AST.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: header\n          name: Content-Type\n          schema:\n            type: string\n            enum:\n              - application/json\n      requestBody:\n        description: The Flux query to analyze.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LanguageRequest'\n      x-codeSamples:\n        - lang: Shell\n          label: 'cURL: Analyze and generate AST for the query'\n          source: |\n            curl --request POST \"http://localhost:8086/api/v2/query/ast\" \\\n              --header 'Content-Type: application/json' \\\n              --header 'Accept: application/json' \\\n              --header \"Authorization: Token INFLUX_TOKEN\" \\\n              --data-binary @- \u003c\u003c EOL\n                  {\n                    \"query\": \"from(bucket: \\\"INFLUX_BUCKET_NAME\\\")\\\n                    |\u003e range(start: -5m)\\\n                    |\u003e filter(fn: (r) =\u003e r._measurement == \\\"example-measurement\\\")\"\n                  }\n            EOL\n      responses:\n        '200':\n          description: |\n            Success.\n            The response body contains an Abstract Syntax Tree (AST) of the Flux query.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ASTResponse'\n              examples:\n                successResponse:\n                  value:\n                    ast:\n                      type: Package\n                      package: main\n                      files:\n                        - type: File\n                          location:\n                            start:\n                              line: 1\n                              column: 1\n                            end:\n                              line: 1\n                              column: 109\n                            source: 'from(bucket: \"example-bucket\") |\u003e range(start: -5m) |\u003e filter(fn: (r) =\u003e r._measurement == \"example-measurement\")'\n                          metadata: parser-type=rust\n                          package: null\n                          imports: null\n                          body:\n                            - type: ExpressionStatement\n                              location:\n                                start:\n                                  line: 1\n                                  column: 1\n                                end:\n                                  line: 1\n                                  column: 109\n                                source: 'from(bucket: \"example-bucket\") |\u003e range(start: -5m) |\u003e filter(fn: (r) =\u003e r._measurement == \"example-measurement\")'\n                              expression:\n                                type: PipeExpression\n                                location:\n                                  start:\n                                    line: 1\n                                    column: 1\n                                  end:\n                                    line: 1\n                                    column: 109\n                                  source: 'from(bucket: \"example-bucket\") |\u003e range(start: -5m) |\u003e filter(fn: (r) =\u003e r._measurement == \"example-measurement\")'\n                                argument:\n                                  type: PipeExpression\n                                  location:\n                                    start:\n                                      line: 1\n                                      column: 1\n                                    end:\n                                      line: 1\n                                      column: 47\n                                    source: 'from(bucket: \"example-bucket\") |\u003e range(start: -5m)'\n                                  argument:\n                                    type: CallExpression\n                                    location:\n                                      start:\n                                        line: 1\n                                        column: 1\n                                      end:\n                                        line: 1\n                                        column: 26\n                                      source: 'from(bucket: \"example-bucket\")'\n                                    callee:\n                                      type: Identifier\n                                      location:\n                                        start:\n                                          line: 1\n                                          column: 1\n                                        end:\n                                          line: 1\n                                          column: 5\n                                        source: from\n                                      name: from\n                                    arguments:\n                                      - type: ObjectExpression\n                                        location:\n                                          start:\n                                            line: 1\n                                            column: 6\n                                          end:\n                                            line: 1\n                                            column: 25\n                                          source: 'bucket: \"example-bucket\"'\n                                        properties:\n                                          - type: Property\n                                            location:\n                                              start:\n                                                line: 1\n                                                column: 6\n                                              end:\n                                                line: 1\n                                                column: 25\n                                              source: 'bucket: \"example-bucket\"'\n                                            key:\n                                              type: Identifier\n                                              location:\n                                                start:\n                                                  line: 1\n                                                  column: 6\n                                                end:\n                                                  line: 1\n                                                  column: 12\n                                                source: bucket\n                                              name: bucket\n                                            value:\n                                              type: StringLiteral\n                                              location:\n                                                start:\n                                                  line: 1\n                                                  column: 14\n                                                end:\n                                                  line: 1\n                                                  column: 25\n                                                source: '\"example-bucket\"'\n                                              value: example-bucket\n                                  call:\n                                    type: CallExpression\n                                    location:\n                                      start:\n                                        line: 1\n                                        column: 30\n                                      end:\n                                        line: 1\n                                        column: 47\n                                      source: 'range(start: -5m)'\n                                    callee:\n                                      type: Identifier\n                                      location:\n                                        start:\n                                          line: 1\n                                          column: 30\n                                        end:\n                                          line: 1\n                                          column: 35\n                                        source: range\n                                      name: range\n                                    arguments:\n                                      - type: ObjectExpression\n                                        location:\n                                          start:\n                                            line: 1\n                                            column: 36\n                                          end:\n                                            line: 1\n                                            column: 46\n                                          source: 'start: -5m'\n                                        properties:\n                                          - type: Property\n                                            location:\n                                              start:\n                                                line: 1\n                                                column: 36\n                                              end:\n                                                line: 1\n                                                column: 46\n                                              source: 'start: -5m'\n                                            key:\n                                              type: Identifier\n                                              location:\n                                                start:\n                                                  line: 1\n                                                  column: 36\n                                                end:\n                                                  line: 1\n                                                  column: 41\n                                                source: start\n                                              name: start\n                                            value:\n                                              type: UnaryExpression\n                                              location:\n                                                start:\n                                                  line: 1\n                                                  column: 43\n                                                end:\n                                                  line: 1\n                                                  column: 46\n                                                source: '-5m'\n                                              operator: '-'\n                                              argument:\n                                                type: DurationLiteral\n                                                location:\n                                                  start:\n                                                    line: 1\n                                                    column: 44\n                                                  end:\n                                                    line: 1\n                                                    column: 46\n                                                  source: 5m\n                                                values:\n                                                  - magnitude: 5\n                                                    unit: m\n                                call:\n                                  type: CallExpression\n                                  location:\n                                    start:\n                                      line: 1\n                                      column: 51\n                                    end:\n                                      line: 1\n                                      column: 109\n                                    source: 'filter(fn: (r) =\u003e r._measurement == \"example-measurement\")'\n                                  callee:\n                                    type: Identifier\n                                    location:\n                                      start:\n                                        line: 1\n                                        column: 51\n                                      end:\n                                        line: 1\n                                        column: 57\n                                      source: filter\n                                    name: filter\n                                  arguments:\n                                    - type: ObjectExpression\n                                      location:\n                                        start:\n                                          line: 1\n                                          column: 58\n                                        end:\n                                          line: 1\n                                          column: 108\n                                        source: 'fn: (r) =\u003e r._measurement == \"example-measurement\"'\n                                      properties:\n                                        - type: Property\n                                          location:\n                                            start:\n                                              line: 1\n                                              column: 58\n                                            end:\n                                              line: 1\n                                              column: 108\n                                            source: 'fn: (r) =\u003e r._measurement == \"example-measurement\"'\n                                          key:\n                                            type: Identifier\n                                            location:\n                                              start:\n                                                line: 1\n                                                column: 58\n                                              end:\n                                                line: 1\n                                                column: 60\n                                              source: fn\n                                            name: fn\n                                          value:\n                                            type: FunctionExpression\n                                            location:\n                                              start:\n                                                line: 1\n                                                column: 62\n                                              end:\n                                                line: 1\n                                                column: 108\n                                              source: (r) =\u003e r._measurement == \"example-measurement\"\n                                            params:\n                                              - type: Property\n                                                location:\n                                                  start:\n                                                    line: 1\n                                                    column: 63\n                                                  end:\n                                                    line: 1\n                                                    column: 64\n                                                  source: r\n                                                key:\n                                                  type: Identifier\n                                                  location:\n                                                    start:\n                                                      line: 1\n                                                      column: 63\n                                                    end:\n                                                      line: 1\n                                                      column: 64\n                                                    source: r\n                                                  name: r\n                                                value: null\n                                            body:\n                                              type: BinaryExpression\n                                              location:\n                                                start:\n                                                  line: 1\n                                                  column: 69\n                                                end:\n                                                  line: 1\n                                                  column: 108\n                                                source: r._measurement == \"example-measurement\"\n                                              operator: '=='\n                                              left:\n                                                type: MemberExpression\n                                                location:\n                                                  start:\n                                                    line: 1\n                                                    column: 69\n                                                  end:\n                                                    line: 1\n                                                    column: 83\n                                                  source: r._measurement\n                                                object:\n                                                  type: Identifier\n                                                  location:\n                                                    start:\n                                                      line: 1\n                                                      column: 69\n                                                    end:\n                                                      line: 1\n                                                      column: 70\n                                                    source: r\n                                                  name: r\n                                                property:\n                                                  type: Identifier\n                                                  location:\n                                                    start:\n                                                      line: 1\n                                                      column: 71\n                                                    end:\n                                                      line: 1\n                                                      column: 83\n                                                    source: _measurement\n                                                  name: _measurement\n                                              right:\n                                                type: StringLiteral\n                                                location:\n                                                  start:\n                                                    line: 1\n                                                    column: 87\n                                                  end:\n                                                    line: 1\n                                                    column: 108\n                                                  source: '\"example-measurement\"'\n                                                value: example-measurement\n        '400':\n          description: |\n            Bad request.\n            InfluxDB is unable to parse the request.\n            The response body contains detail about the problem.\n          headers:\n            X-Platform-Error-Code:\n              description: |\n                The reason for the error.\n              schema:\n                type: string\n                example: invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                invalidASTValue:\n                  summary: Invalid AST\n                  description: |\n                    If the request body contains a missing property key in `from()`,\n                    returns `invalid` and problem detail.\n                  value:\n                    code: invalid\n                    message: 'invalid AST: loc 1:6-1:19: missing property key'\n        default:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /query/suggestions:\n    get:\n      operationId: GetQuerySuggestions\n      tags:\n        - Query\n      summary: Retrieve Flux query suggestions\n      description: |\n        Retrieves a list of Flux query suggestions. Each suggestion contains a\n        [Flux function](https://docs.influxdata.com/flux/v0.x/stdlib/all-functions/)\n        name and parameters.\n\n        Use this endpoint to retrieve a list of Flux query suggestions used in the\n        InfluxDB Flux Query Builder. Helper function names have an underscore (`_`)\n        prefix and aren't meant to be used directly in queries--for example:\n\n        - **Recommended**:  Use `top(n, columns=[\"_value\"], tables=\u003c-)` to sort\n          on a column and keep the top n records instead of `_sortLimit_`.\n          `top` uses the `_sortLimit` helper function.\n\n        #### Limitations\n\n        - Using `/api/v2/query/suggestions/` (note the trailing slash) with cURL\n        will result in a HTTP `301 Moved Permanently` status code. Please use\n        `/api/v2/query/suggestions` without a trailing slash.\n\n        - When writing a query, avoid using `_functionName()` helper functions\n        exposed by this endpoint.\n\n        #### Related Guides\n\n        - [List of all Flux functions](https://docs.influxdata.com/influxdb/v2.3/flux/v0.x/stdlib/all-functions/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description: |\n            Success.\n            The response body contains a list of Flux query suggestions--function\n            names used in the Flux Query Builder autocomplete suggestions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FluxSuggestions'\n              examples:\n                successResponse:\n                  value:\n                    funcs:\n                      - name: _fillEmpty\n                        params:\n                          createEmpty: bool\n                          tables: stream\n                      - name: _highestOrLowest\n                        params:\n                          _sortLimit: function\n                          column: invalid\n                          groupColumns: array\n                          'n': invalid\n                          reducer: function\n                          tables: stream\n                      - name: _hourSelection\n                        params:\n                          location: object\n                          start: int\n                          stop: int\n                          tables: stream\n                          timeColumn: string\n                      - name: _sortLimit\n                        params:\n                          columns: array\n                          desc: bool\n                          'n': int\n                          tables: stream\n                      - name: _window\n                        params:\n                          createEmpty: bool\n                          every: duration\n                          location: object\n                          offset: duration\n                          period: duration\n                          startColumn: string\n                          stopColumn: string\n                          tables: stream\n                          timeColumn: string\n                      - name: aggregateWindow\n                        params:\n                          column: invalid\n                          createEmpty: bool\n                          every: duration\n                          fn: function\n                          location: object\n                          offset: duration\n                          period: duration\n                          tables: stream\n                          timeDst: string\n                          timeSrc: string\n                      - name: bool\n                        params:\n                          v: invalid\n                      - name: bottom\n                        params:\n                          columns: array\n                          'n': int\n                          tables: stream\n                      - name: buckets\n                        params:\n                          host: string\n                          org: string\n                          orgID: string\n                          token: string\n                      - name: bytes\n                        params:\n                          v: invalid\n                      - name: cardinality\n                        params:\n                          bucket: string\n                          bucketID: string\n                          host: string\n                          org: string\n                          orgID: string\n                          predicate: function\n                          start: invalid\n                          stop: invalid\n                          token: string\n                      - name: chandeMomentumOscillator\n                        params:\n                          columns: array\n                          'n': int\n                          tables: stream\n                      - name: columns\n                        params:\n                          column: string\n                          tables: stream\n                      - name: contains\n                        params:\n                          set: array\n                          value: invalid\n                      - name: count\n                        params:\n                          column: string\n                          tables: stream\n                      - name: cov\n                        params:\n                          'on': array\n                          pearsonr: bool\n                          x: invalid\n                          'y': invalid\n                      - name: covariance\n                        params:\n                          columns: array\n                          pearsonr: bool\n                          tables: stream\n                          valueDst: string\n                      - name: cumulativeSum\n                        params:\n                          columns: array\n                          tables: stream\n                      - name: derivative\n                        params:\n                          columns: array\n                          initialZero: bool\n                          nonNegative: bool\n                          tables: stream\n                          timeColumn: string\n                          unit: duration\n                      - name: die\n                        params:\n                          msg: string\n                      - name: difference\n                        params:\n                          columns: array\n                          initialZero: bool\n                          keepFirst: bool\n                          nonNegative: bool\n                          tables: stream\n                      - name: display\n                        params:\n                          v: invalid\n                      - name: distinct\n                        params:\n                          column: string\n                          tables: stream\n                      - name: doubleEMA\n                        params:\n                          'n': int\n                          tables: stream\n                      - name: drop\n                        params:\n                          columns: array\n                          fn: function\n                          tables: stream\n                      - name: duplicate\n                        params:\n                          as: string\n                          column: string\n                          tables: stream\n                      - name: duration\n                        params:\n                          v: invalid\n                      - name: elapsed\n                        params:\n                          columnName: string\n                          tables: stream\n                          timeColumn: string\n                          unit: duration\n                      - name: exponentialMovingAverage\n                        params:\n                          'n': int\n                          tables: stream\n                      - name: fill\n                        params:\n                          column: string\n                          tables: stream\n                          usePrevious: bool\n                          value: invalid\n                      - name: filter\n                        params:\n                          fn: function\n                          onEmpty: string\n                          tables: stream\n                      - name: findColumn\n                        params:\n                          column: string\n                          fn: function\n                          tables: stream\n                      - name: findRecord\n                        params:\n                          fn: function\n                          idx: int\n                          tables: stream\n                      - name: first\n                        params:\n                          column: string\n                          tables: stream\n                      - name: float\n                        params:\n                          v: invalid\n                      - name: from\n                        params:\n                          bucket: string\n                          bucketID: string\n                          host: string\n                          org: string\n                          orgID: string\n                          token: string\n                      - name: getColumn\n                        params:\n                          column: string\n                      - name: getRecord\n                        params:\n                          idx: int\n                      - name: group\n                        params:\n                          columns: array\n                          mode: string\n                          tables: stream\n                      - name: highestAverage\n                        params:\n                          column: string\n                          groupColumns: array\n                          'n': int\n                          tables: stream\n                      - name: highestCurrent\n                        params:\n                          column: string\n                          groupColumns: array\n                          'n': int\n                          tables: stream\n                      - name: highestMax\n                        params:\n                          column: string\n                          groupColumns: array\n                          'n': int\n                          tables: stream\n                      - name: histogram\n                        params:\n                          bins: array\n                          column: string\n                          countColumn: string\n                          normalize: bool\n                          tables: stream\n                          upperBoundColumn: string\n                      - name: histogramQuantile\n                        params:\n                          countColumn: string\n                          minValue: float\n                          quantile: float\n                          tables: stream\n                          upperBoundColumn: string\n                          valueColumn: string\n                      - name: holtWinters\n                        params:\n                          column: string\n                          interval: duration\n                          'n': int\n                          seasonality: int\n                          tables: stream\n                          timeColumn: string\n                          withFit: bool\n                      - name: hourSelection\n                        params:\n                          location: object\n                          start: int\n                          stop: int\n                          tables: stream\n                          timeColumn: string\n                      - name: increase\n                        params:\n                          columns: array\n                          tables: stream\n                      - name: int\n                        params:\n                          v: invalid\n                      - name: integral\n                        params:\n                          column: string\n                          interpolate: string\n                          tables: stream\n                          timeColumn: string\n                          unit: duration\n                      - name: join\n                        params:\n                          method: string\n                          'on': array\n                          tables: invalid\n                      - name: kaufmansAMA\n                        params:\n                          column: string\n                          'n': int\n                          tables: stream\n                      - name: kaufmansER\n                        params:\n                          'n': int\n                          tables: stream\n                      - name: keep\n                        params:\n                          columns: array\n                          fn: function\n                          tables: stream\n                      - name: keyValues\n                        params:\n                          keyColumns: array\n                          tables: stream\n                      - name: keys\n                        params:\n                          column: string\n                          tables: stream\n                      - name: last\n                        params:\n                          column: string\n                          tables: stream\n                      - name: length\n                        params:\n                          arr: array\n                      - name: limit\n                        params:\n                          'n': int\n                          offset: int\n                          tables: stream\n                      - name: linearBins\n                        params:\n                          count: int\n                          infinity: bool\n                          start: float\n                          width: float\n                      - name: logarithmicBins\n                        params:\n                          count: int\n                          factor: float\n                          infinity: bool\n                          start: float\n                      - name: lowestAverage\n                        params:\n                          column: string\n                          groupColumns: array\n                          'n': int\n                          tables: stream\n                      - name: lowestCurrent\n                        params:\n                          column: string\n                          groupColumns: array\n                          'n': int\n                          tables: stream\n                      - name: lowestMin\n                        params:\n                          column: string\n                          groupColumns: array\n                          'n': int\n                          tables: stream\n                      - name: map\n                        params:\n                          fn: function\n                          mergeKey: bool\n                          tables: stream\n                      - name: max\n                        params:\n                          column: string\n                          tables: stream\n                      - name: mean\n                        params:\n                          column: string\n                          tables: stream\n                      - name: median\n                        params:\n                          column: string\n                          compression: float\n                          method: string\n                          tables: stream\n                      - name: min\n                        params:\n                          column: string\n                          tables: stream\n                      - name: mode\n                        params:\n                          column: string\n                          tables: stream\n                      - name: movingAverage\n                        params:\n                          'n': int\n                          tables: stream\n                      - name: now\n                        params: {}\n                      - name: pearsonr\n                        params:\n                          'on': array\n                          x: invalid\n                          'y': invalid\n                      - name: pivot\n                        params:\n                          columnKey: array\n                          rowKey: array\n                          tables: stream\n                          valueColumn: string\n                      - name: quantile\n                        params:\n                          column: string\n                          compression: float\n                          method: string\n                          q: float\n                          tables: stream\n                      - name: range\n                        params:\n                          start: invalid\n                          stop: invalid\n                          tables: stream\n                      - name: reduce\n                        params:\n                          fn: function\n                          identity: invalid\n                          tables: stream\n                      - name: relativeStrengthIndex\n                        params:\n                          columns: array\n                          'n': int\n                          tables: stream\n                      - name: rename\n                        params:\n                          columns: invalid\n                          fn: function\n                          tables: stream\n                      - name: sample\n                        params:\n                          column: string\n                          'n': int\n                          pos: int\n                          tables: stream\n                      - name: set\n                        params:\n                          key: string\n                          tables: stream\n                          value: string\n                      - name: skew\n                        params:\n                          column: string\n                          tables: stream\n                      - name: sort\n                        params:\n                          columns: array\n                          desc: bool\n                          tables: stream\n                      - name: spread\n                        params:\n                          column: string\n                          tables: stream\n                      - name: stateCount\n                        params:\n                          column: string\n                          fn: function\n                          tables: stream\n                      - name: stateDuration\n                        params:\n                          column: string\n                          fn: function\n                          tables: stream\n                          timeColumn: string\n                          unit: duration\n                      - name: stateTracking\n                        params:\n                          countColumn: string\n                          durationColumn: string\n                          durationUnit: duration\n                          fn: function\n                          tables: stream\n                          timeColumn: string\n                      - name: stddev\n                        params:\n                          column: string\n                          mode: string\n                          tables: stream\n                      - name: string\n                        params:\n                          v: invalid\n                      - name: sum\n                        params:\n                          column: string\n                          tables: stream\n                      - name: tableFind\n                        params:\n                          fn: function\n                          tables: stream\n                      - name: tail\n                        params:\n                          'n': int\n                          offset: int\n                          tables: stream\n                      - name: time\n                        params:\n                          v: invalid\n                      - name: timeShift\n                        params:\n                          columns: array\n                          duration: duration\n                          tables: stream\n                      - name: timeWeightedAvg\n                        params:\n                          tables: stream\n                          unit: duration\n                      - name: timedMovingAverage\n                        params:\n                          column: string\n                          every: duration\n                          period: duration\n                          tables: stream\n                      - name: to\n                        params:\n                          bucket: string\n                          bucketID: string\n                          fieldFn: function\n                          host: string\n                          measurementColumn: string\n                          org: string\n                          orgID: string\n                          tables: stream\n                          tagColumns: array\n                          timeColumn: string\n                          token: string\n                      - name: toBool\n                        params:\n                          tables: stream\n                      - name: toFloat\n                        params:\n                          tables: stream\n                      - name: toInt\n                        params:\n                          tables: stream\n                      - name: toString\n                        params:\n                          tables: stream\n                      - name: toTime\n                        params:\n                          tables: stream\n                      - name: toUInt\n                        params:\n                          tables: stream\n                      - name: today\n                        params: {}\n                      - name: top\n                        params:\n                          columns: array\n                          'n': int\n                          tables: stream\n                      - name: tripleEMA\n                        params:\n                          'n': int\n                          tables: stream\n                      - name: tripleExponentialDerivative\n                        params:\n                          'n': int\n                          tables: stream\n                      - name: truncateTimeColumn\n                        params:\n                          tables: stream\n                          timeColumn: invalid\n                          unit: duration\n                      - name: uint\n                        params:\n                          v: invalid\n                      - name: union\n                        params:\n                          tables: array\n                      - name: unique\n                        params:\n                          column: string\n                          tables: stream\n                      - name: wideTo\n                        params:\n                          bucket: string\n                          bucketID: string\n                          host: string\n                          org: string\n                          orgID: string\n                          tables: stream\n                          token: string\n                      - name: window\n                        params:\n                          createEmpty: bool\n                          every: duration\n                          location: object\n                          offset: duration\n                          period: duration\n                          startColumn: string\n                          stopColumn: string\n                          tables: stream\n                          timeColumn: string\n                      - name: yield\n                        params:\n                          name: string\n                          tables: stream\n        '301':\n          description: |\n            Moved Permanently.\n            InfluxData has moved the URL of the endpoint.\n            Use `/api/v2/query/suggestions`.\n          content:\n            text/html:\n              schema:\n                properties:\n                  body:\n                    readOnly: true\n                    description: Response message with URL of requested resource.\n                    type: string\n              examples:\n                movedPermanently:\n                  summary: Invalid URL\n                  description: |\n                    The URL has been permanently moved. Use `/api/v2/query/suggestions`.\n                  value: |\n                    \u003ca href=\"/api/v2/query/suggestions?orgID=INFLUX_ORG_ID\"\u003eMoved Permanently\u003c/a\u003e\n        default:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request GET \"https://cloud2.influxdata.com/api/v2/query/suggestions\" \\\n              --header \"Accept: application/json\" \\\n              --header \"Authorization: Token INFLUX_API_TOKEN\"\n  '/query/suggestions/{name}':\n    get:\n      operationId: GetQuerySuggestionsName\n      tags:\n        - Query\n      summary: Retrieve a query suggestion for a branching suggestion\n      description: |\n        Retrieves a query suggestion that contains the name and parameters of the\n        requested function.\n\n        Use this endpoint to pass a branching suggestion (a Flux function name) and\n        retrieve the parameters of the requested function.\n\n        #### Limitations\n\n        - Use `/api/v2/query/suggestions/{name}` (without a trailing slash).\n        `/api/v2/query/suggestions/{name}/` (note the trailing slash) results in a\n        HTTP `301 Moved Permanently` status.\n\n        - The function `name` must exist and must be spelled correctly.\n\n        #### Related Guides\n\n        - [List of all Flux functions](https://docs.influxdata.com/influxdb/v2.3/flux/v0.x/stdlib/all-functions/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: name\n          schema:\n            type: string\n          required: true\n          description: |\n            A Flux Function name.\n            Only returns functions with this name.\n      responses:\n        '200':\n          description: |\n            Success.\n            The response body contains the function name and parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FluxSuggestion'\n              examples:\n                successResponse:\n                  value:\n                    name: sum\n                    params:\n                      column: string\n                      tables: stream\n        '500':\n          description: |\n            Internal server error.\n            The value passed for _`name`_ may have been misspelled.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                internalError:\n                  summary: Invalid function\n                  description: |\n                    The requested function doesn't exist.\n                  value:\n                    code: internal error\n                    message: An internal error has occurred\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request GET \"https://cloud2.influxdata.com/api/v2/query/suggestions/sum/\" \\\n              --header \"Accept: application/json\" \\\n              --header \"Authorization: Token INFLUX_API_TOKEN\"\n  /query/analyze:\n    post:\n      operationId: PostQueryAnalyze\n      tags:\n        - Query\n      summary: Analyze a Flux query\n      description: |\n        Analyzes a [Flux query](https://docs.influxdata.com/flux/v0.x/) for syntax\n        errors and returns the list of errors.\n\n        In the following sample query, `from()` is missing the property key.\n\n            ```json\n            { \"query\": \"from(: \\\"iot_center\\\")\\\n                        |\u003e range(start: -90d)\\\n                        |\u003e filter(fn: (r) =\u003e r._measurement == \\\"environment\\\")\",\n              \"type\": \"flux\"\n            }\n            ```\n\n        If you pass this in a request to the `/api/v2/analyze` endpoint,\n        InfluxDB returns an `errors` list that contains an error object for the missing key.\n\n        #### Limitations\n\n        -  The endpoint doesn't validate values in the query--for example:\n\n          - The following sample query has correct syntax, but contains an incorrect `from()` property key:\n\n            ```json\n            { \"query\": \"from(foo: \\\"iot_center\\\")\\\n                        |\u003e range(start: -90d)\\\n                        |\u003e filter(fn: (r) =\u003e r._measurement == \\\"environment\\\")\",\n              \"type\": \"flux\"\n            }\n            ```\n\n            If you pass this in a request to the `/api/v2/analyze` endpoint,\n            InfluxDB returns an empty `errors` list.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: header\n          name: Content-Type\n          schema:\n            type: string\n            enum:\n              - application/json\n      requestBody:\n        description: Flux query to analyze\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Query'\n      responses:\n        '200':\n          description: |\n            Success.\n            The response body contains the list of `errors`.\n            If the query syntax is valid, the endpoint returns an empty `errors` list.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnalyzeQueryResponse'\n              examples:\n                missingQueryPropertyKey:\n                  summary: Missing property key error\n                  description: |\n                    Returns an error object if the Flux query is missing a property key.\n\n                    The following sample query is missing the _`bucket`_ property key:\n\n                    ```json\n                    {\n                      \"query\": \"from(: \\\"iot_center\\\")\\\n                      ...\n                    }\n                    ```\n                  value:\n                    errors:\n                      - line: 1\n                        column: 6\n                        character: 0\n                        message: missing property key\n        '400':\n          description: |\n            Bad request.\n            InfluxDB is unable to parse the request.\n            The response body contains detail about the problem.\n          headers:\n            X-Platform-Error-Code:\n              description: |\n                The reason for the error.\n              schema:\n                type: string\n                example: invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                invalidJSONStringValue:\n                  summary: Invalid JSON\n                  description: 'If the request body contains invalid JSON, returns `invalid` and problem detail.'\n                  value:\n                    code: invalid\n                    message: 'invalid json: invalid character ''\\'''' looking for beginning of value'\n        default:\n          description: Internal server error\n          headers:\n            X-Platform-Error-Code:\n              description: The reason for the error.\n              schema:\n                type: string\n                example: internal error\n            X-Influx-Error:\n              description: A string that describes the problem.\n              schema:\n                type: string\n            X-Influx-Reference:\n              description: The numeric reference code for the error type.\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                emptyJSONObject:\n                  summary: Empty JSON object in request body\n                  description: |\n                    If the request body contains an empty JSON object, returns `internal error`.\n                  value:\n                    code: internal error\n                    message: An internal error has occurred - check server logs\n      x-codeSamples:\n        - lang: Shell\n          label: 'cURL: Analyze a Flux query'\n          source: |\n            curl -v --request POST \\\n              \"http://localhost:8086/api/v2/query/analyze\" \\\n              --header \"Authorization: Token INFLUX_API_TOKEN\" \\\n              --header 'Content-type: application/json' \\\n              --header 'Accept: application/json' \\\n              --data-binary @- \u003c\u003c EOF\n              { \"query\": \"from(bucket: \\\"iot_center\\\")\\\n                          |\u003e range(start: -90d)\\\n                          |\u003e filter(fn: (r) =\u003e r._measurement == \\\"environment\\\")\",\n                \"type\": \"flux\"\n              }\n            EOF\n  /query:\n    post:\n      operationId: PostQuery\n      tags:\n        - Data I/O endpoints\n        - Query\n      summary: Query data\n      description: |\n        Retrieves data from buckets.\n\n        Use this endpoint to send a Flux query request and retrieve data from a bucket.\n\n        #### Rate limits (with InfluxDB Cloud)\n\n        `read` rate limits apply.\n        For more information, see [limits and adjustable quotas](https://docs.influxdata.com/influxdb/cloud/account-management/limits/).\n\n        #### Related guides\n\n        - [Query with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.3/query-data/execute-queries/influx-api/)\n        - [Get started with Flux](https://docs.influxdata.com/flux/v0.x/get-started/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: header\n          name: Accept-Encoding\n          description: The content encoding (usually a compression algorithm) that the client can understand.\n          schema:\n            type: string\n            description: 'The content coding.  Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.'\n            default: identity\n            enum:\n              - gzip\n              - identity\n        - in: header\n          name: Content-Type\n          schema:\n            type: string\n            enum:\n              - application/json\n              - application/vnd.flux\n        - in: query\n          name: org\n          description: |\n            The name or ID of the organization executing the query.\n\n            #### InfluxDB Cloud\n\n            - Doesn't use `org` or `orgID`.\n            - Queries the bucket in the organization associated with the authorization (API token).\n\n            #### InfluxDB OSS\n\n            - Requires either `org` or `orgID`.\n          schema:\n            type: string\n        - in: query\n          name: orgID\n          description: |\n            The ID of the organization executing the query.\n\n            #### InfluxDB Cloud\n\n            - Doesn't use `org` or `orgID`.\n            - Queries the bucket in the organization associated with the authorization (API token).\n\n            #### InfluxDB OSS\n\n            - Requires either `org` or `orgID`.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request POST 'INFLUX_URL/api/v2/query?org=INFLUX_ORG' \\\n            --header 'Content-Type: application/vnd.flux' \\\n            --header 'Accept: application/csv \\\n            --header 'Authorization: Token INFLUX_API_TOKEN' \\\n            --data 'from(bucket: \"example-bucket\")\n                      |\u003e range(start: -5m)\n                      |\u003e filter(fn: (r) =\u003e r._measurement == \"example-measurement\")'\n      requestBody:\n        description: Flux query or specification to execute\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Query'\n          application/vnd.flux:\n            schema:\n              type: string\n            example: |\n              from(bucket: \"example-bucket\")\n                  |\u003e range(start: -5m)\n                  |\u003e filter(fn: (r) =\u003e r._measurement == \"example-measurement\")\n      responses:\n        '200':\n          description: Success. The response body contains query results.\n          headers:\n            Content-Encoding:\n              description: Lists encodings (usually compression algorithms) that have been applied to the response payload.\n              schema:\n                type: string\n                description: |\n                  The content coding: `gzip` for compressed data or `identity` for unmodified, uncompressed data.\n                default: identity\n                enum:\n                  - gzip\n                  - identity\n            Trace-Id:\n              description: 'The trace ID, if generated, of the request.'\n              schema:\n                type: string\n                description: Trace ID of a request.\n          content:\n            application/csv:\n              schema:\n                type: string\n              example: |\n                result,table,_start,_stop,_time,region,host,_value\n                mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:00Z,east,A,15.43\n                mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:20Z,east,B,59.25\n                mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:40Z,east,C,52.62\n        '400':\n          description: |\n            Bad request.\n            The response body contains detail about the error.\n\n            #### InfluxDB OSS\n\n            - Returns this error if `org` or `orgID` doesn't match an organization.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                orgNotFound:\n                  summary: Organization not found\n                  value:\n                    code: invalid\n                    message: 'failed to decode request body: organization not found'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '429':\n          description: |\n            #### InfluxDB Cloud:\n              - returns this error if a **read** or **write** request exceeds your\n                plan's [adjustable service quotas](https://docs.influxdata.com/influxdb/v2.3/account-management/limits/#adjustable-service-quotas)\n                or if a **delete** request exceeds the maximum\n                [global limit](https://docs.influxdata.com/influxdb/v2.3/account-management/limits/#global-limits)\n              - returns `Retry-After` header that describes when to try the write again.\n\n            #### InfluxDB OSS:\n              - doesn't return this error.\n          headers:\n            Retry-After:\n              description: Non-negative decimal integer indicating seconds to wait before retrying the request.\n              schema:\n                type: integer\n                format: int32\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n  /buckets:\n    get:\n      operationId: GetBuckets\n      tags:\n        - Buckets\n      summary: List buckets\n      description: |\n        Retrieves a list of [buckets](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#bucket).\n\n        To limit which buckets are returned, pass query parameters in your request.\n        If no query parameters are passed, InfluxDB returns all buckets up to the\n        default `limit`.\n\n        #### Limitations\n\n        - Paging with an `offset` greater than the number of records will result in\n        an empty list of buckets--for example:\n\n          The following request is paging to the 50th record, but the user only has\n          10 buckets.\n\n          ```sh\n          $ curl --request GET \"INFLUX_URL/api/v2/buckets?limit=1\u0026offset=50\"\n\n          $ {\n              \"links\": {\n                  \"prev\": \"/api/v2/buckets?descending=false\\u0026limit=1\\u0026offset=49\\u0026orgID=ORG_ID\",\n                  \"self\": \"/api/v2/buckets?descending=false\\u0026limit=1\\u0026offset=50\\u0026orgID=ORG_ID\"\n              },\n              \"buckets\": []\n            }\n          ```\n\n        #### Related Guides\n\n        - [Manage buckets](https://docs.influxdata.com/influxdb/v2.3/organizations/buckets/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/After'\n        - in: query\n          name: org\n          description: |\n            Organization name.\n            The name of the organization.\n\n            #### InfluxDB Cloud\n\n             - Doesn't use `org` or `orgID`.\n             - Creates a bucket in the organization associated with the authorization (API token).\n\n             #### InfluxDB OSS\n\n             - Accepts either `org` or `orgID`.\n             - InfluxDB creates the bucket within this organization.\n          schema:\n            type: string\n        - in: query\n          name: orgID\n          description: |\n            Organization ID.\n            The organization ID.\n\n            #### InfluxDB Cloud\n\n             - Doesn't use `org` or `orgID`.\n             - Creates a bucket in the organization associated with the authorization (API token).\n\n             #### InfluxDB OSS\n\n             - Accepts either `org` or `orgID`.\n             - InfluxDB creates the bucket within this organization.\n          schema:\n            type: string\n        - in: query\n          name: name\n          description: |\n            Bucket name.\n            Only returns buckets with this specific name.\n          schema:\n            type: string\n        - in: query\n          name: id\n          description: |\n            Bucket ID.\n            Only returns the bucket with this ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: |\n            Success.\n            The response body contains a list of buckets.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Buckets'\n              examples:\n                successResponse:\n                  value:\n                    links:\n                      self: /api/v2/buckets?descending=false\u0026limit=20\u0026name=_monitoring\u0026offset=0\u0026orgID=ORG_ID\n                    buckets:\n                      - id: 77ca9dace40a9bfc\n                        orgID: INFLUX_ORG_ID\n                        type: system\n                        schemaType: implicit\n                        description: System bucket for monitoring logs\n                        name: _monitoring\n                        retentionRules:\n                          - type: expire\n                            everySeconds: 604800\n                        createdAt: '2022-03-15T17:22:33.72617939Z'\n                        updatedAt: '2022-03-15T17:22:33.726179487Z'\n                        links:\n                          labels: /api/v2/buckets/77ca9dace40a9bfc/labels\n                          members: /api/v2/buckets/77ca9dace40a9bfc/members\n                          org: /api/v2/orgs/INFLUX_ORG_ID\n                          owners: /api/v2/buckets/77ca9dace40a9bfc/owners\n                          self: /api/v2/buckets/77ca9dace40a9bfc\n                          write: /api/v2/write?org=ORG_ID\u0026bucket=77ca9dace40a9bfc\n                        labels: []\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request GET \"http://localhost:8086/api/v2/buckets?name=_monitoring\" \\\n              --header \"Authorization: Token INFLUX_TOKEN\" \\\n              --header \"Accept: application/json\" \\\n              --header \"Content-Type: application/json\"\n    post:\n      operationId: PostBuckets\n      tags:\n        - Buckets\n      summary: Create a bucket\n      description: |\n        Creates a [bucket](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#bucket)\n        and returns the created bucket along with metadata. The default data\n        [retention period](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#retention-period)\n        is 30 days.\n\n        #### InfluxDB OSS\n\n        - A single InfluxDB OSS instance supports active writes or queries for\n        approximately 20 buckets across all organizations at a given time. Reading\n        or writing to more than 20 buckets at a time can adversely affect\n        performance.\n\n        #### Limitations\n\n        - InfluxDB Cloud Free Plan allows users to create up to two buckets.\n        Exceeding the bucket quota will result in an HTTP `403` status code.\n        For additional information regarding InfluxDB Cloud offerings, see\n        [InfluxDB Cloud Pricing](https://www.influxdata.com/influxdb-cloud-pricing/).\n\n        #### Related Guides\n\n        - [Create bucket](https://docs.influxdata.com/influxdb/v2.3/organizations/buckets/create-bucket/)\n        - [Create bucket CLI reference](https://docs.influxdata.com/influxdb/v2.3/reference/cli/influx/bucket/create)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Bucket to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostBucketRequest'\n      responses:\n        '201':\n          description: |\n            Success.\n            The bucket was created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Bucket'\n              examples:\n                successResponse:\n                  value:\n                    id: 37407e232b3911d8\n                    orgID: INFLUX_ORG_ID\n                    type: user\n                    schemaType: implicit\n                    description: bucket holding air sensor data\n                    name: air_sensor\n                    retentionRules:\n                      - type: expire\n                        everySeconds: 2592000\n                    createdAt: '2022-08-03T23:04:41.073704121Z'\n                    updatedAt: '2022-08-03T23:04:41.073704228Z'\n                    links:\n                      labels: /api/v2/buckets/37407e232b3911d8/labels\n                      members: /api/v2/buckets/37407e232b3911d8/members\n                      org: /api/v2/orgs/INFLUX_ORG_ID\n                      owners: /api/v2/buckets/37407e232b3911d8/owners\n                      self: /api/v2/buckets/37407e232b3911d8\n                      write: /api/v2/write?org=INFLUX_ORG_ID\u0026bucket=37407e232b3911d8\n                    labels: []\n        '400':\n          description: |\n            Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '403':\n          description: |\n            Forbidden.\n            The bucket quota is exceeded.\n          headers:\n            X-Platform-Error-Code:\n              description: |\n                The reason for the error.\n              schema:\n                type: string\n                example: forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                quotaExceeded:\n                  summary: Bucket quota exceeded\n                  value:\n                    code: forbidden\n                    message: creating bucket would exceed quota\n        '422':\n          description: |\n            Unprocessable Entity.\n            The request body failed validation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request POST \"http://localhost:8086/api/v2/buckets \\\n              --header \"Authorization: Token INFLUX_TOKEN\" \\\n              --header \"Accept: application/json\" \\\n              --header \"Content-Type: application/json\" \\\n              --data '{\n                  \"name\": \"air_sensor\",\n                  \"description\": \"bucket holding air sensor data\",\n                  \"orgID\": \"INFLUX_ORG_ID\",\n                  \"retentionRules\": [\n                      {\n                          \"type\": \"expire\",\n                          \"everySeconds\": 2592000,\n                      }\n                  ]\n                }'\n  '/buckets/{bucketID}':\n    get:\n      operationId: GetBucketsID\n      tags:\n        - Buckets\n      summary: Retrieve a bucket\n      description: |\n        Retrieves a bucket.\n\n        Use this endpoint to retrieve information for a specific bucket.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the bucket to retrieve.\n      responses:\n        '200':\n          description: |\n            Success.\n            The response body contains the bucket information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Bucket'\n              examples:\n                successResponse:\n                  value:\n                    id: 37407e232b3911d8\n                    orgID: bea7ea952287f70d\n                    type: user\n                    schemaType: implicit\n                    description: bucket for air sensor data\n                    name: air-sensor\n                    retentionRules:\n                      - type: expire\n                        everySeconds: 2592000\n                    createdAt: '2022-08-03T23:04:41.073704121Z'\n                    updatedAt: '2022-08-03T23:04:41.073704228Z'\n                    links:\n                      labels: /api/v2/buckets/37407e232b3911d8/labels\n                      members: /api/v2/buckets/37407e232b3911d8/members\n                      org: /api/v2/orgs/INFLUX_ORG_ID\n                      owners: /api/v2/buckets/37407e232b3911d8/owners\n                      self: /api/v2/buckets/37407e232b3911d8\n                      write: /api/v2/write?org=INFLUX_ORG_ID\u0026bucket=37407e232b3911d8\n                    labels: []\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          description: |\n            Not found.\n            Bucket not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                notFound:\n                  summary: |\n                    The requested bucket wasn't found.\n                  value:\n                    code: not found\n                    message: bucket not found\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchBucketsID\n      tags:\n        - Buckets\n      summary: Update a bucket\n      description: |\n        Updates a bucket.\n\n        Use this endpoint to update properties\n        (`name`, `description`, and `retentionRules`) of a bucket.\n\n        #### InfluxDB Cloud\n\n        - Requires the `retentionRules` property in the request body. If you don't\n        provide `retentionRules`, InfluxDB responds with an HTTP `403` status code.\n\n        #### InfluxDB OSS\n\n        - Doesn't require `retentionRules`.\n\n        #### Related Guides\n\n        - [Update a bucket](https://docs.influxdata.com/influxdb/v2.3/organizations/buckets/update-bucket/)\n      requestBody:\n        description: The bucket update to apply.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchBucketRequest'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '200':\n          description: An updated bucket\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Bucket'\n              examples:\n                successResponse:\n                  value:\n                    id: 37407e232b3911d8\n                    orgID: INFLUX_ORG_ID\n                    type: user\n                    schemaType: implicit\n                    description: bucket holding air sensor data\n                    name: air_sensor\n                    retentionRules:\n                      - type: expire\n                        everySeconds: 2592000\n                    createdAt: '2022-08-03T23:04:41.073704121Z'\n                    updatedAt: '2022-08-07T22:49:49.422962913Z'\n                    links:\n                      labels: /api/v2/buckets/37407e232b3911d8/labels\n                      members: /api/v2/buckets/37407e232b3911d8/members\n                      org: /api/v2/orgs/INFLUX_ORG_ID\n                      owners: /api/v2/buckets/37407e232b3911d8/owners\n                      self: /api/v2/buckets/37407e232b3911d8\n                      write: /api/v2/write?org=INFLUX_ORG_ID\u0026bucket=37407e232b3911d8\n                    labels: []\n        '400':\n          description: |\n            Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                invalidJSONStringValue:\n                  summary: Invalid JSON\n                  description: |\n                    If the request body contains invalid JSON, InfluxDB returns `invalid`\n                    with detail about the problem.\n                  value:\n                    code: invalid\n                    message: 'invalid json: invalid character ''\\'''' looking for beginning of value'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '403':\n          description: |\n            Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                invalidRetention:\n                  summary: |\n                    The retention policy provided exceeds the max retention for the\n                    organization.\n                  value:\n                    code: forbidden\n                    message: provided retention exceeds orgs maximum retention duration\n        '404':\n          description: |\n            Not found.\n            Bucket not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                notFound:\n                  summary: |\n                    The requested bucket wasn't found.\n                  value:\n                    code: not found\n                    message: bucket not found\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request PATCH \"http://localhost:8086/api/v2/buckets/BUCKET_ID \\\n              --header \"Authorization: Token INFLUX_TOKEN\" \\\n              --header \"Accept: application/json\" \\\n              --header \"Content-Type: application/json\" \\\n              --data '{\n                  \"name\": \"air_sensor\",\n                  \"description\": \"bucket holding air sensor data\",\n                  \"retentionRules\": [\n                      {\n                          \"type\": \"expire\",\n                          \"everySeconds\": 2592000\n                      }\n                  ]\n                }'\n    delete:\n      operationId: DeleteBucketsID\n      tags:\n        - Buckets\n      summary: Delete a bucket\n      description: |\n        Deletes a bucket and all associated records.\n\n        #### InfluxDB Cloud\n\n        - Does the following when you send a delete request:\n\n          1. Validates the request and queues the delete.\n          2. Returns an HTTP `204` status code if queued; _error_ otherwise.\n          3. Handles the delete asynchronously.\n\n        #### InfluxDB OSS\n\n        - Validates the request, handles the delete synchronously,\n        and then responds with success or failure.\n\n        #### Limitations\n\n        - Only one bucket can be deleted per request.\n\n        #### Related Guides\n\n        - [Delete a bucket](https://docs.influxdata.com/influxdb/v2.3/organizations/buckets/delete-bucket/#delete-a-bucket-in-the-influxdb-ui)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: |\n            Bucket ID.\n            The ID of the bucket to delete.\n      responses:\n        '204':\n          description: |\n            Success.\n\n            #### InfluxDB Cloud\n              - The bucket is queued for deletion.\n\n            #### InfluxDB OSS\n              - The bucket is deleted.\n        '400':\n          description: |\n            Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                invalidID:\n                  summary: |\n                    Invalid ID.\n                  value:\n                    code: invalid\n                    message: id must have a length of 16 bytes\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          description: |\n            Not found.\n            Bucket not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                notFound:\n                  summary: |\n                    The requested bucket was not found.\n                  value:\n                    code: not found\n                    message: bucket not found\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request DELETE \"http://localhost:8086/api/v2/buckets/BUCKET_ID\" \\\n              --header \"Authorization: Token INFLUX_TOKEN\" \\\n              --header 'Accept: application/json'\n  '/buckets/{bucketID}/labels':\n    get:\n      operationId: GetBucketsIDLabels\n      tags:\n        - Buckets\n      summary: List all labels for a bucket\n      description: |\n        Retrieves a list of all labels for a bucket.\n\n        Labels are objects that contain `labelID`, `name`, `description`, and `color`\n        key-value pairs. They may be used for grouping and filtering InfluxDB\n        resources.\n        Labels are also capable of grouping across different resources--for example,\n        you can apply a label named `air_sensor` to a bucket and a task to quickly\n        organize resources.\n\n        #### Related guides\n\n        - Use the [`/api/v2/labels` InfluxDB API endpoint](#tag/Labels) to retrieve and manage labels.\n        - [Manage labels in the InfluxDB UI](https://docs.influxdata.com/influxdb/v2.3/visualize-data/labels/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the bucket to retrieve labels for.\n      responses:\n        '200':\n          description: |\n            Success.\n            The response body contains a list of all labels for the bucket.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n              examples:\n                successResponse:\n                  value:\n                    links:\n                      self: /api/v2/labels\n                    labels:\n                      - id: 09cbd068e7ebb000\n                        orgID: INFLUX_ORG_ID\n                        name: production_buckets\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostBucketsIDLabels\n      tags:\n        - Buckets\n      summary: Add a label to a bucket\n      description: |\n        Adds a label to a bucket and returns the new label information.\n\n        Labels are objects that contain `labelID`, `name`, `description`, and `color`\n        key-value pairs. They may be used for grouping and filtering across one or\n        more kinds of **resources**--for example, you can apply a label named\n        `air_sensor` to a bucket and a task to quickly organize resources.\n\n        #### Limitations\n\n        - Before adding a label to a bucket, you must create the label if you\n          haven't already. To create a label with the InfluxDB API, send a `POST`\n          request to the [`/api/v2/labels` endpoint](#operation/PostLabels)).\n\n        #### Related guides\n\n        - Use the [`/api/v2/labels` InfluxDB API endpoint](#tag/Labels) to retrieve and manage labels.\n        - [Manage labels in the InfluxDB UI](https://docs.influxdata.com/influxdb/v2.3/visualize-data/labels/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: |\n            Bucket ID.\n            The ID of the bucket to label.\n      requestBody:\n        description: An object that contains a _`labelID`_ to add to the bucket.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: |\n            Success.\n            The response body contains the label information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n              examples:\n                successResponse:\n                  value:\n                    links:\n                      self: /api/v2/labels\n                    label:\n                      id: 09cbd068e7ebb000\n                      orgID: INFLUX_ORG_ID\n                      name: production_buckets\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n          examples:\n            invalidRequest:\n              summary: The `labelID` is missing from the request body.\n              value:\n                code: invalid\n                message: label id is required\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '422':\n          description: |\n            Unprocessable entity.\n            Label already exists on the resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                conflictingResource:\n                  summary: |\n                    Label already exists on the resource.\n                  value:\n                    code: conflict\n                    message: 'Cannot add label, label already exists on resource'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request POST \"http://localhost:8086/api/v2/buckets/BUCKETS_ID/labels \\\n              --header \"Authorization: Token INFLUX_TOKEN\" \\\n              --header \"Accept: application/json\" \\\n              --header \"Content-Type: application/json\" \\\n              --data '{\n                  \"labelID\": \"09cbd068e7ebb000\"\n                }'\n  '/buckets/{bucketID}/labels/{labelID}':\n    delete:\n      operationId: DeleteBucketsIDLabelsID\n      tags:\n        - Buckets\n      summary: Delete a label from a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Bucket not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/buckets/{bucketID}/members':\n    get:\n      operationId: GetBucketsIDMembers\n      tags:\n        - Buckets\n      summary: List all users with member privileges for a bucket\n      description: |\n        Retrieves a list of all users for a bucket.\n\n        InfluxDB [users](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#user) have\n        permission to access InfluxDB.\n\n        [Members](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#member) are users in\n        an organization with access to the specified resource.\n\n        Use this endpoint to retrieve all users with access to a bucket.\n\n        #### Related guides\n\n        - [Manage users](https://docs.influxdata.com/influxdb/v2.3/users/)\n        - [Manage members](https://docs.influxdata.com/influxdb/v2.3/organizations/members/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the bucket to retrieve users for.\n      responses:\n        '200':\n          description: |\n            Success.\n            The response body contains a list of all users for the bucket.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n              examples:\n                successResponse:\n                  value:\n                    links:\n                      self: /api/v2/buckets/37407e232b3911d8/members\n                    users:\n                      - role: member\n                        links:\n                          self: /api/v2/users/791df274afd48a83\n                        id: 791df274afd48a83\n                        name: example_user_1\n                        status: active\n                      - role: owner\n                        links:\n                          self: /api/v2/users/09cfb87051cbe000\n                        id: 09cfb87051cbe000\n                        name: example_user_2\n                        status: active\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostBucketsIDMembers\n      tags:\n        - Buckets\n      summary: Add a member to a bucket\n      description: |\n        Add a user to a bucket and return the new user information.\n\n        InfluxDB [users](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#user) have\n        permission to access InfluxDB.\n\n        [Members](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#member) are users in\n        an organization.\n\n        Use this endpoint to give a user member privileges to a bucket.\n\n        #### Related guides\n\n        - [Manage users](https://docs.influxdata.com/influxdb/v2.3/users/)\n        - [Manage members](https://docs.influxdata.com/influxdb/v2.3/organizations/members/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the bucket to retrieve users for.\n      requestBody:\n        description: A user to add as a member to the bucket.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: |\n            Success.\n            The response body contains the user information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n              examples:\n                successResponse:\n                  value:\n                    role: member\n                    links:\n                      self: /api/v2/users/09cfb87051cbe000\n                    id: 09cfb87051cbe000\n                    name: example_user_1\n                    status: active\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n          examples:\n            invalidRequest:\n              summary: The user `id` is missing from the request body.\n              value:\n                code: invalid\n                message: user id missing or invalid\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request POST \"http://localhost:8086/api/v2/buckets/BUCKET_ID/members \\\n              --header \"Authorization: Token INFLUX_API_TOKEN\" \\\n              --header \"Accept: application/json\" \\\n              --header \"Content-Type: application/json\" \\\n              --data '{\n                  \"id\": \"09cfb87051cbe000\"\n                }\n  '/buckets/{bucketID}/members/{userID}':\n    delete:\n      operationId: DeleteBucketsIDMembersID\n      tags:\n        - Buckets\n      summary: Remove a member from a bucket\n      description: |\n        Removes a member from a bucket.\n\n        Use this endpoint to remove a user's member privileges from a bucket. This\n        removes the user's `read` and `write` permissions for the bucket.\n\n        #### Related guides\n\n        - [Manage users](https://docs.influxdata.com/influxdb/v2.3/users/)\n        - [Manage members](https://docs.influxdata.com/influxdb/v2.3/organizations/members/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the user to remove.\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the bucket to remove a user from.\n      responses:\n        '204':\n          description: |\n            Success.\n            The user is no longer a member of the bucket.\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/buckets/{bucketID}/owners':\n    get:\n      operationId: GetBucketsIDOwners\n      tags:\n        - Buckets\n      summary: List all owners of a bucket\n      description: |\n        Retrieves a list of all [owners](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#owner)\n        for a bucket.\n\n        Bucket owners have permission to delete buckets and remove user and member\n        permissions from the bucket.\n\n        #### InfluxDB Cloud\n\n        - Doesn't use `owner` and `member` roles.\n          Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n\n        #### Limitations\n\n        - Owner permissions are separate from API token permissions.\n        - Owner permissions are used in the context of the InfluxDB UI.\n\n        #### Required permissions\n\n        - `read-orgs INFLUX_ORG_ID`\n\n        `INFLUX_ORG_ID` is the ID of the organization that you want to retrieve a\n        list of owners for.\n\n        #### Related endpoints\n\n        - [Authorizations](#tag/Authorizations)\n\n        #### Related guides\n\n        - [Manage users](https://docs.influxdata.com/influxdb/v2.3/users/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the bucket to retrieve owners for.\n      responses:\n        '200':\n          description: |\n            Success.\n            The response body contains a list of all owners for the bucket.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n              examples:\n                successResponse:\n                  value:\n                    links:\n                      self: /api/v2/buckets/BUCKET_ID/owners\n                    users:\n                      - role: owner\n                        links:\n                          self: /api/v2/users/d88d182d91b0950f\n                        id: d88d182d91b0950f\n                        name: example-owner\n                        status: active\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostBucketsIDOwners\n      tags:\n        - Buckets\n      summary: Add an owner to a bucket\n      description: |\n        Adds an owner to a bucket and returns the [owners](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#owner)\n        with role and user detail.\n\n        Use this endpoint to create a _resource owner_ for the bucket.\n        Bucket owners have permission to delete buckets and remove user and member\n        permissions from the bucket.\n\n        #### InfluxDB Cloud\n\n        - Doesn't use `owner` and `member` roles.\n          Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n\n        #### Limitations\n\n        - Owner permissions are separate from API token permissions.\n        - Owner permissions are used in the context of the InfluxDB UI.\n\n        #### Required permissions\n\n        - `write-orgs INFLUX_ORG_ID`\n        `INFLUX_ORG_ID` is the ID of the organization that you want add an owner for.\n\n        #### Related endpoints\n\n        - [Authorizations](#tag/Authorizations)\n\n        #### Related guides\n\n        - [Manage users](https://docs.influxdata.com/influxdb/v2.3/users/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the bucket to add an owner for.\n      requestBody:\n        description: A user to add as an owner for the bucket.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n            examples:\n              successResponse:\n                value:\n                  role: owner\n                  links:\n                    self: /api/v2/users/d88d182d91b0950f\n                  id: d88d182d91b0950f\n                  name: example-user\n                  status: active\n      responses:\n        '201':\n          description: |\n            Created.\n            The bucket `owner` role is assigned to the user.\n            The response body contains the resource owner with\n            role and user detail.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n          examples:\n            invalidRequest:\n              summary: The user `id` is missing from the request body.\n              value:\n                code: invalid\n                message: user id missing or invalid\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request POST \"http://localhost:8086/api/v2/buckets/BUCKET_ID/owners \\\n              --header \"Authorization: Token INFLUX_API_TOKEN\" \\\n              --header \"Accept: application/json\" \\\n              --header \"Content-Type: application/json\" \\\n              --data '{\n                  \"id\": \"09cfb87051cbe000\"\n                }\n  '/buckets/{bucketID}/owners/{userID}':\n    delete:\n      operationId: DeleteBucketsIDOwnersID\n      tags:\n        - Buckets\n      summary: Remove an owner from a bucket\n      description: |\n        Removes an owner from a bucket.\n\n        Use this endpoint to remove a user's `owner` role for a bucket.\n\n        #### InfluxDB Cloud\n\n        - Doesn't use `owner` and `member` roles.\n          Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n\n        #### Limitations\n\n        - Owner permissions are separate from API token permissions.\n        - Owner permissions are used in the context of the InfluxDB UI.\n\n        #### Required permissions\n\n        - `write-orgs INFLUX_ORG_ID`\n        `INFLUX_ORG_ID` is the ID of the organization that you want to remove an owner\n        from.\n\n        #### Related endpoints\n\n        - [Authorizations](#tag/Authorizations)\n\n        #### Related guides\n\n        - [Manage users](https://docs.influxdata.com/influxdb/v2.3/users/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the owner to remove.\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the bucket to remove an owner from.\n      responses:\n        '204':\n          description: |\n            Success.\n            The user is no longer an owner of the bucket.\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /orgs:\n    get:\n      operationId: GetOrgs\n      tags:\n        - Organizations\n        - Security and access endpoints\n      summary: List organizations\n      description: |\n        Retrieves a list of [organizations](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#organization/).\n\n        To limit which organizations are returned, pass query parameters in your request.\n        If no query parameters are passed, InfluxDB returns all organizations up to the default `limit`.\n\n        #### InfluxDB Cloud\n\n        - Only returns the organization that owns the token passed in the request.\n\n        #### Related guides\n\n        - [View organizations](https://docs.influxdata.com/influxdb/v2.3/organizations/view-orgs/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Descending'\n        - in: query\n          name: org\n          schema:\n            type: string\n          description: |\n            An organization name.\n            Only returns organizations with this name.\n        - in: query\n          name: orgID\n          schema:\n            type: string\n          description: |\n            An organization ID.\n            Only returns the organization with this ID.\n        - in: query\n          name: userID\n          schema:\n            type: string\n          description: |\n            A user ID.\n            Only returns organizations where this user is a member or owner.\n      responses:\n        '200':\n          description: Success. The response body contains a list of organizations.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organizations'\n              examples:\n                successResponse:\n                  value:\n                    links:\n                      self: /api/v2/orgs\n                    orgs:\n                      - links:\n                          buckets: /api/v2/buckets?org=INFLUX_ORG\n                          dashboards: /api/v2/dashboards?org=INFLUX_ORG\n                          labels: /api/v2/orgs/INFLUX_ORG_ID/labels\n                          logs: /api/v2/orgs/INFLUX_ORG_ID/logs\n                          members: /api/v2/orgs/INFLUX_ORG_ID/members\n                          owners: /api/v2/orgs/INFLUX_ORG_ID/owners\n                          secrets: /api/v2/orgs/INFLUX_ORG_ID/secrets\n                          self: /api/v2/orgs/INFLUX_ORG_ID\n                          tasks: /api/v2/tasks?org=InfluxData\n                        id: INFLUX_ORG_ID\n                        name: INFLUX_ORG\n                        description: Example InfluxDB organization\n                        createdAt: '2022-07-17T23:00:30.778487Z'\n                        updatedAt: '2022-07-17T23:00:30.778487Z'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n    post:\n      operationId: PostOrgs\n      tags:\n        - Organizations\n      summary: Create an organization\n      description: |\n        Creates an [organization](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#organization)\n        and returns the newly created organization.\n\n        #### InfluxDB Cloud\n\n        - Doesn't allow you to use this endpoint to create organizations.\n\n        #### Related guides\n\n        - [Manage organizations](https://docs.influxdata.com/influxdb/v2.3/organizations)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: The organization to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostOrganizationRequest'\n      responses:\n        '201':\n          description: Created. The response body contains the organization information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n              examples:\n                successResponse:\n                  value:\n                    links:\n                      buckets: /api/v2/buckets?org=INFLUX_ORG\n                      dashboards: /api/v2/dashboards?org=INFLUX_ORG\n                      labels: /api/v2/orgs/INFLUX_ORG_ID/labels\n                      logs: /api/v2/orgs/INFLUX_ORG_ID/logs\n                      members: /api/v2/orgs/INFLUX_ORG_ID/members\n                      owners: /api/v2/orgs/INFLUX_ORG_ID/owners\n                      secrets: /api/v2/orgs/INFLUX_ORG_ID/secrets\n                      self: /api/v2/orgs/INFLUX_ORG_ID\n                      tasks: /api/v2/tasks?org=INFLUX_ORG\n                    id: INFLUX_ORG_ID\n                    name: INFLUX_ORG\n                    description: ''\n                    createdAt: '2022-08-24T23:05:52.881317Z'\n                    updatedAt: '2022-08-24T23:05:52.881318Z'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n          examples:\n            invalidRequest:\n              summary: The `name` field is missing from the request body.\n              value:\n                code: invalid\n                message: org name is empty\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request POST \"http://localhost:8086/api/v2/orgs \\\n              --header \"Authorization: Token INFLUX_API_TOKEN\" \\\n              --header \"Accept: application/json\" \\\n              --header \"Content-Type: application/json\" \\\n              --data '{\n                  \"name\": \"INFLUX_ORG\",\n                  \"description: \"Example InfluxDB organization\"\n                }'\n  '/orgs/{orgID}':\n    get:\n      operationId: GetOrgsID\n      tags:\n        - Organizations\n        - Security and access endpoints\n      summary: Retrieve an organization\n      description: |\n        Retrieves an organization.\n\n        Use this endpoint to retrieve information for a specific organization.\n\n        #### Related guides\n\n        - [View organizations](https://docs.influxdata.com/influxdb/v2.3/organizations/view-orgs/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the organization to retrieve.\n      responses:\n        '200':\n          description: |\n            Success.\n            The response body contains the organization information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          description: |\n            Not found.\n            Organization not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                notFound:\n                  summary: |\n                    The requested organization wasn't found.\n                  value:\n                    code: not found\n                    message: organization not found\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchOrgsID\n      tags:\n        - Organizations\n      summary: Update an organization\n      description: |\n        Updates an organization.\n\n        Use this endpoint to update properties\n        (`name`, `description`) of an organization.\n\n        Updating an organization’s name affects all resources that reference the\n        organization by name, including the following:\n\n        - Queries\n        - Dashboards\n        - Tasks\n        - Telegraf configurations\n        - Templates\n\n        If you change an organization name, be sure to update the organization name\n        in these resources as well.\n\n        #### Related Guides\n\n        - [Update an organization](https://docs.influxdata.com/influxdb/v2.3/organizations/update-org/)\n      requestBody:\n        description: The organization update to apply.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchOrganizationRequest'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the organization to update.\n      responses:\n        '200':\n          description: Success. The response body contains the updated organization.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteOrgsID\n      tags:\n        - Organizations\n      summary: Delete an organization\n      description: |\n        Deletes an organization.\n\n        Deleting an organization from InfluxDB Cloud can't be undone.\n        Once deleted, all data associated with the organization is removed.\n\n        #### InfluxDB Cloud\n\n        - Does the following when you send a delete request:\n\n          1. Validates the request and queues the delete.\n          2. Returns an HTTP `204` status code if queued; _error_ otherwise.\n          3. Handles the delete asynchronously.\n\n        #### InfluxDB OSS\n\n        - Validates the request, handles the delete synchronously,\n        and then responds with success or failure.\n\n        #### Limitations\n\n        - Only one organization can be deleted per request.\n\n        #### Related guides\n\n        - [Delete organizations](https://docs.influxdata.com/influxdb/v2.3/organizations/delete-orgs/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the organization to delete.\n      responses:\n        '204':\n          description: |\n            Success.\n\n            #### InfluxDB Cloud\n              - The organization is queued for deletion.\n\n            #### InfluxDB OSS\n              - The organization is deleted.\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          description: |\n            Not found.\n            InfluxDB can't find the organization.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                notFound:\n                  summary: |\n                    The requested organization was not found.\n                  value:\n                    code: not found\n                    message: org not found\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/orgs/{orgID}/secrets':\n    get:\n      operationId: GetOrgsIDSecrets\n      tags:\n        - Secrets\n        - Security and access endpoints\n      summary: List all secret keys for an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '200':\n          description: A list of all secret keys\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SecretKeysResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchOrgsIDSecrets\n      tags:\n        - Secrets\n      summary: Update secrets in an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      requestBody:\n        description: Secret key value pairs to update/add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Secrets'\n      responses:\n        '204':\n          description: Keys successfully patched\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/orgs/{orgID}/members':\n    get:\n      operationId: GetOrgsIDMembers\n      tags:\n        - Organizations\n        - Security and access endpoints\n      summary: List all members of an organization\n      description: |\n        Retrieves a list of all users that belong to an organization.\n\n        InfluxDB [users](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#user) have\n        permission to access InfluxDB.\n\n        [Members](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#member) are users\n        within the organization.\n\n        #### InfluxDB Cloud\n\n        - Doesn't use `owner` and `member` roles.\n          Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n\n        #### Limitations\n\n        - Member permissions are separate from API token permissions.\n        - Member permissions are used in the context of the InfluxDB UI.\n\n        #### Required permissions\n\n        - `read-orgs INFLUX_ORG_ID`\n\n        `INFLUX_ORG_ID` is the ID of the organization that you retrieve a list of\n        members from.\n\n        #### Related guides\n\n        - [Manage users](https://docs.influxdata.com/influxdb/v2.3/users/)\n        - [Manage members](https://docs.influxdata.com/influxdb/v2.3/organizations/members/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the organization to retrieve users for.\n      responses:\n        '200':\n          description: |\n            Success.\n            The response body contains a list of all users within the organization.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n              examples:\n                successResponse:\n                  value:\n                    links:\n                      self: /api/v2/orgs/055aa4783aa38398/members\n                    users:\n                      - role: member\n                        links:\n                          self: /api/v2/users/791df274afd48a83\n                        id: 791df274afd48a83\n                        name: example_user_1\n                        status: active\n                      - role: owner\n                        links:\n                          self: /api/v2/users/09cfb87051cbe000\n                        id: 09cfb87051cbe000\n                        name: example_user_2\n                        status: active\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          description: |\n            Not found.\n            InfluxDB can't find the organization.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                notFound:\n                  summary: |\n                    The requested organization wasn't found.\n                  value:\n                    code: not found\n                    message: 404 page not found\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostOrgsIDMembers\n      tags:\n        - Organizations\n      summary: Add a member to an organization\n      description: |\n        Add a user to an organization.\n\n        InfluxDB [users](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#user) have\n        permission to access InfluxDB.\n\n        [Members](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#member) are users\n        within the organization.\n\n        #### InfluxDB Cloud\n        - Doesn't use `owner` and `member` roles.\n          Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n\n        #### Limitations\n\n        - Member permissions are separate from API token permissions.\n        - Member permissions are used in the context of the InfluxDB UI.\n\n        #### Required permissions\n\n        - `write-orgs INFLUX_ORG_ID`\n\n        `INFLUX_ORG_ID` is the ID of the organization that you want add a member to.\n\n        #### Related guides\n\n        - [Manage users](https://docs.influxdata.com/influxdb/v2.3/users/)\n        - [Manage members](https://docs.influxdata.com/influxdb/v2.3/organizations/members/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the organization.\n      requestBody:\n        description: |\n          The user to add to the organization.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: |\n            Success.\n            The response body contains the user information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n              examples:\n                successResponse:\n                  value:\n                    role: member\n                    links:\n                      self: /api/v2/users/09cfb87051cbe000\n                    id: 09cfb87051cbe000\n                    name: example_user_1\n                    status: active\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n          examples:\n            invalidRequest:\n              summary: The user `id` is missing from the request body.\n              value:\n                code: invalid\n                message: user id missing or invalid\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request POST \"http://localhost:8086/api/v2/orgs/INFLUX_ORG_ID/members \\\n              --header \"Authorization: Token INFLUX_API_TOKEN\" \\\n              --header \"Accept: application/json\" \\\n              --header \"Content-Type: application/json\" \\\n              --data '{\n                  \"id\": \"09cfb87051cbe000\"\n                }'\n  '/orgs/{orgID}/members/{userID}':\n    delete:\n      operationId: DeleteOrgsIDMembersID\n      tags:\n        - Organizations\n        - Security and access endpoints\n      summary: Remove a member from an organization\n      description: |\n        Removes a member from an organization.\n\n        Use this endpoint to remove a user's member privileges from a bucket. This\n        removes the user's `read` and `write` permissions from the organization.\n\n        #### InfluxDB Cloud\n\n        - Doesn't use `owner` and `member` roles.\n          Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n\n        #### Limitations\n\n        - Member permissions are separate from API token permissions.\n        - Member permissions are used in the context of the InfluxDB UI.\n\n        #### Required permissions\n\n        - `write-orgs INFLUX_ORG_ID`\n\n        `INFLUX_ORG_ID` is the ID of the organization that you want to remove an\n        owner from.\n\n        #### Related guides\n\n        - [Manage members](https://docs.influxdata.com/influxdb/v2.3/organizations/members/)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the user to remove.\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization to remove a user from.\n      responses:\n        '204':\n          description: |\n            Success.\n            The user is no longer a member of the organization.\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/orgs/{orgID}/owners':\n    get:\n      operationId: GetOrgsIDOwners\n      tags:\n        - Organizations\n        - Security and access endpoints\n      summary: List all owners of an organization\n      description: |\n        Retrieves a list of all owners of an organization.\n\n        #### InfluxDB Cloud\n\n        - Doesn't use `owner` and `member` roles.\n          Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n\n        #### Required permissions\n\n        - `read-orgs INFLUX_ORG_ID`\n\n        `INFLUX_ORG_ID` is the ID of the organization that you want to retrieve a\n        list of owners from.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the organization to list owners for.\n      responses:\n        '200':\n          description: A list of organization owners\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n              examples:\n                successResponse:\n                  value:\n                    links:\n                      self: /api/v2/orgs/055aa4783aa38398/owners\n                    users:\n                      - role: owner\n                        links:\n                          self: /api/v2/users/09cfb87051cbe000\n                        id: 09cfb87051cbe000\n                        name: example_user_2\n                        status: active\n        '404':\n          description: Organization not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostOrgsIDOwners\n      tags:\n        - Organizations\n      summary: Add an owner to an organization\n      description: |\n        Adds an owner to an organization.\n\n        Use this endpoint to assign the organization `owner` role to a user.\n\n        #### InfluxDB Cloud\n\n        - Doesn't use `owner` and `member` roles.\n          Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n\n        #### Required permissions\n\n        - `write-orgs INFLUX_ORG_ID`\n\n        `INFLUX_ORG_ID` is the ID of the organization that you want add an owner for.\n\n        #### Related endpoints\n\n        - [Authorizations](#tag/Authorizations)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization that you want to add an owner for.\n      requestBody:\n        description: The user to add as an owner of the organization.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n            examples:\n              successResponse:\n                value:\n                  role: owner\n                  links:\n                    self: /api/v2/users/09cfb87051cbe000\n                  id: 09cfb87051cbe000\n                  name: example_user_1\n                  status: active\n      responses:\n        '201':\n          description: |\n            Success. The user is an owner of the organization.\n            The response body contains the owner with role and user detail.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --request POST \"http://localhost:8086/api/v2/orgs/INFLUX_ORG_ID/owners \\\n              --header \"Authorization: Token INFLUX_API_TOKEN\" \\\n              --header \"Accept: application/json\" \\\n              --header \"Content-Type: application/json\" \\\n              --data '{\n                  \"id\": \"09cfb87051cbe000\"\n                }'\n  '/orgs/{orgID}/owners/{userID}':\n    delete:\n      operationId: DeleteOrgsIDOwnersID\n      tags:\n        - Organizations\n        - Security and access endpoints\n      summary: Remove an owner from an organization\n      description: |\n        Removes an [owner](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#owner) from\n        the organization.\n\n        Organization owners have permission to delete organizations and remove user and member\n        permissions from the organization.\n\n        #### InfluxDB Cloud\n        - Doesn't use `owner` and `member` roles.\n          Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n\n        #### Limitations\n\n        - Owner permissions are separate from API token permissions.\n        - Owner permissions are used in the context of the InfluxDB UI.\n\n        #### Required permissions\n\n        - `write-orgs INFLUX_ORG_ID`\n\n        `INFLUX_ORG_ID` is the ID of the organization that you want remove an owner\n        from.\n\n        #### Related endpoints\n        - [Authorizations](#tag/Authorizations)\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the user to remove.\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the organization to remove an owner from.\n      responses:\n        '204':\n          description: |\n            Success.\n            The user is no longer an owner of the organization.\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/orgs/{orgID}/secrets/delete':\n    post:\n      deprecated: true\n      operationId: PostOrgsIDSecrets\n      tags:\n        - Secrets\n        - Security and access endpoints\n      summary: Delete secrets from an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      requestBody:\n        description: Secret key to delete\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SecretKeys'\n      responses:\n        '204':\n          description: Keys successfully patched\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/orgs/{orgID}/secrets/{secretID}':\n    delete:\n      operationId: DeleteOrgsIDSecretsID\n      tags:\n        - Secrets\n        - Security and access endpoints\n      summary: Delete a secret from an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n        - in: path\n          name: secretID\n          schema:\n            type: string\n          required: true\n          description: The secret ID.\n      responses:\n        '204':\n          description: Keys successfully deleted\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/GeneralServerError'\n  /resources:\n    get:\n      operationId: GetResources\n      tags:\n        - Resources\n        - System information endpoints\n      summary: List all known resources\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description: All resources targets\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /stacks:\n    get:\n      operationId: ListStacks\n      tags:\n        - Templates\n      summary: List installed stacks\n      description: |\n        Retrieves a list of installed InfluxDB stacks.\n\n        To limit stacks in the response, pass query parameters in your request.\n        If no query parameters are passed, InfluxDB returns all installed stacks\n        for the organization.\n      parameters:\n        - in: query\n          name: orgID\n          required: true\n          schema:\n            type: string\n          description: |\n            The ID of the organization that owns the stacks.\n            Only returns stacks owned by this organization.\n\n            #### InfluxDB Cloud\n\n            - Doesn't require this parameter;\n              InfluxDB only returns resources allowed by the API token.\n        - in: query\n          name: name\n          schema:\n            type: string\n          description: |\n            The stack name.\n            Finds stack `events` with this name and returns the stacks.\n\n            Repeatable.\n            To filter for more than one stack name,\n            repeat this parameter with each name--for example:\n\n            - `http://localhost:8086/api/v2/stacks?\u0026orgID=INFLUX_ORG_ID\u0026name=project-stack-0\u0026name=project-stack-1`\n          examples:\n            findStackByName:\n              summary: Find stacks with the event name\n              value: project-stack-0\n        - in: query\n          name: stackID\n          schema:\n            type: string\n          description: |\n            The stack ID.\n            Only returns stacks with this ID.\n\n            Repeatable.\n            To filter for more than one stack ID,\n            repeat this parameter with each ID--for example:\n\n            - `http://localhost:8086/api/v2/stacks?\u0026orgID=INFLUX_ORG_ID\u0026stackID=09bd87cd33be3000\u0026stackID=09bef35081fe3000`\n          examples:\n            findStackByID:\n              summary: Find a stack with the ID\n              value: 09bd87cd33be3000\n      responses:\n        '200':\n          description: Success. The response body contains the list of stacks.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  stacks:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Stack'\n        '400':\n          description: |\n            Bad request.\n            The response body contains detail about the error.\n\n            #### InfluxDB OSS\n\n            - Returns this error if an incorrect value is passed for `org` or `orgID`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                orgIdMissing:\n                  summary: The orgID query parameter is missing\n                  value:\n                    code: invalid\n                    message: 'organization id[\"\"] is invalid: id must have a length of 16 bytes'\n                orgProvidedNotFound:\n                  summary: The org or orgID passed doesn't own the token passed in the header\n                  value:\n                    code: invalid\n                    message: 'failed to decode request body: organization not found'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: CreateStack\n      tags:\n        - Templates\n      summary: Create a stack\n      description: |\n        Creates or initializes a stack.\n\n        Use this endpoint to _manually_ initialize a new stack with the following\n        optional information:\n\n          - Stack name\n          - Stack description\n          - URLs for template manifest files\n\n        To automatically create a stack when applying templates,\n        use the [/api/v2/templates/apply endpoint](#operation/ApplyTemplate).\n\n        #### Required permissions\n\n        - `write` permission for the organization\n\n        #### Related guides\n\n        - [InfluxDB stacks](https://docs.influxdata.com/influxdb/v2.3/influxdb-templates/stacks/)\n        - [Use InfluxDB templates](https://docs.influxdata.com/influxdb/v2.3/influxdb-templates/use/#apply-templates-to-an-influxdb-instance)\n      requestBody:\n        description: The stack to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: PostStackRequest\n              properties:\n                orgID:\n                  type: string\n                name:\n                  type: string\n                description:\n                  type: string\n                urls:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '201':\n          description: Success. Returns the newly created stack.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stack'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '422':\n          description: |\n            Unprocessable entity.\n\n            The error may indicate one of the following problems:\n\n            - The request body isn't valid--the request is well-formed, but InfluxDB can't process it due to semantic errors.\n            - You passed a parameter combination that InfluxDB doesn't support.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/stacks/{stack_id}':\n    get:\n      operationId: ReadStack\n      tags:\n        - Templates\n      summary: Retrieve a stack\n      parameters:\n        - in: path\n          name: stack_id\n          required: true\n          schema:\n            type: string\n          description: The identifier of the stack.\n      responses:\n        '200':\n          description: Returns the stack.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stack'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: UpdateStack\n      tags:\n        - Templates\n      summary: Update a stack\n      parameters:\n        - in: path\n          name: stack_id\n          required: true\n          schema:\n            type: string\n          description: The identifier of the stack.\n      requestBody:\n        description: The stack to update.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: PatchStackRequest\n              properties:\n                name:\n                  type: string\n                  nullable: true\n                description:\n                  type: string\n                  nullable: true\n                templateURLs:\n                  type: array\n                  items:\n                    type: string\n                  nullable: true\n                additionalResources:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      resourceID:\n                        type: string\n                      kind:\n                        type: string\n                      templateMetaName:\n                        type: string\n                    required:\n                      - kind\n                      - resourceID\n      responses:\n        '200':\n          description: Returns the updated stack.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stack'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteStack\n      tags:\n        - Templates\n      summary: Delete a stack and associated resources\n      parameters:\n        - in: path\n          name: stack_id\n          required: true\n          schema:\n            type: string\n          description: The identifier of the stack.\n        - in: query\n          name: orgID\n          required: true\n          schema:\n            type: string\n          description: The identifier of the organization.\n      responses:\n        '204':\n          description: The stack and its associated resources were deleted.\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/stacks/{stack_id}/uninstall':\n    post:\n      operationId: UninstallStack\n      tags:\n        - Templates\n      summary: Uninstall a stack\n      parameters:\n        - in: path\n          name: stack_id\n          required: true\n          schema:\n            type: string\n          description: The identifier of the stack.\n      responses:\n        '200':\n          description: Returns the uninstalled stack.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stack'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /templates/apply:\n    post:\n      operationId: ApplyTemplate\n      tags:\n        - Templates\n      summary: Apply or dry-run a template\n      description: |\n        Applies a template to\n        create or update a [stack](https://docs.influxdata.com/influxdb/v2.3/influxdb-templates/stacks/) of InfluxDB\n        [resources](https://docs.influxdata.com/influxdb/v2.3/reference/cli/influx/export/all/#resources).\n        The response contains the diff of changes and the stack ID.\n\n        Use this endpoint to install an InfluxDB template to an organization.\n        Provide template URLs or template objects in your request.\n        To customize which template resources are installed, use the `actions`\n        parameter.\n\n        By default, when you apply a template, InfluxDB installs the template to\n        create and update stack resources and then generates a diff of the changes.\n        If you pass `dryRun: true` in the request body, InfluxDB validates the\n        template and generates the resource diff, but doesn’t make any\n        changes to your instance.\n\n        #### Custom values for templates\n\n        - Some templates may contain [environment references](https://docs.influxdata.com/influxdb/v2.3/influxdb-templates/create/#include-user-definable-resource-names) for custom metadata.\n          To provide custom values for environment references, pass the _`envRefs`_\n          property in the request body.\n          For more information and examples, see how to\n          [define environment references](https://docs.influxdata.com/influxdb/v2.3/influxdb-templates/use/#define-environment-references).\n\n        - Some templates may contain queries that use\n          [secrets](https://docs.influxdata.com/influxdb/v2.3/security/secrets/).\n          To provide custom secret values, pass the _`secrets`_ property\n          in the request body.\n          Don't expose secret values in templates.\n          For more information, see [how to pass secrets when installing a template](https://docs.influxdata.com/influxdb/v2.3/influxdb-templates/use/#pass-secrets-when-installing-a-template).\n\n        #### Required permissions\n\n        - `write` permissions for resource types in the template.\n\n        #### Rate limits (with InfluxDB Cloud)\n\n        - Adjustable service quotas apply.\n          For more information, see [limits and adjustable quotas](https://docs.influxdata.com/influxdb/cloud/account-management/limits/).\n\n        #### Related guides\n\n        - [Use templates](https://docs.influxdata.com/influxdb/v2.3/influxdb-templates/use/)\n        - [Stacks](https://docs.influxdata.com/influxdb/v2.3/influxdb-templates/stacks/)\n      requestBody:\n        required: true\n        description: |\n          Parameters for applying templates.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TemplateApply'\n            examples:\n              skipKindAction:\n                summary: Skip all bucket and task resources in the provided templates\n                value:\n                  orgID: INFLUX_ORG_ID\n                  actions:\n                    - action: skipKind\n                      properties:\n                        kind: Bucket\n                    - action: skipKind\n                      properties:\n                        kind: Task\n                  templates:\n                    - contents:\n                        - '[object Object]': null\n              skipResourceAction:\n                summary: Skip specific resources in the provided templates\n                value:\n                  orgID: INFLUX_ORG_ID\n                  actions:\n                    - action: skipResource\n                      properties:\n                        kind: Label\n                        resourceTemplateName: foo-001\n                    - action: skipResource\n                      properties:\n                        kind: Bucket\n                        resourceTemplateName: bar-020\n                    - action: skipResource\n                      properties:\n                        kind: Bucket\n                        resourceTemplateName: baz-500\n                  templates:\n                    - contents:\n                        - apiVersion: influxdata.com/v2alpha1\n                          kind: Bucket\n                          metadata:\n                            name: baz-500\n              templateObjectEnvRefs:\n                summary: envRefs for template objects\n                value:\n                  orgID: INFLUX_ORG_ID\n                  envRefs:\n                    linux-cpu-label: MY_CPU_LABEL\n                    docker-bucket: MY_DOCKER_BUCKET\n                    docker-spec-1: MY_DOCKER_SPEC\n                  templates:\n                    - contents:\n                        - apiVersion: influxdata.com/v2alpha1\n                          kind: Label\n                          metadata:\n                            name:\n                              envRef:\n                                key: linux-cpu-label\n                          spec:\n                            color: '#326BBA'\n                            name: inputs.cpu\n                    - contents:\n                        - apiVersion: influxdata.com/v2alpha1\n                          kind: Bucket\n                          metadata:\n                            name:\n                              envRef:\n                                key: docker-bucket\n          application/x-jsonnet:\n            schema:\n              $ref: '#/components/schemas/TemplateApply'\n          text/yml:\n            schema:\n              $ref: '#/components/schemas/TemplateApply'\n      x-codeSamples:\n        - lang: Shell\n          label: 'cURL: Dry run with a remote template'\n          source: |\n            curl --request POST \"http://localhost:8086/api/v2/templates/apply\" \\\n              --header \"Authorization: Token INFLUX_API_TOKEN\" \\\n              --data @- \u003c\u003c EOF\n                {\n                  \"dryRun\": true,\n                  \"orgID\": \"INFLUX_ORG_ID\",\n                  \"remotes\": [\n                    {\n                      \"url\": \"https://raw.githubusercontent.com/influxdata/community-templates/master/linux_system/linux_system.yml\"\n                    }\n                  ]\n                }\n            EOF\n        - lang: Shell\n          label: 'cURL: Apply with secret values'\n          source: |\n            curl \"http://localhost:8086/api/v2/templates/apply\" \\\n              --header \"Authorization: Token INFLUX_API_TOKEN\" \\\n              --data @- \u003c\u003c EOF | jq .\n                {\n                  \"orgID\": \"INFLUX_ORG_ID\",\n                  \"secrets\": {\n                    \"SLACK_WEBHOOK\": \"YOUR_SECRET_WEBHOOK_URL\"\n                  },\n                  \"remotes\": [\n                    {\n                      \"url\": \"https://raw.githubusercontent.com/influxdata/community-templates/master/fortnite/fn-template.yml\"\n                    }\n                  ]\n                }\n            EOF\n        - lang: Shell\n          label: 'cURL: Apply template objects with environment references'\n          source: |\n            curl --request POST \"http://localhost:8086/api/v2/templates/apply\" \\\n              --header \"Authorization: Token INFLUX_API_TOKEN\" \\\n              --data @- \u003c\u003c EOF\n              { \"orgID\": \"INFLUX_ORG_ID\",\n                \"envRefs\": {\n                  \"linux-cpu-label\": \"MY_CPU_LABEL\",\n                  \"docker-bucket\": \"MY_DOCKER_BUCKET\",\n                  \"docker-spec-1\": \"MY_DOCKER_SPEC\"\n                },\n                \"templates\": [\n                  { \"contents\": [{\n                      \"apiVersion\": \"influxdata.com/v2alpha1\",\n                      \"kind\": \"Label\",\n                      \"metadata\": {\n                        \"name\": {\n                          \"envRef\": {\n                            \"key\": \"linux-cpu-label\"\n                          }\n                        }\n                      },\n                      \"spec\": {\n                        \"color\": \"#326BBA\",\n                        \"name\": \"inputs.cpu\"\n                      }\n                    }]\n                  },\n                  \"templates\": [\n                    { \"contents\": [{\n                        \"apiVersion\": \"influxdata.com/v2alpha1\",\n                        \"kind\": \"Label\",\n                        \"metadata\": {\n                          \"name\": {\n                            \"envRef\": {\n                              \"key\": \"linux-cpu-label\"\n                            }\n                          }\n                        },\n                        \"spec\": {\n                          \"color\": \"#326BBA\",\n                          \"name\": \"inputs.cpu\"\n                        }\n                      }]\n                    },\n                    { \"contents\": [{\n                        \"apiVersion\": \"influxdata.com/v2alpha1\",\n                        \"kind\": \"Bucket\",\n                        \"metadata\": {\n                          \"name\": {\n                            \"envRef\": {\n                              \"key\": \"docker-bucket\"\n                            }\n                          }\n                        }\n                      }]\n                    }\n                  ]\n                }\n            EOF\n      responses:\n        '200':\n          description: |\n            Success.\n            The template dry run succeeded.\n            The response body contains a resource diff of changes that the\n            template would have made if installed.\n            No resources were created or updated.\n            The diff and summary won't contain IDs for resources\n            that didn't exist at the time of the dry run.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TemplateSummary'\n        '201':\n          description: |\n            Success.\n            The template applied successfully.\n            The response body contains the stack ID, a diff, and a summary.\n            The diff compares the initial state to the state after the template installation.\n            The summary contains newly created resources.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TemplateSummary'\n        '422':\n          description: |\n            Unprocessable entity.\n\n\n            The error may indicate one of the following problems:\n\n            - The template failed validation.\n            - You passed a parameter combination that InfluxDB doesn't support.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/TemplateSummary'\n                  - type: object\n                    required:\n                      - message\n                      - code\n                    properties:\n                      message:\n                        type: string\n                      code:\n                        type: string\n        '500':\n          description: |\n            Internal server error.\n\n            #### InfluxDB Cloud\n\n            - Returns this error if creating one of the template\n              resources (bucket, dashboard, task, user) exceeds your plan’s\n              adjustable service quotas.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                createExceedsQuota:\n                  summary: 'InfluxDB Cloud: Creating resource would exceed quota.'\n                  value:\n                    code: internal error\n                    message: \"resource_type=\\\"tasks\\\" err=\\\"failed to apply resource\\\"\\n\\tmetadata_name=\\\"alerting-gates-b84003\\\" err_msg=\\\"failed to create tasks[\\\\\\\"alerting-gates-b84003\\\\\\\"]: creating task would exceed quota\\\"\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /templates/export:\n    post:\n      operationId: ExportTemplate\n      tags:\n        - Templates\n      summary: Export a new template\n      requestBody:\n        description: Export resources as an InfluxDB template.\n        required: false\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/TemplateExportByID'\n                - $ref: '#/components/schemas/TemplateExportByName'\n      responses:\n        '200':\n          description: The template was created successfully. Returns the newly created template.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Template'\n            application/x-yaml:\n              schema:\n                $ref: '#/components/schemas/Template'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/runs':\n    get:\n      operationId: GetTasksIDRuns\n      tags:\n        - Tasks\n      summary: List runs for a task\n      description: |\n        Retrieves a list of runs for a [task](https://docs.influxdata.com/influxdb/v2.3/process-data/).\n\n        To limit which task runs are returned, pass query parameters in your request.\n        If no query parameters are passed, InfluxDB returns all task runs up to the default `limit`.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: |\n            The ID of the task to get runs for.\n            Only returns runs for this task.\n        - in: query\n          name: after\n          schema:\n            type: string\n          description: A task run ID. Only returns runs created after this run.\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 100\n          description: |\n            Limits the number of task runs returned. Default is `100`.\n        - in: query\n          name: afterTime\n          schema:\n            type: string\n            format: date-time\n          description: |\n            A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp)).\n            Only returns runs scheduled after this time.\n        - in: query\n          name: beforeTime\n          schema:\n            type: string\n            format: date-time\n          description: |\n            A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp)).\n            Only returns runs scheduled before this time.\n      responses:\n        '200':\n          description: Success. The response body contains the list of task runs.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Runs'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n    post:\n      operationId: PostTasksIDRuns\n      tags:\n        - Data I/O endpoints\n        - Tasks\n      summary: 'Start a task run, overriding the schedule'\n      description: |\n        Schedules a task run to start immediately, ignoring scheduled runs.\n\n        Use this endpoint to manually start a task run.\n        Scheduled runs will continue to run as scheduled.\n        This may result in concurrently running tasks.\n\n        To _retry_ a previous run (and avoid creating a new run),\n        use the [`POST /api/v2/tasks/{taskID}/runs/{runID}/retry` endpoint](#operation/PostTasksIDRunsIDRetry).\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RunManually'\n      responses:\n        '201':\n          description: Success. The run is scheduled to start.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n  '/tasks/{taskID}/runs/{runID}':\n    get:\n      operationId: GetTasksIDRunsID\n      tags:\n        - Tasks\n      summary: Retrieve a run for a task.\n      description: |\n        Retrieves a specific run for a [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task).\n\n        Use this endpoint to retrieve detail and logs for a specific task run.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The ID of the task to retrieve runs for.\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: The ID of the run to retrieve.\n      responses:\n        '200':\n          description: Success. The response body contains the task run.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n              examples:\n                runSuccess:\n                  summary: A successful task run.\n                  value:\n                    links:\n                      logs: /api/v2/tasks/0996e56b2f378000/runs/09b070dadaa7d000/logs\n                      retry: /api/v2/tasks/0996e56b2f378000/runs/09b070dadaa7d000/retry\n                      self: /api/v2/tasks/0996e56b2f378000/runs/09b070dadaa7d000\n                      task: /api/v2/tasks/0996e56b2f378000\n                    id: 09b070dadaa7d000\n                    taskID: 0996e56b2f378000\n                    status: success\n                    scheduledFor: '2022-07-18T14:46:06Z'\n                    startedAt: '2022-07-18T14:46:07.16222Z'\n                    finishedAt: '2022-07-18T14:46:07.308254Z'\n                    requestedAt: '2022-07-18T14:46:06Z'\n                    log:\n                      - runID: 09b070dadaa7d000\n                        time: '2022-07-18T14:46:07.101231Z'\n                        message: 'Started task from script: \"option task = {name: \\\"task1\\\", every: 30m} from(bucket: \\\"iot_center\\\") |\u003e range(start: -90d) |\u003e filter(fn: (r) =\u003e r._measurement == \\\"environment\\\")               |\u003e aggregateWindow(every: 1h, fn: mean)\"'\n                      - runID: 09b070dadaa7d000\n                        time: '2022-07-18T14:46:07.242859Z'\n                        message: Completed(success)\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n    delete:\n      operationId: DeleteTasksIDRunsID\n      tags:\n        - Tasks\n      summary: Cancel a running task\n      description: |\n        Cancels a running [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task).\n\n        Use this endpoint with InfluxDB OSS to cancel a running task.\n\n        #### InfluxDB Cloud\n\n        - Doesn't support this operation.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The ID of the task to cancel.\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: The ID of the task run to cancel.\n      responses:\n        '204':\n          description: |\n            Success. The `DELETE` is accepted and the run will be cancelled.\n\n            #### InfluxDB Cloud\n\n            - Doesn't support this operation.\n            - Doesn't return this status.\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '405':\n          description: |\n            Method not allowed.\n\n            #### InfluxDB Cloud\n\n              - Always returns this error; doesn't support cancelling tasks.\n\n            #### InfluxDB OSS\n\n              - Doesn't return this error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n  '/tasks/{taskID}/runs/{runID}/retry':\n    post:\n      operationId: PostTasksIDRunsIDRetry\n      tags:\n        - Tasks\n      summary: Retry a task run\n      description: |\n        Queues a [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task)  run to\n        retry and returns the scheduled run.\n\n        To manually start a _new_ task run, use the\n        [`POST /api/v2/tasks/{taskID}/runs` endpoint](#operation/PostTasksIDRuns).\n\n        #### Limitations\n\n        - The task must be _active_ (`status: \"active\"`).\n      requestBody:\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: |\n            A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task)  ID.\n            Specifies the task to retry.\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: |\n            A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task) run ID.\n            Specifies the task run to retry.\n\n            To find a task run ID, use the\n            [`GET /api/v2/tasks/{taskID}/runs` endpoint](#operation/GetTasksIDRuns)\n            to list task runs.\n      responses:\n        '200':\n          description: Success. The response body contains the queued run.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n              examples:\n                retryTaskRun:\n                  summary: A task run scheduled to retry\n                  value:\n                    links:\n                      logs: /api/v2/tasks/09a776832f381000/runs/09d60ffe08738000/logs\n                      retry: /api/v2/tasks/09a776832f381000/runs/09d60ffe08738000/retry\n                      self: /api/v2/tasks/09a776832f381000/runs/09d60ffe08738000\n                      task: /api/v2/tasks/09a776832f381000\n                    id: 09d60ffe08738000\n                    taskID: 09a776832f381000\n                    status: scheduled\n                    scheduledFor: '2022-08-15T00:00:00Z'\n                    requestedAt: '2022-08-16T20:05:11.84145Z'\n        '400':\n          description: |\n            Bad request.\n            The response body contains detail about the error.\n\n            InfluxDB may return this error for the following reasons:\n\n            - The task has `status: inactive`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                inactiveTask:\n                  summary: Can't retry an inactive task\n                  value:\n                    code: invalid\n                    message: 'failed to retry run: inactive task'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n  '/tasks/{taskID}/logs':\n    get:\n      operationId: GetTasksIDLogs\n      tags:\n        - Tasks\n      summary: Retrieve all logs for a task\n      description: |\n        Retrieves a list of all logs for a [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task).\n\n        When an InfluxDB task runs, a “run” record is created in the task’s history.\n        Logs associated with each run provide relevant log messages, timestamps, and the exit status of the run attempt.\n\n        Use this endpoint to retrieve only the log events for a task,\n        without additional task metadata.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: |\n            Success. The response body contains an `events` list with logs for the task.\n            Each log event `message` contains detail about the event.\n            If a task run fails, InfluxDB logs an event with the reason for the failure.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Logs'\n              examples:\n                taskSuccess:\n                  summary: Events for a successful task run.\n                  value:\n                    events:\n                      - runID: 09b070dadaa7d000\n                        time: '2022-07-18T14:46:07.101231Z'\n                        message: 'Started task from script: \"option task = {name: \\\"task1\\\", every: 30m} from(bucket: \\\"iot_center\\\") |\u003e range(start: -90d) |\u003e filter(fn: (r) =\u003e r._measurement == \\\"environment\\\") |\u003e aggregateWindow(every: 1h, fn: mean)\"'\n                      - runID: 09b070dadaa7d000\n                        time: '2022-07-18T14:46:07.242859Z'\n                        message: Completed(success)\n                taskFailure:\n                  summary: Events for a failed task run.\n                  value:\n                    events:\n                      - runID: 09a946fc3167d000\n                        time: '2022-07-13T07:06:54.198167Z'\n                        message: 'Started task from script: \"option task = {name: \\\"test task\\\", every: 3d, offset: 0s}\"'\n                      - runID: 09a946fc3167d000\n                        time: '2022-07-13T07:07:13.104037Z'\n                        message: Completed(failed)\n                      - runID: 09a946fc3167d000\n                        time: '2022-07-13T08:24:37.115323Z'\n                        message: 'error exhausting result iterator: error in query specification while starting program: this Flux script returns no streaming data. Consider adding a \"yield\" or invoking streaming functions directly, without performing an assignment'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n  '/tasks/{taskID}/runs/{runID}/logs':\n    get:\n      operationId: GetTasksIDRunsIDLogs\n      tags:\n        - Tasks\n      summary: Retrieve all logs for a run\n      description: |\n        Retrieves all logs for a task run.\n        A log is a list of run events with `runID`, `time`, and `message` properties.\n\n        Use this endpoint to help analyze task performance and troubleshoot failed task runs.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The ID of the task to get logs for.\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: The ID of the run to get logs for.\n      responses:\n        '200':\n          description: |\n            Success. The response body contains an `events` list with logs for the task run.\n            Each log event `message` contains detail about the event.\n            If a run fails, InfluxDB logs an event with the reason for the failure.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Logs'\n              examples:\n                taskSuccess:\n                  summary: Events for a successful task run.\n                  value:\n                    events:\n                      - runID: 09b070dadaa7d000\n                        time: '2022-07-18T14:46:07.101231Z'\n                        message: 'Started task from script: \"option task = {name: \\\"task1\\\", every: 30m} from(bucket: \\\"iot_center\\\") |\u003e range(start: -90d) |\u003e filter(fn: (r) =\u003e r._measurement == \\\"environment\\\") |\u003e aggregateWindow(every: 1h, fn: mean)\"'\n                      - runID: 09b070dadaa7d000\n                        time: '2022-07-18T14:46:07.242859Z'\n                        message: Completed(success)\n                taskFailure:\n                  summary: Events for a failed task.\n                  value:\n                    events:\n                      - runID: 09a946fc3167d000\n                        time: '2022-07-13T07:06:54.198167Z'\n                        message: 'Started task from script: \"option task = {name: \\\"test task\\\", every: 3d, offset: 0s}\"'\n                      - runID: 09a946fc3167d000\n                        time: '2022-07-13T07:07:13.104037Z'\n                        message: Completed(failed)\n                      - runID: 09a946fc3167d000\n                        time: '2022-07-13T08:24:37.115323Z'\n                        message: 'error exhausting result iterator: error in query specification while starting program: this Flux script returns no streaming data. Consider adding a \"yield\" or invoking streaming functions directly, without performing an assignment'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n  '/tasks/{taskID}/labels':\n    get:\n      operationId: GetTasksIDLabels\n      tags:\n        - Tasks\n      summary: List labels for a task\n      description: |\n        Retrieves a list of all labels for a task.\n\n        Labels may be used for grouping and filtering tasks.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The ID of the task to retrieve labels for.\n      responses:\n        '200':\n          description: Success. The response body contains a list of all labels for the task.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n    post:\n      operationId: PostTasksIDLabels\n      tags:\n        - Tasks\n      summary: Add a label to a task\n      description: |\n        Adds a label to a task.\n\n        Use this endpoint to add a label that you can use to filter tasks in the InfluxDB UI.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The ID of the task to label.\n      requestBody:\n        description: An object that contains a _`labelID`_ to add to the task.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: Success. The response body contains a list of all labels for the task.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n  '/tasks/{taskID}/labels/{labelID}':\n    delete:\n      operationId: DeleteTasksIDLabelsID\n      tags:\n        - Tasks\n      summary: Delete a label from a task\n      description: |\n        Deletes a label from a task.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The ID of the task to delete the label from.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Success. The label is deleted.\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '404':\n          $ref: '#/components/responses/ResourceNotFoundError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n  /flags:\n    get:\n      operationId: GetFlags\n      tags:\n        - Users\n      summary: Return the feature flags for the currently authenticated user\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description: Feature flags for the currently authenticated user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Flags'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /me:\n    get:\n      operationId: GetMe\n      tags:\n        - Users\n      summary: Retrieve the currently authenticated user\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description: Success. The response body contains the currently authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/GeneralServerError'\n  /me/password:\n    put:\n      operationId: PutMePassword\n      tags:\n        - Users\n      summary: Update a password\n      description: |\n        Updates the password for the signed-in [user](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#user).\n\n        This endpoint represents the third step in the following three-step process to let a\n        user with a user session update their password:\n          1. Pass the user's [Basic authentication credentials](#section/Authentication/BasicAuthentication) to the `POST /api/v2/signin`\n             endpoint to create a user session and generate a session cookie.\n          2. From the response in the first step, extract the session cookie (`Set-Cookie`) header.\n          3. Pass the following in a request to the `PUT /api/v2/me/password` endpoint:\n             - The `Set-Cookie` header from the second step\n             - The `Authorization Basic` header with the user's _Basic authentication_ credentials\n             - `{\"password\": \"NEW_PASSWORD\"}` in the request body\n\n        #### InfluxDB Cloud\n\n        - Doesn't allow you to manage passwords through the API.\n          Use the InfluxDB Cloud user interface (UI) to update your password.\n\n        #### Related endpoints\n\n        - [Signin](#tag/Signin)\n        - [Signout](#tag/Signout)\n        - [Users](#tag/Users)\n\n        #### Related guides\n\n        - [InfluxDB Cloud - Change your password](https://docs.influxdata.com/influxdb/cloud/account-management/change-password/)\n        - [InfluxDB OSS - Change your password](https://docs.influxdata.com/influxdb/latest/users/change-password/)\n      security:\n        - BasicAuthentication: []\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - name: influxdb-oss-session\n          in: cookie\n          schema:\n            type: string\n          required: true\n          description: |\n            The user session cookie for the\n            [user](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#user)\n            signed in with [Basic authentication credentials](#section/Authentication/BasicAuthentication).\n\n            #### Related guides\n\n            - [Manage users]({{% INFLUXDB_DOCS_URL%}}/users/)\n          example: influxdb-oss-session=19aaaZZZGOvP2GGryXVT2qYftlFKu3bIopurM6AGFow1yF1abhtOlbHfsc-d8gozZFC_6WxmlQIAwLMW5xs523w==\n      requestBody:\n        description: The new password.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordResetBody'\n      responses:\n        '204':\n          description: Success. The password is updated.\n        '400':\n          description: |\n            Bad request.\n\n            #### InfluxDB Cloud\n\n            - Doesn't allow you to manage through the API; always responds with this status.\n\n            #### InfluxDB OSS\n\n            - Doesn't understand a value passed in the request.\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        default:\n          description: Unsuccessful authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/members':\n    get:\n      operationId: GetTasksIDMembers\n      deprecated: true\n      tags:\n        - Tasks\n      summary: List all task members\n      description: |\n        **Deprecated**: Tasks don't use `owner` and `member` roles.\n        Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: |\n            Success. The response body contains a list of `users` that have\n            the `member` role for a task.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTasksIDMembers\n      deprecated: true\n      tags:\n        - Tasks\n      summary: Add a member to a task\n      description: |\n        **Deprecated**: Tasks don't use `owner` and `member` roles.\n        Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n\n        Adds a user to members of a task and returns the member.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      requestBody:\n        description: A user to add as a member of the task.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Created. The user is added to task members.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/members/{userID}':\n    delete:\n      operationId: DeleteTasksIDMembersID\n      deprecated: true\n      tags:\n        - Tasks\n      summary: Remove a member from a task\n      description: |\n        **Deprecated**: Tasks don't use `owner` and `member` roles.\n        Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the member to remove.\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/owners':\n    get:\n      operationId: GetTasksIDOwners\n      deprecated: true\n      tags:\n        - Tasks\n      summary: List all owners of a task\n      description: |\n        **Deprecated**: Tasks don't use `owner` and `member` roles.\n        Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n\n        Retrieves all users that have owner permission for a task.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The ID of the task to retrieve owners for.\n      responses:\n        '200':\n          description: |\n            Success.\n            The response contains a list of `users` that have the `owner` role for the task.\n\n            If the task has no owners, the response contains an empty `users` array.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '422':\n          description: |\n            Unprocessable entity.\n\n            The error may indicate one of the following problems:\n\n            - The request body isn't valid--the request is well-formed, but InfluxDB can't process it due to semantic errors.\n            - You passed a parameter combination that InfluxDB doesn't support.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTasksIDOwners\n      deprecated: true\n      tags:\n        - Tasks\n      summary: Add an owner for a task\n      description: |\n        **Deprecated**: Tasks don't use `owner` and `member` roles.\n        Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n\n        Assigns a task `owner` role to a user.\n\n        Use this endpoint to create a _resource owner_ for the task.\n        A _resource owner_ is a user with `role: owner` for a specific resource.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      requestBody:\n        description: A user to add as an owner of the task.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: |\n            Created. The task `owner` role is assigned to the user.\n            The response body contains the resource owner with\n            role and user detail.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n              examples:\n                createdOwner:\n                  summary: User has the owner role for the resource\n                  value:\n                    role: owner\n                    links:\n                      logs: /api/v2/users/0772396d1f411000/logs\n                      self: /api/v2/users/0772396d1f411000\n                    id: 0772396d1f411000\n                    name: USER_NAME\n                    status: active\n        '401':\n          $ref: '#/components/responses/AuthorizationError'\n        '422':\n          description: |\n            Unprocessable entity.\n\n            The error may indicate one of the following problems:\n\n            - The request body isn't valid--the request is well-formed, but InfluxDB can't process it due to semantic errors.\n            - You passed a parameter combination that InfluxDB doesn't support.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/owners/{userID}':\n    delete:\n      operationId: DeleteTasksIDOwnersID\n      deprecated: true\n      tags:\n        - Tasks\n      summary: Remove an owner from a task\n      description: |\n        **Deprecated**: Tasks don't use `owner` and `member` roles.\n        Use [`/api/v2/authorizations`](#tag/Authorizations) to assign user permissions.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the owner to remove.\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/users/{userID}/password':\n    post:\n      operationId: PostUsersIDPassword\n      tags:\n        - Security and access endpoints\n        - Users\n      summary: Update a password\n      description: |\n        Updates a user password.\n\n        Use this endpoint to let a user authenticate with\n        [Basic authentication credentials](#section/Authentication/BasicAuthentication)\n        and set a new password.\n\n        #### InfluxDB Cloud\n\n        - Doesn't allow you to manage user passwords through the API.\n          Use the InfluxDB Cloud user interface (UI) to update a password.\n\n        #### Related guides\n\n        - [InfluxDB Cloud - Change your password](https://docs.influxdata.com/influxdb/cloud/account-management/change-password/)\n        - [InfluxDB OSS - Change your password](https://docs.influxdata.com/influxdb/latest/users/change-password/)\n      security:\n        - BasicAuthentication: []\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the user to set the password for.\n      requestBody:\n        description: The new password to set for the user.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordResetBody'\n      responses:\n        '204':\n          description: Success. The password is updated.\n        '400':\n          description: |\n            Bad request.\n\n            #### InfluxDB Cloud\n\n            - Doesn't allow you to manage passwords through the API; always responds with this status.\n\n            #### InfluxDB OSS\n\n            - Doesn't understand a value passed in the request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                updatePasswordNotAllowed:\n                  summary: Cloud API can't update passwords\n                  value:\n                    code: invalid\n                    message: passwords cannot be changed through the InfluxDB Cloud API\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/GeneralServerError'\n      x-codeSamples:\n        - lang: Shell\n          label: 'cURL: use Basic auth to update the user password'\n          source: |\n            curl --request POST \\\n               \"http://localhost:8086/api/v2/users/USER_ID/password\" \\\n              --header 'Content-type: application/json' \\\n              --user \"USERNAME:PASSWORD\" \\\n              --data-binary @- \u003c\u003c EOF\n                {\"password\": \"\"}\n            EOF\n  /checks:\n    get:\n      operationId: GetChecks\n      tags:\n        - Checks\n      summary: List all checks\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - in: query\n          name: orgID\n          required: true\n          description: Only show checks that belong to a specific organization ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of checks\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checks'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: CreateCheck\n      tags:\n        - Checks\n      summary: Add new check\n      requestBody:\n        description: Check to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostCheck'\n      responses:\n        '201':\n          description: Check created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Check'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/checks/{checkID}':\n    get:\n      operationId: GetChecksID\n      tags:\n        - Checks\n      summary: Retrieve a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: The check requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Check'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      operationId: PutChecksID\n      tags:\n        - Checks\n      summary: Update a check\n      requestBody:\n        description: Check update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Check'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: An updated check\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Check'\n        '404':\n          description: The check was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchChecksID\n      tags:\n        - Checks\n      summary: Update a check\n      requestBody:\n        description: Check update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CheckPatch'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: An updated check\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Check'\n        '404':\n          description: The check was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteChecksID\n      tags:\n        - Checks\n      summary: Delete a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: The check was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/checks/{checkID}/labels':\n    get:\n      operationId: GetChecksIDLabels\n      tags:\n        - Checks\n      summary: List all labels for a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: A list of all labels for a check\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostChecksIDLabels\n      tags:\n        - Checks\n      summary: Add a label to a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: The label was added to the check\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/checks/{checkID}/labels/{labelID}':\n    delete:\n      operationId: DeleteChecksIDLabelsID\n      tags:\n        - Checks\n      summary: Delete label from a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Check or label not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /notificationRules:\n    get:\n      operationId: GetNotificationRules\n      tags:\n        - NotificationRules\n      summary: List all notification rules\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - in: query\n          name: orgID\n          required: true\n          description: Only show notification rules that belong to a specific organization ID.\n          schema:\n            type: string\n        - in: query\n          name: checkID\n          description: Only show notifications that belong to the specific check ID.\n          schema:\n            type: string\n        - in: query\n          name: tag\n          description: Only return notification rules that \"would match\" statuses which contain the tag key value pairs provided.\n          schema:\n            type: string\n            pattern: '^[a-zA-Z0-9_]+:[a-zA-Z0-9_]+$'\n            example: 'env:prod'\n      responses:\n        '200':\n          description: A list of notification rules\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRules'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: CreateNotificationRule\n      tags:\n        - NotificationRules\n      summary: Add a notification rule\n      requestBody:\n        description: Notification rule to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostNotificationRule'\n      responses:\n        '201':\n          description: Notification rule created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRule'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/checks/{checkID}/query':\n    get:\n      operationId: GetChecksIDQuery\n      tags:\n        - Checks\n      summary: Retrieve a check query\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: The check query requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FluxResponse'\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Check not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationRules/{ruleID}':\n    get:\n      operationId: GetNotificationRulesID\n      tags:\n        - NotificationRules\n      summary: Retrieve a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: The notification rule requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRule'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      operationId: PutNotificationRulesID\n      tags:\n        - NotificationRules\n      summary: Update a notification rule\n      requestBody:\n        description: Notification rule update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotificationRule'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: An updated notification rule\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRule'\n        '404':\n          description: The notification rule was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchNotificationRulesID\n      tags:\n        - NotificationRules\n      summary: Update a notification rule\n      requestBody:\n        description: Notification rule update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotificationRuleUpdate'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: An updated notification rule\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRule'\n        '404':\n          description: The notification rule was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteNotificationRulesID\n      tags:\n        - NotificationRules\n      summary: Delete a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: The check was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationRules/{ruleID}/labels':\n    get:\n      operationId: GetNotificationRulesIDLabels\n      tags:\n        - NotificationRules\n      summary: List all labels for a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: A list of all labels for a notification rule\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostNotificationRuleIDLabels\n      tags:\n        - NotificationRules\n      summary: Add a label to a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: The label was added to the notification rule\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationRules/{ruleID}/labels/{labelID}':\n    delete:\n      operationId: DeleteNotificationRulesIDLabelsID\n      tags:\n        - NotificationRules\n      summary: Delete label from a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Rule or label not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationRules/{ruleID}/query':\n    get:\n      operationId: GetNotificationRulesIDQuery\n      tags:\n        - Rules\n      summary: Retrieve a notification rule query\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: The notification rule query requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FluxResponse'\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Notification rule not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /notificationEndpoints:\n    get:\n      operationId: GetNotificationEndpoints\n      tags:\n        - NotificationEndpoints\n      summary: List all notification endpoints\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - in: query\n          name: orgID\n          required: true\n          description: Only show notification endpoints that belong to specific organization ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of notification endpoints\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoints'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: CreateNotificationEndpoint\n      tags:\n        - NotificationEndpoints\n      summary: Add a notification endpoint\n      requestBody:\n        description: Notification endpoint to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostNotificationEndpoint'\n      responses:\n        '201':\n          description: Notification endpoint created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoint'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationEndpoints/{endpointID}':\n    get:\n      operationId: GetNotificationEndpointsID\n      tags:\n        - NotificationEndpoints\n      summary: Retrieve a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '200':\n          description: The notification endpoint requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoint'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      operationId: PutNotificationEndpointsID\n      tags:\n        - NotificationEndpoints\n      summary: Update a notification endpoint\n      requestBody:\n        description: A new notification endpoint to replace the existing endpoint with\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotificationEndpoint'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '200':\n          description: An updated notification endpoint\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoint'\n        '404':\n          description: The notification endpoint was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchNotificationEndpointsID\n      tags:\n        - NotificationEndpoints\n      summary: Update a notification endpoint\n      requestBody:\n        description: Check update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotificationEndpointUpdate'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '200':\n          description: An updated notification endpoint\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoint'\n        '404':\n          description: The notification endpoint was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteNotificationEndpointsID\n      tags:\n        - NotificationEndpoints\n      summary: Delete a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: The endpoint was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationEndpoints/{endpointID}/labels':\n    get:\n      operationId: GetNotificationEndpointsIDLabels\n      tags:\n        - NotificationEndpoints\n      summary: List all labels for a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '200':\n          description: A list of all labels for a notification endpoint\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostNotificationEndpointIDLabels\n      tags:\n        - NotificationEndpoints\n      summary: Add a label to a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: The label was added to the notification endpoint\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationEndpoints/{endpointID}/labels/{labelID}':\n    delete:\n      operationId: DeleteNotificationEndpointsIDLabelsID\n      tags:\n        - NotificationEndpoints\n      summary: Delete a label from a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Endpoint or label not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  parameters:\n    TraceSpan:\n      in: header\n      name: Zap-Trace-Span\n      description: OpenTracing span context\n      example:\n        trace_id: '1'\n        span_id: '1'\n        baggage:\n          key: value\n      required: false\n      schema:\n        type: string\n    Offset:\n      in: query\n      name: offset\n      required: false\n      description: |\n        The offset for pagination.\n        The number of records to skip.\n      schema:\n        type: integer\n        minimum: 0\n    Limit:\n      in: query\n      name: limit\n      required: false\n      description: |\n        Limits the number of records returned. Default is `20`.\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 100\n        default: 20\n    Descending:\n      in: query\n      name: descending\n      required: false\n      schema:\n        type: boolean\n        default: false\n    SortBy:\n      in: query\n      name: sortBy\n      required: false\n      schema:\n        type: string\n    After:\n      in: query\n      name: after\n      required: false\n      schema:\n        type: string\n      description: |\n        Resource ID to seek from. Results are not inclusive of this ID. Use `after` instead of `offset`.\n  schemas:\n    LanguageRequest:\n      description: Flux query to be analyzed.\n      type: object\n      required:\n        - query\n      properties:\n        query:\n          description: |\n            The Flux query script to be analyzed.\n          type: string\n    Query:\n      description: Query InfluxDB with the Flux language\n      type: object\n      required:\n        - query\n      properties:\n        extern:\n          $ref: '#/components/schemas/File'\n        query:\n          description: The query script to execute.\n          type: string\n        type:\n          description: The type of query. Must be \"flux\".\n          type: string\n          enum:\n            - flux\n        params:\n          type: object\n          additionalProperties: true\n          description: |\n            Key-value pairs passed as parameters during query execution.\n\n            To use parameters in your query, pass a _`query`_ with `params` references (in dot notation)--for example:\n\n            ```json\n              query: \"from(bucket: params.mybucket)\\\n                          |\u003e range(start: params.rangeStart) |\u003e limit(n:1)\"\n            ```\n\n            and pass _`params`_ with the key-value pairs--for example:\n\n            ```json\n              params: {\n                \"mybucket\": \"environment\",\n                \"rangeStart\": \"-30d\"\n              }\n            ```\n\n            During query execution, InfluxDB passes _`params`_ to your script and substitutes the values.\n\n            #### Limitations\n\n            - If you use _`params`_, you can't use _`extern`_.\n        dialect:\n          $ref: '#/components/schemas/Dialect'\n        now:\n          description: |\n            Specifies the time that should be reported as `now` in the query.\n            Default is the server `now` time.\n          type: string\n          format: date-time\n    Package:\n      description: Represents a complete package source tree.\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        path:\n          description: Package import path\n          type: string\n        package:\n          description: Package name\n          type: string\n        files:\n          description: Package files\n          type: array\n          items:\n            $ref: '#/components/schemas/File'\n    File:\n      description: Represents a source from a single file\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        name:\n          description: The name of the file.\n          type: string\n        package:\n          $ref: '#/components/schemas/PackageClause'\n        imports:\n          description: A list of package imports\n          type: array\n          items:\n            $ref: '#/components/schemas/ImportDeclaration'\n        body:\n          description: List of Flux statements\n          type: array\n          items:\n            $ref: '#/components/schemas/Statement'\n    PackageClause:\n      description: Defines a package identifier\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        name:\n          $ref: '#/components/schemas/Identifier'\n    ImportDeclaration:\n      description: Declares a package import\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        as:\n          $ref: '#/components/schemas/Identifier'\n        path:\n          $ref: '#/components/schemas/StringLiteral'\n    DeletePredicateRequest:\n      description: The delete predicate request.\n      type: object\n      required:\n        - start\n        - stop\n      properties:\n        start:\n          description: |\n            A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp)).\n            The earliest time to delete from.\n          type: string\n          format: date-time\n        stop:\n          description: |\n            A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp)).\n            The latest time to delete from.\n          type: string\n          format: date-time\n        predicate:\n          description: |\n            An expression in [delete predicate syntax](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/delete-predicate/).\n          example: tag1=\"value1\" and (tag2=\"value2\" and tag3!=\"value3\")\n          type: string\n    Node:\n      oneOf:\n        - $ref: '#/components/schemas/Expression'\n        - $ref: '#/components/schemas/Block'\n    NodeType:\n      description: Type of AST node\n      type: string\n    Block:\n      description: A set of statements\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        body:\n          description: Block body\n          type: array\n          items:\n            $ref: '#/components/schemas/Statement'\n    Statement:\n      oneOf:\n        - $ref: '#/components/schemas/BadStatement'\n        - $ref: '#/components/schemas/VariableAssignment'\n        - $ref: '#/components/schemas/MemberAssignment'\n        - $ref: '#/components/schemas/ExpressionStatement'\n        - $ref: '#/components/schemas/ReturnStatement'\n        - $ref: '#/components/schemas/OptionStatement'\n        - $ref: '#/components/schemas/BuiltinStatement'\n        - $ref: '#/components/schemas/TestStatement'\n    BadStatement:\n      description: A placeholder for statements for which no correct statement nodes can be created\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        text:\n          description: Raw source text\n          type: string\n    VariableAssignment:\n      description: Represents the declaration of a variable\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        id:\n          $ref: '#/components/schemas/Identifier'\n        init:\n          $ref: '#/components/schemas/Expression'\n    MemberAssignment:\n      description: Object property assignment\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        member:\n          $ref: '#/components/schemas/MemberExpression'\n        init:\n          $ref: '#/components/schemas/Expression'\n    ExpressionStatement:\n      description: May consist of an expression that doesn't return a value and is executed solely for its side-effects\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        expression:\n          $ref: '#/components/schemas/Expression'\n    ReturnStatement:\n      description: Defines an expression to return\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        argument:\n          $ref: '#/components/schemas/Expression'\n    OptionStatement:\n      description: A single variable declaration\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        assignment:\n          oneOf:\n            - $ref: '#/components/schemas/VariableAssignment'\n            - $ref: '#/components/schemas/MemberAssignment'\n    BuiltinStatement:\n      description: Declares a builtin identifier and its type\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        id:\n          $ref: '#/components/schemas/Identifier'\n    TestStatement:\n      description: Declares a Flux test case\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        assignment:\n          $ref: '#/components/schemas/VariableAssignment'\n    Expression:\n      oneOf:\n        - $ref: '#/components/schemas/ArrayExpression'\n        - $ref: '#/components/schemas/DictExpression'\n        - $ref: '#/components/schemas/FunctionExpression'\n        - $ref: '#/components/schemas/BinaryExpression'\n        - $ref: '#/components/schemas/CallExpression'\n        - $ref: '#/components/schemas/ConditionalExpression'\n        - $ref: '#/components/schemas/LogicalExpression'\n        - $ref: '#/components/schemas/MemberExpression'\n        - $ref: '#/components/schemas/IndexExpression'\n        - $ref: '#/components/schemas/ObjectExpression'\n        - $ref: '#/components/schemas/ParenExpression'\n        - $ref: '#/components/schemas/PipeExpression'\n        - $ref: '#/components/schemas/UnaryExpression'\n        - $ref: '#/components/schemas/BooleanLiteral'\n        - $ref: '#/components/schemas/DateTimeLiteral'\n        - $ref: '#/components/schemas/DurationLiteral'\n        - $ref: '#/components/schemas/FloatLiteral'\n        - $ref: '#/components/schemas/IntegerLiteral'\n        - $ref: '#/components/schemas/PipeLiteral'\n        - $ref: '#/components/schemas/RegexpLiteral'\n        - $ref: '#/components/schemas/StringLiteral'\n        - $ref: '#/components/schemas/UnsignedIntegerLiteral'\n        - $ref: '#/components/schemas/Identifier'\n    ArrayExpression:\n      description: Used to create and directly specify the elements of an array object\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        elements:\n          description: Elements of the array\n          type: array\n          items:\n            $ref: '#/components/schemas/Expression'\n    DictExpression:\n      description: Used to create and directly specify the elements of a dictionary\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        elements:\n          description: Elements of the dictionary\n          type: array\n          items:\n            $ref: '#/components/schemas/DictItem'\n    DictItem:\n      description: A key-value pair in a dictionary.\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        key:\n          $ref: '#/components/schemas/Expression'\n        val:\n          $ref: '#/components/schemas/Expression'\n    FunctionExpression:\n      description: Function expression\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        params:\n          description: Function parameters\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n        body:\n          $ref: '#/components/schemas/Node'\n    BinaryExpression:\n      description: uses binary operators to act on two operands in an expression\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        operator:\n          type: string\n        left:\n          $ref: '#/components/schemas/Expression'\n        right:\n          $ref: '#/components/schemas/Expression'\n    CallExpression:\n      description: Represents a function call\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        callee:\n          $ref: '#/components/schemas/Expression'\n        arguments:\n          description: Function arguments\n          type: array\n          items:\n            $ref: '#/components/schemas/Expression'\n    ConditionalExpression:\n      description: 'Selects one of two expressions, `Alternate` or `Consequent`, depending on a third boolean expression, `Test`'\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        test:\n          $ref: '#/components/schemas/Expression'\n        alternate:\n          $ref: '#/components/schemas/Expression'\n        consequent:\n          $ref: '#/components/schemas/Expression'\n    LogicalExpression:\n      description: Represents the rule conditions that collectively evaluate to either true or false\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        operator:\n          type: string\n        left:\n          $ref: '#/components/schemas/Expression'\n        right:\n          $ref: '#/components/schemas/Expression'\n    MemberExpression:\n      description: Represents accessing a property of an object\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        object:\n          $ref: '#/components/schemas/Expression'\n        property:\n          $ref: '#/components/schemas/PropertyKey'\n    IndexExpression:\n      description: Represents indexing into an array\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        array:\n          $ref: '#/components/schemas/Expression'\n        index:\n          $ref: '#/components/schemas/Expression'\n    ObjectExpression:\n      description: Allows the declaration of an anonymous object within a declaration\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        properties:\n          description: Object properties\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n    ParenExpression:\n      description: Represents an expression wrapped in parenthesis\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        expression:\n          $ref: '#/components/schemas/Expression'\n    PipeExpression:\n      description: Call expression with pipe argument\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        argument:\n          $ref: '#/components/schemas/Expression'\n        call:\n          $ref: '#/components/schemas/CallExpression'\n    UnaryExpression:\n      description: Uses operators to act on a single operand in an expression\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        operator:\n          type: string\n        argument:\n          $ref: '#/components/schemas/Expression'\n    BooleanLiteral:\n      description: Represents boolean values\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: boolean\n    DateTimeLiteral:\n      description: 'Represents an instant in time with nanosecond precision in [RFC3339Nano date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339nano-timestamp).'\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n          format: date-time\n    DurationLiteral:\n      description: Represents the elapsed time between two instants as an int64 nanosecond count with syntax of golang's time.Duration\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        values:\n          description: Duration values\n          type: array\n          items:\n            $ref: '#/components/schemas/Duration'\n    FloatLiteral:\n      description: Represents floating point numbers according to the double representations defined by the IEEE-754-1985\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: number\n    IntegerLiteral:\n      description: Represents integer numbers\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n    PipeLiteral:\n      description: 'Represents a specialized literal value, indicating the left hand value of a pipe expression'\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n    RegexpLiteral:\n      description: Expressions begin and end with `/` and are regular expressions with syntax accepted by RE2\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n    StringLiteral:\n      description: Expressions begin and end with double quote marks\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n    UnsignedIntegerLiteral:\n      description: Represents integer numbers\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n    Duration:\n      description: A pair consisting of length of time and the unit of time measured. It is the atomic unit from which all duration literals are composed.\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        magnitude:\n          type: integer\n        unit:\n          type: string\n    Property:\n      description: The value associated with a key\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        key:\n          $ref: '#/components/schemas/PropertyKey'\n        value:\n          $ref: '#/components/schemas/Expression'\n    PropertyKey:\n      oneOf:\n        - $ref: '#/components/schemas/Identifier'\n        - $ref: '#/components/schemas/StringLiteral'\n    Identifier:\n      description: A valid Flux identifier\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        name:\n          type: string\n    Dialect:\n      description: |\n        Options for tabular data output.\n        Default output is [annotated CSV](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/annotated-csv/#csv-response-format) with headers.\n\n        For more information about tabular data **dialect**,\n        see [W3 metadata vocabulary for tabular data](https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions).\n      type: object\n      properties:\n        header:\n          description: 'If true, the results contain a header row.'\n          type: boolean\n          default: true\n        delimiter:\n          description: 'The separator used between cells. Default is a comma (`,`).'\n          type: string\n          default: ','\n          maxLength: 1\n          minLength: 1\n        annotations:\n          description: |\n            Annotation rows to include in the results.\n            An _annotation_ is metadata associated with an object (column) in the data model.\n\n            #### Related guides\n\n            - See [Annotated CSV annotations](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/annotated-csv/#annotations) for examples and more information.\n\n            For more information about **annotations** in tabular data,\n            see [W3 metadata vocabulary for tabular data](https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns).\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n            enum:\n              - group\n              - datatype\n              - default\n        commentPrefix:\n          description: The character prefixed to comment strings. Default is a number sign (`#`).\n          type: string\n          default: '#'\n          maxLength: 1\n          minLength: 0\n        dateTimeFormat:\n          description: |\n            The format for timestamps in results.\n            Default is [`RFC3339` date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp).\n            To include nanoseconds in timestamps, use `RFC3339Nano`.\n\n            #### Example formatted date/time values\n\n            | Format      | Value                       |\n            |:------------|:----------------------------|\n            | `RFC3339`    | `\"2006-01-02T15:04:05Z07:00\"` |\n            | `RFC3339Nano` | `\"2006-01-02T15:04:05.999999999Z07:00\"` |\n          type: string\n          default: RFC3339\n          enum:\n            - RFC3339\n            - RFC3339Nano\n    Authorization:\n      required:\n        - orgID\n        - permissions\n      allOf:\n        - $ref: '#/components/schemas/AuthorizationUpdateRequest'\n        - type: object\n          properties:\n            createdAt:\n              type: string\n              format: date-time\n              readOnly: true\n            updatedAt:\n              type: string\n              format: date-time\n              readOnly: true\n            orgID:\n              type: string\n              description: |\n                The organization ID.\n                Specifies the [organization](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#organization) that the authorization is scoped to.\n            permissions:\n              type: array\n              minItems: 1\n              description: |\n                The list of permissions.\n                An authorization must have at least one permission.\n              items:\n                required:\n                  - action\n                  - resource\n                properties:\n                  action:\n                    type: string\n                    enum:\n                      - read\n                      - write\n                  resource:\n                    type: object\n                    required:\n                      - type\n                    properties:\n                      type:\n                        type: string\n                        enum:\n                          - authorizations\n                          - buckets\n                          - dashboards\n                          - orgs\n                          - sources\n                          - tasks\n                          - telegrafs\n                          - users\n                          - variables\n                          - scrapers\n                          - secrets\n                          - labels\n                          - views\n                          - documents\n                          - notificationRules\n                          - notificationEndpoints\n                          - checks\n                          - dbrp\n                          - notebooks\n                          - annotations\n                          - remotes\n                          - replications\n                          - instance\n                        description: |\n                          The type of resource.\n                          In a `permission`, applies the permission to all resources of this type.\n                      id:\n                        type: string\n                        description: |\n                          The ID of a specific resource.\n                          In a `permission`, applies the permission to only the resource with this ID.\n                      name:\n                        type: string\n                        description: |\n                          Optional: A name for the resource.\n                          Not all resource types have a name field.\n                      orgID:\n                        type: string\n                        description: |\n                          The ID of the organization that owns the resource.\n                          In a `permission`, applies the permission to all resources of `type` owned by this organization.\n                      org:\n                        type: string\n                        description: |\n                          Optional: The name of the organization with `orgID`.\n            id:\n              readOnly: true\n              type: string\n              description: The authorization ID.\n            token:\n              readOnly: true\n              type: string\n              description: |\n                The API token.\n                [Tokens](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#token) are\n                used to authenticate InfluxDB API requests and `influx` CLI commands.\n                If authenticated, the token is allowed the permissions of the _authorization_.\n                The token value is unique to the authorization.\n            userID:\n              readOnly: true\n              type: string\n              description: 'The user ID. Specifies the [user](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#user) that owns the authorization. If _scoped_, the user that the authorization is scoped to; otherwise, the creator of the authorization.'\n            user:\n              readOnly: true\n              type: string\n              description: |\n                The user name.\n                Specifies the [user](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#user) that owns the authorization.\n                If the authorization is _scoped_ to a user, the user;\n                otherwise, the creator of the authorization.\n            org:\n              readOnly: true\n              type: string\n              description: |\n                The organization name.\n                Specifies the [organization](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#organization) that the token is scoped to.\n            links:\n              type: object\n              readOnly: true\n              example:\n                self: /api/v2/authorizations/1\n                user: /api/v2/users/12\n              properties:\n                self:\n                  readOnly: true\n                  $ref: '#/components/schemas/Link'\n                user:\n                  readOnly: true\n                  $ref: '#/components/schemas/Link'\n    Authorizations:\n      type: object\n      properties:\n        links:\n          readOnly: true\n          $ref: '#/components/schemas/Links'\n        authorizations:\n          type: array\n          items:\n            $ref: '#/components/schemas/Authorization'\n    AuthorizationUpdateRequest:\n      properties:\n        status:\n          description: 'Status of the token. If `inactive`, requests using the token will be rejected.'\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n        description:\n          type: string\n          description: A description of the token.\n    PostBucketRequest:\n      properties:\n        orgID:\n          description: |\n            Organization ID.\n            The ID of the organization.\n          type: string\n        name:\n          description: |\n            The name of the bucket.\n          type: string\n        description:\n          description: |\n            A description of the bucket.\n          type: string\n        rp:\n          description: |\n            Retention policy is an InfluxDB 1.x concept that represents the duration\n            of time that each data point in the retention policy persists. Use `rp`\n            for compatibility with InfluxDB 1.x.\n            The InfluxDB 2.x and Cloud equivalent is\n            [retention period](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#retention-period).\n          type: string\n          default: '0'\n        retentionRules:\n          $ref: '#/components/schemas/RetentionRules'\n        schemaType:\n          description: |\n            Schema Type.\n            Use `explicit` to enforce column names, tags, fields, and data types for\n            your data.\n\n            #### InfluxDB Cloud\n\n            - Default is `implicit`.\n\n            #### InfluxDB OSS\n\n            - Doesn't support `schemaType`.\n          $ref: '#/components/schemas/SchemaType'\n          default: implicit\n      required:\n        - orgID\n        - name\n    Bucket:\n      properties:\n        links:\n          type: object\n          readOnly: true\n          example:\n            labels: /api/v2/buckets/1/labels\n            members: /api/v2/buckets/1/members\n            org: /api/v2/orgs/2\n            owners: /api/v2/buckets/1/owners\n            self: /api/v2/buckets/1\n            write: /api/v2/write?org=2\u0026bucket=1\n          properties:\n            labels:\n              description: URL to retrieve labels for this bucket.\n              $ref: '#/components/schemas/Link'\n            members:\n              description: URL to retrieve members that can read this bucket.\n              $ref: '#/components/schemas/Link'\n            org:\n              description: URL to retrieve parent organization for this bucket.\n              $ref: '#/components/schemas/Link'\n            owners:\n              description: URL to retrieve owners that can read and write to this bucket.\n              $ref: '#/components/schemas/Link'\n            self:\n              description: URL for this bucket.\n              $ref: '#/components/schemas/Link'\n            write:\n              description: URL to write line protocol to this bucket.\n              $ref: '#/components/schemas/Link'\n        id:\n          readOnly: true\n          type: string\n        type:\n          readOnly: true\n          type: string\n          default: user\n          enum:\n            - user\n            - system\n        name:\n          type: string\n        description:\n          type: string\n        orgID:\n          type: string\n        rp:\n          type: string\n        schemaType:\n          $ref: '#/components/schemas/SchemaType'\n          default: implicit\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        retentionRules:\n          $ref: '#/components/schemas/RetentionRules'\n        labels:\n          $ref: '#/components/schemas/Labels'\n      required:\n        - name\n        - retentionRules\n    Buckets:\n      type: object\n      properties:\n        links:\n          readOnly: true\n          $ref: '#/components/schemas/Links'\n        buckets:\n          type: array\n          items:\n            $ref: '#/components/schemas/Bucket'\n    RetentionRules:\n      type: array\n      description: |\n        Retention rules to expire or retain data.\n        #### InfluxDB Cloud\n\n        - `retentionRules` is required.\n\n        #### InfluxDB OSS\n\n        - `retentionRules` isn't required.\n      items:\n        $ref: '#/components/schemas/RetentionRule'\n    PatchBucketRequest:\n      type: object\n      description: |\n        An object that contains updated bucket properties to apply.\n      properties:\n        name:\n          type: string\n          description: |\n            The name of the bucket.\n        description:\n          description: |\n            A description of the bucket.\n          type: string\n        retentionRules:\n          $ref: '#/components/schemas/PatchRetentionRules'\n    PatchRetentionRules:\n      type: array\n      description: Updates to rules to expire or retain data. No rules means no updates.\n      items:\n        $ref: '#/components/schemas/PatchRetentionRule'\n    PatchRetentionRule:\n      type: object\n      properties:\n        type:\n          type: string\n          default: expire\n          enum:\n            - expire\n        everySeconds:\n          type: integer\n          format: int64\n          description: |\n            The number of seconds to keep data.\n            Default duration is `2592000` (30 days).\n            `0` represents infinite retention.\n          example: 86400\n          default: 2592000\n          minimum: 0\n        shardGroupDurationSeconds:\n          type: integer\n          format: int64\n          description: |\n            The [shard group duration](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#shard).\n            The number of seconds that each shard group covers.\n\n            #### InfluxDB Cloud\n\n            - Doesn't use `shardGroupDurationsSeconds`.\n\n            #### InfluxDB OSS\n\n            - Default value depends on the [bucket retention period](https://docs.influxdata.com/influxdb/v2.3/reference/internals/shards/#shard-group-duration).\n\n            #### Related guides\n\n            - InfluxDB [shards and shard groups](https://docs.influxdata.com/influxdb/v2.3/reference/internals/shards/)\n      required:\n        - everySeconds\n    RetentionRule:\n      type: object\n      properties:\n        type:\n          type: string\n          default: expire\n          enum:\n            - expire\n        everySeconds:\n          type: integer\n          format: int64\n          description: |\n            The duration in seconds for how long data will be kept in the database.\n            The default duration is 2592000 (30 days).\n            0 represents infinite retention.\n          example: 86400\n          default: 2592000\n          minimum: 0\n        shardGroupDurationSeconds:\n          type: integer\n          format: int64\n          description: |\n            The shard group duration.\n            The duration or interval (in seconds) that each shard group covers.\n\n            #### InfluxDB Cloud\n\n            - Does not use `shardGroupDurationsSeconds`.\n\n            #### InfluxDB OSS\n\n            - Default value depends on the\n            [bucket retention period](https://docs.influxdata.com/influxdb/v2.3/v2.3/reference/internals/shards/#shard-group-duration).\n      required:\n        - everySeconds\n    Link:\n      type: string\n      format: uri\n      readOnly: true\n      description: URI of resource.\n    Links:\n      type: object\n      description: |\n        URI pointers for additional paged results.\n      properties:\n        next:\n          $ref: '#/components/schemas/Link'\n        self:\n          $ref: '#/components/schemas/Link'\n        prev:\n          $ref: '#/components/schemas/Link'\n      required:\n        - self\n    Logs:\n      type: object\n      properties:\n        events:\n          readOnly: true\n          type: array\n          items:\n            $ref: '#/components/schemas/LogEvent'\n    LogEvent:\n      type: object\n      properties:\n        time:\n          readOnly: true\n          description: 'The time ([RFC3339Nano date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339nano-timestamp)) that the event occurred.'\n          type: string\n          format: date-time\n          example: '2006-01-02T15:04:05.999999999Z07:00'\n        message:\n          readOnly: true\n          description: A description of the event that occurred.\n          type: string\n          example: Halt and catch fire\n        runID:\n          readOnly: true\n          description: The ID of the task run that generated the event.\n          type: string\n    Organization:\n      properties:\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: /api/v2/orgs/1\n            members: /api/v2/orgs/1/members\n            owners: /api/v2/orgs/1/owners\n            labels: /api/v2/orgs/1/labels\n            secrets: /api/v2/orgs/1/secrets\n            buckets: /api/v2/buckets?org=myorg\n            tasks: /api/v2/tasks?org=myorg\n            dashboards: /api/v2/dashboards?org=myorg\n          properties:\n            self:\n              $ref: '#/components/schemas/Link'\n            members:\n              $ref: '#/components/schemas/Link'\n            owners:\n              $ref: '#/components/schemas/Link'\n            labels:\n              $ref: '#/components/schemas/Link'\n            secrets:\n              $ref: '#/components/schemas/Link'\n            buckets:\n              $ref: '#/components/schemas/Link'\n            tasks:\n              $ref: '#/components/schemas/Link'\n            dashboards:\n              $ref: '#/components/schemas/Link'\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        status:\n          description: If inactive the organization is inactive.\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n      required:\n        - name\n    Organizations:\n      type: object\n      properties:\n        links:\n          $ref: '#/components/schemas/Links'\n        orgs:\n          type: array\n          items:\n            $ref: '#/components/schemas/Organization'\n    PostOrganizationRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: |\n            The name of the organization.\n        description:\n          type: string\n          description: |\n            The description of the organization.\n      required:\n        - name\n    PatchOrganizationRequest:\n      type: object\n      description: |\n        An object that contains updated organization properties to apply.\n      properties:\n        name:\n          type: string\n          description: |\n            The name of the organization.\n        description:\n          type: string\n          description: |\n            The description of the organization.\n    TemplateApply:\n      type: object\n      properties:\n        dryRun:\n          type: boolean\n          description: |\n            Only applies a dry run of the templates passed in the request.\n\n            - Validates the template and generates a resource diff and summary.\n            - Doesn't install templates or make changes to the InfluxDB instance.\n        orgID:\n          type: string\n          description: |\n            Organization ID.\n            InfluxDB applies templates to this organization.\n            The organization owns all resources created by the template.\n\n            To find your organization, see how to\n            [view organizations](https://docs.influxdata.com/influxdb/v2.3/organizations/view-orgs/).\n        stackID:\n          type: string\n          description: |\n            ID of the stack to update.\n\n            To apply templates to an existing stack in the organization, use the `stackID` parameter.\n            If you apply templates without providing a stack ID,\n            InfluxDB initializes a new stack with all new resources.\n\n            To find a stack ID, use the InfluxDB [`/api/v2/stacks` API endpoint](#operation/ListStacks) to list stacks.\n\n            #### Related guides\n\n            - [Stacks](https://docs.influxdata.com/influxdb/v2.3/influxdb-templates/stacks/)\n            - [View stacks](https://docs.influxdata.com/influxdb/v2.3/influxdb-templates/stacks/view/)\n        template:\n          type: object\n          description: |\n            A template object to apply.\n            A template object has a `contents` property\n            with an array of InfluxDB resource configurations.\n\n            Pass `template` to apply only one template object.\n            If you use `template`, you can't use the `templates` parameter.\n            If you want to apply multiple template objects, use `templates` instead.\n          properties:\n            contentType:\n              type: string\n            sources:\n              type: array\n              items:\n                type: string\n            contents:\n              $ref: '#/components/schemas/Template'\n        templates:\n          type: array\n          description: |\n            A list of template objects to apply.\n            A template object has a `contents` property\n            with an array of InfluxDB resource configurations.\n\n            Use the `templates` parameter to apply multiple template objects.\n            If you use `templates`, you can't use the `template` parameter.\n          items:\n            type: object\n            properties:\n              contentType:\n                type: string\n              sources:\n                type: array\n                items:\n                  type: string\n              contents:\n                $ref: '#/components/schemas/Template'\n        envRefs:\n          type: object\n          description: |\n            An object with key-value pairs that map to **environment references** in templates.\n\n            Environment references in templates are `envRef` objects with an `envRef.key`\n            property.\n            To substitute a custom environment reference value when applying templates,\n            pass `envRefs` with the `envRef.key` and the value.\n\n            When you apply a template, InfluxDB replaces `envRef` objects in the template\n            with the values that you provide in the `envRefs` parameter.\n            For more examples, see how to [define environment references](https://docs.influxdata.com/influxdb/v2.3/influxdb-templates/use/#define-environment-references).\n\n            The following template fields may use environment references:\n\n              - `metadata.name`\n              - `spec.endpointName`\n              - `spec.associations.name`\n\n            For more information about including environment references in template fields, see how to\n            [include user-definable resource names](https://docs.influxdata.com/influxdb/v2.3/influxdb-templates/create/#include-user-definable-resource-names).\n          additionalProperties:\n            oneOf:\n              - type: string\n              - type: integer\n              - type: number\n              - type: boolean\n        secrets:\n          type: object\n          description: |\n            An object with key-value pairs that map to **secrets** in queries.\n\n            Queries may reference secrets stored in InfluxDB--for example,\n            the following Flux script retrieves `POSTGRES_USERNAME` and `POSTGRES_PASSWORD`\n            secrets and then uses them to connect to a PostgreSQL database:\n\n            ```js\n            import \"sql\"\n            import \"influxdata/influxdb/secrets\"\n\n            username = secrets.get(key: \"POSTGRES_USERNAME\")\n            password = secrets.get(key: \"POSTGRES_PASSWORD\")\n\n            sql.from(\n              driverName: \"postgres\",\n              dataSourceName: \"postgresql://${username}:${password}@localhost:5432\",\n              query: \"SELECT * FROM example_table\",\n            )\n            ```\n\n            To define secret values in your `/api/v2/templates/apply` request,\n            pass the `secrets` parameter with key-value pairs--for example:\n\n            ```json\n            {\n              ...\n              \"secrets\": {\n                \"POSTGRES_USERNAME\": \"pguser\",\n                \"POSTGRES_PASSWORD\": \"foo\"\n              }\n              ...\n            }\n            ```\n\n            InfluxDB stores the key-value pairs as secrets that you can access with `secrets.get()`.\n            Once stored, you can't view secret values in InfluxDB.\n\n            #### Related guides\n\n            - [How to pass secrets when installing a template](https://docs.influxdata.com/influxdb/v2.3/influxdb-templates/use/#pass-secrets-when-installing-a-template)\n          additionalProperties:\n            type: string\n        remotes:\n          type: array\n          description: |\n            A list of URLs for template files.\n\n            To apply a template manifest file located at a URL, pass `remotes`\n            with an array that contains the URL.\n          items:\n            type: object\n            properties:\n              url:\n                type: string\n              contentType:\n                type: string\n            required:\n              - url\n        actions:\n          type: array\n          description: |\n            A list of `action` objects.\n            Actions let you customize how InfluxDB applies templates in the request.\n\n            You can use the following actions to prevent creating or updating resources:\n\n            - A `skipKind` action skips template resources of a specified `kind`.\n            - A `skipResource` action skips template resources with a specified `metadata.name`\n              and `kind`.\n          items:\n            oneOf:\n              - type: object\n                properties:\n                  action:\n                    type: string\n                    enum:\n                      - skipKind\n                  properties:\n                    type: object\n                    properties:\n                      kind:\n                        $ref: '#/components/schemas/TemplateKind'\n                    required:\n                      - kind\n              - type: object\n                properties:\n                  action:\n                    type: string\n                    enum:\n                      - skipResource\n                  properties:\n                    type: object\n                    properties:\n                      kind:\n                        $ref: '#/components/schemas/TemplateKind'\n                      resourceTemplateName:\n                        type: string\n                    required:\n                      - kind\n                      - resourceTemplateName\n    TemplateKind:\n      type: string\n      enum:\n        - Bucket\n        - Check\n        - CheckDeadman\n        - CheckThreshold\n        - Dashboard\n        - Label\n        - NotificationEndpoint\n        - NotificationEndpointHTTP\n        - NotificationEndpointPagerDuty\n        - NotificationEndpointSlack\n        - NotificationRule\n        - Task\n        - Telegraf\n        - Variable\n    TemplateExportByID:\n      type: object\n      properties:\n        stackID:\n          type: string\n        orgIDs:\n          type: array\n          items:\n            type: object\n            properties:\n              orgID:\n                type: string\n              resourceFilters:\n                type: object\n                properties:\n                  byLabel:\n                    type: array\n                    items:\n                      type: string\n                  byResourceKind:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateKind'\n        resources:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n              kind:\n                $ref: '#/components/schemas/TemplateKind'\n              name:\n                type: string\n                description: 'if defined with id, name is used for resource exported by id. if defined independently, resources strictly matching name are exported'\n            required:\n              - id\n              - kind\n    TemplateExportByName:\n      type: object\n      properties:\n        stackID:\n          type: string\n        orgIDs:\n          type: array\n          items:\n            type: object\n            properties:\n              orgID:\n                type: string\n              resourceFilters:\n                type: object\n                properties:\n                  byLabel:\n                    type: array\n                    items:\n                      type: string\n                  byResourceKind:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateKind'\n        resources:\n          type: array\n          items:\n            type: object\n            properties:\n              kind:\n                $ref: '#/components/schemas/TemplateKind'\n              name:\n                type: string\n            required:\n              - name\n              - kind\n    Template:\n      type: array\n      items:\n        type: object\n        description: |\n          A template entry.\n          Defines an InfluxDB resource in a template.\n        properties:\n          apiVersion:\n            type: string\n            example: influxdata.com/v2alpha1\n          kind:\n            $ref: '#/components/schemas/TemplateKind'\n          metadata:\n            type: object\n            description: |\n              Metadata properties used for the resource when the template is applied.\n            properties:\n              name:\n                type: string\n          spec:\n            type: object\n            description: |\n              Configuration properties used for the resource when the template is applied.\n              Key-value pairs map to the specification for the resource.\n\n              The following code samples show `spec` configurations for template resources:\n\n              - A bucket:\n\n              ```json\n              { \"spec\": {\n                  \"name\": \"iot_center\",\n                  \"retentionRules\": [{\n                      \"everySeconds\": 2.592e+06,\n                      \"type\": \"expire\"\n                    }]\n                }\n              }\n              ```\n\n              - A variable:\n\n              ```json\n              { \"spec\": {\n                  \"language\": \"flux\",\n                  \"name\": \"Node_Service\",\n                  \"query\": \"import \\\"influxdata/influxdb/v1\\\"\\r\\nv1.tagValues(bucket: \\\"iot_center\\\",\n                      tag: \\\"service\\\")\",\n                  \"type\": \"query\"\n                }\n              }\n              ```\n    TemplateEnvReferences:\n      type: array\n      items:\n        type: object\n        properties:\n          resourceField:\n            type: string\n            description: Field the environment reference corresponds too\n          envRefKey:\n            type: string\n            description: Key identified as environment reference and is the key identified in the template\n          value:\n            description: Value provided to fulfill reference\n            nullable: true\n            oneOf:\n              - type: string\n              - type: integer\n              - type: number\n              - type: boolean\n          defaultValue:\n            description: Default value that will be provided for the reference when no value is provided\n            nullable: true\n            oneOf:\n              - type: string\n              - type: integer\n              - type: number\n              - type: boolean\n        required:\n          - resourceField\n          - envRefKey\n    TemplateSummary:\n      type: object\n      properties:\n        sources:\n          type: array\n          items:\n            type: string\n        stackID:\n          type: string\n        summary:\n          type: object\n          properties:\n            buckets:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    type: string\n                  orgID:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  templateMetaName:\n                    type: string\n                  name:\n                    type: string\n                  description:\n                    type: string\n                  retentionPeriod:\n                    type: integer\n                  labelAssociations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateSummaryLabel'\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n            checks:\n              type: array\n              items:\n                allOf:\n                  - $ref: '#/components/schemas/CheckDiscriminator'\n                  - type: object\n                    properties:\n                      kind:\n                        $ref: '#/components/schemas/TemplateKind'\n                      templateMetaName:\n                        type: string\n                      labelAssociations:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/TemplateSummaryLabel'\n                      envReferences:\n                        $ref: '#/components/schemas/TemplateEnvReferences'\n            dashboards:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    type: string\n                  orgID:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  templateMetaName:\n                    type: string\n                  name:\n                    type: string\n                  description:\n                    type: string\n                  labelAssociations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateSummaryLabel'\n                  charts:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateChart'\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n            labels:\n              type: array\n              items:\n                $ref: '#/components/schemas/TemplateSummaryLabel'\n            labelMappings:\n              type: array\n              items:\n                type: object\n                properties:\n                  status:\n                    type: string\n                  resourceTemplateMetaName:\n                    type: string\n                  resourceName:\n                    type: string\n                  resourceID:\n                    type: string\n                  resourceType:\n                    type: string\n                  labelTemplateMetaName:\n                    type: string\n                  labelName:\n                    type: string\n                  labelID:\n                    type: string\n            missingEnvRefs:\n              type: array\n              items:\n                type: string\n            missingSecrets:\n              type: array\n              items:\n                type: string\n            notificationEndpoints:\n              type: array\n              items:\n                allOf:\n                  - $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n                  - type: object\n                    properties:\n                      kind:\n                        $ref: '#/components/schemas/TemplateKind'\n                      templateMetaName:\n                        type: string\n                      labelAssociations:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/TemplateSummaryLabel'\n                      envReferences:\n                        $ref: '#/components/schemas/TemplateEnvReferences'\n            notificationRules:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  templateMetaName:\n                    type: string\n                  name:\n                    type: string\n                  description:\n                    type: string\n                  endpointTemplateMetaName:\n                    type: string\n                  endpointID:\n                    type: string\n                  endpointType:\n                    type: string\n                  every:\n                    type: string\n                  offset:\n                    type: string\n                  messageTemplate:\n                    type: string\n                  status:\n                    type: string\n                  statusRules:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        currentLevel:\n                          type: string\n                        previousLevel:\n                          type: string\n                  tagRules:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        key:\n                          type: string\n                        value:\n                          type: string\n                        operator:\n                          type: string\n                  labelAssociations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateSummaryLabel'\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n            tasks:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  templateMetaName:\n                    type: string\n                  id:\n                    type: string\n                  name:\n                    type: string\n                  cron:\n                    type: string\n                  description:\n                    type: string\n                  every:\n                    type: string\n                  offset:\n                    type: string\n                  query:\n                    type: string\n                  status:\n                    type: string\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n            telegrafConfigs:\n              type: array\n              items:\n                allOf:\n                  - $ref: '#/components/schemas/TelegrafRequest'\n                  - type: object\n                    properties:\n                      kind:\n                        $ref: '#/components/schemas/TemplateKind'\n                      templateMetaName:\n                        type: string\n                      labelAssociations:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/TemplateSummaryLabel'\n                      envReferences:\n                        $ref: '#/components/schemas/TemplateEnvReferences'\n            variables:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  templateMetaName:\n                    type: string\n                  id:\n                    type: string\n                  orgID:\n                    type: string\n                  name:\n                    type: string\n                  description:\n                    type: string\n                  arguments:\n                    $ref: '#/components/schemas/VariableProperties'\n                  labelAssociations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateSummaryLabel'\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n        diff:\n          type: object\n          properties:\n            buckets:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      retentionRules:\n                        $ref: '#/components/schemas/RetentionRules'\n                  old:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      retentionRules:\n                        $ref: '#/components/schemas/RetentionRules'\n            checks:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    $ref: '#/components/schemas/CheckDiscriminator'\n                  old:\n                    $ref: '#/components/schemas/CheckDiscriminator'\n            dashboards:\n              type: array\n              items:\n                type: object\n                properties:\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  templateMetaName:\n                    type: string\n                  new:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      charts:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/TemplateChart'\n                  old:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      charts:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/TemplateChart'\n            labels:\n              type: array\n              items:\n                type: object\n                properties:\n                  stateStatus:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      color:\n                        type: string\n                      description:\n                        type: string\n                  old:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      color:\n                        type: string\n                      description:\n                        type: string\n            labelMappings:\n              type: array\n              items:\n                type: object\n                properties:\n                  status:\n                    type: string\n                  resourceType:\n                    type: string\n                  resourceID:\n                    type: string\n                  resourceTemplateMetaName:\n                    type: string\n                  resourceName:\n                    type: string\n                  labelID:\n                    type: string\n                  labelTemplateMetaName:\n                    type: string\n                  labelName:\n                    type: string\n            notificationEndpoints:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n                  old:\n                    $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n            notificationRules:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      endpointName:\n                        type: string\n                      endpointID:\n                        type: string\n                      endpointType:\n                        type: string\n                      every:\n                        type: string\n                      offset:\n                        type: string\n                      messageTemplate:\n                        type: string\n                      status:\n                        type: string\n                      statusRules:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            currentLevel:\n                              type: string\n                            previousLevel:\n                              type: string\n                      tagRules:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            key:\n                              type: string\n                            value:\n                              type: string\n                            operator:\n                              type: string\n                  old:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      endpointName:\n                        type: string\n                      endpointID:\n                        type: string\n                      endpointType:\n                        type: string\n                      every:\n                        type: string\n                      offset:\n                        type: string\n                      messageTemplate:\n                        type: string\n                      status:\n                        type: string\n                      statusRules:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            currentLevel:\n                              type: string\n                            previousLevel:\n                              type: string\n                      tagRules:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            key:\n                              type: string\n                            value:\n                              type: string\n                            operator:\n                              type: string\n            tasks:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      cron:\n                        type: string\n                      description:\n                        type: string\n                      every:\n                        type: string\n                      offset:\n                        type: string\n                      query:\n                        type: string\n                      status:\n                        type: string\n                  old:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      cron:\n                        type: string\n                      description:\n                        type: string\n                      every:\n                        type: string\n                      offset:\n                        type: string\n                      query:\n                        type: string\n                      status:\n                        type: string\n            telegrafConfigs:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    $ref: '#/components/schemas/TelegrafRequest'\n                  old:\n                    $ref: '#/components/schemas/TelegrafRequest'\n            variables:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      args:\n                        $ref: '#/components/schemas/VariableProperties'\n                  old:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      args:\n                        $ref: '#/components/schemas/VariableProperties'\n        errors:\n          type: array\n          items:\n            type: object\n            properties:\n              kind:\n                $ref: '#/components/schemas/TemplateKind'\n              reason:\n                type: string\n              fields:\n                type: array\n                items:\n                  type: string\n              indexes:\n                type: array\n                items:\n                  type: integer\n    TemplateSummaryLabel:\n      type: object\n      properties:\n        id:\n          type: string\n        orgID:\n          type: string\n        kind:\n          $ref: '#/components/schemas/TemplateKind'\n        templateMetaName:\n          type: string\n        name:\n          type: string\n        properties:\n          type: object\n          properties:\n            color:\n              type: string\n            description:\n              type: string\n        envReferences:\n          $ref: '#/components/schemas/TemplateEnvReferences'\n    TemplateChart:\n      type: object\n      properties:\n        xPos:\n          type: integer\n        yPos:\n          type: integer\n        height:\n          type: integer\n        width:\n          type: integer\n        properties:\n          $ref: '#/components/schemas/ViewProperties'\n    Stack:\n      type: object\n      properties:\n        id:\n          type: string\n        orgID:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        events:\n          type: array\n          items:\n            type: object\n            properties:\n              eventType:\n                type: string\n              name:\n                type: string\n              description:\n                type: string\n              sources:\n                type: array\n                items:\n                  type: string\n              resources:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    apiVersion:\n                      type: string\n                    resourceID:\n                      type: string\n                    kind:\n                      $ref: '#/components/schemas/TemplateKind'\n                    templateMetaName:\n                      type: string\n                    associations:\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          kind:\n                            $ref: '#/components/schemas/TemplateKind'\n                          metaName:\n                            type: string\n                    links:\n                      type: object\n                      properties:\n                        self:\n                          type: string\n              urls:\n                type: array\n                items:\n                  type: string\n              updatedAt:\n                type: string\n                format: date-time\n                readOnly: true\n    Runs:\n      type: object\n      properties:\n        links:\n          $ref: '#/components/schemas/Links'\n        runs:\n          type: array\n          items:\n            $ref: '#/components/schemas/Run'\n    Run:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        taskID:\n          readOnly: true\n          type: string\n        status:\n          readOnly: true\n          type: string\n          enum:\n            - scheduled\n            - started\n            - failed\n            - success\n            - canceled\n        scheduledFor:\n          description: 'The time [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp) used for the run''s `now` option.'\n          type: string\n          format: date-time\n        log:\n          description: An array of logs associated with the run.\n          type: array\n          readOnly: true\n          items:\n            $ref: '#/components/schemas/LogEvent'\n        flux:\n          description: Flux used for the task\n          type: string\n          readOnly: true\n        startedAt:\n          readOnly: true\n          description: 'The time ([RFC3339Nano date/time format](https://go.dev/src/time/format.go)) the run started executing.'\n          type: string\n          format: date-time\n          example: '2006-01-02T15:04:05.999999999Z07:00'\n        finishedAt:\n          readOnly: true\n          description: 'The time ([RFC3339Nano date/time format](https://go.dev/src/time/format.go)) the run finished executing.'\n          type: string\n          format: date-time\n          example: '2006-01-02T15:04:05.999999999Z07:00'\n        requestedAt:\n          readOnly: true\n          description: 'The time ([RFC3339Nano date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339nano-timestamp)) the run was manually requested.'\n          type: string\n          format: date-time\n          example: '2006-01-02T15:04:05.999999999Z07:00'\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: /api/v2/tasks/1/runs/1\n            task: /api/v2/tasks/1\n            retry: /api/v2/tasks/1/runs/1/retry\n          properties:\n            self:\n              type: string\n              format: uri\n            task:\n              type: string\n              format: uri\n            retry:\n              type: string\n              format: uri\n    RunManually:\n      properties:\n        scheduledFor:\n          nullable: true\n          description: |\n            The time [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp)\n            used for the run's `now` option.\n            Default is the server _now_ time.\n          type: string\n          format: date-time\n    TaskStatusType:\n      type: string\n      enum:\n        - active\n        - inactive\n      description: |\n        `inactive` cancels scheduled runs and prevents manual runs of the task.\n    UserResponse:\n      properties:\n        id:\n          readOnly: true\n          type: string\n          description: |\n            The user ID.\n        name:\n          type: string\n          description: |\n            The user name.\n        status:\n          description: |\n            The status of a user.\n            An inactive user can't read or write resources.\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: /api/v2/users/1\n          properties:\n            self:\n              type: string\n              format: uri\n      required:\n        - name\n    Flags:\n      type: object\n      additionalProperties: true\n    ResourceMember:\n      allOf:\n        - $ref: '#/components/schemas/UserResponse'\n        - type: object\n          properties:\n            role:\n              type: string\n              default: member\n              enum:\n                - member\n    ResourceMembers:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceMember'\n    ResourceOwner:\n      allOf:\n        - $ref: '#/components/schemas/UserResponse'\n        - type: object\n          properties:\n            role:\n              type: string\n              default: owner\n              enum:\n                - owner\n    ResourceOwners:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceOwner'\n    FluxSuggestions:\n      type: object\n      properties:\n        funcs:\n          type: array\n          items:\n            $ref: '#/components/schemas/FluxSuggestion'\n    FluxSuggestion:\n      type: object\n      properties:\n        name:\n          type: string\n        params:\n          type: object\n          additionalProperties:\n            type: string\n    Routes:\n      properties:\n        authorizations:\n          type: string\n          format: uri\n        buckets:\n          type: string\n          format: uri\n        dashboards:\n          type: string\n          format: uri\n        external:\n          type: object\n          properties:\n            statusFeed:\n              type: string\n              format: uri\n        variables:\n          type: string\n          format: uri\n        me:\n          type: string\n          format: uri\n        flags:\n          type: string\n          format: uri\n        orgs:\n          type: string\n          format: uri\n        query:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n            ast:\n              type: string\n              format: uri\n            analyze:\n              type: string\n              format: uri\n            suggestions:\n              type: string\n              format: uri\n        setup:\n          type: string\n          format: uri\n        signin:\n          type: string\n          format: uri\n        signout:\n          type: string\n          format: uri\n        sources:\n          type: string\n          format: uri\n        system:\n          type: object\n          properties:\n            metrics:\n              type: string\n              format: uri\n            debug:\n              type: string\n              format: uri\n            health:\n              type: string\n              format: uri\n        tasks:\n          type: string\n          format: uri\n        telegrafs:\n          type: string\n          format: uri\n        users:\n          type: string\n          format: uri\n        write:\n          type: string\n          format: uri\n    Error:\n      properties:\n        code:\n          description: code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - unprocessable entity\n            - empty value\n            - unavailable\n            - forbidden\n            - too many requests\n            - unauthorized\n            - method not allowed\n            - request too large\n            - unsupported media type\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: Describes the logical code operation when the error occurred. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: Stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n      required:\n        - code\n    LineProtocolError:\n      properties:\n        code:\n          description: Code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - empty value\n            - unavailable\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: Describes the logical code operation when the error occurred. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: Stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n        line:\n          readOnly: true\n          description: First line in the request body that contains malformed data.\n          type: integer\n          format: int32\n      required:\n        - code\n    LineProtocolLengthError:\n      properties:\n        code:\n          description: Code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - invalid\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n      required:\n        - code\n        - message\n    Field:\n      type: object\n      properties:\n        value:\n          description: value is the value of the field.  Meaning of the value is implied by the `type` key\n          type: string\n        type:\n          description: '`type` describes the field type. `func` is a function. `field` is a field reference.'\n          type: string\n          enum:\n            - func\n            - field\n            - integer\n            - number\n            - regex\n            - wildcard\n        alias:\n          description: Alias overrides the field name in the returned response.  Applies only if type is `func`\n          type: string\n        args:\n          description: Args are the arguments to the function\n          type: array\n          items:\n            $ref: '#/components/schemas/Field'\n    BuilderConfig:\n      type: object\n      properties:\n        buckets:\n          type: array\n          items:\n            type: string\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/BuilderTagsType'\n        functions:\n          type: array\n          items:\n            $ref: '#/components/schemas/BuilderFunctionsType'\n        aggregateWindow:\n          type: object\n          properties:\n            period:\n              type: string\n            fillValues:\n              type: boolean\n    BuilderTagsType:\n      type: object\n      properties:\n        key:\n          type: string\n        values:\n          type: array\n          items:\n            type: string\n        aggregateFunctionType:\n          $ref: '#/components/schemas/BuilderAggregateFunctionType'\n    BuilderAggregateFunctionType:\n      type: string\n      enum:\n        - filter\n        - group\n    BuilderFunctionsType:\n      type: object\n      properties:\n        name:\n          type: string\n    DashboardQuery:\n      type: object\n      properties:\n        text:\n          type: string\n          description: The text of the Flux query.\n        editMode:\n          $ref: '#/components/schemas/QueryEditMode'\n        name:\n          type: string\n        builderConfig:\n          $ref: '#/components/schemas/BuilderConfig'\n    QueryEditMode:\n      type: string\n      enum:\n        - builder\n        - advanced\n    Axis:\n      type: object\n      description: Axis used in a visualization.\n      properties:\n        bounds:\n          type: array\n          minItems: 0\n          maxItems: 2\n          description: 'The extents of the axis in the form [lower, upper]. Clients determine whether bounds are inclusive or exclusive of their limits.'\n          items:\n            type: string\n        label:\n          description: Description of the axis.\n          type: string\n        prefix:\n          description: Label prefix for formatting axis values.\n          type: string\n        suffix:\n          description: Label suffix for formatting axis values.\n          type: string\n        base:\n          description: Radix for formatting axis values.\n          type: string\n          enum:\n            - ''\n            - '2'\n            - '10'\n        scale:\n          $ref: '#/components/schemas/AxisScale'\n    AxisScale:\n      description: 'Scale is the axis formatting scale. Supported: \"log\", \"linear\"'\n      type: string\n      enum:\n        - log\n        - linear\n    DashboardColor:\n      type: object\n      description: Defines an encoding of data value into color space.\n      required:\n        - id\n        - type\n        - hex\n        - name\n        - value\n      properties:\n        id:\n          description: The unique ID of the view color.\n          type: string\n        type:\n          description: Type is how the color is used.\n          type: string\n          enum:\n            - min\n            - max\n            - threshold\n            - scale\n            - text\n            - background\n        hex:\n          description: The hex number of the color\n          type: string\n          maxLength: 7\n          minLength: 7\n        name:\n          description: The user-facing name of the hex color.\n          type: string\n        value:\n          description: The data value mapped to this color.\n          type: number\n          format: float\n    RenamableField:\n      description: Describes a field that can be renamed and made visible or invisible.\n      type: object\n      properties:\n        internalName:\n          description: The calculated name of a field.\n          readOnly: true\n          type: string\n        displayName:\n          description: The name that a field is renamed to by the user.\n          type: string\n        visible:\n          description: Indicates whether this field should be visible on the table.\n          type: boolean\n    XYViewProperties:\n      type: object\n      required:\n        - type\n        - geom\n        - queries\n        - shape\n        - axes\n        - colors\n        - note\n        - showNoteWhenEmpty\n        - position\n      properties:\n        adaptiveZoomHide:\n          type: boolean\n        timeFormat:\n          type: string\n        type:\n          type: string\n          enum:\n            - xy\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        colorMapping:\n          description: An object that contains information about the color mapping\n          $ref: '#/components/schemas/ColorMapping'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        axes:\n          $ref: '#/components/schemas/Axes'\n        staticLegend:\n          $ref: '#/components/schemas/StaticLegend'\n        xColumn:\n          type: string\n        generateXAxisTicks:\n          type: array\n          items:\n            type: string\n        xTotalTicks:\n          type: integer\n        xTickStart:\n          type: number\n          format: float\n        xTickStep:\n          type: number\n          format: float\n        yColumn:\n          type: string\n        generateYAxisTicks:\n          type: array\n          items:\n            type: string\n        yTotalTicks:\n          type: integer\n        yTickStart:\n          type: number\n          format: float\n        yTickStep:\n          type: number\n          format: float\n        shadeBelow:\n          type: boolean\n        hoverDimension:\n          type: string\n          enum:\n            - auto\n            - x\n            - 'y'\n            - xy\n        position:\n          type: string\n          enum:\n            - overlaid\n            - stacked\n        geom:\n          $ref: '#/components/schemas/XYGeom'\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    XYGeom:\n      type: string\n      enum:\n        - line\n        - step\n        - stacked\n        - bar\n        - monotoneX\n        - stepBefore\n        - stepAfter\n    BandViewProperties:\n      type: object\n      required:\n        - type\n        - geom\n        - queries\n        - shape\n        - axes\n        - colors\n        - note\n        - showNoteWhenEmpty\n      properties:\n        adaptiveZoomHide:\n          type: boolean\n        timeFormat:\n          type: string\n        type:\n          type: string\n          enum:\n            - band\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        axes:\n          $ref: '#/components/schemas/Axes'\n        staticLegend:\n          $ref: '#/components/schemas/StaticLegend'\n        xColumn:\n          type: string\n        generateXAxisTicks:\n          type: array\n          items:\n            type: string\n        xTotalTicks:\n          type: integer\n        xTickStart:\n          type: number\n          format: float\n        xTickStep:\n          type: number\n          format: float\n        yColumn:\n          type: string\n        generateYAxisTicks:\n          type: array\n          items:\n            type: string\n        yTotalTicks:\n          type: integer\n        yTickStart:\n          type: number\n          format: float\n        yTickStep:\n          type: number\n          format: float\n        upperColumn:\n          type: string\n        mainColumn:\n          type: string\n        lowerColumn:\n          type: string\n        hoverDimension:\n          type: string\n          enum:\n            - auto\n            - x\n            - 'y'\n            - xy\n        geom:\n          $ref: '#/components/schemas/XYGeom'\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    LinePlusSingleStatProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - shape\n        - axes\n        - colors\n        - note\n        - showNoteWhenEmpty\n        - prefix\n        - suffix\n        - decimalPlaces\n        - position\n      properties:\n        adaptiveZoomHide:\n          type: boolean\n        timeFormat:\n          type: string\n        type:\n          type: string\n          enum:\n            - line-plus-single-stat\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        axes:\n          $ref: '#/components/schemas/Axes'\n        staticLegend:\n          $ref: '#/components/schemas/StaticLegend'\n        xColumn:\n          type: string\n        generateXAxisTicks:\n          type: array\n          items:\n            type: string\n        xTotalTicks:\n          type: integer\n        xTickStart:\n          type: number\n          format: float\n        xTickStep:\n          type: number\n          format: float\n        yColumn:\n          type: string\n        generateYAxisTicks:\n          type: array\n          items:\n            type: string\n        yTotalTicks:\n          type: integer\n        yTickStart:\n          type: number\n          format: float\n        yTickStep:\n          type: number\n          format: float\n        shadeBelow:\n          type: boolean\n        hoverDimension:\n          type: string\n          enum:\n            - auto\n            - x\n            - 'y'\n            - xy\n        position:\n          type: string\n          enum:\n            - overlaid\n            - stacked\n        prefix:\n          type: string\n        suffix:\n          type: string\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    MosaicViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - xColumn\n        - ySeriesColumns\n        - fillColumns\n        - xDomain\n        - yDomain\n        - xAxisLabel\n        - yAxisLabel\n        - xPrefix\n        - yPrefix\n        - xSuffix\n        - ySuffix\n      properties:\n        timeFormat:\n          type: string\n        type:\n          type: string\n          enum:\n            - mosaic\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            type: string\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        xColumn:\n          type: string\n        generateXAxisTicks:\n          type: array\n          items:\n            type: string\n        xTotalTicks:\n          type: integer\n        xTickStart:\n          type: number\n          format: float\n        xTickStep:\n          type: number\n          format: float\n        yLabelColumnSeparator:\n          type: string\n        yLabelColumns:\n          type: array\n          items:\n            type: string\n        ySeriesColumns:\n          type: array\n          items:\n            type: string\n        fillColumns:\n          type: array\n          items:\n            type: string\n        xDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        yDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        xAxisLabel:\n          type: string\n        yAxisLabel:\n          type: string\n        xPrefix:\n          type: string\n        xSuffix:\n          type: string\n        yPrefix:\n          type: string\n        ySuffix:\n          type: string\n        hoverDimension:\n          type: string\n          enum:\n            - auto\n            - x\n            - 'y'\n            - xy\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    ScatterViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - xColumn\n        - yColumn\n        - fillColumns\n        - symbolColumns\n        - xDomain\n        - yDomain\n        - xAxisLabel\n        - yAxisLabel\n        - xPrefix\n        - yPrefix\n        - xSuffix\n        - ySuffix\n      properties:\n        adaptiveZoomHide:\n          type: boolean\n        timeFormat:\n          type: string\n        type:\n          type: string\n          enum:\n            - scatter\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            type: string\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        xColumn:\n          type: string\n        generateXAxisTicks:\n          type: array\n          items:\n            type: string\n        xTotalTicks:\n          type: integer\n        xTickStart:\n          type: number\n          format: float\n        xTickStep:\n          type: number\n          format: float\n        yColumn:\n          type: string\n        generateYAxisTicks:\n          type: array\n          items:\n            type: string\n        yTotalTicks:\n          type: integer\n        yTickStart:\n          type: number\n          format: float\n        yTickStep:\n          type: number\n          format: float\n        fillColumns:\n          type: array\n          items:\n            type: string\n        symbolColumns:\n          type: array\n          items:\n            type: string\n        xDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        yDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        xAxisLabel:\n          type: string\n        yAxisLabel:\n          type: string\n        xPrefix:\n          type: string\n        xSuffix:\n          type: string\n        yPrefix:\n          type: string\n        ySuffix:\n          type: string\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    HeatmapViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - xColumn\n        - yColumn\n        - xDomain\n        - yDomain\n        - xAxisLabel\n        - yAxisLabel\n        - xPrefix\n        - yPrefix\n        - xSuffix\n        - ySuffix\n        - binSize\n      properties:\n        adaptiveZoomHide:\n          type: boolean\n        timeFormat:\n          type: string\n        type:\n          type: string\n          enum:\n            - heatmap\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            type: string\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        xColumn:\n          type: string\n        generateXAxisTicks:\n          type: array\n          items:\n            type: string\n        xTotalTicks:\n          type: integer\n        xTickStart:\n          type: number\n          format: float\n        xTickStep:\n          type: number\n          format: float\n        yColumn:\n          type: string\n        generateYAxisTicks:\n          type: array\n          items:\n            type: string\n        yTotalTicks:\n          type: integer\n        yTickStart:\n          type: number\n          format: float\n        yTickStep:\n          type: number\n          format: float\n        xDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        yDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        xAxisLabel:\n          type: string\n        yAxisLabel:\n          type: string\n        xPrefix:\n          type: string\n        xSuffix:\n          type: string\n        yPrefix:\n          type: string\n        ySuffix:\n          type: string\n        binSize:\n          type: number\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    SingleStatViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - prefix\n        - tickPrefix\n        - suffix\n        - tickSuffix\n        - decimalPlaces\n      properties:\n        type:\n          type: string\n          enum:\n            - single-stat\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        prefix:\n          type: string\n        tickPrefix:\n          type: string\n        suffix:\n          type: string\n        tickSuffix:\n          type: string\n        staticLegend:\n          $ref: '#/components/schemas/StaticLegend'\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n    HistogramViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - xColumn\n        - fillColumns\n        - xDomain\n        - xAxisLabel\n        - position\n        - binCount\n      properties:\n        type:\n          type: string\n          enum:\n            - histogram\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        xColumn:\n          type: string\n        fillColumns:\n          type: array\n          items:\n            type: string\n        xDomain:\n          type: array\n          items:\n            type: number\n            format: float\n        xAxisLabel:\n          type: string\n        position:\n          type: string\n          enum:\n            - overlaid\n            - stacked\n        binCount:\n          type: integer\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    GaugeViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - prefix\n        - tickPrefix\n        - suffix\n        - tickSuffix\n        - decimalPlaces\n      properties:\n        type:\n          type: string\n          enum:\n            - gauge\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        prefix:\n          type: string\n        tickPrefix:\n          type: string\n        suffix:\n          type: string\n        tickSuffix:\n          type: string\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n    TableViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - tableOptions\n        - fieldOptions\n        - timeFormat\n        - decimalPlaces\n      properties:\n        type:\n          type: string\n          enum:\n            - table\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        tableOptions:\n          type: object\n          properties:\n            verticalTimeAxis:\n              description: verticalTimeAxis describes the orientation of the table by indicating whether the time axis will be displayed vertically\n              type: boolean\n            sortBy:\n              $ref: '#/components/schemas/RenamableField'\n            wrapping:\n              description: Wrapping describes the text wrapping style to be used in table views\n              type: string\n              enum:\n                - truncate\n                - wrap\n                - single-line\n            fixFirstColumn:\n              description: fixFirstColumn indicates whether the first column of the table should be locked\n              type: boolean\n        fieldOptions:\n          description: fieldOptions represent the fields retrieved by the query with customization options\n          type: array\n          items:\n            $ref: '#/components/schemas/RenamableField'\n        timeFormat:\n          description: timeFormat describes the display format for time values according to moment.js date formatting\n          type: string\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n    SimpleTableViewProperties:\n      type: object\n      required:\n        - type\n        - showAll\n        - queries\n        - shape\n        - note\n        - showNoteWhenEmpty\n      properties:\n        type:\n          type: string\n          enum:\n            - simple-table\n        showAll:\n          type: boolean\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n    MarkdownViewProperties:\n      type: object\n      required:\n        - type\n        - shape\n        - note\n      properties:\n        type:\n          type: string\n          enum:\n            - markdown\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n    CheckViewProperties:\n      type: object\n      required:\n        - type\n        - shape\n        - checkID\n        - queries\n        - colors\n      properties:\n        adaptiveZoomHide:\n          type: boolean\n        type:\n          type: string\n          enum:\n            - check\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        checkID:\n          type: string\n        check:\n          $ref: '#/components/schemas/Check'\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    GeoViewLayer:\n      type: object\n      oneOf:\n        - $ref: '#/components/schemas/GeoCircleViewLayer'\n        - $ref: '#/components/schemas/GeoHeatMapViewLayer'\n        - $ref: '#/components/schemas/GeoPointMapViewLayer'\n        - $ref: '#/components/schemas/GeoTrackMapViewLayer'\n    GeoViewLayerProperties:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n          enum:\n            - heatmap\n            - circleMap\n            - pointMap\n            - trackMap\n    GeoCircleViewLayer:\n      allOf:\n        - $ref: '#/components/schemas/GeoViewLayerProperties'\n        - type: object\n          required:\n            - radiusField\n            - radiusDimension\n            - colorField\n            - colorDimension\n            - colors\n          properties:\n            radiusField:\n              type: string\n              description: Radius field\n            radiusDimension:\n              $ref: '#/components/schemas/Axis'\n            colorField:\n              type: string\n              description: Circle color field\n            colorDimension:\n              $ref: '#/components/schemas/Axis'\n            colors:\n              description: Colors define color encoding of data into a visualization\n              type: array\n              items:\n                $ref: '#/components/schemas/DashboardColor'\n            radius:\n              description: Maximum radius size in pixels\n              type: integer\n            interpolateColors:\n              description: Interpolate circle color based on displayed value\n              type: boolean\n    GeoPointMapViewLayer:\n      allOf:\n        - $ref: '#/components/schemas/GeoViewLayerProperties'\n        - type: object\n          required:\n            - colorField\n            - colorDimension\n            - colors\n          properties:\n            colorField:\n              type: string\n              description: Marker color field\n            colorDimension:\n              $ref: '#/components/schemas/Axis'\n            colors:\n              description: Colors define color encoding of data into a visualization\n              type: array\n              items:\n                $ref: '#/components/schemas/DashboardColor'\n            isClustered:\n              description: Cluster close markers together\n              type: boolean\n            tooltipColumns:\n              description: An array for which columns to display in tooltip\n              type: array\n              items:\n                type: string\n    GeoTrackMapViewLayer:\n      allOf:\n        - $ref: '#/components/schemas/GeoViewLayerProperties'\n        - type: object\n          required:\n            - trackWidth\n            - speed\n            - randomColors\n            - trackPointVisualization\n      properties:\n        trackWidth:\n          description: Width of the track\n          type: integer\n        speed:\n          description: Speed of the track animation\n          type: integer\n        randomColors:\n          description: Assign different colors to different tracks\n          type: boolean\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n    GeoHeatMapViewLayer:\n      allOf:\n        - $ref: '#/components/schemas/GeoViewLayerProperties'\n        - type: object\n          required:\n            - intensityField\n            - intensityDimension\n            - radius\n            - blur\n            - colors\n          properties:\n            intensityField:\n              type: string\n              description: Intensity field\n            intensityDimension:\n              $ref: '#/components/schemas/Axis'\n            radius:\n              description: Radius size in pixels\n              type: integer\n            blur:\n              description: Blur for heatmap points\n              type: integer\n            colors:\n              description: Colors define color encoding of data into a visualization\n              type: array\n              items:\n                $ref: '#/components/schemas/DashboardColor'\n    GeoViewProperties:\n      type: object\n      required:\n        - type\n        - shape\n        - queries\n        - note\n        - showNoteWhenEmpty\n        - center\n        - zoom\n        - allowPanAndZoom\n        - detectCoordinateFields\n        - layers\n      properties:\n        type:\n          type: string\n          enum:\n            - geo\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        center:\n          description: Coordinates of the center of the map\n          type: object\n          required:\n            - lat\n            - lon\n          properties:\n            lat:\n              description: Latitude of the center of the map\n              type: number\n              format: double\n            lon:\n              description: Longitude of the center of the map\n              type: number\n              format: double\n        zoom:\n          description: Zoom level used for initial display of the map\n          type: number\n          format: double\n          minimum: 1\n          maximum: 28\n        allowPanAndZoom:\n          description: 'If true, map zoom and pan controls are enabled on the dashboard view'\n          type: boolean\n          default: true\n        detectCoordinateFields:\n          description: 'If true, search results get automatically regroupped so that lon,lat and value are treated as columns'\n          type: boolean\n          default: true\n        useS2CellID:\n          description: 'If true, S2 column is used to calculate lat/lon'\n          type: boolean\n        s2Column:\n          description: String to define the column\n          type: string\n        latLonColumns:\n          $ref: '#/components/schemas/LatLonColumns'\n        mapStyle:\n          description: 'Define map type - regular, satellite etc.'\n          type: string\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        layers:\n          description: List of individual layers shown in the map\n          type: array\n          items:\n            $ref: '#/components/schemas/GeoViewLayer'\n    LatLonColumns:\n      description: Object type to define lat/lon columns\n      type: object\n      required:\n        - lat\n        - lon\n      properties:\n        lat:\n          $ref: '#/components/schemas/LatLonColumn'\n        lon:\n          $ref: '#/components/schemas/LatLonColumn'\n    LatLonColumn:\n      description: Object type for key and column definitions\n      type: object\n      required:\n        - key\n        - column\n      properties:\n        key:\n          description: Key to determine whether the column is tag/field\n          type: string\n        column:\n          description: Column to look up Lat/Lon\n          type: string\n    Axes:\n      description: The viewport for a View's visualizations\n      type: object\n      required:\n        - x\n        - 'y'\n      properties:\n        x:\n          $ref: '#/components/schemas/Axis'\n        'y':\n          $ref: '#/components/schemas/Axis'\n    StaticLegend:\n      description: StaticLegend represents the options specific to the static legend\n      type: object\n      properties:\n        colorizeRows:\n          type: boolean\n        heightRatio:\n          type: number\n          format: float\n        show:\n          type: boolean\n        opacity:\n          type: number\n          format: float\n        orientationThreshold:\n          type: integer\n        valueAxis:\n          type: string\n        widthRatio:\n          type: number\n          format: float\n    DecimalPlaces:\n      description: 'Indicates whether decimal places should be enforced, and how many digits it should show.'\n      type: object\n      properties:\n        isEnforced:\n          description: Indicates whether decimal point setting should be enforced\n          type: boolean\n        digits:\n          description: The number of digits after decimal to display\n          type: integer\n          format: int32\n    ConstantVariableProperties:\n      properties:\n        type:\n          type: string\n          enum:\n            - constant\n        values:\n          type: array\n          items:\n            type: string\n    MapVariableProperties:\n      properties:\n        type:\n          type: string\n          enum:\n            - map\n        values:\n          type: object\n          additionalProperties:\n            type: string\n    QueryVariableProperties:\n      properties:\n        type:\n          type: string\n          enum:\n            - query\n        values:\n          type: object\n          properties:\n            query:\n              type: string\n            language:\n              type: string\n    VariableProperties:\n      type: object\n      oneOf:\n        - $ref: '#/components/schemas/QueryVariableProperties'\n        - $ref: '#/components/schemas/ConstantVariableProperties'\n        - $ref: '#/components/schemas/MapVariableProperties'\n    ViewProperties:\n      oneOf:\n        - $ref: '#/components/schemas/LinePlusSingleStatProperties'\n        - $ref: '#/components/schemas/XYViewProperties'\n        - $ref: '#/components/schemas/SingleStatViewProperties'\n        - $ref: '#/components/schemas/HistogramViewProperties'\n        - $ref: '#/components/schemas/GaugeViewProperties'\n        - $ref: '#/components/schemas/TableViewProperties'\n        - $ref: '#/components/schemas/SimpleTableViewProperties'\n        - $ref: '#/components/schemas/MarkdownViewProperties'\n        - $ref: '#/components/schemas/CheckViewProperties'\n        - $ref: '#/components/schemas/ScatterViewProperties'\n        - $ref: '#/components/schemas/HeatmapViewProperties'\n        - $ref: '#/components/schemas/MosaicViewProperties'\n        - $ref: '#/components/schemas/BandViewProperties'\n        - $ref: '#/components/schemas/GeoViewProperties'\n    View:\n      required:\n        - name\n        - properties\n      properties:\n        links:\n          type: object\n          readOnly: true\n          properties:\n            self:\n              type: string\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        properties:\n          $ref: '#/components/schemas/ViewProperties'\n    Views:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n        views:\n          type: array\n          items:\n            $ref: '#/components/schemas/View'\n    CellUpdate:\n      type: object\n      properties:\n        x:\n          type: integer\n          format: int32\n        'y':\n          type: integer\n          format: int32\n        w:\n          type: integer\n          format: int32\n        h:\n          type: integer\n          format: int32\n    CreateCell:\n      type: object\n      properties:\n        name:\n          type: string\n        x:\n          type: integer\n          format: int32\n        'y':\n          type: integer\n          format: int32\n        w:\n          type: integer\n          format: int32\n        h:\n          type: integer\n          format: int32\n        usingView:\n          type: string\n          description: Makes a copy of the provided view.\n    AnalyzeQueryResponse:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            type: object\n            properties:\n              line:\n                type: integer\n              column:\n                type: integer\n              character:\n                type: integer\n              message:\n                type: string\n    CellWithViewProperties:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Cell'\n        - type: object\n          properties:\n            name:\n              type: string\n            properties:\n              $ref: '#/components/schemas/ViewProperties'\n    Cell:\n      type: object\n      properties:\n        id:\n          type: string\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n            view:\n              type: string\n        x:\n          type: integer\n          format: int32\n        'y':\n          type: integer\n          format: int32\n        w:\n          type: integer\n          format: int32\n        h:\n          type: integer\n          format: int32\n        viewID:\n          type: string\n          description: The reference to a view from the views API.\n    CellsWithViewProperties:\n      type: array\n      items:\n        $ref: '#/components/schemas/CellWithViewProperties'\n    Cells:\n      type: array\n      items:\n        $ref: '#/components/schemas/Cell'\n    Secrets:\n      additionalProperties:\n        type: string\n      example:\n        apikey: abc123xyz\n    SecretKeys:\n      type: object\n      properties:\n        secrets:\n          type: array\n          items:\n            type: string\n    SecretKeysResponse:\n      allOf:\n        - $ref: '#/components/schemas/SecretKeys'\n        - type: object\n          properties:\n            links:\n              readOnly: true\n              type: object\n              properties:\n                self:\n                  type: string\n                org:\n                  type: string\n    CreateDashboardRequest:\n      properties:\n        orgID:\n          type: string\n          description: The ID of the organization that owns the dashboard.\n        name:\n          type: string\n          description: The user-facing name of the dashboard.\n        description:\n          type: string\n          description: The user-facing description of the dashboard.\n      required:\n        - orgID\n        - name\n    DashboardWithViewProperties:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/CreateDashboardRequest'\n        - type: object\n          properties:\n            links:\n              type: object\n              example:\n                self: /api/v2/dashboards/1\n                cells: /api/v2/dashboards/1/cells\n                owners: /api/v2/dashboards/1/owners\n                members: /api/v2/dashboards/1/members\n                labels: /api/v2/dashboards/1/labels\n                org: /api/v2/labels/1\n              properties:\n                self:\n                  $ref: '#/components/schemas/Link'\n                cells:\n                  $ref: '#/components/schemas/Link'\n                members:\n                  $ref: '#/components/schemas/Link'\n                owners:\n                  $ref: '#/components/schemas/Link'\n                labels:\n                  $ref: '#/components/schemas/Link'\n                org:\n                  $ref: '#/components/schemas/Link'\n            id:\n              readOnly: true\n              type: string\n            meta:\n              type: object\n              properties:\n                createdAt:\n                  type: string\n                  format: date-time\n                updatedAt:\n                  type: string\n                  format: date-time\n            cells:\n              $ref: '#/components/schemas/CellsWithViewProperties'\n            labels:\n              $ref: '#/components/schemas/Labels'\n    Dashboard:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/CreateDashboardRequest'\n        - type: object\n          properties:\n            links:\n              type: object\n              example:\n                self: /api/v2/dashboards/1\n                cells: /api/v2/dashboards/1/cells\n                owners: /api/v2/dashboards/1/owners\n                members: /api/v2/dashboards/1/members\n                labels: /api/v2/dashboards/1/labels\n                org: /api/v2/labels/1\n              properties:\n                self:\n                  $ref: '#/components/schemas/Link'\n                cells:\n                  $ref: '#/components/schemas/Link'\n                members:\n                  $ref: '#/components/schemas/Link'\n                owners:\n                  $ref: '#/components/schemas/Link'\n                labels:\n                  $ref: '#/components/schemas/Link'\n                org:\n                  $ref: '#/components/schemas/Link'\n            id:\n              readOnly: true\n              type: string\n            meta:\n              type: object\n              properties:\n                createdAt:\n                  type: string\n                  format: date-time\n                updatedAt:\n                  type: string\n                  format: date-time\n            cells:\n              $ref: '#/components/schemas/Cells'\n            labels:\n              $ref: '#/components/schemas/Labels'\n    Dashboards:\n      type: object\n      properties:\n        links:\n          $ref: '#/components/schemas/Links'\n        dashboards:\n          type: array\n          items:\n            $ref: '#/components/schemas/Dashboard'\n    TelegrafRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        metadata:\n          type: object\n          properties:\n            buckets:\n              type: array\n              items:\n                type: string\n        config:\n          type: string\n        orgID:\n          type: string\n    TelegrafPluginRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        plugins:\n          type: array\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n              name:\n                type: string\n              alias:\n                type: string\n              description:\n                type: string\n              config:\n                type: string\n        metadata:\n          type: object\n          properties:\n            buckets:\n              type: array\n              items:\n                type: string\n        config:\n          type: string\n        orgID:\n          type: string\n    Telegraf:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/TelegrafRequest'\n        - type: object\n          properties:\n            id:\n              type: string\n              readOnly: true\n            links:\n              type: object\n              readOnly: true\n              example:\n                self: /api/v2/telegrafs/1\n                lables: /api/v2/telegrafs/1/labels\n                owners: /api/v2/telegrafs/1/owners\n                members: /api/v2/telegrafs/1/members\n              properties:\n                self:\n                  $ref: '#/components/schemas/Link'\n                labels:\n                  $ref: '#/components/schemas/Link'\n                members:\n                  $ref: '#/components/schemas/Link'\n                owners:\n                  $ref: '#/components/schemas/Link'\n            labels:\n              readOnly: true\n              $ref: '#/components/schemas/Labels'\n    Telegrafs:\n      type: object\n      properties:\n        configurations:\n          type: array\n          items:\n            $ref: '#/components/schemas/Telegraf'\n    TelegrafPlugin:\n      type: object\n      properties:\n        type:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        config:\n          type: string\n    TelegrafPlugins:\n      type: object\n      properties:\n        version:\n          type: string\n        os:\n          type: string\n        plugins:\n          type: array\n          items:\n            $ref: '#/components/schemas/TelegrafPlugin'\n    IsOnboarding:\n      type: object\n      properties:\n        allowed:\n          description: |\n            If `true`, the InfluxDB instance hasn't had initial setup;\n            `false` otherwise.\n          type: boolean\n    PasswordResetBody:\n      properties:\n        password:\n          type: string\n      required:\n        - password\n    AddResourceMemberRequestBody:\n      type: object\n      properties:\n        id:\n          type: string\n          description: |\n            The ID of the user to add to the resource.\n        name:\n          type: string\n          description: |\n            The name of the user to add to the resource.\n      required:\n        - id\n    Ready:\n      type: object\n      properties:\n        status:\n          type: string\n          enum:\n            - ready\n        started:\n          type: string\n          format: date-time\n          example: '2019-03-13T10:09:33.891196-04:00'\n        up:\n          type: string\n          example: 14m45.911966424s\n    HealthCheck:\n      type: object\n      required:\n        - name\n        - status\n      properties:\n        name:\n          type: string\n        message:\n          type: string\n        checks:\n          type: array\n          items:\n            $ref: '#/components/schemas/HealthCheck'\n        status:\n          type: string\n          enum:\n            - pass\n            - fail\n        version:\n          type: string\n        commit:\n          type: string\n    Labels:\n      type: array\n      items:\n        $ref: '#/components/schemas/Label'\n    Label:\n      type: object\n      properties:\n        id:\n          readOnly: true\n          type: string\n        orgID:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n          description: |\n            Key-value pairs associated with this label.\n            To remove a property, send an update with an empty value (`\"\"`) for the key.\n          example:\n            color: ffb3b3\n            description: this is a description\n    LabelCreateRequest:\n      type: object\n      required:\n        - orgID\n        - name\n      properties:\n        orgID:\n          type: string\n        name:\n          type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n          description: |\n            Key-value pairs associated with this label.\n\n            To remove a property, send an update with an empty value (`\"\"`) for the key.\n          example:\n            color: ffb3b3\n            description: this is a description\n    LabelUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n            description: |\n              Key-value pairs associated with this label.\n\n              To remove a property, send an update with an empty value (`\"\"`) for the key.\n          example:\n            color: ffb3b3\n            description: this is a description\n    LabelMapping:\n      type: object\n      properties:\n        labelID:\n          description: |\n            Label ID.\n            The ID of the label to attach.\n          type: string\n    LabelsResponse:\n      type: object\n      properties:\n        labels:\n          $ref: '#/components/schemas/Labels'\n        links:\n          $ref: '#/components/schemas/Links'\n    LabelResponse:\n      type: object\n      properties:\n        label:\n          $ref: '#/components/schemas/Label'\n        links:\n          $ref: '#/components/schemas/Links'\n    ASTResponse:\n      description: Contains the AST for the supplied Flux query\n      type: object\n      properties:\n        ast:\n          $ref: '#/components/schemas/Package'\n    WritePrecision:\n      type: string\n      enum:\n        - ms\n        - s\n        - us\n        - ns\n    FluxResponse:\n      description: Rendered flux that backs the check or notification.\n      properties:\n        flux:\n          type: string\n    CheckPatch:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: string\n          enum:\n            - active\n            - inactive\n    CheckDiscriminator:\n      oneOf:\n        - $ref: '#/components/schemas/DeadmanCheck'\n        - $ref: '#/components/schemas/ThresholdCheck'\n        - $ref: '#/components/schemas/CustomCheck'\n      discriminator:\n        propertyName: type\n        mapping:\n          deadman: '#/components/schemas/DeadmanCheck'\n          threshold: '#/components/schemas/ThresholdCheck'\n          custom: '#/components/schemas/CustomCheck'\n    Check:\n      allOf:\n        - $ref: '#/components/schemas/CheckDiscriminator'\n    PostCheck:\n      allOf:\n        - $ref: '#/components/schemas/CheckDiscriminator'\n    Checks:\n      properties:\n        checks:\n          type: array\n          items:\n            $ref: '#/components/schemas/Check'\n        links:\n          $ref: '#/components/schemas/Links'\n    CheckBase:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        orgID:\n          description: The ID of the organization that owns this check.\n          type: string\n        taskID:\n          description: The ID of the task associated with this check.\n          type: string\n        ownerID:\n          description: The ID of creator used to create this check.\n          type: string\n          readOnly: true\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        query:\n          $ref: '#/components/schemas/DashboardQuery'\n        status:\n          $ref: '#/components/schemas/TaskStatusType'\n        description:\n          description: An optional description of the check.\n          type: string\n        latestCompleted:\n          type: string\n          description: 'A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp)) of the latest scheduled and completed run.'\n          format: date-time\n          readOnly: true\n        lastRunStatus:\n          readOnly: true\n          type: string\n          enum:\n            - failed\n            - success\n            - canceled\n        lastRunError:\n          readOnly: true\n          type: string\n        labels:\n          $ref: '#/components/schemas/Labels'\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: /api/v2/checks/1\n            labels: /api/v2/checks/1/labels\n            members: /api/v2/checks/1/members\n            owners: /api/v2/checks/1/owners\n            query: /api/v2/checks/1/query\n          properties:\n            self:\n              description: URL for this check\n              $ref: '#/components/schemas/Link'\n            labels:\n              description: URL to retrieve labels for this check\n              $ref: '#/components/schemas/Link'\n            members:\n              description: URL to retrieve members for this check\n              $ref: '#/components/schemas/Link'\n            owners:\n              description: URL to retrieve owners for this check\n              $ref: '#/components/schemas/Link'\n            query:\n              description: URL to retrieve flux script for this check\n              $ref: '#/components/schemas/Link'\n      required:\n        - name\n        - orgID\n        - query\n    ThresholdCheck:\n      allOf:\n        - $ref: '#/components/schemas/CheckBase'\n        - type: object\n          required:\n            - type\n          properties:\n            type:\n              type: string\n              enum:\n                - threshold\n            thresholds:\n              type: array\n              items:\n                $ref: '#/components/schemas/Threshold'\n            every:\n              description: Check repetition interval.\n              type: string\n            offset:\n              description: 'Duration to delay after the schedule, before executing check.'\n              type: string\n            tags:\n              description: List of tags to write to each status.\n              type: array\n              items:\n                type: object\n                properties:\n                  key:\n                    type: string\n                  value:\n                    type: string\n            statusMessageTemplate:\n              description: The template used to generate and write a status message.\n              type: string\n    Threshold:\n      oneOf:\n        - $ref: '#/components/schemas/GreaterThreshold'\n        - $ref: '#/components/schemas/LesserThreshold'\n        - $ref: '#/components/schemas/RangeThreshold'\n      discriminator:\n        propertyName: type\n        mapping:\n          greater: '#/components/schemas/GreaterThreshold'\n          lesser: '#/components/schemas/LesserThreshold'\n          range: '#/components/schemas/RangeThreshold'\n    DeadmanCheck:\n      allOf:\n        - $ref: '#/components/schemas/CheckBase'\n        - type: object\n          required:\n            - type\n          properties:\n            type:\n              type: string\n              enum:\n                - deadman\n            timeSince:\n              description: String duration before deadman triggers.\n              type: string\n            staleTime:\n              description: String duration for time that a series is considered stale and should not trigger deadman.\n              type: string\n            reportZero:\n              description: 'If only zero values reported since time, trigger an alert'\n              type: boolean\n            level:\n              $ref: '#/components/schemas/CheckStatusLevel'\n            every:\n              description: Check repetition interval.\n              type: string\n            offset:\n              description: 'Duration to delay after the schedule, before executing check.'\n              type: string\n            tags:\n              description: List of tags to write to each status.\n              type: array\n              items:\n                type: object\n                properties:\n                  key:\n                    type: string\n                  value:\n                    type: string\n            statusMessageTemplate:\n              description: The template used to generate and write a status message.\n              type: string\n    CustomCheck:\n      allOf:\n        - $ref: '#/components/schemas/CheckBase'\n        - type: object\n          properties:\n            type:\n              type: string\n              enum:\n                - custom\n          required:\n            - type\n    ThresholdBase:\n      properties:\n        level:\n          $ref: '#/components/schemas/CheckStatusLevel'\n        allValues:\n          description: 'If true, only alert if all values meet threshold.'\n          type: boolean\n    GreaterThreshold:\n      allOf:\n        - $ref: '#/components/schemas/ThresholdBase'\n        - type: object\n          required:\n            - type\n            - value\n          properties:\n            type:\n              type: string\n              enum:\n                - greater\n            value:\n              type: number\n              format: float\n    LesserThreshold:\n      allOf:\n        - $ref: '#/components/schemas/ThresholdBase'\n        - type: object\n          required:\n            - type\n            - value\n          properties:\n            type:\n              type: string\n              enum:\n                - lesser\n            value:\n              type: number\n              format: float\n    RangeThreshold:\n      allOf:\n        - $ref: '#/components/schemas/ThresholdBase'\n        - type: object\n          required:\n            - type\n            - min\n            - max\n            - within\n          properties:\n            type:\n              type: string\n              enum:\n                - range\n            min:\n              type: number\n              format: float\n            max:\n              type: number\n              format: float\n            within:\n              type: boolean\n    CheckStatusLevel:\n      description: The state to record if check matches a criteria.\n      type: string\n      enum:\n        - UNKNOWN\n        - OK\n        - INFO\n        - CRIT\n        - WARN\n    RuleStatusLevel:\n      description: The state to record if check matches a criteria.\n      type: string\n      enum:\n        - UNKNOWN\n        - OK\n        - INFO\n        - CRIT\n        - WARN\n        - ANY\n    NotificationRuleUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: string\n          enum:\n            - active\n            - inactive\n    NotificationRuleDiscriminator:\n      oneOf:\n        - $ref: '#/components/schemas/SlackNotificationRule'\n        - $ref: '#/components/schemas/SMTPNotificationRule'\n        - $ref: '#/components/schemas/PagerDutyNotificationRule'\n        - $ref: '#/components/schemas/HTTPNotificationRule'\n        - $ref: '#/components/schemas/TelegramNotificationRule'\n      discriminator:\n        propertyName: type\n        mapping:\n          slack: '#/components/schemas/SlackNotificationRule'\n          smtp: '#/components/schemas/SMTPNotificationRule'\n          pagerduty: '#/components/schemas/PagerDutyNotificationRule'\n          http: '#/components/schemas/HTTPNotificationRule'\n          telegram: '#/components/schemas/TelegramNotificationRule'\n    NotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleDiscriminator'\n    PostNotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleDiscriminator'\n    NotificationRules:\n      properties:\n        notificationRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/NotificationRule'\n        links:\n          $ref: '#/components/schemas/Links'\n    NotificationRuleBase:\n      type: object\n      required:\n        - orgID\n        - status\n        - name\n        - statusRules\n        - endpointID\n      properties:\n        latestCompleted:\n          description: 'A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp)) of the latest scheduled and completed run.'\n          type: string\n          format: date-time\n          readOnly: true\n        lastRunStatus:\n          readOnly: true\n          type: string\n          enum:\n            - failed\n            - success\n            - canceled\n        lastRunError:\n          readOnly: true\n          type: string\n        id:\n          readOnly: true\n          type: string\n        endpointID:\n          type: string\n        orgID:\n          description: The ID of the organization that owns this notification rule.\n          type: string\n        taskID:\n          description: The ID of the task associated with this notification rule.\n          type: string\n        ownerID:\n          description: The ID of creator used to create this notification rule.\n          type: string\n          readOnly: true\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        status:\n          $ref: '#/components/schemas/TaskStatusType'\n        name:\n          description: Human-readable name describing the notification rule.\n          type: string\n        sleepUntil:\n          type: string\n        every:\n          description: The notification repetition interval.\n          type: string\n        offset:\n          description: 'Duration to delay after the schedule, before executing check.'\n          type: string\n        runbookLink:\n          type: string\n        limitEvery:\n          description: 'Don''t notify me more than \u003climit\u003e times every \u003climitEvery\u003e seconds. If set, limit cannot be empty.'\n          type: integer\n        limit:\n          description: 'Don''t notify me more than \u003climit\u003e times every \u003climitEvery\u003e seconds. If set, limitEvery cannot be empty.'\n          type: integer\n        tagRules:\n          description: List of tag rules the notification rule attempts to match.\n          type: array\n          items:\n            $ref: '#/components/schemas/TagRule'\n        description:\n          description: An optional description of the notification rule.\n          type: string\n        statusRules:\n          description: List of status rules the notification rule attempts to match.\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/StatusRule'\n        labels:\n          $ref: '#/components/schemas/Labels'\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: /api/v2/notificationRules/1\n            labels: /api/v2/notificationRules/1/labels\n            members: /api/v2/notificationRules/1/members\n            owners: /api/v2/notificationRules/1/owners\n            query: /api/v2/notificationRules/1/query\n          properties:\n            self:\n              description: URL for this endpoint.\n              $ref: '#/components/schemas/Link'\n            labels:\n              description: URL to retrieve labels for this notification rule.\n              $ref: '#/components/schemas/Link'\n            members:\n              description: URL to retrieve members for this notification rule.\n              $ref: '#/components/schemas/Link'\n            owners:\n              description: URL to retrieve owners for this notification rule.\n              $ref: '#/components/schemas/Link'\n            query:\n              description: URL to retrieve flux script for this notification rule.\n              $ref: '#/components/schemas/Link'\n    TagRule:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n        operator:\n          type: string\n          enum:\n            - equal\n            - notequal\n            - equalregex\n            - notequalregex\n    StatusRule:\n      type: object\n      properties:\n        currentLevel:\n          $ref: '#/components/schemas/RuleStatusLevel'\n        previousLevel:\n          $ref: '#/components/schemas/RuleStatusLevel'\n        count:\n          type: integer\n        period:\n          type: string\n    HTTPNotificationRuleBase:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n          enum:\n            - http\n        url:\n          type: string\n    HTTPNotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleBase'\n        - $ref: '#/components/schemas/HTTPNotificationRuleBase'\n    SlackNotificationRuleBase:\n      type: object\n      required:\n        - type\n        - messageTemplate\n      properties:\n        type:\n          type: string\n          enum:\n            - slack\n        channel:\n          type: string\n        messageTemplate:\n          type: string\n    SlackNotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleBase'\n        - $ref: '#/components/schemas/SlackNotificationRuleBase'\n    SMTPNotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleBase'\n        - $ref: '#/components/schemas/SMTPNotificationRuleBase'\n    SMTPNotificationRuleBase:\n      type: object\n      required:\n        - type\n        - subjectTemplate\n        - to\n      properties:\n        type:\n          type: string\n          enum:\n            - smtp\n        subjectTemplate:\n          type: string\n        bodyTemplate:\n          type: string\n        to:\n          type: string\n    PagerDutyNotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleBase'\n        - $ref: '#/components/schemas/PagerDutyNotificationRuleBase'\n    PagerDutyNotificationRuleBase:\n      type: object\n      required:\n        - type\n        - messageTemplate\n      properties:\n        type:\n          type: string\n          enum:\n            - pagerduty\n        messageTemplate:\n          type: string\n    TelegramNotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleBase'\n        - $ref: '#/components/schemas/TelegramNotificationRuleBase'\n    TelegramNotificationRuleBase:\n      type: object\n      required:\n        - type\n        - messageTemplate\n        - channel\n      properties:\n        type:\n          description: The discriminator between other types of notification rules is \"telegram\".\n          type: string\n          enum:\n            - telegram\n        messageTemplate:\n          description: The message template as a flux interpolated string.\n          type: string\n        parseMode:\n          description: 'Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options. Defaults to \"MarkdownV2\".'\n          type: string\n          enum:\n            - MarkdownV2\n            - HTML\n            - Markdown\n        disableWebPagePreview:\n          description: Disables preview of web links in the sent messages when \"true\". Defaults to \"false\".\n          type: boolean\n    NotificationEndpointUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: string\n          enum:\n            - active\n            - inactive\n    NotificationEndpointDiscriminator:\n      oneOf:\n        - $ref: '#/components/schemas/SlackNotificationEndpoint'\n        - $ref: '#/components/schemas/PagerDutyNotificationEndpoint'\n        - $ref: '#/components/schemas/HTTPNotificationEndpoint'\n        - $ref: '#/components/schemas/TelegramNotificationEndpoint'\n      discriminator:\n        propertyName: type\n        mapping:\n          slack: '#/components/schemas/SlackNotificationEndpoint'\n          pagerduty: '#/components/schemas/PagerDutyNotificationEndpoint'\n          http: '#/components/schemas/HTTPNotificationEndpoint'\n          telegram: '#/components/schemas/TelegramNotificationEndpoint'\n    NotificationEndpoint:\n      allOf:\n        - $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n    PostNotificationEndpoint:\n      allOf:\n        - $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n    NotificationEndpoints:\n      properties:\n        notificationEndpoints:\n          type: array\n          items:\n            $ref: '#/components/schemas/NotificationEndpoint'\n        links:\n          $ref: '#/components/schemas/Links'\n    NotificationEndpointBase:\n      type: object\n      required:\n        - type\n        - name\n      properties:\n        id:\n          type: string\n        orgID:\n          type: string\n        userID:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        description:\n          description: An optional description of the notification endpoint.\n          type: string\n        name:\n          type: string\n        status:\n          description: The status of the endpoint.\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n        labels:\n          $ref: '#/components/schemas/Labels'\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: /api/v2/notificationEndpoints/1\n            labels: /api/v2/notificationEndpoints/1/labels\n            members: /api/v2/notificationEndpoints/1/members\n            owners: /api/v2/notificationEndpoints/1/owners\n          properties:\n            self:\n              description: URL for this endpoint.\n              $ref: '#/components/schemas/Link'\n            labels:\n              description: URL to retrieve labels for this endpoint.\n              $ref: '#/components/schemas/Link'\n            members:\n              description: URL to retrieve members for this endpoint.\n              $ref: '#/components/schemas/Link'\n            owners:\n              description: URL to retrieve owners for this endpoint.\n              $ref: '#/components/schemas/Link'\n        type:\n          $ref: '#/components/schemas/NotificationEndpointType'\n    SlackNotificationEndpoint:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/NotificationEndpointBase'\n        - type: object\n          properties:\n            url:\n              description: Specifies the URL of the Slack endpoint. Specify either `URL` or `Token`.\n              type: string\n            token:\n              description: Specifies the API token string. Specify either `URL` or `Token`.\n              type: string\n    PagerDutyNotificationEndpoint:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/NotificationEndpointBase'\n        - type: object\n          required:\n            - routingKey\n          properties:\n            clientURL:\n              type: string\n            routingKey:\n              type: string\n    HTTPNotificationEndpoint:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/NotificationEndpointBase'\n        - type: object\n          required:\n            - url\n            - authMethod\n            - method\n          properties:\n            url:\n              type: string\n            username:\n              type: string\n            password:\n              type: string\n            token:\n              type: string\n            method:\n              type: string\n              enum:\n                - POST\n                - GET\n                - PUT\n            authMethod:\n              type: string\n              enum:\n                - none\n                - basic\n                - bearer\n            contentTemplate:\n              type: string\n            headers:\n              type: object\n              description: Customized headers.\n              additionalProperties:\n                type: string\n    TelegramNotificationEndpoint:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/NotificationEndpointBase'\n        - type: object\n          required:\n            - token\n            - channel\n          properties:\n            token:\n              description: 'Specifies the Telegram bot token. See https://core.telegram.org/bots#creating-a-new-bot .'\n              type: string\n            channel:\n              description: 'The ID of the telegram channel; a chat_id in https://core.telegram.org/bots/api#sendmessage .'\n              type: string\n    NotificationEndpointType:\n      type: string\n      enum:\n        - slack\n        - pagerduty\n        - http\n        - telegram\n    DBRP:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The ID of the DBRP mapping.\n          readOnly: true\n        orgID:\n          type: string\n          description: The ID of the organization.\n        bucketID:\n          type: string\n          description: The ID of the bucket used as the target for the translation.\n        database:\n          type: string\n          description: InfluxDB v1 database\n        retention_policy:\n          type: string\n          description: InfluxDB v1 retention policy\n        default:\n          type: boolean\n          description: Mapping represents the default retention policy for the database specified.\n        virtual:\n          type: boolean\n          description: 'Indicates an autogenerated, virtual mapping based on the bucket name. Currently only available in OSS.'\n        links:\n          $ref: '#/components/schemas/Links'\n      required:\n        - id\n        - orgID\n        - bucketID\n        - database\n        - retention_policy\n        - default\n    DBRPs:\n      properties:\n        content:\n          type: array\n          items:\n            $ref: '#/components/schemas/DBRP'\n    DBRPUpdate:\n      properties:\n        retention_policy:\n          type: string\n          description: InfluxDB v1 retention policy\n        default:\n          type: boolean\n    DBRPCreate:\n      type: object\n      properties:\n        orgID:\n          type: string\n          description: The ID of the organization.\n        org:\n          type: string\n          description: The name of the organization that owns this mapping.\n        bucketID:\n          type: string\n          description: The ID of the bucket used as the target for the translation.\n        database:\n          type: string\n          description: InfluxDB v1 database\n        retention_policy:\n          type: string\n          description: InfluxDB v1 retention policy\n        default:\n          type: boolean\n          description: Mapping represents the default retention policy for the database specified.\n      required:\n        - bucketID\n        - database\n        - retention_policy\n    DBRPGet:\n      type: object\n      properties:\n        content:\n          $ref: '#/components/schemas/DBRP'\n          required: true\n    SchemaType:\n      type: string\n      enum:\n        - implicit\n        - explicit\n    ColorMapping:\n      type: object\n      description: A color mapping is an object that maps time series data to a UI color scheme to allow the UI to render graphs consistent colors across reloads.\n      additionalProperties:\n        type: string\n      example:\n        series_id_1: '#edf529'\n        series_id_2: '#edf529'\n        measurement_birdmigration_europe: '#663cd0'\n        configcat_deployments-autopromotionblocker: '#663cd0'\n  responses:\n    AuthorizationError:\n      description: |\n        Unauthorized. The error may indicate one of the following:\n\n          * The `Authorization: Token` header is missing or malformed.\n          * The API token value is missing from the header.\n          * The token doesn't have sufficient permissions to write to this organization and bucket.\n      content:\n        application/json:\n          schema:\n            properties:\n              code:\n                description: |\n                  The HTTP status code description. Default is `unauthorized`.\n                readOnly: true\n                type: string\n                enum:\n                  - unauthorized\n              message:\n                readOnly: true\n                description: A human-readable message that may contain detail about the error.\n                type: string\n          examples:\n            tokenNotAuthorized:\n              summary: Token is not authorized to access a resource\n              value:\n                code: unauthorized\n                message: unauthorized access\n    BadRequestError:\n      description: |\n        Bad request.\n        The response body contains detail about the error.\n\n        #### InfluxDB OSS\n\n        - Returns this error if an incorrect value is passed for `org` or `orgID`.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            orgProvidedNotFound:\n              summary: The org or orgID passed doesn't own the token passed in the header\n              value:\n                code: invalid\n                message: 'failed to decode request body: organization not found'\n    GeneralServerError:\n      description: Non 2XX error response from server.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    InternalServerError:\n      description: |\n        Internal server error.\n        The server encountered an unexpected situation.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    ResourceNotFoundError:\n      description: |\n        Not found.\n        A requested resource was not found.\n        The response body contains the requested resource type and the name value\n        (if you passed it)--for example:\n\n        - `\"organization name \\\"my-org\\\" not found\"`\n        - `\"organization not found\"`: indicates you passed an ID that did not match\n           an organization.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            org-not-found:\n              summary: Organization name not found\n              value:\n                code: not found\n                message: organization name \"my-org\" not found\n            bucket-not-found:\n              summary: Bucket name not found\n              value:\n                code: not found\n                message: bucket \"air_sensor\" not found\n            orgID-not-found:\n              summary: Organization ID not found\n              value:\n                code: not found\n                message: organization not found\n",
			"canonicalURL": "/github.com/influxdata/openapi@ad64ba87e7dd666feb80bbb85d1757b3d290d6c3/-/blob/contracts/common.yml",
			"externalURLs": [
				{
					"url": "https://github.com/influxdata/openapi/blob/ad64ba87e7dd666feb80bbb85d1757b3d290d6c3/contracts/common.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!bool `true` into []string"
}