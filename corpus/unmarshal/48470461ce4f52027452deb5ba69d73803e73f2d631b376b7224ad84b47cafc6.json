{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ddavness/power-mailinabox"
		},
		"file": {
			"name": "mailinabox.yml",
			"size": 0,
			"path": "api/mailinabox.yml",
			"byteSize": 105664,
			"content": "openapi: 3.0.3\ninfo:\n  title: Mail-in-a-Box\n  description: |\n    Mail-in-a-Box API HTTP specification.\n\n    # Introduction\n    This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3).\n    ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)\n\n    All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present.\n  contact:\n    name: Mail-in-a-Box support\n    url: https://mailinabox.email/\n  license:\n    name: CC0 1.0 Universal\n    url: https://creativecommons.org/publicdomain/zero/1.0/legalcode\n  version: 56.5\n  x-logo:\n    url: https://mailinabox.email/static/logo.png\n    altText: Mail-in-a-Box logo\nexternalDocs:\n  description: Find out more about Mail-in-a-box.\n  url: https://mailinabox.email/\nservers:\n  - url: https://{host}/admin\n    variables:\n      host:\n        default: box.example.com\n        description: The API hostname.\nsecurity:\n  - basicAuth: []\ntags:\n  - name: User\n    description: Endpoints related to user authentication.\n  - name: Mail\n    description: |\n      Mail operations, which include getting all users, getting all aliases, adding/updating/removing users and aliases and getting all mail domains.\n  - name: DNS\n    description: |\n      DNS operations, which include adding custom records, adding a secondary nameserver and viewing all DNS records.\n  - name: SSL\n    description: |\n      TLS (SSL) Certificates operations, which include checking certificate status\n      and installing custom certificates.\n  - name: Web\n    description: |\n      Static web hosting operations, which include getting domain information and updating domain root directories.\n  - name: MFA\n    description: |\n      Manage multi-factor authentication schemes. Currently, only TOTP is supported.\n  - name: System\n    description: |\n      System operations, which include system status checks, new version checks\n      and reboot status.\n  - name: PGP\n    description: |\n      PGP Key operations, which include key management and publishing.\n  - name: WKD\n    description: |\n      WKD (Web Key Directory) operations, which include publishing public PGP keys on the internet.\npaths:\n  /login:\n    post:\n      tags:\n        - User\n      summary: Exchange a username and password for a session API key.\n      description: |\n        Returns user information and a session API key.\n\n        Authenticate a user by supplying the auth token as a base64 encoded string in\n        format `email:password` using basic authentication headers.\n\n        If successful, a long-lived `api_key` is returned which can be used for subsequent\n        requests to the API in place of the password.\n      operationId: login\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/login\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MeResponse'\n              examples:\n                invalid:\n                  value:\n                    reason: Incorrect username or password\n                    status: invalid\n                ok:\n                  value:\n                    api_key: 1a2b3c4d5e6f7g8h9i0j\n                    email: user@example.com\n                    privileges:\n                      - admin\n                    status: ok\n  /logout:\n    post:\n      tags:\n        - User\n      summary: Invalidates a session API key.\n      description: |\n        Invalidates a session API key so that it cannot be used after this API call.\n      operationId: logout\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/logout\" \\\n              -u \"<email>:<session_key>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogoutResponse'\n  /system/status:\n    post:\n      tags:\n        - System\n      summary: Get system status\n      description: |\n        Returns an array of statuses which can include headings.\n      operationId: getSystemStatus\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/system/status\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemStatusResponse'\n              example:\n                - type: heading\n                  text: System\n                  extra: []\n                - type: warning\n                  text: This domain's DNSSEC DS record is not set\n                  extra:\n                    - monospace: false\n                      text: 'Digest Type: 2 / SHA-25'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/version:\n    get:\n      tags:\n        - System\n      summary: Get system version\n      description: Returns installed Mail-in-a-Box version.\n      operationId: getSystemVersion\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/system/version\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/SystemVersionResponse'\n              example: v0.46\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/latest-upstream-version:\n    post:\n      tags:\n        - System\n      summary: Get system upstream version\n      description: Returns Mail-in-a-Box upstream version.\n      operationId: getSystemUpstreamVersion\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/system/latest-upstream-version\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/SystemVersionUpstreamResponse'\n              example: v0.47\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/updates:\n    get:\n      tags:\n        - System\n      summary: Get system updates\n      description: Returns system (apt) updates.\n      operationId: getSystemUpdates\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/system/updates\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/SystemUpdatesResponse'\n              example: |\n                libgnutls30 (3.5.18-1ubuntu1.4)\n                libxau6 (1:1.0.8-1ubuntu1)\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/update-packages:\n    post:\n      tags:\n        - System\n      summary: Update system packages\n      description: Updates system (apt) packages.\n      operationId: updateSystemPackages\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/system/update-packages\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/SystemUpdatePackagesResponse'\n              example: |\n                Calculating upgrade...\n                The following packages will be upgraded:\n                  cloud-init grub-common\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/privacy:\n    get:\n      tags:\n        - System\n      summary: Get system privacy status\n      description: |\n        Returns system privacy (new-version check) status.\n\n        Response:\n\n          - `true`: Private, new-version checks will not be performed\n          - `false`: Not private, new-version checks will be performed\n      operationId: getSystemPrivacyStatus\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/system/privacy\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemPrivacyStatusResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n    post:\n      tags:\n        - System\n      summary: Update system privacy\n      description: |\n        Updates system privacy (new-version checks).\n\n        Request:\n\n          - `value: private`: Disable new version checks\n          - `value: off`: Enable new version checks\n      operationId: updateSystemPrivacy\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/SystemPrivacyUpdateRequest'\n            examples:\n              enable:\n                summary: Enable new version checks\n                value:\n                  value: 'off'\n              disable:\n                summary: Disable new version checks\n                value:\n                  value: private\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/system/privacy\" \\\n              -d \"value=<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/SystemPrivacyUpdateResponse'\n              example: OK\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/reboot:\n    get:\n      tags:\n        - System\n      summary: Get system reboot status\n      description: |\n        Returns the system reboot status.\n\n        Response:\n\n          - `true`: A reboot is required\n          - `false`: A reboot is not required\n      operationId: getSystemRebootStatus\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/system/reboot\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemRebootStatusResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n    post:\n      tags:\n        - System\n      summary: Reboot system\n      description: Reboots the system.\n      operationId: rebootSystem\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/system/reboot\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/SystemRebootResponse'\n              example: No reboot is required, so it is not allowed.\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/backup/status:\n    get:\n      tags:\n        - System\n      summary: Get system backup status\n      description: |\n        Returns the system backup status.\n\n        If the list of backups is empty, this implies no backups have been made yet.\n      operationId: getSystemBackupStatus\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/system/backup/status\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemBackupStatusResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/backup/config:\n    get:\n      tags:\n        - System\n      summary: Get system backup config\n      description: Returns the system backup config.\n      operationId: getSystemBackupConfig\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/system/backup/config\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemBackupConfigResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n    post:\n      tags:\n        - System\n      summary: Update system backup config\n      description: Updates the system backup config.\n      operationId: updateSystemBackupConfig\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/SystemBackupConfigUpdateRequest'\n            examples:\n              s3:\n                summary: S3 backup\n                value:\n                  target: s3://s3.eu-central-1.amazonaws.com/box-example-com\n                  target_user: ACCESS_KEY\n                  target_pass: SECRET_ACCESS_KEY\n                  minAge: 3\n              local:\n                summary: Local backup\n                value:\n                  target: local\n                  target_user: ''\n                  target_pass: ''\n                  minAge: 3\n              rsync:\n                summary: Rsync backup\n                value:\n                  target: rsync://username@box.example.com//backups/box.example.com\n                  target_user: ''\n                  target_pass: ''\n                  minAge: 3\n              off:\n                summary: Disable backups\n                value:\n                  target: 'off'\n                  target_user: ''\n                  target_pass: ''\n                  minAge: 0\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/system/backup/config\" \\\n              -d \"target=<hostname>\" \\\n              -d \"target_user=<string>\" \\\n              -d \"target_pass=<password>\" \\\n              -d \"min_age=<integer>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/SystemBackupConfigUpdateResponse'\n              example: OK\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/backup/new:\n    post:\n      tags:\n        - System\n      summary: Perform system backup\n      description: Performs a system backup.\n      operationId: performSystemBackup\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PerformBackupRequest'\n            examples:\n              incremental:\n                summary: Perform incremental backup.\n                value:\n                  full: false\n              full:\n                summary: Force a full backup.\n                value:\n                  full: true\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/system/backup/new\" \\\n              -d \"full=<boolean>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/PerformBackupResponse'\n        403:\n          description: Forbidden\n          content:\n            text/plain:\n              schema:\n                type: string\n  /system/smtp/relay:\n    get:\n      tags:\n        - System\n      summary: Get SMTP relay configuration\n      description: Gets basic configuration on how the box should use third-party relay services to deliver mail.\n      operationId: getRelayConfig\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/system/smtp/relay\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SmtpRelayConfig'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n    post:\n      tags:\n        - System\n      summary: Set SMTP relay configuration\n      description: Sets the configuration on how the box should use third-party relays to deliver mail.\n      operationId: setRelayConfig\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/SetSmtpRelayConfigRequest'\n            examples:\n              disable:\n                summary: Do not use relays.\n                value:\n                  enabled: false\n                  host: \"\"\n                  auth_enabled: false\n                  user: \"\"\n                  key: \"\"\n              no_auth:\n                summary: Use a relay that does not require authentication.\n                value:\n                  enabled: true\n                  host: smtp.relay.net\n                  auth_enabled: false\n                  user: \"\"\n                  key: \"\"\n              auth:\n                summary: Use a relay that requires authentication.\n                value:\n                  enabled: true\n                  host: smtp.relay.net\n                  auth_enabled: true\n                  user: someuser\n                  key: key-or-password-here\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/pgp/:\n    get:\n      tags:\n        - PGP\n      summary: Get all PGP keys\n      description: Gets a JSON summary of all public PGP keys in the keyring.\n      operationId: getPGPKeys\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/system/pgp/\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PgpKeyring'\n              example:\n                daemon:\n                  ids:\n                    - Power Mail-in-a-Box Management Daemon <administrator@mailinabox.lan>\n                  master_fpr: 62037B88B743626997E63EFE2469394FBC0CF8DA\n                  revoked: false\n                  subkeys:\n                    - algorithm: RSA\n                      auth: true\n                      cert: true\n                      encr: true\n                      sign: true\n                      bits: 4096\n                      expired: false\n                      expires: 1617378256\n                      expires_date: 04/02/21\n                      expires_days: 179\n                      fpr: 62037B88B743626997E63EFE2469394FBC0CF8DA\n                      master: true\n                imported:\n                  - ids:\n                    - Someone You Used To Know <nobody@nowhere>\n                    master_fpr: B9BD7309D18784392D812050A174D33254CC2820\n                    revoked: false\n                    subkeys:\n                      - algorithm: RSA\n                        auth: true\n                        cert: true\n                        encr: true\n                        sign: true\n                        bits: 4096\n                        expired: false\n                        expires: 1615290372\n                        expires_date: 03/09/21\n                        expires_days: 155\n                        fpr: B9BD7309D18784392D812050A174D33254CC2820\n                        master: true\n                  - ids:\n                    - Linus Torvalds <torvalds@kernel.org>\n                    - Linus Torvalds <torvalds@linux-foundation.org>\n                    master_fpr: ABAF11C65A2970B130ABE3C479BE3E4300411886\n                    revoked: false\n                    subkeys:\n                      - algorithm: RSA\n                        auth: false\n                        cert: true\n                        encr: false\n                        sign: true\n                        bits: 2048\n                        expired: false\n                        expires: null\n                        expires_date: null\n                        expires_days: null\n                        fpr: ABAF11C65A2970B130ABE3C479BE3E4300411886\n                        master: true\n                      - algorithm: RSA\n                        auth: false\n                        cert: false\n                        encr: true\n                        sign: false\n                        bits: 2048\n                        expired: false\n                        expires: null\n                        expires_date: null\n                        expires_days: null\n                        fpr: AEE416F7DCCB753BB3D5609D88BCE80F012F54CA\n                        master: false\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/pgp/{fpr}:\n    get:\n      tags:\n        - PGP\n      summary: Get a specific PGP key\n      description: Gets a JSON summary of the PGP key with the given fingerprint.\n      operationId: getPGPKey\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/system/pgp/<fingerprint>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PgpKey'\n              example:\n                ids:\n                  - Power Mail-in-a-Box Management Daemon <administrator@mailinabox.lan>\n                master_fpr: 62037B88B743626997E63EFE2469394FBC0CF8DA\n                revoked: false\n                subkeys:\n                  - algorithm: RSA\n                    auth: true\n                    cert: true\n                    encr: true\n                    sign: true\n                    bits: 4096\n                    expired: false\n                    expires: 1617378256\n                    expires_date: 04/02/21\n                    expires_days: 179\n                    fpr: 62037B88B743626997E63EFE2469394FBC0CF8DA\n                    master: true\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n        404:\n          description: Key not found in public keyring\n          content:\n            text/html:\n              schema:\n                type: string\n    delete:\n      tags:\n        - PGP\n      summary: Remove a PGP key\n      description: Removes the PGP key with the given fingerprint from the keyring\n      operationId: removePGPKey\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X DELETE \"https://{host}/admin/system/pgp/<fingerprint>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Operation successful\n          content:\n            text/plain:\n              schema:\n                type: string\n              example: OK\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n        404:\n          description: Key not found in public keyring\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/pgp/{fpr}/export:\n    get:\n      tags:\n        - PGP\n      summary: Export a PGP key\n      description: Exports the PGP key with the given fingerprint.\n      operationId: exportPGPKey\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/system/pgp/<fingerprint>/export\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/PgpKeyExport'\n              example: |\n                -----BEGIN PGP PUBLIC KEY BLOCK-----\n\n                mQINBF957dABEADz7P2flznzRq5wuUhxDS+wytdn8yQhMXZr7kvcpwbRl9f7+dx3\n                ...\n                vo4j/rEYuOuqVo+TwsO0XNCfsA8as/UPLA9CgIxXXoIFmy2rL298lPQg5HgJ\n                =via/\n                -----END PGP PUBLIC KEY BLOCK-----\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n        404:\n          description: Key not found in public keyring\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/pgp/import:\n    post:\n      tags:\n        - PGP\n      summary: Import a PGP key\n      description: Imports a PGP key block into the keyring. Only public keys are accepted.\n      operationId: importPGPKey\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/system/pgp/import\" \\\n              --data-urlencode \"key=$(gpg --export --armor <fingerprint>)\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/PgpKeyImportResult'\n              example:\n                keys_read: 1\n                keys_added: 1\n                keys_unchanged: 0\n                uids_added: 0\n                sigs_added: 0\n                revs_added: 0\n        400:\n          description: Import refused\n          content:\n            text/plain:\n              schema:\n                type: string\n              examples:\n                private_key:\n                  value: Import cannot contain private keys!\n                invalid_format:\n                  value: Import is not a valid PGP key block!\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /system/pgp/wkd:\n    get:\n      tags:\n        - WKD\n      summary: Get WKD status\n      description: Gets the current configuration applied to the Web Key Directory for each email hosted in the box, along with a JSON summary of all public PGP keys in the keyring.\n      operationId: getWKDstatus\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/system/pgp/wkd\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - keys\n                  - wkd\n                properties:\n                  keys:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PgpKey'\n                  wkd:\n                    type: object\n                    # Because keys are dynamic (emails), there's not a lot we can do here :(\n              example:\n                keys:\n                  - ids:\n                    - Power Mail-in-a-Box Management Daemon <administrator@mailinabox.lan>\n                    master_fpr: 62037B88B743626997E63EFE2469394FBC0CF8DA\n                    revoked: false\n                    subkeys:\n                      - algorithm: RSA\n                        auth: true\n                        cert: true\n                        encr: true\n                        sign: true\n                        bits: 4096\n                        expired: false\n                        expires: 1617378256\n                        expires_date: 04/02/21\n                        expires_days: 179\n                        fpr: 62037B88B743626997E63EFE2469394FBC0CF8DA\n                        master: true\n                  - ids:\n                    - Someone You Used To Know <nobody@nowhere>\n                    master_fpr: B9BD7309D18784392D812050A174D33254CC2820\n                    revoked: false\n                    subkeys:\n                      - algorithm: RSA\n                        auth: true\n                        cert: true\n                        encr: true\n                        sign: true\n                        bits: 4096\n                        expired: false\n                        expires: 1615290372\n                        expires_date: 03/09/21\n                        expires_days: 155\n                        fpr: B9BD7309D18784392D812050A174D33254CC2820\n                        master: true\n                  - ids:\n                    - Linus Torvalds <torvalds@kernel.org>\n                    - Linus Torvalds <torvalds@linux-foundation.org>\n                    master_fpr: ABAF11C65A2970B130ABE3C479BE3E4300411886\n                    revoked: false\n                    subkeys:\n                      - algorithm: RSA\n                        auth: false\n                        cert: true\n                        encr: false\n                        sign: true\n                        bits: 2048\n                        expired: false\n                        expires: null\n                        expires_date: null\n                        expires_days: null\n                        fpr: ABAF11C65A2970B130ABE3C479BE3E4300411886\n                        master: true\n                      - algorithm: RSA\n                        auth: false\n                        cert: false\n                        encr: true\n                        sign: false\n                        bits: 2048\n                        expired: false\n                        expires: null\n                        expires_date: null\n                        expires_days: null\n                        fpr: AEE416F7DCCB753BB3D5609D88BCE80F012F54CA\n                        master: false\n                wkd:\n                  me@mailinabox.lan:\n                    selection: null\n                    options: []\n                  administrator@mailinabox.lan:\n                    selection: 62037B88B743626997E63EFE2469394FBC0CF8DA\n                    options:\n                      - 62037B88B743626997E63EFE2469394FBC0CF8DA\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /ssl/status:\n    get:\n      tags:\n        - SSL\n      summary: Get SSL status\n      description: Returns the SSL status for all domains.\n      operationId: getSSLStatus\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/ssl/status\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SSLStatusResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /ssl/csr/{domain}:\n    post:\n      tags:\n        - SSL\n      summary: Generate SSL CSR\n      description: |\n        Generates a Certificate Signing Request (CSR) for a domain & country code.\n      operationId: generateSSLCSR\n      parameters:\n        - in: path\n          name: domain\n          schema:\n            $ref: '#/components/schemas/Hostname'\n          required: true\n          description: Domain to generate CSR for.\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/SSLCSRGenerateRequest'\n            example:\n              countrycode: 'GB'\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/ssl/csr/<hostname>\" \\\n              -d \"countrycode=<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/SSLCSRGenerateResponse'\n              example: |\n                -----BEGIN CERTIFICATE REQUEST-----\n                MIICaDCCAVACAQAwIzELMAkGA1UEBhMCQlMxFDASBgNVBAMMC2V4YW1wbGUuY29t\n                ...\n                JmFDQESSfUxLPHLC660Wnf3GmrP/duZHpPC+qTe8b1AlQ7zDT3cOaAQ+Mb0=\n                -----END CERTIFICATE REQUEST-----\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /ssl/install:\n    post:\n      tags:\n        - SSL\n      summary: Install SSL certificate\n      description: |\n        Installs a custom certificate. The chain certificate is optional.\n      operationId: installSSLCertificate\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/SSLCertificateInstallRequest'\n            example:\n              domain: example.com\n              cert: CERT_STRING\n              chain: CHAIN_STRING\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/ssl/install\" \\\n              -d \"domain=<hostname>\" \\\n              -d \"cert=<string>\" \\\n              -d \"chain=<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/SSLCertificateInstallResponse'\n              example: OK\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /ssl/provision:\n    post:\n      tags:\n        - SSL\n      summary: Provision SSL certificates\n      description: |\n        Provisions certificates for all domains.\n      operationId: provisionSSLCertificates\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/ssl/provision\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SSLCertificatesProvisionResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /dns/secondary-nameserver:\n    get:\n      tags:\n        - DNS\n      summary: Get DNS secondary nameserver\n      description: |\n        Returns a list of nameserver hostnames.\n      operationId: getDnsSecondaryNameserver\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/dns/secondary-nameserver\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DNSSecondaryNameserverResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n    post:\n      tags:\n        - DNS\n      summary: Add DNS secondary nameserver\n      description: |\n        Adds one or more secondary nameservers.\n      operationId: addDnsSecondaryNameserver\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/DNSSecondaryNameserverAddRequest'\n            example:\n              hostnames: ns2.hostingcompany.com, ns3.hostingcompany.com\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/dns/secondary-nameserver\" \\\n              -d \"hostnames=<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/DNSSecondaryNameserverAddResponse'\n              example: 'updated DNS: example.com'\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Could not resolve the IP address of badhostname\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /dns/zones:\n    get:\n      tags:\n        - DNS\n      summary: Get DNS zones\n      description: Returns an array of all managed top-level domains.\n      operationId: getDnsZones\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/dns/zones\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DNSZonesResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /dns/zonefile/{zone}:\n    parameters:\n      - in: path\n        name: zone\n        schema:\n          $ref: '#/components/schemas/Hostname'\n        required: true\n        description: Hostname\n    get:\n      tags:\n        - DNS\n      summary: Get DNS zonefile\n      description: Returns a DNS zone file for a hostname.\n      operationId: getDnsZonefile\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/dns/zonefile/<zone>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DNSZonefileResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /dns/update:\n    post:\n      tags:\n        - DNS\n      summary: Update DNS\n      description: Updates the DNS. Involves creating zone files and restarting `nsd`.\n      operationId: updateDns\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/DNSUpdateRequest'\n            example:\n              force: 1\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/dns/update\" \\\n              -d \"force=<integer>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DNSUpdateResponse'\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /dns/custom:\n    get:\n      tags:\n        - DNS\n      summary: Get DNS custom records\n      description: Returns all custom DNS records.\n      operationId: getDnsCustomRecords\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/dns/custom\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DNSCustomRecordsResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /dns/custom/{qname}/{rtype}:\n    parameters:\n      - in: path\n        name: qname\n        schema:\n          $ref: '#/components/schemas/Hostname'\n        required: true\n        description: DNS record query name\n      - in: path\n        name: rtype\n        schema:\n          $ref: '#/components/schemas/DNSRecordType'\n        required: true\n        description: Record type\n    get:\n      tags:\n        - DNS\n      summary: Get DNS custom records\n      description: Returns all custom records for the specified query name and type.\n      operationId: getDnsCustomRecordsForQNameAndType\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/dns/custom/<qname>/<rtype>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DNSCustomRecordsResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n    post:\n      tags:\n        - DNS\n      summary: Add DNS custom record\n      description: Adds a custom DNS record for the specified query name and type.\n      operationId: addDnsCustomRecord\n      requestBody:\n        $ref: '#/components/requestBodies/DNSCustomRecordRequest'\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/dns/custom/<qname>/<rtype>\" \\\n              -H \"Content-Type: text/plain\" \\\n              --data-raw \"<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/DNSCustomRecordUpsertResponse'\n              example: 'updated DNS: example.com'\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: \"'badhostname' does not appear to be an IPv4 or IPv6 address\"\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n    put:\n      tags:\n        - DNS\n      summary: Update DNS custom record\n      description: Updates an existing DNS custom record value for the specified qname and type.\n      operationId: updateDnsCustomRecord\n      requestBody:\n        $ref: '#/components/requestBodies/DNSCustomRecordRequest'\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -x PUT \"https://{host}/admin/dns/custom/<qname>/<rtype>\" \\\n              -H \"Content-Type: text/plain\" \\\n              --data-raw \"<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/DNSCustomRecordUpsertResponse'\n              example: 'updated DNS: example.com'\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: \"'badhostname' does not appear to be an IPv4 or IPv6 address\"\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n    delete:\n      tags:\n        - DNS\n      summary: Remove DNS custom record\n      description: Removes a DNS custom record for the specified domain, type & value.\n      operationId: removeDnsCustomRecord\n      requestBody:\n        $ref: '#/components/requestBodies/DNSCustomRecordRequest'\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X DELETE \"https://{host}/admin/dns/custom/<qname>/<rtype>\" \\\n              -H \"Content-Type: text/plain\" \\\n              --data-raw \"<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/DNSCustomRecordRemoveResponse'\n              example: 'updated DNS: example.com'\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: badhostname is not a domain name or a subdomain of a domain name managed by this box\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /dns/custom/{qname}:\n    parameters:\n      - in: path\n        name: qname\n        schema:\n          $ref: '#/components/schemas/Hostname'\n        required: true\n        description: DNS query name.\n    get:\n      tags:\n        - DNS\n      summary: Get DNS custom A records\n      description: Returns all custom A records for the specified query name.\n      operationId: getDnsCustomARecordsForQName\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/dns/custom/<qname>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DNSCustomRecordsResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n    post:\n      tags:\n        - DNS\n      summary: Add DNS custom A record\n      description: Adds a custom DNS A record for the specified query name.\n      operationId: addDnsCustomARecord\n      requestBody:\n        $ref: '#/components/requestBodies/DNSCustomRecordRequest'\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/dns/custom/<qname>\" \\\n              -H \"Content-Type: text/plain\" \\\n              --data-raw \"<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/DNSCustomRecordUpsertResponse'\n              example: 'updated DNS: example.com'\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: \"'badhostname' does not appear to be an IPv4 or IPv6 address\"\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n    put:\n      tags:\n        - DNS\n      summary: Update DNS custom A record\n      description: Updates an existing DNS custom A record value for the specified qname.\n      operationId: updateDnsCustomARecord\n      requestBody:\n        $ref: '#/components/requestBodies/DNSCustomRecordRequest'\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -x PUT \"https://{host}/admin/dns/custom/<qname>\" \\\n              -H \"Content-Type: text/plain\" \\\n              --data-raw \"<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/DNSCustomRecordUpsertResponse'\n              example: 'updated DNS: example.com'\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: \"'badhostname' does not appear to be an IPv4 or IPv6 address\"\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n    delete:\n      tags:\n        - DNS\n      summary: Remove DNS custom A record\n      description: Removes a DNS custom A record for the specified domain & value.\n      operationId: removeDnsCustomARecord\n      requestBody:\n        $ref: '#/components/requestBodies/DNSCustomRecordRequest'\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X DELETE \"https://{host}/admin/dns/custom/<qname>\" \\\n              -H \"Content-Type: text/plain\" \\\n              --data-raw \"<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/DNSCustomRecordRemoveResponse'\n              example: 'updated DNS: example.com'\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: badhostname is not a domain name or a subdomain of a domain name managed by this box\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /dns/dump:\n    get:\n      tags:\n        - DNS\n      summary: Get DNS dump\n      description: Returns all DNS records.\n      operationId: getDnsDump\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/dns/dump\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DNSDumpResponse'\n              example:\n                - - example1.com\n                  - - explanation: Required. Specifies the hostname (and priority) of the machine that handles @example.com mail.\n                      qname: example1.com\n                      rtype: MX\n                      value: 10 box.example1.com.\n                - - example2.com\n                  - - explanation: Required. Specifies the hostname (and priority) of the machine that handles @example.com mail.\n                      qname: example2.com\n                      rtype: MX\n                      value: 10 box.example2.com.\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mail/users:\n    get:\n      tags:\n        - Mail\n      summary: Get mail users\n      description: Returns all mail users.\n      operationId: getMailUsers\n      parameters:\n        - in: query\n          name: format\n          schema:\n            $ref: '#/components/schemas/MailUsersResponseFormat'\n          description: The format of the response.\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/mail/users?format=<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MailUsersResponse'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/MailUsersSimpleResponse'\n              example: |\n                user1@example.com\n                user2@example.com\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mail/users/add:\n    post:\n      tags:\n        - Mail\n      summary: Add mail user\n      description: Adds a new mail user.\n      operationId: addMailUser\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/MailUserAddRequest'\n            examples:\n              normal:\n                summary: Normal user\n                value:\n                  email: user@example.com\n                  password: s3curE_pa5Sw0rD\n                  privileges: ''\n              admin:\n                summary: Admin user\n                value:\n                  email: user@example.com\n                  password: s3curE_pa5Sw0rD\n                  privileges: admin\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/mail/users/add\" \\\n              -d \"email=<email>\" \\\n              -d \"password=<password>\" \\\n              -d \"privileges=<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/MailUserAddResponse'\n              example: |\n                mail user added\n                updated DNS: OpenDKIM configuration\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Invalid email address\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mail/users/remove:\n    post:\n      tags:\n        - Mail\n      summary: Remove mail user\n      description: Removes an existing mail user.\n      operationId: removeMailUser\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/MailUserRemoveRequest'\n            example:\n              email: user@example.com\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/mail/users/remove\" \\\n              -d \"email=<email>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/MailUserRemoveResponse'\n              example: OK\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: That's not a user (invalid@example.com)\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mail/users/privileges/add:\n    post:\n      tags:\n        - Mail\n      summary: Add mail user privilege\n      description: Adds a privilege to an existing mail user.\n      operationId: addMailUserPrivilege\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/MailUserAddPrivilegeRequest'\n            example:\n              email: user@example.com\n              privilege: admin\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/mail/users/privileges/add\" \\\n              -d \"email=<email>\" \\\n              -d \"privilege=<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/MailUserAddPrivilegeResponse'\n              example: OK\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: That's not a user (invalid@example.com)\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mail/users/privileges/remove:\n    post:\n      tags:\n        - Mail\n      summary: Remove mail user privilege\n      description: Removes a privilege from an existing mail user.\n      operationId: removeMailUserPrivilege\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/MailUserRemovePrivilegeRequest'\n            example:\n              email: user@example.com\n              privilege: admin\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/mail/users/privileges/remove\" \\\n              -d \"email=<email>\" \\\n              -d \"privilege=<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/MailUserRemovePrivilegeResponse'\n              example: OK\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: That's not a user (invalid@example.com)\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mail/users/password:\n    post:\n      tags:\n        - Mail\n      summary: Set mail user password\n      description: Sets a password for an existing mail user.\n      operationId: setMailUserPassword\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/MailUserSetPasswordRequest'\n            example:\n              email: user@example.com\n              password: s3curE_pa5Sw0rD\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/mail/users/password\" \\\n              -d \"email=<email>\" \\\n              -d \"password=<password>\" \\\n              -u \"<email>:<password>\" \\\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/MailUserSetPasswordResponse'\n              example: OK\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Passwords must be at least eight characters\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mail/users/privileges:\n    get:\n      tags:\n        - Mail\n      summary: Get mail user privileges\n      description: Returns all privileges for an existing mail user.\n      operationId: getMailUserPrivileges\n      parameters:\n        - in: query\n          name: email\n          schema:\n            $ref: '#/components/schemas/Email'\n          description: The email you want to get privileges for.\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/mail/users/privileges?email=<email>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/MailUserPrivilegesResponse'\n              example: admin\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mail/domains:\n    get:\n      tags:\n        - Mail\n      summary: Get mail domains\n      description: Returns all mail domains.\n      operationId: getMailDomains\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/mail/domains\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/MailDomainsResponse'\n              example: |\n                example1.com\n                example2.com\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mail/aliases:\n    get:\n      tags:\n        - Mail\n      summary: Get mail aliases\n      description: Returns all mail aliases.\n      operationId: getMailAliases\n      parameters:\n        - in: query\n          name: format\n          schema:\n            $ref: '#/components/schemas/MailAliasesResponseFormat'\n          description: The format of the response.\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/mail/aliases?format=<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MailAliasByDomain'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/MailAliasesSimpleResponse'\n                example: |\n                  abuse@example.com\tadministrator@example.com\n                  admin@example.com\tadministrator@example.com\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mail/aliases/add:\n    post:\n      tags:\n        - Mail\n      summary: Upsert mail alias\n      description: |\n        Adds or updates a mail alias. If updating, you need to set `update_if_exists: 1`.\n      operationId: upsertMailAlias\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/MailAliasUpsertRequest'\n            examples:\n              regular:\n                summary: Regular alias\n                value:\n                  update_if_exists: 0\n                  address: user@example.com\n                  forwards_to: user2@example.com\n                  permitted_senders:\n              catchall:\n                summary: Catch-all\n                value:\n                  update_if_exists: 0\n                  address: '@example.com'\n                  forwards_to: user@otherexample.com\n                  permitted_senders:\n              domainalias:\n                summary: Domain alias\n                value:\n                  update_if_exists: 0\n                  address: '@example.com'\n                  forwards_to: '@otherexample.com'\n                  permitted_senders:\n              update:\n                summary: Update existing alias\n                value:\n                  update_if_exists: 1\n                  address: user@example.com\n                  forwards_to: user2@example.com\n                  permitted_senders: user3@example.com, user4@example.com\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/mail/aliases/add\" \\\n              -d \"update_if_exists=<integer>\" \\\n              -d \"address=<email>\" \\\n              -d \"forwards_to=<string>\" \\\n              -d \"permitted_senders=<string>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/MailAliasUpsertResponse'\n              example: alias updated\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Invalid email address (invalid@example.com)\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mail/aliases/remove:\n    post:\n      tags:\n        - Mail\n      summary: Remove mail alias\n      description: Removes a mail alias.\n      operationId: removeMailAlias\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/MailAliasRemoveRequest'\n            example:\n              address: user@example.com\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/mail/aliases/remove\" \\\n              -d \"address=<email>\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/MailAliasRemoveResponse'\n              example: alias removed\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n                example: That's not an alias (invalid@example)\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /web/domains:\n    get:\n      tags:\n        - Web\n      summary: Get web domains\n      description: Returns all static web domains.\n      operationId: getWebDomains\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X GET \"https://{host}/admin/web/domains\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WebDomain'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /web/update:\n    post:\n      tags:\n        - Web\n      summary: Update web\n      description: Updates static websites, used for updating domain root directories.\n      operationId: updateWeb\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/web/update\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/WebUpdateResponse'\n              example: web updated\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mfa/status:\n    post:\n      tags:\n        - MFA\n      summary: Retrieve MFA status for you or another user\n      description: Retrieves which type of MFA is used and configuration\n      operationId: mfaStatus\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/mfa/status\" \\\n              -u \"<email>:<password>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MfaStatusResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mfa/totp/enable:\n    post:\n      tags:\n        - MFA\n      summary: Enable TOTP authentication\n      description: Enables TOTP authentication for the currently logged-in admin user\n      operationId: mfaTotpEnable\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/mfa/totp/enable\" \\\n              -d \"code=123456\" \\\n              -d \"secret=<string>\" \\\n              -u \"<email>:<password>\"\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/MfaEnableRequest'\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/MfaEnableSuccessResponse'\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\n  /mfa/disable:\n    post:\n      tags:\n        - MFA\n      summary: Disable multi-factor authentication for you or another user\n      description: Disables multi-factor authentication for the currently logged-in admin user or another user if a 'user' parameter is submitted. Either disables all multi-factor authentication methods or the method corresponding to the optional property `mfa_id`.\n      operationId: mfaTotpDisable\n      requestBody:\n        required: false\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/MfaDisableRequest'\n      x-codeSamples:\n        - lang: curl\n          source: |\n            curl -X POST \"https://{host}/admin/mfa/totp/disable\" \\\n              -u \"<email>:<user_key>\"\n      responses:\n        200:\n          description: Successful operation\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/MfaDisableSuccessResponse'\n        403:\n          description: Forbidden\n          content:\n            text/html:\n              schema:\n                type: string\ncomponents:\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n      description: |\n        Credentials can be supplied using the `Authorization` header in\n        format `Authorization: Basic {access-token}`.\n\n        The `access-token` is comprised of the Base64 encoding of `username:password`.\n        The `username` is the mail user's email address, and `password` can either be the mail user's\n        password, or the `api_key` returned from the `login` operation.\n\n        When using `curl`, you can supply user credentials using the `-u` or `--user` parameter.\n  requestBodies:\n    DNSCustomRecordRequest:\n      required: true\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: '1.2.3.4'\n            description: The value of the DNS record.\n          example: '1.2.3.4'\n  schemas:\n    MailUsersResponseFormat:\n      type: string\n      enum:\n        - text\n        - json\n      example: json\n      description: Response format (`application/json` or `text/html`).\n    MailAliasesResponseFormat:\n      type: string\n      enum:\n        - text\n        - json\n      example: json\n      description: Response format (`application/json` or `text/html`).\n    MailUserSetPasswordResponse:\n      type: string\n      example: OK\n      description: Mail user set password response.\n    MailUserRemoveResponse:\n      type: string\n      example: OK\n      description: Mail user remove response.\n    MailUserAddResponse:\n      type: string\n      example: |\n        mail user added\n        updated DNS: OpenDKIM configuration\n      description: |\n        Mail user add response.\n\n        Can include information about operations related to adding new users, like updating DNS.\n    MailUserAddPrivilegeResponse:\n      type: string\n      example: OK\n      description: Mail user add admin privilege response.\n    MailUserRemovePrivilegeResponse:\n      type: string\n      example: OK\n      description: Mail user remove admin privilege response.\n    MailUsersSimpleResponse:\n      type: string\n      example: |\n        user1@example.com\n        user2@example.com\n      description: Get mail users text format response.\n    MailUserPrivilegesResponse:\n      $ref: '#/components/schemas/MailUserPrivilege'\n      description: Mail user privileges response.\n      example: admin\n    MailDomainsResponse:\n      type: string\n      example: |\n        example1.com\n        example2.com\n      description: Mail domains response.\n    MailUsersResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/MailUserByDomain'\n      description: Get mail aliases JSON format response.\n    MailUserByDomain:\n      type: object\n      required:\n        - domain\n        - users\n      properties:\n        domain:\n          $ref: '#/components/schemas/Hostname'\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/MailUser'\n      description: Mail users by domain.\n    MailUser:\n      type: object\n      required:\n        - email\n        - privileges\n        - status\n      properties:\n        email:\n          $ref: '#/components/schemas/Email'\n        privileges:\n          type: array\n          items:\n            $ref: '#/components/schemas/MailUserPrivilege'\n        status:\n          $ref: '#/components/schemas/MailUserStatus'\n        mailbox:\n          type: string\n          example: /home/user-data/mail/mailboxes/example.com/user\n      description: Mail user details.\n    MailAliasesSimpleResponse:\n      type: string\n      example: |\n        abuse@example.com\tadministrator@example.com\n        admin@example.com\tadministrator@example.com\n      description: Get mail aliases text format response.\n    MailAliasByDomain:\n      type: object\n      required:\n        - domain\n        - aliases\n      properties:\n        domain:\n          $ref: '#/components/schemas/Hostname'\n        aliases:\n          type: array\n          items:\n            $ref: '#/components/schemas/MailAlias'\n      description: Mail aliases by domain.\n    MailAlias:\n      type: object\n      required:\n        - address\n        - address_display\n        - forwards_to\n        - permitted_senders\n        - required\n      properties:\n        address:\n          $ref: '#/components/schemas/Email'\n        address_display:\n          $ref: '#/components/schemas/Email'\n        forwards_to:\n          type: array\n          items:\n            $ref: '#/components/schemas/Email'\n        permitted_senders:\n          type: array\n          nullable: true\n          items:\n            $ref: '#/components/schemas/Email'\n        required:\n          type: boolean\n          example: true\n      description: Mail alias details.\n    MailAliasUpsertResponse:\n      type: string\n      example: alias updated\n      description: Mail alias add/update response.\n    MailAliasUpsertRequest:\n      type: object\n      required:\n        - update_if_exists\n        - address\n        - forwards_to\n        - permitted_senders\n      properties:\n        update_if_exists:\n          type: integer\n          format: int32\n          minimum: 0\n          maximum: 1\n          example: 1\n          description: Set to `1` when updating an alias.\n        address:\n          $ref: '#/components/schemas/Email'\n        forwards_to:\n          type: string\n          example: user1@example.com, user2@example.com\n          description: |\n            If adding a regular or catch-all alias, the format needs to be `user@example.com`.\n            Multiple address can be separated by newlines or commas.\n\n            If adding a domain alias, the format needs to be `@example.com`.\n        permitted_senders:\n          type: string\n          nullable: true\n          example: user1@example.com, user2@example.com\n          description: |\n            Mail users that can send mail claiming to be from any address on the alias domain.\n            Multiple address can be separated by newlines or commas.\n\n            Leave empty to allow any mail user listed in `forwards_to` to send mail claiming to be from any address on the alias domain.\n      description: Mail alias upsert request.\n    MailAliasRemoveResponse:\n      type: string\n      example: alias removed\n      description: Mail alias remove response.\n    MailAliasRemoveRequest:\n      type: object\n      required:\n        - address\n      properties:\n        address:\n          $ref: '#/components/schemas/Email'\n      description: Mail aliases remove request.\n    DNSRecordType:\n      enum:\n        - A\n        - AAAA\n        - CAA\n        - CNAME\n        - TXT\n        - MX\n        - SRV\n        - SSHFP\n        - NS\n      example: MX\n      description: DNS record type.\n    DNSDumpResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/DNSDumpDomains'\n      description: DNS dump response.\n    DNSDumpDomains:\n      type: array\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/Hostname'\n          - $ref: '#/components/schemas/DNSDumpDomainRecords'\n      description: |\n        A list of records per domain.\n\n        The first item in the list is the domain and the second item is the list of records.\n    DNSDumpDomainRecords:\n      type: array\n      items:\n        $ref: '#/components/schemas/DNSDumpDomainRecord'\n      description: List of domain records.\n    DNSDumpDomainRecord:\n      type: object\n      required:\n        - explanation\n        - qname\n        - type\n        - value\n      properties:\n        explanation:\n          type: string\n          example: Required. Specifies the hostname (and priority) of the machine that handles @example.com mail\n        qname:\n          $ref: '#/components/schemas/Hostname'\n        rtype:\n          $ref: '#/components/schemas/DNSRecordType'\n        value:\n          type: string\n          example: 10 example.com.\n      description: Domain DNS record details.\n    DNSCustomRecord:\n      type: object\n      required:\n        - qname\n        - rtype\n        - value\n      properties:\n        qname:\n          $ref: '#/components/schemas/Hostname'\n        rtype:\n          $ref: '#/components/schemas/DNSRecordType'\n        value:\n          type: string\n          example: 10 example.com.\n      description: Custom DNS record detail detail.\n    DNSCustomRecordsResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/DNSCustomRecord'\n      description: Custom DNS records response.\n    DNSZonesResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/Hostname'\n      description: DNS zones response.\n    DNSZonefileResponse:\n      type: string\n    DNSSecondaryNameserverResponse:\n      type: object\n      required:\n        - hostnames\n      properties:\n        hostnames:\n          type: array\n          items:\n            type: string\n            example: ns1.example.com\n      description: Secondary nameserver/s response.\n    DNSCustomRecordRemoveResponse:\n      type: string\n      example: 'updated DNS: example.com'\n      description: Custom DNS record remove response.\n    DNSCustomRecordUpsertResponse:\n      type: string\n      example: 'updated DNS: example.com'\n      description: Custom DNS record add response.\n    DNSUpdateRequest:\n      type: object\n      required:\n        - force\n      properties:\n        force:\n          type: integer\n          format: int32\n          minimum: 0\n          maximum: 1\n          example: 1\n          description: Force an update even if mailinabox detects no changes are required.\n      description: DNS update request.\n    DNSUpdateResponse:\n      type: string\n      example: |\n        updated DNS: example1.com,example2.com\n      description: DNS update response.\n    DNSSecondaryNameserverAddRequest:\n      type: object\n      required:\n        - hostnames\n      properties:\n        hostnames:\n          type: string\n          description: Hostnames separated with commas or spaces.\n          example: ns2.hostingcompany.com, ns3.hostingcompany.com\n      description: Secondary nameserver/s add request.\n    DNSSecondaryNameserverAddResponse:\n      type: string\n      example: 'updated DNS: example.com'\n      description: Secondary nameserver/s add response.\n    SystemPrivacyUpdateRequest:\n      type: object\n      required:\n        - value\n      properties:\n        value:\n          $ref: '#/components/schemas/SystemPrivacyStatus'\n      description: Update system privacy request.\n    SystemPrivacyStatus:\n      type: string\n      enum:\n        - private\n        - 'off'\n      example: private\n      description: System privacy status.\n    MailUserSetPasswordRequest:\n      type: object\n      required:\n        - email\n        - password\n      properties:\n        email:\n          $ref: '#/components/schemas/Email'\n        password:\n          type: string\n          format: password\n      description: Mail user set password request.\n    MailUserAddRequest:\n      type: object\n      required:\n        - email\n        - password\n        - privileges\n      properties:\n        email:\n          $ref: '#/components/schemas/Email'\n        password:\n          type: string\n          format: password\n        privileges:\n          $ref: '#/components/schemas/MailUserPrivilege'\n      description: Mail user add request.\n    MailUserRemoveRequest:\n      type: object\n      required:\n        - email\n      properties:\n        email:\n          $ref: '#/components/schemas/Email'\n      description: Mail user remove request.\n    MailUserStatus:\n      type: string\n      enum:\n        - active\n        - inactive\n      example: active\n      description: Mail user status.\n    MailUserPrivilege:\n      type: string\n      enum:\n        - admin\n        - ''\n      example: admin\n      description: Mail user privilege.\n    MailUserAddPrivilegeRequest:\n      type: object\n      required:\n        - email\n        - privilege\n      properties:\n        email:\n          $ref: '#/components/schemas/Email'\n        privilege:\n          $ref: '#/components/schemas/MailUserPrivilege'\n      description: Mail user add privilege request.\n    MailUserRemovePrivilegeRequest:\n      type: object\n      required:\n        - email\n        - privilege\n      properties:\n        email:\n          $ref: '#/components/schemas/Email'\n        privilege:\n          $ref: '#/components/schemas/MailUserPrivilege'\n      description: Mail user remove privilege request.\n    SSLCSRGenerateRequest:\n      type: object\n      required:\n        - countrycode\n      properties:\n        countrycode:\n          type: string\n          example: GB\n      description: Generate SSL CSR request.\n    SSLCSRGenerateResponse:\n      type: string\n      example: |\n        -----BEGIN CERTIFICATE REQUEST-----\n        MIICaDCCAVACAQAwIzELMAkGA1UEBhMCQlMxFDASBgNVBAMMC2V4YW1wbGUuY29t\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3K6dwLM2Nk8kVhIBaZmp\n        eY6y7O0T3jrexEKlW839TVYdcH+K35V1NxilbMFKMuHeowGwFyyiqOy/OUYNeq+T\n        Rz3s4b1qG2p01dwlsXHHYmXLYTAhvqvY+CU5ksieuZbyHRTwbHViQ0xtRXwoVCnj\n        CkN7kJVpkLfVN0/BG6NBFpv/JI8F+hwp+IHdkC1gUXRrLJNC79ERqFP8HoqdQWNw\n        OGGFaOe2aQhvj2zt8wFncyKVc40UKVbSzGGzdL2MPiAJHgZ2lmeY1xDyX1lOt12R\n        IFPwtxmbxaxYaVfe2hxl7m88xV3OjYcKgwVYDusk2XJ37cGew5g+NbBvzEeEUpF9\n        5wIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAD7UPC3/Nkgpn53mT9puUonYdJg9\n        SD8vvTK/N78CzoEgPNyq+bYbqlcvVPKIdItf9TMiqfOSvW3e3NvkRisYle8Qp+0C\n        8pafXBvQ9eHt5CFeJn4sH9GnxeflOZT/P9Jnp71KtZQvOobirX4GgEWs79g+/NHb\n        Zyf8rbadt9HruNhKA5nlP8cn7Rdc/iuJU8MVSQszI1s1DEcXMPxr6iqb2g87/ifH\n        lWcK59kvRJkCcPhPzjpUy9NulucH4WFA/WqKeDNFS/oC+upV5w8EDEcfnenJFG+N\n        JmFDQESSfUxLPHLC660Wnf3GmrP/duZHpPC+qTe8b1AlQ7zDT3cOaAQ+Mb0=\n        -----END CERTIFICATE REQUEST-----\n      description: Generate SSL CSR response.\n    SSLCertificateInstallRequest:\n      type: object\n      required:\n        - domain\n        - cert\n        - chain\n      properties:\n        domain:\n          $ref: '#/components/schemas/Hostname'\n        cert:\n          type: string\n          description: TLS/SSL certificate.\n          example: |\n            -----BEGIN CERTIFICATE-----\n            MIICaDCCAVACAQAwIzELMAkGA1UEBhMCQlMxFDASBgNVBAMMC2V4YW1wbGUuY29t\n            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3K6dwLM2Nk8kVhIBaZmp\n            eY6y7O0T3jrexEKlW839TVYdcH+K35V1NxilbMFKMuHeowGwFyyiqOy/OUYNeq+T\n            Rz3s4b1qG2p01dwlsXHHYmXLYTAhvqvY+CU5ksieuZbyHRTwbHViQ0xtRXwoVCnj\n            CkN7kJVpkLfVN0/BG6NBFpv/JI8F+hwp+IHdkC1gUXRrLJNC79ERqFP8HoqdQWNw\n            OGGFaOe2aQhvj2zt8wFncyKVc40UKVbSzGGzdL2MPiAJHgZ2lmeY1xDyX1lOt12R\n            IFPwtxmbxaxYaVfe2hxl7m88xV3OjYcKgwVYDusk2XJ37cGew5g+NbBvzEeEUpF9\n            5wIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAD7UPC3/Nkgpn53mT9puUonYdJg9\n            SD8vvTK/N78CzoEgPNyq+bYbqlcvVPKIdItf9TMiqfOSvW3e3NvkRisYle8Qp+0C\n            8pafXBvQ9eHt5CFeJn4sH9GnxeflOZT/P9Jnp71KtZQvOobirX4GgEWs79g+/NHb\n            Zyf8rbadt9HruNhKA5nlP8cn7Rdc/iuJU8MVSQszI1s1DEcXMPxr6iqb2g87/ifH\n            lWcK59kvRJkCcPhPzjpUy9NulucH4WFA/WqKeDNFS/oC+upV5w8EDEcfnenJFG+N\n            JmFDQESSfUxLPHLC660Wnf3GmrP/duZHpPC+qTe8b1AlQ7zDT3cOaAQ+Mb0=\n            -----END CERTIFICATE-----\n        chain:\n          type: string\n          description: TLS/SSL intermediate chain (if provided, else empty string).\n          example: |\n            -----BEGIN CERTIFICATE-----\n            MIICaDCCAVACAQAwIzELMAkGA1UEBhMCQlMxFDASBgNVBAMMC2V4YW1wbGUuY29t\n            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3K6dwLM2Nk8kVhIBaZmp\n            eY6y7O0T3jrexEKlW839TVYdcH+K35V1NxilbMFKMuHeowGwFyyiqOy/OUYNeq+T\n            Rz3s4b1qG2p01dwlsXHHYmXLYTAhvqvY+CU5ksieuZbyHRTwbHViQ0xtRXwoVCnj\n            CkN7kJVpkLfVN0/BG6NBFpv/JI8F+hwp+IHdkC1gUXRrLJNC79ERqFP8HoqdQWNw\n            OGGFaOe2aQhvj2zt8wFncyKVc40UKVbSzGGzdL2MPiAJHgZ2lmeY1xDyX1lOt12R\n            IFPwtxmbxaxYaVfe2hxl7m88xV3OjYcKgwVYDusk2XJ37cGew5g+NbBvzEeEUpF9\n            5wIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAD7UPC3/Nkgpn53mT9puUonYdJg9\n            SD8vvTK/N78CzoEgPNyq+bYbqlcvVPKIdItf9TMiqfOSvW3e3NvkRisYle8Qp+0C\n            8pafXBvQ9eHt5CFeJn4sH9GnxeflOZT/P9Jnp71KtZQvOobirX4GgEWs79g+/NHb\n            Zyf8rbadt9HruNhKA5nlP8cn7Rdc/iuJU8MVSQszI1s1DEcXMPxr6iqb2g87/ifH\n            lWcK59kvRJkCcPhPzjpUy9NulucH4WFA/WqKeDNFS/oC+upV5w8EDEcfnenJFG+N\n            JmFDQESSfUxLPHLC660Wnf3GmrP/duZHpPC+qTe8b1AlQ7zDT3cOaAQ+Mb0=\n            -----END CERTIFICATE-----\n      description: Install certificate request. `chain` can be an empty string.\n    SSLCertificateInstallResponse:\n      type: string\n      example: OK\n      description: Install certificate response.\n    SSLCertificatesProvisionResponse:\n      type: object\n      required:\n        - requests\n      properties:\n        requests:\n          type: array\n          items:\n            type: object\n            required:\n              - log\n              - result\n              - domains\n            properties:\n              log:\n                type: array\n                items:\n                  type: string\n                example:\n                  - 'The domain name does not resolve to this machine: [Not Set] (A), [Not Set] (AAAA).'\n              result:\n                type: string\n                enum:\n                  - installed\n                  - error\n                  - skipped\n                example: installed\n              domains:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Hostname'\n      description: SSL certificates provision response.\n    SystemPrivacyStatusResponse:\n      type: boolean\n      description: |\n        System privacy status response.\n\n          - `true`: Private, new-version checks will not be performed\n          - `false`: Not private, new-version checks will be performed\n      example: false\n    SystemVersionResponse:\n      type: string\n      description: System version response.\n      example: v0.46\n    SystemVersionUpstreamResponse:\n      type: string\n      description: System version upstream response.\n      example: v0.47\n    SystemUpdatesResponse:\n      type: string\n      description: System updates response.\n      example: |\n        libgnutls30 (3.5.18-1ubuntu1.4)\n        libxau6 (1:1.0.8-1ubuntu1)\n    SystemUpdatePackagesResponse:\n      type: string\n      example: |\n        Reading package lists...\n        Building dependency tree...\n        Reading state information...\n        Calculating upgrade...\n        The following packages will be upgraded:\n          cloud-init grub-common grub-pc grub-pc-bin grub2-common libgnutls30\n          libldap-2.4-2 libldap-common libxau6 linux-firmware python3-distupgrade\n          qemu-guest-agent sosreport ubuntu-release-upgrader-core\n        14 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n        Need to get 79.9 MB of archives.\n        After this operation, 3893 kB of additional disk space will be used.\n        Get:1 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 libgnutls30 amd64 3.5.18-1ubuntu1.4 [645 kB]\n        Preconfiguring packages ...\n        Fetched 79.9 MB in 2s (52.4 MB/s)\n        (Reading database ... 48457 files and directories currently installed.)\n      description: System update packages response.\n    SystemPrivacyUpdateResponse:\n      type: string\n      example: OK\n      description: System privacy update response.\n    SystemRebootStatusResponse:\n      type: boolean\n      description: |\n        System reboot status response.\n\n          - `true`: A reboot is required\n          - `false`: A reboot is not required\n      example: true\n    SystemRebootResponse:\n      type: string\n      example: No reboot is required, so it is not allowed.\n      description: System reboot response.\n    SystemStatusResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/StatusEntry'\n      description: System status response.\n    StatusEntry:\n      type: object\n      required:\n        - type\n        - text\n        - extra\n      properties:\n        type:\n          $ref: '#/components/schemas/StatusEntryType'\n        text:\n          type: string\n          example: This domain\"s DNSSEC DS record is not set\n        extra:\n          type: array\n          items:\n            $ref: '#/components/schemas/StatusEntryExtra'\n      description: System status entry.\n    StatusEntryType:\n      type: string\n      enum:\n        - heading\n        - ok\n        - warning\n        - error\n      example: warning\n      description: System status entry type.\n    StatusEntryExtra:\n      type: object\n      required:\n        - monospace\n        - text\n      properties:\n        monospace:\n          type: boolean\n          example: false\n        text:\n          type: string\n          example: 'Digest Type: 2 / SHA-256'\n      description: System entry extra information.\n    SystemBackupConfigUpdateRequest:\n      type: object\n      required:\n        - target\n        - target_user\n        - target_pass\n        - min_age\n      properties:\n        target:\n          type: string\n          format: hostname\n          example: s3://s3.eu-central-1.amazonaws.com/box-example-com\n        target_user:\n          type: string\n          example: username\n        target_pass:\n          type: string\n          example: password\n          format: password\n        min_age:\n          type: integer\n          format: int32\n          minimum: 1\n          example: 3\n      description: Backup config update request.\n    PerformBackupRequest:\n      type: object\n      required:\n        - full\n      properties:\n        full:\n          type: boolean\n          example: false\n      description: New backup type.\n    PerformBackupResponse:\n      type: string\n      example: OK\n      description: Backup creation response.\n    SystemBackupConfigUpdateResponse:\n      type: string\n      example: OK\n      description: Backup config update response.\n    SystemBackupConfigResponse:\n      type: object\n      required:\n        - enc_pw_file\n        - file_target_directory\n        - min_age_in_days\n        - ssh_pub_key\n        - target\n      properties:\n        enc_pw_file:\n          type: string\n          example: /home/user-data/backup/secret_key.txt\n        file_target_directory:\n          type: string\n          example: /home/user-data/backup/encrypted\n        min_age_in_days:\n          type: integer\n          format: int32\n          minimum: 1\n          example: 3\n        ssh_pub_key:\n          type: string\n          example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDb root@box.example.com\\n\n        target:\n          type: string\n          format: hostname\n          example: s3://s3.eu-central-1.amazonaws.com/box-example-com\n        target_user:\n          type: string\n        target_pass:\n          type: string\n      description: Backup config response.\n    SystemBackupStatusResponse:\n      type: object\n      required:\n        - unmatched_file_size\n      properties:\n        backups:\n          type: array\n          items:\n            $ref: '#/components/schemas/SystemBackupStatus'\n        unmatched_file_size:\n          type: integer\n          format: int32\n          example: 0\n        error:\n          type: string\n          example: Something is wrong with the backup\n      description: Backup status response. Lists the status for all backups.\n    SystemBackupStatus:\n      type: object\n      required:\n        - date\n        - date_delta\n        - date_str\n        - full\n        - size\n        - volumes\n      properties:\n        date:\n          type: string\n          format: date-time\n          example: 20200801T023706Z\n        date_delta:\n          type: string\n          example: 15 hours, 40 minutes\n        date_str:\n          type: string\n          example: 2020-08-01 03:37:06 BST\n        deleted_in:\n          type: string\n          example: approx. 6 days\n        full:\n          type: boolean\n          example: false\n        size:\n          type: integer\n          format: int32\n          example: 125332\n        volumes:\n          type: integer\n          format: int32\n          example: 1\n      description: Backup status details.\n    SSLStatusResponse:\n      type: object\n      required:\n        - can_provision\n        - status\n      properties:\n        can_provision:\n          type: array\n          items:\n            type: string\n        status:\n          type: array\n          items:\n            $ref: '#/components/schemas/SSLStatus'\n      description: SSL status response for all relevant domains.\n    SSLStatus:\n      type: object\n      required:\n        - domain\n        - status\n        - text\n      properties:\n        domain:\n          $ref: '#/components/schemas/Hostname'\n        status:\n          $ref: '#/components/schemas/SSLStatusType'\n        text:\n          type: string\n          example: Signed & valid. The certificate expires in 87 days on 10/28/20.\n      description: SSL status details for domain.\n    SSLStatusType:\n      type: string\n      enum:\n        - success\n        - danger\n        - not-applicable\n      example: success\n      description: SSL status type.\n    Email:\n      type: string\n      format: email\n      example: user@example.com\n      description: Email format.\n    Hostname:\n      type: string\n      format: hostname\n      example: example.com\n      description: Hostname format.\n    MeResponse:\n      type: object\n      required:\n        - status\n      properties:\n        api_key:\n          type: string\n          example: 12345abcde\n        email:\n          $ref: '#/components/schemas/Email'\n        privileges:\n          type: array\n          items:\n            $ref: '#/components/schemas/MailUserPrivilege'\n        reason:\n          type: string\n          example: Incorrect username or password\n        status:\n          $ref: '#/components/schemas/MeAuthStatus'\n      description: Me (user) response.\n    MeAuthStatus:\n      type: string\n      enum:\n        - ok\n        - invalid\n      example: invalid\n      description: Me (user) authentication result.\n    WebDomain:\n      type: object\n      required:\n        - custom_root\n        - domain\n        - root\n        - ssl_certificate\n        - static_enabled\n      properties:\n        custom_root:\n          type: string\n          example: /home/user-data/www/example.com\n        domain:\n          $ref: '#/components/schemas/Hostname'\n        root:\n          type: string\n          example: /home/user-data/www/default\n        ssl_certificate:\n          type: array\n          minItems: 2\n          maxItems: 2\n          uniqueItems: true\n          items:\n            oneOf:\n              - type: string\n                example: No certificate installed.\n              - type: string\n                enum:\n                  - danger\n                  - success\n                example: danger\n        static_enabled:\n          type: boolean\n          example: true\n      description: Web domain details.\n    WebUpdateResponse:\n      type: string\n      example: web updated\n      description: Web update response.\n    SmtpRelayConfig:\n      type: object\n      required:\n        - enabled\n        - host\n        - auth_enabled\n        - user\n      properties:\n        enabled:\n          type: boolean\n          example: true\n        host:\n          type: string\n          example: sendgrid.net\n        auth_enabled:\n          type: boolean\n          example: true\n        user:\n          type: string\n          example: someuser\n      description: SMTP configuration details.\n    SetSmtpRelayConfigRequest:\n      type: object\n      required:\n        - enabled\n        - host\n        - auth_enabled\n        - user\n        - key\n      properties:\n        enabled:\n          type: boolean\n          example: true\n        host:\n          type: string\n          example: sendgrid.net\n        auth_enabled:\n          type: boolean\n          example: true\n        user:\n          type: string\n          example: apikey\n        key:\n          type: string\n          example: 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\n      description: SMTP Configuration form\n    PgpKey:\n      type: object\n      required:\n        - ids\n        - master_fpr\n        - revoked\n        - subkeys\n      properties:\n        ids:\n          type: array\n          items:\n            type: string\n        ids_emails:\n          type: array\n          items:\n            $ref: '#/components/schemas/Email'\n        master_fpr:\n          type: string\n        revoked:\n          type: boolean\n        subkeys:\n          type: array\n          items:\n            type: object\n            required:\n              - algorithm\n              - auth\n              - cert\n              - encr\n              - sign\n              - bits\n              - expired\n              - expires\n              - expires_date\n              - expires_days\n              - fpr\n              - master\n            properties:\n              algorithm:\n                type: string\n              auth:\n                type: boolean\n              cert:\n                type: boolean\n              encr:\n                type: boolean\n              sign:\n                type: boolean\n              bits:\n                type: integer\n                format: int32\n              expired:\n                type: boolean\n              expires:\n                type: integer\n                format: int32\n              expires_days:\n                type: string\n                format: date-time\n                example: \"01/15/2099\"\n              fpr:\n                type: string\n              master:\n                type: boolean\n      description: Parseable, human-friendly information about a PGP key\n    PgpKeyring:\n      type: object\n      required:\n        - daemon\n        - imported\n      properties:\n        daemon:\n          $ref: '#/components/schemas/PgpKey'\n        imported:\n          type: array\n          items:\n            $ref: '#/components/schemas/PgpKey'\n      description: Describes all PGP keys in the keyring\n    PgpKeyExport:\n      type: string\n      example: |\n        -----BEGIN PGP PUBLIC KEY BLOCK-----\n\n        mQINBF957dABEADz7P2flznzRq5wuUhxDS+wytdn8yQhMXZr7kvcpwbRl9f7+dx3\n        mH8kH7owN9u8yBDsA9iW7fFNJnbSJNtPIFdOB08AeeIUGx6jsvWFd08+WdDulu1l\n        wyR/UPvmYDYPwI5fqMy/Edne0qqgg6mzVk30cr8xDxaE1RNf3rVAWVdfbAUNF35M\n        NhzjsrHZPKqpgvTLbsrV+87mc83FUwSgHQITY/E/04kJE2IbnNj3+5zYMlkhwEd/\n        1afI9OFNTtIk5zYdoLPa8o/sNZZTjCgSp7pLI/2/o1CzI/NL2CEKjJgo5uwg9gHu\n        e6vcUxez8uWAMOBwF3ogptr5mioT0ewbBto5Lbkv5jn8WbcpifbrDXqws1PZO+ZJ\n        jUdhnrEWxE7DV1tM3CMYq5IzgbrhBPRUYhPX196HMRTRa2PwM1a8tPeilzM7NyrM\n        MTYV3TO11kTKJcRr8/iSt/XpAQsV9EqI1ecUcDFX+U5LVEImHD3+BmQCT713LBRK\n        HWWmY/oHumxxVjS0OQZyik8tIOOK5sy8JZr2A+p6qiLGs0SU6yUCPUonSjuc98ky\n        rByV2GcVaxzT4qk1RiReDXkjIlGIXE4SzVUPHyYYoRvJVrRkQDN6fegvyQqszEAH\n        7OTXgNZ55BB+WWKCzhAoO2IJiwJXWLp3xqHni86gXSGrXi5RbmprGNHkwQARAQAB\n        tERQb3dlciBNYWlsLWluLWEtQm94IE1hbmFnZW1lbnQgRGFlbW9uIDxhZG1pbmlz\n        dHJhdG9yQG1haWxpbmFib3gubGFuPokCVAQTAQoAPhYhBGIDe4i3Q2Jpl+Y+/iRp\n        OU+8DPjaBQJfee3QAhsvBQkA7U4ABQsJCAcCBhUKCQgLAgQWAgMBAh4BAheAAAoJ\n        ECRpOU+8DPjaagYP/0nJyYG3ELcmqleJxSe6CuDrhNHTNyrJROqCTkeJmsWDxePK\n        tRjuSZSkK7ZCjxthTwo4Yi5ylSh7a8Qt7OzvwaFcK78JvYYAz08tErDa7+t+Gj3T\n        32M00Wa/DykzBJqDlmTtAYVlmfPOegF30XOYQ8e7IGMOETZQClJE37g00Gz32QKi\n        zf8ONje924xRU3PETySQjHtc5Zoio0Av8mARB2hiGQScNoQU3qzELX85x4qjKUJe\n        mdIuSlf8NRwZ2Df2kBYBLzuX2lAKiIxY63V0j/a87OLViHdOQwb5SaV5s/3R/qf7\n        NSaVRsbxYuRO638K402tVffvl1jH9hvooRfsc7lj5XkxKAkMIDTJmBAVcXy4+n77\n        J20ZEz22ko87AwmHU6ZFh+RJiueOsqx09nnGOwmp7IXB47EDips1uVwPQ7GbkM1K\n        69CiS2K90X4WCaJhgLd7Saj8hCvfEUaHvUk/XoOGPjxj9iPzxFZgEb/2osSjqkJ5\n        9vQt31NbWpFJThHPXjixwIiWcn4m5yqcXjSNaHISvAZPtK55FXLp7uAOgiCygonK\n        onuboXh6AK6cT0cdtOgWsz3AQ2mTkhKbK6hW7eIVwEs8SFPb5qNSxWxlssF5/QQi\n        vo4j/rEYuOuqVo+TwsO0XNCfsA8as/UPLA9CgIxXXoIFmy2rL298lPQg5HgJ\n        =via/\n        -----END PGP PUBLIC KEY BLOCK-----\n      description: ASCII-Armored export of one or more public PGP key(s).\n    PgpKeyImportResult:\n      type: object\n      required:\n        - keys_read\n        - keys_added\n        - keys_unchanged\n        - uids_added\n        - sigs_added\n        - revs_added\n      properties:\n        keys_read:\n          type: integer\n          format: int32\n          description: Keys in the import\n        keys_added:\n          type: integer\n          format: int32\n          description: New keys\n        keys_unchanged:\n          type: integer\n          format: int32\n          description: Keys that were not modified\n        uids_added:\n          type: integer\n          format: int32\n          description: New user ID's\n        sigs_added:\n          type: integer\n          format: int32\n          description: New key signatures\n        revs_added:\n          type: integer\n          format: int32\n          description: New revocation certificates\n      description: The result of the key import operation\n    MfaStatusResponse:\n      type: object\n      properties:\n        enabled_mfa:\n          type: object\n          properties:\n            id:\n              type: string\n            type:\n              type: string\n            label:\n              type: string\n          nullable: true\n        new_mfa:\n          type: object\n          properties:\n            type:\n              type: string\n            secret:\n              type: string\n            qr_code_base64:\n              type: string\n    MfaEnableRequest:\n      type: object\n      required:\n        - secret\n        - code\n      properties:\n        secret:\n          type: string\n        code:\n          type: string\n        label:\n          type: string\n    MfaEnableSuccessResponse:\n      type: string\n    MfaDisableRequest:\n      type: object\n      properties:\n        mfa_id:\n          type: string\n          nullable: true\n    MfaDisableSuccessResponse:\n      type: string\n    LogoutResponse:\n      type: object\n      properties:\n        status:\n          type: string\n",
			"canonicalURL": "/github.com/ddavness/power-mailinabox@a0d44f3d056408a3aa3d787713fbc3e362545b80/-/blob/api/mailinabox.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ddavness/power-mailinabox/blob/a0d44f3d056408a3aa3d787713fbc3e362545b80/api/mailinabox.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:28193: json: cannot unmarshal Go value of type ogen.Spec: spec: json: cannot unmarshal JSON number into Go value of type string"
}