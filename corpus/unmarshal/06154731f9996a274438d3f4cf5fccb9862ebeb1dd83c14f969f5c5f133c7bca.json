{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Unleash/unleash"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/api/oas/openapi.yaml",
			"byteSize": 61679,
			"content": "# TESTING\n# QA team test cases. Test code exists but were these based on a list of steps required to produce a result?\n# Are there any real-world users of Unleash who are happy to read and test the Open API specification and make suggestions for improvement? Would they be happy to screen-record what they are doing (how they use the API will give invaluable insights)?\n# Ideally, you'd want developers using Java, Node.js, Go, Ruby, Python and .Net to test\n# Could there be a simple sample app that implemented all API calls (using realistic scenarios)? Might just be a consolidated version of the tests/e2e code with some triggers (buttons) and some UI to display outcomes.\n# OAS REVIEW\n# Move responses to root responses section in components (from schema section)\n# Issues with rendering as nested externaldocs from Swagger UI. See GET /admin/feature-types. Not an issue in other tools (see redoc.html)\n# Other candidates for $ref: createdAt, lastSeen/updatedAt, instanceId, appName/appNamePath, sdkVersion, feature toggle type titles, enabled, stale, weight\n# STYLE\n# Add style guide MD. UK/US = US, Newspaper/Movie, Plurals. \u0026. What 's the closest match for Unleash? http://apistylebook.com/design/guidelines/\n# OAS styler - Only use backticks for code samples and API paths. Use bold for schema items and italic for schema item settings\n\nopenapi: 3.0.3\nservers:\n  - description: Local host\n    url: 'http://localhost:4242/api'\n  - description: Unleash open source demo\n    url: 'http://unleash.herokuapp.com/api'\n#  - description: Windows server\n#    url: 'http://192.168.178.108:4242/api'\ntags:\n  - name: Feature toggles\n    description: Accessing feature toggles\n  - name: Archive\n    description: Handling Feature Toggle archiving and un-archiving\n  - name: Events\n    description: Identifying events on the Unleash server\n  - name: Feature types\n    description: Details of the five Unleash Feature Toggle types\n  - name: Import and export\n    description: Importing and exporting feature toggles and strategies\n  - name: Metrics\n    description: Determining usage of feature toggles and applications\n  - name: Strategies\n    description: Accessing and updating strategies\n  - name: Client\n    description: Client application aspects of the Unleash API\ninfo:\n  title: Unleash API\n  description: |-\n\n    \u003e The Open API specifications are currently considered a **\"beta feature\"** and will not cover the full Unleash Admin API. \n    \u003e You can follow the progress on making OAS official in [GitHub issue 1391](https://github.com/Unleash/unleash/issues/1391)\n\n    Unleash is an open source feature flag and toggle system for all your applications and services.\n\n    # Try it out\n\n    ## Try it in your browser\n\n    Once you have [set your Unleash server up](https://docs.getunleash.io/deploy/getting_started), you can test the API from inside your browser. The following assumes the server is running on localhost:4242.\n\n    The following 'endpoints' (such as `GET /admin/metrics/applications`) provide reference documentation for the Unleash REST API. To try out API calls:\n    1. Navigate to an endpoint\n    2. Click **Try it out** - in the right-hand (black) panel\n    3. Customize the **Request body** and/or **Parameters**.\n    4. Click **Execute**.\n\n    You will see the cURL request submitted to the API server and the corresponding response.\n\n    ## Try it in Postman\n\n    Alternatively, you can test the API in [Postman](https://app.getpostman.com/run-collection/8552ddcd4cc9fc012548)\n\n    [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/8552ddcd4cc9fc012548)\n  version: 4.0.13\n  contact:\n    name: The Unleash team\n    url: 'https://docs.getunleash.io'\nexternalDocs:\n  description: Unleash documentation\n  url: 'https://unleash.github.io/docs/getting_started'\npaths:\n  /client/register:\n    post:\n      summary: Registers a client instance with the Unleash server.\n      description: You can retrieve this data with a `GET /admin/metrics/applications/{appName}` API call.\n      operationId: clientRegister\n      externalDocs:\n        description: Client specification\n        url: 'https://unleash.github.io/docs/client_specification'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/clientRegistrationSchema'\n      tags:\n        - Client\n      responses:\n        '202':\n          description: Successful response - client has been registered\n        '400':\n          description: 'Bad body request (for example, appName is not correct)'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request POST \\\n              --url http://localhost:4242/api/client/register \\\n              --data '{\"appName\":\"my-application\",\"instanceId\":\"generated-732038-17080\",\"sdkVersion\":\"unleash-client-node:3.4.0\",\"strategies\":[{\"strategy\":\"default\"}],\"started\":\"2016-11-03T07:16:43.572Z\",\"interval\":10000}'\n  /client/metrics:\n    post:\n      summary: Register a metrics *bucket*.\n      description: A *bucket* is a set of metrics data that tells you how often a Feature Toggle was enabled or disabled during a specified period of time\n      operationId: sendMetrics\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/metricsPayloadSchema'\n      tags:\n        - Client\n        - Metrics\n      responses:\n        '202':\n          description: Successful response - payload has been accepted\n        '400':\n          description: 'Bad body request (for example, appName is not correct)'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request POST \\\n              --url http://localhost:4242/api/client/metrics \\\n              --data '{\"appName\":\"my-application\",\"instanceId\":\"generated-732038-17080\",\"bucket\":{\"start\":\"2020-12-08T13:50:00.000Z\",\"stop\":\"2020-12-08T13:55:00.000Z\",\"toggles\":{\"yesno\":{\"yesorno\":\"yes\"},\"metricsCount\":{\"count\":1}}}}'\n  /client/features:\n    # Would normally $ref here but it tangles with an OAS bug - which affects both Redoc and Swagger UI - https://github.com/swagger-api/swagger-ui/issues/6249 (closed issue but still broken in latest release)\n    get:\n      summary: Fetches all feature toggles from the Unleash server.\n      description: |-\n        The response returns all active feature toggles and their current strategy configuration:\n        - Feature toggles will have *at least* one strategy\n        - Strategies have a `name` and `parameters` map.\n      operationId: getClientFeatures\n      externalDocs:\n        description: Activation strategies\n        url: 'https://unleash.github.io/docs/activation_strategy'\n      tags:\n        - Client\n        - Feature toggles\n      responses:\n        '200':\n          $ref: '#/components/responses/clientResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n              --url http://localhost:4242/api/client/features\n  '/client/features/{featureName}':\n    get:\n      summary: Fetches a specific Feature Toggle from the Unleash server.\n      description: |\n        The response returns the Feature Toggle's current strategy configuration:\n        - It will have *at least* one configured strategy.\n        - A strategy will have a *name* and *parameters* map.\n        **This is mainly provided to help debug the API. Do not use for client implementations.**\n      externalDocs:\n        description: Activation strategies\n        url: 'https://unleash.github.io/docs/activation_strategy'\n      operationId: getClientFeature\n      parameters:\n        - $ref: '#/components/parameters/featureNamePath'\n      tags:\n        - Client\n        - Feature toggles\n      responses:\n        '200':\n          $ref: '#/components/responses/successResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n              --url http://localhost:4242/api/client/features/featureName\n  /admin/features:\n    get:\n      summary: Fetches all feature toggles from the Unleash server.\n      description: |\n        The response returns all active feature toggles and their current strategy configuration:\n        - A feature toggle will have *at least* one configured strategy.\n        - A strategy will have a `name` and `parameters` map.\n      externalDocs:\n        description: Activation strategies\n        url: 'https://unleash.github.io/docs/activation_strategy'\n      operationId: getFeatures\n      tags:\n        - Feature toggles\n      responses:\n        '200':\n          $ref: '#/components/responses/successResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n              --url http://localhost:4242/api/admin/features\n    post:\n      summary: Create a Feature Toggle\n      description: Create a new Feature Toggle\n      tags:\n        - Feature toggles\n      operationId: createFeatureToggle\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/featureToggleSchema'\n      responses:\n        '201':\n          description: Feature Toggle successfully created\n        '400':\n          description: 'Bad body request (for example, Feature Toggle name is not unique)'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request POST \\\n              --url http://localhost:4242/api/admin/features \\\n              --data '{\"name\":\"featureX\",\"description\":\"Toggles featureX on and off\",\"type\":\"release\",\"enabled\":true,\"stale\":false,\"strategies\":[{\"name\":\"default\",\"editable\":true,\"description\":\"Default on/off strategy.\",\"parameters\":{\"parameter\":{\"name\":\"groupId\",\"type\":\"string\",\"description\":\"Define activation groups to allow you to correlate across feature toggles.\",\"required\":false}}}],\"variants\":[{\"name\":\"yellow\",\"weight\":20}],\"createdAt\":\"string\"}'\n  '/admin/features/{featureName}':\n    get:\n      summary: Fetches a specific Feature Toggle from the Unleash server.\n      description: |\n        The response returns the Feature Toggle's current strategy configuration:\n        - It will have *at least* one configured strategy.\n        - A strategy will have a *name* and *parameters* map.\n      externalDocs:\n        description: Activation strategies\n        url: 'https://unleash.github.io/docs/activation_strategy'\n      operationId: getFeature\n      parameters:\n        - $ref: '#/components/parameters/featureNamePath'\n      tags:\n        - Feature toggles\n      responses:\n        '200':\n          $ref: '#/components/responses/successResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n              --url http://localhost:4242/api/admin/features/featureName\n    put:\n      summary: Update a Feature Toggle\n      description: Update a Feature Toggle.\n      operationId: featureName\n      tags:\n        - Feature toggles\n      parameters:\n        - $ref: '#/components/parameters/featureNamePath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/featureToggleSchema'\n      responses:\n        '200':\n          $ref: '#/components/responses/successResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n        '400':\n          description: Bad body request (for example 'strategies' is not an array)\n        '404':\n          description: Feature Toggle not found\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request PUT \\\n              --url http://localhost:4242/api/admin/features/featureName \\\n              --data '[{\"name\":\"featureX\",\"description\":\"Toggles featureX on and off\",\"type\":\"release\",\"enabled\":true,\"stale\":false,\"strategies\":[{\"name\":\"default\",\"editable\":true,\"description\":\"Default on/off strategy.\",\"parameters\":{\"parameter\":{\"name\":\"groupId\",\"type\":\"string\",\"description\":\"Define activation groups to allow you to correlate across feature toggles.\",\"required\":false}}}],\"variants\":[{\"name\":\"yellow\",\"weight\":20}],\"createdAt\":\"string\"}]'\n        - lang: 'Go'\n          source: |\n            package main\n            import (\n              \"fmt\"\n              \"strings\"\n              \"net/http\"\n              \"io/ioutil\"\n            )\n            func main() {\n              url := \"http://localhost:4242/api/admin/features/featureName\"\n              payload := strings.NewReader(\"[{\\\"name\\\":\\\"featureX\\\",\\\"description\\\":\\\"Toggles featureX on and off\\\",\\\"type\\\":\\\"release\\\",\\\"enabled\\\":true,\\\"stale\\\":false,\\\"strategies\\\":[{\\\"name\\\":\\\"default\\\",\\\"editable\\\":true,\\\"description\\\":\\\"Default on/off strategy.\\\",\\\"parameters\\\":{\\\"parameter\\\":{\\\"name\\\":\\\"groupId\\\",\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"Define activation groups to allow you to correlate across feature toggles.\\\",\\\"required\\\":false}}}],\\\"variants\\\":[{\\\"name\\\":\\\"yellow\\\",\\\"weight\\\":20}],\\\"createdAt\\\":\\\"string\\\"}]\")\n              req, _ := http.NewRequest(\"PUT\", url, payload)\n              res, _ := http.DefaultClient.Do(req)\n              defer res.Body.Close()\n              body, _ := ioutil.ReadAll(res.Body)\n              fmt.Println(res)\n              fmt.Println(string(body))\n            }\n        - lang: 'Java'\n          source: |\n            AsyncHttpClient client = new DefaultAsyncHttpClient();\n            client.prepare(\"PUT\", \"http://localhost:4242/api/admin/features/featureName\")\n              .setBody(\"[{\\\"name\\\":\\\"featureX\\\",\\\"description\\\":\\\"Toggles featureX on and off\\\",\\\"type\\\":\\\"release\\\",\\\"enabled\\\":true,\\\"stale\\\":false,\\\"strategies\\\":[{\\\"name\\\":\\\"default\\\",\\\"editable\\\":true,\\\"description\\\":\\\"Default on/off strategy.\\\",\\\"parameters\\\":{\\\"parameter\\\":{\\\"name\\\":\\\"groupId\\\",\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"Define activation groups to allow you to correlate across feature toggles.\\\",\\\"required\\\":false}}}],\\\"variants\\\":[{\\\"name\\\":\\\"yellow\\\",\\\"weight\\\":20}],\\\"createdAt\\\":\\\"string\\\"}]\")\n              .execute()\n              .toCompletableFuture()\n              .thenAccept(System.out::println)\n              .join();\n            client.close();\n        - lang: 'Python'\n          source: |\n            import requests\n            url = \"http://localhost:4242/api/admin/features/featureName\"\n            payload = \"[{\\\"name\\\":\\\"featureX\\\",\\\"description\\\":\\\"Toggles featureX on and off\\\",\\\"type\\\":\\\"release\\\",\\\"enabled\\\":true,\\\"stale\\\":false,\\\"strategies\\\":[{\\\"name\\\":\\\"default\\\",\\\"editable\\\":true,\\\"description\\\":\\\"Default on/off strategy.\\\",\\\"parameters\\\":{\\\"parameter\\\":{\\\"name\\\":\\\"groupId\\\",\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"Define activation groups to allow you to correlate across feature toggles.\\\",\\\"required\\\":false}}}],\\\"variants\\\":[{\\\"name\\\":\\\"yellow\\\",\\\"weight\\\":20}],\\\"createdAt\\\":\\\"string\\\"}]\"\n            response = requests.request(\"PUT\", url, data=payload)\n            print(response.text)\n        - lang: 'Ruby'\n          source: |\n            require 'uri'\n            require 'net/http'\n            url = URI(\"http://localhost:4242/api/admin/features/featureName\")\n            http = Net::HTTP.new(url.host, url.port)\n            request = Net::HTTP::Put.new(url)\n            request.body = \"[{\\\"name\\\":\\\"featureX\\\",\\\"description\\\":\\\"Toggles featureX on and off\\\",\\\"type\\\":\\\"release\\\",\\\"enabled\\\":true,\\\"stale\\\":false,\\\"strategies\\\":[{\\\"name\\\":\\\"default\\\",\\\"editable\\\":true,\\\"description\\\":\\\"Default on/off strategy.\\\",\\\"parameters\\\":{\\\"parameter\\\":{\\\"name\\\":\\\"groupId\\\",\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"Define activation groups to allow you to correlate across feature toggles.\\\",\\\"required\\\":false}}}],\\\"variants\\\":[{\\\"name\\\":\\\"yellow\\\",\\\"weight\\\":20}],\\\"createdAt\\\":\\\"string\\\"}]\"\n            response = http.request(request)\n            puts response.read_body\n        - lang: 'JavaScript'\n          source: |\n            fetch(\"http://localhost:4242/api/admin/features/featureName\", {\n              \"method\": \"PUT\",\n              \"headers\": {},\n              \"body\": \"[{\\\"name\\\":\\\"featureX\\\",\\\"description\\\":\\\"Toggles featureX on and off\\\",\\\"type\\\":\\\"release\\\",\\\"enabled\\\":true,\\\"stale\\\":false,\\\"strategies\\\":[{\\\"name\\\":\\\"default\\\",\\\"editable\\\":true,\\\"description\\\":\\\"Default on/off strategy.\\\",\\\"parameters\\\":{\\\"parameter\\\":{\\\"name\\\":\\\"groupId\\\",\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"Define activation groups to allow you to correlate across feature toggles.\\\",\\\"required\\\":false}}}],\\\"variants\\\":[{\\\"name\\\":\\\"yellow\\\",\\\"weight\\\":20}],\\\"createdAt\\\":\\\"string\\\"}]\"\n            })\n            .then(response =\u003e {\n              console.log(response);\n            })\n            .catch(err =\u003e {\n              console.error(err);\n            });\n    delete:\n      summary: Archive a Feature Toggle.\n      description: |\n        Feature toggles can only be archived - they cannot be deleted.\n\n        If an old Feature Toggle *re-appears*, this is because someone else has created a new one with the same name.\n      operationId: archiveFeatureToggle\n      tags:\n        - Feature toggles\n        - Archive\n      parameters:\n        - $ref: '#/components/parameters/featureNamePath'\n      responses:\n        '200':\n          description: Feature Toggle successfully archived\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n        '404':\n          description: Feature Toggle not found\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request DELETE \\\n              --url http://localhost:4242/api/admin/features/featureName\n  '/admin/features/{featureName}/toggle/on':\n    post:\n      summary: Enable a Feature Toggle.\n      description: '**featureName** must match an existing Feature Toggle.'\n      operationId: enableFeatureToggle\n      tags:\n        - Feature toggles\n      parameters:\n        - $ref: '#/components/parameters/featureNamePath'\n      responses:\n        '200':\n          $ref: '#/components/responses/successResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n        '404':\n          description: Feature Toggle not found\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request POST \\\n              --url http://localhost:4242/api/admin/features/featureName/toggle/on\n  '/admin/features/{featureName}/toggle/off':\n    post:\n      summary: Disable a Feature Toggle.\n      description: '**featureName** must match an existing Feature Toggle.'\n      operationId: disableFeatureToggle\n      tags:\n        - Feature toggles\n      parameters:\n        - $ref: '#/components/parameters/featureNamePath'\n      responses:\n        '200':\n          $ref: '#/components/responses/successResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n        '404':\n          description: Feature Toggle not found\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request POST \\\n            --url http://localhost:4242/api/admin/features/featureName/toggle/off\n  '/admin/features/{featureName}/stale/on':\n    post:\n      summary: Mark a Feature Toggle as 'stale' (deprecated).\n      description: '**featureName** must match an existing Feature Toggle.'\n      externalDocs:\n        description: Feature Toggle types\n        url: 'https://unleash.github.io/docs/feature_toggle_types'\n      operationId: markFeatureToggleStale\n      tags:\n        - Feature toggles\n      parameters:\n        - $ref: '#/components/parameters/featureNamePath'\n      responses:\n        '200':\n          $ref: '#/components/responses/successResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n        '404':\n          description: Feature Toggle not found\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request POST \\\n            --url http://localhost:4242/api/admin/features/featureName/stale/on\n  '/admin/features/{featureName}/stale/off':\n    post:\n      summary: Mark a Feature Toggle as active.\n      description: '**featureName** must match an existing Feature Toggle.'\n      externalDocs:\n        description: Feature Toggle types\n        url: 'https://unleash.github.io/docs/feature_toggle_types'\n      operationId: markFeatureToggleActive\n      tags:\n        - Feature toggles\n      parameters:\n        - $ref: '#/components/parameters/featureNamePath'\n      responses:\n        '200':\n          $ref: '#/components/responses/successResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n        '404':\n          description: Feature Toggle not found\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request POST \\\n              --url http://localhost:4242/api/admin/features/featureName/stale/off\n  /admin/archive/features:\n    get:\n      summary: List all the archived feature toggles on the Unleash server\n      description: Archived feature toggles are those that have been previously deleted\n      operationId: fetchArchivedToggles\n      tags:\n        - Archive\n      responses:\n        '200':\n          $ref: '#/components/responses/successResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n        '404':\n          description: Feature Toggle not found\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n             --url http://localhost:4242/api/admin/archive/features\n  '/admin/archive/revive/{featureName}':\n    post:\n      summary: Un-archive a Feature Toggle\n      description: Restore a Feature Toggle that has been previously deleted\n      operationId: reviveFeatureToggle\n      tags:\n        - Archive\n      parameters:\n        - $ref: '#/components/parameters/featureNamePath'\n      responses:\n        '200':\n          description: Feature Toggle successfully revived\n        '404':\n          description: Feature Toggle not found\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request POST \\\n              --url http://localhost:4242/api/admin/archive/revive/featureName\n  /admin/strategies:\n    get:\n      summary: Fetch all strategies and their parameters.\n      description: Fetch all strategies and their parameters.\n      operationId: getStrategies\n      tags:\n        - Strategies\n      responses:\n        '200':\n          $ref: '#/components/responses/strategyExistsResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n              --url http://localhost:4242/api/admin/strategies\n    post:\n      summary: Create Strategy\n      description: Create Strategy\n      operationId: createStrategy\n      tags:\n        - Strategies\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/createStrategy'\n      responses:\n        '201':\n          description: Strategy successfully added\n        '400':\n          description: Bad body request (for example 'strategies' is not an array)\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n        '409':\n          $ref: '#/components/responses/strategyExistsResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request POST \\\n              --url http://localhost:4242/api/admin/strategies \\\n              --data '{\"name\":\"gradualRollout\",\"description\":\"Gradual rollout to logged in users\",\"parameters\":[{\"name\":\"percentage\",\"type\":\"percentage\",\"description\":\"What percent of users should the new Feature Toggle be active for?\",\"required\":true}]}'\n  '/admin/strategies/{strategyName}':\n    put:\n      summary: Update Strategy\n      description: |\n        Use to update a Strategy definition.\n\n        **name** and **strategyName** must match and must also match an existing Strategy name.\n\n        **Caution: It can be dangerous to change a Strategy (as the implementation also might need to be changed).**\n      operationId: updateStrategy\n      tags:\n        - Strategies\n      parameters:\n        - $ref: '#/components/parameters/strategyNamePath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/createStrategy'\n      responses:\n        '200':\n          description: Strategy successfully updated.\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n        '404':\n          description: Strategy not updated due to errors in query and/or request body (such as **name** and **strategyName** not matching).\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request PUT \\\n              --url http://localhost:4242/api/admin/strategies/strategyName \\\n              --data '{\"name\":\"gradualRollout\",\"description\":\"Gradual rollout to logged in users\",\"parameters\":[{\"name\":\"percentage\",\"type\":\"percentage\",\"description\":\"What percent of users should the new Feature Toggle be active for?\",\"required\":true}]}'\n  /admin/metrics/seen-toggles:\n    get:\n      summary: Returns a list of applications and the feature toggles that Unleash has 'seen' for each application.\n      description: 'It is only guaranteed that feature toggles reported by client applications within the last hour will be returned. However, in most cases, earlier reported feature toggles will also be returned.'\n      operationId: seenToggles\n      tags:\n        - Metrics\n      responses:\n        '200':\n          $ref: '#/components/responses/seenTogglesResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n              --url http://localhost:4242/api/admin/metrics/seen-toggles\n  /admin/metrics/feature-toggles:\n    get:\n      summary: Gives 'last minute' and 'last hour' metrics for all active feature toggles (based on what was reported by the client applications).\n      description: |-\n        - **Yes** is the number of times a given feature toggle was enabled in a client applucation\n        - **No** is the number of times it was disabled.\n      operationId: featureToggles\n      tags:\n        - Metrics\n      responses:\n        '200':\n          $ref: '#/components/responses/featureAccessResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n              --url http://localhost:4242/api/admin/metrics/feature-toggles\n  /admin/metrics/applications:\n    get:\n      summary: A list of known applications ('seen' by Unleash in the last two days)\n      description: Also has a link for more details.\n      operationId: getApplications\n      tags:\n        - Metrics\n      responses:\n        '200':\n          $ref: '#/components/responses/applicationsResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n              --url http://localhost:4242/api/admin/metrics/applications\n  '/admin/metrics/applications/{appName}':\n    get:\n      summary: Details about a client application.\n      description: 'Details include things such as instances, strategies implemented and seen feature toggles.'\n      operationId: getApplicationDetails\n      tags:\n        - Metrics\n      parameters:\n        - $ref: '#/components/parameters/appNamePath'\n      responses:\n        '200':\n          $ref: '#/components/responses/appDetailsResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n        '500':\n          description: Application name not found\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n              --url http://localhost:4242/api/admin/metrics/applications/appName\n  /admin/metrics/seen-apps:\n    get:\n      summary: Details about seen applications\n      description: (per Feature Toggle)\n      operationId: seenApps\n      tags:\n        - Metrics\n      responses:\n        '200':\n          $ref: '#/components/responses/applicationsResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n              --url http://localhost:4242/api/admin/metrics/seen-apps\n  /admin/events:\n    get:\n      operationId: get-admin-events\n      summary: Fetch all changes in the Unleash system\n      description: |-\n        Returns one of the twelve event types:\n        - feature-created\n        - feature-metadata-updated\n        - feature-project-change\n        - feature-archived\n        - feature-revived\n        - feature-strategy-update\n        - feature-strategy-add\n        - feature-strategy-remove\n        - feature-stale-on\n        - feature-stale-off\n        - feature-environment-enabled\n        - feature-environment-disabled\n      tags:\n        - Events\n      responses:\n        '200':\n          $ref: '#/components/responses/eventsResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n              --url http://localhost:4242/api/admin/events\n  /admin/state/export:\n    get:\n      operationId: get-admin-state-export\n      summary: Export feature toggles and strategies\n      description: Exports a list of feature toggles and/or strategies in either JSON or YAML format.\n      externalDocs:\n        description: Import and export\n        url: 'https://unleash.github.io/docs/import_export'\n      tags:\n        - Import and export\n      parameters:\n        - schema:\n            type: string\n            enum:\n              - json\n              - yaml\n          in: query\n          name: format\n          description: |\n            Choose export format, either json or yaml. json is the default\n          example: json\n        - schema:\n            type: boolean\n          in: query\n          name: download\n          example: false\n          description: Do you want to export the data as a file? Default is false\n        - schema:\n            type: boolean\n          in: query\n          name: featureToggles\n          description: Do you want to include feature toggles in the export? Default is true\n          example: true\n        - schema:\n            type: boolean\n          in: query\n          name: strategies\n          description: Do you want to include strategies in the export? Default is true\n          example: true\n      responses:\n        '200':\n          $ref: '#/components/responses/exportResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n              --url http://localhost:4242/api/admin/state/export\n  /admin/state/import:\n    post:\n      summary: Import feature toggles and strategies\n      operationId: post-admin-state-import\n      tags:\n        - Import and export\n      description: |-\n        Upload the data, in JSON or YAML format.\n        You can add in the POST body or upload a file\n        - **POST body** (JSON format only) - next to **Request body**, choose the *application/json* dropdown option.\n        - **File upload** (JOSN or YAML format) - next to **Request body**, choose the *multipart/form-data* dropdown option. This adopts the same schema as `GET /admin/state/export`\n      externalDocs:\n        description: Import and export\n        url: 'https://unleash.github.io/docs/import_export'\n      parameters:\n        - schema:\n            type: boolean\n            default: 'false'\n            example: false\n          in: query\n          name: drop\n          description: Be careful using this in production environments. Set to true if you want the to remove all strategies and feature toggles from the datebase before import. Default is false.\n        - schema:\n            type: boolean\n            default: 'false'\n            example: false\n          in: query\n          name: keep\n          description: Set to *true* if you want keep all existing feature toggles and strategies as is; only the missing feature toggles and strategies will be inserted from the import data. Default is true.\n          example: true\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                fileName:\n                  type: string\n                  format: binary\n          application/json:\n            schema:\n              $ref: '#/components/schemas/200export'\n      responses:\n        '200':\n          description: Successful import.\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n        '404':\n          description: No import data provided.\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request POST \\\n              --url 'http://localhost:4242/api/admin/state/import?drop=false\u0026keep=false' \\\n              --data '{\"fileName\":\"string\"}'\n  /admin/feature-types:\n    get:\n      summary: Fetch the list of Unleash feature types\n      description: |-\n        - release\n        - experiment\n        - ops\n        - killswitch\n        - permission\n      operationId: get-admin-feature-types\n      tags:\n        - Feature types\n      responses:\n        '200':\n          $ref: '#/components/responses/featureTypeResponse'\n        '401':\n          $ref: '#/components/responses/notAuthorizedResponse'\n      x-code-samples:\n        - lang: 'cURL'\n          source: |\n            curl --request GET \\\n              --url http://localhost:4242/api/admin/feature-types\ncomponents:\n  parameters:\n    featureNamePath:\n      name: featureName\n      description: Must match an existing Feature Toggle name.\n      example: featureX\n      required: true\n      in: path\n      schema:\n        type: string\n    strategyNamePath:\n      name: strategyName\n      required: true\n      in: path\n      description: Must match an existing Strategy name.\n      example: flexibleRollout\n      schema:\n        type: string\n    appNamePath:\n      name: appName\n      required: true\n      in: path\n      description: Must match an existing application name.\n      example: my-application\n      schema:\n        type: string\n  responses:\n    successResponse:\n      description: 'Successful response'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/200'\n    notAuthorizedResponse:\n      description: 'Not authorized'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/401'\n    clientResponse:\n      description: 'Successful response'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/200Client'\n    strategyExistsResponse:\n      description: 'Strategy already exists'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/409'\n    strategyResponse:\n      description: 'Successful response'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/200strategy'\n    seenTogglesResponse:\n      description: 'Successful response'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/200seen'\n    featureAccessResponse:\n      description: 'Successful response'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/200feature'\n    appDetailsResponse:\n      description: 'Successful response'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/200appdetails'\n    applicationsResponse:\n      description: 'Successful response'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/applicationArray'\n    eventsResponse:\n      description: 'Successful response'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/200-events'\n    exportResponse:\n      description: 'Successful response'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/200export'\n    featureTypeResponse:\n      description: 'Successful response'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/200featuretype'\n  schemas:\n    '200':\n      type: object\n      properties:\n        version:\n          $ref: '#/components/schemas/versionSchema'\n        features:\n          $ref: '#/components/schemas/featureToggleListSchema'\n      x-tags:\n        - Responses\n    '401':\n      type: object\n      properties:\n        type:\n          type: string\n          minLength: 1\n        path:\n          type: string\n          minLength: 1\n        message:\n          type: string\n          minLength: 1\n      required:\n        - type\n        - path\n        - message\n      x-tags:\n        - Responses\n    '409':\n      type: object\n      required:\n        - isJoi\n        - name\n        - details\n      properties:\n        isJoi:\n          description: For internal use by the Unleash developers\n          type: boolean\n        name:\n          description: Title of error\n          type: string\n          minLength: 1\n        details:\n          type: array\n          uniqueItems: true\n          minItems: 1\n          items:\n            required:\n              - message\n            properties:\n              message:\n                description: Error message\n                type: string\n                minLength: 1\n      x-tags:\n        - Responses\n    200strategy:\n      type: object\n      required:\n        - version\n        - strategies\n      properties:\n        version:\n          $ref: '#/components/schemas/versionSchema'\n        strategies:\n          $ref: '#/components/schemas/strategySchema'\n      x-tags:\n        - Responses\n    createStrategy:\n      type: object\n      properties:\n        name:\n          type: string\n          minLength: 1\n          example: gradualRollout\n        description:\n          type: string\n          minLength: 1\n          example: Gradual rollout to logged in users\n        parameters:\n          type: array\n          uniqueItems: true\n          minItems: 1\n          items:\n            required:\n              - name\n              - type\n              - description\n              - required\n            properties:\n              name:\n                type: string\n                minLength: 1\n                example: percentage\n              type:\n                type: string\n                minLength: 1\n                example: percentage\n              description:\n                type: string\n                minLength: 1\n                example: What percent of users should the new Feature Toggle be active for?\n              required:\n                type: boolean\n                example: true\n      required:\n        - name\n        - description\n        - parameters\n      x-tags:\n        - Schemas\n    200seen:\n      type: array\n      minItems: 1\n      uniqueItems: true\n      items:\n        type: object\n        required:\n          - appName\n          - seenToggles\n          - metricsCount\n        properties:\n          appName:\n            type: string\n            minLength: 1\n            description: 'Application name'\n            example: 'my-application'\n          seenToggles:\n            $ref: '#/components/schemas/toggleSchema'\n      x-tags:\n        - Responses\n    200feature:\n      description: |-\n        - **lastHour** - how many times a Feature Toggle was accessed in the last hour.\n        - **lastMinute** - how many times a Feature Toggle was accessed in the last minute.\n      type: array\n      minItems: 1\n      uniqueItems: true\n      items:\n        type: object\n        required:\n          - appName\n          - seenToggles\n        properties:\n          appName:\n            type: string\n            enum:\n              - lastHour\n              - lastMinute\n            minLength: 1\n            example: lastHour\n          seenToggles:\n            $ref: '#/components/schemas/toggleSchema'\n      x-tags:\n        - Responses\n    metricsPayloadSchema:\n      description: A *bucket* of metrics data that tells you how often a Feature Toggle was enabled or disabled during a specified period of time\n      type: object\n      required:\n        - appName\n        - instanceId\n        - bucket\n      properties:\n        appName:\n          type: string\n          description: 'The name of your application'\n          example: 'my-application'\n        instanceId:\n          description: The name of the system running the application\n          type: string\n          minLength: 1\n          example: generated-732038-17080\n        bucket:\n          type: object\n          required:\n            - start\n            - stop\n            - toggles\n          properties:\n            start:\n              type: string\n              description: 'The start time for your metrics (in [ISO8601 format](https://www.w3.org/TR/NOTE-datetime))'\n              example: '2020-12-08T13:50:00.000Z'\n            stop:\n              type: string\n              description: 'The end time for your metrics (in [ISO8601 format](https://www.w3.org/TR/NOTE-datetime))'\n              example: '2020-12-08T13:55:00.000Z'\n            toggles:\n              $ref: '#/components/schemas/toggleSchema'\n      x-tags:\n        - Schemas\n    toggleSchema:\n      type: object\n      required:\n        - yesno\n        - metricsCount\n      properties:\n        yesno:\n          description: Was a Feature Toggle enabled (yes) or disabled (no)?\n          type: object\n          properties:\n            yesorno:\n              type: string\n              enum:\n                - 'yes'\n                - 'no'\n              example: 'yes'\n        metricsCount:\n          description: The number of times a Feature Toggle was enabled or disabled during the specified start and end time\n          type: object\n          properties:\n            count:\n              type: number\n              example: 1\n      x-tags:\n        - Schemas\n    clientRegistrationSchema:\n      type: object\n      required:\n        - appName\n        - instanceId\n        - strategies\n        - started\n        - interval\n      properties:\n        appName:\n          type: string\n          description: 'The name of your application'\n          example: 'my-application'\n        instanceId:\n          type: string\n          description: The name of the system running the application\n          minLength: 1\n          example: generated-732038-17080\n        sdkVersion:\n          description: The version of the Unleash client SDK running the application\n          type: string\n          example: 'unleash-client-node:3.4.0'\n        strategies:\n          type: array\n          description: List of strategy names implemented by this application\n          items:\n            required:\n              - strategy\n            properties:\n              strategy:\n                type: string\n                description: Strategy name\n                minLength: 1\n                example: 'default'\n        started:\n          type: string\n          description: 'When the client started (in [ISO8601 format](https://www.w3.org/TR/NOTE-datetime))'\n          example: '2016-11-03T07:16:43.572Z'\n        interval:\n          type: number\n          description: 'How often to send metrics to the Unleash API (in milliseconds)'\n          example: 10000\n      x-tags:\n        - Schemas\n    applicationArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/application'\n      x-tags:\n        - Schemas\n    application:\n      type: object\n      required:\n        - applications\n      properties:\n        applications:\n          type: array\n          uniqueItems: true\n          minItems: 1\n          items:\n            required:\n              - appName\n              - createdAt\n              - updatedAt\n              - strategies\n            properties:\n              appName:\n                description: Application name\n                type: string\n                example: my-application\n              createdAt:\n                description: 'The first time the application registered with Unleash (in [ISO8601 format](https://www.w3.org/TR/NOTE-datetime))'\n                type: string\n                example: '2016-12-09T14:56:36.730Z'\n              updatedAt:\n                description: \"The last time the application 'talked' to Unleash (sent metrics, registered, fetched feature toggles) - in [ISO8601 format](https://www.w3.org/TR/NOTE-datetime)\"\n                type: string\n                example: '2020-11-14T09:55:23.653Z'\n              description:\n                description: A description of what the application does\n                type: string\n              strategies:\n                description: A description of what the application does\n                type: string\n              url:\n                description: Absolute URL to the actual application\n                type: string\n                example: 'http://someapp.internal.url'\n              color:\n                description: Deprecated. Do not use\n                type: string\n              icon:\n                description: \"The application's icon. Must be one of the [Material Design icon names](https://material.io/resources/icons/?style=baseline)\"\n                type: string\n                example: comment_bank\n      x-tags:\n        - Schemas\n    200appdetails:\n      type: object\n      required:\n        - application\n        - instances\n        - strategies\n        - seenToggles\n      properties:\n        application:\n          $ref: '#/components/schemas/application'\n        strategies:\n          $ref: '#/components/schemas/strategySchema'\n        instances:\n          type: object\n          required:\n            - appName\n            - instanceId\n            - sdkVersion\n            - clientIp\n            - lastSeen\n            - createdAt\n          properties:\n            appName:\n              description: Application name\n              type: string\n              minLength: 1\n              example: my-application\n            instanceId:\n              description: The name of the system running the application\n              type: string\n              minLength: 1\n              example: generated-732038-17080\n            sdkVersion:\n              description: The version of the Unleash client SDK running the application\n              type: string\n              minLength: 1\n              example: 'unleash-client-node:3.4.0'\n            clientIp:\n              description: The IP address of the system running this instance of the application\n              type: string\n              minLength: 1\n              example: '::ffff:127.0.0.1'\n            lastSeen:\n              description: \"The last time the application 'talked' to Unleash (sent metrics, registered, fetched feature toggles) - in [ISO8601 format](https://www.w3.org/TR/NOTE-datetime)\"\n              type: string\n              minLength: 1\n              example: '2020-11-14T11:17:24.482Z'\n            createdAt:\n              description: 'The first time the application registered with Unleash (in [ISO8601 format](https://www.w3.org/TR/NOTE-datetime))'\n              type: string\n              minLength: 1\n              example: '2020-11-13T16:56:29.279Z'\n        seenToggles:\n          $ref: '#/components/schemas/featureToggleListSchema'\n        links:\n          type: object\n          properties:\n            self:\n              description: Deprecated. Do not use\n              type: string\n              minLength: 1\n      x-tags:\n        - Responses\n    featureToggleTypeSchema:\n      type: string\n      enum:\n        - release\n        - experiment\n        - ops\n        - killswitch\n        - permission\n      description: |-\n        'One of the five Unleash Feature Toggle types.\n\n        **type** is optional. If not defined, it defaults to *release*'\n      default: release\n      externalDocs:\n        description: Feature Toggle types\n        url: 'https://unleash.github.io/docs/feature_toggle_types'\n      minLength: 1\n      example: release\n      x-tags:\n        - Schemas\n    versionSchema:\n      type: number\n      description: For internal use by the Unleash developers\n      example: 1\n      x-tags:\n        - Schemas\n    featureToggleListSchema:\n      type: array\n      items:\n        type: array\n    featureToggleSchema:\n      type: object\n      required:\n        - name\n        - description\n        - type\n        - enabled\n        - stale\n        - strategies\n      properties:\n        name:\n          description: Feature Toggle name must be unique.\n          type: string\n          minLength: 1\n          example: featureX\n        description:\n          type: string\n          minLength: 1\n          example: Toggles featureX on and off\n        type:\n          $ref: '#/components/schemas/featureToggleTypeSchema'\n        enabled:\n          description: Is the Feature Toggle enabled?\n          type: boolean\n          example: true\n        stale:\n          description: Is the Feature Toggle 'stale' (deprecated)?\n          type: boolean\n          example: false\n        strategies:\n          $ref: '#/components/schemas/strategySchema'\n        variants:\n          $ref: '#/components/schemas/variantsSchema'\n        createdAt:\n          type: string\n          minLength: 1\n    x-tags:\n      - Schemas\n    strategySchema:\n      type: array\n      items:\n        type: object\n        properties:\n          name:\n            description: Name of the Strategy\n            type: string\n            minLength: 1\n            example: default\n          editable:\n            type: boolean\n            example: true\n          description:\n            description: What the Strategy is\n            type: string\n            example: Default on/off strategy.\n          parameters:\n            type: object\n            properties:\n              parameter:\n                type: object\n                required:\n                  - name\n                  - type\n                properties:\n                  name:\n                    description: The name of the parameter\n                    type: string\n                    example: groupId\n                  type:\n                    description: The type of the parameter\n                    type: string\n                    example: string\n                  description:\n                    description: What the parameter does\n                    type: string\n                    example: Define activation groups to allow you to correlate across feature toggles.\n                  required:\n                    description: Is this a required parameter?\n                    type: boolean\n                    example: false\n      x-tags:\n        - Schemas\n    variantsSchema:\n      externalDocs:\n        description: How to use Feature Toggle variants\n        url: 'https://unleash.github.io/docs/toggle_variants'\n      type: array\n      items:\n        required:\n          - name\n          - weight\n        properties:\n          name:\n            description: The name of the Feature Toggle variant\n            type: string\n            minLength: 1\n            example: yellow\n          weight:\n            description: |-\n              A number between 0 and 1,000.\n              The client SDK will summarize all variant weights, hash the number and divide the users among them. The distribution will be according to the weight as a fraction of the sum of weight.\n            type: number\n            example: 20\n      x-tags:\n        - Schemas\n\n    200Client:\n      type: object\n      properties:\n        version:\n          $ref: '#/components/schemas/versionSchema'\n        features:\n          type: array\n          uniqueItems: true\n          minItems: 1\n          items:\n            required:\n              - name\n              - description\n              - type\n              - enabled\n              - stale\n              - strategies\n              - createdAt\n            properties:\n              name:\n                type: string\n                description: 'Feature Toggle name'\n                minLength: 1\n                example: 'Demo'\n              description:\n                type: string\n                description: 'A description of the Feature Toggle'\n                minLength: 1\n                example: 'Show off fedfdfature toggles'\n              type:\n                type: string\n                enum:\n                  - Release\n                  - Experiment\n                  - Operational\n                  - Kill switch\n                  - Permission\n                description: 'The title of one of the five Feature Toggle types'\n                minLength: 1\n                example: 'Operational'\n              enabled:\n                description: Is the Feature Toggle enabled?\n                type: boolean\n                example: true\n              stale:\n                description: Is the Feature Toggle 'stale' (deprecated)?\n                type: boolean\n                example: false\n              strategies:\n                $ref: '#/components/schemas/strategySchema'\n              variants:\n                type: array\n                uniqueItems: true\n                items:\n                  properties:\n                    name:\n                      type: string\n                      description: 'Variant name'\n                      minLength: 1\n                      example: 'Red'\n                    weight:\n                      description: |-\n                        A number between 0 and 1,000.\n                        The client SDK will allocate traffic to each variant based on this weighting (as a fraction of the sum of all variant weights).\n                        **Examples**\n                        - You have four variants, each with a weight of 1000. The SDK will distribute traffic evenly: 25% each\n                        - You have two variants, one with a weight of 100 and one with a weight of 900. The SDK will send 90% of traffic to the variant with a weight of 900\n                      type: number\n                      example: 20\n                    weightType:\n                      type: string\n                      minLength: 1\n                      example: 'variable'\n                    payload:\n                      type: object\n                      description: 'Optional data associated with the variant, consisting of a *type/value* pair (as defined in the SDK)'\n                      properties:\n                        type:\n                          type: string\n                          example: 'string'\n                        value:\n                          type: string\n                          example: 'Something'\n                    overrides:\n                      type: array\n                      description: An optional array of overrides. If any [context](https://unleash.github.io/docs/unleash_context) field matches any of these overrides, *this* variant will be selected.\n                      items:\n                        type: object\n                        properties:\n                          contextName:\n                            type: string\n                            description: 'One of the six context fields'\n                            enum:\n                              - userId\n                              - sessionId\n                              - remoteAddress\n                              - properties\n                              - appName\n                              - environment\n                            example: 'userId'\n                          values:\n                            type: array\n                            description: 'The value(s) for the context field'\n                            items:\n                              properties:\n                                value:\n                                  type: string\n                                  example: '123'\n              createdAt:\n                type: string\n                minLength: 1\n      x-tags:\n        - Responses\n    200-events:\n      type: object\n      properties:\n        version:\n          $ref: '#/components/schemas/versionSchema'\n        events:\n          type: array\n          required:\n            - id\n            - type\n            - createdBy\n            - createdAt\n          uniqueItems: true\n          minItems: 1\n          items:\n            properties:\n              id:\n                description: The event number. All events have a unique id.\n                type: number\n                example: 55\n              type:\n                description: Identifies the event\n                type: string\n                enum:\n                  - feature-created\n                  - feature-metadata-updated\n                  - feature-project-change\n                  - feature-archived\n                  - feature-revived\n                  - feature-strategy-update\n                  - feature-strategy-add\n                  - feature-strategy-remove\n                  - feature-stale-on\n                  - feature-stale-off\n                  - feature-environment-enabled\n                  - feature-environment-disabled\n                minLength: 1\n                example: feature-updated\n              createdBy:\n                description: The current user's *email* or *username* (taken from the *User* object on the current session)\n                type: string\n                minLength: 1\n              createdAt:\n                description: 'The first time the application registered with Unleash (in [ISO8601 format](https://www.w3.org/TR/NOTE-datetime))'\n                type: string\n                example: '2016-12-09T14:56:36.730Z'\n              data:\n                description: The current state of the updated resource\n                type: object\n              preData:\n                description: The previous state of the updated resource\n                type: object\n              featureName:\n                description: Name of the feature toggle (if event related to a feature toggle)\n                type: string\n              project:\n                description: Name of the project (if event related to a project resource)\n                type: string\n              environment:\n                description: Name of the environment (if event related to a environment resource)\n                type: string\n\n      x-tags:\n        - Responses\n    200export:\n      type: object\n      required:\n        - version\n        - features\n        - strategies\n      properties:\n        version:\n          $ref: '#/components/schemas/versionSchema'\n        features:\n          $ref: '#/components/schemas/featureToggleListSchema'\n        strategies:\n          $ref: '#/components/schemas/strategySchema'\n      x-tags:\n        - Responses\n    200featuretype:\n      type: object\n      required:\n        - version\n        - types\n      properties:\n        version:\n          $ref: '#/components/schemas/versionSchema'\n        types:\n          type: array\n          uniqueItems: true\n          minItems: 1\n          items:\n            required:\n              - id\n              - name\n              - description\n              - lifetimeDays\n            properties:\n              id:\n                $ref: '#/components/schemas/featureToggleTypeSchema'\n              name:\n                description: The title of the Feature Toggle type\n                type: string\n                enum:\n                  - Release\n                  - Experiment\n                  - Operational\n                  - Kill switch\n                  - Permission\n                minLength: 1\n                example: Release\n              description:\n                description: A description of what this Feature Toggle type could be used for\n                type: string\n                enum:\n                  - Enables trunk-based development for teams practicing continuous delivery\n                  - Performs multivariate or A/B testing\n                  - Controls operational aspects of the system behavior\n                  - Gracefully degrades system functionality\n                  - Changes the features or product experiences that certain users receive\n                minLength: 1\n              lifetimeDays:\n                description: The number of days this Feature Toggle is intended to be used. This information is used to issue deprecation notices\n                externalDocs:\n                  description: Feature Toggle types\n                  url: 'https://unleash.github.io/docs/feature_toggle_types'\n                type: number\n                example: 40\n      x-tags:\n        - Responses\n",
			"canonicalURL": "/github.com/Unleash/unleash@54633500fd910d54b6d7301508f47073b764aa48/-/blob/docs/api/oas/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Unleash/unleash/blob/54633500fd910d54b6d7301508f47073b764aa48/docs/api/oas/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!seq into ogen.Schema"
}