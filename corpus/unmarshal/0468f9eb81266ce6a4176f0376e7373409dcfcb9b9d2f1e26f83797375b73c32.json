{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ergoplatform/ergo"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "src/main/resources/api/openapi.yaml",
			"byteSize": 141061,
			"content": "openapi: \"3.0.2\"\n\ninfo:\n  version: \"4.0.30\"\n  title: Ergo Node API\n  description: API docs for Ergo Node. Models are shared between all Ergo products\n  contact:\n    name: Ergo Platform Team\n    email: ergoplatform@protonmail.com\n    url: https://ergoplatform.org\n  license:\n    name: CC0 1.0 Universal\n    url: https://raw.githubusercontent.com/ergoplatform/ergo/master/LICENSE\n\nservers:\n  - url: /\n    description: Local full node\n  - url: http://213.239.193.208:9053\n    description: Known public node\n\ncomponents:\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: api_key\n\n  schemas:\n    # Objects\n    ErgoTransactionInput:\n      type: object\n      required:\n        - boxId\n        - spendingProof\n      properties:\n        boxId:\n          $ref: '#/components/schemas/TransactionBoxId'\n        spendingProof:\n          $ref: '#/components/schemas/SpendingProof'\n\n    ErgoTransactionDataInput:\n      type: object\n      required:\n        - boxId\n      properties:\n        boxId:\n          $ref: '#/components/schemas/TransactionBoxId'\n\n    ErgoTransactionUnsignedInput:\n      type: object\n      required:\n        - boxId\n      properties:\n        boxId:\n          $ref: '#/components/schemas/TransactionBoxId'\n        extension:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/SValue'\n          example:\n            '1': 'a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0'\n\n    SpendingProof:\n      description: Spending proof for transaction input\n      type: object\n      required:\n        - proofBytes\n        - extension\n      properties:\n        proofBytes:\n          $ref: '#/components/schemas/SpendingProofBytes'\n        extension:\n          type: object\n          description: Variables to be put into context\n          additionalProperties:\n            $ref: '#/components/schemas/SValue'\n          example:\n            '1': 'a2aed72ff1b139f35d1ad2938cb44c9848a34d4dcfd6d8ab717ebde40a7304f2541cf628ffc8b5c496e6161eba3f169c6dd440704b1719e0'\n\n    SerializedBox:\n      type: object\n      required:\n        - boxId\n        - bytes\n      properties:\n        boxId:\n          $ref: '#/components/schemas/TransactionBoxId'\n        bytes:\n          $ref: '#/components/schemas/HexString'\n\n    ScriptBytes:\n      type: object\n      required:\n        - bytes\n      properties:\n        bytes:\n          $ref: '#/components/schemas/HexString'\n\n    ErgoTransactionOutput:\n      type: object\n      required:\n        - value\n        - ergoTree\n        - additionalRegisters\n        - creationHeight\n      properties:\n        boxId:\n          $ref: '#/components/schemas/TransactionBoxId'\n        value:\n          description: Amount of Ergo token\n          type: integer\n          format: int64\n          minimum: 0\n          example: 147\n        ergoTree:\n          $ref: '#/components/schemas/ErgoTree'\n        creationHeight:\n          description: Height the output was created at\n          type: integer\n          format: int32\n          example: 9149\n        assets:\n          description: Assets list in the transaction\n          type: array\n          items:\n            $ref: '#/components/schemas/Asset'\n        additionalRegisters:\n          $ref: '#/components/schemas/Registers'\n        transactionId:\n          $ref: '#/components/schemas/TransactionId'\n        index:\n          description: Index in the transaction outputs\n          type: integer\n          format: int32\n\n    WalletBox:\n      type: object\n      required:\n        - box\n        - confirmationsNum\n        - address\n        - creationTransaction\n        - onchain\n        - creationOutIndex\n        - spendingTransaction\n        - spendingHeight\n        - inclusionHeight\n        - spent\n        - scans\n      properties:\n        box:\n          $ref: '#/components/schemas/ErgoTransactionOutput'\n        confirmationsNum:\n          description: Number of confirmations, if the box is included into the blockchain\n          type: integer\n          format: int32\n          minimum: 0\n          example: 147\n          nullable: true\n        address:\n          $ref: '#/components/schemas/ErgoAddress'\n        creationTransaction:\n          description: Transaction which created the box\n          $ref: '#/components/schemas/ModifierId'\n        spendingTransaction:\n          description: Transaction which created the box\n          nullable: true\n          $ref: '#/components/schemas/ModifierId'\n        spendingHeight:\n          description: The height the box was spent at\n          type: integer\n          format: int32\n          minimum: 0\n          example: 147\n          nullable: true\n        inclusionHeight:\n          description: The height the transaction containing the box was included in a block at\n          type: integer\n          format: int32\n          minimum: 0\n          example: 147\n        onchain:\n          description: A flag signalling whether the box is created on main chain\n          type: boolean\n          example: true\n        spent:\n          description: A flag signalling whether the box was spent\n          type: boolean\n          example: false\n        creationOutIndex:\n          description: An index of a box in the creating transaction\n          type: integer\n          format: int32\n          example: 2\n        scans:\n          description: Scan identifiers the box relates to\n          type: array\n          items:\n            type: integer\n            example: 1\n            default: 1\n\n    UnsignedErgoTransaction:\n      type: object\n      description: Unsigned Ergo transaction\n      required:\n        - inputs\n        - dataInputs\n        - outputs\n      properties:\n        id:\n          $ref: '#/components/schemas/TransactionId'\n        inputs:\n          description: Unsigned inputs of the transaction\n          type: array\n          items:\n            $ref: '#/components/schemas/ErgoTransactionUnsignedInput'\n        dataInputs:\n          description: Data inputs of the transaction\n          type: array\n          items:\n            $ref: '#/components/schemas/ErgoTransactionDataInput'\n        outputs:\n          description: Outputs of the transaction\n          type: array\n          items:\n            $ref: '#/components/schemas/ErgoTransactionOutput'\n\n    ErgoTransaction:\n      type: object\n      description: Ergo transaction\n      required:\n        - inputs\n        - dataInputs\n        - outputs\n      properties:\n        id:\n          $ref: '#/components/schemas/TransactionId'\n        inputs:\n          description: Inputs of the transaction\n          type: array\n          items:\n            $ref: '#/components/schemas/ErgoTransactionInput'\n        dataInputs:\n          description: Data inputs of the transaction\n          type: array\n          items:\n            $ref: '#/components/schemas/ErgoTransactionDataInput'\n        outputs:\n          description: Outputs of the transaction\n          type: array\n          items:\n            $ref: '#/components/schemas/ErgoTransactionOutput'\n        size:\n          description: Size in bytes\n          type: integer\n          format: int32\n\n    WalletTransaction:\n      type: object\n      description: Transaction augmented with some useful information\n      required:\n        - inputs\n        - dataInputs\n        - outputs\n        - inclusionHeight\n        - numConfirmations\n        - scans\n      properties:\n        id:\n          $ref: '#/components/schemas/TransactionId'\n        inputs:\n          description: Transaction inputs\n          type: array\n          items:\n            $ref: '#/components/schemas/ErgoTransactionInput'\n        dataInputs:\n          description: Transaction data inputs\n          type: array\n          items:\n            $ref: '#/components/schemas/ErgoTransactionDataInput'\n        outputs:\n          description: Transaction outputs\n          type: array\n          items:\n            $ref: '#/components/schemas/ErgoTransactionOutput'\n        inclusionHeight:\n          description: Height of a block the transaction was included in\n          type: integer\n          format: int32\n          example: 20998\n        numConfirmations:\n          description: Number of transaction confirmations\n          type: integer\n          format: int32\n          example: 20998\n        scans:\n          description: Scan identifiers the transaction relates to\n          type: array\n          items:\n            type: integer\n            example: 1\n            default: 1\n        size:\n          description: Size in bytes\n          type: integer\n          format: int32\n\n    ErgoAddress:\n      description: Encoded Ergo Address\n      type: string\n      example: '3WwbzW6u8hKWBcL1W7kNVMr25s2UHfSBnYtwSHvrRQt7DdPuoXrt'\n\n    RewardAddress:\n      type: object\n      required:\n        - rewardAddress\n      properties:\n        rewardAddress:\n          $ref: '#/components/schemas/ErgoAddress'\n\n    RewardPubKey:\n      type: object\n      required:\n        - rewardPubkey\n      properties:\n        rewardPubkey:\n          type: string\n          example: '02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3'\n\n    DlogSecret:\n      description: Hex-encoded big-endian 256-bits secret exponent\n      type: string\n      example: '433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f'\n\n    DhtSecret:\n      description: Hex-encoded big-endian 256-bits secret exponent \"w\" along with generators \"g\", \"h\", and group\n        elements \"u\", \"v\", such as g^w = u, h^w = v\n      type: object\n      required:\n        - secret\n        - g\n        - h\n        - u\n        - v\n      properties:\n        secret:\n          description: Hex-encoded big-endian 256-bits secret exponent\n          type: string\n          example: '433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f'\n        g:\n          description: Hex-encoded \"g\" generator for the Diffie-Hellman tuple (secp256k1 curve point)\n          type: string\n          example: '02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3'\n        h:\n          description: Hex-encoded \"h\" generator for the Diffie-Hellman tuple (secp256k1 curve point)\n          type: string\n          example: '02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3'\n        u:\n          description: Hex-encoded \"u\" group element of the Diffie-Hellman tuple (secp256k1 curve point)\n          type: string\n          example: '02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3'\n        v:\n          description: Hex-encoded \"v\" group element of the Diffie-Hellman tuple (secp256k1 curve point)\n          type: string\n          example: '02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3'\n\n    TransactionSigningRequest:\n      description: A request to sign a transaction with secrets provided\n      type: object\n      required:\n        - tx\n        - secrets\n      properties:\n        tx:\n          description: Unsigned transaction to sign\n          type: object\n          $ref: '#/components/schemas/UnsignedErgoTransaction'\n        inputsRaw:\n          description: Optional list of inputs to be used in serialized form\n          type: array\n          items:\n            type: string\n            description: hex-encoded serialized box bytes\n        dataInputsRaw:\n          description: Optional list of inputs to be used in serialized form\n          type: array\n          items:\n            type: string\n            description: hex-encoded serialized box bytes\n        hints:\n          description: Optional list of hints used for signing\n          $ref: '#/components/schemas/TransactionHintsBag'\n        secrets:\n          description: Secrets used for signing\n          type: object\n          properties:\n            dlog:\n              description: Sequence of secret exponents (DLOG secrets)\n              type: array\n              items:\n                $ref: '#/components/schemas/DlogSecret'\n            dht:\n              description: Sequence of secret Diffie-Hellman tuple exponents (DHT secrets)\n              type: array\n              items:\n                $ref: '#/components/schemas/DhtSecret'\n\n    AddressHolder:\n      description: Holds encoded ErgoAddress\n      type: object\n      required:\n        - address\n      properties:\n        address:\n          $ref: '#/components/schemas/ErgoAddress'\n\n    BoxesRequestHolder:\n      description: Holds request for wallet boxes\n      type: object\n      required:\n        - targetAssets\n        - targetBalance\n      properties:\n        targetAssets:\n          description: Target assets\n          type: array\n          items:\n            description: Pair of TokenId and Long\n            type: array\n            minItems: 2\n            maxItems: 2\n            items:\n              description: TokenId or Long\n              anyOf:\n                - description: TokenId\n                  type: string\n                - description: Long\n                  type: integer\n        targetBalance:\n          description: Target balance\n          type: integer\n          format: int64\n\n    RequestsHolder:\n      description: Holds many transaction requests and transaction fee\n      type: object\n      required:\n        - requests\n      properties:\n        requests:\n          description: Sequence of transaction requests\n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/PaymentRequest'\n              - $ref: '#/components/schemas/BurnTokensRequest'\n              - $ref: '#/components/schemas/AssetIssueRequest'\n        fee:\n          description: Transaction fee\n          type: integer\n          format: int64\n          example: 1000000\n        inputsRaw:\n          description: List of inputs to be used in serialized form\n          type: array\n          items:\n            type: string\n            description: hex-encoded serialized box bytes\n        dataInputsRaw:\n          description: List of data inputs to be used in serialized form\n          type: array\n          items:\n            type: string\n            description: hex-encoded serialized box bytes\n\n    SourceHolder:\n      type: object\n      required:\n        - source\n      properties:\n        source:\n          description: Sigma source to be compiled\n          type: string\n\n    ErgoLikeTransaction:\n      type: object\n      required:\n        - id\n        - inputs\n        - dataInputs\n        - outputs\n      properties:\n        id:\n          type: object\n          $ref: '#/components/schemas/ModifierId'\n        inputs:\n          type: array\n          items:\n            $ref: '#/components/schemas/ErgoTransactionInput'\n        dataInputs:\n          type: array\n          items:\n            $ref: '#/components/schemas/ErgoTransactionDataInput'\n        outputs:\n          type: array\n          items:\n            $ref: '#/components/schemas/ErgoTransactionOutput'\n\n    SigmaHeader:\n      type: object\n      description: Block header format used for sigma ErgoLikeContext\n      required:\n        - timestamp\n        - version\n        - adProofsRoot\n        - stateRoot\n        - transactionsRoot\n        - nBits\n        - extensionHash\n        - height\n        - parentId\n        - votes\n      properties:\n        id:\n          $ref: '#/components/schemas/ModifierId'\n        timestamp:\n          $ref: '#/components/schemas/Timestamp'\n        version:\n          $ref: '#/components/schemas/Version'\n        adProofsRoot:\n          $ref: '#/components/schemas/Digest32'\n        adProofsId:\n          $ref: '#/components/schemas/ModifierId'\n        stateRoot:\n          $ref: '#/components/schemas/AvlTreeData'\n        transactionsRoot:\n          $ref: '#/components/schemas/Digest32'\n        transactionsId:\n          $ref: '#/components/schemas/ModifierId'\n        nBits:\n          type: integer\n          format: int64\n          minimum: 0\n          example: 19857408\n        extensionHash:\n          $ref: '#/components/schemas/Digest32'\n        extensionRoot:\n          $ref: '#/components/schemas/Digest32'\n        extensionId:\n          $ref: '#/components/schemas/ModifierId'\n        height:\n          type: integer\n          format: int32\n          minimum: 0\n          example: 667\n        size:\n          type: integer\n          format: int32\n          minimum: 0\n          example: 667\n        parentId:\n          $ref: '#/components/schemas/ModifierId'\n        powSolutions:\n          $ref: '#/components/schemas/PowSolutions'\n        votes:\n          $ref: '#/components/schemas/Votes'\n        minerPk:\n          type: string\n          example: \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\"\n        powOnetimePk:\n          type: string\n          example: \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\"\n        powNonce:\n          $ref: '#/components/schemas/Digest32'\n        powDistance:\n          type: number\n          description: sigma.BigInt\n          example: 123456789\n\n    PreHeader:\n      type: object\n      required:\n        - timestamp\n        - version\n        - nBits\n        - height\n        - parentId\n        - votes\n      properties:\n        timestamp:\n          $ref: '#/components/schemas/Timestamp'\n        version:\n          $ref: '#/components/schemas/Version'\n        nBits:\n          type: integer\n          format: int64\n          minimum: 0\n          example: 19857408\n        height:\n          type: integer\n          format: int32\n          minimum: 0\n          example: 667\n        parentId:\n          $ref: '#/components/schemas/ModifierId'\n        votes:\n          $ref: '#/components/schemas/Votes'\n        minerPk:\n          type: string\n          example: \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\"\n\n    AvlTreeData:\n      required:\n        - digest\n      properties:\n        digest:\n          $ref: '#/components/schemas/Digest32'\n        treeFlags:\n          type: integer\n          format: int32\n        keyLength:\n          type: integer\n          format: int32\n        valueLength:\n          type: integer\n          format: int32\n          nullable: true\n\n\n    ErgoLikeContext:\n      required:\n        - lastBlockUtxoRoot\n        - headers\n        - preHeader\n        - dataBoxes\n        - boxesToSpend\n        - spendingTransaction\n        - selfIndex\n        - extension\n        - validationSettings\n        - costLimit\n        - initCost\n      properties:\n        lastBlockUtxoRoot:\n          type: object\n          description: state root before current block application\n          $ref: '#/components/schemas/AvlTreeData'\n        headers:\n          type: array\n          description: fixed number of last block headers in descending order (first header is the newest one)\n          items:\n            $ref: '#/components/schemas/SigmaHeader'\n        preHeader:\n          type: object\n          description: fields of block header with the current `spendingTransaction`, that can be predicted by a miner before its formation\n          $ref: '#/components/schemas/PreHeader'\n        dataBoxes:\n          type: array\n          description: boxes, that corresponds to id's of `spendingTransaction.dataInputs`\n          items:\n            type: ErgoBox\n            $ref: '#/components/schemas/ErgoTransactionOutput'\n        boxesToSpend:\n          type: array\n          description: boxes, that corresponds to id's of `spendingTransaction.inputs`\n          items:\n            type: ErgoBox\n            $ref: '#/components/schemas/ErgoTransactionOutput'\n        spendingTransaction:\n          type: object\n          description: transaction that contains `self` box\n          $ref: '#/components/schemas/ErgoLikeTransaction'\n        selfIndex:\n          type: integer\n          format: int64\n          description: index of the box in `boxesToSpend` that contains the script we're evaluating\n        extension:\n          type: object\n          description: prover-defined key-value pairs, that may be used inside a script\n        validationSettings:\n          type: string\n          description: validation parameters passed to Interpreter.verify to detect soft-fork conditions\n          example: \"10e8070001e9070001ea070001eb070001ec070001ed070001ee070001ef070001f0070001f1070001f2070001f3070001f4070001f5070001f6070001f7070001\"\n        costLimit:\n          type: integer\n          format: int64\n          description: hard limit on accumulated execution cost, if exceeded lead to CostLimitException to be thrown\n        initCost:\n          type: integer\n          format: int64\n          description: initial value of execution cost already accumulated before Interpreter.verify is called\n\n\n    ExecuteScript:\n      type: object\n      required:\n        - script\n        - namedConstants\n        - context\n      properties:\n        script:\n          description: Sigma script to be executed\n          type: string\n        namedConstants:\n          description: Environment for compiler\n          type: object\n          nullable: true\n        context:\n          description: Interpreter context\n          type: object\n          nullable: true\n          $ref: '#/components/schemas/ErgoLikeContext'\n\n    SigmaBoolean:\n      description: Algebraic data type of sigma proposition expressions\n      required:\n        - op\n      properties:\n        op:\n          type: integer\n          description: Sigma opCode\n          format: int8\n        h:\n          $ref: '#/components/schemas/HexString'\n        g:\n          $ref: '#/components/schemas/HexString'\n        u:\n          $ref: '#/components/schemas/HexString'\n        v:\n          $ref: '#/components/schemas/HexString'\n        condition:\n          type: boolean\n\n    SigmaBooleanAndPredicate:\n      allOf:\n        - $ref: '#/components/schemas/SigmaBoolean'\n        - type: object\n        - required:\n            - args\n        - properties:\n            args:\n              type: array\n              items:\n                $ref: '#/components/schemas/SigmaBoolean'\n\n    SigmaBooleanOrPredicate:\n      allOf:\n        - $ref: '#/components/schemas/SigmaBoolean'\n        - type: object\n        - required:\n            - args\n        - properties:\n            args:\n              type: array\n              items:\n                $ref: '#/components/schemas/SigmaBoolean'\n\n    SigmaBooleanThresholdPredicate:\n      allOf:\n        - $ref: '#/components/schemas/SigmaBoolean'\n        - type: object\n        - required:\n            - args\n        - properties:\n            args:\n              type: array\n              items:\n                $ref: '#/components/schemas/SigmaBoolean'\n\n    CryptoResult:\n      description: Result of executeWithContext request (reduceToCrypto)\n      type: object\n      required:\n        - value\n        - cost\n      properties:\n        value:\n          description: value of SigmaProp type which represents a statement verifiable via sigma protocol\n          $ref: '#/components/schemas/SigmaBoolean'\n        cost:\n          description: Estimated cost of contract execution\n          type: integer\n          format: int64\n      example:\n        value:\n          op: -45\n          condition: true\n        cost: 10\n\n    ScanningPredicate:\n      type: object\n      required:\n        - predicate\n      properties:\n        predicate:\n          type: string\n\n    ContainsPredicate:\n      allOf:\n        - $ref: '#/components/schemas/ScanningPredicate'\n        - type: object\n        - required:\n            - bytes\n        - properties:\n            register:\n              type: string\n            bytes:\n              type: string\n\n    EqualsPredicate:\n      allOf:\n        - $ref: '#/components/schemas/ScanningPredicate'\n        - type: object\n        - required:\n            - bytes\n        - properties:\n            register:\n              type: string\n            bytes:\n              type: string\n\n    ContainsAssetPredicate:\n      allOf:\n        - $ref: '#/components/schemas/ScanningPredicate'\n        - type: object\n        - required:\n            - assetId\n        - properties:\n            assetId:\n              type: string\n\n    AndPredicate:\n      allOf:\n        - $ref: '#/components/schemas/ScanningPredicate'\n        - type: object\n        - required:\n            - args\n        - properties:\n            args:\n              type: array\n              items:\n                $ref: '#/components/schemas/ScanningPredicate'\n\n    OrPredicate:\n      allOf:\n        - $ref: '#/components/schemas/ScanningPredicate'\n        - type: object\n        - required:\n            - args\n        - properties:\n            args:\n              type: array\n              items:\n                $ref: '#/components/schemas/ScanningPredicate'\n\n    ScanRequest:\n      type: object\n      properties:\n        scanName:\n          type: string\n        removeOffchain:\n          type: boolean\n        walletInteraction:\n          type: string\n          enum: [off, shared, forced]\n        trackingRule:\n          $ref: '#/components/schemas/ScanningPredicate'\n      example:\n        scanName: Assets Tracker\n        walletInteraction: off\n        removeOffchain: true\n        trackingRule:\n          predicate: containsAsset\n          assetId: 02dada811a888cd0dc7a0a41739a3ad9b0f427741fe6ca19700cf1a51200c96bf7\n\n    Scan:\n      type: object\n      properties:\n        scanName:\n          type: string\n        scanId:\n          type: integer\n        walletInteraction:\n          type: string\n          enum: [off, shared, forced]\n        removeOffchain:\n          type: boolean\n        trackingRule:\n          $ref: '#/components/schemas/ScanningPredicate'\n      example:\n        scanId: 2\n        scanName: Assets Tracker\n        walletInteraction: off\n        removeOffchain: true\n        trackingRule:\n          predicate: containsAsset\n          assetId: 02dada811a888cd0dc7a0a41739a3ad9b0f427741fe6ca19700cf1a51200c96bf7\n\n    ScanId:\n      type: object\n      properties:\n        scanId:\n          type: integer\n\n    ScanIdBoxId:\n      type: object\n      required:\n        - scanId\n        - boxId\n      properties:\n        scanId:\n          type: integer\n        boxId:\n          $ref: '#/components/schemas/TransactionBoxId'\n\n    ScanIdsBox:\n      description: Ergo box with associated scans (their respective identifiers)\n      type: object\n      required:\n        - scanIds\n        - box\n      properties:\n        scanIds:\n          type: array\n          items:\n            type: integer\n        box:\n          $ref: '#/components/schemas/ErgoTransactionOutput'\n\n    DlogCommitment:\n      description: Randomness and commitment for the first step of the Schnorr protocol\n      type: object\n      required:\n        - r\n        - a\n      properties:\n        r:\n          description:  Hex-encoded big-endian 256-bits secret exponent\n          type: string\n          example: '433080ff80d0d52d7f8bfffff47f00807f44f680000949b800007f7f7ff1017f'\n        a:\n          description: Hex-encoded \"g\" generator for the Diffie-Hellman tuple (secp256k1 curve point)\n          type: string\n          example: '02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3'\n\n    HintExtractionRequest:\n      description: request to extract prover hints from a transaction\n      type: object\n      required:\n        - tx\n        - real\n        - simulated\n      properties:\n        tx:\n          description:  Transaction to extract prover hints from\n          $ref: '#/components/schemas/ErgoTransaction'\n        real:\n          description: Real signers of the transaction\n          type: array\n          items:\n            $ref: '#/components/schemas/SigmaBoolean'\n        simulated:\n          description: Simulated signers of the transaction\n          type: array\n          items:\n            $ref: '#/components/schemas/SigmaBoolean'\n        inputsRaw:\n          description: Optional list of inputs to be used in serialized form\n          type: array\n          items:\n            type: string\n            description: hex-encoded serialized box bytes\n        dataInputsRaw:\n          description: Optional list of inputs to be used in serialized form\n          type: array\n          items:\n            type: string\n            description: hex-encoded serialized box bytes\n\n    Commitment:\n      description: basic trait for prover commitments\n      type: object\n      required:\n        - hint\n        - pubkey\n        - position\n        - cmtType\n        - a\n      properties:\n        hint:\n          type: string\n          enum: [cmtWithSecret, cmtReal, cmtSimulated]\n        pubkey:\n          $ref: '#/components/schemas/SigmaBoolean'\n        position:\n          type: string\n        type:\n          type: string\n          enum: [dlog, dht]\n        a:\n          description: a group element of the commitment\n          type: string\n        b:\n          description: b group element of the commitment (needed for DHT protocol only)\n          type: string\n\n    CommitmentWithSecret:\n      description: commitment to secret along with secret (!) randomness\n      allOf:     # Combines the Commitment and the inline model\n        - $ref: '#/components/schemas/Commitment'\n          type: object\n          required:\n            - secret\n          properties:\n          secret:\n            type: string\n\n    SecretProven:\n      type: object\n      required:\n        - hint\n        - challenge\n        - pubkey\n        - proof\n        - position\n      properties:\n        hint:\n          type: string\n          enum: [proofReal, proofSimulated]\n        challenge:\n          type: string\n        pubkey:\n          $ref: '#/components/schemas/SigmaBoolean'\n        proof:\n          type: string\n        position:\n          type: string\n\n    InputHints:\n      description: hints for inputs, key is input index, values is a set of hints for the input\n      type: object\n      additionalProperties:\n        type: array\n        items:\n          oneOf:\n            - $ref: '#/components/schemas/CommitmentWithSecret'\n            - $ref: '#/components/schemas/Commitment'\n            - $ref: '#/components/schemas/SecretProven'\n          discriminator:\n            propertyName: objectType\n            mapping:\n              cmtWithSecret: '#/components/schemas/CommitmentWithSecret'\n              cmtReal: '#/components/schemas/Commitment'\n              cmtSimulated: '#/components/schemas/Commitment'\n              proofReal: '#/components/schemas/SecretProven'\n              proofSimulated: '#/components/schemas/SecretProven'\n      example:\n        \"01\": [\n          {\n            \"hint\": \"cmtWithSecret\",\n            \"pubkey\": {\n              \"op\": -51,\n              \"h\": \"0327e65711a59378c59359c3e1d0f7abe906479eccb76094e50fe79d743ccc15e6\"\n            },\n            \"position\": \"0-1\",\n            \"type\": \"dlog\",\n            \"a\": \"02924d6274d1b9132fe028a0e3ac2fdbc503a1e52d1398932fa5f1bcf71909eb4b\",\n            \"secret\": \"42a2a0ae6b98ee791ac9734252e8a7a08e691b92de085138e302f64a722a4300\"\n          }]\n\n    TransactionHintsBag:\n      description: prover hints extracted from a transaction\n      type: object\n      properties:\n        secretHints:\n          description: Hints which contain secrets, do not share them!\n          type: array\n          items:\n            $ref: '#/components/schemas/InputHints'\n        publicHints:\n          description: Hints which contain public data only, share them freely!\n          type: array\n          items:\n            $ref: '#/components/schemas/InputHints'\n\n    GenerateCommitmentsRequest:\n      description: request to generate commitments to sign a transaction\n      type: object\n      required:\n        - tx\n      properties:\n        tx:\n          description: Unsigned transaction to sign\n          type: object\n          $ref: '#/components/schemas/UnsignedErgoTransaction'\n        secrets:\n          description: Optionally, external secrets used for signing\n          type: object\n          properties:\n            dlog:\n              description: Sequence of secret exponents (DLOG secrets)\n              type: array\n              items:\n                $ref: '#/components/schemas/DlogSecret'\n            dht:\n              description: Sequence of secret Diffie-Hellman tuple exponents (DHT secrets)\n              type: array\n              items:\n                $ref: '#/components/schemas/DhtSecret'\n        inputsRaw:\n          description: Optional list of inputs to be used in serialized form\n          type: array\n          items:\n            type: string\n            description: hex-encoded serialized box bytes\n        dataInputsRaw:\n          description: Optional list of inputs to be used in serialized form\n          type: array\n          items:\n            type: string\n            description: hex-encoded serialized box bytes\n\n    PaymentRequest:\n      description: Request for generation of payment transaction to a given address\n      type: object\n      required:\n        - address\n        - value\n      properties:\n        address:\n          $ref: '#/components/schemas/ErgoAddress'\n        value:\n          description: Payment amount\n          type: integer\n          format: int64\n          example: 1\n        assets:\n          description: Assets list in the transaction\n          type: array\n          items:\n            $ref: '#/components/schemas/Asset'\n        registers:\n          $ref: '#/components/schemas/Registers'\n\n    BurnTokensRequest:\n      description: Request for burning tokens in wallet\n      type: object\n      required:\n        - assetsToBurn\n      properties:\n        assetsToBurn:\n          description: Assets list to burn in the transaction\n          type: array\n          items:\n            $ref: '#/components/schemas/Asset'\n\n    AssetIssueRequest:\n      description: Request for generation of asset issue transaction\n      type: object\n      required:\n        - amount\n        - name\n        - description\n        - decimals\n      properties:\n        address:\n          description: Optional, first address in the wallet will be used if not defined\n          $ref: '#/components/schemas/ErgoAddress'\n        ergValue:\n          description: Optional, amount of ergs to be put into box with issued assets\n          format: int64\n          type: integer\n        amount:\n          description: Supply amount\n          type: integer\n          format: int64\n          example: 1000000\n        name:\n          description: Assets name\n          type: string\n          example: 'TST'\n        description:\n          description: Assets description\n          type: string\n          example: 'Test token'\n        decimals:\n          description: Number of decimal places\n          type: integer\n          format: int32\n          example: 8\n        registers:\n          description: Optional, possible values for registers R7...R9\n          $ref: '#/components/schemas/Registers'\n\n    FullBlock:\n      description: Block with header and transactions\n      type: object\n      required:\n        - header\n        - blockTransactions\n        - adProofs\n        - extension\n        - size\n      properties:\n        header:\n          $ref: '#/components/schemas/BlockHeader'\n        blockTransactions:\n          $ref: '#/components/schemas/BlockTransactions'\n        adProofs:\n          $ref: '#/components/schemas/BlockADProofs'\n        extension:\n          $ref: '#/components/schemas/Extension'\n        size:\n          description: Size in bytes\n          type: integer\n          format: int32\n\n    PowSolutions:\n      description: An object containing all components of pow solution\n      type: object\n      required:\n        - pk\n        - w\n        - n\n        - d\n      properties:\n        pk:\n          type: string\n          description: Base16-encoded public key\n          example: '0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5'\n        w:\n          type: string\n          example: '0366ea253123dfdb8d6d9ca2cb9ea98629e8f34015b1e4ba942b1d88badfcc6a12'\n        n:\n          type: string\n          example: '0000000000000000'\n        d:\n          type: number\n          example: 987654321\n\n    BlockHeaderWithoutPow:\n      type: object\n      required:\n        - id\n        - timestamp\n        - version\n        - adProofsRoot\n        - stateRoot\n        - transactionsRoot\n        - nBits\n        - extensionHash\n        - height\n        - difficulty\n        - parentId\n        - votes\n      properties:\n        id:\n          $ref: '#/components/schemas/ModifierId'\n        timestamp:\n          $ref: '#/components/schemas/Timestamp'\n        version:\n          $ref: '#/components/schemas/Version'\n        adProofsRoot:\n          $ref: '#/components/schemas/Digest32'\n        stateRoot:\n          $ref: '#/components/schemas/ADDigest'\n        transactionsRoot:\n          $ref: '#/components/schemas/Digest32'\n        nBits:\n          type: integer\n          format: int64\n          minimum: 0\n          example: 19857408\n        extensionHash:\n          $ref: '#/components/schemas/Digest32'\n        height:\n          type: integer\n          format: int32\n          minimum: 0\n          example: 667\n        difficulty:\n          type: integer\n          format: int32\n          minimum: 0\n          example: 62\n        parentId:\n          $ref: '#/components/schemas/ModifierId'\n        votes:\n          $ref: '#/components/schemas/Votes'\n        size:\n          description: Size in bytes\n          type: integer\n          format: int32\n        extensionId:\n          $ref: '#/components/schemas/ModifierId'\n        transactionsId:\n          $ref: '#/components/schemas/ModifierId'\n        adProofsId:\n          $ref: '#/components/schemas/ModifierId'\n\n    PopowHeader:\n      type: object\n      required:\n        - header\n        - interlinks\n      properties:\n        header:\n          $ref: '#/components/schemas/BlockHeader'\n        interlinks:\n          description: Array of header interlinks\n          type: array\n          items:\n            $ref: '#/components/schemas/ModifierId'\n\n    NipopowProof:\n      type: object\n      required:\n        - m\n        - k\n        - prefix\n        - suffixHead\n        - suffixTail\n      properties:\n        m:\n          description: security parameter (min μ-level superchain length)\n          type: number\n        k:\n          description: security parameter (min suffix length, \u003e= 1)\n          type: number\n        prefix:\n          description: proof prefix headers\n          type: array\n          items:\n            $ref: '#/components/schemas/PopowHeader'\n        suffixHead:\n          $ref: '#/components/schemas/PopowHeader'\n        suffixTail:\n          description: tail of the proof suffix headers\n          type: array\n          items:\n            $ref: '#/components/schemas/BlockHeader'\n\n    BlockHeader:\n      type: object\n      required:\n        - id\n        - timestamp\n        - version\n        - adProofsRoot\n        - stateRoot\n        - transactionsRoot\n        - nBits\n        - extensionHash\n        - powSolutions\n        - height\n        - difficulty\n        - parentId\n        - votes\n      properties:\n        id:\n          $ref: '#/components/schemas/ModifierId'\n        timestamp:\n          $ref: '#/components/schemas/Timestamp'\n        version:\n          $ref: '#/components/schemas/Version'\n        adProofsRoot:\n          $ref: '#/components/schemas/Digest32'\n        stateRoot:\n          $ref: '#/components/schemas/ADDigest'\n        transactionsRoot:\n          $ref: '#/components/schemas/Digest32'\n        nBits:\n          type: integer\n          format: int64\n          minimum: 0\n          example: 19857408\n        extensionHash:\n          $ref: '#/components/schemas/Digest32'\n        powSolutions:\n          $ref: '#/components/schemas/PowSolutions'\n        height:\n          type: integer\n          format: int32\n          minimum: 0\n          example: 667\n        difficulty:\n          type: string\n          example: '9575989248'\n        parentId:\n          $ref: '#/components/schemas/ModifierId'\n        votes:\n          $ref: '#/components/schemas/Votes'\n        size:\n          description: Size in bytes\n          type: integer\n          format: int32\n        extensionId:\n          $ref: '#/components/schemas/ModifierId'\n        transactionsId:\n          $ref: '#/components/schemas/ModifierId'\n        adProofsId:\n          $ref: '#/components/schemas/ModifierId'\n\n    BlockTransactions:\n      type: object\n      required:\n        - headerId\n        - transactions\n        - size\n      properties:\n        headerId:\n          $ref: '#/components/schemas/ModifierId'\n        transactions:\n          $ref: '#/components/schemas/Transactions'\n        size:\n          description: Size in bytes\n          type: integer\n          format: int32\n\n    BlockADProofs:\n      type: object\n      required:\n        - headerId\n        - proofBytes\n        - digest\n        - size\n      properties:\n        headerId:\n          $ref: '#/components/schemas/ModifierId'\n        proofBytes:\n          $ref: '#/components/schemas/SerializedAdProof'\n        digest:\n          $ref: '#/components/schemas/Digest32'\n        size:\n          description: Size in bytes\n          type: integer\n          format: int32\n\n    Extension:\n      type: object\n      required:\n        - headerId\n        - digest\n        - fields\n      properties:\n        headerId:\n          $ref: '#/components/schemas/ModifierId'\n        digest:\n          $ref: '#/components/schemas/Digest32'\n        fields:\n          description: List of key-value records\n          type: array\n          nullable: true\n          items:\n            $ref: '#/components/schemas/KeyValueItem'\n\n    KeyValueItem:\n      type: array\n      items:\n        $ref: '#/components/schemas/HexString'\n\n    CandidateBlock:\n      type: object\n      nullable: true\n      description: Can be null if node is not mining or candidate block is not ready\n      required:\n        - extensionHash\n        - parentId\n      properties:\n        version:\n          type: integer\n          format: int8\n          example: 2\n        extensionHash:\n          $ref: '#/components/schemas/Digest32'\n        timestamp:\n          $ref: '#/components/schemas/Timestamp'\n        stateRoot:\n          $ref: '#/components/schemas/ADDigest'\n        nBits:\n          type: integer\n          format: int64\n          minimum: 0\n          example: 19857408\n        adProofBytes:\n          $ref: '#/components/schemas/SerializedAdProof'\n        parentId:\n          $ref: '#/components/schemas/ModifierId'\n        transactionsNumber:\n          type: integer\n          format: int32\n          example: 2\n        transactions:\n          $ref: '#/components/schemas/Transactions'\n        votes:\n          $ref: '#/components/schemas/Votes'\n\n    PassphraseMatch:\n      type: object\n      required:\n        - matched\n      properties:\n        matched:\n          type: boolean\n          description: true if passphrase matches wallet, false otherwise\n\n    WalletStatus:\n      description: Status of the node wallet\n      type: object\n      required:\n        - isInitialized\n        - isUnlocked\n        - changeAddress\n        - walletHeight\n        - error\n      properties:\n        isInitialized:\n          type: boolean\n          description: true if wallet is initialized, false otherwise\n        isUnlocked:\n          type: boolean\n          description: true if wallet is unlocked, false otherwise\n        changeAddress:\n          type: string\n          description: address to send change to. Empty when wallet is not initialized or locked.\n            By default change address correponds to root key address, could be set via\n            /wallet/updateChangeAddress method.\n          example: '3WzCFq7mkykKqi4Ykdk8BK814tkh6EsPmA42pQZxU2NRwSDgd6yB'\n        walletHeight:\n          type: integer\n          description: last scanned height for the wallet (and external scans)\n        error:\n          type: string\n          description: last wallet error caught\n\n    InitWallet:\n      type: object\n      required:\n        - pass\n      properties:\n        pass:\n          type: string\n          description: Password to encrypt wallet file with\n        mnemonicPass:\n          type: string\n          description: Optional pass to password-protect mnemonic seed\n\n    InitWalletResult:\n      type: object\n      required:\n        - mnemonic\n      properties:\n        mnemonic:\n          type: string\n          description: Mnemonic seed phrase\n\n    RestoreWallet:\n      type: object\n      required:\n        - pass\n        - mnemonic\n      properties:\n        pass:\n          type: string\n          description: Password to encrypt wallet file with\n        mnemonic:\n          type: string\n          description: Mnemonic seed\n        mnemonicPass:\n          type: string\n          description: Optional pass to password-protect mnemonic seed\n\n    CheckWallet:\n      type: object\n      required:\n        - mnemonic\n      properties:\n        mnemonic:\n          type: string\n          description: Mnemonic seed (optional)\n        mnemonicPass:\n          type: string\n          description: Optional pass to password-protect mnemonic seed\n\n    UnlockWallet:\n      type: object\n      required:\n        - pass\n      properties:\n        pass:\n          type: string\n          description: Password to decrypt wallet file with\n\n    DeriveKey:\n      type: object\n      required:\n        - derivationPath\n      properties:\n        derivationPath:\n          type: string\n          description: Derivation path for a new secret to derive\n          example: 'm/1/2'\n\n    DeriveKeyResult:\n      type: object\n      required:\n        - address\n      properties:\n        address:\n          $ref: '#/components/schemas/ErgoAddress'\n\n    DeriveNextKeyResult:\n      type: object\n      required:\n        - derivationPath\n        - address\n      properties:\n        derivationPath:\n          type: string\n          description: Derivation path of the resulted secret\n          example: 'm/1/2'\n        address:\n          $ref: '#/components/schemas/ErgoAddress'\n\n    MerkleProof:\n      type: object\n      description: Merkle proof for a leaf, which is an array of bytes (e.g. a transaction identifier)\n      required:\n        - leaf\n        - levels\n      properties:\n        leaf:\n          type: string\n          description: Base16-encoded Merkle tree leaf bytes\n          example: 'cd665e49c834b0c25574fcb19a158d836f3f2aad8e91ac195f972534c25449b3'\n        levels:\n          type: array\n          items:\n            type: array\n            description: pairs of hash and side of hash\n            example: ['018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337', 0]\n            items:\n              anyOf:\n                - description: hash\n                  type: string\n                - description: side of hash\n                  type: integer\n          example: [['018b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337', 0]]\n\n    ProofOfUpcomingTransactions:\n      type: object\n      description: Proof that a block corresponding to given header without PoW contains some transactions\n      required:\n        - msgPreimage\n        - txProofs\n      properties:\n        msgPreimage:\n          type: string\n          description: Base16-encoded serialized header without Proof-of-Work\n          example: '0112e03c6d39d32509855be7cee9b62ff921f7a0cf6883e232474bd5b54d816dd056f846980d34c3b23098bdcf41222f8cdee5219224aa67750055926c3a2310a483accc4f9153e7a760615ea972ac67911cff111f8c17f563d6147205f58f85133ae695d1d4157e4aecdbbb29952cfa42b75129db55bddfce3bc53b8fd5b5465f10d8be8ddda62ed3b86afb0497ff2d381ed884bdae5287d20667def224a28d2b6e3ebfc78709780702c70bd8df0e000000'\n        txProofs:\n          type: array\n          description: Merkle proofs of transactions included into blocks (not necessarily all the block transactions)\n          items:\n            $ref: '#/components/schemas/MerkleProof'\n\n    WorkMessage:\n      description: Block candidate related data for external miner to perform work\n      type: object\n      required:\n        - msg\n        - b\n        - pk\n      properties:\n        msg:\n          type: string\n          description: Base16-encoded block header bytes without PoW solution\n          example: '0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5'\n        b:\n          type: integer\n          description: Work target value\n          example: 987654321\n        pk:\n          type: string\n          description: Base16-encoded miner public key\n          example: '0350e25cee8562697d55275c96bb01b34228f9bd68fd9933f2a25ff195526864f5'\n        proof:\n          type: object\n          $ref: '#/components/schemas/ProofOfUpcomingTransactions'\n\n    Peer:\n      type: object\n      required:\n        - address\n      properties:\n        address:\n          type: string\n          example: '127.0.0.1:5673'\n        name:\n          type: string\n          example: mynode\n          nullable: true\n        lastSeen:\n          $ref: '#/components/schemas/Timestamp'\n        connectionType:\n          type: string\n          nullable: true\n          enum:\n            - Incoming\n            - Outgoing\n\n    PeersStatus:\n      type: object\n      required:\n        - lastIncomingMessage\n        - currentNetworkTime\n      properties:\n        lastIncomingMessage:\n          type: integer\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n        currentNetworkTime:\n          type: integer\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n\n    PeerMode:\n      type: object\n      required:\n        - state\n        - verifyingTransactions\n        - fullBlocksSuffix\n      properties:\n        state:\n          type: string\n          example: 'utxo'\n        verifyingTransactions:\n          type: boolean\n          example: true\n        fullBlocksSuffix:\n          type: integer\n          example: 2880\n\n    SyncInfo:\n      type: object\n      required:\n        - address\n        - mode\n        - version\n        - status\n        - height\n      properties:\n        address:\n          type: string\n          example: '127.0.0.1:5673'\n        mode:\n          type: object\n          description: Peer operating mode parameters\n          $ref: '#/components/schemas/PeerMode'\n        version:\n          type: string\n          example: '4.0.16'\n        status:\n          type: string\n          example: 'Older'\n        height:\n          type: integer\n          example: 65780\n\n    RequestedInfo:\n      type: object\n      required:\n        - checks\n      properties:\n        address:\n          type: string\n          example: '127.0.0.1:5673'\n        version:\n          type: string\n          example: '4.0.26'\n        checks:\n          type: integer\n          description: How many times we checked for modifier delivery status\n          example: 4\n\n    RequestedInfoByModifierId:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/RequestedInfo'\n\n    ConnectedPeer:\n      type: object\n      required:\n        - address\n      properties:\n        address:\n          type: string\n          example: '127.0.0.1:5673'\n        version:\n          type: string\n          example: '4.0.26'\n        lastMessage:\n          $ref: '#/components/schemas/Timestamp'\n\n    ConnectedPeerByModifierId:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/ConnectedPeer'\n\n    TrackInfo:\n      type: object\n      required:\n        - invalidModifierApproxSize\n        - requested\n        - received\n      properties:\n        invalidModifierApproxSize:\n          type: integer\n          example: 65780\n        requested:\n          type: object\n          description: Currently requested modifiers\n          additionalProperties:\n            $ref: '#/components/schemas/RequestedInfoByModifierId'\n        received:\n          type: object\n          description: Received modifiers\n          additionalProperties:\n            $ref: '#/components/schemas/ConnectedPeerByModifierId'\n\n    BlacklistedPeers:\n      type: object\n      required:\n        - addresses\n      properties:\n        addresses:\n          type: array\n          items:\n            type: string\n            description: Blacklisted node address\n\n    NodeInfo:\n      type: object\n      required:\n        - name\n        - appVersion\n        - fullHeight\n        - headersHeight\n        - maxPeerHeight\n        - bestFullHeaderId\n        - previousFullHeaderId\n        - bestHeaderId\n        - headersScore\n        - fullBlocksScore\n        - stateRoot\n        - stateType\n        - stateVersion\n        - isMining\n        - peersCount\n        - unconfirmedCount\n        - difficulty\n        - currentTime\n        - launchTime\n        - genesisBlockId\n        - parameters\n      properties:\n        name:\n          type: string\n          example: my-node-1\n        appVersion:\n          type: string\n          example: 0.0.1\n        fullHeight:\n          type: integer\n          format: int32\n          description: Can be 'null' if state is empty (no full block is applied since node launch)\n          minimum: 0\n          example: 667\n          nullable: true\n        headersHeight:\n          type: integer\n          format: int32\n          description: Can be 'null' if state is empty (no header applied since node launch)\n          minimum: 0\n          example: 667\n          nullable: true\n        maxPeerHeight:\n          type: integer\n          format: int32\n          description: Maximum block height of connected peers. Can be 'null' if state is empty (no peer connected since node launch)\n          minimum: 0\n          example: 706162\n          nullable: true\n        bestFullHeaderId:\n          type: string\n          description: Can be 'null' if no full block is applied since node launch\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/ModifierId'\n        previousFullHeaderId:\n          type: string\n          description: Can be 'null' if no full block is applied since node launch\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/ModifierId'\n        bestHeaderId:\n          type: string\n          description: Can be 'null' if no header applied since node launch\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/ModifierId'\n        stateRoot:\n          type: string\n          nullable: true\n          description: Can be 'null' if state is empty (no full block is applied since node launch)\n          example: 'dab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'\n        stateType:\n          type: string\n          enum:\n            - digest\n            - utxo\n        stateVersion:\n          description: Can be 'null' if no full block is applied since node launch\n          type: string\n          example: 'fab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'\n          nullable: true\n        isMining:\n          type: boolean\n          example: true\n        peersCount:\n          type: integer\n          description: Number of connected peers\n          format: int32\n          minimum: 0\n          example: 327\n        unconfirmedCount:\n          description: Current unconfirmed transactions count\n          type: integer\n          format: int32\n          minimum: 0\n          maximum: 10000\n          example: 327\n        difficulty:\n          type: integer\n          minimum: 0\n          nullable: true\n          example: 667\n          description: \u003e\n            Difficulty on current bestFullHeaderId. Can be 'null' if no full block is applied since node launch.\n            Difficulty is a BigInt integer.\n        currentTime:\n          type: integer\n          description: Current internal node time\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n        launchTime:\n          type: integer\n          description: Time when the node was started\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n        headersScore:\n          type: integer\n          description: Can be 'null' if no headers is applied since node launch. headersScore is a BigInt integer.\n          nullable: true\n        fullBlocksScore:\n          type: integer\n          description: Can be 'null' if no full block is applied since node launch. fullBlocksScore is a BigInt integer.\n          nullable: true\n        genesisBlockId:\n          type: string\n          description: Can be 'null' if genesis blocks is not produced yet\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/ModifierId'\n        parameters:\n          type: object\n          description: current parameters\n          $ref: '#/components/schemas/Parameters'\n\n    Parameters:\n      type: object\n      required:\n        - height\n        - blockVersion\n        - storageFeeFactor\n        - minValuePerByte\n        - maxBlockSize\n        - maxBlockCost\n        - tokenAccessCost\n        - inputCost\n        - dataInputCost\n        - outputCost\n      properties:\n        height:\n          type: integer\n          format: int32\n          description: Height when current parameters were considered(not actual height). Can be '0' if state is empty\n          minimum: 0\n          example: 667\n          nullable: false\n        storageFeeFactor:\n          type: integer\n          format: int32\n          description: Storage fee coefficient (per byte per storage period ~4 years)\n          minimum: 0\n          example: 100000\n          nullable: false\n        minValuePerByte:\n          type: integer\n          format: int32\n          description: Minimum value per byte of an output\n          minimum: 0\n          example: 360\n          nullable: false\n        maxBlockSize:\n          type: integer\n          format: int32\n          description: Maximum block size (in bytes)\n          minimum: 0\n          example: 1048576\n          nullable: false\n        maxBlockCost:\n          type: integer\n          format: int32\n          description: Maximum cumulative computational cost of input scripts in block transactions\n          minimum: 0\n          example: 104876\n          nullable: false\n        blockVersion:\n          $ref: '#/components/schemas/Version'\n          nullable: false\n        tokenAccessCost:\n          type: integer\n          format: int32\n          description: Validation cost of a single token\n          minimum: 0\n          example: 100\n          nullable: false\n        inputCost:\n          type: integer\n          format: int32\n          description: Validation cost per one transaction input\n          minimum: 0\n          example: 100\n          nullable: false\n        dataInputCost:\n          type: integer\n          format: int32\n          description: Validation cost per one data input\n          minimum: 0\n          example: 100\n          nullable: false\n        outputCost:\n          type: integer\n          format: int32\n          description: Validation cost per one transaction output\n          minimum: 0\n          example: 100\n          nullable: false\n\n    Version:\n      description: Ergo blockchain protocol version\n      type: integer\n      format: int8\n      example: 2\n\n    TransactionBoxId:\n      description: Base16-encoded transaction box id bytes. Should be 32 bytes long\n      type: string\n      format: base16\n      example: '1ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'\n\n    TransactionId:\n      description: Base16-encoded transaction id bytes\n      type: string\n      format: base16\n      example: '2ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'\n\n    ErgoTree:\n      description: Base16-encoded ergo tree bytes\n      type: string\n      format: base16\n      example: '0008cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041'\n\n    ErgoTreeObject:\n      type: object\n      properties:\n        tree:\n          type: string\n          description: serialized Ergo tree\n          example: '02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3'\n\n    Transactions:\n      description: Ergo transaction objects\n      type: array\n      items:\n        $ref: '#/components/schemas/ErgoTransaction'\n\n    FeeHistogramBin:\n      description: Fee histogram bin\n      type: object\n      properties:\n        nTxns:\n          type: integer\n          format: int32\n        totalFee:\n          type: integer\n          format: int64\n\n    FeeHistogram:\n      description: Fee histogram for transactions in mempool\n      type: array\n      items:\n        $ref: '#/components/schemas/FeeHistogramBin'\n\n    Asset:\n      description: Token detail in the transaction\n      type: object\n      required:\n        - tokenId\n        - amount\n      properties:\n        tokenId:\n          $ref: '#/components/schemas/Digest32'\n        amount:\n          description: Amount of the token\n          type: integer\n          format: int64\n          example: 1000\n\n    Registers:\n      description: Ergo box registers\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/SValue'\n      example:\n        R4: '100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301'\n\n    SValue:\n      description: Base-16 encoded serialized Sigma-state value\n      type: string\n      format: base16\n      example: '100204a00b08cd0336100ef59ced80ba5f89c4178ebd57b6c1dd0f3d135ee1db9f62fc634d637041ea02d192a39a8cc7a70173007301'\n\n    Votes:\n      description: Base16-encoded votes for a soft-fork and parameters\n      type: string\n      format: base16\n      example: '000000'\n\n    ModifierId:\n      description: Base16-encoded 32 byte modifier id\n      type: string\n      format: base16\n      example: '3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'\n\n    Digest32:\n      description: Base16-encoded 32 byte digest\n      type: string\n      format: base16\n      example: '4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'\n\n    HexString:\n      description: Base16-encoded bytes\n      type: string\n      format: base16\n      example: '4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'\n\n    ADDigest:\n      description: Base16-encoded 33 byte digest - digest with extra byte with tree height\n      type: string\n      format: base16\n      example: '333ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'\n\n    SerializedAdProof:\n      description: Base16-encoded ad proofs\n      type: string\n      format: base16\n      example: '3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'\n\n    SpendingProofBytes:\n      description: Base16-encoded spending proofs\n      type: string\n      format: base16\n      example: '4ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd1173ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'\n\n    BlockSignature:\n      description: Base16-encoded block signature\n      type: string\n      format: base16\n      example: '5ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117'\n\n    Timestamp:\n      description: Basic timestamp definition\n      type: integer\n      format: int64\n      example: 1524143059077\n\n    EmissionInfo:\n      description: Emission info for height\n      type: object\n      properties:\n        minerReward:\n          type: integer\n          format: int64\n        totalCoinsIssued:\n          type: integer\n          format: int64\n        totalRemainCoins:\n          type: integer\n          format: int64\n        reemitted:\n          type: integer\n          format: int64\n\n    EmissionScripts:\n      description: Emission related scripts\n      type: object\n      properties:\n        emission:\n          type: string\n        reemission:\n          type: string\n        pay2Reemission:\n          type: string\n\n    BalancesSnapshot:\n      description: Amount of Ergo tokens and assets\n      type: object\n      required:\n        - height\n        - balance\n      properties:\n        height:\n          type: integer\n          format: int32\n        balance:\n          type: integer\n          format: int64\n        assets:\n          type: array\n          items:\n            $ref: '#/components/schemas/Asset'\n\n    AddressValidity:\n      description: Validity status of Ergo address\n      type: object\n      required:\n        - address\n        - isValid\n      properties:\n        address:\n          $ref: '#/components/schemas/ErgoAddress'\n        isValid:\n          type: boolean\n        error:\n          type: string\n\n    ApiError:\n      type: object\n      required:\n        - error\n        - reason\n        - detail\n      properties:\n        error:\n          type: integer\n          description: Error code\n          example: 500\n        reason:\n          type: string\n          description: String error code\n          example: 'Internal server error'\n        detail:\n          type: string\n          nullable: true\n          description: Detailed error description\n\npaths:\n  /blocks:\n    get:\n      summary: Get the Array of header ids\n      operationId: getHeaderIds\n      tags:\n        - blocks\n      parameters:\n        - in: query\n          name: limit\n          required: false\n          description: The number of items in list to return\n          schema:\n            type: integer\n            format: int32\n            minimum: 10\n            maximum: 100\n            default: 50\n        - in: query\n          name: offset\n          required: false\n          description: The number of items in list to skip\n          schema:\n            type: integer\n            format: int32\n            default: 0\n      responses:\n        '200':\n          description: Array of header ids\n          content:\n            application/json:\n              schema:\n                type: array\n                description: Array of header ids\n                items:\n                  type: string\n                  example: '8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337'\n                example: ['8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337']\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n    post:\n      summary: Send a mined block\n      operationId: sendMinedBlock\n      tags:\n        - blocks\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FullBlock'\n      responses:\n        '200':\n          description: Block is valid\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /blocks/at/{blockHeight}:\n    get:\n      summary: Get the header ids at a given height\n      operationId: getFullBlockAt\n      tags:\n        - blocks\n      parameters:\n        - in: path\n          name: blockHeight\n          required: true\n          description: Height of a wanted block\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: Array of header ids\n          content:\n            application/json:\n              schema:\n                type: array\n                description: Array of header ids\n                example: ['8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337']\n                items:\n                  type: string\n                  example: '8b7ae20a4acd23e3f1bf38671ce97103ad96d8f1c780b5e5e865e4873ae16337'\n        '404':\n          description: Blocks at this height doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /blocks/chainSlice:\n    get:\n      summary: Get headers in a specified range\n      operationId: getChainSlice\n      tags:\n        - blocks\n      parameters:\n        - in: query\n          name: fromHeight\n          required: false\n          description: Min header height\n          schema:\n            type: integer\n            format: int32\n            default: 0\n        - in: query\n          name: toHeight\n          required: false\n          description: Max header height (best header height by default)\n          schema:\n            type: integer\n            format: int32\n            default: -1\n      responses:\n        '200':\n          description: Array of headers\n          content:\n            application/json:\n              schema:\n                type: array\n                description: Array of headers\n                items:\n                  $ref: '#/components/schemas/BlockHeader'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /blocks/{headerId}:\n    get:\n      summary: Get the full block info by a given signature\n      operationId: getFullBlockById\n      tags:\n        - blocks\n      parameters:\n        # todo move out after full support aos3.0 was added to swagger-codegen\n        - in: path\n          name: headerId\n          required: true\n          description: ID of a wanted block\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Block object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FullBlock'\n        '404':\n          description: Block with this id doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /blocks/{headerId}/header:\n    get:\n      summary: Get the block header info by a given signature\n      operationId: getBlockHeaderById\n      tags:\n        - blocks\n      parameters:\n        # todo move out after full support aos3.0 was added to swagger-codegen\n        - in: path\n          name: headerId\n          required: true\n          description: ID of a wanted block header\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Block header object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlockHeader'\n        '404':\n          description: Block with this id doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /blocks/{headerId}/transactions:\n    get:\n      summary: Get the block transactions info by a given signature\n      operationId: getBlockTransactionsById\n      tags:\n        - blocks\n      parameters:\n        # todo move out after full support aos3.0 was added to swagger-codegen\n        - in: path\n          name: headerId\n          required: true\n          description: ID of a wanted block transactions\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Block transaction object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlockTransactions'\n        '404':\n          description: Block with this id doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /blocks/{headerId}/proofFor/{txId}:\n    get:\n      summary: Get Merkle proof for transaction\n      operationId: getProofForTx\n      tags:\n        - blocks\n      parameters:\n        - in: path\n          name: headerId\n          required: true\n          description: ID of a wanted block transactions\n          schema:\n            type: string\n        - in: path\n          name: txId\n          required: true\n          description: ID of a wanted transaction\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Merkle proof object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MerkleProof'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /blocks/lastHeaders/{count}:\n    get:\n      summary: Get the last headers objects\n      operationId: getLastHeaders\n      tags:\n        - blocks\n      parameters:\n        # todo move out after full support aos3.0 was added to swagger-codegen\n        - in: path\n          name: count\n          required: true\n          description: count of a wanted block headers\n          schema:\n            type: number\n      responses:\n        '200':\n          description: Array of block headers\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BlockHeader'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /blocks/modifier/{modifierId}:\n    get:\n      summary: Get the persistent modifier by its id\n      operationId: getModifierById\n      tags:\n        - blocks\n      parameters:\n        - in: path\n          name: modifierId\n          required: true\n          description: ID of a wanted modifier\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Persistent modifier object\n        '404':\n          description: Modifier with this id doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /nipopow/popowHeaderById/{headerId}:\n    get:\n      summary: Construct PoPow header according to given header id\n      operationId: getPopowHeaderById\n      tags:\n        - nipopow\n      parameters:\n        - in: path\n          name: headerId\n          required: true\n          description: ID of wanted header\n          schema:\n            type: string\n      responses:\n        '200':\n          description: PoPow header object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PopowHeader'\n        '404':\n          description: Header of extension of a corresponding block are not available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /nipopow/popowHeaderByHeight/{height}:\n    get:\n      summary: Construct PoPow header for best header at given height\n      operationId: getPopowHeaderByHeight\n      tags:\n        - nipopow\n      parameters:\n        - in: path\n          name: height\n          required: true\n          description: Height of a wanted header\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: PoPow header object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PopowHeader'\n        '404':\n          description: Header of extension of a corresponding block are not available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /nipopow/proof/{minChainLength}/{suffixLength}:\n    get:\n      summary: Construct PoPoW proof for given min superchain length and suffix length\n      operationId: getPopowProof\n      tags:\n        - nipopow\n      parameters:\n        - in: path\n          name: minChainLength\n          required: true\n          description: Minimal superchain length\n          schema:\n            type: number\n        - in: path\n          name: suffixLength\n          required: true\n          description: Suffix length\n          schema:\n            type: number\n      responses:\n        '200':\n          description: Nipopow proof object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NipopowProof'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /nipopow/proof/{minChainLength}/{suffixLength}/{headerId}:\n    get:\n      summary: Construct PoPoW proof for given min superchain length, suffix length and header ID\n      operationId: getPopowProofByHeaderId\n      tags:\n        - nipopow\n      parameters:\n        - in: path\n          name: minChainLength\n          required: true\n          description: Minimal superchain length\n          schema:\n            type: number\n        - in: path\n          name: suffixLength\n          required: true\n          description: Suffix length\n          schema:\n            type: number\n        - in: path\n          name: headerId\n          required: true\n          description: ID of wanted header\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Nipopow proof object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NipopowProof'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /info:\n    get:\n      summary: Get the information about the Node\n      operationId: getNodeInfo\n      tags:\n        - info\n      responses:\n        '200':\n          description: Node info object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeInfo'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /transactions:\n    post:\n      summary: Submit an Ergo transaction to unconfirmed pool to send it over the network\n      operationId: sendTransaction\n      tags:\n        - transactions\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ErgoTransaction'\n      responses:\n        '200':\n          description: JSON with ID of the new transaction\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionId'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /transactions/check:\n    post:\n      summary: Checks an Ergo transaction without sending it over the network. Checks that transaction is valid and\n        its inputs are in the UTXO set. Returns transaction identifier if the transaction is passing the checks.\n      operationId: checkTransaction\n      tags:\n        - transactions\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ErgoTransaction'\n      responses:\n        '200':\n          description: JSON with ID of the new transaction\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionId'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /transactions/unconfirmed:\n    parameters:\n      - in: query\n        name: limit\n        required: false\n        description: The number of items in list to return\n        schema:\n          type: integer\n          format: int32\n          minimum: 10\n          maximum: 100\n          default: 50\n      - in: query\n        name: offset\n        required: false\n        description: The number of items in list to skip\n        schema:\n          type: integer\n          format: int32\n          default: 0\n    get:\n      summary: Get current pool of the unconfirmed transactions pool\n      operationId: getUnconfirmedTransactions\n      tags:\n        - transactions\n      responses:\n        '200':\n          description: Array with Ergo transactions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Transactions'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /transactions/poolHistogram:\n    parameters:\n      - in: query\n        name: bins\n        required: false\n        description: The number of bins in histogram\n        schema:\n          type: integer\n          format: int32\n          minimum: 1\n          default: 10\n      - in: query\n        name: maxtime\n        required: false\n        description: Maximal wait time in milliseconds\n        schema:\n          type: integer\n          format: int64\n          minimum: 0\n          default: 60000\n    get:\n      summary: Get histogram (waittime, (n_trans, sum(fee)) for transactions in mempool.\n        It contains \"bins\"+1 bins, where i-th elements corresponds to transaction with wait time [i*maxtime/bins, (i+1)*maxtime/bins),\n        and last bin corresponds to the transactions with wait time \u003e= maxtime.\n      operationId: getFeeHistogram\n      tags:\n        - transactions\n      responses:\n        '200':\n          description: Array with fee histogram\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeeHistogram'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /transactions/getFee:\n    parameters:\n      - in: query\n        name: waitTime\n        required: true\n        description: Maximum transaction wait time in minutes\n        schema:\n          type: integer\n          format: int32\n          minimum: 1\n          default: 1\n      - in: query\n        name: txSize\n        required: true\n        description: Transaction size\n        schema:\n          type: integer\n          format: int32\n          minimum: 1\n          default: 100\n    get:\n      summary: Get recommended fee (in nanoErgs) for a transaction with specified size (in bytes) to be proceeded in specified time (in minutes)\n      operationId: getRecommendedFee\n      tags:\n        - transactions\n      responses:\n        '200':\n          description: Recommended fee for the transaction (in nanoErgs)\n          content:\n            application/json:\n              schema:\n                type: integer\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /transactions/waitTime:\n    parameters:\n      - in: query\n        name: fee\n        required: true\n        description: Transaction fee (in nanoErgs)\n        schema:\n          type: integer\n          format: int32\n          minimum: 1\n          default: 1\n      - in: query\n        name: txSize\n        required: true\n        description: Transaction size\n        schema:\n          type: integer\n          format: int32\n          minimum: 1\n          default: 100\n    get:\n      summary: Get expected wait time for the transaction with specified fee and size\n      operationId: getExpectedWaitTime\n      tags:\n        - transactions\n      responses:\n        '200':\n          description: Expected wait time in milliseconds\n          content:\n            application/json:\n              schema:\n                type: integer\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /peers/all:\n    get:\n      summary: Get all known peers\n      operationId: getAllPeers\n      tags:\n        - peers\n      responses:\n        '200':\n          description: Array of peer objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Peer'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /peers/connected:\n    get:\n      summary: Get current connected peers\n      operationId: getConnectedPeers\n      tags:\n        - peers\n      responses:\n        '200':\n          description: Array of peer objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Peer'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /peers/connect:\n    post:\n      summary: Add address to peers list\n      security:\n        - ApiKeyAuth: [api_key]\n      operationId: connectToPeer\n      tags:\n        - peers\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: string\n              example: '\"127.0.0.1:5673\"'\n      responses:\n        '200':\n          description: Attempt to connect to the peer\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /peers/blacklisted:\n    get:\n      summary: Get blacklisted peers\n      operationId: getBlacklistedPeers\n      tags:\n        - peers\n      responses:\n        '200':\n          description: Array of the addresses\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlacklistedPeers'\n\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /peers/status:\n    get:\n      summary: Get last incoming message timestamp and current network time\n      operationId: getPeersStatus\n      tags:\n        - peers\n      responses:\n        '200':\n          description: Network status\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PeersStatus'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /peers/syncInfo:\n    get:\n      summary: Get sync info reported by peers, including versions, current status and height (if available)\n      operationId: getPeersSyncInfo\n      tags:\n        - peers\n      responses:\n        '200':\n          description: Network status\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SyncInfo'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /peers/trackInfo:\n    get:\n      summary: Get track info reported by peers, including count of invalid modifiers and details of requested and received modifiers\n      operationId: getPeersTrackInfo\n      tags:\n        - peers\n      responses:\n        '200':\n          description: Network status\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TrackInfo'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /utils/seed:\n    get:\n      summary: Get random seed of 32 bytes\n      operationId: getRandomSeed\n      tags:\n        - utils\n      responses:\n        '200':\n          description: Base16-encoded 32 byte seed\n          content:\n            application/json:\n              schema:\n                type: string\n                example: '\"7e1e79dd4936bdc7d09f4ba9212849136b589fba4bcf4263a0961a95b65d08cb16\"'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /utils/address/{address}:\n    get:\n      summary: Check address validity\n      operationId: CheckAddressValidity\n      tags:\n        - utils\n      parameters:\n        - in: path\n          name: address\n          required: true\n          description: address to check\n          schema:\n            $ref: '#/components/schemas/ErgoAddress'\n      responses:\n        '200':\n          description: Address validity with validation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddressValidity'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /utils/addressToRaw/{address}:\n    get:\n      summary: Convert Pay-To-Public-Key Address to raw representation (hex-encoded serialized curve point)\n      operationId: AddressToRaw\n      tags:\n        - utils\n      parameters:\n        - in: path\n          name: address\n          required: true\n          description: address to extract public key from\n          schema:\n            $ref: '#/components/schemas/ErgoAddress'\n      responses:\n        '200':\n          description: hex-encoded public key (serialized secp256k1 element)\n          content:\n            application/json:\n              schema:\n                type: string\n                example: '02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /utils/rawToAddress/{pubkeyHex}:\n    get:\n      summary: Generate Pay-To-Public-Key address from hex-encoded raw pubkey (secp256k1 serialized point)\n      operationId: RawToAddress\n      tags:\n        - utils\n      parameters:\n        - in: path\n          name: pubkeyHex\n          required: true\n          description: public key to get address from\n          schema:\n            type: string\n            example: '02a7955281885bf0f0ca4a48678848cad8dc5b328ce8bc1d4481d041c98e891ff3'\n      responses:\n        '200':\n          description: Pay-to-public-key (P2PK) address\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErgoAddress'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /utils/ergoTreeToAddress/{ergoTreeHex}:\n    get:\n      summary: Generate Ergo address from hex-encoded ErgoTree\n      operationId: ErgoTreeToAddress\n      tags:\n        - utils\n      parameters:\n        - in: path\n          name: ergoTreeHex\n          required: true\n          description: ErgoTree to derive an address from\n          schema:\n            type: string\n            example: '100204a00b08cd021cf943317b0fdb50f60892a46b9132b9ced337c7de79248b104b293d9f1f078eea02d192a39a8cc7a70173007301'\n      responses:\n        '200':\n          description: Ergo address\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErgoAddress'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /utils/seed/{length}:\n    get:\n      summary: Generate random seed of specified length in bytes\n      operationId: getRandomSeedWithLength\n      tags:\n        - utils\n      parameters:\n        - in: path\n          name: length\n          required: true\n          description: seed length in bytes\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Base16-encoded N byte seed\n          content:\n            application/json:\n              schema:\n                type: string\n                example: '\"83375fd213cfd7dfd984ce1901d62c302a1db53160b416674c8da1a393a6bbc316\"'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /utils/hash/blake2b:\n    post:\n      summary: Return Blake2b hash of specified message\n      operationId: hashBlake2b\n      tags:\n        - utils\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: string\n              example: '\"7yaASMijGEGTbttYHg1MrXnWB8EbzjJnFLSWvmNoHrXV\"'\n      responses:\n        '200':\n          description: Base16-encoded 32 byte hash\n          content:\n            application/json:\n              schema:\n                type: string\n                example: '\"6ed54addddaf10fe8fcda330bd443a57914fbce38a9fa27248b07e361cc76a41\"'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/init:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Initialize new wallet with randomly generated seed\n      operationId: walletInit\n      tags:\n        - wallet\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/InitWallet'\n      responses:\n        '200':\n          description: New wallet with randomly generated seed created successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InitWalletResult'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/restore:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Create new wallet from existing mnemonic seed\n      operationId: walletRestore\n      tags:\n        - wallet\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RestoreWallet'\n      responses:\n        '200':\n          description: Wallet restored successfully\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/check:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Check whether mnemonic phrase is corresponding to the wallet seed\n      operationId: checkSeed\n      tags:\n        - wallet\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CheckWallet'\n      responses:\n        '200':\n          description: Whether passphrase match wallet\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PassphraseMatch'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/unlock:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Unlock wallet\n      operationId: walletUnlock\n      tags:\n        - wallet\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UnlockWallet'\n      responses:\n        '200':\n          description: Wallet unlocked successfully\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/lock:\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Lock wallet\n      operationId: walletLock\n      tags:\n        - wallet\n      responses:\n        '200':\n          description: Wallet locked successfully\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/rescan:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Rescan wallet (all the available full blocks)\n      operationId: walletRescan\n      tags:\n        - wallet\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - fromHeight\n              properties:\n                fromHeight:\n                  type: integer\n                  format: int32\n                  minimum: 0\n      responses:\n        '200':\n          description: Wallet rescanned\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n\n  /wallet/status:\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Get wallet status\n      operationId: getWalletStatus\n      tags:\n        - wallet\n      responses:\n        '200':\n          description: Wallet status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WalletStatus'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/updateChangeAddress:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Update address to be used to send change to\n      operationId: walletUpdateChangeAddress\n      tags:\n        - wallet\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ErgoAddress\"\n      responses:\n        '200':\n          description: Change address updated successfully\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/deriveKey:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Derive new key according to a provided path\n      operationId: walletDeriveKey\n      tags:\n        - wallet\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeriveKey'\n      responses:\n        '200':\n          description: Resulted address\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeriveKeyResult'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/deriveNextKey:\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Derive next key\n      operationId: walletDeriveNextKey\n      tags:\n        - wallet\n      responses:\n        '200':\n          description: Resulted secret path and address\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeriveNextKeyResult'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/balances:\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Get total amount of confirmed Ergo tokens and assets\n      operationId: walletBalances\n      tags:\n        - wallet\n      responses:\n        '200':\n          description: Get total amount of confirmed Ergo tokens and assets\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BalancesSnapshot'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/transactions:\n    parameters:\n      - in: query\n        name: minInclusionHeight\n        required: false\n        description: Minimal tx inclusion height\n        schema:\n          type: integer\n          format: int32\n          minimum: 0\n      - in: query\n        name: maxInclusionHeight\n        required: false\n        description: Maximal tx inclusion height\n        schema:\n          type: integer\n          format: int32\n          minimum: 0\n      - in: query\n        name: minConfirmations\n        required: false\n        description: Minimal confirmations number\n        schema:\n          type: integer\n          format: int32\n          minimum: 0\n      - in: query\n        name: maxConfirmations\n        required: false\n        description: Maximal confirmations number\n        schema:\n          type: integer\n          format: int32\n          minimum: 0\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Get a list of all wallet-related transactions\n      operationId: walletTransactions\n      tags:\n        - wallet\n      responses:\n        '200':\n          description: A list of all wallet-related transactions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WalletTransaction'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/transactionById:\n    parameters:\n      - in: query\n        name: id\n        required: true\n        description: Transaction id\n        schema:\n          type: string\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Get wallet-related transaction by id\n      operationId: walletGetTransaction\n      tags:\n        - wallet\n      responses:\n        '200':\n          description: Wallet-related transaction\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WalletTransaction'\n        '404':\n          description: Transaction with specified id not found in wallet\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/transactionsByScanId/{scanId}:\n    parameters:\n      - in: query\n        name: minInclusionHeight\n        required: false\n        description: Minimal tx inclusion height\n        schema:\n          type: integer\n          format: int32\n          minimum: 0\n      - in: query\n        name: maxInclusionHeight\n        required: false\n        description: Maximal tx inclusion height\n        schema:\n          type: integer\n          format: int32\n          minimum: 0\n      - in: query\n        name: minConfirmations\n        required: false\n        description: Minimal confirmations number\n        schema:\n          type: integer\n          format: int32\n          minimum: 0\n      - in: query\n        name: maxConfirmations\n        required: false\n        description: Maximal confirmations number\n        schema:\n          type: integer\n          format: int32\n          minimum: 0\n      - in: query\n        name: includeUnconfirmed\n        required: false\n        description: Include transactions from mempool\n        schema:\n          type: boolean\n          default: false\n    get:\n      security:\n        - ApiKeyAuth: [ api_key ]\n      summary: Get scan-related transactions by scan id\n      operationId: walletTransactionsByScanId\n      tags:\n        - wallet\n      parameters:\n        - in: path\n          name: scanId\n          required: true\n          description: identifier of a scan\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: Scan-related transactions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WalletTransaction'\n        '404':\n          description: Transactions with related scan id not found in wallet\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/boxes:\n    parameters:\n      - in: query\n        name: minConfirmations\n        required: false\n        description: Minimal number of confirmations\n        schema:\n          type: integer\n          format: int32\n          minimum: -1\n          default: 0\n      - in: query\n        name: minInclusionHeight\n        required: false\n        description: Minimal box inclusion height\n        schema:\n          type: integer\n          format: int32\n          minimum: 0\n          default: 0\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Get a list of all wallet-related boxes, both spent and unspent. Set minConfirmations to -1 to get\n        mempool boxes included.\n      operationId: walletBoxes\n      tags:\n        - wallet\n      responses:\n        '200':\n          description: A list of all wallet-related boxes\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WalletBox'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/boxes/collect:\n    post:\n      security:\n        - ApiKeyAuth: [ api_key ]\n      summary: Get a list of collected boxes.\n      operationId: walletBoxesCollect\n      tags:\n        - wallet\n      requestBody:\n        description: This API method recieves balance and assets, according to which, it's collecting result\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BoxesRequestHolder'\n      responses:\n        '200':\n          description: A list of all collected boxes\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WalletBox'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/boxes/unspent:\n    parameters:\n      - in: query\n        name: minConfirmations\n        required: false\n        description: Minimal number of confirmations\n        schema:\n          type: integer\n          format: int32\n          minimum: -1\n          default: 0\n      - in: query\n        name: minInclusionHeight\n        required: false\n        description: Minimal box inclusion height\n        schema:\n          type: integer\n          format: int32\n          minimum: 0\n          default: 0\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Get a list of unspent boxes. Set minConfirmations to -1 to have mempool boxes considered.\n      operationId: walletUnspentBoxes\n      tags:\n        - wallet\n      responses:\n        '200':\n          description: A list of unspent boxes\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WalletBox'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/balances/withUnconfirmed:\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Get summary amount of confirmed plus unconfirmed Ergo tokens and assets\n      operationId: walletBalancesUnconfirmed\n      tags:\n        - wallet\n      responses:\n        '200':\n          description: Get summary amount of confirmed plus unconfirmed Ergo tokens and assets\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BalancesSnapshot'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/addresses:\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Get wallet addresses\n      operationId: walletAddresses\n      tags:\n        - wallet\n      responses:\n        '200':\n          description: String with encoded wallet addresses\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ErgoAddress'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/transaction/generate:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Generate arbitrary transaction from array of requests.\n      operationId: walletTransactionGenerate\n      tags:\n        - wallet\n      requestBody:\n        description: This API method receives a sequence of requests as an input. Each request will produce an output\n          of the resulting transaction (with fee output created automatically). Currently supported types of requests are\n          payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below.\n          Please note that for the payment request \"assets\" and \"registers\" fields are not needed.\n          For asset issuance request, \"registers\" field is not needed.\n\n          You may specify boxes to spend by providing them in \"inputsRaw\". Please note you need to have strict equality between\n          input and output total amounts of Ergs in this case. If you want wallet to pick up the boxes,\n          leave \"inputsRaw\" empty.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestsHolder'\n      responses:\n        '200':\n          description: Generated Ergo transaction\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErgoTransaction'\n        '400':\n          description: Bad transaction request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/transaction/generateUnsigned:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Generate unsigned transaction from array of requests.\n      operationId: walletUnsignedTransactionGenerate\n      tags:\n        - wallet\n      requestBody:\n        description: The same as /wallet/transaction/generate but generates unsigned transaction.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestsHolder'\n      responses:\n        '200':\n          description: Generated unsigned Ergo transaction\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnsignedErgoTransaction'\n        '400':\n          description: Bad transaction request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n\n  /wallet/transaction/sign:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Sign arbitrary unsigned transaction with wallet secrets and also secrets provided.\n      operationId: walletTransactionSign\n      tags:\n        - wallet\n      requestBody:\n        description:\n          With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the\n          wallet. Both DLOG and Diffie-Hellman tuple secrets are supported.\n\n          Please note that the unsigned transaction contains only identifiers of inputs and data inputs. If the node\n          holds UTXO set, it is able to extract boxes needed. Otherwise, input (and data-input) boxes can be provided\n          in \"inputsRaw\" and \"dataInputsRaw\" fields.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TransactionSigningRequest'\n      responses:\n        '200':\n          description: Generated Ergo transaction\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErgoTransaction'\n        '400':\n          description: Bad transaction request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/transaction/send:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Generate and send arbitrary transaction\n      operationId: walletTransactionGenerateAndSend\n      tags:\n        - wallet\n      requestBody:\n        description: See description of /wallet/transaction/generate\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestsHolder'\n      responses:\n        '200':\n          description: Identifier of an Ergo transaction generated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionId'\n        '400':\n          description: Bad transaction request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/payment/send:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Generate and send payment transaction (default fee of 0.001 Erg is used)\n      operationId: walletPaymentTransactionGenerateAndSend\n      tags:\n        - wallet\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PaymentRequest'\n      responses:\n        '200':\n          description: Identifier of an Ergo transaction generated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionId'\n        '400':\n          description: Bad payment request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /mining/candidate:\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Request block candidate\n      operationId: miningRequestBlockCandidate\n      tags:\n        - mining\n      responses:\n        '200':\n          description: External candidate\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkMessage'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /mining/candidateWithTxs:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Request block candidate\n      operationId: miningRequestBlockCandidateWithMandatoryTransactions\n      tags:\n        - mining\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Transactions'\n      responses:\n        '200':\n          description: External candidate\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkMessage'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /mining/rewardAddress:\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Read miner reward address\n      operationId: miningReadMinerRewardAddress\n      tags:\n        - mining\n      responses:\n        '200':\n          description: Miner Reward Script (in P2S format)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RewardAddress'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /mining/rewardPublicKey:\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Read public key associated with miner rewards\n      operationId: miningReadMinerRewardPubkey\n      tags:\n        - mining\n      responses:\n        '200':\n          description: Public key for miner rewards (as hex-encoded secp256k1 point)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RewardPubKey'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /mining/solution:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Submit solution for current candidate\n      operationId: miningSubmitSolution\n      tags:\n        - mining\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PowSolutions'\n      responses:\n        '200':\n          description: Solution is valid\n        '400':\n          description: Solution is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /utxo/getBoxesBinaryProof:\n    post:\n      security:\n        -  ApiKeyAuth: [api_key]\n      summary: Get serialized batch proof for given set of boxes\n      operationId: getBoxesBinaryProof\n      tags:\n        - utxo\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TransactionBoxId'\n      responses:\n        '200':\n          description: Serialized batch proof\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SerializedAdProof'\n        '400':\n          description: Prove error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /utxo/byId/{boxId}:\n    get:\n      summary: Get box contents for a box by a unique identifier.\n      operationId: getBoxById\n      tags:\n        - utxo\n      parameters:\n        - in: path\n          name: boxId\n          required: true\n          description: ID of a wanted box\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Box object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErgoTransactionOutput'\n        '404':\n          description: Box with this id doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /utxo/byIdBinary/{boxId}:\n    get:\n      summary: Get serialized box from UTXO pool in Base16 encoding by an identifier.\n      operationId: getBoxByIdBinary\n      tags:\n        - utxo\n      parameters:\n        - in: path\n          name: boxId\n          required: true\n          description: ID of a wanted box\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Json containing box identifier and hex-encoded box bytes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SerializedBox'\n        '404':\n          description: Box with this id doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n\n  /utxo/withPool/byId/{boxId}:\n    get:\n      summary: Get box contents for a box by a unique identifier, from UTXO set and also the mempool.\n      operationId: getBoxWithPoolById\n      tags:\n        - utxo\n      parameters:\n        - in: path\n          name: boxId\n          required: true\n          description: ID of a box to obtain\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Box object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErgoTransactionOutput'\n        '404':\n          description: Box with this id doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /utxo/withPool/byIdBinary/{boxId}:\n    get:\n      summary: Get serialized box in Base16 encoding by an identifier, considering also the mempool.\n      operationId: getBoxWithPoolByIdBinary\n      tags:\n        - utxo\n      parameters:\n        - in: path\n          name: boxId\n          required: true\n          description: ID of a wanted box\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Json containing box identifier and hex-encoded box bytes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SerializedBox'\n        '404':\n          description: Box with this id doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /utxo/genesis:\n    get:\n      summary: Get genesis boxes (boxes existed before the very first block)\n      operationId: genesisBoxes\n      tags:\n        - utxo\n      responses:\n        '200':\n          description: A list of all the genesis boxes\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ErgoTransactionOutput'\n        '404':\n          description: Box with this id doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n\n  /script/p2sAddress:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Create P2SAddress from Sigma source\n      operationId: scriptP2SAddress\n      tags:\n        - script\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SourceHolder'\n      responses:\n        '200':\n          description: Ergo address derived from source\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddressHolder'\n        '400':\n          description: Bad source\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /script/p2shAddress:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Create P2SHAddress from Sigma source\n      operationId: scriptP2SHAddress\n      tags:\n        - script\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SourceHolder'\n      responses:\n        '200':\n          description: Ergo address derived from source\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddressHolder'\n        '400':\n          description: Bad source\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n\n  /script/addressToTree/{address}:\n    get:\n      summary: Convert an address to hex-encoded serialized ErgoTree (script)\n      operationId: addressToTree\n      tags:\n        - script\n      parameters:\n        - in: path\n          name: address\n          required: true\n          description: address to get a script from\n          schema:\n            $ref: '#/components/schemas/ErgoAddress'\n      responses:\n        '200':\n          description: Base16-encoded ErgoTree (script)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErgoTreeObject'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /script/addressToBytes/{address}:\n    get:\n      summary: Convert an address to hex-encoded Sigma byte array constant which contains script bytes\n      operationId: addressToBytes\n      tags:\n        - script\n      parameters:\n        - in: path\n          name: address\n          required: true\n          description: address to get a script from\n          schema:\n            $ref: '#/components/schemas/ErgoAddress'\n      responses:\n        '200':\n          description: Base16-encoded Sigma byte array constant which contains script bytes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScriptBytes'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /script/executeWithContext:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Execute script with context\n      operationId: executeWithContext\n      tags:\n        - script\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExecuteScript'\n      responses:\n        '200':\n          description: Result of reduceToCrypto\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CryptoResult'\n        '400':\n          description: Compiler error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /scan/register:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Register a scan\n      operationId: registerScan\n      tags:\n        - scan\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScanRequest'\n      responses:\n        '200':\n          description: Identifier of a scan generated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScanId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /scan/deregister:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Stop tracking and deregister scan\n      operationId: deregisterScan\n      tags:\n        - scan\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScanId'\n      responses:\n        '200':\n          description: Identifier of a scan removed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScanId'\n        '400':\n          description: No scan found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /scan/listAll:\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: List all the registered scans\n      operationId: listAllScans\n      tags:\n        - scan\n      responses:\n        '200':\n          description: List of scans registered\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Scan'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /scan/unspentBoxes/{scanId}:\n    parameters:\n      - in: query\n        name: minConfirmations\n        required: false\n        description: Minimal number of confirmations\n        schema:\n          type: integer\n          format: int32\n          minimum: -1\n          default: 0\n      - in: query\n        name: minInclusionHeight\n        required: false\n        description: Minimal box inclusion height\n        schema:\n          type: integer\n          format: int32\n          minimum: 0\n          default: 0\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: List boxes which are not spent.\n      operationId: listUnspentScans\n      tags:\n        - scan\n      parameters:\n        - in: path\n          name: scanId\n          required: true\n          description: identifier of a scan\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: List of unspent boxes\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WalletBox'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /scan/spentBoxes/{scanId}:\n    parameters:\n      - in: query\n        name: minConfirmations\n        required: false\n        description: Minimal number of confirmations\n        schema:\n          type: integer\n          format: int32\n          minimum: -1\n          default: 0\n      - in: query\n        name: minInclusionHeight\n        required: false\n        description: Minimal box inclusion height\n        schema:\n          type: integer\n          format: int32\n          minimum: 0\n          default: 0\n    get:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: List boxes which are spent.\n      operationId: listSpentScans\n      tags:\n        - scan\n      parameters:\n        - in: path\n          name: scanId\n          required: true\n          description: identifier of a scan\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: List of spent boxes\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WalletBox'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /scan/stopTracking:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Stop scan-related box tracking\n      operationId: scanStopTracking\n      tags:\n        - scan\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScanIdBoxId'\n      responses:\n        '200':\n          description: The box is not tracked anymore\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScanIdBoxId'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /wallet/generateCommitments:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Generate signature commitments for inputs of an unsigned transaction\n      operationId: generateCommitments\n      tags:\n        - wallet\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GenerateCommitmentsRequest'\n      responses:\n        '200':\n          description: Transaction-related hints\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionHintsBag'\n        '400':\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n\n  /wallet/extractHints:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Extract hints from a transaction\n      operationId: extractHints\n      tags:\n        - wallet\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/HintExtractionRequest'\n      responses:\n        '200':\n          description: Hints for the transaction\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionHintsBag'\n        '400':\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n\n  /scan/addBox:\n    post:\n      security:\n        - ApiKeyAuth: [api_key]\n      summary: Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet.\n      operationId: addBox\n      tags:\n        - scan\n        - wallet\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScanIdsBox'\n      responses:\n        '200':\n          description: It the box is added successfully, then its id is returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionId'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /node/shutdown:\n    post:\n      security:\n        - ApiKeyAuth: [ api_key ]\n      summary: Shuts down the node\n      operationId: nodeShutdown\n      tags:\n        - node\n      responses:\n        '200':\n          description: The node will be shut down in 5 seconds\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /emission/at/{blockHeight}:\n    get:\n      summary: Get emission data for a given height\n      operationId: emissionAt\n      tags:\n        - emission\n      parameters:\n        - in: path\n          name: blockHeight\n          required: true\n          description: Height to get emission data for\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: Emission data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmissionInfo'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\n  /emission/scripts:\n    get:\n      summary: Print emission-related scripts\n      operationId: emissionScripts\n      tags:\n        - emission\n      responses:\n        '200':\n          description: Emission-related scripts\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmissionScripts'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'"
		}
	},
	"Error": "unmarshal: start: unexpected byte 110 'n'"
}