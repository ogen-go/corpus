{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/progressive-identity/alias-js"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "provider/openapi.yaml",
			"byteSize": 35478,
			"content": "openapi: 3.0.0\ninfo:\n    title: Alias Provider backend API\n    version: 0.1\n\ncomponents:\n    securitySchemes:\n        APIKeyAuth:\n            type: apiKey\n            in: header\n            name: X-Alias-APIKey\n\n    requests:\n        users:\n            responses:\n                '401':\n                    description: The caller should authenticate the request with\n                        the user's name and public password hash.\n\n        sessions:\n            responses:\n                '401':\n                    description: No session is active. See `/api/session/login`.\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    status:\n                                        type: string\n                                        example: \"error\"\n                                    reason:\n                                        type: string\n                                        example: \"unauthorized\"\n\n    parameters:\n        headerPublicKey:\n            name: X-Alias-PublicKey\n            required: false\n            in: header\n            schema:\n                type: string\n                format: byte\n                description: User's public key\n                example: CAGHyttrbAmzbMDzp-vLE9yDj8U5X0X6qB_J-6ZOJen7PeDuupZRAUYTGUDshrYyDMj2lWQC9fkp4XQJveU9WA\n\n    schemas:\n        box:\n            type: object\n            properties:\n                __box:\n                    type: string\n                    format: byte\n            required:\n                - __box\n\n        signedGrant:\n            type: object\n            properties:\n                type:\n                    type: string\n                    enum: [\"anychain.signature\"]\n                date:\n                    type: integer\n                    description: \"timestamp when the contract was signed\"\n                    example: 1574158519\n                signer:\n                    type: object\n                    properties:\n                        __bytes:\n                            type: string\n                            required: true\n                            format: byte\n                            description: Signer's public key encoded in Base64.\n                            example: I-jkKueHiPjYOdyPaXZutYriHzAQ5b6R6yI30m8mQvY\n                signature:\n                    type: object\n                    properties:\n                        __bytes:\n                            type: string\n                            required: true\n                            format: byte\n                            description: Signature encoded in Base64.\n                            example: WMW31LIYhCykfAVUTWG0b-lJqDj5KxbLU0pXfkRAXHzfEoc2NvMOyB4pq0qssq0bL0U_524S0Bh9KttTkT1hDA\n\n                body:\n                    $ref: '#/components/schemas/grant'\n\n        grant:\n            type: object\n            properties:\n                type:\n                    type: string\n                    required: true\n                    enum: [\"alias.grant\"]\n\n                contract:\n                    $ref: '#/components/schemas/contract'\n\n                revoked:\n                    type: boolean\n                    required: true\n                    example: false\n                    description: Defines if the grant had been revoked. If so, any future grant for the same contract will be ignored.\n\n                base:\n                    type: object\n                    required: true\n                    description: Consent of the user for each legal base\n                    properties:\n                        contractual:\n                            type: boolean\n                            required: true\n                            example: true\n                            description: The user agrees with the contractual clauses. Always true, else the contract is invalid.\n                        consent:\n                            type: array\n                            required: true\n                            items:\n                                type: array\n                                items:\n                                    type: boolean\n                                    description: The user agrees with the consent clause at the same index of the current element.\n                        legitimate:\n                            type: array\n                            required: true\n                            items:\n                                type: array\n                                items:\n                                    type: boolean\n                                    description: The user agrees with the consent clause at the same index of the current element.\n\n        contract:\n            type: object\n            properties:\n                type:\n                    type: string\n                    required: true\n                    enum: [\"alias.contract\"]\n\n                legal:\n                    type: object\n                    required: true\n                    description: Legal parameters of the contract outside the data access.\n                    properties:\n                        automated_decision:\n                            required: true\n                            type: boolean\n                            description: Are you using these data to generate an automated decision about users?\n\n                        automated_surveillance:\n                            type: boolean\n                            required: true\n                            description: Is there an automated surveillance attached to the data?\n\n                        destination:\n                            description: List all the legal entities or 3rd parties who will be destination of the data\n                            type: array\n                            required: true\n                            items:\n                                type: string\n\n                        email_dpo:\n                            type: string\n                            required: true\n                            description: What is the contact email address of your company Data Protection Officer?\n\n                        evaluation_notation_rating_profiling:\n                            type: boolean\n                            required: true\n                            description: Are you using these data for evaluation, notation, rating, or for profiling activities?\n\n                        innovative_reasonable_expectations:\n                            type: boolean\n                            required: true\n                            description: Are you using these data in a innovative way, or from innovative technologies or innovative organizationnal systems beyond reasonnable expectations of the user?\n\n                        legal_tos_url:\n                            type: string\n                            required: true\n                            description: What is the URL to your User's Terms of Service?\n\n                        mixing_reasonable_expectations:\n                            type: boolean\n                            required: true\n                            description: Are you crossing or mixing these data with others beyond reasonnable expectations that the user should know?\n\n                        storage_duration:\n                            type: string\n                            required: true\n                            description: How long these data will be stored?\n\n                        subprocessors:\n                            description: List all the subprocessors who will be third-party data processors\n                            type: array\n                            required: true\n                            items:\n                                type: string\n\n                        transfer_outside_eea:\n                            type: boolean\n                            required: true\n                            description: Are these data to be transferred outside the European Economic Area (EEA)?\n\n                base:\n                    type: object\n                    required: true\n                    description: Description of what data to access and why for each legal bases\n                    properties:\n                        consent:\n                            type: object\n                            required: true\n                            description: Description of what data to access and why for the legal base 'consent'\n                            properties:\n                                scopes:\n                                    type: array\n                                    required: true\n                                    items:\n                                        $ref: '#/components/schemas/scope'\n                                usages:\n                                    type: array\n                                    required: true\n                                    items:\n                                        $ref: '#/components/schemas/usage'\n                        contractual:\n                            type: object\n                            required: true\n                            description: Description of what data to access and why for the legal base 'contractual'\n                            properties:\n                                scopes:\n                                    type: array\n                                    required: true\n                                    items:\n                                        $ref: '#/components/schemas/scope'\n                                usages:\n                                    type: array\n                                    required: true\n                                    items:\n                                        $ref: '#/components/schemas/usage'\n\n                        legitimate:\n                            type: object\n                            required: true\n                            description: Description of what data to access and why for the legal base 'legitimate'\n                            properties:\n                                reason:\n                                    type: string\n                                    required: true\n                                    description: Main reason for the use of the legitimate legal base.\n                                groups:\n                                    type: array\n                                    required: true\n                                    items:\n                                        type: object\n                                        properties:\n                                            scopes:\n                                                type: array\n                                                required: true\n                                                items:\n                                                    $ref: '#/components/schemas/scope'\n                                            usages:\n                                                type: array\n                                                required: true\n                                                items:\n                                                    $ref: '#/components/schemas/usage'\n\n\n\n                client:\n                    $ref: '#/components/schemas/signedClient'\n\n                network:\n                    type: object\n                    description: \"Network metadata. Optional.\"\n                    properties:\n                        scheme:\n                            type: string\n                            enum: [\"http\", \"https\"]\n                            description: URL scheme to contact the client in the base of this contract. By default, 'https'\n                        redirectEndpoint:\n                            type: string\n                            description: URL basepath of the callback of the\n                                client when the provider will have the user's\n                                response on their consent of the current contract.\n\n        scope:\n            type: object\n            properties:\n                provider:\n                    type: string\n                    required: true\n                    description: \"Identifier of the source provider for the GDPR data\"\n                    example: \"google\"\n\n                path:\n                    type: string\n                    required: true\n                    description: \"Resource path of the data to access. Path is in the namespace of the provider's model\"\n                    example: \"my_activity.assistant\"\n\n                predicates:\n                    type: array\n                    description: \"Predicates to apply to exclude non interesting data\"\n                    items:\n                        type: string\n                        description: pre-fix expression which is false for data to exclude from the contract\n#                    items:\n#                        - type: string\n#                          id: 1\n#                          description: operator to apply to the next 1 or 2 operands\n#                          enum: [\"=\", \"!=\", \"\u003e\", \"\u003e=\", \"\u003c\", \"\u003c=\", \"has\"]\n#                        - type: string\n#                          id: 2\n#                          description: name of the field being the first operand of the comparaison.\n#                          example: \"date\"\n                fields:\n                    anyOf:\n                        - type: string\n                          enum: [\"*\"]\n                          description: all data\n                        - type: array\n                          description: list of required fields\n                          items:\n                              type: string\n        usage:\n            type: string\n            description: \"Human-readable explaination of how the data will be used in the consent legal base.\"\n\n        signedClient:\n            type: object\n            properties:\n                type:\n                    type: string\n                    required: true\n                    enum: [\"anychain.signature\"]\n                date:\n                    type: integer\n                    required: true\n                    description: \"timestamp when the contract was signed\"\n                    example: 1574158519\n\n                signer:\n                    type: object\n                    required: true\n                    properties:\n                        __bytes:\n                            type: string\n                            required: true\n                            format: byte\n                            description: Signer's public key encoded in Base64.\n                            example: I-jkKueHiPjYOdyPaXZutYriHzAQ5b6R6yI30m8mQvY\n                signature:\n                    type: object\n                    required: true\n                    properties:\n                        __bytes:\n                            type: string\n                            required: true\n                            format: byte\n                            description: Signature encoded in Base64.\n                            example: WMW31LIYhCykfAVUTWG0b-lJqDj5KxbLU0pXfkRAXHzfEoc2NvMOyB4pq0qssq0bL0U_524S0Bh9KttTkT1hDA\n\n                body:\n                    $ref: '#/components/schemas/client'\n\n\n        client:\n            type: object\n            properties:\n                type:\n                    type: string\n                    required: true\n                    enum: [\"alias.client.decl\"]\n                name:\n                    type: string\n                    required: true\n                    description: \"Name of the client\"\n                    example: \"Foobar\"\n                desc:\n                    type: string\n                    required: true\n                    description: \"Description of the client\"\n                    example: \"A dummy Alias client\"\n                domain:\n                    type: string\n                    required: true\n                    description: \"Web domain of the client\"\n                    example: \"foobar.com\"\n                company:\n                    type: string\n                    required: true\n                    description: \"Company name behind the client\"\n                    example: \"FooBar Inc.\"\n\n        user_meta:\n            application/json:\n                schema:\n                    type: object\n                    description: Any kind of metadata linked to the current user\n\n\n\npaths:\n    /api/user/:\n        get:\n            summary: Returns the user's encrypted data.\n            tags:\n                - User\n            responses:\n                '401':\n                    $ref: '#/components/requests/users/responses/401'\n                '404':\n                    description: The given username does not exist and the\n                        password is incorrect.\n                '200':\n                    description: A anychain's box object, storing the encrypted\n                        data of the user. See `static/login/index.js` for an\n                        example of how to decrypt this data.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/box'\n\n        post:\n            summary: Create an user account.\n            tags:\n                - User\n            parameters:\n                - name: box\n                  required: true\n                  description: Encrypted data of the user creating an account.\n                  schema:\n                    $ref: '#/components/schemas/box'\n\n            responses:\n                '401':\n                    $ref: '#/components/requests/users/responses/401'\n\n                '400':\n                    description: Request is malformed. Missing parameters.\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    status:\n                                        type: string\n                                        example: \"error\"\n                                    reason:\n                                        type: string\n                                        example: \"missing arguments\"\n\n                '200':\n                    description: Account was successfuly created.\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    status:\n                                        type: string\n                                        example: \"ok\"\n\n        put:\n            summary: Update the encrypted data of an user.\n            tags:\n                - User\n            parameters:\n                - name: box\n                  required: true\n                  description: Encrypted data of the user to be updated.\n                  schema:\n                    $ref: '#/components/schemas/box'\n\n            responses:\n                '401':\n                    $ref: '#/components/requests/users/responses/401'\n\n                '400':\n                    description: Request is malformed. Missing parameters.\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    status:\n                                        type: string\n                                        example: \"error\"\n                                    reason:\n                                        type: string\n                                        example: \"missing arguments\"\n\n                '200':\n                    description: Account was successfuly updated.\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    status:\n                                        type: string\n                                        example: \"ok\"\n\n        delete:\n            summary: Delete an user.\n            tags:\n                - User\n            responses:\n                '401':\n                    $ref: '#/components/requests/users/responses/401'\n\n                '404':\n                    description: Username is unknown or password is incorrect.\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    status:\n                                        type: string\n                                        example: \"error\"\n\n                '200':\n                    description: Account was successfuly deleted.\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    status:\n                                        type: string\n                                        example: \"ok\"\n\n    /api/session/:\n        get:\n            summary: Returns the current active session.\n            tags:\n                - Session\n            responses:\n                '401':\n                    $ref: '#/components/requests/sessions/responses/401'\n\n                '200':\n                    description: Current session\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    status:\n                                        type: string\n                                        example: \"ok\"\n                                    publicKey:\n                                        type: string\n                                        format: byte\n                                        description: user's public key\n\n    /api/session/seed:\n        get:\n            summary: Returns a seed the client can use to proove it owns the\n                user's private key to the backend. To be used with\n                `/api/session/login`.\n            tags:\n                - Session\n            responses:\n                '200':\n                    description: Current session\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    __bytes:\n                                        type: string\n                                        format: byte\n\n    /api/session/login:\n        post:\n            summary: Login an user, create an active session for the user.\n            tags:\n                - Session\n            parameters:\n                - name: token\n                  in: anychain's signature\n                  required: true\n                  description: Anychain's signature with the user's private key of the latest seed returned by `/api/session/seed`.\n                  schema:\n                    type: string\n                    format: json\n            responses:\n                '400':\n                    description: Request is malformed. Signature is invalid or seed is unknown.\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    status:\n                                        type: string\n                                        example: \"error\"\n                                    reason:\n                                        type: string\n                                        example: \"bad proof: seed not valid\"\n\n                '200':\n                    description: User is successfuly logged in.\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    status:\n                                        type: string\n                                        example: \"ok\"\n\n    /api/session/logout:\n        post:\n            summary: Logout from the current session.\n            tags:\n                - Session\n            responses:\n                '401':\n                    $ref: '#/components/requests/sessions/responses/401'\n\n                '200':\n                    description: Current user had been logged out.\n\n    /api/session/clear:\n        post:\n            summary: Delete the current user's account and log out.\n            tags:\n                - User\n                - Session\n            responses:\n                '401':\n                    $ref: '#/components/requests/sessions/responses/401'\n\n                '200':\n                    description: Current user had been deleted and logged out.\n\n    /api/session/meta:\n        get:\n            summary: Returns metadata linked to the current user.\n            tags:\n                - Session\n            responses:\n                '401':\n                    $ref: '#/components/requests/sessions/responses/401'\n\n                '200':\n                    description: Metadata linked to the current user\n                    content:\n                        $ref: '#/components/schemas/user_meta'\n        post:\n            summary: Update metadata linked to the current user.\n            requestBody:\n                content:\n                    $ref: '#/components/schemas/user_meta'\n\n            tags:\n                - Session\n            responses:\n                '401':\n                    $ref: '#/components/requests/sessions/responses/401'\n\n                '200':\n                    description: Metadata linked to the current user\n                    content:\n                        $ref: '#/components/schemas/user_meta'\n\n    /api/contract/:\n        get:\n            summary: Returns a list of the current user's signed grants hash.\n            tags:\n                - Contract\n            security:\n                - APIKeyAuth: []\n            parameters:\n                - $ref: '#/components/parameters/headerPublicKey'\n\n            responses:\n                '401':\n                    $ref: '#/components/requests/sessions/responses/401'\n\n                '200':\n                    description: List of current user's signed grants hash.\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    status:\n                                        type: string\n                                        example: \"ok\"\n                                    result:\n                                        type: array\n                                        items:\n                                            type: string\n                                            format: byte\n                                            description: Signed grant hash\n\n    /api/contract/{grantHash}:\n        get:\n            summary: Returns the full signed grant given its hash.\n            tags:\n                - Contract\n            security:\n                - APIKeyAuth: []\n            parameters:\n                - $ref: '#/components/parameters/headerPublicKey'\n                - name: grantHash\n                  in: path\n                  schema:\n                      type: string\n                      description: Signed grant hash\n            responses:\n                '401':\n                    $ref: '#/components/requests/sessions/responses/401'\n\n                '404':\n                    description: grant is unknown.\n\n                '200':\n                    description: Returns the full signed grant.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/signedGrant'\n\n    /api/contract/{grantHash}/scopes:\n        get:\n            summary: Returns the scopes the given grant allows.\n            tags:\n                - Contract\n            security:\n                - APIKeyAuth: []\n            parameters:\n                - $ref: '#/components/parameters/headerPublicKey'\n                - name: grantHash\n                  in: path\n                  schema:\n                      type: string\n                      description: Signed grant hash\n            responses:\n                '401':\n                    $ref: '#/components/requests/sessions/responses/401'\n\n                '404':\n                    description: grant is unknown.\n\n                '200':\n                    description: Returns the full signed grant.\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: '#/components/schemas/scope'\n\n    /api/storage/:\n        get:\n            summary: Returns all active storage adapters of the current user\n            tags:\n                - Storage\n            security:\n                - APIKeyAuth: []\n            parameters:\n                - $ref: '#/components/parameters/headerPublicKey'\n            responses:\n                '401':\n                    $ref: '#/components/requests/sessions/responses/401'\n\n                '200':\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    gdrive:\n                                        type: boolean\n                                        example: true\n                                        description: Is Google Drive adapter enabled for this user?\n                                    dropbox:\n                                        type: boolean\n                                        example: false\n\n    /api/storage/dumps:\n        get:\n            summary: Returns all detected dumps\n            tags:\n                - Storage\n            security:\n                - APIKeyAuth: []\n            parameters:\n                - $ref: '#/components/parameters/headerPublicKey'\n            responses:\n                '401':\n                    $ref: '#/components/requests/sessions/responses/401'\n\n                '200':\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    google:\n                                        type: array\n                                        description: List of dumps stored in Google\n                                        items:\n                                            type: object\n                                            description: Dump stored on Google Drive\n\n    /api/storage/gdrive/link:\n        get:\n            summary: OAuth 2.0 client's entrypoint to ask for Google Drive access\n            tags:\n                - Storage\n            security:\n                - APIKeyAuth: []\n            parameters:\n                - $ref: '#/components/parameters/headerPublicKey'\n                - name: redirect\n                  description: URL where the users lands when Google Drive returns. By default, `/home/`.\n                  schema:\n                      type: string\n                      example: \"/home/\"\n\n            responses:\n                '401':\n                    $ref: '#/components/requests/sessions/responses/401'\n\n                '301':\n                    description: \"redirection to Google's OAuth 2.0 endpoint\"\n\n    /api/storage/gdrive/unlink:\n        post:\n            summary: Removes currently active Google Drive integration\n            tags:\n                - Storage\n            security:\n                - APIKeyAuth: []\n            parameters:\n                - $ref: '#/components/parameters/headerPublicKey'\n            responses:\n                '401':\n                    $ref: '#/components/requests/sessions/responses/401'\n\n                '200':\n                    description: Integration removed.\n\n    /api/view/index:\n        get:\n            summary: Returns the model view for the user's home page\n            tags:\n                - View\n            security:\n                - APIKeyAuth: []\n            parameters:\n                - $ref: '#/components/parameters/headerPublicKey'\n            responses:\n                '401':\n                    $ref: '#/components/requests/sessions/responses/401'\n\n                '200':\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    grants:\n                                        type: object\n                                        description: Map currently active grants hash to the full grant\n                                        additionalProperties:\n                                            $ref: '#/components/schemas/signedGrant'\n\n                                    clients:\n                                        type: object\n                                        description: Map clients with which the user has contract to to their declaration.\n                                        additionalProperties:\n                                            $ref: '#/components/schemas/signedClient'\n\n                                    history:\n                                        type: array\n                                        description: List of all signed grants by the user. Anti-chronological.\n                                        items:\n                                            $ref: '#/components/schemas/signedGrant'\n\n                                    view:\n                                        type: object\n                                        description: Map all providers mentionned in the active grants\n                                        additionalProperties:\n                                            type: object\n                                            description: Map all resource path mentionned in the active grants\n                                            additionalProperties:\n                                                type: object\n                                                description: Map all active grants\n                                                additionalProperties:\n                                                    type: object\n\n",
			"canonicalURL": "/github.com/progressive-identity/alias-js@fd88e241488efe994e955e5ff0c0b42bd662bbd9/-/blob/provider/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/progressive-identity/alias-js/blob/fd88e241488efe994e955e5ff0c0b42bd662bbd9/provider/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:88: callback: json: cannot unmarshal bool into Go struct field Schema.required of type []string"
}