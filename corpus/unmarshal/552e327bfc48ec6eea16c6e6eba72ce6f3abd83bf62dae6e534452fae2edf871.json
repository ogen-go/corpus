{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/internetstandards/Internet.nl"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "interface/batch/openapi.yaml",
			"byteSize": 50987,
			"content": "DISCLAIMER: |\n  IMPORTANT:\n\n  This is a partial file. The complete OPENAPI specification can be generated\n  by using the `api_generate_doc` django command. The command will complete this specification\n  by:\n  * updating values/text based on configuration,\n  * documenting enabled features,\n  * adding enum values based on source code and checking the existence of their\n    documentation.\n\n  This DISCLAIMER field is also removed in the process.\n\nopenapi: \"3.0.3\"\n\ninfo:\n  version: OVERRIDE THIS VALUE in checks/batch/__init.py\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  title: OVERRIDE THIS VALUE IN internetnl/batch_api_doc_conf.py\n  termsOfService: OVERRIDE THIS VALUE IN internetnl/batch_api_doc_conf.py\n  contact: OVERRIDE THIS VALUE IN internetnl/batch_api_doc_conf.py\n  x-logo: OVERRIDE THIS VALUE IN internetnl/batch_api_doc_conf.py\n  description: |\n    # Introduction\n    Welcome to the batch API documentation, a JSON based REST-like API for\n    batch testing multiple domains for compliance with modern internet\n    standards.\n\n    For a visual representation of this specification you can use\n    [https://redocly.github.io/redoc/](https://redocly.github.io/redoc/?url=@@DESC_INTRO_REDOCLY_LINK@@).\n\n    @@DESC_INTRO_EXTRA@@\n\n    ## Versioning\n    The API uses semantic versioning (`major.minor.patch`).\n\n    Changes to the `.major` version introduce and/or remove\n    semantics/paths/features to the API and that could lead to breaking changes.\n\n    Changes to the `.minor` version introduce new fields that don't break the\n    current API but you would need extra parsing code to get the new values.\n\n    Changes to the `.patch` version denote changes to the text of this document\n    but not to the API functionality eg. typos.\n\n    The `.major` version is part of the API path. In case the user requests a\n    path with a previous version, a message to check the version number will be\n    returned as the result to the API call.\n\n    This API only supports the current version.\n\n    # Authentication\n    All batch API endpoints are protected by HTTP Basic Authentication.\n    To use the endpoints the client must supply an HTTP Basic Authentication\n    header of the form:\n    ```\n    Authorization: Basic(base64)\n    ```\n    where `base64` is the base64-encoding of the string `<username>:<password>`.\n\nservers: OVERRIDE THIS VALUE IN internetnl/batch_api_doc_conf.py\n\nsecurity:\n  - BATCH_HTTP_AUTH: []\n\ntags:\n  - name: Requests\n  - name: Metadata\n\npaths:\n  /requests:\n    post:\n      operationId: register_request\n      tags:\n        - Requests\n      summary: New request\n      description: |\n        Registers a new batch request for the given domains. You can use the\n        returned id in a status request to track progress.\n\n        _A note on the domain list_: After the initial validation of the\n        domains' name, domains are used as-is. No extra logic is used to\n        produce more test targets e.g, web testing the bare and the www\n        version of a domain requires both domain names to be present in the\n        domain list.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterRequest'\n      responses:\n        \"200\":\n          $ref: '#/components/responses/RegisterResponse'\n        \"400\":\n          $ref: '#/components/responses/BadRequestResponse'\n        \"401\":\n          $ref: '#/components/responses/UnauthorisedResponse'\n        \"500\":\n          $ref: '#/components/responses/ServerErrorResponse'\n    get:\n      parameters:\n        - $ref: '#/components/parameters/request_limit'\n      operationId: list_requests\n      tags:\n        - Requests\n      summary: List requests\n      description: >\n        Lists the user's requests in descending order; newest first. You can\n        limit the number of returned entries (defautls to 10).\n      responses:\n        \"200\":\n          $ref: '#/components/responses/ListRequestsResponse'\n        \"400\":\n          $ref: '#/components/responses/BadRequestResponse'\n        \"401\":\n          $ref: '#/components/responses/UnauthorisedResponse'\n        \"500\":\n          $ref: '#/components/responses/ServerErrorResponse'\n\n  /requests/{request_id}:\n    parameters:\n      - $ref: '#/components/parameters/request_id'\n    get:\n      operationId: status_request\n      tags:\n        - Requests\n      summary: Request status\n      description: >\n        Retrieves information about the progress of the request. When the\n        status of the request is `done`, results are available.\n      responses:\n        \"200\":\n          $ref: '#/components/responses/StatusResponse'\n        \"400\":\n          $ref: '#/components/responses/BadRequestResponse'\n        \"401\":\n          $ref: '#/components/responses/UnauthorisedResponse'\n        \"404\":\n          $ref: '#/components/responses/UnknownRequestErrorResponse'\n        \"500\":\n          $ref: '#/components/responses/ServerErrorResponse'\n    patch:\n      operationId: patch_request\n      tags:\n        - Requests\n      summary: Cancel request\n      description: >\n        Cancels the request. No resuming is possible. Allows to cancel a\n        request that was incorrectly submitted in order to give way to\n        subsequent requests to start testing.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - status\n              properties:\n                status:\n                  type: string\n                  enum: [cancelled]\n      responses:\n        \"200\":\n          $ref: '#/components/responses/CancelResponse'\n        \"400\":\n          $ref: '#/components/responses/BadRequestResponse'\n        \"401\":\n          $ref: '#/components/responses/UnauthorisedResponse'\n        \"404\":\n          $ref: '#/components/responses/UnknownRequestErrorResponse'\n        \"500\":\n          $ref: '#/components/responses/ServerErrorResponse'\n\n\n  /requests/{request_id}/results:\n    parameters:\n      - $ref: '#/components/parameters/request_id'\n    get:\n      operationId: results\n      tags:\n        - Requests\n      summary: Results\n      description: Retrieves the results for this request. The request needs to\n        be `done` in order for results to be available.\n      responses:\n        \"200\":\n          $ref: '#/components/responses/ResultsResponse'\n        \"400\":\n          $ref: '#/components/responses/BadRequestResponse'\n        \"401\":\n          $ref: '#/components/responses/UnauthorisedResponse'\n        \"404\":\n          $ref: '#/components/responses/UnknownRequestErrorResponse'\n        \"500\":\n          $ref: '#/components/responses/ServerErrorResponse'\n\n  /requests/{request_id}/results_technical:\n    parameters:\n      - $ref: '#/components/parameters/request_id'\n    get:\n      operationId: results_technical\n      tags:\n        - Requests\n      summary: Technical results\n      description: >\n        Retrieves the results for this request. These results are\n        focused on the technical details of the domains instead of the\n        compliance-centric view of the base results. The request needs\n        to be `done` in order for results to be available.\n      responses:\n        \"200\":\n          $ref: '#/components/responses/ResultsTechnicalResponse'\n        \"400\":\n          $ref: '#/components/responses/BadRequestResponse'\n        \"401\":\n          $ref: '#/components/responses/UnauthorisedResponse'\n        \"404\":\n          $ref: '#/components/responses/UnknownRequestErrorResponse'\n        \"500\":\n          $ref: '#/components/responses/ServerErrorResponse'\n\n  /metadata/report:\n    get:\n      operationId: metadata_report\n      tags:\n        - Metadata\n      summary: Report metadata\n      description: >\n        Machine readable metadata on report related information like\n        documentation, translation, display, etc. This can be used to create\n        reports equivalent to the main application.\n      responses:\n        \"200\":\n          $ref: '#/components/responses/MetadataReportResponse'\n        \"400\":\n          $ref: '#/components/responses/BadRequestResponse'\n        \"401\":\n          $ref: '#/components/responses/UnauthorisedResponse'\n        \"500\":\n          $ref: '#/components/responses/ServerErrorResponse'\n\ncomponents:\n  securitySchemes:\n    BATCH_HTTP_AUTH:\n      type: http\n      scheme: basic\n\n  parameters:\n    request_id:\n      in: path\n      name: request_id\n      schema:\n        $ref: '#/components/schemas/RequestId'\n      required: true\n    request_limit:\n      in: query\n      name: limit\n      description: >\n        Limits the number of returned entries. Defaults to `10`. Use `0` for no\n        limit.\n      schema:\n        type: integer\n\n  schemas:\n    #\n    # Types\n    #\n    Handle:\n      type: string\n      maxLength: 255\n      description: >\n         A free form string that only serves as a reference for the requester.\n         Does not need to be unique.\n      example: \"Web test - 1/1/1970\"\n\n    RequestType:\n      type: string\n      enum:\n        - web\n        - mail\n\n    RequestId:\n      type: string\n      description: UUID of the request.\n      pattern: '^[a-f0-9]{32}$'\n      example: 'e94251da69c54da7b16fc5202a69c5c2'\n\n    ApiVersion:\n        type: string\n        pattern: '[0-9]+.[0-9]+.[0-9]+'\n        example: '2.0.0'\n\n    ListOfDomains:\n      type: array\n      items:\n        type: string\n      description: List of domains to test.\n      example:\n        - internet.nl\n        - batch.internet.nl\n        - dashboard.internet.nl\n        - nic.商标\n\n    ApiReply:\n      type: object\n      required:\n        - api_version\n      properties:\n        api_version:\n          $ref: '#/components/schemas/ApiVersion'\n\n    RequestReply:\n      allOf:\n        - $ref: '#/components/schemas/ApiReply'\n        - type: object\n          required:\n            - request\n          properties:\n            request:\n              $ref: '#/components/schemas/Request'\n\n    ResultsReply:\n      allOf:\n        - $ref: '#/components/schemas/ApiReply'\n        - type: object\n          required:\n            - request\n          properties:\n            request:\n              $ref: '#/components/schemas/Request'\n        - type: object\n          required:\n            - domains\n          properties:\n            domains:\n              type: object\n              additionalProperties:\n                x-additionalPropertiesName: <domain.name>\n                $ref: '#/components/schemas/Domain'\n\n    ResultsTechnicalReply:\n      oneOf:\n        - $ref: '#/components/schemas/DomainWebTechnicalReply'\n        - $ref: '#/components/schemas/DomainMailTechnicalReply'\n\n    DomainWebTechnicalReply:\n      allOf:\n        - $ref: '#/components/schemas/ApiReply'\n        - type: object\n          required:\n            - request\n          properties:\n            request:\n              $ref: '#/components/schemas/Request'\n        - type: object\n          required:\n            - domains\n          properties:\n            domains:\n              type: object\n              additionalProperties:\n                x-additionalPropertiesName: <domain.name>\n                $ref: '#/components/schemas/DomainWebTechnical'\n\n    DomainMailTechnicalReply:\n      allOf:\n        - $ref: '#/components/schemas/ApiReply'\n        - type: object\n          required:\n            - request\n          properties:\n            request:\n              $ref: '#/components/schemas/Request'\n        - type: object\n          required:\n            - domains\n          properties:\n            domains:\n              type: object\n              additionalProperties:\n                x-additionalPropertiesName: <domain.name>\n                $ref: '#/components/schemas/DomainMailTechnical'\n\n    Request:\n      type: object\n      required:\n        - request_id\n        - name\n        - request_type\n        - status\n        - submit_date\n        - finished_date\n      properties:\n        request_id:\n          $ref: '#/components/schemas/RequestId'\n        name:\n          $ref: '#/components/schemas/Handle'\n        request_type:\n          $ref: '#/components/schemas/RequestType'\n        status:\n          type: string\n          enum:\n            - registering\n            - running\n            - generating\n            - done\n            - cancelled\n            - error\n          description: |\n            * `registering` - Registering domains.\n            * `running` - Domains are being tested.\n            * `generating` - Report is being generated.\n            * `done` - Results ready.\n            * `cancelled` - Cancelled by the user.\n            * `error` - Error registering domains.\n        submit_date:\n          type: string\n          format: date-time\n        finished_date:\n          type: string\n          format: date-time\n          description: Only set when the tests are completed.\n\n    Domain:\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          $ref: '#/components/schemas/DomainStatus'\n        scoring:\n          $ref: '#/components/schemas/DomainScoring'\n        report:\n          $ref: '#/components/schemas/DomainReport'\n        results:\n          $ref: '#/components/schemas/DomainResults'\n\n    TechnicalIpv4:\n      type: object\n      required:\n        - address\n        - reachable\n      properties:\n        address:\n          type: string\n          format: IPv4 address\n          description: The IPv4 address.\n        reachable:\n          type: boolean\n          description: >\n            If connectivity to this address was possible.\n\n    TechnicalIpv6:\n      type: object\n      required:\n        - address\n        - reachable\n      properties:\n        address:\n          type: string\n          format: IPv6 address\n          description: The IPv6 address.\n        reachable:\n          type: boolean\n          description: >\n            If connectivity to this address was possible.\n\n    TechnicalNameServer:\n      type: object\n      required:\n        - ipv4\n        - ipv6\n      properties:\n        ipv4:\n          type: object\n          description: Details for the IPv4 side.\n          required:\n            - addresses\n          properties:\n            addresses:\n              type: array\n              description: The available IPv4 addresses.\n              items:\n                $ref: '#/components/schemas/TechnicalIpv4'\n        ipv6:\n          type: object\n          description: Details for the IPv6 side.\n          required:\n            - addresses\n          properties:\n            addresses:\n              type: array\n              description: The available IPv6 addresses.\n              items:\n                $ref: '#/components/schemas/TechnicalIpv6'\n\n    TechnicalDnssec:\n      description: DNSSEC results for the tested domain.\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          type: string\n          enum:\n            - secure\n            - insecure\n            - bogus\n            - unknown_ds_algo\n            - error\n          description: |\n            Status of DNSSEC for the domain:\n            * `secure` - DNSSEC signed domain.\n            * `insecure` - No DNNSEC configured.\n            * `bogus` - DNSSEC configured but bogus.\n            * `unknown_ds_algo` - The algorithm used to sign the DS\n              record is not supported by the resolver, this is treated\n              the same as insecure.\n            * `error` - Resolver error.\n\n    TechnicalSharedDetails:\n      type: object\n      properties:\n        kex_params_bad:\n          type: array\n          description: List of BAD key exchange parameters.\n          items:\n            type: string\n            pattern: '^[ECDH|DH]-[0-9]+$'\n        kex_params_phase_out:\n          type: array\n          description: List of PHASE OUT key exchange parameters.\n          items:\n            type: string\n            pattern: '^[ECDH|DH]-[0-9]+$'\n        ciphers_bad:\n          type: array\n          description: List of BAD ciphers.\n          items:\n            type: string\n        ciphers_phase_out:\n          type: array\n          description: List of PHASE OUT ciphers.\n          items:\n            type: string\n        cipher_order:\n          type: string\n          enumClass: CipherOrderStatus\n          description: |\n            Cipher order preference of the server:\n            * `bad` - The server does not enforce his own preference.\n            * `good` - The server enforces his own preference.\n            * `not_prescribed` - The server enforces his own preference but\n              the cipher order is not based on prescribed ordering.\n            * `not_seclevel` - The server enforces his own preference but\n              the configured order is not based on security level.\n            * `na` - The server only supports GOOD ciphers; cipher order is\n              not relevant.\n        cipher_order_violation:\n          type: array\n          description: |\n            A tuple of the cipher order violation (if any) formatted as an\n            array like:\n            `[<previous cipher>, <current cipher (violation)>, <violation rule>]`.\n\n            `violation rule` can be one of:\n            * `''` - Security level violation (the current cipher has\n              higher security level than the previous one).\n            * `<a number>` - Prescribed ordering violation. The number is\n              the prescribed ordering rule that got violated.\n          minItems: 3\n          maxItems: 3\n          items:\n            type: string\n        protocols_bad:\n          type: array\n          description: List of BAD protocols.\n          items:\n            type: string\n        protocols_phase_out:\n          type: array\n          description: List of PHASE OUT protocols.\n          items:\n            type: string\n        compression:\n          type: boolean\n          description: >\n            If TLS compression is used. (TLS1.3 does not use compression)\n        secure_reneg:\n          type: boolean\n          description: >\n            If secure renegotiation is supported by the server. (TLS1.3\n            offers only secure renegotiation)\n        client_reneg:\n          type: boolean\n          description: >\n            If client initiated renegotiation is supported by the server.\n            (TLS1.3 does not support client renegotiation).\n        kex_hash_func:\n          type: string\n          enumClass: KexHashFuncStatus\n          description: |\n            SHA2 support for signatures of the server:\n            * `bad` - SHA2 is not supported.\n            * `good` - SHA2 is supported.\n            * `unknown` - SHA2 support could not be determined (the server\n              uses RSA key exchange or anonymous ciphers).\n        zero_rtt:\n          type: string\n          enumClass: ZeroRttStatus\n          description: |\n            0-RTT support of the server:\n            * `bad` - 0-RTT is supported.\n            * `good` - 0-RTT is not supported.\n            * `na` - No TLS1.3 on the server; test is not relevant.\n\n        cert_chain:\n          type: array\n          description: >\n            The certificate chain built given the server's certificate.\n            Leaf to root.\n          items:\n            type: string\n        cert_trusted:\n          type: boolean\n          description: If the certificate is PKIX validated.\n        cert_pubkey_bad:\n          type: array\n          description: List of BAD certificate public keys.\n          items:\n            type: string\n            format: \"<certificate common name>: <reason>\"\n        cert_pubkey_phase_out:\n          type: array\n          description: List of PHASE_OUT certificate public keys.\n          items:\n            type: string\n            format: \"<certificate common name>: <reason>\"\n        cert_signature_bad:\n          type: object\n          description: >\n            Collection of BAD hashes used for certificate signing.\n          additionalProperties:\n            x-additionalPropertiesName: <certificate common name>\n            type: string\n            description: BAD hash description.\n        cert_hostmatch_bad:\n          type: array\n          description: >\n            List of all available names (CommonName and\n            SubjectAlternativeNames) on the certificate that do not match\n            the server name. This list is only available when the server\n            name could not be matched with any name on the certificate\n            names. The first element is always the CommonName.\n          items:\n            type: string\n\n        dane_status:\n          type: string\n          enumClass: DaneStatus\n          description: |\n            DANE status of the domain:\n            * `validated` - TLSA records exist and are valid.\n            * `failed` - TLSA records exist but are not valid.\n            * `none` - No TLSA records.\n            * `none_bogus` - No TLSA records but proof of non-existence is\n              bogus.\n        dane_records:\n          type: array\n          description: List of TLSA records.\n          items:\n            type: string\n\n    TechnicalWebServerDetails:\n      type: object\n      description: >\n        Details for this server. If any of `server_reachable` or\n        `https_enabled` is `false`, this is an empty object.\n      properties:\n        https_redirect:\n          type: string\n          enumClass: ForcedHttpsStatus\n          description: |\n            HTTPS redirect status of the server:\n            * `good` - HTTPS redirection is enforced.\n            * `bad` - HTTPS redirection is not enforced.\n            * `no_http` - No HTTP connection; test is not relevant.\n        http_compression:\n          type: boolean\n          description: If HTTP compression is used.\n        hsts:\n          type: string\n          enum:\n            - \"yes\"\n            - max_age\n            - \"no\"\n          description: |\n            If the server sets the HSTS header properly:\n            * `yes` - The server sets the HSTS header.\n            * `max_age` - The server sets the HSTS header but the presented\n              'max-age' value is less than compliant.\n            * `no` - The server does not set the HSTS header.\n        hsts_policies:\n          type: array\n          description: >\n            List of HSTS headers received. Only the first one is evaluated\n            as with browser behavior.\n          items:\n            type: string\n\n        ocsp_stapling:\n          type: string\n          enumClass: OcspStatus\n          description: |\n            OCSP support of the server:\n            * `good` - OCSP is supported.\n            * `ok` - OCSP is not supported,\n            * `not_trusted` - OCSP is supported but the returned data is invalid.\n\n        x_frame_options_enabled:\n          type: boolean\n          description: If the X-Frame-Options header is set by the server.\n        x_frame_options_values:\n          type: array\n          description: >\n            List of headers. Only the first one is evaluated as per browser\n            behavior.\n          items:\n            type: string\n        x_xss_protection_enabled:\n          type: boolean\n          description: If the X-Xss-Protection header is set by the server.\n        x_xss_protection_values:\n          type: array\n          description: >\n            List of headers. Only the first one is evaluated as per browser\n            behavior.\n          items:\n            type: string\n        referrer_policy_enabled:\n          type: boolean\n          description: If the Referrer-Policy header is set by the server.\n        referrer_policy_values:\n          type: array\n          description: >\n            List of headers. Only the first one is evaluated as per browser\n            behavior.\n          items:\n            type: string\n        content_security_policy_enabled:\n          type: boolean\n          description: >\n            If the Content-Security-Policy header is set by the server.\n        content_security_policy_values:\n          type: array\n          description: >\n            List of headers. Only the first one is evaluated as per browser\n            behavior.\n          items:\n            type: string\n        x_content_type_options_enabled:\n          type: boolean\n          description: >\n            If the X-Content-Type-OPTIONS header is set by the server.\n        x_content_type_options_values:\n          type: array\n          description: >\n            List of headers. Only the first one is evaluated as per browser\n            behavior.\n          items:\n            type: string\n\n    TechnicalWebServer:\n      type: object\n      description: Results for the webserver.\n      properties:\n        tested_address:\n          type: string\n          format: IP address\n          description: >\n            The tested IP address. If the webserver has more than one addresses\n            in this address family, only one is checked at random.\n        server_reachable:\n          type: boolean\n          description: >\n            If the server could be reached. If this is `false`, `details` will\n            be empty.\n        https_enabled:\n          type: boolean\n          description: >\n            If the server offers HTTPS. If this is `false`, `details` will be\n            empty.\n        details:\n          allOf:\n            - $ref: '#/components/schemas/TechnicalSharedDetails'\n            - $ref: '#/components/schemas/TechnicalWebServerDetails'\n\n    TechnicalWebServerV4:\n      allOf:\n        - $ref: '#/components/schemas/TechnicalWebServer'\n        - type: object\n          required:\n            - addresses\n          properties:\n            addresses:\n              type: array\n              description: Available IP addresses.\n              items:\n                $ref: '#/components/schemas/TechnicalIpv4'\n\n    TechnicalWebServerV6:\n      allOf:\n        - $ref: '#/components/schemas/TechnicalWebServer'\n        - type: object\n          required:\n            - addresses\n          properties:\n            addresses:\n              type: array\n              description: Available IP addresses.\n              items:\n                $ref: '#/components/schemas/TechnicalIpv6'\n\n    DomainWebTechnical:\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          $ref: '#/components/schemas/DomainStatus'\n        domain:\n          type: object\n          description: Results that apply to the tested domain as a whole.\n          required:\n            - dnssec\n          properties:\n            dnssec:\n              $ref: '#/components/schemas/TechnicalDnssec'\n        nameservers:\n          type: object\n          description: Results per nameserver.\n          additionalProperties:\n            x-additionalPropertiesName: <nameserver.name>\n            $ref: '#/components/schemas/TechnicalNameServer'\n        webservers:\n          description: Results per webserver.\n          type: object\n          required:\n            - ipv4\n            - ipv6\n          properties:\n            ip_similarity:\n              type: boolean\n              description: >\n                If the webserver returns similar pages on IPv4 and IPv6. Only\n                available when both IPv4 and IPv6 are configured and reachable\n                on the webserver.\n            ipv4:\n              $ref: '#/components/schemas/TechnicalWebServerV4'\n            ipv6:\n              $ref: '#/components/schemas/TechnicalWebServerV6'\n\n    DomainMailTechnical:\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          $ref: '#/components/schemas/DomainStatus'\n        domain:\n          type: object\n          description: Results that apply to the tested domain as a whole.\n          required:\n            - dnssec\n            - dmarc\n            - dkim\n            - spf\n          properties:\n            dnssec:\n              $ref: '#/components/schemas/TechnicalDnssec'\n            dmarc:\n              type: object\n              description: DMARC details of the domain.\n              required:\n                - records\n              properties:\n                records:\n                  description: >\n                    List of DMARC TXT records. Having more than one record is\n                    considered an error.\n                  type: array\n                  items:\n                    type: string\n                    format: DMARC TXT record\n                policy_status:\n                  type: string\n                  enumClass: DmarcPolicyStatus\n                  description: |\n                    The validation status of the DMARC policy:\n                    * `valid` - The policy is valid and compliant.\n                    * `invalid_syntax` - The policy is not syntactically correct.\n                    * `invalid_p_sp` - The 'p=' or 'sp=' tag result in a less\n                      than compliant policy.\n                    * `invalid_external` - The external destinations specified\n                      in 'rua=' and/or 'ruf=' are not valid.\n\n                    Only available when there is a DMARC record.\n            spf:\n              type: object\n              description: SPF details of the domain.\n              required:\n                - records\n              properties:\n                records:\n                  description: >\n                    List of SPF TXT records. Having more than one record is\n                    considered an error.\n                  type: array\n                  items:\n                    type: string\n                    format: SPF TXT record\n                discovered_records_bad:\n                  description: >\n                    List of BAD SPF TXT records discovered through the\n                    'include' mechanism and/or 'redirect' modifier. Each entry\n                    is a tuple in an array format of:\n                    `[<domain.name>, <SPF TXT record>]`.\n                  type: array\n                  items:\n                    type: array\n                    description: The pre-described tuple.\n                    minItems: 2\n                    maxItems: 2\n                    items:\n                      type: string\n                policy_status:\n                  type: string\n                  enumClass: SpfPolicyStatus\n                  description: |\n                    The validation status of the DMARC policy:\n                    * `valid` - The policy is valid and compliant.\n                    * `invalid_syntax` - The policy is not syntactically correct.\n                    * `max_dns_lookups` - The maximum number of allowed DNS\n                      lookups (10) was exceeded while trying to evaluate the\n                      policy.\n                    * `invalid_all` - The 'all' mechanism is less than compliant.\n                    * `invalid_include` - The policies included with 'include'\n                      mechanism are less than compliant.\n                    * `invalid_redirect` - The external destinations specified\n                      in 'rua=' and/or 'ruf=' are not valid.\n\n                    Only available when there is an SPF record.\n            dkim:\n              type: object\n              description: DKIM details of the domain.\n              required:\n                - discovered\n              properties:\n                discovered:\n                  type: boolean\n                  description: >\n                    If DKIM support was discovered on the domain. The test\n                    expects `_domainkey` to be an Empty Non Terminal under the\n                    domain name.\n\n        nameservers:\n          type: object\n          description: Results per nameserver.\n          additionalProperties:\n            x-additionalPropertiesName: <nameserver.name>\n            $ref: '#/components/schemas/TechnicalNameServer'\n        receiving_mailservers:\n          description: Results per receiving mailserver.\n          type: object\n          additionalProperties:\n            x-additionalPropertiesName: <mailserver.name>\n            $ref: '#/components/schemas/TechnicalReceivingMailServer'\n\n    TechnicalReceivingMailServerDetails:\n      type: object\n      description: >\n        Details for this server. If any of `server_reachable`,\n        `starttls_enabled` or `server_testable` is `false`, this is an\n        empty object.\n      properties:\n        dane_rollover:\n          type: boolean\n          description: >\n            If a rollover scheme is detected for the DANE configuration of the\n            mailserver.\n\n    TechnicalReceivingMailServer:\n      type: object\n      required:\n        - addresses\n        - dnssec\n      properties:\n        addresses:\n          type: object\n          description: Available IP addresses.\n          required:\n            - ipv4\n            - ipv6\n          properties:\n            ipv4:\n              type: array\n              items:\n                $ref: '#/components/schemas/TechnicalIpv4'\n            ipv6:\n              type: array\n              items:\n                $ref: '#/components/schemas/TechnicalIpv6'\n        dnssec:\n          $ref: '#/components/schemas/TechnicalDnssec'\n        server_reachable:\n          type: boolean\n          description: >\n            If the server could be reached. If this is `false`, `details` will\n            be empty.\n        starttls_enabled:\n          type: boolean\n          description: >\n            If the server offers STARTTLS. If this is `false`, `details` will\n            be empty.\n        server_testable:\n          type: boolean\n          description: >\n            If the STARTTLS test could be completed. Ratelimiting and other\n            server behavior may prohibit completion of the STARTTLS testing\n            suite. If this is `false`, `details` will be empty.\n        details:\n          allOf:\n            - $ref: '#/components/schemas/TechnicalSharedDetails'\n            - $ref: '#/components/schemas/TechnicalReceivingMailServerDetails'\n\n    DomainStatus:\n      type: string\n      enum:\n        - ok\n        - error\n      description: |\n        Status of the tested domain.\n        * `ok` - The domain was tested succesfully. All other keys in this\n          structure are available.\n        * `error` - The domain was partially tested because of errors during\n          testing. No results are available for this domain and no other keys\n          in this structure are present.\n\n    DomainScoring:\n      type: object\n      required:\n        - percentage\n      properties:\n        percentage:\n          type: integer\n          description: >\n            The score of a domain in percentage. It ranges from `0`\n            to `100` (perfect score). The score is a complex calculation based\n            on all test results included. This calculation can change\n            over time when tests are adjusted or new tests are introduced.\n          example: 100\n\n    DomainReport:\n      type: object\n      required:\n        - url\n      properties:\n        url:\n          type: string\n          format: url\n          description: >\n            URL to the visual report on the testing server. Accessing these reports\n            does not require HTTP authentication.\n          example: \"https://<batch.server>/site/example.nl/1234/\"\n\n    CustomResults:\n      type: object\n      description: >\n       Results that are not tied to any one of the tests. A custom result may\n       be derived from a combination of results, a combination of technical\n       data or other logic. They exist because they may facilitate further\n       interpretation of a domain's compliance. If custom results are\n       configured on the server they will be available here per domain.\n       Custom results don't need to share attributes like categories and tests.\n       Each available one is documented here.\n      nullable: true\n\n    Category:\n      type: object\n      required:\n        - status\n        - verdict\n      properties:\n        status:\n          type: string\n          enum:\n            - failed\n            - info\n            - passed\n            - warning\n            - error\n          description: |\n            Status of a test category:\n            * `passed`- All the tests in this category passed.\n            * `info` - At least one optional test failed in this category.\n            * `warning` - At least one recommended test failed in this category.\n            * `failed` - At least one required test failed in this category.\n            * `error` - An error occured while performing tests in this\n              category that prohibits further testing. These errors are mainly\n              connectivity/communication issues between the tool and the server\n              under test and could be attributed to either party (e.g., a\n              mailserver ratelimits the tool while testing for STARTTLS\n              support). Inconclusive tests in this category are treated as not\n              tested.\n        verdict:\n          type: string\n          description: >\n            Verdict of the category; only useful for translation when combined\n            with the information on the `/metadata/report` endpoint.\n\n    WebCategories:\n      type: object\n      description: Web categories.\n      required:\n        - web_ipv6\n        - web_dnssec\n        - web_https\n        - web_appsecpriv\n      properties:\n        web_ipv6:\n          $ref: '#/components/schemas/Category'\n        web_dnssec:\n          $ref: '#/components/schemas/Category'\n        web_https:\n          $ref: '#/components/schemas/Category'\n        web_appsecpriv:\n          $ref: '#/components/schemas/Category'\n\n    MailCategories:\n      type: object\n      description: Mail categories.\n      required:\n        - mail_ipv6\n        - mail_dnssec\n        - mail_auth\n        - mail_starttls\n      properties:\n        mail_ipv6:\n          $ref: '#/components/schemas/Category'\n        mail_dnssec:\n          $ref: '#/components/schemas/Category'\n        mail_auth:\n          $ref: '#/components/schemas/Category'\n        mail_starttls:\n          $ref: '#/components/schemas/Category'\n\n    Categories:\n      description: Results per main categories for the domain.\n      type: object\n      additionalProperties:\n        x-additionalPropertiesName: <category>\n        description: Category name\n        pattern: '^[a-z0-9_]+$'\n        $ref: '#/components/schemas/Category'\n\n    Test:\n      required:\n        - status\n        - verdict\n      properties:\n        status:\n          type: string\n          enum:\n            - passed\n            - failed\n            - info\n            - warning\n            - not_tested\n            - error\n          description: |\n            Status of a test:\n            * `passed`- The test was successful.\n            * `failed` - Failure on a required test.\n            * `info` - Failure on an optional test.\n            * `warning` - Failure on a recommended test.\n            * `error` - The test could not be completed due to an error (either\n              on the tool's or the server's under test side). Other tests that\n              depend on this one will therefore not be able to run.\n            * `not_tested` - Not tested; a related parent test already failed.\n        verdict:\n          type: string\n          description: >\n            Verdict of the test; only useful for translation when combined\n            with the information on the `/metadata/report` endpoint.\n\n    Tests:\n      description: Results per test for the domain.\n      type: object\n      additionalProperties:\n        x-additionalPropertiesName: <test>\n        pattern: '^[a-z0-9_]+$'\n        $ref: '#/components/schemas/Test'\n\n    DomainResults:\n      type: object\n      required:\n        - categories\n        - tests\n        - custom\n      properties:\n        categories:\n          $ref: '#/components/schemas/Categories'\n        tests:\n          $ref: '#/components/schemas/Tests'\n        custom:\n          $ref: '#/components/schemas/CustomResults'\n\n    MetadataReportTest:\n      type: object\n      required:\n        - type\n        - translation_key\n        - status_verdict_map\n      properties:\n        type:\n          type: string\n          enum: [test]\n        translation_key:\n          type: string\n          description: |\n            This key can be used to build a msgid in order to fetch\n            translations from the application's .po files for this item.\n            For some of them you would need the `<verdict>` from a result.\n            Related translations for tests:\n              * `detail <key> label` - Title of the test.\n              * `detail <key> exp` - Explanation of the test.\n              * `detail <key> verdict <verdict>` - Verdict of the test.\n              * `detail <key> tech table` - Headers of the technical table\n                (if any).\n\n            If the verdict you have starts with `detail verdict` then it\n            is an exception to the above and can be translated on its own,\n            no need for the key.\n        status_verdict_map:\n          type: object\n          description: >\n            Mapping of the various status/verdict combinations for the test.\n            The keys are the various statuses and the value is a list of\n            applicable verdicts.\n          additionalProperties:\n            x-additionalPropertiesName: <status>\n            description: A list of verdicts applicable for this status.\n            type: array\n            items:\n              type: string\n\n    MetadataReportCategory:\n      type: object\n      required:\n        - type\n        - translation_key\n      properties:\n        type:\n          type: string\n          enum: [category]\n        translation_key:\n          type: string\n          description: |\n            This key can be used to build a msgid in order to fetch\n            translations from the application's .po files for this item.\n            For some of them you would need the `<verdict>` from a result.\n            Related translations for tests:\n              * `test <key> label` - Title of the category.\n              * `test <key> <verdict> description` - Description of the\n                verdict.\n              * `test <key> <verdict> summary` - Summary of the verdict.\n\n    MetadataReportSection:\n      type: object\n      required:\n        - type\n        - translation_key\n      properties:\n        type:\n          type: string\n          enum: [section]\n        translation_key:\n          type: string\n          description: |\n            This key can be used to build a msgid in order to fetch\n            translations from the application's .po files for this item.\n            Related translations for tests:\n              * `results <key> label` - Title of the section.\n\n    MetadataReportHierarchyItem:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          description: >\n            The item's name. Same as `<item_name>` in the outer `data`\n            structure.\n          pattern: \"^[a-z0-9_]+$\"\n        children:\n          description: This key is only present if this item has items below it.\n          type: array\n          items:\n            $ref: '#/components/schemas/MetadataReportHierarchyItem'\n\n    #\n    # Request bodies\n    #\n    RegisterRequest:\n      type: object\n      required:\n        - domains\n        - type\n      properties:\n        type:\n          $ref: '#/components/schemas/RequestType'\n        name:\n          $ref: '#/components/schemas/Handle'\n        domains:\n          $ref: '#/components/schemas/ListOfDomains'\n\n    #\n    # Response bodies\n    #\n    RegisterResponse:\n      $ref: '#/components/schemas/RequestReply'\n\n    ListRequestsResponse:\n      allOf:\n        - $ref: '#/components/schemas/ApiReply'\n        - type: object\n          required:\n            - requests\n          properties:\n            requests:\n              type: array\n              items:\n                $ref: '#/components/schemas/Request'\n\n    MetadataReportResponse:\n      allOf:\n        - $ref: '#/components/schemas/ApiReply'\n        - type: object\n          required:\n            - report\n          properties:\n            report:\n              type: object\n              required:\n                - hierarchy\n                - data\n              properties:\n                data:\n                  type: object\n                  description: A collection of the report's items.\n                  additionalProperties:\n                    x-additionalPropertiesName: <item_name>\n                    pattern: \"^[a-z0-9_]+$\"\n                    description: >\n                      If an item is also part of the results (categories and\n                      tests) the same name is used both here and in the results.\n                      Same as `name` in the outer `hierarchy` structure.\n                    anyOf:\n                      - $ref: '#/components/schemas/MetadataReportCategory'\n                      - $ref: '#/components/schemas/MetadataReportTest'\n                      - $ref: '#/components/schemas/MetadataReportSection'\n                hierarchy:\n                  type: object\n                  description: >\n                    A hierarchical representation of the report's items.\n                    Divided based on the report type (web or email). The item\n                    names are the same as the `data` structure.\n                  required:\n                    - web\n                    - mail\n                  properties:\n                    web:\n                      description: Items present in the web report.\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/MetadataReportHierarchyItem'\n                    mail:\n                      description: Items present in the mail report.\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/MetadataReportHierarchyItem'\n\n    BadRequestResponse:\n      allOf:\n        - $ref: '#/components/schemas/ApiReply'\n        - type: object\n          required:\n            - error\n          properties:\n            error:\n              type: object\n              required:\n                - label\n                - msg\n              properties:\n                label:\n                  type: string\n                  enum:\n                    - bad-request\n                    - invalid-url\n                msg:\n                  type: string\n                  description: Verbose description of the error.\n                  example: \"Could not parse domains. Make sure the domain list\n                    is properly formatted.\"\n\n    UnknownRequestErrorResponse:\n      allOf:\n        - $ref: '#/components/schemas/ApiReply'\n        - type: object\n          required:\n            - error\n          properties:\n            error:\n              type: object\n              required:\n                - label\n                - msg\n              properties:\n                label:\n                  type: string\n                  enum: [unknown-request]\n                msg:\n                  type: string\n                  description: Verbose description of the error.\n                  example: \"This request_id does not exist for the user.\"\n\n    StatusResponse:\n      $ref: '#/components/schemas/RequestReply'\n\n    CancelResponse:\n      $ref: '#/components/schemas/RequestReply'\n\n    ResultsResponse:\n      $ref: '#/components/schemas/ResultsReply'\n\n    ResultsTechnicalResponse:\n      $ref: '#/components/schemas/ResultsTechnicalReply'\n\n    ResultsCategoriesResponse:\n      oneOf:\n        - $ref: '#/components/schemas/WebCategories'\n        - $ref: '#/components/schemas/MailCategories'\n\n    ServerErrorResponse:\n      allOf:\n        - $ref: '#/components/schemas/ApiReply'\n        - type: object\n          required:\n            - error\n          properties:\n            error:\n              type: object\n              required:\n                - label\n                - msg\n              properties:\n                label:\n                  type: string\n                  enum: [server-error]\n                msg:\n                  type: string\n                  description: Verbose description of the error.\n                  example: \"General server error. Please report this if it\n                    keeps happening.\"\n\n  responses:\n    UnauthorisedResponse:\n      description: Unauthorised\n\n    RegisterResponse:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/RegisterResponse'\n      links:\n        status:\n          operationId: status_request\n          parameters:\n            request_id: '$response.body#/request/id'\n          description: >\n            The request_id in the answer can be used to retrieve the request's\n            status.\n\n    ListRequestsResponse:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ListRequestsResponse'\n\n    StatusResponse:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/StatusResponse'\n      links:\n        results:\n          operationId: results\n          parameters:\n            request_id: '$response.body#/request/id'\n          description: >\n            The request_id in the answer can be used to retrieve the request's\n            results when the request is `done`.\n\n    CancelResponse:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CancelResponse'\n\n    ResultsResponse:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ResultsResponse'\n\n    ResultsTechnicalResponse:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ResultsTechnicalResponse'\n\n    ResultsCategoriesResponse:\n      description: NOT A RESPONSE. Overview of the available CATEGORIES.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ResultsCategoriesResponse'\n\n    MetadataReportResponse:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/MetadataReportResponse'\n\n    BadRequestResponse:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BadRequestResponse'\n\n    UnknownRequestErrorResponse:\n      description: Unknown request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UnknownRequestErrorResponse'\n\n    ServerErrorResponse:\n      description: General server error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ServerErrorResponse'\n",
			"canonicalURL": "/github.com/internetstandards/Internet.nl@412b2a14692a18247c40b2846d80346eff24b41a/-/blob/interface/batch/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/internetstandards/Internet.nl/blob/412b2a14692a18247c40b2846d80346eff24b41a/interface/batch/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:32821: json: cannot unmarshal Go value of type ogen.Spec: spec: json: cannot unmarshal JSON string into Go value of type ogen.Contact"
}