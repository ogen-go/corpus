{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kubeshop/testkube"
		},
		"file": {
			"name": "testkube.yaml",
			"size": 0,
			"path": "api/v1/testkube.yaml",
			"byteSize": 103912,
			"content": "openapi: 3.0.1\n\ninfo:\n  title: Testkube API\n  description: \"Testkube provides a Kubernetes-native framework for test definition, execution and results\"\n  contact:\n    email: testkube@kubeshop.io\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\n  version: 1.0.0\n\nexternalDocs:\n  description: \"Find out more about Testkube\"\n  url: https://testkube.kubeshop.io/\n\ntags:\n  - name: api\n    description: \"Testkube API operations\"\n  - name: tests\n    description: \"Tests operations\"\n  - name: executions\n    description: \"Test suites and tests execution operations\"\n  - name: test-suites\n    description: \"Test suites orchestration operations\"\n  - name: labels\n    description: \"Listing all available labels\"\n  - name: artifacts\n    description: \"Artifact operations\"\n  - name: logs\n    description: \"Log operations\"\n  - name: executor\n    description: \"Executor operations\"\n  - name: webhook\n    description: \"Webhook operations\"\n  - name: test-triggers\n    description: \"Test Triggers CRUD operations\"\n  - name: keymap\n    description: \"Keymap for fields in a form\"\n\npaths:\n  /keymap/triggers:\n    get:\n      tags:\n        - keymap\n        - api\n      summary: Test triggers keymap\n      description: Returns a keymap (supported/allowed fields) for the test trigger UI screen\n      operationId: getKeyMap\n      responses:\n        200:\n          description: successful get operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestTriggerKeyMap\"\n\n\n  /triggers:\n    get:\n      tags:\n        - test-triggers\n        - api\n      parameters:\n        - $ref: \"#/components/parameters/Namespace\"\n        - $ref: \"#/components/parameters/Selector\"\n      summary: List test triggers\n      description: List test triggers from the kubernetes cluster\n      operationId: listTestTriggers\n      responses:\n        200:\n          description: successful list operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TestTrigger\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: problem communicating with kubernetes cluster\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    post:\n      tags:\n        - test-triggers\n        - api\n      summary: \"Create new test trigger\"\n      description: \"Create new test trigger CRD inside a Kubernetes cluster\"\n      operationId: createTestTrigger\n      requestBody:\n        description: test trigger body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestTriggerUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestTrigger\"\n            text/yaml:\n              schema:\n                type: string\n        400:\n          description: \"problem with test trigger definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: problem communicating with kubernetes cluster\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    delete:\n      tags:\n        - test-triggers\n        - api\n      summary: \"Delete test triggers\"\n      description: \"Deletes all or labeled test triggers\"\n      operationId: deleteTestTriggers\n      parameters:\n        - $ref: \"#/components/parameters/Namespace\"\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: problem communicating with kubernetes cluster\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /triggers/{id}:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/Namespace\"\n      tags:\n        - test-triggers\n        - api\n      summary: Get test trigger by ID\n      description: Get test trigger by ID from CRD in kubernetes cluster\n      operationId: getTestTriggerByID\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestTrigger\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: problem communicating with kubernetes cluster\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    patch:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/Namespace\"\n      tags:\n        - test-triggers\n        - api\n      summary: \"Update test trigger\"\n      description: \"Update test trigger\"\n      operationId: updateTestTrigger\n      requestBody:\n        description: test trigger details body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestTriggerUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestTrigger\"\n            text/yaml:\n              schema:\n                type: string\n        400:\n          description: \"problem with test trigger definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: problem communicating with kubernetes cluster\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    delete:\n      tags:\n        - test-triggers\n        - api\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/Namespace\"\n      summary: Delete test trigger\n      description: Deletes a test trigger\n      operationId: deleteTestTrigger\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: problem communicating with kubernetes cluster\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suites:\n    post:\n      tags:\n        - test-suites\n        - api\n      summary: \"Create new test suite\"\n      description: \"Create new test suite action\"\n      operationId: createTestSuite\n      requestBody:\n        description: test details body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestSuiteUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            text/yaml:\n              schema:\n                type: string\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuite\"\n        500:\n          description: \"problem with creating test suite\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      tags:\n        - test-suites\n        - api\n      summary: \"Get all test suites\"\n      description: \"Returns array of test suites\"\n      operationId: listTestSuites\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n        - $ref: \"#/components/parameters/TextSearch\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TestSuite\"\n            text/yaml:\n              schema:\n                type: string\n        500:\n          description: \"problem with getting test suites from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      tags:\n        - test-suites\n        - api\n      summary: \"Delete test suites\"\n      description: \"Deletes all or labeled test suites\"\n      operationId: deleteTestSuites\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suites/{id}:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n      tags:\n        - test-suites\n        - api\n      summary: \"Get test suite by ID\"\n      description: \"Returns test suite with given name\"\n      operationId: getTestSuiteByID\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuite\"\n            text/yaml:\n              schema:\n                type: string\n        500:\n          description: \"problem with getting test suite from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    patch:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n      tags:\n        - test-suites\n        - api\n      summary: \"Update test suite\"\n      description: \"Update test based on test suite content or git based data\"\n      operationId: updateTestSuite\n      requestBody:\n        description: test suite details body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestSuiteUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuite\"\n        400:\n          description: \"problem with test suite definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    delete:\n      tags:\n        - test-suites\n        - api\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n      summary: \"Delete test suite\"\n      description: \"Deletes a test suite\"\n      operationId: deleteTestSuite\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suites/{id}/metrics:\n    get:\n      tags:\n        - tests\n        - api\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/LastNDays\"\n        - $ref: \"#/components/parameters/Limit\"\n      summary: \"Get test suite metrics\"\n      description: \"Gets test suite metrics for given tests executions, with particular execution status and timings\"\n      operationId: getTestSuiteMetrics\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutionsMetrics\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suites/{id}/tests:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n      tags:\n        - test-suites\n        - api\n      summary: \"List tests for test suite\"\n      description: \"List available tests for test suite\"\n      operationId: listTestSuiteTests\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Test\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suite-with-executions:\n    get:\n      tags:\n        - test-suites\n        - api\n      summary: \"Get all test suite with executions\"\n      description: \"Returns array of test suite with executions\"\n      operationId: listTestSuiteWithExecutions\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n        - $ref: \"#/components/parameters/TextSearch\"\n        - $ref: \"#/components/parameters/TestExecutionsStatusFilter\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TestSuiteWithExecution\"\n            text/yaml:\n              schema:\n                type: string\n        500:\n          description: \"problem with getting test suite with executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suite-with-executions/{id}:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n      tags:\n        - test-suites\n        - api\n      summary: \"Get test suite by ID with execution\"\n      description: \"Returns test suite with given name with execution\"\n      operationId: getTestSuiteByIDWithExecution\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuiteWithExecution\"\n            text/yaml:\n              schema:\n                type: string\n        500:\n          description: \"problem with getting test suite with execution from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suites/{id}/executions:\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/Namespace\"\n        - $ref: \"#/components/parameters/LastNDays\"\n      tags:\n        - api\n        - test-suites\n        - executions\n      summary: \"Starts new test suite execution\"\n      description: \"New test suite execution returns new execution details on successful execution start\"\n      operationId: executeTestSuite\n      requestBody:\n        description: body passed to configure execution\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestSuiteExecutionRequest\"\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuiteExecutionsResult\"\n        400:\n          description: \"problem with request body\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with test suite execution\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/PageSize\"\n        - $ref: \"#/components/parameters/PageIndex\"\n        - $ref: \"#/components/parameters/TestExecutionsStatusFilter\"\n        - $ref: \"#/components/parameters/StartDateFilter\"\n        - $ref: \"#/components/parameters/EndDateFilter\"\n      tags:\n        - api\n        - test-suites\n        - executions\n      summary: \"Get all test suite executions\"\n      description: \"Returns array of all available test suite executions\"\n      operationId: listTestSuiteExecutions\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuiteExecutionsResult\"\n        500:\n          description: \"problem with getting test suite executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suites/{id}/executions/{executionID}:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/executionID\"\n      tags:\n        - api\n        - test-suites\n        - executions\n      summary: \"Get test suite execution\"\n      description: \"Returns test suite execution with given executionID\"\n      operationId: getTestSuiteExecution\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuiteExecution\"\n        500:\n          description: \"problem with getting test suite executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suite-executions:\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/Namespace\"\n        - $ref: \"#/components/parameters/Selector\"\n        - $ref: \"#/components/parameters/ConcurrencyLevel\"\n      tags:\n        - api\n        - test-suites\n        - executions\n      summary: \"Starts new test suite executions\"\n      description: \"New test suite executions returns new executions details on successful executions start\"\n      operationId: executeTestSuites\n      requestBody:\n        description: body passed to configure executions\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestSuiteExecutionRequest\"\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TestSuiteExecutionsResult\"\n        400:\n          description: \"problem with request body\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with test suites executions\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    get:\n      tags:\n        - executions\n        - api\n      summary: \"Get all test suite executions\"\n      description: \"Returns array of test suite executions\"\n      operationId: listAllTestSuiteExecutions\n      parameters:\n        - $ref: \"#/components/parameters/LastNDays\"\n        - $ref: \"#/components/parameters/TestName\"\n        - $ref: \"#/components/parameters/TextSearch\"\n        - $ref: \"#/components/parameters/PageSize\"\n        - $ref: \"#/components/parameters/PageIndex\"\n        - $ref: \"#/components/parameters/TestExecutionsStatusFilter\"\n        - $ref: \"#/components/parameters/StartDateFilter\"\n        - $ref: \"#/components/parameters/EndDateFilter\"\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuiteExecutionsResult\"\n        500:\n          description: \"problem with getting test suite executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-suite-executions/{id}:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/LastNDays\"\n      tags:\n        - executions\n        - api\n      summary: \"Get test suite execution by ID\"\n      description: \"Returns test suite execution with given executionID\"\n      operationId: getTestSuiteExecutionByID\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSuiteExecution\"\n        500:\n          description: \"problem with getting test suite execution from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions:\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/Namespace\"\n        - $ref: \"#/components/parameters/Selector\"\n        - $ref: \"#/components/parameters/ExecutionSelector\"\n        - $ref: \"#/components/parameters/ConcurrencyLevel\"\n      tags:\n        - api\n        - tests\n        - executions\n      summary: \"Starts new test executions\"\n      description: \"New test executions returns new executions details on successful executions start\"\n      operationId: executeTests\n      requestBody:\n        description: body passed to configure executions\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ExecutionRequest\"\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ExecutionResult\"\n        400:\n          description: \"problem with request body\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with test executions\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    get:\n      tags:\n        - executions\n        - api\n      summary: \"Get all test executions\"\n      description: \"Returns array of test executions\"\n      operationId: listExecutions\n      parameters:\n        - $ref: \"#/components/parameters/TestName\"\n        - $ref: \"#/components/parameters/Type\"\n        - $ref: \"#/components/parameters/TextSearch\"\n        - $ref: \"#/components/parameters/PageSize\"\n        - $ref: \"#/components/parameters/PageIndex\"\n        - $ref: \"#/components/parameters/ExecutionsStatusFilter\"\n        - $ref: \"#/components/parameters/StartDateFilter\"\n        - $ref: \"#/components/parameters/EndDateFilter\"\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutionsResult\"\n        500:\n          description: \"problem with getting test executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions/{executionID}:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/executionID\"\n      tags:\n        - executions\n        - api\n      summary: \"Get test execution by ID\"\n      description: \"Returns execution with given executionID\"\n      operationId: getExecutionByID\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Execution\"\n        500:\n          description: \"problem with getting test executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions/{id}/artifacts:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n      tags:\n        - artifacts\n        - executions\n        - api\n      summary: \"Get execution's artifacts by ID\"\n      description: \"Returns artifacts of the given executionID\"\n      operationId: getExecutionArtifacts\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Artifact\"\n        500:\n          description: \"problem with getting execution's artifacts from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions/{id}/logs:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n      tags:\n        - logs\n        - executions\n        - api\n      summary: \"Get execution's logs by ID\"\n      description: \"Returns logs of the given executionID\"\n      operationId: getExecutionLogs\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ExecutorOutput\"\n        500:\n          description: \"problem with getting execution's logs\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions/{id}/artifacts/{filename}:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/Filename\"\n      tags:\n        - artifacts\n        - executions\n        - api\n      summary: \"Download artifact\"\n      description: \"Download the artifact file from the given execution\"\n      operationId: downloadFile\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        500:\n          description: \"problem with getting artifacts from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /tests:\n    get:\n      tags:\n        - tests\n        - api\n      summary: \"List tests\"\n      description: \"List available tests\"\n      operationId: listTests\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n        - $ref: \"#/components/parameters/TextSearch\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Test\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    post:\n      tags:\n        - tests\n        - api\n      summary: \"Create new test\"\n      description: \"Create new test based on file content, uri or git based data\"\n      operationId: createTest\n      requestBody:\n        description: test details body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            text/yaml:\n              schema:\n                type: string\n        201:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Test\"\n        400:\n          description: \"problem with test definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      tags:\n        - tests\n        - api\n      summary: \"Delete tests\"\n      description: \"Deletes all or labeled tests\"\n      operationId: deleteTests\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /tests/{id}:\n    patch:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n      tags:\n        - tests\n        - api\n      summary: \"Update test\"\n      description: \"Update test based on test content or git based data\"\n      operationId: updateTest\n      requestBody:\n        description: test details body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Test\"\n        400:\n          description: \"problem with test definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      tags:\n        - tests\n        - api\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n      summary: \"Get test\"\n      description: \"Gets the specified test\"\n      operationId: getTest\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Test\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      tags:\n        - tests\n        - api\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n      summary: \"Delete test\"\n      description: \"Deletes a test\"\n      operationId: deleteTest\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /tests/{id}/metrics:\n    get:\n      tags:\n        - tests\n        - api\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/LastNDays\"\n        - $ref: \"#/components/parameters/Limit\"\n      summary: \"Get test metrics\"\n      description: \"Gets test metrics for given tests executions, with particular execution status and timings\"\n      operationId: getTestMetrics\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutionsMetrics\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-with-executions:\n    get:\n      tags:\n        - tests\n        - api\n      summary: \"List test with executions\"\n      description: \"List available test with executions\"\n      operationId: listTestWithExecutions\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n        - $ref: \"#/components/parameters/TextSearch\"\n        - $ref: \"#/components/parameters/ExecutionsStatusFilter\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TestWithExecution\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-with-executions/{id}:\n    get:\n      tags:\n        - tests\n        - api\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n      summary: \"Get test with execution\"\n      description: \"Gets the specified test with execution\"\n      operationId: getTestWithExecution\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestWithExecution\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /tests/{id}/executions:\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/Namespace\"\n      tags:\n        - api\n        - tests\n        - executions\n      summary: \"Starts new test execution\"\n      description: \"New test execution returns new execution details on successful execution start\"\n      operationId: executeTest\n      requestBody:\n        description: body passed to configure execution\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ExecutionRequest\"\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutionResult\"\n        400:\n          description: \"problem with request body\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with test execution\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/LastNDays\"\n        - $ref: \"#/components/parameters/PageSize\"\n        - $ref: \"#/components/parameters/PageIndex\"\n        - $ref: \"#/components/parameters/ExecutionsStatusFilter\"\n        - $ref: \"#/components/parameters/StartDateFilter\"\n        - $ref: \"#/components/parameters/EndDateFilter\"\n      tags:\n        - api\n        - tests\n        - executions\n      summary: \"Get all test executions\"\n      description: \"Returns array of all available test executions\"\n      operationId: listTestExecutions\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutionsResult\"\n        500:\n          description: \"problem with getting test executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /tests/{id}/executions/{executionID}:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/executionID\"\n      tags:\n        - api\n        - tests\n        - executions\n      summary: \"Get test execution\"\n      description: \"Returns execution with given executionID\"\n      operationId: getTestExecution\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Execution\"\n        500:\n          description: \"problem with getting test executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/executionID\"\n      tags:\n        - api\n        - tests\n        - executions\n      summary: \"Aborts execution\"\n      description: \"Aborts execution and returns execution details\"\n      operationId: abortExecution\n      responses:\n        501:\n          description: not implemented yet\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutionResult\"\n\n  /executors:\n    get:\n      tags:\n        - executor\n        - api\n      summary: \"List executors\"\n      description: \"List executors available in cluster\"\n      operationId: listExecutors\n      parameters:\n        - $ref: \"#/components/parameters/Namespace\"\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Executor\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    post:\n      tags:\n        - executor\n        - api\n      summary: \"Create new executor\"\n      description: \"Create new executor based on variables passed in request\"\n      operationId: createExecutor\n      requestBody:\n        description: executor request body data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ExecutorCreateRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            text/yaml:\n              schema:\n                type: string\n        201:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutorDetails\"\n        400:\n          description: \"problem with executor definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      tags:\n        - executor\n        - api\n      summary: \"Delete executors\"\n      description: \"Deletes labeled executors\"\n      operationId: deleteExecutors\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executors/{id}:\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/Namespace\"\n        - $ref: \"#/components/parameters/ID\"\n      tags:\n        - api\n        - executor\n      summary: \"Delete executor\"\n      description: \"Deletes executor by its name\"\n      operationId: deleteExecutor\n      responses:\n        204:\n          description: executor deleted successfuly\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/Namespace\"\n        - $ref: \"#/components/parameters/ID\"\n      tags:\n        - api\n        - executor\n      summary: \"Get executor details\"\n      description: \"Returns executors data with executions passed to executor\"\n      operationId: getExecutor\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutorDetails\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with getting executor data\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /labels:\n    get:\n      tags:\n        - labels\n      summary: \"List labels\"\n      description: \"list all available labels\"\n      operationId: listLabels\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: array\n                  items:\n                    type: string\n                example:\n                  app:\n                    - backend\n                  env:\n                    - prod\n                  toDelete:\n                    - \"yes\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /webhooks:\n    get:\n      tags:\n        - webhook\n        - api\n      summary: \"List webhooks\"\n      description: \"List webhooks available in cluster\"\n      operationId: listWebhooks\n      parameters:\n        - $ref: \"#/components/parameters/Namespace\"\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Webhook\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    post:\n      tags:\n        - webhook\n        - api\n      summary: \"Create new webhook\"\n      description: \"Create new webhook based on variables passed in request\"\n      operationId: createWebhook\n      requestBody:\n        description: executor request body data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/WebhookCreateRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            text/yaml:\n              schema:\n                type: string\n        201:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Webhook\"\n        400:\n          description: \"problem with executor definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      tags:\n        - webhook\n        - api\n      summary: \"Delete webhooks\"\n      description: \"Deletes labeled webhooks\"\n      operationId: deleteWebhooks\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /webhooks/{id}:\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/Namespace\"\n      tags:\n        - api\n        - webhook\n      summary: \"Delete webhook\"\n      description: \"Deletes webhook by its name\"\n      operationId: deleteWebhook\n      responses:\n        204:\n          description: webhook deleted successfuly\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n        - $ref: \"#/components/parameters/Namespace\"\n      tags:\n        - api\n        - webhook\n      summary: \"Get webhook details\"\n      description: \"Returns webhook\"\n      operationId: getWebhook\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Webhook\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with getting webhook data\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /config:\n    patch:\n      tags:\n        - api\n      summary: \"Update config\"\n      description: \"Updates config in cluster storage state\"\n      operationId: updateConfigKey\n      requestBody:\n        description: config request body data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Config\"\n      responses:\n        200:\n          description: update successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Config\"\n        502:\n          description: \"problem with updating key in cluster storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    get:\n      tags:\n        - api\n      summary: \"Get config\"\n      description: \"Get config from cluster storage state\"\n      operationId: getConfig\n      responses:\n        200:\n          description: get successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Config\"\n        502:\n          description: \"problem with getting config from cluster storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n  /debug:\n    get:\n      tags:\n        - api\n      summary: \"Get debug information\"\n      description: \"Gets information that is needed for debugging and opening Testkube bug reports\"\n      operationId: getDebugInfo\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DebugInfo\"\n        500:\n          description: \"problem with getting debug information\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-sources:\n    get:\n      tags:\n        - test-sources\n        - api\n      summary: \"List test sources\"\n      description: \"List test sources available in cluster\"\n      operationId: listTestSources\n      parameters:\n        - $ref: \"#/components/parameters/Namespace\"\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TestSource\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    post:\n      tags:\n        - test-sources\n        - api\n      summary: \"Create new test source\"\n      description: \"Create new test source based on variables passed in request\"\n      operationId: createTestSource\n      requestBody:\n        description: test source request body data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestSourceUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            text/yaml:\n              schema:\n                type: string\n        201:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSource\"\n        400:\n          description: \"problem with test source definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      tags:\n        - test-sources\n        - api\n      summary: \"Delete test sources\"\n      description: \"Deletes labeled test sources\"\n      operationId: deleteTestSources\n      parameters:\n        - $ref: \"#/components/parameters/Selector\"\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-sources/{id}:\n    patch:\n      parameters:\n        - $ref: \"#/components/parameters/ID\"\n      tags:\n        - test-sources\n        - api\n      summary: \"Update test source\"\n      description: \"Update test source based on test content or git based data\"\n      operationId: updateTestSource\n      requestBody:\n        description: test source body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestSourceUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSource\"\n        400:\n          description: \"problem with test source definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/Namespace\"\n        - $ref: \"#/components/parameters/ID\"\n      tags:\n        - api\n        - test-sources\n      summary: \"Delete test source\"\n      description: \"Deletes test source by its name\"\n      operationId: deleteTestSource\n      responses:\n        204:\n          description: test source deleted successfuly\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/Namespace\"\n        - $ref: \"#/components/parameters/ID\"\n      tags:\n        - api\n        - test-sources\n      summary: \"Get test source data\"\n      description: \"Returns test sources data\"\n      operationId: getTestSource\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestSource\"\n            text/yaml:\n              schema:\n                type: string\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with getting test source data\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\ncomponents:\n  schemas:\n    ExecutionsMetrics:\n      type: object\n      properties:\n        passFailRatio:\n          type: number\n          description: Percentage pass to fail ratio\n          example: 50\n        executionDurationP50:\n          type: string\n          description: 50th percentile of all durations\n          example: \"7m2.71s\"\n        executionDurationP50ms:\n          type: integer\n          description: 50th percentile of all durations in milliseconds\n          example: 422\n        executionDurationP90:\n          type: string\n          description: 90th percentile of all durations\n          example: \"7m2.71s\"\n        executionDurationP90ms:\n          type: integer\n          description: 90th percentile of all durations in milliseconds\n          example: 422\n        executionDurationP95:\n          type: string\n          description: 95th percentile of all durations\n          example: \"7m2.71s\"\n        executionDurationP95ms:\n          type: integer\n          description: 95th percentile of all durations in milliseconds\n          example: 422\n        executionDurationP99:\n          type: string\n          description: 99th percentile of all durations\n          example: \"7m2.71s\"\n        executionDurationP99ms:\n          type: integer\n          description: 99th percentile of all durations in milliseconds\n          example: 422\n        totalExecutions:\n          type: integer\n          description: total executions number\n          example: 2\n        failedExecutions:\n          type: integer\n          description: failed executions number\n          example: 1\n        executions:\n          type: array\n          description: List of test/testsuite executions\n          items:\n            $ref: \"#/components/schemas/ExecutionsMetricsExecutions\"\n\n    ExecutionsMetricsExecutions:\n      type: object\n      properties:\n        executionId:\n          type: string\n        duration:\n          type: string\n        durationMs:\n          type: integer\n        status:\n          type: string\n        name:\n          type: string\n        startTime:\n          type: string\n          format: date-time\n\n    Variables:\n      type: object\n      description: \"execution variables passed to executor converted to vars for usage in tests\"\n      additionalProperties:\n        $ref: \"#/components/schemas/Variable\"\n      example:\n        var1:\n          name: \"var1\"\n          type: \"basic\"\n          value: \"value1\"\n        secret1:\n          name: \"secret1\"\n          type: \"secret\"\n          value: \"secretvalue1\"\n\n    Variable:\n      type: object\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        type:\n          $ref: \"#/components/schemas/VariableType\"\n        secretRef:\n          $ref: \"#/components/schemas/SecretRef\"\n\n    VariableType:\n      type: string\n      enum:\n        - basic\n        - secret\n\n    ObjectRef:\n      required:\n        - name\n      type: object\n      properties:\n        namespace:\n          type: string\n          description: object kubernetes namespace\n          example: \"testkube\"\n        name:\n          type: string\n          description: object name\n          example: \"name\"\n\n    SecretRef:\n      required:\n        - name\n        - key\n      type: object\n      description: Testkube internal reference for secret storage in Kubernetes secrets\n      properties:\n        namespace:\n          type: string\n          description: object kubernetes namespace\n        name:\n          type: string\n          description: object name\n        key:\n          type: string\n          description: object key\n\n    TestSuite:\n      type: object\n      required:\n        - name\n        - status\n        - steps\n      properties:\n        name:\n          type: string\n          example: \"test-suite1\"\n        namespace:\n          type: string\n          example: \"testkube\"\n        description:\n          type: string\n          example: \"collection of tests\"\n        before:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestSuiteStep\"\n          description: Run this step before whole suite\n          example:\n            - stopTestOnFailure: true\n              execute:\n                namespace: \"testkube\"\n                name: \"example-test\"\n        steps:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestSuiteStep\"\n          description: Steps to run\n          example:\n            - stopTestOnFailure: true\n              execute:\n                namespace: \"testkube\"\n                name: \"example-test\"\n        after:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestSuiteStep\"\n          description: Run this step after whole suite\n          example:\n            - stopTestOnFailure: true\n              execute:\n                namespace: \"testkube\"\n                name: \"example-test\"\n        labels:\n          type: object\n          description: \"test suite labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n        schedule:\n          type: string\n          description: schedule to run test suite\n          example: \"* * * * *\"\n        repeats:\n          type: integer\n          default: 1\n          example: 1\n        created:\n          type: string\n          format: date-time\n        executionRequest:\n          $ref: \"#/components/schemas/TestSuiteExecutionRequest\"\n\n    TestSuiteStepType:\n      type: string\n      enum:\n        - executeTest\n        - delay\n\n    TestSuiteStep:\n      type: object\n      required:\n        - name\n        - type\n        - stopTestOnFailure\n      properties:\n        stopTestOnFailure:\n          type: boolean\n          default: true\n        execute:\n          $ref: \"#/components/schemas/TestSuiteStepExecuteTest\"\n        delay:\n          $ref: \"#/components/schemas/TestSuiteStepDelay\"\n\n    TestSuiteStepExecuteTest:\n      allOf:\n        - $ref: \"#/components/schemas/ObjectRef\"\n\n    TestSuiteStepDelay:\n      type: object\n      required:\n        - duration\n        - name\n      properties:\n        duration:\n          type: integer\n          default: 0\n          description: delay duration in milliseconds\n\n    TestSuiteExecution:\n      type: object\n      description: Test suite executions data\n      required:\n        - id\n        - name\n        - test\n      properties:\n        id:\n          type: string\n          description: execution id\n          format: bson objectId\n          example: \"62f395e004109209b50edfc1\"\n        name:\n          type: string\n          description: \"execution name\"\n          example: \"test-suite1.needlessly-sweet-imp\"\n        testSuite:\n          $ref: \"#/components/schemas/ObjectRef\"\n          description: object name and namespace\n        status:\n          $ref: \"#/components/schemas/TestSuiteExecutionStatus\"\n        envs:\n          type: object\n          description: \"environment variables passed to executor\"\n          additionalProperties:\n            type: string\n          example:\n            record: \"true\"\n            prefix: \"some-\"\n        variables:\n          $ref: \"#/components/schemas/Variables\"\n        secretUUID:\n          type: string\n          description: secret uuid\n          readOnly: true\n          example: \"7934600f-b367-48dd-b981-4353304362fb\"\n        startTime:\n          type: string\n          description: \"test start time\"\n          format: date-time\n        endTime:\n          type: string\n          description: \"test end time\"\n          format: date-time\n        duration:\n          type: string\n          description: \"test duration\"\n          example: \"2m\"\n        durationMs:\n          type: integer\n          description: \"test duration in ms\"\n          example: 6000\n        stepResults:\n          type: array\n          description: \"steps execution results\"\n          items:\n            $ref: \"#/components/schemas/TestSuiteStepExecutionResult\"\n            description: test execution results\n        labels:\n          type: object\n          description: \"test suite labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n\n    TestSuiteExecutionStatus:\n      type: string\n      enum:\n        - queued\n        - running\n        - passed\n        - failed\n        - cancelled\n\n    TestSuiteStepExecutionResult:\n      description: execution result returned from executor\n      type: object\n      required:\n        - status\n      properties:\n        step:\n          $ref: \"#/components/schemas/TestSuiteStep\"\n        test:\n          $ref: \"#/components/schemas/ObjectRef\"\n          description: object name and namespace\n        execution:\n          $ref: \"#/components/schemas/Execution\"\n          description: test step execution\n\n    TestSuiteExecutionsResult:\n      description: the result for a page of executions\n      type: object\n      required:\n        - totals\n        - results\n      properties:\n        totals:\n          $ref: \"#/components/schemas/ExecutionsTotals\"\n        filtered:\n          $ref: \"#/components/schemas/ExecutionsTotals\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestSuiteExecutionSummary\"\n\n    TestSuiteExecutionSummary:\n      description: \"Test execution summary\"\n      type: object\n      required:\n        - id\n        - name\n        - testSuiteName\n        - status\n      properties:\n        id:\n          type: string\n          description: execution id\n          format: bson objectId\n          example: \"62f395e004109209b50edfc1\"\n        name:\n          type: string\n          description: execution name\n          example: \"test-suite1.needlessly-sweet-imp\"\n        testSuiteName:\n          type: string\n          description: name of the test suite\n          example: \"test-suite1\"\n        status:\n          $ref: \"#/components/schemas/TestSuiteExecutionStatus\"\n        startTime:\n          type: string\n          description: \"test suite execution start time\"\n          format: date-time\n        endTime:\n          type: string\n          description: \"test suite execution end time\"\n          format: date-time\n        duration:\n          type: string\n          description: \"test suite execution duration\"\n          example: \"00:00:09\"\n        durationMs:\n          type: integer\n          description: \"test suite execution duration in ms\"\n          example: 9009\n        execution:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestSuiteStepExecutionSummary\"\n        labels:\n          type: object\n          description: \"test suite and execution labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n\n    TestSuiteStepExecutionSummary:\n      description: \"Test suite execution summary\"\n      type: object\n      required:\n        - id\n        - name\n        - status\n      properties:\n        id:\n          type: string\n          example: \"62f395e004109209b50edfc4\"\n        name:\n          type: string\n          description: execution name\n          example: \"run:testkube/test1\"\n        testName:\n          type: string\n          description: test name\n          example: \"test1\"\n        status:\n          $ref: \"#/components/schemas/ExecutionStatus\"\n        type:\n          $ref: \"#/components/schemas/TestSuiteStepType\"\n\n    Test:\n      type: object\n      properties:\n        name:\n          type: string\n          description: test name\n          example: \"test1\"\n        namespace:\n          type: string\n          description: test namespace\n          example: \"testkube\"\n        type:\n          type: string\n          description: test type\n          example: \"postman/collection\"\n        content:\n          $ref: \"#/components/schemas/TestContent\"\n          description: test content\n        source:\n          type: string\n          description: reference to test source resource\n          example: \"my-private-repository-test\" \n        created:\n          type: string\n          format: date-time\n          example: \"2022-07-30T06:54:15Z\"\n        labels:\n          type: object\n          description: \"test labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n        schedule:\n          type: string\n          description: schedule to run test\n          example: \"* * * * *\"\n        executionRequest:\n          $ref: \"#/components/schemas/ExecutionRequest\"\n\n    TestContent:\n      type: object\n      properties:\n        type:\n          type: string\n          description: test type\n          enum:\n            - string\n            - file-uri\n            - git-file\n            - git-dir\n        repository:\n          $ref: \"#/components/schemas/Repository\"\n        data:\n          type: string\n          description: test content data as string\n        uri:\n          type: string\n          description: test content\n          example: \"https://github.com/kubeshop/testkube\"\n        \n    TestSource:\n      description: Test source resource for shared test content\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/TestContent\"\n      properties:\n        name:\n          type: string\n          description: test source name\n          example: \"testsource1\"\n        namespace:\n          type: string\n          description: test source namespace\n          example: \"testkube\"\n        labels:\n          type: object\n          description: \"test source labels\"\n          additionalProperties:\n            type: string\n  \n    TestSourceUpsertRequest:\n      description: test create request body\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/TestContent\"\n      properties:\n        name:\n          type: string\n          description: test source name\n          example: \"testsource1\"\n        namespace:\n          type: string\n          description: test source namespace\n          example: \"testkube\"\n        labels:\n          type: object\n          description: \"test source labels\"\n          additionalProperties:\n            type: string\n\n    Execution:\n      type: object\n      description: test execution\n      properties:\n        id:\n          type: string\n          description: execution id\n          format: bson objectId\n          example: \"62f395e004109209b50edfc4\"\n        testName:\n          type: string\n          description: unique test name (CRD Test name)\n          example: \"example-test\"\n        testSuiteName:\n          type: string\n          description: unique test suite name (CRD Test suite name), if it's run as a part of test suite\n          example: \"test-suite1\"\n        testNamespace:\n          type: string\n          description: test namespace\n          example: \"testkube\"\n        testType:\n          type: string\n          description: test type e.g. postman/collection\n          example: \"postman/collection\"\n        name:\n          type: string\n          description: \"execution name\"\n          example: \"test-suite1-example-test-1\"\n        number:\n          type: integer\n          description: \"execution number\"\n          example: 1\n        envs:\n          type: object\n          description: \"environment variables passed to executor\"\n          additionalProperties:\n            type: string\n          example:\n            record: \"true\"\n            prefix: \"some-\"\n        args:\n          type: array\n          description: \"additional arguments/flags passed to executor binary\"\n          example: [\"--concurrency\", \"2\", \"--remote\", \"--some\", \"blabla\"]\n          items:\n            type: string\n        variables:\n          $ref: \"#/components/schemas/Variables\"\n        variablesFile:\n          type: string\n          description: variables file content - need to be in format for particular executor (e.g. postman envs file)\n        testSecretUUID:\n          type: string\n          description: test secret uuid\n          readOnly: true\n          example: \"7934600f-b367-48dd-b981-4353304362fb\"\n        testSuiteSecretUUID:\n          type: string\n          description: test suite secret uuid, if it's run as a part of test suite\n          readOnly: true\n          example: \"7934600f-b367-48dd-b981-4353304362fb\"\n        content:\n          $ref: \"#/components/schemas/TestContent\"\n        startTime:\n          type: string\n          description: \"test start time\"\n          format: date-time\n        endTime:\n          type: string\n          description: \"test end time\"\n          format: date-time\n        duration:\n          type: string\n          description: \"test duration\"\n          example: \"88s\"\n        executionResult:\n          required: true\n          $ref: \"#/components/schemas/ExecutionResult\"\n          description: result get from executor\n        labels:\n          type: object\n          description: \"test and execution labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n\n    Artifact:\n      type: object\n      description: API server artifact\n      properties:\n        name:\n          type: string\n          description: artifact file path\n        size:\n          type: integer\n          description: file size in bytes\n\n    ExecutionsResult:\n      description: the result for a page of executions\n      type: object\n      required:\n        - totals\n        - results\n      properties:\n        totals:\n          $ref: \"#/components/schemas/ExecutionsTotals\"\n        filtered:\n          $ref: \"#/components/schemas/ExecutionsTotals\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ExecutionSummary\"\n\n    ExecutionSummary:\n      description: \"Execution summary\"\n      type: object\n      required:\n        - id\n        - name\n        - testName\n        - testType\n        - status\n      properties:\n        id:\n          type: string\n          description: execution id\n          format: bson objectId\n          example: \"62f395e004109209b50edfc4\"\n        name:\n          type: string\n          description: execution name\n          example: \"test-suite1-test1\"\n        number:\n          type: integer\n          description: execution number\n          example: 1\n        testName:\n          type: string\n          description: name of the test\n          example: \"test1\"\n        testNamespace:\n          type: string\n          description: name of the test\n          example: \"testkube\"\n        testType:\n          type: string\n          description: the type of test for this execution\n          example: \"postman/collection\"\n        status:\n          $ref: \"#/components/schemas/ExecutionStatus\"\n        startTime:\n          type: string\n          description: \"test execution start time\"\n          format: date-time\n        endTime:\n          type: string\n          description: \"test execution end time\"\n          format: date-time\n        duration:\n          type: string\n          description: calculated test duration\n          example: \"00:00:13\"\n        durationMs:\n          type: integer\n          description: calculated test duration in ms\n          example: 10000\n        labels:\n          type: object\n          description: \"test and execution labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n\n    ExecutionStatus:\n      type: string\n      enum:\n        - queued\n        - running\n        - passed\n        - failed\n        - cancelled\n\n    ExecutionResult:\n      description: execution result returned from executor\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          $ref: \"#/components/schemas/ExecutionStatus\"\n        output:\n          type: string\n          description: \"RAW Test execution output, depends of reporter used in particular tool\"\n        outputType:\n          type: string\n          description: \"output type depends of reporter used in particular tool\"\n          enum:\n            - text/plain\n            - application/junit+xml\n            - application/json\n        errorMessage:\n          type: string\n          description: \"error message when status is error, separate to output as output can be partial in case of error\"\n        steps:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ExecutionStepResult\"\n          description: execution steps (for collection of requests)\n        reports:\n          type: object\n          properties:\n            junit:\n              type: string\n\n    ExecutionStepResult:\n      description: execution result data\n      type: object\n      required:\n        - name\n        - status\n      properties:\n        name:\n          type: string\n          description: step name\n          example: \"step1\"\n        duration:\n          type: string\n          format: duration\n          example: \"10m0s\"\n        status:\n          type: string\n          description: execution step status\n          enum: [passed, failed]\n        assertionResults:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AssertionResult\"\n\n    AssertionResult:\n      description: execution result data\n      type: object\n      properties:\n        name:\n          type: string\n          example: \"assertion1\"\n        status:\n          type: string\n          enum: [passed, failed]\n        errorMessage:\n          type: string\n          nullable: true\n\n    ExecutionsTotals:\n      type: object\n      description: various execution counters\n      required:\n        - results\n        - passed\n        - failed\n        - queued\n        - running\n      properties:\n        results:\n          type: integer\n          description: the total number of executions available\n        passed:\n          type: integer\n          description: the total number of passed executions available\n        failed:\n          type: integer\n          description: the total number of failed executions available\n        queued:\n          type: integer\n          description: the total number of queued executions available\n        running:\n          type: integer\n          description: the total number of running executions available\n\n    ServerInfo:\n      type: object\n      description: Server information with build version, build commit etc.\n      required:\n        - version\n      properties:\n        version:\n          type: string\n          description: build version\n          example: \"v1.4.4\"\n        commit:\n          type: string\n          description: build commit\n          example: \"aaff223ae68aab1af56e8ed8c84c2b80ed63d9b8\"\n\n    Repository:\n      description: repository representation for tests in git repositories\n      type: object\n      required:\n        - type\n        - uri\n      properties:\n        type:\n          type: string\n          enum:\n            - git\n          description: VCS repository type\n        uri:\n          type: string\n          description: uri of content file or git directory\n          example: \"https://github.com/kubeshop/testkube\"\n        branch:\n          type: string\n          description: branch/tag name for checkout\n          example: \"main\"\n        commit:\n          type: string\n          description: commit id (sha) for checkout\n          example: \"b928cbb7186944ab9275937ec1ac3d3738ca2e1d\"\n        path:\n          type: string\n          description: if needed we can checkout particular path (dir or file) in case of BIG/mono repositories\n          example: \"test/perf\"\n        username:\n          type: string\n          description: git auth username for private repositories\n        token:\n          type: string\n          description: git auth token for private repositories\n        usernameSecret:\n          $ref: \"#/components/schemas/SecretRef\"\n        tokenSecret:\n          $ref: \"#/components/schemas/SecretRef\"\n\n    ExecutionRequest:\n      description: test execution request body\n      type: object\n      properties:\n        name:\n          type: string\n          description: test execution custom name\n          example: \"testing with 1000 users\"\n        testSuiteName:\n          type: string\n          description: unique test suite name (CRD Test suite name), if it's run as a part of test suite\n          example: \"test-suite1\"\n        number:\n          type: integer\n          description: test execution number\n        executionLabels:\n          type: object\n          description: \"test execution labels\"\n          additionalProperties:\n            type: string\n          example:\n            users: \"3\"\n            prefix: \"some-\"\n        namespace:\n          type: string\n          description: test kubernetes namespace (\"testkube\" when not set)\n          example: testkube\n        variablesFile:\n          type: string\n          description: variables file content - need to be in format for particular executor (e.g. postman envs file)\n        variables:\n          $ref: \"#/components/schemas/Variables\"\n        testSecretUUID:\n          type: string\n          description: test secret uuid\n          readOnly: true\n          example: \"7934600f-b367-48dd-b981-4353304362fb\"\n        testSuiteSecretUUID:\n          type: string\n          description: test suite secret uuid, if it's run as a part of test suite\n          readOnly: true\n          example: \"7934600f-b367-48dd-b981-4353304362fb\"\n        args:\n          type: array\n          description: \"additional executor binary arguments\"\n          items:\n            type: string\n          example:\n            - \"--repeats\"\n            - \"5\"\n            - \"--insecure\"\n        image:\n          type: string\n          description: container image, executor will run inside this image\n          example: kubeshop/testkube-executor-custom:1.10.11-dev-0a9c91\n        envs:\n          type: object\n          description: \"environment variables passed to executor\"\n          additionalProperties:\n            type: string\n          example:\n            record: \"true\"\n            prefix: \"some-\"\n        secretEnvs:\n          type: object\n          description: \"execution variables passed to executor from secrets\"\n          additionalProperties:\n            type: string\n          example:\n            secret_name1: \"kubernetes-secret-name\"\n            secret_key1: \"secret-key-name\"\n        sync:\n          type: boolean\n          description: whether to start execution sync or async\n        httpProxy:\n          type: string\n          description: http proxy for executor containers\n          example: user:pass@my.proxy.server:8080\n        httpsProxy:\n          type: string\n          description: https proxy for executor containers\n          example: user:pass@my.proxy.server:8081\n\n    TestSuiteExecutionRequest:\n      description: test suite execution request body\n      type: object\n      properties:\n        name:\n          type: string\n          description: test execution custom name\n          example: \"testing with 1000 users\"\n        number:\n          type: integer\n          description: test suite execution number\n          example: 1\n        namespace:\n          type: string\n          description: test kubernetes namespace (\"testkube\" when not set)\n          example: testkube\n        variables:\n          $ref: \"#/components/schemas/Variables\"\n        secretUUID:\n          type: string\n          description: secret uuid\n          readOnly: true\n          example: \"7934600f-b367-48dd-b981-4353304362fb\"\n        labels:\n          type: object\n          description: \"test suite labels\"\n          additionalProperties:\n            type: string\n          example:\n            users: \"3\"\n            prefix: \"some-\"\n        executionLabels:\n          type: object\n          description: \"execution labels\"\n          additionalProperties:\n            type: string\n          example:\n            users: \"3\"\n            prefix: \"some-\"\n        sync:\n          type: boolean\n          description: whether to start execution sync or async\n        httpProxy:\n          type: string\n          description: http proxy for executor containers\n          example: user:pass@my.proxy.server:8080\n        httpsProxy:\n          type: string\n          description: https proxy for executor containers\n          example: user:pass@my.proxy.server:8081\n\n    TestUpsertRequest:\n      description: test create request body\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/Test\"\n\n    TestSuiteUpsertRequest:\n      description: test create request body\n      type: object\n      required:\n        - name\n        - namespace\n      allOf:\n        - $ref: \"#/components/schemas/TestSuite\"\n        - $ref: \"#/components/schemas/ObjectRef\"\n\n    TestTriggerUpsertRequest:\n      description: test trigger create or update request body\n      type: object\n      required:\n        - name\n        - namespace\n        - resource\n        - resourceSelector\n        - event\n        - action\n        - execution\n        - testSelector\n      allOf:\n        - $ref: \"#/components/schemas/TestTrigger\"\n        - $ref: \"#/components/schemas/ObjectRef\"\n\n    ExecutorCreateRequest:\n      description: executor create request body\n      type: object\n      required:\n        - name\n        - namespace\n        - types\n      allOf:\n        - $ref: \"#/components/schemas/Executor\"\n        - $ref: \"#/components/schemas/ObjectRef\"\n\n    WebhookCreateRequest:\n      description: executor create request body\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/Webhook\"\n\n    # Copied from CRD spec\n    # https://github.com/kubeshop/testkube-operator/blob/main/config/crd/bases/executor.testkube.io_executors.yaml\n    # TODO we need to sync those in some nice way\n    Executor:\n      description: CRD based executor data\n      type: object\n      properties:\n        executorType:\n          description:\n            ExecutorType one of \"rest\" for rest openapi based executors\n            or \"job\" which will be default runners for testkube soon\n          type: string\n        image:\n          description: Image for kube-job\n          type: string\n        types:\n          description: Types defines what types can be handled by executor e.g.\n            \"postman/collection\", \":curl/command\" etc\n          items:\n            type: string\n          type: array\n        uri:\n          description: URI for rest based executors\n          type: string\n        jobTemplate:\n          description: Job template to launch executor\n          type: string\n        labels:\n          type: object\n          description: \"executor labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n        features:\n          description: Available executor features\n          type: array\n          items:\n            type: string\n            enum:\n              - artifacts\n              - junit-report\n\n    ExecutorDetails:\n      description: Executor details with Executor data and additional information like list of executions\n      type: object\n      properties:\n        name:\n          description: Executor name\n          type: string\n        executor:\n          $ref: \"#/components/schemas/Executor\"\n        executions:\n          $ref: \"#/components/schemas/ExecutionsResult\"\n\n    ExecutorOutput:\n      description: CRD based executor data\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n          description: One of possible output types\n          enum:\n            - error\n            - log\n            - event\n            - result\n        content:\n          type: string\n          description: Message/event data passed from executor (like log lines etc)\n        result:\n          $ref: \"#/components/schemas/ExecutionResult\"\n          description: Execution result when job is finished\n\n    Webhook:\n      description: CRD based webhook data\n      type: object\n      required:\n        - uri\n        - types\n      properties:\n        name:\n          type: string\n          example: \"webhook1\"\n        namespace:\n          type: string\n          example: \"testkube\"\n        uri:\n          type: string\n          example: \"https://hooks.app.com/services/1\"\n        events:\n          type: array\n          items:\n            $ref: \"#/components/schemas/EventType\"\n        selector:\n          type: string\n          description: Labels to filter for tests and test suites\n        labels:\n          type: object\n          description: \"webhook labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n\n    Event:\n      description: CRD based executor data\n      type: object\n      required:\n        - type\n        - id\n      properties:\n        id:\n          type: string\n          description: UUID of event\n        type:\n          $ref: \"#/components/schemas/EventType\"\n        testExecution:\n          $ref: \"#/components/schemas/Execution\"\n        testSuiteExecution:\n          $ref: \"#/components/schemas/TestSuiteExecution\"\n\n    EventType:\n      type: string\n      enum:\n        - start-test\n        - end-test-success\n        - end-test-failed\n        - start-testsuite\n        - end-testsuite-success\n        - end-testsuite-failed\n\n    EventResult:\n      description: Listener result after sending particular event\n      type: object\n      required:\n        - type\n      properties:\n        id:\n          type: string\n          description: UUID of event\n        error:\n          type: string\n          description: error message if any\n        result:\n          type: string\n          format: error\n          description: result of event\n\n    TestWithExecution:\n      description: Test with latest Execution result\n      type: object\n      required:\n        - test\n      properties:\n        test:\n          $ref: \"#/components/schemas/Test\"\n        latestExecution:\n          $ref: \"#/components/schemas/Execution\"\n\n    TestSuiteWithExecution:\n      description: Test suite with latest execution result\n      type: object\n      required:\n        - testSuite\n      properties:\n        testSuite:\n          $ref: \"#/components/schemas/TestSuite\"\n        latestExecution:\n          $ref: \"#/components/schemas/TestSuiteExecution\"\n\n    Config:\n      description: Testkube API config data structure\n      type: object\n      required:\n        - id\n        - clusterId\n        - enableTelemetry\n      properties:\n        id:\n          type: string\n        clusterId:\n          type: string\n        enableTelemetry:\n          type: boolean\n\n    DebugInfo:\n      description: Testkube debug info\n      type: object\n      properties:\n        clientVersion:\n          type: string\n          example: \"1.4.9\"\n        serverVersion:\n          type: string\n          example: \"v1.4.9\"\n        clusterVersion:\n          type: string\n          example: \"v1.23.4\"\n        apiLogs:\n          type: array\n          items:\n            type: string\n          example: [\"logline1\", \"logline2\", \"logline3\"]\n        operatorLogs:\n          type: array\n          items:\n            type: string\n          example: [\"logline1\", \"logline2\", \"logline3\"]\n        executionLogs:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n            example: [\"logline1\", \"logline2\", \"logline3\"]\n\n    TestTrigger:\n      type: object\n      required:\n        - resource\n        - resourceSelector\n        - event\n        - action\n        - execution\n        - testSelector\n      properties:\n        name:\n          type: string\n          description: test trigger name\n          example: \"test1\"\n        namespace:\n          type: string\n          description: test trigger namespace\n          example: \"testkube\"\n        labels:\n          type: object\n          description: \"test trigger labels\"\n          additionalProperties:\n            type: string\n          example:\n            env: \"prod\"\n            app: \"backend\"\n        resource:\n          $ref: \"#/components/schemas/TestTriggerResources\"\n        resourceSelector:\n          $ref: \"#/components/schemas/TestTriggerSelector\"\n        event:\n          type: string\n          description: listen for event for selected resource\n          example: modified\n        action:\n          $ref: \"#/components/schemas/TestTriggerActions\"\n        execution:\n          $ref: \"#/components/schemas/TestTriggerExecutions\"\n        testSelector:\n          $ref: \"#/components/schemas/TestTriggerSelector\"\n\n    TestTriggerSelector:\n      type: object\n      properties:\n        name:\n          type: string\n          description: kubernetes resource name selector\n          example: nginx\n        namespace:\n          type: string\n          description: resource namespace\n          example: testkube\n        labelSelector:\n          $ref: \"https://raw.githubusercontent.com/garethr/kubernetes-json-schema/master/v1.7.8/_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n          description: label selector for Kubernetes resources\n\n    TestTriggerResources:\n      description: supported kubernetes resources for test triggers\n      type: string\n      enum:\n        - pod\n        - deployment\n        - statefulset\n        - daemonset\n        - service\n        - ingress\n        - event\n\n    TestTriggerExecutions:\n      description: supported test resources for test triggers\n      type: string\n      enum:\n        - test\n        - testsuite\n\n    TestTriggerActions:\n      description: supported actions for test triggers\n      type: string\n      enum:\n        - run\n\n    TestTriggerKeyMap:\n      type: object\n      required:\n        - resources\n        - actions\n        - executions\n        - events\n      properties:\n        resources:\n          type: array\n          items:\n            type: string\n          description: list of supported values for resources\n          example: [\"pod\", \"deployment\", \"statefulset\", \"daemonset\", \"service\", \"ingress\", \"event\"]\n        actions:\n          type: array\n          items:\n            type: string\n          description: list of supported values for resources\n          example: [\"run\"]\n        executions:\n          type: array\n          items:\n            type: string\n          description: list of supported values for resources\n          example: [\"test\", \"testsuite\"]\n        events:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n          description: mapping between resources and supported events\n          example: { \"pod\": [\"created\", \"modified\", \"deleted\"], \"deployment\": [\"created\", \"modified\", \"deleted\"] }\n\n    #\n    # Errors\n    #\n\n    Problem:\n      description: problem response in case of error\n      type: object\n      properties:\n        type:\n          type: string\n          description: Type contains a URI that identifies the problem type.\n          example: https://kubeshop.io/testkube/problems/invalidtestname\n        title:\n          type: string\n          description: Title is a short, human-readable summary of the problem type. This title SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.\n          example: Invalid test name\n        status:\n          type: integer\n          description: HTTP status code for this occurrence of the problem.\n          example: 500\n        detail:\n          type: string\n          description: A human-readable explanation specific to this occurrence of the problem.\n          example: Your test name can't contain forbidden characters like \"}}}\" passed\n        instance:\n          type: string\n          description: A URI that identifies the specific occurrence of the problem. This URI may or may not yield further information if de-referenced.\n          example: http://10.23.23.123:8088/tests\n\n  #\n  # Parameters\n  #\n\n  parameters:\n    TestName:\n      in: query\n      name: test\n      schema:\n        type: string\n        default: \"\"\n      description: test namespaced name to filter\n      required: false\n    Type:\n      in: query\n      name: type\n      schema:\n        type: string\n        default: \"\"\n      description: object type\n      required: false\n    TextSearch:\n      in: query\n      name: textSearch\n      schema:\n        type: string\n        default: \"\"\n      description: text to search in name and test name\n      required: false\n    ID:\n      in: path\n      name: id\n      schema:\n        type: string\n      required: true\n      description: unique id of the object\n    executionID:\n      in: path\n      name: executionID\n      schema:\n        type: string\n      required: true\n      description: unique id of the object execution\n    Filename:\n      in: path\n      name: filename\n      schema:\n        type: string\n      required: true\n      description: filename of the object usually used for artifacts\n    LastNDays:\n      in: query\n      name: last\n      schema:\n        type: integer\n        default: 7\n      description: last N days to show\n      required: false\n    Limit:\n      in: query\n      name: limit\n      schema:\n        type: integer\n        default: 7\n      description: limit records count same as pageSize\n      required: false\n    PageSize:\n      in: query\n      name: pageSize\n      schema:\n        type: integer\n        default: 100\n      description: the number of executions to get, setting to 0 will return only totals\n      required: false\n    PageIndex:\n      in: query\n      name: page\n      schema:\n        type: integer\n        default: 0\n      description: the page index to start at\n      required: false\n    StartDateFilter:\n      in: query\n      name: startDate\n      schema:\n        type: string\n        format: date\n      required: false\n      description: startDate for filtering in ISO-8601 format, i.e. \"yyyy-mm-dd\"\n    EndDateFilter:\n      in: query\n      name: endDate\n      schema:\n        type: string\n        format: date\n      required: false\n      description: endDate for filtering\n    TestExecutionsStatusFilter:\n      in: query\n      name: status\n      schema:\n        $ref: \"#/components/schemas/TestSuiteExecutionStatus\"\n      description: optional status filter containing multiple values separated by comma\n      required: false\n    ExecutionsStatusFilter:\n      in: query\n      name: status\n      schema:\n        $ref: \"#/components/schemas/ExecutionStatus\"\n      description: optional status filter containing multiple values separated by comma\n      required: false\n    Selector:\n      in: query\n      name: selector\n      schema:\n        type: string\n        description: Labels to filter by\n    ExecutionSelector:\n      in: query\n      name: executionSelector\n      schema:\n        type: string\n        description: Execution Labels to add to executions\n    ConcurrencyLevel:\n      in: query\n      name: concurrency\n      schema:\n        type: integer\n        default: 10\n    Namespace:\n      in: query\n      name: namespace\n      schema:\n        type: string\n        description: Namespace of the object\n    Name:\n      in: query\n      name: name\n      schema:\n        type: string\n        description: Name of the object\n",
			"canonicalURL": "/github.com/kubeshop/testkube@5690562cff8dff2728a453eee068bfc66137543b/-/blob/api/v1/testkube.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/kubeshop/testkube/blob/5690562cff8dff2728a453eee068bfc66137543b/api/v1/testkube.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!bool `true` into []string"
}