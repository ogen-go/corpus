{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/emotiq/emotiq"
		},
		"file": {
			"name": "emotiq-openapi.yaml",
			"size": 0,
			"path": "src/model/network/emotiq-openapi.yaml",
			"byteSize": 12797,
			"content": "#\n# The REST API contract of request and response messages\n#\nopenapi:  3.0.1\n$id:   \"http://api.emotiq.ch/rest/emotiq-openapi.yaml\"\ninfo:\n  title: Emotiq Node interface\n  version: 0.1.0\ntags:\n  - name: consensus\n  - name: wallet\n  - name: transaction\n  - name: dictionary\n  - name: support\n  - name: node\npaths:\n# MUST implement  \n  /consensus/:\n    get:\n      summary: \u003e-\n        Returns information about current chain consensus with the connected\n        node\n      tags:\n        - consensus\n      responses:\n        '200':\n          description: The consensus information for the connected node\n          content:\n            application/json:\n              schema:\n                $ref: 'responses.yaml#/schemas/consensus/'\n# MUST implement:  default wallet is 'My Wallet', but it may be changed\n  /wallet/:\n    get:\n      summary: Enumerate the names of existing wallets\n      tags:\n        - wallet\n      responses:\n        '200':\n          description: The enumeration of the names of existing wallets\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /wallet/{name}/create:\n    post:\n      tags:\n        - wallet\n      summary: Create wallet\n      parameters:\n        - name: name\n          in: path\n          description: |-\n            Name of wallet to create\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: Wallet created \n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  address:\n                    description: |-\n                      Public address of the newly created wallet\n                    type: string\n        '409':\n          description: Wallet already exists\n  /wallet/{name}:\n    tags:\n      - wallet\n    get:\n      description: Summarize information about a wallet\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Information about the wallet\n          content:\n            application/json:\n              schema:\n                $ref: 'messages.yaml#/schemas/wallet/default/response'\n    delete:\n      summary: Delete wallet\n      parameters:\n        - name: name\n          in: path\n          description: The name of the wallet to delete\n          schema:\n            type: string\n      responses:\n        '200':\n          description: \n            The named wallet was successfully deleted\n        '404':\n          description: \n            The named wallet does not exist\n# MUST implement            \n  /wallet/{name}/rename:\n    post:\n      summary: Change the wallet name\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: New wallet name\n                  type: string\n      response:\n        200:\n          description: Wallet successfully renamed\n        400:\n          description: Invalid wallet name\n# MUST implement          \n  /wallet/{name}/password:\n    get:\n      summary: Get the wallet password; empty string if no passphase set\n      parameters:\n        - name: name\n          in: path\n          required: true\n          type: string\n      response:\n        content:\n          application/json:\n            type: object\n            properties:\n              password:\n                type: string\n    put:\n      summary: Set the wallet password\n      parameters:\n        - name: name\n          in: path\n          required: true\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                password:\n                  type: string\n# MUST implement          \n  /wallet/{name}/phrase:\n    get:\n      summary: Get the wallet recovery passphrase\n      parameters:\n        - name: name\n          in: path\n          required: true\n          type: string\n# MUST implement          \n  '/wallet/{name}/address/{address}/transaction/':\n    get:\n      tags:\n        - wallet\n      summary: Enumerate wallet transactions\n      parameters:\n        - name: name\n          in: path\n          required: true\n          type: string\n        - name: address\n          in: path\n          required: true\n          type: integer\n      responses:\n        '200':\n          description: An enumeration of all transaction ids for wallet\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  totalTransactions:\n                    type: integer\n                  transactionIds:\n                    type: array\n                    items:\n                      type: string  \n  '/wallet/{name}/address/{address}/transaction/{id}':\n    get:\n      tags:\n        - wallet\n      parameters:\n        - name: name\n          in: path\n          required: true\n          type: string\n        - name: address\n          in: path\n          required: true\n          type: integer\n        - name: id\n          in: id\n          required: true\n          type: integer\n      responses:\n        '200':\n          description: Information about a given transaction\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/transaction'\n        '404':\n          description: No such transaction\n  '/wallet/{name}/transaction/':\n      get:\n        tags:\n          - wallet\n        parameters:\n          - name: name\n            in: path\n            required: true\n            type: string\n        responses:\n          '200':\n            description: Information about all transactions for wallet\n            content:\n              application/json:\n                schema:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/transaction'\n\n  '/wallet/{name}/address':\n    post:\n      tags:\n        - wallet\n      summary: generate new address\n      operationId: generateAddress\n      produces:\n        - application/json\n      parameters:\n        - name: name\n          in: path\n          required: true\n          type: string\n      responses:\n        '201':\n          description: A new address has been created\n          schema:\n            type: object\n            properties:\n              address:\n                type: string\n\n# MUST implement\n  '/wallet/{name}/address/':\n    get:\n      tags:\n        - wallet\n      summary: Get all addresses associated with a wallet\n      parameters:\n        - name: name\n          in: path\n          required: true\n          type: string\n      responses:\n        '200':\n          description: Array of addresses\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  '/wallet/{name}/address/{address}':\n    get:\n      tags:\n        - wallet\n      summary: Get information about an address within a wallet\n      operationId: getAddressStatus\n      produces:\n        - application/json\n      parameters:\n        - name: name\n          description: Name of wallet \n          in: path\n          required: true\n          type: string\n        - name: address\n          description: Address for information in wallet\n          in: path\n          required: true\n          type: string\n      responses:\n        '200':\n          description: Success\n          schema:\n            type: object\n            properties:\n              status:\n                description: Whether this address has ever been used in the blockchain\n                type: string\n                enum:\n                  - USED\n                  - UNUSED\n              amount:\n                type: integer\n  '/wallet/{name}/address/all':\n      get:\n        tags:\n          - wallet\n        summary: Get information about all addresses associated with a wallet\n        parameters:\n          - name: name\n            description: Name of wallet\n            in: path\n            required: true\n            type: string\n        responses:\n          '200':\n            description: Array of addreses with information\n            schema:\n              type: array\n              items:\n                type: object\n                properties:\n                  status:\n                    description: Whether this address has ever been used in the blockchain\n                    type: string\n                    enum:\n                      - USED\n                      - UNUSED\n                  amount:\n                    type: number\n                    format: double\n  '/wallet/{name}/address/{address}/transaction/':\n    post:\n      tags:\n        - transaction\n      summary: Submit payments to batch into transactions in blockchain\n      operationId: createTransaction\n      requestBody:\n        description: Parameters for transaction\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: 'messages.yaml#/schemas/transactions/submit'\n      parameters:\n        - name: name\n          in: path\n          required: true\n          type: string\n        - in: address\n          name: body\n          required: true\n          type: string\n      responses:\n        '201':\n          description: The transaction has been succesfully submitted\n          schema:\n            items:\n              $ref: '#/components/schema/transaction'\n  /wallet/{name}/restore:\n    post:\n      summary: Restore wallet from recovery phrase\n      tags:\n        - wallet\n      requestBody:\n        description: Phrase to be used to restore wallet\n        required: true\n        content:\n            application/json:\n              schema:\n                type: array \n                items:\n                  word:\n                    type: string\n      responses:\n        '200':\n          content:\n            description: Success\n            application/json:\n              schema:\n                type: object\n                properties:\n                  address:\n                    type: string\n        '409':\n          description: Wallet already exists\n  /dictionary/:\n    get:\n      tags:\n        - dictionary\n      summary: Return available recovery phrase dictionaries by language\n      produces:\n        - application/json\n      responses:\n        '200':\n          schema:\n            type: array\n            items:\n              type: string\n  '/dictionary/{language}':\n    get:\n      tags:\n        - dictionary\n      operationId: getDictionary\n      parameters:\n        - name: language\n          in: path\n          required: true\n          type: string\n      responses:\n        '200':\n          content:\n            description: Return the 2048 word dictionary\n            application/json:\n              type: array\n              items:\n                type: string\n# Is this still necessary?                \n  '/support':\n    post:\n      summary: Support request\n      tags:\n        - support\n      requestBody:\n        description: Request content\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                subject:\n                  type: string\n                problem:\n                  type: string\n                logs:\n                  type: boolean\n                  description: does the user want to attach logs                  \n      responses:\n        '204':\n          description: Success\n  '/simulator/':\n    post:\n      summary: Run a new instance of the simulator\n      # For now an empty POST request. TODO simulator can be configured via parameters\n      responses:\n        '201':\n          description: URI that may be queried for simulator results\n          content:\n            text/plain:\n              schema:\n                type: string\n        '409':\n          description: An instance of the simulator has already been created\n  '/simulator/{id}':\n    get:\n      summary: Get the textual status of the current simulator\n      responses:\n        '200':\n          description: Textual output of simulator (may be empty)\n          content:\n            text/plain:\n              schema:\n                type: string\n    delete:\n      summary: Delete all traces of the simulator (NOT COMPLETELY WORKING)\n      responses:\n        '204':\n          description: Simulator wind down routines invoked\n  '/node/tracker':\n    get:\n      summary: Get the current state of the node according to the tracker\n          \n",
			"canonicalURL": "/github.com/emotiq/emotiq@9af78023f670777895a3dac29a2bbe98e19b6249/-/blob/src/model/network/emotiq-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/emotiq/emotiq/blob/9af78023f670777895a3dac29a2bbe98e19b6249/src/model/network/emotiq-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 342: mapping key \"/wallet/{name}/address/{address}/transaction/\" already defined at line 166"
}