{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rapi-doc/RapiDoc"
		},
		"file": {
			"name": "slots.yaml",
			"size": 0,
			"path": "docs/specs/slots.yaml",
			"byteSize": 3963,
			"content": "openapi: 3.0.2\ninfo:\n  title: HTML Injection\n  version: \"1.0\"\nservers:\n  - url: https://reqres.in/api/\n  - url: https://dummy/server/\nsecurity:\n  - api_key1: []\npaths:\n  /users:\n    get:\n      tags:\n        - user\n      description: List of users (paginated)\n      parameters:\n        - name: page\n          in: query\n          schema:\n            type: integer\n            example: 2\n        - name: delay\n          in: query\n          description: for simulating response delay. Do not provide any value for page parameter(0 indicates no delay)\n          examples:\n            - '0'\n            - 3\n          schema:\n            type: integer\n            minimum: 0\n            maximum: 10\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Description of **User** object\n                properties:\n                  page:\n                    description: Current Page number\n                    type: integer\n                  per_page:\n                    description: Number of records per page\n                    type: integer\n                  total:\n                    description: Total number of records\n                    type: integer\n                  total_pages:\n                    type: integer\n                  data:\n                    type: array\n                    description: List of users\n                    items:\n                      $ref: '#/components/schemas/user'\n                  support:\n                    $ref: '#/components/schemas/support'\n    post:\n      tags:\n        - Create User\n      summary: Create a user\n      description: Create a user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/userInput\"\n      responses:\n        201:\n          description: User creation response\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/userInput'\n                  - $ref: '#/components/schemas/createUserResponse'\n  /users/{userId}:\n    get:\n      tags:\n        - user\n      description: Get a Single User\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: integer\n            example: 3\n          required: true\n          description: Numeric ID of the user to get\n      responses:\n        200:\n          description: Response when a user is found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/user'\n                  support:\n                    $ref: '#/components/schemas/support'\n        404:\n          description: User Not found\n\ncomponents:\n  securitySchemes:\n    api_key1:\n      type: apiKey\n      name: Authorization\n      in: header\n  schemas:\n    user:\n      type: object\n      properties:\n        id:\n          description: User ID\n          type: integer\n        email:\n          description: User Email\n          type: string\n        first_name:\n          description: First Name\n          type: string\n        last_name:\n          description: Last Name\n          type: string\n        avatar:\n          description: Avatar URL\n          type: string\n    support:\n      type: object\n      properties:\n        url:\n          description: Support URL\n          type: string\n        text:\n          description: Support URL - Description\n          type: string\n    userInput:\n      type: object\n      properties:\n        name:\n          description: User Name\n          type: string\n        job:\n          description: Job\n          type: string\n    createUserResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n        createdAt:\n          type: string\n\n"
		}
	},
	"Error": "unmarshal: json: line 1:1179: json: cannot unmarshal array into Go struct field Parameter.paths.get.parameters.examples of type map[string]*ogen.Example"
}