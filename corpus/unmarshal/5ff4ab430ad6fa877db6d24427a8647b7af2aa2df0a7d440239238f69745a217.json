{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/influxdata/openapi"
		},
		"file": {
			"name": "common.yml",
			"size": 0,
			"path": "contracts/common.yml",
			"byteSize": 298195,
			"content": "openapi: 3.0.0\ninfo:\n  title: Influx Common API\n  version: 2.0.1\nservers:\n  - url: /api/v2\npaths:\n  /signin:\n    post:\n      operationId: PostSignin\n      summary: Create a user session.\n      description: 'Authenticates ***Basic Auth*** credentials for a user. If successful, creates a new UI session for the user.'\n      tags:\n        - Signin\n      security:\n        - BasicAuthentication: []\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '204':\n          description: Success. User authenticated.\n        '401':\n          description: Unauthorized access.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: User account is disabled.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unsuccessful authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /signout:\n    post:\n      operationId: PostSignout\n      summary: Expire the current UI session\n      tags:\n        - Signout\n      description: Expires the current UI session for the user.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '204':\n          description: Session successfully expired\n        '401':\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unsuccessful session expiry\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /ping:\n    get:\n      operationId: GetPing\n      summary: Checks the status of InfluxDB instance and version of InfluxDB.\n      servers:\n        - url: ''\n      tags:\n        - Ping\n      responses:\n        '204':\n          description: OK\n          headers:\n            X-Influxdb-Build:\n              schema:\n                type: string\n              description: The type of InfluxDB build.\n            X-Influxdb-Version:\n              schema:\n                type: integer\n              description: The version of InfluxDB.\n    head:\n      operationId: HeadPing\n      summary: Checks the status of InfluxDB instance and version of InfluxDB.\n      servers:\n        - url: ''\n      tags:\n        - Ping\n      responses:\n        '204':\n          description: OK\n          headers:\n            X-Influxdb-Build:\n              schema:\n                type: string\n              description: The type of InfluxDB build.\n            X-Influxdb-Version:\n              schema:\n                type: integer\n              description: The version of InfluxDB.\n  /:\n    get:\n      operationId: GetRoutes\n      summary: List all top level routes\n      tags:\n        - Routes\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        default:\n          description: All routes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Routes'\n  /dbrps:\n    get:\n      operationId: GetDBRPs\n      tags:\n        - DBRPs\n      summary: List database retention policy mappings\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: orgID\n          description: Specifies the organization ID to filter on\n          schema:\n            type: string\n        - in: query\n          name: org\n          description: Specifies the organization name to filter on\n          schema:\n            type: string\n        - in: query\n          name: id\n          description: Specifies the mapping ID to filter on\n          schema:\n            type: string\n        - in: query\n          name: bucketID\n          description: Specifies the bucket ID to filter on\n          schema:\n            type: string\n        - in: query\n          name: default\n          description: Specifies filtering on default\n          schema:\n            type: boolean\n        - in: query\n          name: db\n          description: Specifies the database to filter on\n          schema:\n            type: string\n        - in: query\n          name: rp\n          description: Specifies the retention policy to filter on\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success. Returns a list of database retention policy mappings.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DBRPs'\n        '400':\n          description: Bad request. The request has one or more invalid parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostDBRP\n      tags:\n        - DBRPs\n      summary: Add a database retention policy mapping\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: The database retention policy mapping to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DBRPCreate'\n      responses:\n        '201':\n          description: Created. Returns the created database retention policy mapping.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DBRP'\n        '400':\n          description: Bad request. The mapping in the request has one or more invalid IDs.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dbrps/{dbrpID}':\n    get:\n      operationId: GetDBRPsID\n      tags:\n        - DBRPs\n      summary: Retrieve a database retention policy mapping\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: orgID\n          description: Specifies the organization ID of the mapping\n          schema:\n            type: string\n        - in: query\n          name: org\n          description: Specifies the organization name of the mapping\n          schema:\n            type: string\n        - in: path\n          name: dbrpID\n          schema:\n            type: string\n          required: true\n          description: The database retention policy mapping ID\n      responses:\n        '200':\n          description: The database retention policy requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DBRPGet'\n        '400':\n          description: if any of the IDs passed is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchDBRPID\n      tags:\n        - DBRPs\n      summary: Update a database retention policy mapping\n      requestBody:\n        description: Database retention policy update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DBRPUpdate'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: orgID\n          description: Specifies the organization ID of the mapping\n          schema:\n            type: string\n        - in: query\n          name: org\n          description: Specifies the organization name of the mapping\n          schema:\n            type: string\n        - in: path\n          name: dbrpID\n          schema:\n            type: string\n          required: true\n          description: The database retention policy mapping.\n      responses:\n        '200':\n          description: An updated mapping\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DBRPGet'\n        '400':\n          description: if any of the IDs passed is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The mapping was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteDBRPID\n      tags:\n        - DBRPs\n      summary: Delete a database retention policy\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: orgID\n          description: Specifies the organization ID of the mapping\n          schema:\n            type: string\n        - in: query\n          name: org\n          description: Specifies the organization name of the mapping\n          schema:\n            type: string\n        - in: path\n          name: dbrpID\n          schema:\n            type: string\n          required: true\n          description: The database retention policy mapping\n      responses:\n        '204':\n          description: Delete has been accepted\n        '400':\n          description: if any of the IDs passed is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /telegraf/plugins:\n    get:\n      operationId: GetTelegrafPlugins\n      tags:\n        - Telegraf Plugins\n      summary: List all Telegraf plugins\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: type\n          description: The type of plugin desired.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of Telegraf plugins.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TelegrafPlugins'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /telegrafs:\n    get:\n      operationId: GetTelegrafs\n      tags:\n        - Telegrafs\n      summary: List all Telegraf configurations\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: orgID\n          description: The organization ID the Telegraf config belongs to.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of Telegraf configurations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Telegrafs'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTelegrafs\n      tags:\n        - Telegrafs\n      summary: Create a Telegraf configuration\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Telegraf configuration to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TelegrafPluginRequest'\n      responses:\n        '201':\n          description: Telegraf configuration created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Telegraf'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}':\n    get:\n      operationId: GetTelegrafsID\n      tags:\n        - Telegrafs\n      summary: Retrieve a Telegraf configuration\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf configuration ID.\n        - in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n            default: application/toml\n            enum:\n              - application/toml\n              - application/json\n              - application/octet-stream\n      responses:\n        '200':\n          description: Telegraf configuration details\n          content:\n            application/toml:\n              example: |-\n                [agent]\n                interval = \"10s\"\n              schema:\n                type: string\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Telegraf'\n            application/octet-stream:\n              example: |-\n                [agent]\n                interval = \"10s\"\n              schema:\n                type: string\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      operationId: PutTelegrafsID\n      tags:\n        - Telegrafs\n      summary: Update a Telegraf configuration\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      requestBody:\n        description: Telegraf configuration update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TelegrafPluginRequest'\n      responses:\n        '200':\n          description: An updated Telegraf configurations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Telegraf'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteTelegrafsID\n      tags:\n        - Telegrafs\n      summary: Delete a Telegraf configuration\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf configuration ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}/labels':\n    get:\n      operationId: GetTelegrafsIDLabels\n      tags:\n        - Telegrafs\n      summary: List all labels for a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '200':\n          description: A list of all labels for a Telegraf config\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTelegrafsIDLabels\n      tags:\n        - Telegrafs\n      summary: Add a label to a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: The label added to the Telegraf config\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}/labels/{labelID}':\n    delete:\n      operationId: DeleteTelegrafsIDLabelsID\n      tags:\n        - Telegrafs\n      summary: Delete a label from a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The label ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Telegraf config not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}/members':\n    get:\n      operationId: GetTelegrafsIDMembers\n      tags:\n        - Telegrafs\n      summary: List all users with member privileges for a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '200':\n          description: A list of Telegraf config members\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTelegrafsIDMembers\n      tags:\n        - Telegrafs\n      summary: Add a member to a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      requestBody:\n        description: User to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Member added to Telegraf config\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}/members/{userID}':\n    delete:\n      operationId: DeleteTelegrafsIDMembersID\n      tags:\n        - Telegrafs\n      summary: Remove a member from a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the member to remove.\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}/owners':\n    get:\n      operationId: GetTelegrafsIDOwners\n      tags:\n        - Telegrafs\n      summary: List all owners of a Telegraf configuration\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf configuration ID.\n      responses:\n        '200':\n          description: Returns Telegraf configuration owners as a ResourceOwners list\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTelegrafsIDOwners\n      tags:\n        - Telegrafs\n      summary: Add an owner to a Telegraf configuration\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf configuration ID.\n      requestBody:\n        description: User to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Telegraf configuration owner was added. Returns a ResourceOwner that references the User.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/telegrafs/{telegrafID}/owners/{userID}':\n    delete:\n      operationId: DeleteTelegrafsIDOwnersID\n      tags:\n        - Telegrafs\n      summary: Remove an owner from a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the owner to remove.\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/variables/{variableID}/labels':\n    get:\n      operationId: GetVariablesIDLabels\n      tags:\n        - Variables\n      summary: List all labels for a variable\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: variableID\n          schema:\n            type: string\n          required: true\n          description: The variable ID.\n      responses:\n        '200':\n          description: A list of all labels for a variable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostVariablesIDLabels\n      tags:\n        - Variables\n      summary: Add a label to a variable\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: variableID\n          schema:\n            type: string\n          required: true\n          description: The variable ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: The newly added label\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/variables/{variableID}/labels/{labelID}':\n    delete:\n      operationId: DeleteVariablesIDLabelsID\n      tags:\n        - Variables\n      summary: Delete a label from a variable\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: variableID\n          schema:\n            type: string\n          required: true\n          description: The variable ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The label ID to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Variable not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /write:\n    post:\n      operationId: PostWrite\n      tags:\n        - Write\n      summary: Write data\n      description: |\n        Writes data to a bucket.\n\n        To write data into InfluxDB, you need the following:\n\n        - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._\n        - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for\n         instructions on viewing your bucket ID._\n        - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)\n         for instructions on viewing your API token._\n        - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_.\n        - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.\n\n        InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.\n\n        For more information and examples, see the following:\n        - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api).\n        - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).\n      requestBody:\n        description: Data in line protocol format.\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n              format: byte\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: header\n          name: Content-Encoding\n          description: |\n            The value tells InfluxDB what compression is applied to the line protocol in the request payload.\n            To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.\n          schema:\n            type: string\n            description: 'The content coding. Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.'\n            default: identity\n            enum:\n              - gzip\n              - identity\n        - in: header\n          name: Content-Type\n          description: The header value indicates the format of the data in the request body.\n          schema:\n            type: string\n            description: |\n              `text/plain` specifies line protocol. `UTF-8` is the default character set.\n            default: text/plain; charset=utf-8\n            enum:\n              - text/plain\n              - text/plain; charset=utf-8\n              - application/vnd.influx.arrow\n        - in: header\n          name: Content-Length\n          description: 'The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database''s `max body` configuration option, the server responds with status code `413`.'\n          schema:\n            type: integer\n            description: The length in decimal number of octets.\n        - in: header\n          name: Accept\n          description: The header value specifies the response format.\n          schema:\n            type: string\n            description: The response format for errors.\n            default: application/json\n            enum:\n              - application/json\n        - in: query\n          name: org\n          description: 'The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both `orgID` and `org` parameters, `org` takes precedence.'\n          required: true\n          schema:\n            type: string\n            description: Organization name or ID.\n        - in: query\n          name: orgID\n          description: 'The parameter value specifies the ID of the destination organization for writes. If both `orgID` and `org` are specified, `org` takes precedence.'\n          schema:\n            type: string\n        - in: query\n          name: bucket\n          description: The destination bucket for writes.\n          required: true\n          schema:\n            type: string\n            description: All points within batch are written to this bucket.\n        - in: query\n          name: precision\n          description: The precision for the unix timestamps within the body line-protocol.\n          schema:\n            $ref: '#/components/schemas/WritePrecision'\n      responses:\n        '204':\n          description: 'InfluxDB validated the request data format and accepted the data for writing to the bucket. `204` doesn''t indicate a successful write operation since writes are asynchronous. See [how to check for write errors](https://docs.influxdata.com/influxdb/v2.1/write-data/troubleshoot/).'\n        '400':\n          description: Bad request. The line protocol data in the request is malformed. The response body contains the first malformed line in the data. InfluxDB rejected the batch and did not write any data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LineProtocolError'\n              examples:\n                measurementSchemaFieldTypeConflict:\n                  summary: Field type conflict thrown by an explicit bucket schema\n                  value:\n                    code: invalid\n                    message: 'partial write error (2 written): unable to parse ''air_sensor,service=S1,sensor=L1 temperature=\"90.5\",humidity=70.0 1632850122'': schema: field type for field \"temperature\" not permitted by schema; got String but expected Float'\n        '401':\n          description: |\n            Unauthorized. The error may indicate one of the following:\n              * The `Authorization: Token` header is missing or malformed.\n              * The API token value is missing from the header.\n              * The token does not have sufficient permissions to write to this organization and bucket.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                tokenNotAuthorized:\n                  summary: Token is not authorized to access the organization or resource\n                  value:\n                    code: unauthorized\n                    message: unauthorized access\n        '404':\n          description: 'Not found. A requested resource was not found. The response body contains the requested resource type, e.g. `organization name` or `bucket`, and name.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                resource-not-found:\n                  summary: Not found error\n                  value:\n                    code: not found\n                    message: bucket \"air_sensor\" not found\n        '413':\n          description: |\n            The request payload is too large. InfluxDB rejected the batch and did not write any data.\n            #### InfluxDB Cloud:\n             - returns this error if the payload exceeds the 50MB size limit.\n             - returns `Content-Type: text/html` for this error.\n\n            #### InfluxDB OSS:\n             - returns this error only if the [Go (golang) `ioutil.ReadAll()`](https://pkg.go.dev/io/ioutil#ReadAll) function raises an error.\n             - returns `Content-Type: application/json` for this error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LineProtocolLengthError'\n              examples:\n                dataExceedsSizeLimitOSS:\n                  summary: InfluxDB OSS response\n                  value: |\n                    {\"code\":\"request too large\",\"message\":\"unable to read data: points batch is too large\"}\n            text/html:\n              schema:\n                type: string\n              examples:\n                dataExceedsSizeLimit:\n                  summary: InfluxDB Cloud response\n                  value: |\n                    \u003chtml\u003e\n                      \u003chead\u003e\u003ctitle\u003e413 Request Entity Too Large\u003c/title\u003e\u003c/head\u003e\n                      \u003cbody\u003e\n                        \u003ccenter\u003e\u003ch1\u003e413 Request Entity Too Large\u003c/h1\u003e\u003c/center\u003e\n                        \u003chr\u003e\n                        \u003ccenter\u003enginx\u003c/center\u003e\n                      \u003c/body\u003e\n                    \u003c/html\u003e\n        '429':\n          description: InfluxDB Cloud only. The token is temporarily over quota. The Retry-After header describes when to try the write again.\n          headers:\n            Retry-After:\n              description: A non-negative decimal integer indicating the seconds to delay after the response is received.\n              schema:\n                type: integer\n                format: int32\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                internalError:\n                  summary: Internal error example\n                  value:\n                    code: internal error\n        '503':\n          description: The server is temporarily unavailable to accept writes. The `Retry-After` header describes when to try the write again.\n          headers:\n            Retry-After:\n              description: A non-negative decimal integer indicating the seconds to delay after the response is received.\n              schema:\n                type: integer\n                format: int32\n        default:\n          $ref: '#/components/responses/ServerError'\n  /delete:\n    post:\n      operationId: PostDelete\n      tags:\n        - Delete\n      summary: Delete data\n      requestBody:\n        description: Deletes data from an InfluxDB bucket.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeletePredicateRequest'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: org\n          description: Specifies the organization to delete data from.\n          schema:\n            type: string\n            description: Only points from this organization are deleted.\n        - in: query\n          name: bucket\n          description: Specifies the bucket to delete data from.\n          schema:\n            type: string\n            description: Only points from this bucket are deleted.\n        - in: query\n          name: orgID\n          description: Specifies the organization ID of the resource.\n          schema:\n            type: string\n        - in: query\n          name: bucketID\n          description: Specifies the bucket ID to delete data from.\n          schema:\n            type: string\n            description: Only points from this bucket ID are deleted.\n      responses:\n        '204':\n          description: delete has been accepted\n        '400':\n          description: Invalid request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: no token was sent or does not have sufficient permissions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: the bucket or organization is not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /labels:\n    post:\n      operationId: PostLabels\n      tags:\n        - Labels\n      summary: Create a label\n      requestBody:\n        description: Label to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelCreateRequest'\n      responses:\n        '201':\n          description: Added label\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      operationId: GetLabels\n      tags:\n        - Labels\n      summary: List all labels\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: orgID\n          description: The organization ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of labels\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/labels/{labelID}':\n    get:\n      operationId: GetLabelsID\n      tags:\n        - Labels\n      summary: Retrieve a label\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to update.\n      responses:\n        '200':\n          description: A label\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchLabelsID\n      tags:\n        - Labels\n      summary: Update a label\n      requestBody:\n        description: Label update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelUpdate'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to update.\n      responses:\n        '200':\n          description: Updated label\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        '404':\n          description: Label not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteLabelsID\n      tags:\n        - Labels\n      summary: Delete a label\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Label not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}':\n    get:\n      operationId: GetDashboardsID\n      tags:\n        - Dashboards\n      summary: Retrieve a Dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n        - in: query\n          name: include\n          required: false\n          schema:\n            type: string\n            enum:\n              - properties\n          description: Includes the cell view properties in the response if set to `properties`\n      responses:\n        '200':\n          description: Retrieve a single dashboard\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Dashboard'\n                  - $ref: '#/components/schemas/DashboardWithViewProperties'\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchDashboardsID\n      tags:\n        - Dashboards\n      summary: Update a dashboard\n      requestBody:\n        description: Patching of a dashboard\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: PatchDashboardRequest\n              properties:\n                name:\n                  description: 'optional, when provided will replace the name'\n                  type: string\n                description:\n                  description: 'optional, when provided will replace the description'\n                  type: string\n                cells:\n                  description: 'optional, when provided will replace all existing cells with the cells provided'\n                  $ref: '#/components/schemas/CellWithViewProperties'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n      responses:\n        '200':\n          description: Updated dashboard\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteDashboardsID\n      tags:\n        - Dashboards\n      summary: Delete a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/cells':\n    put:\n      operationId: PutDashboardsIDCells\n      tags:\n        - Cells\n        - Dashboards\n      summary: Replace cells in a dashboard\n      description: Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Cells'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n      responses:\n        '201':\n          description: Replaced dashboard cells\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostDashboardsIDCells\n      tags:\n        - Cells\n        - Dashboards\n      summary: Create a dashboard cell\n      requestBody:\n        description: Cell that will be added\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCell'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n      responses:\n        '201':\n          description: Cell successfully added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cell'\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/cells/{cellID}':\n    patch:\n      operationId: PatchDashboardsIDCellsID\n      tags:\n        - Cells\n        - Dashboards\n      summary: Update the non-positional information related to a cell\n      description: Updates the non positional information related to a cell. Updates to a single cell's positional data could cause grid conflicts.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CellUpdate'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: The ID of the cell to update.\n      responses:\n        '200':\n          description: Updated dashboard cell\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cell'\n        '404':\n          description: Cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteDashboardsIDCellsID\n      tags:\n        - Cells\n        - Dashboards\n      summary: Delete a dashboard cell\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to delete.\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: The ID of the cell to delete.\n      responses:\n        '204':\n          description: Cell successfully deleted\n        '404':\n          description: Cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/cells/{cellID}/view':\n    get:\n      operationId: GetDashboardsIDCellsIDView\n      tags:\n        - Cells\n        - Dashboards\n        - Views\n      summary: Retrieve the view for a cell\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: The cell ID.\n      responses:\n        '200':\n          description: A dashboard cells view\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/View'\n        '404':\n          description: Cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchDashboardsIDCellsIDView\n      tags:\n        - Cells\n        - Dashboards\n        - Views\n      summary: Update the view for a cell\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/View'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: The ID of the cell to update.\n      responses:\n        '200':\n          description: Updated cell view\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/View'\n        '404':\n          description: Cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/labels':\n    get:\n      operationId: GetDashboardsIDLabels\n      tags:\n        - Dashboards\n      summary: List all labels for a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '200':\n          description: A list of all labels for a dashboard\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostDashboardsIDLabels\n      tags:\n        - Dashboards\n      summary: Add a label to a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: The label added to the dashboard\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/labels/{labelID}':\n    delete:\n      operationId: DeleteDashboardsIDLabelsID\n      tags:\n        - Dashboards\n      summary: Delete a label from a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/members':\n    get:\n      operationId: GetDashboardsIDMembers\n      tags:\n        - Dashboards\n      summary: List all dashboard members\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '200':\n          description: A list of users who have member privileges for a dashboard\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostDashboardsIDMembers\n      tags:\n        - Dashboards\n      summary: Add a member to a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      requestBody:\n        description: User to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Added to dashboard members\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/members/{userID}':\n    delete:\n      operationId: DeleteDashboardsIDMembersID\n      tags:\n        - Dashboards\n      summary: Remove a member from a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the member to remove.\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/owners':\n    get:\n      operationId: GetDashboardsIDOwners\n      tags:\n        - Dashboards\n      summary: List all dashboard owners\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '200':\n          description: A list of users who have owner privileges for a dashboard\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostDashboardsIDOwners\n      tags:\n        - Dashboards\n      summary: Add an owner to a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      requestBody:\n        description: User to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Added to dashboard owners\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/dashboards/{dashboardID}/owners/{userID}':\n    delete:\n      operationId: DeleteDashboardsIDOwnersID\n      tags:\n        - Dashboards\n      summary: Remove an owner from a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the owner to remove.\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /query/ast:\n    post:\n      operationId: PostQueryAst\n      description: Analyzes flux query and generates a query specification.\n      tags:\n        - Query\n      summary: Generate an Abstract Syntax Tree (AST) from a query\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: header\n          name: Content-Type\n          schema:\n            type: string\n            enum:\n              - application/json\n      requestBody:\n        description: Analyzed Flux query to generate abstract syntax tree.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LanguageRequest'\n      responses:\n        '200':\n          description: Abstract syntax tree of the flux query.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ASTResponse'\n        default:\n          description: Any response other than 200 is an internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /query/suggestions:\n    get:\n      operationId: GetQuerySuggestions\n      tags:\n        - Query\n      summary: Retrieve query suggestions\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description: Suggestions for next functions in call chain\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FluxSuggestions'\n        default:\n          description: Any response other than 200 is an internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/query/suggestions/{name}':\n    get:\n      operationId: GetQuerySuggestionsName\n      tags:\n        - Query\n      summary: Retrieve query suggestions for a branching suggestion\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: name\n          schema:\n            type: string\n          required: true\n          description: The name of the branching suggestion.\n      responses:\n        '200':\n          description: Suggestions for next functions in call chain\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FluxSuggestion'\n        default:\n          description: Any response other than 200 is an internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /query/analyze:\n    post:\n      operationId: PostQueryAnalyze\n      tags:\n        - Query\n      summary: Analyze a Flux query\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: header\n          name: Content-Type\n          schema:\n            type: string\n            enum:\n              - application/json\n      requestBody:\n        description: Flux query to analyze\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Query'\n      responses:\n        '200':\n          description: Query analyze results. Errors will be empty if the query is valid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnalyzeQueryResponse'\n        default:\n          description: Internal server error\n          headers:\n            X-Influx-Error:\n              description: Error string describing the problem\n              schema:\n                type: string\n            X-Influx-Reference:\n              description: Reference code unique to the error type\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /query:\n    post:\n      operationId: PostQuery\n      tags:\n        - Query\n      summary: Query data\n      description: |\n        Retrieves data from InfluxDB buckets.\n\n        To query data, you need the following:\n        - **organization** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._\n        - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)\n         for instructions on viewing your API token._\n        - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_.\n        - **Flux query** – _See [Flux](https://docs.influxdata.com/flux/v0.x/)._\n\n        For more information and examples, see [Query with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/query-data/execute-queries/influx-api/).\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: header\n          name: Accept-Encoding\n          description: Indicates the content encoding (usually a compression algorithm) that the client can understand.\n          schema:\n            type: string\n            description: 'The content coding.  Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.'\n            default: identity\n            enum:\n              - gzip\n              - identity\n        - in: header\n          name: Content-Type\n          schema:\n            type: string\n            enum:\n              - application/json\n              - application/vnd.flux\n        - in: query\n          name: org\n          description: 'Specifies the name of the organization executing the query. Takes either the ID or Name. If both `orgID` and `org` are specified, `org` takes precedence.'\n          schema:\n            type: string\n        - in: query\n          name: orgID\n          description: 'Specifies the ID of the organization executing the query. If both `orgID` and `org` are specified, `org` takes precedence.'\n          schema:\n            type: string\n      requestBody:\n        description: Flux query or specification to execute\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Query'\n          application/vnd.flux:\n            schema:\n              type: string\n            example: |\n              from(bucket: \"example-bucket\")\n                  |\u003e range(start: -5m)\n                  |\u003e filter(fn: (r) =\u003e r._measurement == \"example-measurement\")\n      responses:\n        '200':\n          description: Success. Returns query results.\n          headers:\n            Content-Encoding:\n              description: Lists any encodings (usually compression algorithms) that have been applied to the response payload.\n              schema:\n                type: string\n                description: |\n                  The content coding: `gzip` for compressed data or `identity` for unmodified, uncompressed data.\n                default: identity\n                enum:\n                  - gzip\n                  - identity\n            Trace-Id:\n              description: 'The Trace-Id header reports the request''s trace ID, if one was generated.'\n              schema:\n                type: string\n                description: Specifies the request's trace ID.\n          content:\n            text/csv:\n              schema:\n                type: string\n                example: |\n                  result,table,_start,_stop,_time,region,host,_value mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:00Z,east,A,15.43 mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:20Z,east,B,59.25 mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:40Z,east,C,52.62\n            application/vnd.influx.arrow:\n              schema:\n                type: string\n                format: binary\n        '429':\n          description: Token is temporarily over quota. The Retry-After header describes when to try the read again.\n          headers:\n            Retry-After:\n              description: A non-negative decimal integer indicating the seconds to delay after the response is received.\n              schema:\n                type: integer\n                format: int32\n        default:\n          description: Error processing query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /buckets:\n    get:\n      operationId: GetBuckets\n      tags:\n        - Buckets\n      summary: List all buckets\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/After'\n        - in: query\n          name: org\n          description: The name of the organization.\n          schema:\n            type: string\n        - in: query\n          name: orgID\n          description: The organization ID.\n          schema:\n            type: string\n        - in: query\n          name: name\n          description: Only returns buckets with a specific name.\n          schema:\n            type: string\n        - in: query\n          name: id\n          description: Only returns buckets with a specific ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of buckets\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Buckets'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostBuckets\n      tags:\n        - Buckets\n      summary: Create a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Bucket to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostBucketRequest'\n      responses:\n        '201':\n          description: Bucket created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Bucket'\n        '422':\n          description: Request body failed validation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/buckets/{bucketID}':\n    get:\n      operationId: GetBucketsID\n      tags:\n        - Buckets\n      summary: Retrieve a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '200':\n          description: Bucket details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Bucket'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchBucketsID\n      tags:\n        - Buckets\n      summary: Update a bucket\n      requestBody:\n        description: Bucket update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchBucketRequest'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '200':\n          description: An updated bucket\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Bucket'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteBucketsID\n      tags:\n        - Buckets\n      summary: Delete a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The ID of the bucket to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Bucket not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/buckets/{bucketID}/labels':\n    get:\n      operationId: GetBucketsIDLabels\n      tags:\n        - Buckets\n      summary: List all labels for a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '200':\n          description: A list of all labels for a bucket\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostBucketsIDLabels\n      tags:\n        - Buckets\n      summary: Add a label to a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: The newly added label\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/buckets/{bucketID}/labels/{labelID}':\n    delete:\n      operationId: DeleteBucketsIDLabelsID\n      tags:\n        - Buckets\n      summary: Delete a label from a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Bucket not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/buckets/{bucketID}/members':\n    get:\n      operationId: GetBucketsIDMembers\n      tags:\n        - Buckets\n      summary: List all users with member privileges for a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '200':\n          description: A list of bucket members\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostBucketsIDMembers\n      tags:\n        - Buckets\n      summary: Add a member to a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      requestBody:\n        description: User to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Member added to bucket\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/buckets/{bucketID}/members/{userID}':\n    delete:\n      operationId: DeleteBucketsIDMembersID\n      tags:\n        - Buckets\n      summary: Remove a member from a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the member to remove.\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/buckets/{bucketID}/owners':\n    get:\n      operationId: GetBucketsIDOwners\n      tags:\n        - Buckets\n      summary: List all owners of a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '200':\n          description: A list of bucket owners\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostBucketsIDOwners\n      tags:\n        - Buckets\n      summary: Add an owner to a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      requestBody:\n        description: User to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Bucket owner added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/buckets/{bucketID}/owners/{userID}':\n    delete:\n      operationId: DeleteBucketsIDOwnersID\n      tags:\n        - Buckets\n      summary: Remove an owner from a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the owner to remove.\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /orgs:\n    get:\n      operationId: GetOrgs\n      tags:\n        - Organizations\n      summary: List all organizations\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Descending'\n        - in: query\n          name: org\n          schema:\n            type: string\n          description: Filter organizations to a specific organization name.\n        - in: query\n          name: orgID\n          schema:\n            type: string\n          description: Filter organizations to a specific organization ID.\n        - in: query\n          name: userID\n          schema:\n            type: string\n          description: Filter organizations to a specific user ID.\n      responses:\n        '200':\n          description: A list of organizations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organizations'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostOrgs\n      tags:\n        - Organizations\n      summary: Create an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Organization to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostOrganizationRequest'\n      responses:\n        '201':\n          description: Organization created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/orgs/{orgID}':\n    get:\n      operationId: GetOrgsID\n      tags:\n        - Organizations\n      summary: Retrieve an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization to get.\n      responses:\n        '200':\n          description: Organization details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchOrgsID\n      tags:\n        - Organizations\n      summary: Update an organization\n      requestBody:\n        description: Organization update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchOrganizationRequest'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization to get.\n      responses:\n        '200':\n          description: Organization updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteOrgsID\n      tags:\n        - Organizations\n      summary: Delete an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Organization not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/orgs/{orgID}/secrets':\n    get:\n      operationId: GetOrgsIDSecrets\n      tags:\n        - Secrets\n      summary: List all secret keys for an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '200':\n          description: A list of all secret keys\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SecretKeysResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchOrgsIDSecrets\n      tags:\n        - Secrets\n      summary: Update secrets in an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      requestBody:\n        description: Secret key value pairs to update/add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Secrets'\n      responses:\n        '204':\n          description: Keys successfully patched\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/orgs/{orgID}/members':\n    get:\n      operationId: GetOrgsIDMembers\n      tags:\n        - Organizations\n      summary: List all members of an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '200':\n          description: A list of organization members\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n        '404':\n          description: Organization not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostOrgsIDMembers\n      tags:\n        - Organizations\n      summary: Add a member to an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      requestBody:\n        description: User to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Added to organization created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/orgs/{orgID}/members/{userID}':\n    delete:\n      operationId: DeleteOrgsIDMembersID\n      tags:\n        - Organizations\n      summary: Remove a member from an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the member to remove.\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/orgs/{orgID}/owners':\n    get:\n      operationId: GetOrgsIDOwners\n      tags:\n        - Organizations\n      summary: List all owners of an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '200':\n          description: A list of organization owners\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n        '404':\n          description: Organization not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostOrgsIDOwners\n      tags:\n        - Organizations\n      summary: Add an owner to an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      requestBody:\n        description: User to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Organization owner added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/orgs/{orgID}/owners/{userID}':\n    delete:\n      operationId: DeleteOrgsIDOwnersID\n      tags:\n        - Organizations\n      summary: Remove an owner from an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the owner to remove.\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/orgs/{orgID}/secrets/delete':\n    post:\n      deprecated: true\n      operationId: PostOrgsIDSecrets\n      tags:\n        - Secrets\n      summary: Delete secrets from an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      requestBody:\n        description: Secret key to delete\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SecretKeys'\n      responses:\n        '204':\n          description: Keys successfully patched\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/orgs/{orgID}/secrets/{secretID}':\n    delete:\n      operationId: DeleteOrgsIDSecretsID\n      tags:\n        - Secrets\n      summary: Delete a secret from an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n        - in: path\n          name: secretID\n          schema:\n            type: string\n          required: true\n          description: The secret ID.\n      responses:\n        '204':\n          description: Keys successfully deleted\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /resources:\n    get:\n      operationId: GetResources\n      tags:\n        - Resources\n      summary: List all known resources\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description: All resources targets\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /stacks:\n    get:\n      operationId: ListStacks\n      tags:\n        - Templates\n      summary: List installed templates\n      parameters:\n        - in: query\n          name: orgID\n          required: true\n          schema:\n            type: string\n          description: The organization ID of the stacks\n        - in: query\n          name: name\n          schema:\n            type: string\n          description: A collection of names to filter the list by.\n        - in: query\n          name: stackID\n          schema:\n            type: string\n          description: A collection of stackIDs to filter the list by.\n      responses:\n        '200':\n          description: Success. Returns the list of stacks.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  stacks:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Stack'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: CreateStack\n      tags:\n        - Templates\n      summary: Create a new stack\n      requestBody:\n        description: The stack to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: PostStackRequest\n              properties:\n                orgID:\n                  type: string\n                name:\n                  type: string\n                description:\n                  type: string\n                urls:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '201':\n          description: Success. Returns the newly created stack.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stack'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/stacks/{stack_id}':\n    get:\n      operationId: ReadStack\n      tags:\n        - Templates\n      summary: Retrieve a stack\n      parameters:\n        - in: path\n          name: stack_id\n          required: true\n          schema:\n            type: string\n          description: The identifier of the stack.\n      responses:\n        '200':\n          description: Returns the stack.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stack'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: UpdateStack\n      tags:\n        - Templates\n      summary: Update a stack\n      parameters:\n        - in: path\n          name: stack_id\n          required: true\n          schema:\n            type: string\n          description: The identifier of the stack.\n      requestBody:\n        description: The stack to update.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: PatchStackRequest\n              properties:\n                name:\n                  type: string\n                  nullable: true\n                description:\n                  type: string\n                  nullable: true\n                templateURLs:\n                  type: array\n                  items:\n                    type: string\n                  nullable: true\n                additionalResources:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      resourceID:\n                        type: string\n                      kind:\n                        type: string\n                      templateMetaName:\n                        type: string\n                    required:\n                      - kind\n                      - resourceID\n      responses:\n        '200':\n          description: Returns the updated stack.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stack'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteStack\n      tags:\n        - Templates\n      summary: Delete a stack and associated resources\n      parameters:\n        - in: path\n          name: stack_id\n          required: true\n          schema:\n            type: string\n          description: The identifier of the stack.\n        - in: query\n          name: orgID\n          required: true\n          schema:\n            type: string\n          description: The identifier of the organization.\n      responses:\n        '204':\n          description: The stack and its associated resources were deleted.\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/stacks/{stack_id}/uninstall':\n    post:\n      operationId: UninstallStack\n      tags:\n        - Templates\n      summary: Uninstall a stack\n      parameters:\n        - in: path\n          name: stack_id\n          required: true\n          schema:\n            type: string\n          description: The identifier of the stack.\n      responses:\n        '200':\n          description: Returns the uninstalled stack.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stack'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /templates/apply:\n    post:\n      operationId: ApplyTemplate\n      tags:\n        - Templates\n      summary: Apply or dry-run a template\n      description: Applies or performs a dry-run of template in an organization.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TemplateApply'\n          application/x-jsonnet:\n            schema:\n              $ref: '#/components/schemas/TemplateApply'\n          text/yml:\n            schema:\n              $ref: '#/components/schemas/TemplateApply'\n      responses:\n        '200':\n          description: |\n            Success. The package dry-run succeeded. No new resources were created. Returns a diff and summary of the dry-run. The diff and summary won't contain IDs for resources that didn't exist at the time of the dry-run.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TemplateSummary'\n        '201':\n          description: |\n            Success. The package applied successfully. Returns a diff and summary of the run. The summary contains newly created resources. The diff compares the initial state to the state after the package applied. This corresponds to `\"dryRun\": true`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TemplateSummary'\n        '422':\n          description: Template failed validation\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/TemplateSummary'\n                  - type: object\n                    required:\n                      - message\n                      - code\n                    properties:\n                      message:\n                        type: string\n                      code:\n                        type: string\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /templates/export:\n    post:\n      operationId: ExportTemplate\n      tags:\n        - Templates\n      summary: Export a new template\n      requestBody:\n        description: Export resources as an InfluxDB template.\n        required: false\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/TemplateExportByID'\n                - $ref: '#/components/schemas/TemplateExportByName'\n      responses:\n        '200':\n          description: The template was created successfully. Returns the newly created template.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Template'\n            application/x-yaml:\n              schema:\n                $ref: '#/components/schemas/Template'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}':\n    get:\n      operationId: GetTasksID\n      tags:\n        - Tasks\n      summary: Retrieve a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: Task details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchTasksID\n      tags:\n        - Tasks\n      summary: Update a task\n      description: Update a task. This will cancel all queued runs.\n      requestBody:\n        description: Task update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskUpdateRequest'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: Task updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteTasksID\n      tags:\n        - Tasks\n      summary: Delete a task\n      description: Deletes a task and all associated records\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The ID of the task to delete.\n      responses:\n        '204':\n          description: Task deleted\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/runs':\n    get:\n      operationId: GetTasksIDRuns\n      tags:\n        - Tasks\n      summary: List runs for a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The ID of the task to get runs for.\n        - in: query\n          name: after\n          schema:\n            type: string\n          description: Returns runs after a specific ID.\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 100\n          description: The number of runs to return\n        - in: query\n          name: afterTime\n          schema:\n            type: string\n            format: date-time\n          description: 'Filter runs to those scheduled after this time, RFC3339'\n        - in: query\n          name: beforeTime\n          schema:\n            type: string\n            format: date-time\n          description: 'Filter runs to those scheduled before this time, RFC3339'\n      responses:\n        '200':\n          description: A list of task runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Runs'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTasksIDRuns\n      tags:\n        - Tasks\n      summary: 'Manually start a task run, overriding the current schedule'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RunManually'\n      responses:\n        '201':\n          description: Run scheduled to start\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/runs/{runID}':\n    get:\n      operationId: GetTasksIDRunsID\n      tags:\n        - Tasks\n      summary: Retrieve a single run for a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: The run ID.\n      responses:\n        '200':\n          description: The run record\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteTasksIDRunsID\n      tags:\n        - Tasks\n      summary: Cancel a running task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: The run ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/runs/{runID}/retry':\n    post:\n      operationId: PostTasksIDRunsIDRetry\n      tags:\n        - Tasks\n      summary: Retry a task run\n      requestBody:\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: The run ID.\n      responses:\n        '200':\n          description: Run that has been queued\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/logs':\n    get:\n      operationId: GetTasksIDLogs\n      tags:\n        - Tasks\n      summary: Retrieve all logs for a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: All logs for a task\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Logs'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/runs/{runID}/logs':\n    get:\n      operationId: GetTasksIDRunsIDLogs\n      tags:\n        - Tasks\n      summary: Retrieve all logs for a run\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: ID of task to get logs for.\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: ID of run to get logs for.\n      responses:\n        '200':\n          description: All logs for a run\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Logs'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/labels':\n    get:\n      operationId: GetTasksIDLabels\n      tags:\n        - Tasks\n      summary: List all labels for a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: A list of all labels for a task\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTasksIDLabels\n      tags:\n        - Tasks\n      summary: Add a label to a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: A list of all labels for a task\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/labels/{labelID}':\n    delete:\n      operationId: DeleteTasksIDLabelsID\n      tags:\n        - Tasks\n      summary: Delete a label from a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The label ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Task not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /flags:\n    get:\n      operationId: GetFlags\n      tags:\n        - Users\n      summary: Return the feature flags for the currently authenticated user\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description: Feature flags for the currently authenticated user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Flags'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /me:\n    get:\n      operationId: GetMe\n      tags:\n        - Users\n      summary: Retrieve the currently authenticated user\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description: The currently authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /me/password:\n    put:\n      operationId: PutMePassword\n      tags:\n        - Users\n      summary: Update a password\n      security:\n        - BasicAuthentication: []\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: New password\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordResetBody'\n      responses:\n        '204':\n          description: Password successfully updated\n        default:\n          description: Unsuccessful authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/members':\n    get:\n      operationId: GetTasksIDMembers\n      tags:\n        - Tasks\n      summary: List all task members\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: A list of users who have member privileges for a task\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTasksIDMembers\n      tags:\n        - Tasks\n      summary: Add a member to a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      requestBody:\n        description: User to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Added to task members\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/members/{userID}':\n    delete:\n      operationId: DeleteTasksIDMembersID\n      tags:\n        - Tasks\n      summary: Remove a member from a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the member to remove.\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/owners':\n    get:\n      operationId: GetTasksIDOwners\n      tags:\n        - Tasks\n      summary: List all owners of a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: A list of users who have owner privileges for a task\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostTasksIDOwners\n      tags:\n        - Tasks\n      summary: Add an owner to a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      requestBody:\n        description: User to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n      responses:\n        '201':\n          description: Added to task owners\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/tasks/{taskID}/owners/{userID}':\n    delete:\n      operationId: DeleteTasksIDOwnersID\n      tags:\n        - Tasks\n      summary: Remove an owner from a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the owner to remove.\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/users/{userID}/password':\n    post:\n      operationId: PostUsersIDPassword\n      tags:\n        - Users\n      summary: Update a password\n      security:\n        - BasicAuthentication: []\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The user ID.\n      requestBody:\n        description: New password\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordResetBody'\n      responses:\n        '204':\n          description: Password successfully updated\n        default:\n          description: Unsuccessful authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /checks:\n    get:\n      operationId: GetChecks\n      tags:\n        - Checks\n      summary: List all checks\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - in: query\n          name: orgID\n          required: true\n          description: Only show checks that belong to a specific organization ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of checks\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checks'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: CreateCheck\n      tags:\n        - Checks\n      summary: Add new check\n      requestBody:\n        description: Check to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostCheck'\n      responses:\n        '201':\n          description: Check created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Check'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/checks/{checkID}':\n    get:\n      operationId: GetChecksID\n      tags:\n        - Checks\n      summary: Retrieve a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: The check requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Check'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      operationId: PutChecksID\n      tags:\n        - Checks\n      summary: Update a check\n      requestBody:\n        description: Check update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Check'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: An updated check\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Check'\n        '404':\n          description: The check was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchChecksID\n      tags:\n        - Checks\n      summary: Update a check\n      requestBody:\n        description: Check update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CheckPatch'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: An updated check\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Check'\n        '404':\n          description: The check was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteChecksID\n      tags:\n        - Checks\n      summary: Delete a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: The check was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/checks/{checkID}/labels':\n    get:\n      operationId: GetChecksIDLabels\n      tags:\n        - Checks\n      summary: List all labels for a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: A list of all labels for a check\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostChecksIDLabels\n      tags:\n        - Checks\n      summary: Add a label to a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: The label was added to the check\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/checks/{checkID}/labels/{labelID}':\n    delete:\n      operationId: DeleteChecksIDLabelsID\n      tags:\n        - Checks\n      summary: Delete label from a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Check or label not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /notificationRules:\n    get:\n      operationId: GetNotificationRules\n      tags:\n        - NotificationRules\n      summary: List all notification rules\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - in: query\n          name: orgID\n          required: true\n          description: Only show notification rules that belong to a specific organization ID.\n          schema:\n            type: string\n        - in: query\n          name: checkID\n          description: Only show notifications that belong to the specific check ID.\n          schema:\n            type: string\n        - in: query\n          name: tag\n          description: Only return notification rules that \"would match\" statuses which contain the tag key value pairs provided.\n          schema:\n            type: string\n            pattern: '^[a-zA-Z0-9_]+:[a-zA-Z0-9_]+$'\n            example: 'env:prod'\n      responses:\n        '200':\n          description: A list of notification rules\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRules'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: CreateNotificationRule\n      tags:\n        - NotificationRules\n      summary: Add a notification rule\n      requestBody:\n        description: Notification rule to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostNotificationRule'\n      responses:\n        '201':\n          description: Notification rule created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRule'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/checks/{checkID}/query':\n    get:\n      operationId: GetChecksIDQuery\n      tags:\n        - Checks\n      summary: Retrieve a check query\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: The check query requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FluxResponse'\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Check not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationRules/{ruleID}':\n    get:\n      operationId: GetNotificationRulesID\n      tags:\n        - NotificationRules\n      summary: Retrieve a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: The notification rule requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRule'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      operationId: PutNotificationRulesID\n      tags:\n        - NotificationRules\n      summary: Update a notification rule\n      requestBody:\n        description: Notification rule update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotificationRule'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: An updated notification rule\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRule'\n        '404':\n          description: The notification rule was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchNotificationRulesID\n      tags:\n        - NotificationRules\n      summary: Update a notification rule\n      requestBody:\n        description: Notification rule update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotificationRuleUpdate'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: An updated notification rule\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRule'\n        '404':\n          description: The notification rule was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteNotificationRulesID\n      tags:\n        - NotificationRules\n      summary: Delete a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: The check was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationRules/{ruleID}/labels':\n    get:\n      operationId: GetNotificationRulesIDLabels\n      tags:\n        - NotificationRules\n      summary: List all labels for a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: A list of all labels for a notification rule\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostNotificationRuleIDLabels\n      tags:\n        - NotificationRules\n      summary: Add a label to a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: The label was added to the notification rule\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationRules/{ruleID}/labels/{labelID}':\n    delete:\n      operationId: DeleteNotificationRulesIDLabelsID\n      tags:\n        - NotificationRules\n      summary: Delete label from a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Rule or label not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationRules/{ruleID}/query':\n    get:\n      operationId: GetNotificationRulesIDQuery\n      tags:\n        - Rules\n      summary: Retrieve a notification rule query\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: The notification rule query requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FluxResponse'\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Notification rule not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /notificationEndpoints:\n    get:\n      operationId: GetNotificationEndpoints\n      tags:\n        - NotificationEndpoints\n      summary: List all notification endpoints\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - in: query\n          name: orgID\n          required: true\n          description: Only show notification endpoints that belong to specific organization ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of notification endpoints\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoints'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: CreateNotificationEndpoint\n      tags:\n        - NotificationEndpoints\n      summary: Add a notification endpoint\n      requestBody:\n        description: Notification endpoint to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostNotificationEndpoint'\n      responses:\n        '201':\n          description: Notification endpoint created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoint'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationEndpoints/{endpointID}':\n    get:\n      operationId: GetNotificationEndpointsID\n      tags:\n        - NotificationEndpoints\n      summary: Retrieve a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '200':\n          description: The notification endpoint requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoint'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      operationId: PutNotificationEndpointsID\n      tags:\n        - NotificationEndpoints\n      summary: Update a notification endpoint\n      requestBody:\n        description: A new notification endpoint to replace the existing endpoint with\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotificationEndpoint'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '200':\n          description: An updated notification endpoint\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoint'\n        '404':\n          description: The notification endpoint was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      operationId: PatchNotificationEndpointsID\n      tags:\n        - NotificationEndpoints\n      summary: Update a notification endpoint\n      requestBody:\n        description: Check update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotificationEndpointUpdate'\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '200':\n          description: An updated notification endpoint\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoint'\n        '404':\n          description: The notification endpoint was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: DeleteNotificationEndpointsID\n      tags:\n        - NotificationEndpoints\n      summary: Delete a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: The endpoint was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationEndpoints/{endpointID}/labels':\n    get:\n      operationId: GetNotificationEndpointsIDLabels\n      tags:\n        - NotificationEndpoints\n      summary: List all labels for a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '200':\n          description: A list of all labels for a notification endpoint\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: PostNotificationEndpointIDLabels\n      tags:\n        - NotificationEndpoints\n      summary: Add a label to a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n      responses:\n        '201':\n          description: The label was added to the notification endpoint\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/notificationEndpoints/{endpointID}/labels/{labelID}':\n    delete:\n      operationId: DeleteNotificationEndpointsIDLabelsID\n      tags:\n        - NotificationEndpoints\n      summary: Delete a label from a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Endpoint or label not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  parameters:\n    TraceSpan:\n      in: header\n      name: Zap-Trace-Span\n      description: OpenTracing span context\n      example:\n        trace_id: '1'\n        span_id: '1'\n        baggage:\n          key: value\n      required: false\n      schema:\n        type: string\n    Offset:\n      in: query\n      name: offset\n      required: false\n      schema:\n        type: integer\n        minimum: 0\n    Limit:\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 100\n        default: 20\n    Descending:\n      in: query\n      name: descending\n      required: false\n      schema:\n        type: boolean\n        default: false\n    SortBy:\n      in: query\n      name: sortBy\n      required: false\n      schema:\n        type: string\n    After:\n      in: query\n      name: after\n      required: false\n      schema:\n        type: string\n      description: |\n        Resource ID to seek from. Results are not inclusive of this ID. Use `after` instead of `offset`.\n  schemas:\n    LanguageRequest:\n      description: Flux query to be analyzed.\n      type: object\n      required:\n        - query\n      properties:\n        query:\n          description: Flux query script to be analyzed\n          type: string\n    Query:\n      description: Query influx using the Flux language\n      type: object\n      required:\n        - query\n      properties:\n        extern:\n          $ref: '#/components/schemas/File'\n        query:\n          description: Query script to execute.\n          type: string\n        type:\n          description: The type of query. Must be \"flux\".\n          type: string\n          enum:\n            - flux\n        params:\n          type: object\n          additionalProperties: true\n          description: |\n            Enumeration of key/value pairs that respresent parameters to be injected into query (can only specify either this field or extern and not both)\n        dialect:\n          $ref: '#/components/schemas/Dialect'\n        now:\n          description: Specifies the time that should be reported as \"now\" in the query. Default is the server's now time.\n          type: string\n          format: date-time\n    Package:\n      description: Represents a complete package source tree.\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        path:\n          description: Package import path\n          type: string\n        package:\n          description: Package name\n          type: string\n        files:\n          description: Package files\n          type: array\n          items:\n            $ref: '#/components/schemas/File'\n    File:\n      description: Represents a source from a single file\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        name:\n          description: The name of the file.\n          type: string\n        package:\n          $ref: '#/components/schemas/PackageClause'\n        imports:\n          description: A list of package imports\n          type: array\n          items:\n            $ref: '#/components/schemas/ImportDeclaration'\n        body:\n          description: List of Flux statements\n          type: array\n          items:\n            $ref: '#/components/schemas/Statement'\n    PackageClause:\n      description: Defines a package identifier\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        name:\n          $ref: '#/components/schemas/Identifier'\n    ImportDeclaration:\n      description: Declares a package import\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        as:\n          $ref: '#/components/schemas/Identifier'\n        path:\n          $ref: '#/components/schemas/StringLiteral'\n    DeletePredicateRequest:\n      description: The delete predicate request.\n      type: object\n      required:\n        - start\n        - stop\n      properties:\n        start:\n          description: RFC3339Nano\n          type: string\n          format: date-time\n        stop:\n          description: RFC3339Nano\n          type: string\n          format: date-time\n        predicate:\n          description: InfluxQL-like delete statement\n          example: tag1=\"value1\" and (tag2=\"value2\" and tag3!=\"value3\")\n          type: string\n    Node:\n      oneOf:\n        - $ref: '#/components/schemas/Expression'\n        - $ref: '#/components/schemas/Block'\n    NodeType:\n      description: Type of AST node\n      type: string\n    Block:\n      description: A set of statements\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        body:\n          description: Block body\n          type: array\n          items:\n            $ref: '#/components/schemas/Statement'\n    Statement:\n      oneOf:\n        - $ref: '#/components/schemas/BadStatement'\n        - $ref: '#/components/schemas/VariableAssignment'\n        - $ref: '#/components/schemas/MemberAssignment'\n        - $ref: '#/components/schemas/ExpressionStatement'\n        - $ref: '#/components/schemas/ReturnStatement'\n        - $ref: '#/components/schemas/OptionStatement'\n        - $ref: '#/components/schemas/BuiltinStatement'\n        - $ref: '#/components/schemas/TestStatement'\n    BadStatement:\n      description: A placeholder for statements for which no correct statement nodes can be created\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        text:\n          description: Raw source text\n          type: string\n    VariableAssignment:\n      description: Represents the declaration of a variable\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        id:\n          $ref: '#/components/schemas/Identifier'\n        init:\n          $ref: '#/components/schemas/Expression'\n    MemberAssignment:\n      description: Object property assignment\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        member:\n          $ref: '#/components/schemas/MemberExpression'\n        init:\n          $ref: '#/components/schemas/Expression'\n    ExpressionStatement:\n      description: May consist of an expression that does not return a value and is executed solely for its side-effects\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        expression:\n          $ref: '#/components/schemas/Expression'\n    ReturnStatement:\n      description: Defines an expression to return\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        argument:\n          $ref: '#/components/schemas/Expression'\n    OptionStatement:\n      description: A single variable declaration\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        assignment:\n          oneOf:\n            - $ref: '#/components/schemas/VariableAssignment'\n            - $ref: '#/components/schemas/MemberAssignment'\n    BuiltinStatement:\n      description: Declares a builtin identifier and its type\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        id:\n          $ref: '#/components/schemas/Identifier'\n    TestStatement:\n      description: Declares a Flux test case\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        assignment:\n          $ref: '#/components/schemas/VariableAssignment'\n    Expression:\n      oneOf:\n        - $ref: '#/components/schemas/ArrayExpression'\n        - $ref: '#/components/schemas/DictExpression'\n        - $ref: '#/components/schemas/FunctionExpression'\n        - $ref: '#/components/schemas/BinaryExpression'\n        - $ref: '#/components/schemas/CallExpression'\n        - $ref: '#/components/schemas/ConditionalExpression'\n        - $ref: '#/components/schemas/LogicalExpression'\n        - $ref: '#/components/schemas/MemberExpression'\n        - $ref: '#/components/schemas/IndexExpression'\n        - $ref: '#/components/schemas/ObjectExpression'\n        - $ref: '#/components/schemas/ParenExpression'\n        - $ref: '#/components/schemas/PipeExpression'\n        - $ref: '#/components/schemas/UnaryExpression'\n        - $ref: '#/components/schemas/BooleanLiteral'\n        - $ref: '#/components/schemas/DateTimeLiteral'\n        - $ref: '#/components/schemas/DurationLiteral'\n        - $ref: '#/components/schemas/FloatLiteral'\n        - $ref: '#/components/schemas/IntegerLiteral'\n        - $ref: '#/components/schemas/PipeLiteral'\n        - $ref: '#/components/schemas/RegexpLiteral'\n        - $ref: '#/components/schemas/StringLiteral'\n        - $ref: '#/components/schemas/UnsignedIntegerLiteral'\n        - $ref: '#/components/schemas/Identifier'\n    ArrayExpression:\n      description: Used to create and directly specify the elements of an array object\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        elements:\n          description: Elements of the array\n          type: array\n          items:\n            $ref: '#/components/schemas/Expression'\n    DictExpression:\n      description: Used to create and directly specify the elements of a dictionary\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        elements:\n          description: Elements of the dictionary\n          type: array\n          items:\n            $ref: '#/components/schemas/DictItem'\n    DictItem:\n      description: A key/value pair in a dictionary\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        key:\n          $ref: '#/components/schemas/Expression'\n        val:\n          $ref: '#/components/schemas/Expression'\n    FunctionExpression:\n      description: Function expression\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        params:\n          description: Function parameters\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n        body:\n          $ref: '#/components/schemas/Node'\n    BinaryExpression:\n      description: uses binary operators to act on two operands in an expression\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        operator:\n          type: string\n        left:\n          $ref: '#/components/schemas/Expression'\n        right:\n          $ref: '#/components/schemas/Expression'\n    CallExpression:\n      description: Represents a function call\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        callee:\n          $ref: '#/components/schemas/Expression'\n        arguments:\n          description: Function arguments\n          type: array\n          items:\n            $ref: '#/components/schemas/Expression'\n    ConditionalExpression:\n      description: 'Selects one of two expressions, `Alternate` or `Consequent`, depending on a third boolean expression, `Test`'\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        test:\n          $ref: '#/components/schemas/Expression'\n        alternate:\n          $ref: '#/components/schemas/Expression'\n        consequent:\n          $ref: '#/components/schemas/Expression'\n    LogicalExpression:\n      description: Represents the rule conditions that collectively evaluate to either true or false\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        operator:\n          type: string\n        left:\n          $ref: '#/components/schemas/Expression'\n        right:\n          $ref: '#/components/schemas/Expression'\n    MemberExpression:\n      description: Represents accessing a property of an object\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        object:\n          $ref: '#/components/schemas/Expression'\n        property:\n          $ref: '#/components/schemas/PropertyKey'\n    IndexExpression:\n      description: Represents indexing into an array\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        array:\n          $ref: '#/components/schemas/Expression'\n        index:\n          $ref: '#/components/schemas/Expression'\n    ObjectExpression:\n      description: Allows the declaration of an anonymous object within a declaration\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        properties:\n          description: Object properties\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n    ParenExpression:\n      description: Represents an expression wrapped in parenthesis\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        expression:\n          $ref: '#/components/schemas/Expression'\n    PipeExpression:\n      description: Call expression with pipe argument\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        argument:\n          $ref: '#/components/schemas/Expression'\n        call:\n          $ref: '#/components/schemas/CallExpression'\n    UnaryExpression:\n      description: Uses operators to act on a single operand in an expression\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        operator:\n          type: string\n        argument:\n          $ref: '#/components/schemas/Expression'\n    BooleanLiteral:\n      description: Represents boolean values\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: boolean\n    DateTimeLiteral:\n      description: Represents an instant in time with nanosecond precision using the syntax of golang's RFC3339 Nanosecond variant\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n          format: date-time\n    DurationLiteral:\n      description: Represents the elapsed time between two instants as an int64 nanosecond count with syntax of golang's time.Duration\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        values:\n          description: Duration values\n          type: array\n          items:\n            $ref: '#/components/schemas/Duration'\n    FloatLiteral:\n      description: Represents floating point numbers according to the double representations defined by the IEEE-754-1985\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: number\n    IntegerLiteral:\n      description: Represents integer numbers\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n    PipeLiteral:\n      description: 'Represents a specialized literal value, indicating the left hand value of a pipe expression'\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n    RegexpLiteral:\n      description: Expressions begin and end with `/` and are regular expressions with syntax accepted by RE2\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n    StringLiteral:\n      description: Expressions begin and end with double quote marks\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n    UnsignedIntegerLiteral:\n      description: Represents integer numbers\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n    Duration:\n      description: A pair consisting of length of time and the unit of time measured. It is the atomic unit from which all duration literals are composed.\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        magnitude:\n          type: integer\n        unit:\n          type: string\n    Property:\n      description: The value associated with a key\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        key:\n          $ref: '#/components/schemas/PropertyKey'\n        value:\n          $ref: '#/components/schemas/Expression'\n    PropertyKey:\n      oneOf:\n        - $ref: '#/components/schemas/Identifier'\n        - $ref: '#/components/schemas/StringLiteral'\n    Identifier:\n      description: A valid Flux identifier\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        name:\n          type: string\n    Dialect:\n      description: 'Dialect are options to change the default CSV output format; https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions'\n      type: object\n      properties:\n        header:\n          description: 'If true, the results will contain a header row'\n          type: boolean\n          default: true\n        delimiter:\n          description: 'Separator between cells; the default is ,'\n          type: string\n          default: ','\n          maxLength: 1\n          minLength: 1\n        annotations:\n          description: 'https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns'\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n            enum:\n              - group\n              - datatype\n              - default\n        commentPrefix:\n          description: Character prefixed to comment strings\n          type: string\n          default: '#'\n          maxLength: 1\n          minLength: 0\n        dateTimeFormat:\n          description: Format of timestamps\n          type: string\n          default: RFC3339\n          enum:\n            - RFC3339\n            - RFC3339Nano\n    AuthorizationUpdateRequest:\n      properties:\n        status:\n          description: 'Status of the token. If `inactive`, requests using the token will be rejected.'\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n        description:\n          type: string\n          description: A description of the token.\n    PostBucketRequest:\n      properties:\n        orgID:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        rp:\n          type: string\n        retentionRules:\n          $ref: '#/components/schemas/RetentionRules'\n        schemaType:\n          $ref: '#/components/schemas/SchemaType'\n          default: implicit\n      required:\n        - orgID\n        - name\n        - retentionRules\n    Bucket:\n      properties:\n        links:\n          type: object\n          readOnly: true\n          example:\n            labels: /api/v2/buckets/1/labels\n            members: /api/v2/buckets/1/members\n            org: /api/v2/orgs/2\n            owners: /api/v2/buckets/1/owners\n            self: /api/v2/buckets/1\n            write: /api/v2/write?org=2\u0026bucket=1\n          properties:\n            labels:\n              description: URL to retrieve labels for this bucket.\n              $ref: '#/components/schemas/Link'\n            members:\n              description: URL to retrieve members that can read this bucket.\n              $ref: '#/components/schemas/Link'\n            org:\n              description: URL to retrieve parent organization for this bucket.\n              $ref: '#/components/schemas/Link'\n            owners:\n              description: URL to retrieve owners that can read and write to this bucket.\n              $ref: '#/components/schemas/Link'\n            self:\n              description: URL for this bucket.\n              $ref: '#/components/schemas/Link'\n            write:\n              description: URL to write line protocol to this bucket.\n              $ref: '#/components/schemas/Link'\n        id:\n          readOnly: true\n          type: string\n        type:\n          readOnly: true\n          type: string\n          default: user\n          enum:\n            - user\n            - system\n        name:\n          type: string\n        description:\n          type: string\n        orgID:\n          type: string\n        rp:\n          type: string\n        schemaType:\n          $ref: '#/components/schemas/SchemaType'\n          default: implicit\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        retentionRules:\n          $ref: '#/components/schemas/RetentionRules'\n        labels:\n          $ref: '#/components/schemas/Labels'\n      required:\n        - name\n        - retentionRules\n    Buckets:\n      type: object\n      properties:\n        links:\n          readOnly: true\n          $ref: '#/components/schemas/Links'\n        buckets:\n          type: array\n          items:\n            $ref: '#/components/schemas/Bucket'\n    RetentionRules:\n      type: array\n      description: Rules to expire or retain data.  No rules means data never expires.\n      items:\n        $ref: '#/components/schemas/RetentionRule'\n    PatchBucketRequest:\n      type: object\n      description: Updates to an existing bucket resource.\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        retentionRules:\n          $ref: '#/components/schemas/PatchRetentionRules'\n    PatchRetentionRules:\n      type: array\n      description: Updates to rules to expire or retain data. No rules means no updates.\n      items:\n        $ref: '#/components/schemas/PatchRetentionRule'\n    PatchRetentionRule:\n      type: object\n      description: Updates to a rule to expire or retain data.\n      properties:\n        type:\n          type: string\n          default: expire\n          enum:\n            - expire\n        everySeconds:\n          type: integer\n          format: int64\n          description: Duration in seconds for how long data will be kept in the database. 0 means infinite.\n          example: 86400\n          minimum: 0\n        shardGroupDurationSeconds:\n          type: integer\n          format: int64\n          description: Shard duration measured in seconds.\n      required:\n        - type\n    RetentionRule:\n      type: object\n      properties:\n        type:\n          type: string\n          default: expire\n          enum:\n            - expire\n        everySeconds:\n          type: integer\n          format: int64\n          description: Duration in seconds for how long data will be kept in the database. 0 means infinite.\n          example: 86400\n          minimum: 0\n        shardGroupDurationSeconds:\n          type: integer\n          format: int64\n          description: Shard duration measured in seconds.\n      required:\n        - type\n        - everySeconds\n    Link:\n      type: string\n      format: uri\n      readOnly: true\n      description: URI of resource.\n    Links:\n      type: object\n      properties:\n        next:\n          $ref: '#/components/schemas/Link'\n        self:\n          $ref: '#/components/schemas/Link'\n        prev:\n          $ref: '#/components/schemas/Link'\n      required:\n        - self\n    Logs:\n      type: object\n      properties:\n        events:\n          readOnly: true\n          type: array\n          items:\n            $ref: '#/components/schemas/LogEvent'\n    LogEvent:\n      type: object\n      properties:\n        time:\n          readOnly: true\n          description: 'Time event occurred, RFC3339Nano.'\n          type: string\n          format: date-time\n        message:\n          readOnly: true\n          description: A description of the event that occurred.\n          type: string\n          example: Halt and catch fire\n        runID:\n          readOnly: true\n          description: the ID of the task that logged\n          type: string\n    Organization:\n      properties:\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: /api/v2/orgs/1\n            members: /api/v2/orgs/1/members\n            owners: /api/v2/orgs/1/owners\n            labels: /api/v2/orgs/1/labels\n            secrets: /api/v2/orgs/1/secrets\n            buckets: /api/v2/buckets?org=myorg\n            tasks: /api/v2/tasks?org=myorg\n            dashboards: /api/v2/dashboards?org=myorg\n          properties:\n            self:\n              $ref: '#/components/schemas/Link'\n            members:\n              $ref: '#/components/schemas/Link'\n            owners:\n              $ref: '#/components/schemas/Link'\n            labels:\n              $ref: '#/components/schemas/Link'\n            secrets:\n              $ref: '#/components/schemas/Link'\n            buckets:\n              $ref: '#/components/schemas/Link'\n            tasks:\n              $ref: '#/components/schemas/Link'\n            dashboards:\n              $ref: '#/components/schemas/Link'\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        status:\n          description: If inactive the organization is inactive.\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n      required:\n        - name\n    Organizations:\n      type: object\n      properties:\n        links:\n          $ref: '#/components/schemas/Links'\n        orgs:\n          type: array\n          items:\n            $ref: '#/components/schemas/Organization'\n    PostOrganizationRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n      required:\n        - name\n    PatchOrganizationRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: New name to set on the organization\n        description:\n          type: string\n          description: New description to set on the organization\n    TemplateApply:\n      type: object\n      properties:\n        dryRun:\n          type: boolean\n        orgID:\n          type: string\n        stackID:\n          type: string\n        template:\n          type: object\n          properties:\n            contentType:\n              type: string\n            sources:\n              type: array\n              items:\n                type: string\n            contents:\n              $ref: '#/components/schemas/Template'\n        templates:\n          type: array\n          items:\n            type: object\n            properties:\n              contentType:\n                type: string\n              sources:\n                type: array\n                items:\n                  type: string\n              contents:\n                $ref: '#/components/schemas/Template'\n        envRefs:\n          type: object\n          additionalProperties:\n            oneOf:\n              - type: string\n              - type: integer\n              - type: number\n              - type: boolean\n        secrets:\n          type: object\n          additionalProperties:\n            type: string\n        remotes:\n          type: array\n          items:\n            type: object\n            properties:\n              url:\n                type: string\n              contentType:\n                type: string\n            required:\n              - url\n        actions:\n          type: array\n          items:\n            oneOf:\n              - type: object\n                properties:\n                  action:\n                    type: string\n                    enum:\n                      - skipKind\n                  properties:\n                    type: object\n                    properties:\n                      kind:\n                        $ref: '#/components/schemas/TemplateKind'\n                    required:\n                      - kind\n              - type: object\n                properties:\n                  action:\n                    type: string\n                    enum:\n                      - skipResource\n                  properties:\n                    type: object\n                    properties:\n                      kind:\n                        $ref: '#/components/schemas/TemplateKind'\n                      resourceTemplateName:\n                        type: string\n                    required:\n                      - kind\n                      - resourceTemplateName\n    TemplateKind:\n      type: string\n      enum:\n        - Bucket\n        - Check\n        - CheckDeadman\n        - CheckThreshold\n        - Dashboard\n        - Label\n        - NotificationEndpoint\n        - NotificationEndpointHTTP\n        - NotificationEndpointPagerDuty\n        - NotificationEndpointSlack\n        - NotificationRule\n        - Task\n        - Telegraf\n        - Variable\n    TemplateExportByID:\n      type: object\n      properties:\n        stackID:\n          type: string\n        orgIDs:\n          type: array\n          items:\n            type: object\n            properties:\n              orgID:\n                type: string\n              resourceFilters:\n                type: object\n                properties:\n                  byLabel:\n                    type: array\n                    items:\n                      type: string\n                  byResourceKind:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateKind'\n        resources:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n              kind:\n                $ref: '#/components/schemas/TemplateKind'\n              name:\n                type: string\n                description: 'if defined with id, name is used for resource exported by id. if defined independently, resources strictly matching name are exported'\n            required:\n              - id\n              - kind\n    TemplateExportByName:\n      type: object\n      properties:\n        stackID:\n          type: string\n        orgIDs:\n          type: array\n          items:\n            type: object\n            properties:\n              orgID:\n                type: string\n              resourceFilters:\n                type: object\n                properties:\n                  byLabel:\n                    type: array\n                    items:\n                      type: string\n                  byResourceKind:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateKind'\n        resources:\n          type: array\n          items:\n            type: object\n            properties:\n              kind:\n                $ref: '#/components/schemas/TemplateKind'\n              name:\n                type: string\n            required:\n              - name\n              - kind\n    Template:\n      type: array\n      items:\n        type: object\n        properties:\n          apiVersion:\n            type: string\n          kind:\n            $ref: '#/components/schemas/TemplateKind'\n          meta:\n            type: object\n            properties:\n              name:\n                type: string\n          spec:\n            type: object\n    TemplateEnvReferences:\n      type: array\n      items:\n        type: object\n        properties:\n          resourceField:\n            type: string\n            description: Field the environment reference corresponds too\n          envRefKey:\n            type: string\n            description: Key identified as environment reference and is the key identified in the template\n          value:\n            description: Value provided to fulfill reference\n            nullable: true\n            oneOf:\n              - type: string\n              - type: integer\n              - type: number\n              - type: boolean\n          defaultValue:\n            description: Default value that will be provided for the reference when no value is provided\n            nullable: true\n            oneOf:\n              - type: string\n              - type: integer\n              - type: number\n              - type: boolean\n        required:\n          - resourceField\n          - envRefKey\n    TemplateSummary:\n      type: object\n      properties:\n        sources:\n          type: array\n          items:\n            type: string\n        stackID:\n          type: string\n        summary:\n          type: object\n          properties:\n            buckets:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    type: string\n                  orgID:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  templateMetaName:\n                    type: string\n                  name:\n                    type: string\n                  description:\n                    type: string\n                  retentionPeriod:\n                    type: integer\n                  labelAssociations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateSummaryLabel'\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n            checks:\n              type: array\n              items:\n                allOf:\n                  - $ref: '#/components/schemas/CheckDiscriminator'\n                  - type: object\n                    properties:\n                      kind:\n                        $ref: '#/components/schemas/TemplateKind'\n                      templateMetaName:\n                        type: string\n                      labelAssociations:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/TemplateSummaryLabel'\n                      envReferences:\n                        $ref: '#/components/schemas/TemplateEnvReferences'\n            dashboards:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    type: string\n                  orgID:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  templateMetaName:\n                    type: string\n                  name:\n                    type: string\n                  description:\n                    type: string\n                  labelAssociations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateSummaryLabel'\n                  charts:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateChart'\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n            labels:\n              type: array\n              items:\n                $ref: '#/components/schemas/TemplateSummaryLabel'\n            labelMappings:\n              type: array\n              items:\n                type: object\n                properties:\n                  status:\n                    type: string\n                  resourceTemplateMetaName:\n                    type: string\n                  resourceName:\n                    type: string\n                  resourceID:\n                    type: string\n                  resourceType:\n                    type: string\n                  labelTemplateMetaName:\n                    type: string\n                  labelName:\n                    type: string\n                  labelID:\n                    type: string\n            missingEnvRefs:\n              type: array\n              items:\n                type: string\n            missingSecrets:\n              type: array\n              items:\n                type: string\n            notificationEndpoints:\n              type: array\n              items:\n                allOf:\n                  - $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n                  - type: object\n                    properties:\n                      kind:\n                        $ref: '#/components/schemas/TemplateKind'\n                      templateMetaName:\n                        type: string\n                      labelAssociations:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/TemplateSummaryLabel'\n                      envReferences:\n                        $ref: '#/components/schemas/TemplateEnvReferences'\n            notificationRules:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  templateMetaName:\n                    type: string\n                  name:\n                    type: string\n                  description:\n                    type: string\n                  endpointTemplateMetaName:\n                    type: string\n                  endpointID:\n                    type: string\n                  endpointType:\n                    type: string\n                  every:\n                    type: string\n                  offset:\n                    type: string\n                  messageTemplate:\n                    type: string\n                  status:\n                    type: string\n                  statusRules:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        currentLevel:\n                          type: string\n                        previousLevel:\n                          type: string\n                  tagRules:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        key:\n                          type: string\n                        value:\n                          type: string\n                        operator:\n                          type: string\n                  labelAssociations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateSummaryLabel'\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n            tasks:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  templateMetaName:\n                    type: string\n                  id:\n                    type: string\n                  name:\n                    type: string\n                  cron:\n                    type: string\n                  description:\n                    type: string\n                  every:\n                    type: string\n                  offset:\n                    type: string\n                  query:\n                    type: string\n                  status:\n                    type: string\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n            telegrafConfigs:\n              type: array\n              items:\n                allOf:\n                  - $ref: '#/components/schemas/TelegrafRequest'\n                  - type: object\n                    properties:\n                      kind:\n                        $ref: '#/components/schemas/TemplateKind'\n                      templateMetaName:\n                        type: string\n                      labelAssociations:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/TemplateSummaryLabel'\n                      envReferences:\n                        $ref: '#/components/schemas/TemplateEnvReferences'\n            variables:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  templateMetaName:\n                    type: string\n                  id:\n                    type: string\n                  orgID:\n                    type: string\n                  name:\n                    type: string\n                  description:\n                    type: string\n                  arguments:\n                    $ref: '#/components/schemas/VariableProperties'\n                  labelAssociations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateSummaryLabel'\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n        diff:\n          type: object\n          properties:\n            buckets:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      retentionRules:\n                        $ref: '#/components/schemas/RetentionRules'\n                  old:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      retentionRules:\n                        $ref: '#/components/schemas/RetentionRules'\n            checks:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    $ref: '#/components/schemas/CheckDiscriminator'\n                  old:\n                    $ref: '#/components/schemas/CheckDiscriminator'\n            dashboards:\n              type: array\n              items:\n                type: object\n                properties:\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  templateMetaName:\n                    type: string\n                  new:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      charts:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/TemplateChart'\n                  old:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      charts:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/TemplateChart'\n            labels:\n              type: array\n              items:\n                type: object\n                properties:\n                  stateStatus:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      color:\n                        type: string\n                      description:\n                        type: string\n                  old:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      color:\n                        type: string\n                      description:\n                        type: string\n            labelMappings:\n              type: array\n              items:\n                type: object\n                properties:\n                  status:\n                    type: string\n                  resourceType:\n                    type: string\n                  resourceID:\n                    type: string\n                  resourceTemplateMetaName:\n                    type: string\n                  resourceName:\n                    type: string\n                  labelID:\n                    type: string\n                  labelTemplateMetaName:\n                    type: string\n                  labelName:\n                    type: string\n            notificationEndpoints:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n                  old:\n                    $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n            notificationRules:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      endpointName:\n                        type: string\n                      endpointID:\n                        type: string\n                      endpointType:\n                        type: string\n                      every:\n                        type: string\n                      offset:\n                        type: string\n                      messageTemplate:\n                        type: string\n                      status:\n                        type: string\n                      statusRules:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            currentLevel:\n                              type: string\n                            previousLevel:\n                              type: string\n                      tagRules:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            key:\n                              type: string\n                            value:\n                              type: string\n                            operator:\n                              type: string\n                  old:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      endpointName:\n                        type: string\n                      endpointID:\n                        type: string\n                      endpointType:\n                        type: string\n                      every:\n                        type: string\n                      offset:\n                        type: string\n                      messageTemplate:\n                        type: string\n                      status:\n                        type: string\n                      statusRules:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            currentLevel:\n                              type: string\n                            previousLevel:\n                              type: string\n                      tagRules:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            key:\n                              type: string\n                            value:\n                              type: string\n                            operator:\n                              type: string\n            tasks:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      cron:\n                        type: string\n                      description:\n                        type: string\n                      every:\n                        type: string\n                      offset:\n                        type: string\n                      query:\n                        type: string\n                      status:\n                        type: string\n                  old:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      cron:\n                        type: string\n                      description:\n                        type: string\n                      every:\n                        type: string\n                      offset:\n                        type: string\n                      query:\n                        type: string\n                      status:\n                        type: string\n            telegrafConfigs:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    $ref: '#/components/schemas/TelegrafRequest'\n                  old:\n                    $ref: '#/components/schemas/TelegrafRequest'\n            variables:\n              type: array\n              items:\n                type: object\n                properties:\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  stateStatus:\n                    type: string\n                  id:\n                    type: string\n                  templateMetaName:\n                    type: string\n                  new:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      args:\n                        $ref: '#/components/schemas/VariableProperties'\n                  old:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                      args:\n                        $ref: '#/components/schemas/VariableProperties'\n        errors:\n          type: array\n          items:\n            type: object\n            properties:\n              kind:\n                $ref: '#/components/schemas/TemplateKind'\n              reason:\n                type: string\n              fields:\n                type: array\n                items:\n                  type: string\n              indexes:\n                type: array\n                items:\n                  type: integer\n    TemplateSummaryLabel:\n      type: object\n      properties:\n        id:\n          type: string\n        orgID:\n          type: string\n        kind:\n          $ref: '#/components/schemas/TemplateKind'\n        templateMetaName:\n          type: string\n        name:\n          type: string\n        properties:\n          type: object\n          properties:\n            color:\n              type: string\n            description:\n              type: string\n        envReferences:\n          $ref: '#/components/schemas/TemplateEnvReferences'\n    TemplateChart:\n      type: object\n      properties:\n        xPos:\n          type: integer\n        yPos:\n          type: integer\n        height:\n          type: integer\n        width:\n          type: integer\n        properties:\n          $ref: '#/components/schemas/ViewProperties'\n    Stack:\n      type: object\n      properties:\n        id:\n          type: string\n        orgID:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        events:\n          type: array\n          items:\n            type: object\n            properties:\n              eventType:\n                type: string\n              name:\n                type: string\n              description:\n                type: string\n              sources:\n                type: array\n                items:\n                  type: string\n              resources:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    apiVersion:\n                      type: string\n                    resourceID:\n                      type: string\n                    kind:\n                      $ref: '#/components/schemas/TemplateKind'\n                    templateMetaName:\n                      type: string\n                    associations:\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          kind:\n                            $ref: '#/components/schemas/TemplateKind'\n                          metaName:\n                            type: string\n                    links:\n                      type: object\n                      properties:\n                        self:\n                          type: string\n              urls:\n                type: array\n                items:\n                  type: string\n              updatedAt:\n                type: string\n                format: date-time\n                readOnly: true\n    Runs:\n      type: object\n      properties:\n        links:\n          $ref: '#/components/schemas/Links'\n        runs:\n          type: array\n          items:\n            $ref: '#/components/schemas/Run'\n    Run:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        taskID:\n          readOnly: true\n          type: string\n        status:\n          readOnly: true\n          type: string\n          enum:\n            - scheduled\n            - started\n            - failed\n            - success\n            - canceled\n        scheduledFor:\n          description: 'Time used for run''s \"now\" option, RFC3339.'\n          type: string\n          format: date-time\n        log:\n          description: An array of logs associated with the run.\n          type: array\n          readOnly: true\n          items:\n            $ref: '#/components/schemas/LogEvent'\n        startedAt:\n          readOnly: true\n          description: 'Time run started executing, RFC3339Nano.'\n          type: string\n          format: date-time\n        finishedAt:\n          readOnly: true\n          description: 'Time run finished executing, RFC3339Nano.'\n          type: string\n          format: date-time\n        requestedAt:\n          readOnly: true\n          description: 'Time run was manually requested, RFC3339Nano.'\n          type: string\n          format: date-time\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: /api/v2/tasks/1/runs/1\n            task: /api/v2/tasks/1\n            retry: /api/v2/tasks/1/runs/1/retry\n          properties:\n            self:\n              type: string\n              format: uri\n            task:\n              type: string\n              format: uri\n            retry:\n              type: string\n              format: uri\n    RunManually:\n      properties:\n        scheduledFor:\n          nullable: true\n          description: 'Time used for run''s \"now\" option, RFC3339.  Default is the server''s now time.'\n          type: string\n          format: date-time\n    Tasks:\n      type: object\n      properties:\n        links:\n          readOnly: true\n          $ref: '#/components/schemas/Links'\n        tasks:\n          type: array\n          items:\n            $ref: '#/components/schemas/Task'\n    Task:\n      type: object\n      properties:\n        id:\n          readOnly: true\n          type: string\n        type:\n          description: 'Type of the task, useful for filtering a task list.'\n          type: string\n        orgID:\n          description: ID of the organization that owns the task.\n          type: string\n        org:\n          description: Name of the organization that owns the task.\n          type: string\n        name:\n          description: Name of the task.\n          type: string\n        ownerID:\n          description: ID of the user who owns this Task.\n          type: string\n        description:\n          description: Description of the task.\n          type: string\n        status:\n          $ref: '#/components/schemas/TaskStatusType'\n        labels:\n          $ref: '#/components/schemas/Labels'\n        authorizationID:\n          description: ID of the authorization used when the task communicates with the query engine.\n          type: string\n        flux:\n          description: Flux script to run for this task.\n          type: string\n        every:\n          description: |-\n            Interval at which the task runs. `every` also determines when the task first runs, depending on the specified time.\n            Value is a [duration literal](https://docs.influxdata.com/flux/v0.x/spec/lexical-elements/#duration-literals)).\n          type: string\n          format: duration\n        cron:\n          description: |-\n            [Cron expression](https://en.wikipedia.org/wiki/Cron#Overview) that defines the schedule on which the task runs. Cron scheduling is based on system time.\n            Value is a [Cron expression](https://en.wikipedia.org/wiki/Cron#Overview).\n          type: string\n        offset:\n          description: |-\n            [Duration](https://docs.influxdata.com/flux/v0.x/spec/lexical-elements/#duration-literals) to delay execution of the task after the scheduled time has elapsed. `0` removes the offset.\n            The value is a [duration literal](https://docs.influxdata.com/flux/v0.x/spec/lexical-elements/#duration-literals).\n          type: string\n          format: duration\n        latestCompleted:\n          description: |-\n            Timestamp of the latest scheduled and completed run.\n            Value is a timestamp in [RFC3339 date/time format](https://docs.influxdata.com/flux/v0.x/data-types/basic/time/#time-syntax).\n          type: string\n          format: date-time\n          readOnly: true\n        lastRunStatus:\n          readOnly: true\n          type: string\n          enum:\n            - failed\n            - success\n            - canceled\n        lastRunError:\n          readOnly: true\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: /api/v2/tasks/1\n            owners: /api/v2/tasks/1/owners\n            members: /api/v2/tasks/1/members\n            labels: /api/v2/tasks/1/labels\n            runs: /api/v2/tasks/1/runs\n            logs: /api/v2/tasks/1/logs\n          properties:\n            self:\n              $ref: '#/components/schemas/Link'\n            owners:\n              $ref: '#/components/schemas/Link'\n            members:\n              $ref: '#/components/schemas/Link'\n            runs:\n              $ref: '#/components/schemas/Link'\n            logs:\n              $ref: '#/components/schemas/Link'\n            labels:\n              $ref: '#/components/schemas/Link'\n      required:\n        - id\n        - name\n        - orgID\n        - flux\n    TaskStatusType:\n      type: string\n      enum:\n        - active\n        - inactive\n    UserResponse:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        oauthID:\n          type: string\n        name:\n          type: string\n        status:\n          description: If inactive the user is inactive.\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: /api/v2/users/1\n          properties:\n            self:\n              type: string\n              format: uri\n      required:\n        - name\n    Flags:\n      type: object\n      additionalProperties: true\n    ResourceMember:\n      allOf:\n        - $ref: '#/components/schemas/UserResponse'\n        - type: object\n          properties:\n            role:\n              type: string\n              default: member\n              enum:\n                - member\n    ResourceMembers:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceMember'\n    ResourceOwner:\n      allOf:\n        - $ref: '#/components/schemas/UserResponse'\n        - type: object\n          properties:\n            role:\n              type: string\n              default: owner\n              enum:\n                - owner\n    ResourceOwners:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceOwner'\n    FluxSuggestions:\n      type: object\n      properties:\n        funcs:\n          type: array\n          items:\n            $ref: '#/components/schemas/FluxSuggestion'\n    FluxSuggestion:\n      type: object\n      properties:\n        name:\n          type: string\n        params:\n          type: object\n          additionalProperties:\n            type: string\n    Routes:\n      properties:\n        authorizations:\n          type: string\n          format: uri\n        buckets:\n          type: string\n          format: uri\n        dashboards:\n          type: string\n          format: uri\n        external:\n          type: object\n          properties:\n            statusFeed:\n              type: string\n              format: uri\n        variables:\n          type: string\n          format: uri\n        me:\n          type: string\n          format: uri\n        flags:\n          type: string\n          format: uri\n        orgs:\n          type: string\n          format: uri\n        query:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n            ast:\n              type: string\n              format: uri\n            analyze:\n              type: string\n              format: uri\n            suggestions:\n              type: string\n              format: uri\n        setup:\n          type: string\n          format: uri\n        signin:\n          type: string\n          format: uri\n        signout:\n          type: string\n          format: uri\n        sources:\n          type: string\n          format: uri\n        system:\n          type: object\n          properties:\n            metrics:\n              type: string\n              format: uri\n            debug:\n              type: string\n              format: uri\n            health:\n              type: string\n              format: uri\n        tasks:\n          type: string\n          format: uri\n        telegrafs:\n          type: string\n          format: uri\n        users:\n          type: string\n          format: uri\n        write:\n          type: string\n          format: uri\n    Error:\n      properties:\n        code:\n          description: code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - unprocessable entity\n            - empty value\n            - unavailable\n            - forbidden\n            - too many requests\n            - unauthorized\n            - method not allowed\n            - request too large\n            - unsupported media type\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: Describes the logical code operation when the error occurred. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: Stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n      required:\n        - code\n    LineProtocolError:\n      properties:\n        code:\n          description: Code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - empty value\n            - unavailable\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: Describes the logical code operation when the error occurred. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: Stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n        line:\n          readOnly: true\n          description: First line in the request body that contains malformed data.\n          type: integer\n          format: int32\n      required:\n        - code\n    LineProtocolLengthError:\n      properties:\n        code:\n          description: Code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - invalid\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n      required:\n        - code\n        - message\n    Field:\n      type: object\n      properties:\n        value:\n          description: value is the value of the field.  Meaning of the value is implied by the `type` key\n          type: string\n        type:\n          description: '`type` describes the field type. `func` is a function. `field` is a field reference.'\n          type: string\n          enum:\n            - func\n            - field\n            - integer\n            - number\n            - regex\n            - wildcard\n        alias:\n          description: Alias overrides the field name in the returned response.  Applies only if type is `func`\n          type: string\n        args:\n          description: Args are the arguments to the function\n          type: array\n          items:\n            $ref: '#/components/schemas/Field'\n    BuilderConfig:\n      type: object\n      properties:\n        buckets:\n          type: array\n          items:\n            type: string\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/BuilderTagsType'\n        functions:\n          type: array\n          items:\n            $ref: '#/components/schemas/BuilderFunctionsType'\n        aggregateWindow:\n          type: object\n          properties:\n            period:\n              type: string\n            fillValues:\n              type: boolean\n    BuilderTagsType:\n      type: object\n      properties:\n        key:\n          type: string\n        values:\n          type: array\n          items:\n            type: string\n        aggregateFunctionType:\n          $ref: '#/components/schemas/BuilderAggregateFunctionType'\n    BuilderAggregateFunctionType:\n      type: string\n      enum:\n        - filter\n        - group\n    BuilderFunctionsType:\n      type: object\n      properties:\n        name:\n          type: string\n    DashboardQuery:\n      type: object\n      properties:\n        text:\n          type: string\n          description: The text of the Flux query.\n        editMode:\n          $ref: '#/components/schemas/QueryEditMode'\n        name:\n          type: string\n        builderConfig:\n          $ref: '#/components/schemas/BuilderConfig'\n    QueryEditMode:\n      type: string\n      enum:\n        - builder\n        - advanced\n    Axis:\n      type: object\n      description: Axis used in a visualization.\n      properties:\n        bounds:\n          type: array\n          minItems: 0\n          maxItems: 2\n          description: 'The extents of the axis in the form [lower, upper]. Clients determine whether bounds are inclusive or exclusive of their limits.'\n          items:\n            type: string\n        label:\n          description: Description of the axis.\n          type: string\n        prefix:\n          description: Label prefix for formatting axis values.\n          type: string\n        suffix:\n          description: Label suffix for formatting axis values.\n          type: string\n        base:\n          description: Radix for formatting axis values.\n          type: string\n          enum:\n            - ''\n            - '2'\n            - '10'\n        scale:\n          $ref: '#/components/schemas/AxisScale'\n    AxisScale:\n      description: 'Scale is the axis formatting scale. Supported: \"log\", \"linear\"'\n      type: string\n      enum:\n        - log\n        - linear\n    DashboardColor:\n      type: object\n      description: Defines an encoding of data value into color space.\n      required:\n        - id\n        - type\n        - hex\n        - name\n        - value\n      properties:\n        id:\n          description: The unique ID of the view color.\n          type: string\n        type:\n          description: Type is how the color is used.\n          type: string\n          enum:\n            - min\n            - max\n            - threshold\n            - scale\n            - text\n            - background\n        hex:\n          description: The hex number of the color\n          type: string\n          maxLength: 7\n          minLength: 7\n        name:\n          description: The user-facing name of the hex color.\n          type: string\n        value:\n          description: The data value mapped to this color.\n          type: number\n          format: float\n    RenamableField:\n      description: Describes a field that can be renamed and made visible or invisible.\n      type: object\n      properties:\n        internalName:\n          description: The calculated name of a field.\n          readOnly: true\n          type: string\n        displayName:\n          description: The name that a field is renamed to by the user.\n          type: string\n        visible:\n          description: Indicates whether this field should be visible on the table.\n          type: boolean\n    XYViewProperties:\n      type: object\n      required:\n        - type\n        - geom\n        - queries\n        - shape\n        - axes\n        - colors\n        - note\n        - showNoteWhenEmpty\n        - position\n      properties:\n        timeFormat:\n          type: string\n        type:\n          type: string\n          enum:\n            - xy\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        colorMapping:\n          description: An object that contains information about the color mapping\n          $ref: '#/components/schemas/ColorMapping'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        axes:\n          $ref: '#/components/schemas/Axes'\n        staticLegend:\n          $ref: '#/components/schemas/StaticLegend'\n        xColumn:\n          type: string\n        generateXAxisTicks:\n          type: array\n          items:\n            type: string\n        xTotalTicks:\n          type: integer\n        xTickStart:\n          type: number\n          format: float\n        xTickStep:\n          type: number\n          format: float\n        yColumn:\n          type: string\n        generateYAxisTicks:\n          type: array\n          items:\n            type: string\n        yTotalTicks:\n          type: integer\n        yTickStart:\n          type: number\n          format: float\n        yTickStep:\n          type: number\n          format: float\n        shadeBelow:\n          type: boolean\n        hoverDimension:\n          type: string\n          enum:\n            - auto\n            - x\n            - 'y'\n            - xy\n        position:\n          type: string\n          enum:\n            - overlaid\n            - stacked\n        geom:\n          $ref: '#/components/schemas/XYGeom'\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    XYGeom:\n      type: string\n      enum:\n        - line\n        - step\n        - stacked\n        - bar\n        - monotoneX\n    BandViewProperties:\n      type: object\n      required:\n        - type\n        - geom\n        - queries\n        - shape\n        - axes\n        - colors\n        - note\n        - showNoteWhenEmpty\n      properties:\n        timeFormat:\n          type: string\n        type:\n          type: string\n          enum:\n            - band\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        axes:\n          $ref: '#/components/schemas/Axes'\n        staticLegend:\n          $ref: '#/components/schemas/StaticLegend'\n        xColumn:\n          type: string\n        generateXAxisTicks:\n          type: array\n          items:\n            type: string\n        xTotalTicks:\n          type: integer\n        xTickStart:\n          type: number\n          format: float\n        xTickStep:\n          type: number\n          format: float\n        yColumn:\n          type: string\n        generateYAxisTicks:\n          type: array\n          items:\n            type: string\n        yTotalTicks:\n          type: integer\n        yTickStart:\n          type: number\n          format: float\n        yTickStep:\n          type: number\n          format: float\n        upperColumn:\n          type: string\n        mainColumn:\n          type: string\n        lowerColumn:\n          type: string\n        hoverDimension:\n          type: string\n          enum:\n            - auto\n            - x\n            - 'y'\n            - xy\n        geom:\n          $ref: '#/components/schemas/XYGeom'\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    LinePlusSingleStatProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - shape\n        - axes\n        - colors\n        - note\n        - showNoteWhenEmpty\n        - prefix\n        - suffix\n        - decimalPlaces\n        - position\n      properties:\n        timeFormat:\n          type: string\n        type:\n          type: string\n          enum:\n            - line-plus-single-stat\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        axes:\n          $ref: '#/components/schemas/Axes'\n        staticLegend:\n          $ref: '#/components/schemas/StaticLegend'\n        xColumn:\n          type: string\n        generateXAxisTicks:\n          type: array\n          items:\n            type: string\n        xTotalTicks:\n          type: integer\n        xTickStart:\n          type: number\n          format: float\n        xTickStep:\n          type: number\n          format: float\n        yColumn:\n          type: string\n        generateYAxisTicks:\n          type: array\n          items:\n            type: string\n        yTotalTicks:\n          type: integer\n        yTickStart:\n          type: number\n          format: float\n        yTickStep:\n          type: number\n          format: float\n        shadeBelow:\n          type: boolean\n        hoverDimension:\n          type: string\n          enum:\n            - auto\n            - x\n            - 'y'\n            - xy\n        position:\n          type: string\n          enum:\n            - overlaid\n            - stacked\n        prefix:\n          type: string\n        suffix:\n          type: string\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    MosaicViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - xColumn\n        - ySeriesColumns\n        - fillColumns\n        - xDomain\n        - yDomain\n        - xAxisLabel\n        - yAxisLabel\n        - xPrefix\n        - yPrefix\n        - xSuffix\n        - ySuffix\n      properties:\n        timeFormat:\n          type: string\n        type:\n          type: string\n          enum:\n            - mosaic\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            type: string\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        xColumn:\n          type: string\n        generateXAxisTicks:\n          type: array\n          items:\n            type: string\n        xTotalTicks:\n          type: integer\n        xTickStart:\n          type: number\n          format: float\n        xTickStep:\n          type: number\n          format: float\n        yLabelColumnSeparator:\n          type: string\n        yLabelColumns:\n          type: array\n          items:\n            type: string\n        ySeriesColumns:\n          type: array\n          items:\n            type: string\n        fillColumns:\n          type: array\n          items:\n            type: string\n        xDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        yDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        xAxisLabel:\n          type: string\n        yAxisLabel:\n          type: string\n        xPrefix:\n          type: string\n        xSuffix:\n          type: string\n        yPrefix:\n          type: string\n        ySuffix:\n          type: string\n        hoverDimension:\n          type: string\n          enum:\n            - auto\n            - x\n            - 'y'\n            - xy\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    ScatterViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - xColumn\n        - yColumn\n        - fillColumns\n        - symbolColumns\n        - xDomain\n        - yDomain\n        - xAxisLabel\n        - yAxisLabel\n        - xPrefix\n        - yPrefix\n        - xSuffix\n        - ySuffix\n      properties:\n        timeFormat:\n          type: string\n        type:\n          type: string\n          enum:\n            - scatter\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            type: string\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        xColumn:\n          type: string\n        generateXAxisTicks:\n          type: array\n          items:\n            type: string\n        xTotalTicks:\n          type: integer\n        xTickStart:\n          type: number\n          format: float\n        xTickStep:\n          type: number\n          format: float\n        yColumn:\n          type: string\n        generateYAxisTicks:\n          type: array\n          items:\n            type: string\n        yTotalTicks:\n          type: integer\n        yTickStart:\n          type: number\n          format: float\n        yTickStep:\n          type: number\n          format: float\n        fillColumns:\n          type: array\n          items:\n            type: string\n        symbolColumns:\n          type: array\n          items:\n            type: string\n        xDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        yDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        xAxisLabel:\n          type: string\n        yAxisLabel:\n          type: string\n        xPrefix:\n          type: string\n        xSuffix:\n          type: string\n        yPrefix:\n          type: string\n        ySuffix:\n          type: string\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    HeatmapViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - xColumn\n        - yColumn\n        - xDomain\n        - yDomain\n        - xAxisLabel\n        - yAxisLabel\n        - xPrefix\n        - yPrefix\n        - xSuffix\n        - ySuffix\n        - binSize\n      properties:\n        timeFormat:\n          type: string\n        type:\n          type: string\n          enum:\n            - heatmap\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            type: string\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        xColumn:\n          type: string\n        generateXAxisTicks:\n          type: array\n          items:\n            type: string\n        xTotalTicks:\n          type: integer\n        xTickStart:\n          type: number\n          format: float\n        xTickStep:\n          type: number\n          format: float\n        yColumn:\n          type: string\n        generateYAxisTicks:\n          type: array\n          items:\n            type: string\n        yTotalTicks:\n          type: integer\n        yTickStart:\n          type: number\n          format: float\n        yTickStep:\n          type: number\n          format: float\n        xDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        yDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        xAxisLabel:\n          type: string\n        yAxisLabel:\n          type: string\n        xPrefix:\n          type: string\n        xSuffix:\n          type: string\n        yPrefix:\n          type: string\n        ySuffix:\n          type: string\n        binSize:\n          type: number\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    SingleStatViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - prefix\n        - tickPrefix\n        - suffix\n        - tickSuffix\n        - decimalPlaces\n      properties:\n        type:\n          type: string\n          enum:\n            - single-stat\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        prefix:\n          type: string\n        tickPrefix:\n          type: string\n        suffix:\n          type: string\n        tickSuffix:\n          type: string\n        staticLegend:\n          $ref: '#/components/schemas/StaticLegend'\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n    HistogramViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - xColumn\n        - fillColumns\n        - xDomain\n        - xAxisLabel\n        - position\n        - binCount\n      properties:\n        type:\n          type: string\n          enum:\n            - histogram\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        xColumn:\n          type: string\n        fillColumns:\n          type: array\n          items:\n            type: string\n        xDomain:\n          type: array\n          items:\n            type: number\n            format: float\n        xAxisLabel:\n          type: string\n        position:\n          type: string\n          enum:\n            - overlaid\n            - stacked\n        binCount:\n          type: integer\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    GaugeViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - prefix\n        - tickPrefix\n        - suffix\n        - tickSuffix\n        - decimalPlaces\n      properties:\n        type:\n          type: string\n          enum:\n            - gauge\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        prefix:\n          type: string\n        tickPrefix:\n          type: string\n        suffix:\n          type: string\n        tickSuffix:\n          type: string\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n    TableViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - tableOptions\n        - fieldOptions\n        - timeFormat\n        - decimalPlaces\n      properties:\n        type:\n          type: string\n          enum:\n            - table\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        tableOptions:\n          type: object\n          properties:\n            verticalTimeAxis:\n              description: verticalTimeAxis describes the orientation of the table by indicating whether the time axis will be displayed vertically\n              type: boolean\n            sortBy:\n              $ref: '#/components/schemas/RenamableField'\n            wrapping:\n              description: Wrapping describes the text wrapping style to be used in table views\n              type: string\n              enum:\n                - truncate\n                - wrap\n                - single-line\n            fixFirstColumn:\n              description: fixFirstColumn indicates whether the first column of the table should be locked\n              type: boolean\n        fieldOptions:\n          description: fieldOptions represent the fields retrieved by the query with customization options\n          type: array\n          items:\n            $ref: '#/components/schemas/RenamableField'\n        timeFormat:\n          description: timeFormat describes the display format for time values according to moment.js date formatting\n          type: string\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n    SimpleTableViewProperties:\n      type: object\n      required:\n        - type\n        - showAll\n        - queries\n        - shape\n        - note\n        - showNoteWhenEmpty\n      properties:\n        type:\n          type: string\n          enum:\n            - simple-table\n        showAll:\n          type: boolean\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n    MarkdownViewProperties:\n      type: object\n      required:\n        - type\n        - shape\n        - note\n      properties:\n        type:\n          type: string\n          enum:\n            - markdown\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        note:\n          type: string\n    CheckViewProperties:\n      type: object\n      required:\n        - type\n        - shape\n        - checkID\n        - queries\n        - colors\n      properties:\n        type:\n          type: string\n          enum:\n            - check\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        checkID:\n          type: string\n        check:\n          $ref: '#/components/schemas/Check'\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          type: number\n          format: float\n        legendOrientationThreshold:\n          type: integer\n    GeoViewLayer:\n      type: object\n      oneOf:\n        - $ref: '#/components/schemas/GeoCircleViewLayer'\n        - $ref: '#/components/schemas/GeoHeatMapViewLayer'\n        - $ref: '#/components/schemas/GeoPointMapViewLayer'\n        - $ref: '#/components/schemas/GeoTrackMapViewLayer'\n    GeoViewLayerProperties:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n          enum:\n            - heatmap\n            - circleMap\n            - pointMap\n            - trackMap\n    GeoCircleViewLayer:\n      allOf:\n        - $ref: '#/components/schemas/GeoViewLayerProperties'\n        - type: object\n          required:\n            - radiusField\n            - radiusDimension\n            - colorField\n            - colorDimension\n            - colors\n          properties:\n            radiusField:\n              type: string\n              description: Radius field\n            radiusDimension:\n              $ref: '#/components/schemas/Axis'\n            colorField:\n              type: string\n              description: Circle color field\n            colorDimension:\n              $ref: '#/components/schemas/Axis'\n            colors:\n              description: Colors define color encoding of data into a visualization\n              type: array\n              items:\n                $ref: '#/components/schemas/DashboardColor'\n            radius:\n              description: Maximum radius size in pixels\n              type: integer\n            interpolateColors:\n              description: Interpolate circle color based on displayed value\n              type: boolean\n    GeoPointMapViewLayer:\n      allOf:\n        - $ref: '#/components/schemas/GeoViewLayerProperties'\n        - type: object\n          required:\n            - colorField\n            - colorDimension\n            - colors\n          properties:\n            colorField:\n              type: string\n              description: Marker color field\n            colorDimension:\n              $ref: '#/components/schemas/Axis'\n            colors:\n              description: Colors define color encoding of data into a visualization\n              type: array\n              items:\n                $ref: '#/components/schemas/DashboardColor'\n            isClustered:\n              description: Cluster close markers together\n              type: boolean\n            tooltipColumns:\n              description: An array for which columns to display in tooltip\n              type: array\n              items:\n                type: string\n    GeoTrackMapViewLayer:\n      allOf:\n        - $ref: '#/components/schemas/GeoViewLayerProperties'\n        - type: object\n          required:\n            - trackWidth\n            - speed\n            - randomColors\n            - trackPointVisualization\n      properties:\n        trackWidth:\n          description: Width of the track\n          type: integer\n        speed:\n          description: Speed of the track animation\n          type: integer\n        randomColors:\n          description: Assign different colors to different tracks\n          type: boolean\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n    GeoHeatMapViewLayer:\n      allOf:\n        - $ref: '#/components/schemas/GeoViewLayerProperties'\n        - type: object\n          required:\n            - intensityField\n            - intensityDimension\n            - radius\n            - blur\n            - colors\n          properties:\n            intensityField:\n              type: string\n              description: Intensity field\n            intensityDimension:\n              $ref: '#/components/schemas/Axis'\n            radius:\n              description: Radius size in pixels\n              type: integer\n            blur:\n              description: Blur for heatmap points\n              type: integer\n            colors:\n              description: Colors define color encoding of data into a visualization\n              type: array\n              items:\n                $ref: '#/components/schemas/DashboardColor'\n    GeoViewProperties:\n      type: object\n      required:\n        - type\n        - shape\n        - queries\n        - note\n        - showNoteWhenEmpty\n        - center\n        - zoom\n        - allowPanAndZoom\n        - detectCoordinateFields\n        - layers\n      properties:\n        type:\n          type: string\n          enum:\n            - geo\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n        shape:\n          type: string\n          enum:\n            - chronograf-v2\n        center:\n          description: Coordinates of the center of the map\n          type: object\n          required:\n            - lat\n            - lon\n          properties:\n            lat:\n              description: Latitude of the center of the map\n              type: number\n              format: double\n            lon:\n              description: Longitude of the center of the map\n              type: number\n              format: double\n        zoom:\n          description: Zoom level used for initial display of the map\n          type: number\n          format: double\n          minimum: 1\n          maximum: 28\n        allowPanAndZoom:\n          description: 'If true, map zoom and pan controls are enabled on the dashboard view'\n          type: boolean\n          default: true\n        detectCoordinateFields:\n          description: 'If true, search results get automatically regroupped so that lon,lat and value are treated as columns'\n          type: boolean\n          default: true\n        useS2CellID:\n          description: 'If true, S2 column is used to calculate lat/lon'\n          type: boolean\n        s2Column:\n          description: String to define the column\n          type: string\n        latLonColumns:\n          $ref: '#/components/schemas/LatLonColumns'\n        mapStyle:\n          description: 'Define map type - regular, satellite etc.'\n          type: string\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: 'If true, will display note when empty'\n          type: boolean\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n        layers:\n          description: List of individual layers shown in the map\n          type: array\n          items:\n            $ref: '#/components/schemas/GeoViewLayer'\n    LatLonColumns:\n      description: Object type to define lat/lon columns\n      type: object\n      required:\n        - lat\n        - lon\n      properties:\n        lat:\n          $ref: '#/components/schemas/LatLonColumn'\n        lon:\n          $ref: '#/components/schemas/LatLonColumn'\n    LatLonColumn:\n      description: Object type for key and column definitions\n      type: object\n      required:\n        - key\n        - column\n      properties:\n        key:\n          description: Key to determine whether the column is tag/field\n          type: string\n        column:\n          description: Column to look up Lat/Lon\n          type: string\n    Axes:\n      description: The viewport for a View's visualizations\n      type: object\n      required:\n        - x\n        - 'y'\n      properties:\n        x:\n          $ref: '#/components/schemas/Axis'\n        'y':\n          $ref: '#/components/schemas/Axis'\n    StaticLegend:\n      description: StaticLegend represents the options specific to the static legend\n      type: object\n      properties:\n        colorizeRows:\n          type: boolean\n        heightRatio:\n          type: number\n          format: float\n        show:\n          type: boolean\n        opacity:\n          type: number\n          format: float\n        orientationThreshold:\n          type: integer\n        valueAxis:\n          type: string\n        widthRatio:\n          type: number\n          format: float\n    DecimalPlaces:\n      description: 'Indicates whether decimal places should be enforced, and how many digits it should show.'\n      type: object\n      properties:\n        isEnforced:\n          description: Indicates whether decimal point setting should be enforced\n          type: boolean\n        digits:\n          description: The number of digits after decimal to display\n          type: integer\n          format: int32\n    ConstantVariableProperties:\n      properties:\n        type:\n          type: string\n          enum:\n            - constant\n        values:\n          type: array\n          items:\n            type: string\n    MapVariableProperties:\n      properties:\n        type:\n          type: string\n          enum:\n            - map\n        values:\n          type: object\n          additionalProperties:\n            type: string\n    QueryVariableProperties:\n      properties:\n        type:\n          type: string\n          enum:\n            - query\n        values:\n          type: object\n          properties:\n            query:\n              type: string\n            language:\n              type: string\n    VariableProperties:\n      type: object\n      oneOf:\n        - $ref: '#/components/schemas/QueryVariableProperties'\n        - $ref: '#/components/schemas/ConstantVariableProperties'\n        - $ref: '#/components/schemas/MapVariableProperties'\n    ViewProperties:\n      oneOf:\n        - $ref: '#/components/schemas/LinePlusSingleStatProperties'\n        - $ref: '#/components/schemas/XYViewProperties'\n        - $ref: '#/components/schemas/SingleStatViewProperties'\n        - $ref: '#/components/schemas/HistogramViewProperties'\n        - $ref: '#/components/schemas/GaugeViewProperties'\n        - $ref: '#/components/schemas/TableViewProperties'\n        - $ref: '#/components/schemas/SimpleTableViewProperties'\n        - $ref: '#/components/schemas/MarkdownViewProperties'\n        - $ref: '#/components/schemas/CheckViewProperties'\n        - $ref: '#/components/schemas/ScatterViewProperties'\n        - $ref: '#/components/schemas/HeatmapViewProperties'\n        - $ref: '#/components/schemas/MosaicViewProperties'\n        - $ref: '#/components/schemas/BandViewProperties'\n        - $ref: '#/components/schemas/GeoViewProperties'\n    View:\n      required:\n        - name\n        - properties\n      properties:\n        links:\n          type: object\n          readOnly: true\n          properties:\n            self:\n              type: string\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        properties:\n          $ref: '#/components/schemas/ViewProperties'\n    Views:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n        views:\n          type: array\n          items:\n            $ref: '#/components/schemas/View'\n    CellUpdate:\n      type: object\n      properties:\n        x:\n          type: integer\n          format: int32\n        'y':\n          type: integer\n          format: int32\n        w:\n          type: integer\n          format: int32\n        h:\n          type: integer\n          format: int32\n    CreateCell:\n      type: object\n      properties:\n        name:\n          type: string\n        x:\n          type: integer\n          format: int32\n        'y':\n          type: integer\n          format: int32\n        w:\n          type: integer\n          format: int32\n        h:\n          type: integer\n          format: int32\n        usingView:\n          type: string\n          description: Makes a copy of the provided view.\n    AnalyzeQueryResponse:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            type: object\n            properties:\n              line:\n                type: integer\n              column:\n                type: integer\n              character:\n                type: integer\n              message:\n                type: string\n    CellWithViewProperties:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Cell'\n        - type: object\n          properties:\n            name:\n              type: string\n            properties:\n              $ref: '#/components/schemas/ViewProperties'\n    Cell:\n      type: object\n      properties:\n        id:\n          type: string\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n            view:\n              type: string\n        x:\n          type: integer\n          format: int32\n        'y':\n          type: integer\n          format: int32\n        w:\n          type: integer\n          format: int32\n        h:\n          type: integer\n          format: int32\n        viewID:\n          type: string\n          description: The reference to a view from the views API.\n    CellsWithViewProperties:\n      type: array\n      items:\n        $ref: '#/components/schemas/CellWithViewProperties'\n    Cells:\n      type: array\n      items:\n        $ref: '#/components/schemas/Cell'\n    Secrets:\n      additionalProperties:\n        type: string\n      example:\n        apikey: abc123xyz\n    SecretKeys:\n      type: object\n      properties:\n        secrets:\n          type: array\n          items:\n            type: string\n    SecretKeysResponse:\n      allOf:\n        - $ref: '#/components/schemas/SecretKeys'\n        - type: object\n          properties:\n            links:\n              readOnly: true\n              type: object\n              properties:\n                self:\n                  type: string\n                org:\n                  type: string\n    CreateDashboardRequest:\n      properties:\n        orgID:\n          type: string\n          description: The ID of the organization that owns the dashboard.\n        name:\n          type: string\n          description: The user-facing name of the dashboard.\n        description:\n          type: string\n          description: The user-facing description of the dashboard.\n      required:\n        - orgID\n        - name\n    DashboardWithViewProperties:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/CreateDashboardRequest'\n        - type: object\n          properties:\n            links:\n              type: object\n              example:\n                self: /api/v2/dashboards/1\n                cells: /api/v2/dashboards/1/cells\n                owners: /api/v2/dashboards/1/owners\n                members: /api/v2/dashboards/1/members\n                labels: /api/v2/dashboards/1/labels\n                org: /api/v2/labels/1\n              properties:\n                self:\n                  $ref: '#/components/schemas/Link'\n                cells:\n                  $ref: '#/components/schemas/Link'\n                members:\n                  $ref: '#/components/schemas/Link'\n                owners:\n                  $ref: '#/components/schemas/Link'\n                labels:\n                  $ref: '#/components/schemas/Link'\n                org:\n                  $ref: '#/components/schemas/Link'\n            id:\n              readOnly: true\n              type: string\n            meta:\n              type: object\n              properties:\n                createdAt:\n                  type: string\n                  format: date-time\n                updatedAt:\n                  type: string\n                  format: date-time\n            cells:\n              $ref: '#/components/schemas/CellsWithViewProperties'\n            labels:\n              $ref: '#/components/schemas/Labels'\n    Dashboard:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/CreateDashboardRequest'\n        - type: object\n          properties:\n            links:\n              type: object\n              example:\n                self: /api/v2/dashboards/1\n                cells: /api/v2/dashboards/1/cells\n                owners: /api/v2/dashboards/1/owners\n                members: /api/v2/dashboards/1/members\n                labels: /api/v2/dashboards/1/labels\n                org: /api/v2/labels/1\n              properties:\n                self:\n                  $ref: '#/components/schemas/Link'\n                cells:\n                  $ref: '#/components/schemas/Link'\n                members:\n                  $ref: '#/components/schemas/Link'\n                owners:\n                  $ref: '#/components/schemas/Link'\n                labels:\n                  $ref: '#/components/schemas/Link'\n                org:\n                  $ref: '#/components/schemas/Link'\n            id:\n              readOnly: true\n              type: string\n            meta:\n              type: object\n              properties:\n                createdAt:\n                  type: string\n                  format: date-time\n                updatedAt:\n                  type: string\n                  format: date-time\n            cells:\n              $ref: '#/components/schemas/Cells'\n            labels:\n              $ref: '#/components/schemas/Labels'\n    Dashboards:\n      type: object\n      properties:\n        links:\n          $ref: '#/components/schemas/Links'\n        dashboards:\n          type: array\n          items:\n            $ref: '#/components/schemas/Dashboard'\n    TelegrafRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        metadata:\n          type: object\n          properties:\n            buckets:\n              type: array\n              items:\n                type: string\n        config:\n          type: string\n        orgID:\n          type: string\n    TelegrafPluginRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        plugins:\n          type: array\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n              name:\n                type: string\n              alias:\n                type: string\n              description:\n                type: string\n              config:\n                type: string\n        metadata:\n          type: object\n          properties:\n            buckets:\n              type: array\n              items:\n                type: string\n        config:\n          type: string\n        orgID:\n          type: string\n    Telegraf:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/TelegrafRequest'\n        - type: object\n          properties:\n            id:\n              type: string\n              readOnly: true\n            links:\n              type: object\n              readOnly: true\n              example:\n                self: /api/v2/telegrafs/1\n                lables: /api/v2/telegrafs/1/labels\n                owners: /api/v2/telegrafs/1/owners\n                members: /api/v2/telegrafs/1/members\n              properties:\n                self:\n                  $ref: '#/components/schemas/Link'\n                labels:\n                  $ref: '#/components/schemas/Link'\n                members:\n                  $ref: '#/components/schemas/Link'\n                owners:\n                  $ref: '#/components/schemas/Link'\n            labels:\n              readOnly: true\n              $ref: '#/components/schemas/Labels'\n    Telegrafs:\n      type: object\n      properties:\n        configurations:\n          type: array\n          items:\n            $ref: '#/components/schemas/Telegraf'\n    TelegrafPlugin:\n      type: object\n      properties:\n        type:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        config:\n          type: string\n    TelegrafPlugins:\n      type: object\n      properties:\n        version:\n          type: string\n        os:\n          type: string\n        plugins:\n          type: array\n          items:\n            $ref: '#/components/schemas/TelegrafPlugin'\n    IsOnboarding:\n      type: object\n      properties:\n        allowed:\n          description: True means that the influxdb instance has NOT had initial setup; false means that the database has been setup.\n          type: boolean\n    PasswordResetBody:\n      properties:\n        password:\n          type: string\n      required:\n        - password\n    AddResourceMemberRequestBody:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n      required:\n        - id\n    Ready:\n      type: object\n      properties:\n        status:\n          type: string\n          enum:\n            - ready\n        started:\n          type: string\n          format: date-time\n          example: '2019-03-13T10:09:33.891196-04:00'\n        up:\n          type: string\n          example: 14m45.911966424s\n    HealthCheck:\n      type: object\n      required:\n        - name\n        - status\n      properties:\n        name:\n          type: string\n        message:\n          type: string\n        checks:\n          type: array\n          items:\n            $ref: '#/components/schemas/HealthCheck'\n        status:\n          type: string\n          enum:\n            - pass\n            - fail\n        version:\n          type: string\n        commit:\n          type: string\n    Labels:\n      type: array\n      items:\n        $ref: '#/components/schemas/Label'\n    Label:\n      type: object\n      properties:\n        id:\n          readOnly: true\n          type: string\n        orgID:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n          description: Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.\n          example:\n            color: ffb3b3\n            description: this is a description\n    LabelCreateRequest:\n      type: object\n      required:\n        - orgID\n        - name\n      properties:\n        orgID:\n          type: string\n        name:\n          type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n          description: Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.\n          example:\n            color: ffb3b3\n            description: this is a description\n    LabelUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n          description: Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.\n          example:\n            color: ffb3b3\n            description: this is a description\n    LabelMapping:\n      type: object\n      properties:\n        labelID:\n          type: string\n    LabelsResponse:\n      type: object\n      properties:\n        labels:\n          $ref: '#/components/schemas/Labels'\n        links:\n          $ref: '#/components/schemas/Links'\n    LabelResponse:\n      type: object\n      properties:\n        label:\n          $ref: '#/components/schemas/Label'\n        links:\n          $ref: '#/components/schemas/Links'\n    ASTResponse:\n      description: Contains the AST for the supplied Flux query\n      type: object\n      properties:\n        ast:\n          $ref: '#/components/schemas/Package'\n    WritePrecision:\n      type: string\n      enum:\n        - ms\n        - s\n        - us\n        - ns\n    TaskCreateRequest:\n      type: object\n      properties:\n        orgID:\n          description: The ID of the organization that owns this Task.\n          type: string\n        org:\n          description: The name of the organization that owns this Task.\n          type: string\n        status:\n          $ref: '#/components/schemas/TaskStatusType'\n        flux:\n          description: The Flux script to run for this task.\n          type: string\n        description:\n          description: An optional description of the task.\n          type: string\n      required:\n        - flux\n    TaskUpdateRequest:\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/TaskStatusType'\n        flux:\n          description: The Flux script to run for this task.\n          type: string\n        name:\n          description: Override the 'name' option in the flux script.\n          type: string\n        every:\n          description: Override the 'every' option in the flux script.\n          type: string\n        cron:\n          description: Override the 'cron' option in the flux script.\n          type: string\n        offset:\n          description: Override the 'offset' option in the flux script.\n          type: string\n        description:\n          description: An optional description of the task.\n          type: string\n    FluxResponse:\n      description: Rendered flux that backs the check or notification.\n      properties:\n        flux:\n          type: string\n    CheckPatch:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: string\n          enum:\n            - active\n            - inactive\n    CheckDiscriminator:\n      oneOf:\n        - $ref: '#/components/schemas/DeadmanCheck'\n        - $ref: '#/components/schemas/ThresholdCheck'\n        - $ref: '#/components/schemas/CustomCheck'\n      discriminator:\n        propertyName: type\n        mapping:\n          deadman: '#/components/schemas/DeadmanCheck'\n          threshold: '#/components/schemas/ThresholdCheck'\n          custom: '#/components/schemas/CustomCheck'\n    Check:\n      allOf:\n        - $ref: '#/components/schemas/CheckDiscriminator'\n    PostCheck:\n      allOf:\n        - $ref: '#/components/schemas/CheckDiscriminator'\n    Checks:\n      properties:\n        checks:\n          type: array\n          items:\n            $ref: '#/components/schemas/Check'\n        links:\n          $ref: '#/components/schemas/Links'\n    CheckBase:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        orgID:\n          description: The ID of the organization that owns this check.\n          type: string\n        taskID:\n          description: The ID of the task associated with this check.\n          type: string\n        ownerID:\n          description: The ID of creator used to create this check.\n          type: string\n          readOnly: true\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        query:\n          $ref: '#/components/schemas/DashboardQuery'\n        status:\n          $ref: '#/components/schemas/TaskStatusType'\n        description:\n          description: An optional description of the check.\n          type: string\n        latestCompleted:\n          type: string\n          description: 'Timestamp (in RFC3339 date/time format](https://datatracker.ietf.org/doc/html/rfc3339)) of the latest scheduled and completed run.'\n          format: date-time\n          readOnly: true\n        lastRunStatus:\n          readOnly: true\n          type: string\n          enum:\n            - failed\n            - success\n            - canceled\n        lastRunError:\n          readOnly: true\n          type: string\n        labels:\n          $ref: '#/components/schemas/Labels'\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: /api/v2/checks/1\n            labels: /api/v2/checks/1/labels\n            members: /api/v2/checks/1/members\n            owners: /api/v2/checks/1/owners\n            query: /api/v2/checks/1/query\n          properties:\n            self:\n              description: URL for this check\n              $ref: '#/components/schemas/Link'\n            labels:\n              description: URL to retrieve labels for this check\n              $ref: '#/components/schemas/Link'\n            members:\n              description: URL to retrieve members for this check\n              $ref: '#/components/schemas/Link'\n            owners:\n              description: URL to retrieve owners for this check\n              $ref: '#/components/schemas/Link'\n            query:\n              description: URL to retrieve flux script for this check\n              $ref: '#/components/schemas/Link'\n      required:\n        - name\n        - orgID\n        - query\n    ThresholdCheck:\n      allOf:\n        - $ref: '#/components/schemas/CheckBase'\n        - type: object\n          required:\n            - type\n          properties:\n            type:\n              type: string\n              enum:\n                - threshold\n            thresholds:\n              type: array\n              items:\n                $ref: '#/components/schemas/Threshold'\n            every:\n              description: Check repetition interval.\n              type: string\n            offset:\n              description: 'Duration to delay after the schedule, before executing check.'\n              type: string\n            tags:\n              description: List of tags to write to each status.\n              type: array\n              items:\n                type: object\n                properties:\n                  key:\n                    type: string\n                  value:\n                    type: string\n            statusMessageTemplate:\n              description: The template used to generate and write a status message.\n              type: string\n    Threshold:\n      oneOf:\n        - $ref: '#/components/schemas/GreaterThreshold'\n        - $ref: '#/components/schemas/LesserThreshold'\n        - $ref: '#/components/schemas/RangeThreshold'\n      discriminator:\n        propertyName: type\n        mapping:\n          greater: '#/components/schemas/GreaterThreshold'\n          lesser: '#/components/schemas/LesserThreshold'\n          range: '#/components/schemas/RangeThreshold'\n    DeadmanCheck:\n      allOf:\n        - $ref: '#/components/schemas/CheckBase'\n        - type: object\n          required:\n            - type\n          properties:\n            type:\n              type: string\n              enum:\n                - deadman\n            timeSince:\n              description: String duration before deadman triggers.\n              type: string\n            staleTime:\n              description: String duration for time that a series is considered stale and should not trigger deadman.\n              type: string\n            reportZero:\n              description: 'If only zero values reported since time, trigger an alert'\n              type: boolean\n            level:\n              $ref: '#/components/schemas/CheckStatusLevel'\n            every:\n              description: Check repetition interval.\n              type: string\n            offset:\n              description: 'Duration to delay after the schedule, before executing check.'\n              type: string\n            tags:\n              description: List of tags to write to each status.\n              type: array\n              items:\n                type: object\n                properties:\n                  key:\n                    type: string\n                  value:\n                    type: string\n            statusMessageTemplate:\n              description: The template used to generate and write a status message.\n              type: string\n    CustomCheck:\n      allOf:\n        - $ref: '#/components/schemas/CheckBase'\n        - type: object\n          properties:\n            type:\n              type: string\n              enum:\n                - custom\n          required:\n            - type\n    ThresholdBase:\n      properties:\n        level:\n          $ref: '#/components/schemas/CheckStatusLevel'\n        allValues:\n          description: 'If true, only alert if all values meet threshold.'\n          type: boolean\n    GreaterThreshold:\n      allOf:\n        - $ref: '#/components/schemas/ThresholdBase'\n        - type: object\n          required:\n            - type\n            - value\n          properties:\n            type:\n              type: string\n              enum:\n                - greater\n            value:\n              type: number\n              format: float\n    LesserThreshold:\n      allOf:\n        - $ref: '#/components/schemas/ThresholdBase'\n        - type: object\n          required:\n            - type\n            - value\n          properties:\n            type:\n              type: string\n              enum:\n                - lesser\n            value:\n              type: number\n              format: float\n    RangeThreshold:\n      allOf:\n        - $ref: '#/components/schemas/ThresholdBase'\n        - type: object\n          required:\n            - type\n            - min\n            - max\n            - within\n          properties:\n            type:\n              type: string\n              enum:\n                - range\n            min:\n              type: number\n              format: float\n            max:\n              type: number\n              format: float\n            within:\n              type: boolean\n    CheckStatusLevel:\n      description: The state to record if check matches a criteria.\n      type: string\n      enum:\n        - UNKNOWN\n        - OK\n        - INFO\n        - CRIT\n        - WARN\n    RuleStatusLevel:\n      description: The state to record if check matches a criteria.\n      type: string\n      enum:\n        - UNKNOWN\n        - OK\n        - INFO\n        - CRIT\n        - WARN\n        - ANY\n    NotificationRuleUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: string\n          enum:\n            - active\n            - inactive\n    NotificationRuleDiscriminator:\n      oneOf:\n        - $ref: '#/components/schemas/SlackNotificationRule'\n        - $ref: '#/components/schemas/SMTPNotificationRule'\n        - $ref: '#/components/schemas/PagerDutyNotificationRule'\n        - $ref: '#/components/schemas/HTTPNotificationRule'\n        - $ref: '#/components/schemas/TelegramNotificationRule'\n      discriminator:\n        propertyName: type\n        mapping:\n          slack: '#/components/schemas/SlackNotificationRule'\n          smtp: '#/components/schemas/SMTPNotificationRule'\n          pagerduty: '#/components/schemas/PagerDutyNotificationRule'\n          http: '#/components/schemas/HTTPNotificationRule'\n          telegram: '#/components/schemas/TelegramNotificationRule'\n    NotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleDiscriminator'\n    PostNotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleDiscriminator'\n    NotificationRules:\n      properties:\n        notificationRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/NotificationRule'\n        links:\n          $ref: '#/components/schemas/Links'\n    NotificationRuleBase:\n      type: object\n      required:\n        - orgID\n        - status\n        - name\n        - statusRules\n        - endpointID\n      properties:\n        latestCompleted:\n          description: 'Timestamp (in RFC3339 date/time format](https://datatracker.ietf.org/doc/html/rfc3339)) of the latest scheduled and completed run.'\n          type: string\n          format: date-time\n          readOnly: true\n        lastRunStatus:\n          readOnly: true\n          type: string\n          enum:\n            - failed\n            - success\n            - canceled\n        lastRunError:\n          readOnly: true\n          type: string\n        id:\n          readOnly: true\n          type: string\n        endpointID:\n          type: string\n        orgID:\n          description: The ID of the organization that owns this notification rule.\n          type: string\n        taskID:\n          description: The ID of the task associated with this notification rule.\n          type: string\n        ownerID:\n          description: The ID of creator used to create this notification rule.\n          type: string\n          readOnly: true\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        status:\n          $ref: '#/components/schemas/TaskStatusType'\n        name:\n          description: Human-readable name describing the notification rule.\n          type: string\n        sleepUntil:\n          type: string\n        every:\n          description: The notification repetition interval.\n          type: string\n        offset:\n          description: 'Duration to delay after the schedule, before executing check.'\n          type: string\n        runbookLink:\n          type: string\n        limitEvery:\n          description: 'Don''t notify me more than \u003climit\u003e times every \u003climitEvery\u003e seconds. If set, limit cannot be empty.'\n          type: integer\n        limit:\n          description: 'Don''t notify me more than \u003climit\u003e times every \u003climitEvery\u003e seconds. If set, limitEvery cannot be empty.'\n          type: integer\n        tagRules:\n          description: List of tag rules the notification rule attempts to match.\n          type: array\n          items:\n            $ref: '#/components/schemas/TagRule'\n        description:\n          description: An optional description of the notification rule.\n          type: string\n        statusRules:\n          description: List of status rules the notification rule attempts to match.\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/StatusRule'\n        labels:\n          $ref: '#/components/schemas/Labels'\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: /api/v2/notificationRules/1\n            labels: /api/v2/notificationRules/1/labels\n            members: /api/v2/notificationRules/1/members\n            owners: /api/v2/notificationRules/1/owners\n            query: /api/v2/notificationRules/1/query\n          properties:\n            self:\n              description: URL for this endpoint.\n              $ref: '#/components/schemas/Link'\n            labels:\n              description: URL to retrieve labels for this notification rule.\n              $ref: '#/components/schemas/Link'\n            members:\n              description: URL to retrieve members for this notification rule.\n              $ref: '#/components/schemas/Link'\n            owners:\n              description: URL to retrieve owners for this notification rule.\n              $ref: '#/components/schemas/Link'\n            query:\n              description: URL to retrieve flux script for this notification rule.\n              $ref: '#/components/schemas/Link'\n    TagRule:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n        operator:\n          type: string\n          enum:\n            - equal\n            - notequal\n            - equalregex\n            - notequalregex\n    StatusRule:\n      type: object\n      properties:\n        currentLevel:\n          $ref: '#/components/schemas/RuleStatusLevel'\n        previousLevel:\n          $ref: '#/components/schemas/RuleStatusLevel'\n        count:\n          type: integer\n        period:\n          type: string\n    HTTPNotificationRuleBase:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n          enum:\n            - http\n        url:\n          type: string\n    HTTPNotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleBase'\n        - $ref: '#/components/schemas/HTTPNotificationRuleBase'\n    SlackNotificationRuleBase:\n      type: object\n      required:\n        - type\n        - messageTemplate\n      properties:\n        type:\n          type: string\n          enum:\n            - slack\n        channel:\n          type: string\n        messageTemplate:\n          type: string\n    SlackNotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleBase'\n        - $ref: '#/components/schemas/SlackNotificationRuleBase'\n    SMTPNotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleBase'\n        - $ref: '#/components/schemas/SMTPNotificationRuleBase'\n    SMTPNotificationRuleBase:\n      type: object\n      required:\n        - type\n        - subjectTemplate\n        - to\n      properties:\n        type:\n          type: string\n          enum:\n            - smtp\n        subjectTemplate:\n          type: string\n        bodyTemplate:\n          type: string\n        to:\n          type: string\n    PagerDutyNotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleBase'\n        - $ref: '#/components/schemas/PagerDutyNotificationRuleBase'\n    PagerDutyNotificationRuleBase:\n      type: object\n      required:\n        - type\n        - messageTemplate\n      properties:\n        type:\n          type: string\n          enum:\n            - pagerduty\n        messageTemplate:\n          type: string\n    TelegramNotificationRule:\n      allOf:\n        - $ref: '#/components/schemas/NotificationRuleBase'\n        - $ref: '#/components/schemas/TelegramNotificationRuleBase'\n    TelegramNotificationRuleBase:\n      type: object\n      required:\n        - type\n        - messageTemplate\n        - channel\n      properties:\n        type:\n          description: The discriminator between other types of notification rules is \"telegram\".\n          type: string\n          enum:\n            - telegram\n        messageTemplate:\n          description: The message template as a flux interpolated string.\n          type: string\n        parseMode:\n          description: 'Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \"MarkdownV2\" .'\n          type: string\n          enum:\n            - MarkdownV2\n            - HTML\n            - Markdown\n        disableWebPagePreview:\n          description: Disables preview of web links in the sent messages when \"true\". Defaults to \"false\" .\n          type: boolean\n    NotificationEndpointUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: string\n          enum:\n            - active\n            - inactive\n    NotificationEndpointDiscriminator:\n      oneOf:\n        - $ref: '#/components/schemas/SlackNotificationEndpoint'\n        - $ref: '#/components/schemas/PagerDutyNotificationEndpoint'\n        - $ref: '#/components/schemas/HTTPNotificationEndpoint'\n        - $ref: '#/components/schemas/TelegramNotificationEndpoint'\n      discriminator:\n        propertyName: type\n        mapping:\n          slack: '#/components/schemas/SlackNotificationEndpoint'\n          pagerduty: '#/components/schemas/PagerDutyNotificationEndpoint'\n          http: '#/components/schemas/HTTPNotificationEndpoint'\n          telegram: '#/components/schemas/TelegramNotificationEndpoint'\n    NotificationEndpoint:\n      allOf:\n        - $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n    PostNotificationEndpoint:\n      allOf:\n        - $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n    NotificationEndpoints:\n      properties:\n        notificationEndpoints:\n          type: array\n          items:\n            $ref: '#/components/schemas/NotificationEndpoint'\n        links:\n          $ref: '#/components/schemas/Links'\n    NotificationEndpointBase:\n      type: object\n      required:\n        - type\n        - name\n      properties:\n        id:\n          type: string\n        orgID:\n          type: string\n        userID:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        description:\n          description: An optional description of the notification endpoint.\n          type: string\n        name:\n          type: string\n        status:\n          description: The status of the endpoint.\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n        labels:\n          $ref: '#/components/schemas/Labels'\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: /api/v2/notificationEndpoints/1\n            labels: /api/v2/notificationEndpoints/1/labels\n            members: /api/v2/notificationEndpoints/1/members\n            owners: /api/v2/notificationEndpoints/1/owners\n          properties:\n            self:\n              description: URL for this endpoint.\n              $ref: '#/components/schemas/Link'\n            labels:\n              description: URL to retrieve labels for this endpoint.\n              $ref: '#/components/schemas/Link'\n            members:\n              description: URL to retrieve members for this endpoint.\n              $ref: '#/components/schemas/Link'\n            owners:\n              description: URL to retrieve owners for this endpoint.\n              $ref: '#/components/schemas/Link'\n        type:\n          $ref: '#/components/schemas/NotificationEndpointType'\n    SlackNotificationEndpoint:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/NotificationEndpointBase'\n        - type: object\n          properties:\n            url:\n              description: Specifies the URL of the Slack endpoint. Specify either `URL` or `Token`.\n              type: string\n            token:\n              description: Specifies the API token string. Specify either `URL` or `Token`.\n              type: string\n    PagerDutyNotificationEndpoint:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/NotificationEndpointBase'\n        - type: object\n          required:\n            - routingKey\n          properties:\n            clientURL:\n              type: string\n            routingKey:\n              type: string\n    HTTPNotificationEndpoint:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/NotificationEndpointBase'\n        - type: object\n          required:\n            - url\n            - authMethod\n            - method\n          properties:\n            url:\n              type: string\n            username:\n              type: string\n            password:\n              type: string\n            token:\n              type: string\n            method:\n              type: string\n              enum:\n                - POST\n                - GET\n                - PUT\n            authMethod:\n              type: string\n              enum:\n                - none\n                - basic\n                - bearer\n            contentTemplate:\n              type: string\n            headers:\n              type: object\n              description: Customized headers.\n              additionalProperties:\n                type: string\n    TelegramNotificationEndpoint:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/NotificationEndpointBase'\n        - type: object\n          required:\n            - token\n            - channel\n          properties:\n            token:\n              description: 'Specifies the Telegram bot token. See https://core.telegram.org/bots#creating-a-new-bot .'\n              type: string\n            channel:\n              description: 'ID of the telegram channel, a chat_id in https://core.telegram.org/bots/api#sendmessage .'\n              type: string\n    NotificationEndpointType:\n      type: string\n      enum:\n        - slack\n        - pagerduty\n        - http\n        - telegram\n    DBRP:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the DBRP mapping.\n          readOnly: true\n        orgID:\n          type: string\n          description: ID of the organization that owns this mapping.\n        bucketID:\n          type: string\n          description: ID of the bucket used as the target for the translation.\n        database:\n          type: string\n          description: InfluxDB v1 database\n        retention_policy:\n          type: string\n          description: InfluxDB v1 retention policy\n        default:\n          type: boolean\n          description: Mapping represents the default retention policy for the database specified.\n        links:\n          $ref: '#/components/schemas/Links'\n      required:\n        - id\n        - orgID\n        - bucketID\n        - database\n        - retention_policy\n        - default\n    DBRPs:\n      properties:\n        content:\n          type: array\n          items:\n            $ref: '#/components/schemas/DBRP'\n    DBRPUpdate:\n      properties:\n        retention_policy:\n          type: string\n          description: InfluxDB v1 retention policy\n        default:\n          type: boolean\n    DBRPCreate:\n      type: object\n      properties:\n        orgID:\n          type: string\n          description: ID of the organization that owns this mapping.\n        org:\n          type: string\n          description: Name of the organization that owns this mapping.\n        bucketID:\n          type: string\n          description: ID of the bucket used as the target for the translation.\n        database:\n          type: string\n          description: InfluxDB v1 database\n        retention_policy:\n          type: string\n          description: InfluxDB v1 retention policy\n        default:\n          type: boolean\n          description: Mapping represents the default retention policy for the database specified.\n      required:\n        - bucketID\n        - database\n        - retention_policy\n    DBRPGet:\n      type: object\n      properties:\n        content:\n          $ref: '#/components/schemas/DBRP'\n          required: true\n    SchemaType:\n      type: string\n      enum:\n        - implicit\n        - explicit\n    ColorMapping:\n      type: object\n      description: A color mapping is an object that maps time series data to a UI color scheme to allow the UI to render graphs consistent colors across reloads.\n      additionalProperties:\n        type: string\n      example:\n        series_id_1: '#edf529'\n        series_id_2: '#edf529'\n        measurement_birdmigration_europe: '#663cd0'\n        configcat_deployments-autopromotionblocker: '#663cd0'\n  responses:\n    ServerError:\n      description: Non 2XX error response from server.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n"
		}
	},
	"Error": "unmarshal: callback: json: cannot unmarshal bool into Go struct field Schema.required of type []string"
}