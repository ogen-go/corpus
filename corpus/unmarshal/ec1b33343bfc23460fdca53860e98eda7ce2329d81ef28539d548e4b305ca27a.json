{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/uc-cdis/fence"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "openapis/swagger.yaml",
			"byteSize": 82835,
			"content": "---\nopenapi: 3.0.0\nservers:\n  - url: 'https://example.domain/'\ninfo:\n  title: Fence OpenAPI Specification\n  version: 0.1.0\n  description: >-\n    Access management for Gen3 data commons. Code is available on\n    [GitHub](https://github.com/uc-cdis/fence).\n  termsOfService: 'http://cdis.uchicago.edu/terms/'\n  contact:\n    email: cdis@uchicago.edu\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: oauth2\n    description: Authorization and token management\n  - name: user\n    description: User information\n  - name: logout\n    description: Log out the current user\n  - name: data\n    description: Generate signed URLs\n  - name: credentials\n    description: Access credentials\n  - name: credentials/google\n    description: Google Credentials\n  - name: credentials/cdis\n    description: Deprecated! Use credentials/api\n  - name: credentials/api\n    description: API Credentials\n  - name: 'credentials/{provider}'\n    description: Other provider credentials\n  - name: link\n    description: Link access identities\n  - name: google\n    description: Google functionality\n  - name: keys\n    description: Get public keys used to validate JWTs issued by fence\n  - name: system\n    description: System endpoints\npaths:\n  /_status:\n    get:\n      tags:\n        - system\n      summary: Returns if Fence is healthy or not\n      description: >-\n        Health check endpoint\n      produces:\n        - application/text\n      responses:\n        '200':\n          description: Healthy\n        default:\n          description: Unhealthy\n  /_version:\n    get:\n      tags:\n        - system\n      summary: Returns the version of Fence\n      produces:\n        - application/json\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/SystemVersionOutputRef'\n  /oauth2/authorize:\n    get:\n      tags:\n        - oauth2\n      summary: Perform OAuth2 authorization\n      description: |\n        **IMPORTANT NOTE**: These docs are provided as a courtesy but do _NOT_ include the entirety of the OIDC Standard\n        simply because of its length and complexity.\n\n        Please [refer to the standard](https://openid.net/specs/openid-connect-core-1_0.html) for complete details.\n\n        Obtain an authorization grant through the OAuth2 protocol. To handle\n        this request, render a page for the user to confirm the OAuth2 grant\n        (through e.g. Google). Redirect user to `redirect_uri` with an added\n        `code` parameter obtained from the authorization provider.\n      operationId: authorize\n      parameters:\n        - name: client_id\n          required: true\n          in: query\n          description: 'The client''s ID, issued by authorization server'\n          schema:\n            type: string\n        - name: response_type\n          required: true\n          in: query\n          description: >-\n            For an authorization request using the access code flow, the\n            response type must be \"code\". If this is missing from the request\n            then the authorization server must return an error.\n          schema:\n            type: string\n        - name: redirect_uri\n          required: true\n          in: query\n          description: Page to redirect to after access has been granted\n          schema:\n            type: string\n        - name: idp\n          required: false\n          in: query\n          description: >-\n            Upstream identity provider to use. Specifying `idp=fence` lets\n            us specify a `fence_idp`. Specifying `idp=shibboleth` lets\n            us specify a `shib_idp`. If no `idp` is specified, defaults to\n            the configured default login.\n          schema:\n            type: string\n          example: 'google'\n        - name: fence_idp\n          required: false\n          in: query\n          description: >-\n            Upstream identity provider to use. Specifying `idp=fence` and\n            `fence_idp=shibboleth` lets us specify a `shib_idp`. If no\n            `fence_idp` is specified, defaults to NIH login.\n          schema:\n            type: string\n          example: 'shibboleth'\n        - name: shib_idp\n          required: false\n          in: query\n          description: >-\n            Identifier for the shibboleth IDP. Available identifiers are what\n            is listed by the `login.bionimbus.org/Shibboleth.sso/DiscoFeed`\n            endpoint. If no `shib_idp` is specified, defaults to NIH login.\n          schema:\n            type: string\n          example: 'urn:mace:incommon:uchicago.edu'\n        - name: scope\n          required: false\n          in: query\n          description: |\n              Requested authorization scope. Must include `openid`. `user` allows getting a user's access information.\n              > NOTE: This is required for [OIDC](http://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)\n          schema:\n            type: string\n        - name: upstream_expires_in\n          required: false\n          in: query\n          description: |\n              the time (in seconds) during which the upstream refresh token (eg. RAS) is valid. Must be less\n              than the configured maximum. If it's greater,\n              the configured maximum will be used.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n    post:\n      tags:\n        - oauth2\n      summary: Perform OAuth2 authorization\n      description: |\n        **IMPORTANT NOTE**: These docs are provided as a courtesy but do _NOT_ include the entirety of the OIDC Standard\n        simply because of its length and complexity.\n\n        Please [refer to the standard](https://openid.net/specs/openid-connect-core-1_0.html) for complete details.\n\n        Obtain an authorization grant through the OAuth2 protocol. To handle\n        this request, render a page for the user to confirm the OAuth2 grant\n        (through e.g. Google). Redirect user to `redirect_uri` with an added\n        `code` parameter obtained from the authorization provider. A POST will\n        not render a page for the user; this implementation checks the `confirm`\n        value in the request.\n      operationId: authorize_post\n      responses:\n        '200':\n          description: successful operation\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                client_id:\n                  description: 'The client''s ID, issued by authorization server'\n                  type: string\n                response_type:\n                  description: >-\n                    For an authorization request using the access code flow, the\n                    response type must be \"code\". If this is missing from the\n                    request then the authorization server must return an error.\n                  type: string\n                  enum:\n                    - code\n                    - token\n                redirect_uri:\n                  description: Page to redirect to after access has been granted\n                  type: string\n                confirm:\n                  description: whether to confirm the OAuth2 grant (should be 'yes')\n                  type: string\n                scope:\n                  description: Requested authorization scope. Must include `openid`. `user` allows getting a user's access information.\n                  type: string\n                upstream_expires_in:\n                  description: the time (in seconds) during which the upstream refresh token (eg. RAS) is valid. Must be less than the configured maximum. If it's greater, the configured maximum will be used.\n                  type: string\n              required:\n                - client_id\n                - response_type\n                - redirect_uri\n  /oauth2/token:\n    post:\n      tags:\n        - oauth2\n      summary: Exchange code for or refresh the access token.\n      description: |\n        **IMPORTANT NOTE**: These docs are provided as a courtesy but do _NOT_ include the entirety of the OIDC Standard\n        simply because of its length and complexity.\n\n        Please [refer to the standard](https://openid.net/specs/openid-connect-core-1_0.html) for complete details.\n\n        Exchange the `code` obtained from OAuth2 for an access token, or refresh\n        the access token using a refresh token.\n      operationId: token\n      responses:\n        '200':\n          description: successful operation\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                grant_type:\n                  description: >-\n                    Value MUST be `\"authorization_code\"` (which is the\n                    authorization flow used in this implementation)\n                  type: string\n                code:\n                  description: >-\n                    The authorization code returned from the OAuth2\n                    authorization request\n                  type: string\n                redirect_uri:\n                  description: >-\n                    Must be identical to the `\"redirect_uri\"` included in the\n                    original authorization request\n                  type: string\n                client_id:\n                  type: string\n              required:\n                - grant_type\n                - code\n                - redirect_uri\n                - client_id\n  /oauth2/revoke:\n    post:\n      tags:\n        - oauth2\n      summary: Revoke a refresh token per RFC 7009\n      description: Revoke a refresh (not access) token granted to a user.\n      operationId: revoke\n      responses:\n        '200':\n          description: 'successful operation, OR invalid token submitted'\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                token:\n                  description: Refresh token that the user wants to revoke\n                  type: string\n              required:\n                - token\n  /login/shib:\n    get:\n      tags:\n        - login\n      summary: Initiate login via shibboleth provider\n      description: |\n        NOTE that this endpoint only exists if shibboleth is enabled as an\n        identity provider in the fence config. Currently this only happens for\n        `login.bionimbus.org`.\n      parameters:\n        - name: shib_idp\n          required: false\n          in: query\n          description: >-\n            Identifier for the shibboleth IDP. Available identifiers are what\n            is listed by the `login.bionimbus.org/Shibboleth.sso/DiscoFeed`\n            endpoint. If no `shib_idp` is specified, defaults to NIH login.\n          schema:\n            type: string\n          example: 'urn:mace:incommon:uchicago.edu'\n      responses:\n        302:\n          description: redirect to external identity provider\n  /login/fence:\n    get:\n      tags:\n        - login\n      summary: Initiate login via Fence provider (multi-tenant Fence)\n      description: |\n        NOTE that this endpoint only exists if fence is enabled as an\n        identity provider in the fence config.\n      parameters:\n        - name: idp\n          required: false\n          in: query\n          description: >-\n            Identifier for the IDP. Specifying `idp=shibboleth` lets us\n            specify a `shib_idp`. If no `idp` is specified, defaults to\n            NIH login.\n          schema:\n            type: string\n          example: 'shibboleth'\n        - name: shib_idp\n          required: false\n          in: query\n          description: >-\n            Identifier for the shibboleth IDP. Available identifiers are what\n            is listed by the `login.bionimbus.org/Shibboleth.sso/DiscoFeed`\n            endpoint. If no `shib_idp` is specified, defaults to NIH login.\n          schema:\n            type: string\n          example: 'urn:mace:incommon:uchicago.edu'\n      responses:\n        302:\n          description: redirect to external identity provider\n  /jwt/keys:\n    get:\n      tags:\n        - keys\n      summary: >-\n        Return the public keys which can be used to validate JWTs issued and\n        signed by fence\n      operationId: getKeys\n      responses:\n        '200':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/PublicKeys'\n  /user:\n    get:\n      tags:\n        - user\n      summary: Return info about the current user\n      description: >-\n        **IMPORTANT NOTE**: These docs are provided as a courtesy but do _NOT_ include the entirety of the OIDC Standard\n        simply because of its length and complexity.\n\n        Please [refer to the standard](https://openid.net/specs/openid-connect-core-1_0.html) for complete details.\n      security:\n        - OAuth2:\n            - user\n      operationId: getUserInfo\n      responses:\n        '200':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/UserInfo'\n  /logout:\n    get:\n      tags:\n        - logout\n      summary: Log out the current user\n      description: Log out the current user and redirect to the provided url.\n                   The logout will propogate, depending on the identity provider.\n      parameters:\n        - in: query\n          name: next\n          schema:\n            type: string\n          description: The url to redirect the user to after logout\n          required: false\n        - in: query\n          name: force_era_global_logout\n          schema:\n            type: boolean\n          description: Use era commons itrust to logout\n          required: false\n      responses:\n        '302':\n          description: redirect to root or url in parameter if provided\n  /data/{file_id}:\n    delete:\n      tags:\n        - data\n      summary: delete all locations of a stored data file and remove its record from indexd\n      description: >-\n        After a user uploads a data file and it is registered in indexd (before\n        or after it is mapped into the graph via metadata submission), this\n        endpoint will delete the file from its storage locations (saved in the\n        record in indexd) and delete the record in indexd.\n      security:\n        - OAuth2:\n          - data\n      responses:\n        204:\n          description: successful operation\n        500:\n          description: >-\n            internal server error; could not delete stored files, or not able to\n            delete indexd record\n          content-type: application/json\n  '/data/download/{file_id}':\n    get:\n      tags:\n        - data\n      summary: Create a signed URL for data download given a file_id\n      description: Allow users to get a signed URL for a data file.\n      security:\n        - OAuth2:\n            - user\n      operationId: downloadSignedURL\n      parameters:\n        - name: file_id\n          required: true\n          in: path\n          description: data UUID\n          schema:\n            type: string\n        - name: protocol\n          required: false\n          in: query\n          description: >-\n            a protocol provided by storage provider, e.g. http, ftp, s3, gs\n          schema:\n            type: string\n            enum:\n              - http\n              - s3\n              - gs\n        - name: expires_in\n          required: false\n          in: query\n          description: >-\n            the time (in seconds) in which return url is valid. Must be less\n            than the configured maximum (default is 3600). If it's greater,\n            the configured maximum will be used.\n          schema:\n            type: integer\n        - name: redirect\n          required: false\n          in: query\n          description: >-\n            if set, then a redirect to the signed url will be sent.\n            Otherwise, json data with the url is returned.\n          schema:\n            type: boolean\n        - name: no_force_sign\n          required: false\n          in: query\n          description: >-\n            if `no_force_sign=True`, this will\n            request to *not* sign the resulting URL (i.e. just provide the\n            public url without using anonymous signing creds).\n          schema:\n            type: boolean\n        - name: userProject\n          required: false\n          in: query\n          description: >-\n            a Google Project to bill for accessing data in requester pays buckets in Google Storage.\n            Will override any configured default billing projects. If Fence is configured\n            to automatically attempt to provide the necessary service account(s) billing permission,\n            the provided Google Project will need to have given the Fence admin service account\n            necessary permissions to create custom roles and set Project IAM policies. Please see\n            README for more information.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/SignedURL'\n        '400':\n          description: 'Invalid input: UUID not found or invalid location'\n        '404':\n          description: 'No location found for this file'\n  '/ga4gh/drs/v1/objects/{object_id}/access/{access_id}':\n    get:\n      summary: GA4GH DRS Access API to get a URL for fetching bytes.\n      description: >-\n        Returns a URL that can be used to fetch the bytes of a DrsObject.\n        This method only needs to be called when using an AccessMethod that contains an access_id\n        (e.g., for servers that use signed URLs for fetching object bytes).\n      operationId: GetAccessURL\n      responses:\n        '200':\n          description: The access URL was found successfully.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/AccessURL'\n        '400':\n          description: The request is malformed.\n        '401':\n          description: The request is unauthorized.\n        '404':\n          description: The requested access URL wasn't found\n        '403':\n          description: The requester is not authorized to perform this action.\n        '500':\n          description: An unexpected error occurred.\n      parameters:\n        - name: object_id\n          schema:\n            type: string\n          in: path\n          required: true\n          description: An id of a DrsObject\n        - name: access_id\n          schema:\n            type: string\n          in: path\n          required: true\n          description: An access_id from the access_methods list of a DrsObject\n      tags:\n        - data\n  '/data/upload':\n    post:\n      tags:\n        - data\n      summary: >-\n        Create a new blank record in indexd to use for uploading a data file\n        less than 5GB. For files larger than 5GB, please use multipart upload presigned url\n      description: |\n        This is the first step on the API side for the data upload flow.  This\n        endpoint causes fence to make a request to indexd to create a new, blank\n        index record, and returns the GUID for this new record and a presigned\n        URL which a client can then use to upload their data file directly to a\n        storage bucket. No parameters are accepted because fence retrieves the\n        username from the current token to send to indexd for the `uploader`\n        field in the new record.\n\n        This API also supports utilizing the newer authorization within the indexing\n        service by providing an \"authz\" field.\n\n        If an \"authz\" field is provided, the authorization checks are slightly different:\n        your user must have *both* \"create\" and \"write-storage\" permission on the resources\n        you are including in the \"authz\" list.\n\n        In addition to a different authorization check, when \"authz\" is provided the\n        \"uploader\" field in indexd with *not* be populated.\n\n        Previous authorization check requires a more general, global upload permission:\n        \"file_upload\" on \"/data_file\" resource. When \"authz\" is *not* provided, this\n        endpoint will check for that permission for your user.\n      security:\n        - OAuth2:\n          - user\n          - data\n      operationId: uploadBlank\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestUploadBlank'\n      responses:\n        201:\n          description: successful operation; created new record in indexd\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  guid:\n                    type: string\n                    description: >-\n                      the GUID from the newly created record in indexd\n                  url:\n                    type: string\n                    description: the presigned URL usable for data upload\n  '/data/upload/{file_id}':\n    get:\n      tags:\n        - data\n      summary: Create a signed URL for data upload specified by file_id\n      description: >-\n        Allow users to get a signed URL to upload data given the location of\n        preference.\n      security:\n        - OAuth2:\n            - user\n      operationId: uploadSignedURL\n      parameters:\n        - name: file_id\n          required: true\n          in: path\n          description: data UUID\n          schema:\n            type: string\n        - name: protocol\n          required: false\n          in: query\n          description: >-\n            a protocol provided by storage provider, e.g. http, ftp, s3, gs\n          schema:\n            type: string\n            enum:\n              - http\n              - s3\n        - name: expires_in\n          required: false\n          in: query\n          description: >-\n            the time (in seconds) in which return url is valid. Must be less\n            than the configured maximum (default is 3600). If it's greater,\n            the configured maximum will be used.\n          schema:\n            type: integer\n        - name: file_name\n          required: false\n          in: query\n          description: >-\n            the requested file name in the cloud bucket you will upload to.\n            if not provided, will use the GUID/file_id\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/SignedURL'\n        '400':\n          description: 'Invalid input: UUID not found or invalid location'\n  '/multipart/init':\n    post:\n      tags:\n        - data\n      summary: >-\n        Initilize a multipart upload for AWS bucket. It returns an uploadId which\n        can be used for uploading object parts (see /multipart/upload) and completing\n        the upload (see /multipart/complete)\n      description: >-\n        For uploading the big file with the size is larger than 5GB in data upload\n        flow, Fence needs to provide a list of endpoints for supporting multipart upload presigned url\n        This is the first step on the API side for the multipart upload presigned url. This endpoint\n        causes fence to make a request to indexd to create a new, blank index record, and returns\n        the GUID for this new record and an uploadId for multipart upload presigned url\n      security:\n        - OAuth2:\n          - user\n          - data\n      operationId: multipartUploadInit\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestUploadBlank'\n      responses:\n        201:\n          description: successful operation; created new blank record in indexd and uploadId for multipart upload\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  guid:\n                    type: string\n                    description: >-\n                      the GUID from the newly created record in indexd\n                  uploadId:\n                    type: string\n                    description: the uploadId for multipart upload presigned URL usable for data upload\n\n  '/multipart/upload':\n    post:\n      tags:\n        - data\n      summary: >-\n        Upload an object part given uploadId\n      description: >-\n        This is the second step on the API side for the multipart upload presigned url. The object is chopped into\n        multiple parts with part number start from 1. Each part is submitted to the cloud resource with this\n        endpoint by providing the part number a long with uploadId. It is worth to mention that the minimal supported\n        part size is 5 MB as describe in https://docs.aws.amazon.com/AmazonS3/latest/dev/qfacts.html\n      security:\n        - OAuth2:\n          - user\n          - data\n      operationId: multipartUpload\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestMultipartUpload'\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  presigned_url:\n                    type: string\n                    description: the presigned URL for uploading part\n\n  '/multipart/complete':\n    post:\n      tags:\n        - data\n      summary: >-\n        Complete aws multipart upload\n      description: >-\n        This is the last step for the multipart upload presigned url. All the parts which were submitted\n        need to be combined together. This enpoint takes a list of the part info (partNumber, Etag)\n        and uploadId in order to finish the upload\n      security:\n        - OAuth2:\n          - user\n          - data\n      operationId: multipartUploadComplete\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CompleteMultipartUpload'\n      responses:\n        200:\n          description: successful operation\n\n  /credentials:\n    get:\n      tags:\n        - credentials\n      summary: List credential resources\n      description: List different resources user can have credentials\n      security:\n        - OAuth2:\n            - user\n      operationId: listSources\n      responses:\n        '200':\n          description: successful operation\n  /credentials/google:\n    get:\n      tags:\n        - credentials/google\n      summary: List access keys\n      description: List all the Google access keys for the current user\n      security:\n        - OAuth2:\n            - user\n      operationId: listGoogleKeypairs\n      responses:\n        '200':\n          description: Google keys info response\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GoogleKeys'\n    post:\n      tags:\n        - credentials/google\n      summary: Receive temporary access key\n      description: >-\n        Get a new temporary Google access key for the current user. The response\n        from this represents exactly what should be placed in a JSON credentials\n        file to pass to Google's APIs.\n      security:\n        - OAuth2:\n            - user\n      operationId: getGoogleKeypair\n      parameters:\n        - name: expires_in\n          required: false\n          in: query\n          description: >-\n            the time (in seconds) during which the access key is valid. Must be less\n            than the configured maximum (default is 10 days). If it's greater,\n            the configured maximum will be used.\n          schema:\n            type: integer\n        - name: userProject\n          required: false\n          in: query\n          description: >-\n            a Google Project to bill for accessing data in requester pays buckets in Google Storage.\n            Will override any configured default billing projects. If Fence is configured\n            to automatically attempt to provide the necessary service account(s) billing permission,\n            the provided Google Project will need to have given the Fence admin service account\n            necessary permissions to create custom roles and set Project IAM policies. Please see\n            README for more information.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Temporary private Google key in Google Credentials File format\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GoogleKey'\n    delete:\n      tags:\n        - credentials/google\n      summary: Delete access keys\n      description: Delete all Google access key for the current user/client\n      security:\n        - OAuth2:\n            - user\n      operationId: deleteAllGoogleKeypair\n      parameters:\n        - name: all\n          required: true\n          in: query\n          description: Must be \"true\" to delete all keys\n          schema:\n            type: string\n      responses:\n        '204':\n          description: successful deletion\n        '404':\n          description: >-\n            Couldn't find key or service account for current user, unable to\n            delete given key\n        '405':\n          description: >-\n            all param not provided and is required to explicitly delete all keys\n  '/credentials/google/{access_key}':\n    delete:\n      tags:\n        - credentials/google\n      summary: Delete access key\n      description: Delete a Google access key for the current user\n      security:\n        - OAuth2:\n            - user\n      operationId: deleteGoogleKeypair\n      parameters:\n        - name: access_key\n          required: true\n          in: path\n          description: Google Key ID\n          schema:\n            type: string\n      responses:\n        '204':\n          description: successful deletion\n        '404':\n          description: >-\n            Couldn't find key or service account for current user, unable to\n            delete given key\n  /credentials/cdis:\n    get:\n      deprecated: true\n      tags:\n        - credentials/cdis\n      summary: List API keys for user\n      description: List all the API keys for the current user\n      security:\n        - OAuth2:\n            - user\n      operationId: listCDISKeypairs\n      responses:\n        '200':\n          description: List of API keys issued to user and their expiration\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/APIKeys'\n    post:\n      deprecated: true\n      tags:\n        - credentials/cdis\n      summary: Receive API key\n      description: >-\n        Get a new API key for the current user. API keys can be used to retrieve\n        access tokens which will allow for authed communication to our API.\n      security:\n        - OAuth2:\n            - user\n      operationId: getCDISKeypair\n      responses:\n        '200':\n          description: API key id and actual key\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/NewAPIKey'\n  '/credentials/cdis/{key_id}':\n    delete:\n      deprecated: true\n      tags:\n        - credentials/cdis\n      summary: Delete user API key\n      description: Delete a API access key for the current user\n      security:\n        - OAuth2:\n            - user\n      operationId: deleteCDISKeypair\n      parameters:\n        - name: key_id\n          required: true\n          in: path\n          description: API Key key_id/jti\n          schema:\n            type: string\n      responses:\n        '204':\n          description: successful deletion\n        '404':\n          description: 'Couldn''t find key for current user, unable to delete given key'\n  /credentials/cdis/access_token:\n    post:\n      deprecated: true\n      tags:\n        - credentials/cdis\n      summary: Receive access token when given API key\n      description: >-\n        Get a new temporary access token for the current user by providing a\n        valid API key.\n      security:\n        - OAuth2:\n            - user\n      operationId: getCDISAccessToken\n      responses:\n        '200':\n          description: Access token\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/AccessToken'\n      requestBody:\n        $ref: '#/components/requestBodies/APIKey'\n  /credentials/api:\n    get:\n      tags:\n        - credentials/api\n      summary: List API keys for user\n      description: List all the API keys for the current user\n      security:\n        - OAuth2:\n            - user\n      operationId: listAPIKeypairs\n      responses:\n        '200':\n          description: List of API keys issued to user and their expiration\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/APIKeys'\n    post:\n      tags:\n        - credentials/api\n      summary: Receive API key\n      description: >-\n        Get a new API key for the current user. API keys can be used to retrieve\n        access tokens which will allow for authed communication to our API. Can\n        pass a list of requested OIDC scopes in the body. Automatically gives \"openid\" scope.\n        Any additional scopes (like \"user\" for seeing user information or \"data\" for hitting\n        signed url endpoint) must be explicitly requested and user must already have access.\n      security:\n        - OAuth2:\n            - user\n      operationId: getAPIKeypair\n      responses:\n        '200':\n          description: API key id and actual key\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/NewAPIKey'\n      requestBody:\n        $ref: '#/components/requestBodies/APIKeyScopes'\n  '/credentials/api/{key_id}':\n    delete:\n      tags:\n        - credentials/api\n      summary: Delete user API key\n      description: Delete a API access key for the current user\n      security:\n        - OAuth2:\n            - user\n      operationId: deleteAPIKeypair\n      parameters:\n        - name: key_id\n          required: true\n          in: path\n          description: API Key key_id/jti\n          schema:\n            type: string\n      responses:\n        '204':\n          description: successful deletion\n        '404':\n          description: 'Couldn''t find key for current user, unable to delete given key'\n  /credentials/api/access_token:\n    post:\n      tags:\n        - credentials/api\n      summary: Receive access token when given API key\n      description: >-\n        Get a new temporary access token for the current user by providing a\n        valid API key.\n      security:\n        - OAuth2:\n            - user\n      operationId: getAccessToken\n      responses:\n        '200':\n          description: Access token\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/AccessToken'\n      requestBody:\n        $ref: '#/components/requestBodies/APIKey'\n  '/credentials/{provider}':\n    get:\n      tags:\n        - 'credentials/{provider}'\n      summary: List access keys\n      description: List all the access keys for the current user\n      parameters:\n        - name: provider\n          required: true\n          in: path\n          description: Storage provider to obtain creds for\n          schema:\n            type: string\n      security:\n        - OAuth2:\n            - user\n      operationId: listGenericKeypairs\n      responses:\n        '200':\n          description: Generic keys info response\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GenericKeys'\n    post:\n      tags:\n        - 'credentials/{provider}'\n      summary: Receive access key\n      description: Get a new access key for the current user for the given provider\n      parameters:\n        - name: provider\n          required: true\n          in: path\n          description: Storage provider to obtain creds for\n          schema:\n            type: string\n      security:\n        - OAuth2:\n            - user\n      operationId: getGenericKeypair\n      responses:\n        '200':\n          description: generic keypair for provider\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GenericKey'\n  '/credentials/{provider}/{access_key}':\n    delete:\n      tags:\n        - 'credentials/{provider}'\n      summary: Delete access key\n      description: Delete an access key for the current user\n      security:\n        - OAuth2:\n            - user\n      operationId: deleteGenericKeypair\n      parameters:\n        - name: provider\n          required: true\n          in: path\n          description: Provider of credentials such as API, or Google\n          schema:\n            type: string\n        - name: access_key\n          required: true\n          in: path\n          description: Generic Key ID\n          schema:\n            type: string\n      responses:\n        '204':\n          description: successful deletion\n        '404':\n          description: 'Couldn''t find key, unable to delete given key'\n  /link/google:\n    get:\n      tags:\n        - link\n      summary: Link Google identity to user\n      parameters:\n        - name: redirect\n          required: true\n          in: query\n          description: Page to redirect to after account linking\n          schema:\n            type: string\n        - name: expires_in\n          required: false\n          in: query\n          description: >-\n            the time (in seconds) during which the Google account has bucket\n            access. Must be less than the configured maximum (default is 24\n            hours). If it's greater, the configured maximum will be used.\n          schema:\n            type: integer\n      description: >\n        Link a Google identity to a User (AuthN using Google Oauth2 flow).\n        Google identity will be associated with a user and added to a\n        proxy group for that user. The user's proxy group will be given access\n        to data via Google's IAM. `redirect` will be stored in the session\n        to follow after linking.\n\n        ---\n\n        If AuthN is successful with Google, eventually will redirect to\n        `/link/google/callback`, where the actual account linkage occur.\n\n        > *See `/link/google/callback` endpoint for details about eventual\n           redirect with descriptive query params about success/failure.*\n      operationId: linkCloudIdentityStart2\n      responses:\n        '302':\n          description: redirect to Oauth2 flow with Google to AuthN user\n    patch:\n      tags:\n        - link\n      summary: Extend Google identity's access expiration\n      parameters:\n        - name: expires_in\n          required: false\n          in: query\n          description: >-\n            the time (in seconds) during which the Google account has bucket\n            access. Must be less than the configured maximum (default is 24\n            hours). If it's greater, the configured maximum will be used.\n          schema:\n            type: integer\n      description: >-\n        Extend previously linked Google identity's access expiration from the\n        user's proxy group (thus extending its access to data). This can only be\n        done if the user has ALREADY linked their Google account before.\n      operationId: extendCloudIdentityExpiration\n      responses:\n        '200':\n          description: successfully extended access\n          content:\n            '*/*':\n              schema:\n                $ref: \"#/components/schemas/LinkedGoogleEmailExpiration\"\n        '404':\n          description: No linked Google account found for user\n    delete:\n      tags:\n        - link\n      summary: Unlink a Google identity from a user\n      description: Remove link between a user and a Google identity.\n      operationId: unlinkCloudIdentity\n      responses:\n        '200':\n          description: Google identity unlinked from user\n        '400':\n          description: >-\n            Failure with Google's API to remove account from proxy group. See\n            response for details\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GoogleLinkingError'\n        '404':\n          description: No linked Google account found for user\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GoogleLinkingError'\n  /link/google/callback:\n    get:\n      tags:\n        - link\n      summary: Google's callback for linking Google identity\n      description: >\n        Linking of Google identity to user after successful Oauth2\n        flow with Google. Use code to retrieve user info from Google.\n\n        Will return to session stored redirect.\n\n        Response will contain query params about the new linkage\n        (`exp` or `linked_email`) or error params (`error` and\n        `error_description`) detailing what went wrong.\n\n        ---\n        ---\n\n        Query Params on Successful Linking\n\n          * `exp`\n            * Expiration time in unix time (seconds since last epoch).\n              This represents when the newly linked account's temporary access\n              rights will be removed\n          * `linked_email`\n            * Google account email that was linked to the user and provided\n              temporary access\n\n        ---\n\n        Possible Error Types (for `error` param)\n\n          * `g_acnt_link_error`\n            * Issue with the linkage between User and their Google account\n          * `g_acnt_auth_failure`\n            * Issue with Oauth2 flow to AuthN user's Google account\n          * `g_acnt_access_error`\n            * Issue with providing access to Google account by putting in\n              user's proxy group\n\n        For details about the error, check the `error_description` param.\n\n      parameters:\n        - name: code\n          required: true\n          in: query\n          description: The authorization code returned from the OAuth2\n            authorization request\n          schema:\n            type: string\n      operationId: linkCloudIdentity\n      responses:\n        '302':\n          description: redirect to session-stored redirect value\n  /google/billing_projects/:\n    get:\n      tags:\n        - google\n      summary: Get the configured default Google project for billing\n      description: >-\n        Get the configured default Google project identifiers that will be used for\n        billing access to requester pays Google buckets. This effectively bills all\n        access to the specified Project and *not* the end-user (may be a different project\n        for different data access methods). If there is no configured default\n        billing project, requests to Data Access Method endpoints will rely on\n        a query parameter `userProject` for the end-user to specify a valid Google\n        project that Fence has the necessary roles in to provide relevant service\n        accounts the necessary access. Please see the README for more details.\n      operationId: getGoogleBillingProjects\n      responses:\n        '200':\n          description: 'billing projects in response.'\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GoogleBillingProjects'\n  /google/service_accounts/:\n    post:\n      tags:\n        - google\n      summary: Register a Google Service Account\n      description: >-\n        Register a Google Cloud Project's service account to allow access to\n        controlled data. If there are issues, will provide details for what went\n        wrong.\n      parameters:\n        - name: expires_in\n          required: false\n          in: query\n          description: >-\n            the time (in seconds) during which the Google service account has\n            bucket access. Must be less than the configured maximum (default is 7 days). If it's greater, the configured maximum will be used.\n          schema:\n            type: integer\n      operationId: registerGoogleServiceAccount\n      responses:\n        '200':\n          description: 'success, registered service account.'\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GoogleServiceAccount'\n        '400':\n          description: 'failure, trying to register service account resulted in errors'\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GoogleServiceAccountErrors'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GoogleServiceAccount'\n        description: ServiceAccount object to register\n        required: true\n    get:\n      tags:\n        - google\n      summary: Get a list of Google Service Accounts\n      description: |\n        Get a list of service accounts for the given Google Cloud Project IDs.\n        > **NOTE: This will only provide service account information for\n        Google Cloud Projects if the current user is a member of those\n        projects**\n\n        The endpoint lists the `project_access` that was previously granted\n        (whether or not the SA currently has access). The `project_access_exp`\n        will be `0` when the SA isn't currently given access\n        (but can be provided access again with a `PATCH`).\n      parameters:\n        - name: google_project_ids\n          required: true\n          in: query\n          description: |\n            Google Cloud Project IDs to get service accounts for.\n            Use a comma-separated list: `project_a,project_b,project_c`\n          schema:\n            type: string\n      operationId: listGoogleServiceAccount\n      responses:\n        '200':\n          description: List of service accounts for specified projects\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GoogleServiceAccounts'\n        '403':\n          description: User is not a member on all the provided project ids\n  /google/service_accounts/_dry_run:\n    post:\n      tags:\n        - google\n      summary: Dry run to attempt to register a Google Service Account\n      description: >-\n        Attempt to register a service account WITHOUT actually doing so. Will\n        provide detailed errors for what went wrong.\n      parameters:\n        - name: expires_in\n          required: false\n          in: query\n          description: >-\n            the time (in seconds) during which the Google service account has\n            bucket access. Must be less than the configured maximum (default is 7 days). If it's greater, the configured maximum will be used.\n          schema:\n            type: integer\n      operationId: registerGoogleServiceAccountDryRun\n      responses:\n        '200':\n          description: 'success, registering service account is possible'\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GoogleServiceAccountErrors'\n        '400':\n          description: 'failure, registering service account would result in errors'\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GoogleServiceAccountErrors'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GoogleServiceAccount'\n        description: ServiceAccount object to register\n  /google/service_accounts/monitor:\n    get:\n      tags:\n        - google\n      summary: >-\n        Return the service account used for monitoring user's Google Cloud\n        Projects\n      description: |\n        This account is used to monitor and validate access to data\n        for registered service accounts for the project.\n\n        >NOTE: This service account must be given editor role on a Google\n        Project for service account registration to succeed. If it is ever\n        removed, all access to data will be removed.\n      operationId: adminGoogleServiceAccount\n      responses:\n        '404':\n          description: >-\n            No monitoring service account is configured. In other words,\n            fence does not currently support user-registered service accounts.\n        '200':\n          description: Monitoring service account information\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/AdminGoogleServiceAccount'\n  /google/service_accounts/_dry_run/{id}:\n    patch:\n      tags:\n        - google\n      summary: Dry run to attempt to update a Google Service Account\n      description: |\n        Try to update a Google Cloud Project's service account to change access to\n        controlled data and/or extend access to data WITHOUT actually doing so.\n        This would extend the service account's access to data if using the non _dry_run\n        endpoint. It would also modify access if a patch document is provided with new access.\n\n        > *NOTE*: If you do not provide a patch document (e.g. no payload),\n        this will extend access to ALL PREVIOUS DATA. If you want to REMOVE\n        access, either use the DELETE endpoint or provide a patch document\n        with an empty list for \"project_access\". It's important to note that\n        providing {\"project_access\": []} is different than not including a\n        payload at all.\n\n        > **WARNING**: Provided patch document will *fully replace* previous data.\n        It will NOT extend previous data by provided values, it will FULLY\n        REPLACE the data with what's provided.\n      operationId: updateGoogleServiceAccountDryRun\n      parameters:\n        - in: path\n          name: id\n          description: ServiceAccount idenitifer\n          required: true\n          schema:\n            type: string\n        - name: expires_in\n          required: false\n          in: query\n          description: >-\n            the time (in seconds) during which the Google service account has\n            bucket access. Must be less than the configured maximum (default is 7 days). If it's greater, the configured maximum will be used.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: 'success, updating service account access is possible'\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GoogleServiceAccountErrors'\n        '400':\n          description: 'failure, trying to update service account access resulted in errors'\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GoogleServiceAccountErrors'\n        '403':\n          description: 'forbidden, cannot modify the provided fields'\n        '401':\n          description: 'unauthorized, can modify provided fields but user does not have permission to update this service account'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GoogleServiceAccountProjectAccess'\n        description: ServiceAccount fields to update\n  /google/service_accounts/{id}:\n    delete:\n      tags:\n        - google\n      summary: Delete a specific Google Service Account\n      description: Delete a service account and remove from access\n      operationId: deleteSpecficGoogleServiceAccount\n      parameters:\n        - in: path\n          name: id\n          description: ServiceAccount idenitifer\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'success, deleted service account'\n        '400':\n          description: 'failure, could not service account'\n        '403':\n          description: 'unauthorized, user cannot delete this service account'\n    patch:\n      tags:\n        - google\n      summary: Update a Google Service Account\n      description: |\n        Update a Google Cloud Project's service account to change access to\n        controlled data and/or extend access to data. This will extend the\n        service account's access to data. It will also modify access if a\n        patch document is provided with new access.\n\n        > *NOTE*: If you do not provide a patch document (e.g. no payload),\n        this will extend access to ALL PREVIOUS DATA. If you want to REMOVE\n        access, either use the DELETE endpoint or provide a patch document\n        with an empty list for \"project_access\". It's important to note that\n        providing {\"project_access\": []} is different than not including a\n        payload at all.\n\n        > **WARNING**: Provided patch document will *fully replace* previous data.\n        It will NOT extend previous data by provided values, it will FULLY\n        REPLACE the data with what's provided.\n      operationId: updateGoogleServiceAccount\n      parameters:\n        - in: path\n          name: id\n          description: ServiceAccount idenitifer\n          required: true\n          schema:\n            type: string\n        - name: expires_in\n          required: false\n          in: query\n          description: >-\n            the time (in seconds) during which the Google service account has\n            bucket access. Must be less than the configured maximum (default is 7 days). If it's greater, the configured maximum will be used.\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: 'success, updated service account access'\n        '400':\n          description: 'failure, trying to update service account access resulted in errors'\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GoogleServiceAccountErrors'\n        '403':\n          description: 'forbidden, cannot modify the provided fields'\n        '401':\n          description: 'unauthorized, can modify provided fields but user does not have permission to update this service account'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GoogleServiceAccountProjectAccess'\n        description: ServiceAccount fields to update\n  /google/primary_google_service_account:\n    post:\n      tags:\n        - google\n      description: |\n        Force the creation of the User's Primary Google Service Account instead of\n        relying on lazy creation at first time of Google Data Access.\n      responses:\n        '200':\n          description: |\n            success, created User's Primary Google Service Account or already exists\n        '401':\n          description: 'invalid token provided (or none provided)'\n  /.well-known/jwks:\n    get:\n      tags:\n        - keys\n      summary: Get JWK Set used by the application\n      description: >-\n        See [RFC 7517](https://tools.ietf.org/html/rfc7517) for detailed\n        specification and an [example\n        response](https://tools.ietf.org/html/rfc7517#appendix-A.1).\n      responses:\n        '200':\n          description: JWKS response\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/JWKS'\n  /privacy-policy:\n    get:\n      tags:\n        - privacy-policy\n      summary: Return the full text of the privacy policy for Gen3\n      description: >-\n        The privacy policy should contain details about what information our\n        technology collects from users and how it is used. According to the\n        `Accept` header in the request it returns either markdown or raw HTML.\n      responses:\n        200:\n          description: success\n          content:\n            text/markdown:\n              schema:\n                type: string\n                example: \"# Gen3 Privacy Policy ...\"\n            text/html:\n              schema:\n                type: string\n                example: \"<h1>Gen3 Privacy Policy</h1> ...\"\n  /user/register:\n    get:\n      tags:\n        - register\n      summary: Register in order to get access to download data\n      description: >-\n        This register functionality enables a registration page for users to provide basic information before being added to a preconfigured group.\n        The GET request will redirect to a HTML page where users can provide their first name, last name, organization, and email, in order to gain some predefined permissions\n        (i.e. to be automatically added to a preconfigured Arborist group).\n      responses:\n        200:\n          description: success\n          content:\n            text/markdown:\n              schema:\n                $ref: '#/components/schemas/RegisterUser'\n  /.well-known/openid-configuration:\n    get:\n      tags:\n        - OIDC\n      summary: Get the OpenID Provider Configuration Document\n      description: >-\n        See [OpenID Connect Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) for detailed\n        specification and an [example\n        response](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse).\n      responses:\n        '200':\n          description: OpenID Configuration\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/OpenIDConfiguration'\ncomponents:\n  requestBodies:\n    APIKey:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/APIKey'\n      description: API key\n      required: true\n    APIKeyScopes:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/APIKeyScopes'\n      description: API key scopes\n      required: false\n  securitySchemes:\n    OAuth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: /oauth/authorize\n          tokenUrl: /oauth/token\n          scopes:\n            user: generic user access\n  schemas:\n    RequestUploadBlank:\n      type: object\n      required:\n      properties:\n        file_name:\n          type: string\n          required: true\n          description: the file name to use for this upload\n        expires_in:\n          type: integer\n          description: optional integer specifying the presigned URL lifetime\n        authz:\n          type: array\n          items:\n            type: string\n          description: requested authorization resources to be set on the\n            resulting indexed record. You must have proper authorization to set this\n      example:\n        file_name: \"my_file.bam\"\n        expires_in: 1200\n        authz: [\"/programs/A\"]\n    RequestMultipartUpload:\n      type: object\n      required:\n      properties:\n        key:\n          type: string\n          description: >-\n            the key of the object in the format of GUID/filename\n        uploadId:\n          type: string\n          description: the uploadId for multipart presigned URL upload usable for data upload\n        partNumber:\n          type: integer\n          description: the part number of the part (start from 1)\n        expires_in:\n          type: integer\n          description: optional integer specifying the presigned URL lifetime\n    CompleteMultipartUpload:\n      type: object\n      required:\n      properties:\n        key:\n          type: string\n          description: >-\n            the key of the object in the format of GUID/filename\n        uploadId:\n          type: string\n          description: the uploadId for multipart presigned URL upload usable for data upload\n        parts:\n          type: array\n          items:\n            type: object\n            properties:\n              partNumber:\n                type: integer\n                description: >-\n                  The part number\n              ETag:\n                type: string\n                description: the etag that cooresponds to the the object part with the partnumber\n\n          description: >-\n            List of part numbers info needed for multipart completion\n        expires_in:\n          type: integer\n          description: optional integer specifying the presigned URL lifetime\n    CredentialsSource:\n      type: object\n      required:\n        - name\n        - info\n      properties:\n        name:\n          type: string\n          description: >-\n            User's Google identity email for whom service account should be\n            associated with\n        info:\n          type: string\n          description: Service account's email\n    GoogleServiceAccount:\n      type: object\n      required:\n        - service_account_email\n        - google_project_id\n        - project_access\n      properties:\n        service_account_email:\n          type: string\n          description: Service account's email\n        google_project_id:\n          type: string\n          description: Google Cloud Project ID of service account\n        project_access:\n          type: array\n          items:\n            type: string\n          description: >-\n            List of projects/datasets for which service account should be\n            registered for\n    GoogleServiceAccountInfo:\n      type: object\n      required:\n        - service_account_email\n        - google_project_id\n        - project_access\n        - project_access_exp\n      properties:\n        service_account_email:\n          type: string\n          description: Service account's email\n        google_project_id:\n          type: string\n          description: Google Cloud Project ID of service account\n        project_access:\n          type: array\n          items:\n            type: string\n          description: >-\n            List of projects/datasets for which service account should be\n            registered for\n        project_access_exp:\n          type: integer\n          description: Project/dataset access expiration in unix time\n    AdminGoogleServiceAccount:\n      type: object\n      required:\n        - service_account_email\n      properties:\n        service_account_email:\n          type: string\n          description: Service account's email\n    GoogleBillingProjects:\n      type: object\n      required:\n        - signed_urls\n        - temporary_service_account_credentials\n      properties:\n        signed_urls:\n          type: object\n          required:\n            - project_id\n          properties:\n            project_id:\n              type: string\n              description: >-\n                Google Project identifier that serves as the default billing project\n                for all requester pays access\n        temporary_service_account_credentials:\n          type: object\n          required:\n            - project_id\n          properties:\n            project_id:\n              type: string\n              description: >-\n                Google Project identifier that serves as the default billing project\n                for all requester pays access\n    GoogleServiceAccounts:\n      type: object\n      properties:\n        service_accounts:\n          type: array\n          description: List of GoogleServiceAccounts\n          items:\n              $ref: '#/components/schemas/GoogleServiceAccountInfo'\n    GoogleServiceAccountErrors:\n      type: object\n      required:\n        - success\n        - errors\n      properties:\n        success:\n          type: boolean\n          description: whether or not register/update was successful\n        errors:\n          type: object\n          properties:\n            service_account_email:\n              type: object\n              properties:\n                'status':\n                  type: integer\n                  description: HTTP Status code representing the validity/success for this field\n                'error':\n                  type: string\n                  description: Specific error name\n                'error_description':\n                  type: string\n                  description: More details about the error\n                'service_account_validity':\n                  type: object\n                  properties:\n                    service_account_id:\n                      type: object\n                      properties:\n                        no_external_access:\n                          type: boolean\n                        owned_by_project:\n                          type: boolean\n                        valid_type:\n                          type: boolean\n                        policy_accessible:\n                          type: boolean\n            google_project_id:\n              type: object\n              properties:\n                'status':\n                  type: integer\n                  description: HTTP Status code representing the validity/success for this field\n                'error':\n                  type: string\n                  description: Specific error name\n                'error_description':\n                  type: string\n                  description: More details about the error\n                'membership_validity':\n                  type: object\n                  properties:\n                    'valid_member_types':\n                      type: boolean\n                    'members_exist_in_fence':\n                      type: boolean\n                'service_account_validity':\n                  type: object\n                  properties:\n                    service_account_id:\n                      type: object\n                      properties:\n                        no_external_access:\n                          type: boolean\n                        owned_by_project:\n                          type: boolean\n                        valid_type:\n                          type: boolean\n                        'policy_accessible':\n                          type: boolean\n            project_access:\n              type: object\n              properties:\n                'status':\n                  type: integer\n                  description: HTTP Status code representing the validity/success for this field\n                'error':\n                  type: string\n                  description: Specific error name\n                'error_description':\n                  type: string\n                  description: More details about the error\n                'project_validity':\n                  type: object\n                  properties:\n                    project_id:\n                      type: object\n                      properties:\n                        all_users_have_access:\n                          type: boolean\n                        exists:\n                          type: boolean\n      example:\n        success: false\n        errors:\n          service_account_email:\n            'status': 200\n            'error': null\n            'error_description': ''\n            'service_account_validity':\n              'some-service-account@project-id.iam.gserviceaccount.com':\n                'no_external_access': true\n                'owned_by_project': true\n                'valid_type': true\n                'policy_accessible': true\n          google_project_id:\n            'status': 200\n            'error': null\n            'error_description': ''\n            'membership_validity':\n              valid_member_types: true\n              members_exist_in_fence: true\n            'service_account_validity':\n              'another-service-account@project-id.iam.gserviceaccount.com':\n                'no_external_access': true\n                'owned_by_project': true\n                'valid_type': true\n                'policy_accessible': true\n          project_access:\n            'status': 403\n            'error': 'Unauthorized'\n            'error_description': 'Not all users have access requested'\n            'project_validity':\n              'ProjectA':\n                'all_users_have_access': false\n                'exists': true\n              'ProjectB':\n                'all_users_have_access': true\n                'exists': true\n    GoogleServiceAccountProjectAccess:\n      type: object\n      required:\n        - project_access\n      properties:\n        project_access:\n          type: array\n          items:\n            type: string\n          description: >-\n            List of projects/datasets for which service account should be\n            registered for\n    GoogleKey:\n      type: object\n      description: >-\n        decoded Google private key data from privateKeyData field\n        https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountPrivateKeyType\n      properties:\n        type:\n          type: string\n        project_id:\n          type: string\n        private_key_id:\n          type: string\n        private_key:\n          type: string\n        client_email:\n          type: string\n        client_id:\n          type: string\n        auth_uri:\n          type: string\n        token_uri:\n          type: string\n        auth_provider_x509_cert_url:\n          type: string\n        client_x509_cert_url:\n          type: string\n      example:\n        type: service_account\n        project_id: project-id\n        private_key_id: some_number\n        private_key: '-----\"BEGIN PRIVATE KEY-----\\n...\" =\\n-----END \"PRIVATE KEY-----\\n\"'\n        client_email: api@project-id.iam.gserviceaccount.com\n        client_id: ...\n        auth_uri: 'https://accounts.google.com/o/oauth2/auth'\n        token_uri: 'https://accounts.google.com/o/oauth2/token'\n        auth_provider_x509_cert_url: 'https://www.googleapis.com/oauth2/v1/certs'\n        client_x509_cert_url: >-\n          https://www.googleapis.com/...api%40project-id.iam.gserviceaccount.com\n    GoogleKeys:\n      type: object\n      properties:\n        access_keys:\n          type: array\n          description: List of Google keys info\n          items:\n            type: object\n            properties:\n              keyAlgorithm:\n                type: string\n                description: Specifies the algorithm (and possibly key size) for the key.\n              validBeforeTime:\n                type: string\n                description: The key can be used before this timestamp.\n              name:\n                type: string\n                description: >-\n                  The resource name of the service account key in the following\n                  format\n                  projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}.\n              validAfterTime:\n                type: string\n                description: The key can be used after this timestamp.\n      example:\n        access_keys:\n          - keyAlgorithm: KEY_ALG_RSA_2048\n            validBeforeTime: '2028-03-11T18:27:41Z'\n            name: >-\n              projects/example/serviceAccounts/example@example.iam.gserviceaccount.com/keys/1234567890abcdefghijklmnop\n            validAfterTime: '2018-03-14T18:27:41Z'\n    APIKeys:\n      type: object\n      properties:\n        jtis:\n          type: array\n          description: List of API keys issued to the user\n          items:\n            type: object\n            properties:\n              jti:\n                type: string\n                description: JWT ID / key id\n              exp:\n                type: integer\n                description: >-\n                  Key expiration (JSON number representing the number of seconds\n                  from 1970-01-01T0:0:0Z as measured in UTC until the date/time)\n      example:\n        jtis:\n          - jti: e9d58890-99b0-44f0-88bd-3ebc370b1329\n            exp: 12345678\n    APIKey:\n      type: object\n      properties:\n        api_key:\n          type: string\n          description: JWT representing API key\n      example:\n        api_key: >-\n          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.XbPfbIHMI6arZ3Y922BhjWgQzWXcXNrz0ogtVhfEd2o\n    NewAPIKey:\n      type: object\n      properties:\n        key_id:\n          type: string\n          description: Key identifier\n        api_key:\n          type: string\n          description: JWT representing API key\n      example:\n        key_id: e9d58890-99b0-44f0-88bd-3ebc370b1329\n        api_key: >-\n          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.XbPfbIHMI6arZ3Y922BhjWgQzWXcXNrz0ogtVhfEd2o\n    APIKeyScopes:\n      type: object\n      properties:\n        scope:\n          type: array\n          description: list of OIDC scopes for the API Key\n          items:\n            type: string\n      example:\n        scope:\n          - user\n          - data\n    AccessToken:\n      type: object\n      properties:\n        access_token:\n          type: string\n          description: JWT access token\n      example:\n        access_token: >-\n          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.XbPfbIHMI6arZ3Y922BhjWgQzWXcXNrz0ogtVhfEd2o\n    GenericKey:\n      type: object\n      properties:\n        access_key:\n          type: string\n          description: generic key\n        secret_key:\n          type: string\n          description: generic secret key\n      example:\n        access_key: 8DGW9LyC0D4nByoWo6pp\n        secret_key: 1lnkGScEH8Vr4EC6QnoqLK1PqRWPNqIBJkH6Vpgx\n    GenericKeys:\n      type: object\n      properties:\n        access_keys:\n          type: array\n          description: List of Generic keys\n          items:\n            type: object\n            properties:\n              access_key:\n                type: string\n                description: access key value\n      example:\n        access_keys:\n          - access_key: 8DGW9LyC0D4nByoWo6pp\n    JWKS:\n      type: object\n      properties:\n        keys:\n          type: array\n          description: array of dictionaries of key information\n          items:\n            type: object\n            properties:\n              kty:\n                type: string\n                description: key type (\"RSA\" in our implementation)\n              alg:\n                type: string\n                description: algorithm (\"RS256\" in our implementation)\n              'n':\n                type: string\n                description: base64-encoded public key modulus\n              e:\n                type: string\n                description: base64-encoded public key exponent\n              kid:\n                type: string\n                description: key ID\n      example:\n        keys:\n          - kty: RSA\n            'n': >-\n              0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw\n            e: AQAB\n            alg: RS256\n            kid: '2011-04-29'\n    RegisterUser:\n      type: object\n      required:\n        - firstname\n        - lastname\n        - org\n        - email\n      properties:\n        firstname:\n          type: string\n          description: 'The firstname of the end-user'\n        lastname:\n          type: string\n          description: 'The lastname of the end-user'\n        org:\n          type: string\n          description: 'The org of the end-user'\n        email:\n          type: string\n          description: 'The email of the end-user'\n    AccessURL:\n      type: object\n      required:\n        - url\n      properties:\n        url:\n          type: string\n          description: 'A fully resolvable URL that can be used to fetch the actual object bytes.'\n    UserInfo:\n      type: object\n      required:\n        - user_id\n        - idp\n        - sub\n        - username\n        - name\n        - display_name\n        - preferred_username\n        - phone_number\n        - email\n        - is_admin\n        - role\n        - project_access\n        - certificates_uploaded\n        - resources_granted\n        - groups\n        - message\n      properties:\n        user_id:\n          type: number\n          description: 'This value is deprecated in favor of sub.'\n        idp:\n          type: string\n          description: |\n            The Identity Provider used to autheticate the user. Given instances of Fence\n            may or may not have all of these available (the set of IDPs available is a configuration).\n\n            * *google* - Google/GSuite\n            * *ras* - NIH's Researcher Auth Service (RAS)\n            * *itrust* - NIH Login / iTrust / eRA Commons\n            * *fence* - Upstream Fence (the idp used depends on the specific configuration, consult the Gen3 Operators)\n            * *orcid* - ORCHID\n            * *microsoft* - Microsoft\n            * *elixir* - Elixir\n            * *synapse* - Synapse\n            * *cognito* - AWS Cognito\n            * More may be added in the future...\n        sub:\n          type: string\n          description: 'Subject Identifier. A locally unique and never reassigned identifier within the Issuer for the end-user.'\n        username:\n          type: string\n          description: 'This value is deprecated in favor of name.'\n        name:\n          type: string\n          description: 'The full name of the end-user.'\n        display_name:\n          type: string\n          description: 'The display name of the end-user.'\n        preferred_username:\n          type: string\n          description: 'The preferred username of the end-user.'\n        phone_number:\n          type: string\n          description: 'The phone number of the end-user.'\n        email:\n          type: string\n          description: 'The email of the end-user'\n        is_admin:\n          type: boolean\n          description: 'Boolean value stating if end-user is an admin or not'\n        role:\n          type: string\n          description: ''\n        project_access:\n          type: object\n          description: 'This value is deprecated in favor of authz and resources.'\n        certificates_uploaded:\n          type: array\n          items:\n            type: string\n        resources_granted:\n          type: array\n          items:\n            type: string\n        groups:\n          type: array\n          items:\n            type: string\n        message:\n          type: string\n        primary_google_service_account:\n          type: string\n          description: 'email address of the users primary service account used for signing URLs'\n        authz:\n          type: object\n          description: 'end user authorization information, mapping of resource name to list of permission, service roles'\n        resources:\n          type: array\n          items:\n            type: string\n          description: 'list of resource paths the user has access to'\n        tags:\n          type: object\n          description: User's tags\n        azp:\n          type: string\n          description: 'authorized party - the party to which the ID token was issued.'\n    SignedURL:\n      type: object\n      properties:\n        url:\n          type: string\n          description: the signed url issued to\n    LinkedGoogleEmailExpiration:\n      type: object\n      properties:\n        exp:\n          type: integer\n          description: expiration of linked email's access (e.g. expiration\n              until it is removed from the user's Google Proxy Group)\n      example:\n        exp: 1526653869\n    PublicKeys:\n      type: object\n      properties:\n        keys:\n          type: array\n          description: array of single-entry dictionaries mapping from key id to public key\n          items:\n            type: array\n            description: 'tuple of `(key_id, public_key)`'\n            items:\n              type: string\n      example:\n        keys:\n          - - public_key_01\n            - '-----BEGIN PUBLIC KEY----- ... -----END PUBLIC KEY-----'\n    OAuthHTML:\n      type: string\n    GoogleLinkingError:\n      type: object\n      properties:\n        error:\n          type: string\n          description: Error name/class\n        error_description:\n          type: string\n          description: Description of what caused the error\n      example:\n        error: error_name\n        error_description: A description of what caused the error\n    OpenIDConfiguration:\n      type: object\n      required:\n        - issuer\n        - authorization_endpoint\n        - jwks_uri\n        - response_types_supported\n      properties:\n        authorization_endpoint:\n          type: string\n        claim_types_supported:\n          type: array\n          items:\n            type: string\n        claims_locales_supported:\n          type: array\n          items:\n            type: string\n        claims_parameter_supported:\n          type: boolean\n        claims_supported:\n          type: array\n          items:\n            type: string\n        display_values_supported:\n          type: array\n          items:\n            type: string\n        grant_types_supported:\n          type: array\n          items:\n            type: string\n        id_token_encryption_alg_values_supported:\n          type: array\n          items:\n            type: string\n        id_token_encryption_enc_values_supported:\n          type: array\n          items:\n            type: string\n        id_token_signing_alg_values_supported:\n          type: array\n          items:\n            type: string\n        issuer:\n          type: string\n        jwks_uri:\n          type: string\n        op_policy_url:\n          type: string\n        op_tos_uri:\n          type: string\n        registration_endpoint:\n          type: string\n        request_object_encryption_alg_values_supported:\n          type: array\n          items:\n            type: string\n        request_object_encryption_enc_values_supported:\n          type: array\n          items:\n            type: string\n        request_object_signing_alg_values_supported:\n          type: array\n          items:\n            type: string\n        request_parameter_supported:\n          type: boolean\n        request_uri_parameter_supported:\n          type: boolean\n        require_request_uri_registration:\n          type: boolean\n        response_modes_supported:\n          type: array\n          items:\n            type: string\n        response_types_supported:\n          type: array\n          items:\n            type: string\n        scopes_supported:\n          type: array\n          items:\n            type: string\n        service_documentation:\n          type: string\n        subject_types_supported:\n          type: array\n          items:\n            type: string\n        token_endpoint:\n          type: string\n        token_endpoint_auth_methods_supported:\n          type: array\n          items:\n            type: string\n        ui_locales_supported:\n          type: array\n          items:\n            type: string\n        userinfo_endpoint:\n          type: string\n",
			"canonicalURL": "/github.com/uc-cdis/fence@9650afca6eb9371c8d99196d7db9f7df908ee946/-/blob/openapis/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/uc-cdis/fence/blob/9650afca6eb9371c8d99196d7db9f7df908ee946/openapis/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:15966: json: cannot unmarshal Go value of type ogen.Spec: spec: json: cannot unmarshal Go value of type ogen.Properties: json: unable to unmarshal JSON boolean into Go value of type []string"
}