{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/open-xchange/appsuite-middleware"
		},
		"file": {
			"name": "index.yaml",
			"size": 0,
			"path": "http-api/http_api/index.yaml",
			"byteSize": 13073,
			"content": "openapi: 3.0.0 \n\ninfo: \n  $ref: ./info/index.yaml \n\nservers:\n  - url: https://api.example.com/v1 \n\ntags:\n  - name: Login\n    description: \u003e\n      The login module is used to obtain a session from the user's login\n      credentials. To understand the details\n\n      of the different login methods, see the article titled [Login\n      variations](http://oxpedia.org/wiki/index.php?title=Login_variations).\n\n\n      Because of security reasons each login variation will reject requests\n      containing the parameter\n\n      \"password\" within the URL query. \n  - name: Config\n    description: \u003e\n      The config module is used to retrieve and set user-specific configuration.\n      The configuration is\n\n      stored in a tree. Each node of the tree has a name and a value. The values\n      of leaf nodes are strings\n\n      which store the actual configuration data. The values of inner nodes are\n      defined recursively as\n\n      objects with one field for each child node. The name and the value of each\n      field is the name and the\n\n      value of the corresponding child node, respectively.\n  - name: Folders\n    description: |\n      The folders module is used to access the OX folder structure.\n\n      Special system folders:\n\n      \u003ctable class=simpleTable\u003e\n        \u003cthead\u003e\n          \u003ctr\u003e\n            \u003cth\u003eID\u003c/th\u003e\n            \u003cth\u003eType\u003c/th\u003e\n            \u003cth\u003eDescription\u003c/th\u003e\n          \u003c/tr\u003e\n        \u003c/thead\u003e\n        \u003ctbody\u003e\n          \u003ctr\u003e\n            \u003ctd\u003e6\u003c/td\u003e\n            \u003ctd\u003econtacts\u003c/td\u003e\n            \u003ctd\u003eSystem Users\u003c/td\u003e\n          \u003c/tr\u003e\n        \u003c/tbody\u003e\n      \u003c/table\u003e\n  - name: Tasks\n    description: The tasks module is used to access task information.\n  - name: Contacts\n    description: The contacts module is used to access contact information.\n  - name: Calendar\n    description: The calendar module is used to access calendar data.\n  - name: Mail\n    description: \u003e-\n      The mail module is used to access mail data. When mails are stored on an\n      IMAP server, some functionality is not available due to restrictions of the\n      IMAP protocol. Such functionality is marked with \"not IMAP\".\n  - name: Groups\n    description: \u003e-\n      The group module allows to query available groups. It is mainly used by the\n      dialog for the selection of participants.\n  - name: Resources\n    description: \u003e-\n      The resource module allows to query available resources. It is mainly used\n      by the dialog for the selection of participants.\n  - name: Infostore\n    description: \u003e-\n      The module infostore or filestore or files or drive has been renamed quite\n      often. Whatever its name, it combines the knowledge database, bookmarks and\n      document storage.\n  - name: Attachments\n    description: \u003e-\n      The module attachments allows file attachments to arbitrary objects. An\n      attachment always belongs to an object (called 'attached') in a certain\n      folder of a certain module.\n  - name: Reminder\n    description: \u003e-\n      The reminder module provides the ability to fetch all active reminders for a\n      user between two dates.\n  - name: Multiple\n    description: \u003e-\n      The multiple module allows to bundle multiple requests to most other modules\n      in a single request.\n  - name: Quota\n    description: \u003e-\n      The quota module allows accessing information about the limit and current\n      usage of a certain storage type.\n  - name: Import\n    description: \u003e-\n      The module import allows to import specific module data (like Contacts,\n      Tasks or Appointments) in several formats (iCal, vCard, CSV) into a folder.\n      Please note: The callback for all actions of this bundle is\n      `callback_import`, not `callback_$actionname` for legacy purposes.\n  - name: Export\n    description: \u003e-\n      The module export allows to export specific module data (like contacts,\n      tasks or appointments) from a folder in several formats (iCal, vCard, CSV).\n  - name: Sync\n    description: \u003e-\n      The module sync delivers several core API extensions to support common\n      operations used in a mobile synchronization environment.\n  - name: Token\n    description: \u003e-\n      The module token delivers several core API extensions to support token based\n      logins.\n  - name: Mailfilter\n    description: \u003e\n      The mailfilter module is used to access all mail filter related options.\n\n\n      First of all the main structure of a mail filter script is, that it has\n      different rules. Each of them contains one command. This command takes a\n      test condition which executes the actions given in that command if the test\n      condition is true.\n\n      The test condition consists of a test command and some arguments for this\n      on the mail filter server, these tests must be determined at runtime. So\n      that no test field is transferred to the server which it isn't able to\n      handle. Examples for tests are `address`, `allof` and `anyof`.\n\n      Each test has a special comparison. The list of available comparisons\n      depends on the test given and the mail filter server configuration so they\n      have to be determined at runtime too. See chapter [Mail\n      filter](#mail-filter) for more information.\n  - name: File\n    description: \u003e-\n      The ajax file upload module offers to store files in server's dedicated\n      download directory for a configurable amount of time. The files are then\n      accessible for further operations like inline images in (html) mails.\n  - name: Image\n    description: \u003e-\n      The image module allows to download images from Open-Xchange server without\n      providing a session ID in request's URL parameters.\n  - name: Conversion\n    description: \u003e-\n      The conversion module is a generic module to request data from a data source\n      and to process obtained/submitted data with a data handler. Thus data is\n      converted from a data source by a data handler.\n  - name: Mailaccount\n    description: \u003e-\n      The mailaccount module is used to manage multiple mail accounts held by a\n      user.\n  - name: MailCompose\n    description: The MailCompose REST API.\n  - name: Autoconfig\n    description: \u003e-\n      The module autoconfig can be used to request the best available settings for\n      an appropriate mail server.\n  - name: User\n    description: The user module is used to access user information.\n  - name: User/Me\n    description: The module user/me is used to access formal information about current user.\n  - name: OAuth\n    description: \u003e\n      The Open-Xchange server can act as an OAuth client or be an OAuth provider\n      itself. The OAuth module supports both aspects:\n       * Manage multiple OAuth accounts for certain online services for a user. The OAuth mechanism allows the Open-Xchange application to act as behalf of this user using previously obtained access tokens granted by user. The according interface is divided into two parts: Account access and service's meta data access.\n       * Manage granted accesses of external services that can access a users data on his behalf, called \"grants\".\n  - name: JSlob\n    description: \u003e-\n      The JSlob module is used to store and retrieve arbitrary JSON-structured\n      configuration for a single user.\n  - name: Freebusy\n    description: Provides access to free/busy information.\n  - name: Messaging\n    description: \u003e\n      The messaging module is divided into services which represent a messaging\n      backend (they add a new folder module \"messaging\"),\n\n      into accounts which represent the concrete configuration of accounts for a\n      given messaging service, and into messages which\n\n      represent single messages consisting of some metadata, headers and a\n      content.\n  - name: Snippet\n  - name: Halo\n  - name: Capabilities\n    description: \u003e-\n      Provides access to capabilities, i.e. modules or features that are available\n      on the backend and the user has access to.\n  - name: Jump\n    description: \u003e-\n      The jump module is used to pass an acquired identity token for an\n      authenticated user from one system to another for a single sign-on.\n  - name: Find\n    description: \u003e\n      The find module consists of calls for performing searches within the modules\n      mail, contacts, tasks and drive.\n\n      It was designed to provide an iterative approach where the search criteria\n      can be refined step-wise until\n\n      the desired items are found.  The starting point is always an `autocomplete`\n      request, that suggests possible\n\n      search filters based on a users input. Those filters are grouped into\n      categories, called \"facets\".\n\n      A facet may provide one or more values with every value being a possible\n      filter. A client is meant to remember\n\n      every value that was selected by a user and include it within the following\n      `autocomplete` and `query` requests,\n\n      while `query` performs the actual search and returns the found items.\n\n\n      Some of the objects returned by the server contain former user input. A\n      client must never interpret strings as HTML\n\n      but always as plain text to be not vulnerable for CSS attacks!\n  - name: Share/Management\n    description: \u003e\n      The share/management module can create and manage share links via different\n      actions. Dedicated actions to list all shares of a\n\n      user can be found in the corresponding modules, like\n      `/folders?action=shares` of module \"folders\" or `/infostore?action=shares`\n\n      of module \"infostore\".\n  - name: Share/Redeem\n    description: \u003e\n      The share/redeem module is used to redeem previously reserved tokens during \n      the share login workflow.\n  - name: Passwordchange\n    description: Via the passwordchange module the users can change their password.\n  - name: Filestorage\n    description: \u003e-\n      The file storage module provides access to file storage backends, e.g.\n      Drive, Dropbox, etc.\n  - name: Mail_categories\n    description: The module mail_categories allows to manage mail categories.\n  - name: Advertisement\n    description: \u003e-\n      Via the advertisement module the client can retrieve the advertisement\n      configuration\n  - name: Clientonboarding\n    description: \u003e-\n      Via the client on-boarding module the client can retrieve possible\n      on-boarding configurations\n  - name: Pns\n    description: \u003e-\n      The interface to add/remove notification subscriptions associated with a\n      token for certain topics\n  - name: Userfeedback\n    description: The user feedback module\n  - name: RSS Feed\n    description: The RSS Feed module\n  - name: Sessionmanagement\n    description: The session management module\n  - name: Jobqueue\n    description: The job queue module\n  - name: OpenId\n    description: \u003e-\n      This module supports the Single Sign On mechanism known as OpenId and\n      therefore a few requests are needed to initiate an authentication and\n      trigger the end of the session.\n  - name: SAML\n    description: \u003e-\n      Endpoints of the built-in SAML 2.0 service provider. See\n      https://documentation.open-xchange.com/latest/middleware/login/02_saml.html.\n  - name: System\n    description: The module for API related to the middelware system\n\npaths: \n   source: ./paths/ \n\ncomponents:\n  securitySchemes:\n    session:\n      type: apiKey\n      in: query\n      name: session\n      description: The default security scheme which uses a session ID previously obtained from the login module. Used in combination with a session cookie.\n    oauth: \n      type: oauth2\n      description: The security scheme for oauth enabled modules of the middleware\n      flows:\n        authorizationCode:\n          authorizationUrl: https://auth.server.example.com/auth/realms/myrealm/protocol/openid-connect/auth\n          tokenUrl: https://auth.server.example.com/auth/realms/myrealm/protocol/openid-connect/token          \n          scopes:\n            write_userconfig: allows the user to make changes to the configuration\n            read_mail: allows to read mails\n            write_mail: allows to store, delete and sent mails\n            read_contacts: allows to read contacts\n            write_contacts: allows to create, update and delete contacts\n            read_calendar: allows to read events in the calendar\n            write_calendar: allows to create, update and delete events in the calendar\n            read_mailaccount: allows to read the data of mail accounts\n            write_mailaccount: allows to create, update and delete mail accounts\n            read_tasks: allows to read tasks\n            write_tasks: allows to create, update and delete tasks\n            read_files: allows read access to file storage backends\n            write_files: allows to create, update and delete a file storage account\n            read_reminder: allows to read reminders\n            write_reminder: allows to update and delete reminders\n  responses:\n    $ref: ./components/responses/index.yaml\n    \n  schemas: \n    $ref: ./components/schemas/index.yaml \n\n  parameters: \n    $ref: ./components/parameters/index.yaml \n\n  requestBodies: \n    $ref: ./components/requestBodies/index.yaml"
		}
	},
	"Error": "unmarshal: json: line 1:73: json: cannot unmarshal string into Go struct field Components.components.parameters of type ogen.Parameter"
}