{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/baremaps/baremaps"
		},
		"file": {
			"name": "studio-openapi.yaml",
			"size": 0,
			"path": "baremaps-server-studio/src/main/resources/studio-openapi.yaml",
			"byteSize": 38283,
			"content": "openapi: 3.0.3\ninfo:\n  title: Baremaps API\n  description: Draft for a Baremaps API.\n  version: ${project.version}\nservers:\n  - url: 'http://localhost:8080'\ntags:\n  - name: Capabilities\n    description: Information about this API\n  - name: Collections\n    description: Discover, create, update and delete collections\n  - name: Styles\n    description: Discover, create, fetch, update and delete styles\n  - name: Tilesets\n    description: Discover, create, fetch, update and delete tilesets\n  - name: Entities\n    description: Discover, create, fetch, update and delete studio entities\n  - name: Import\n    description: Import data\npaths:\n  '/':\n    get:\n      tags:\n        - Capabilities\n      summary: landing page\n      description: |-\n        The landing page provides links to the API definition,\n        the Conformance statements and the available styles.\n      operationId: getLandingPage\n      responses:\n        '200':\n          description: |-\n            Links to the API capabilities and the style set\n            shared by this API.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/landingPage'\n              example:\n                title: Styles API example\n                links:\n                  - href: 'https://example.org/catalog/1.0/?f=json'\n                    rel: self\n                    type: application/json\n                    title: this document\n                  - href: 'https://example.org/catalog/1.0/?f=html'\n                    rel: alternate\n                    type: text/html\n                    title: this document\n                  - href: 'https://example.org/catalog/1.0/api?f=json'\n                    rel: service\n                    type: application/vnd.oai.openapi+json;version=3.0\n                    title: the API definition in JSON\n                  - href: 'https://example.org/catalog/1.0/api?f=html'\n                    rel: service\n                    type: text/html\n                    title: the API definition in HTML\n                  - href: 'https://example.org/catalog/1.0/conformance'\n                    rel: conformance\n                    type: application/json\n                    title: list of conformance classes implemented by this API\n                  - href: 'https://example.org/catalog/1.0/styles'\n                    rel: data\n                    type: application/json\n                    title: the set of styles shared via this API\n        '400':\n          description: |-\n            invalid or unknown query parameters\n        '406':\n          description: |-\n            The media types accepted by the client are not\n            supported for this resource\n  '/conformance':\n    get:\n      tags:\n        - Capabilities\n      summary: |-\n        information about conformance classes that this API\n        conforms to\n      description: |-\n        List of all conformance classes specified in a specification\n        that the server conforms to.\n      operationId: getConformanceDeclaration\n      responses:\n        '200':\n          description: |-\n            the URIs of all conformance classes supported by\n            this API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/confClasses'\n              example:\n                conformsTo:\n                  - 'http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/core'\n                  - 'http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/json'\n                  - 'http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/manage-styles'\n                  - 'http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/style-validation'\n                  - 'http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/resources'\n                  - 'http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/manage-resources'\n                  - 'http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/mapbox-styles'\n                  - 'http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/sld-10'\n                  - 'http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/sld-11'\n        '400':\n          description: |-\n            invalid or unknown query parameters\n        '406':\n          description: |-\n            The media types accepted by the client are not\n            supported for this resource\n  /collections:\n    get:\n      tags:\n        - Collections\n      summary: the collections in the dataset\n      description: A list of all collections available in this dataset.\n      operationId: getCollections\n      responses:\n        \"200\":\n          description: |-\n            The collections (geospatial data resources) shared by this API.\n            This response can be references directly for every service that wants only essential information at the collections level. /collections/collectionId might return more information.\n            The dataset is organized as one or more collections. This resource provides information about and how to access the collections.\n            The response contains the list of collections. For each collection, a link\n            to other resources present (e.g. the items in the collection, path `/collections/{collectionId}/items`,\n            link relation `items`, a map created with data from  collection, path `/collections/{collectionId}/map`,\n            link relation `map`) as well as key information about the collection.\n            This information includes, but is not limited to:\n            * A local identifier for the collection that is unique for the dataset;\n            * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS84 with axis order longitude/latitude);\n            * An optional title and description for the collection;\n            * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/collections'\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n    post:\n      tags:\n        - Collections\n      summary: |-\n        adds a new collection\n      operationId: addCollection\n      description: |-\n        Adds a collection to the collection repository.\n\n        In case, a new collection is created, the following rules\n        apply.\n\n        If the collection submitted in the request body includes an\n        identifier, that identifier will be used. If a collection with that identifier\n        already exists, an error is returned.\n\n        If no identifier can be determined from the submitted\n        collection, the server will assign a new identifier to the\n        collection.\n\n        The URI of the new collection is returned in the header\n        `Location`.\n      responses:\n        '201':\n          description: |-\n            collection created\n          headers:\n            Location:\n              schema:\n                type: string\n              description: |-\n                URI of the new collection\n        '409':\n          description: |-\n            a collection with that id already exists\n      requestBody:\n        description: |-\n          Stylesheet to be added\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/collection'\n  '/collections/{collectionId}':\n    get:\n      tags:\n        - Collections\n      summary: |-\n        fetch a collection by id\n      description: |-\n        Fetches the collection with identifier `collectionId`. The set of\n        available collections can be retrieved at `/collections`.\n      operationId: getCollection\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n      responses:\n        '200':\n          description: |-\n            The style\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/collection'\n        '404':\n          description: |-\n            collection not found\n    put:\n      tags:\n        - Collections\n      summary: |-\n        replace a collection or add a new collection\n      description: |-\n        Replace an existing collection with the id `collectionId`. If no\n        such collection exists, a new collection with that id is added.\n      operationId: updateCollection\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n      requestBody:\n        description: |-\n          A single collection.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/collection'\n      responses:\n        '204':\n          description: |-\n            collection updated or created successfully\n    delete:\n      tags:\n        - Collections\n      summary: |-\n        delete a collection\n      description: |-\n        Delete an existing collection with the id `collectionId`. If no\n        such style exists, an error is returned.\n\n        Deletes any data/itmes associated to this collection.\n      operationId: deleteCollection\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n      responses:\n        '204':\n          description: |-\n            collection deleted\n        '404':\n          description: |-\n            collection not found\n  '/styles':\n    summary: ddd\n    description: xxx\n    get:\n      tags:\n        - Styles\n      summary: |-\n        information about the available styles\n      operationId: getStyleSet\n      description: |-\n        This operation fetches the set of styles available. For\n        each style the id, a title, links to the stylesheet of\n        the style in each supported encoding, and the link to the\n        metadata is provided.\n\n        For a small number of the styles the currently simple approach is sufficient,\n        but in general the operation should support paging (using a\n        parameter `limit` and links to the `next` page in responses).\n      responses:\n        '200':\n          description: the set of available styles\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/style-set'\n        '406':\n          description: |-\n            The media types accepted by the client are not\n            supported for this resource\n    post:\n      tags:\n        - Styles\n      summary: |-\n        adds a new style\n      operationId: addStyle\n      description: |-\n        Adds a style to the style repository.\n\n        In case, a new style is created, the following rules\n        apply.\n\n        If the style submitted in the request body includes an\n        identifier (this depends on the style encoding), that\n        identifier will be used. If a style with that identifier\n        already exists, an error is returned.\n\n        If no identifier can be determined from the submitted\n        style, the server will assign a new identifier to the\n        style.\n\n        The URI of the new style is returned in the header\n        `Location`.\n      responses:\n        '201':\n          description: |-\n            style created\n          headers:\n            Location:\n              schema:\n                type: string\n              description: |-\n                URI of the new style\n        '409':\n          description: |-\n            a style with that id already exists\n      requestBody:\n        description: |-\n          Stylesheet to be added\n        content:\n          application/vnd.mapbox.style+json:\n            schema:\n              $ref: '#/components/schemas/mb-style'\n  '/styles/{styleId}':\n    get:\n      tags:\n        - Styles\n      summary: |-\n        fetch a style by id\n      description: |-\n        Fetches the style with identifier `styleId`. The set of\n        available styles can be retrieved at `/styles`.\n\n        Not all styles are available in all style encodings.\n      operationId: getStyle\n      parameters:\n        - $ref: '#/components/parameters/styleId'\n      responses:\n        '200':\n          description: |-\n            The style\n          content:\n            application/vnd.mapbox.style+json:\n              schema:\n                $ref: '#/components/schemas/mb-style'\n        '404':\n          description: |-\n            style not found\n    put:\n      tags:\n        - Styles\n      summary: |-\n        replace a style or add a new style\n      description: |-\n        Replace an existing style with the id `styleId`. If no\n        such style exists, a new style with that id is added.\n      operationId: updateStyle\n      parameters:\n        - $ref: '#/components/parameters/styleId'\n      requestBody:\n        description: |-\n          A single style in one of the supported style encodings.\n        content:\n          application/vnd.mapbox.style+json:\n            schema:\n              $ref: '#/components/schemas/mb-style'\n      responses:\n        '204':\n          description: |-\n            style updated or created successfully\n    delete:\n      tags:\n        - Styles\n      summary: |-\n        delete a style\n      description: |-\n        Delete an existing style with the id `styleId`. If no\n        such style exists, an error is returned.\n      operationId: deleteStyle\n      parameters:\n        - $ref: '#/components/parameters/styleId'\n      responses:\n        '204':\n          description: |-\n            style deleted\n        '404':\n          description: |-\n            style not found\n  '/tilesets':\n    summary: ddd\n    description: xxx\n    get:\n      tags:\n        - Tilesets\n      summary: |-\n        information about the available tilesets\n      operationId: getTilesets\n      description: |-\n        This operation fetches the set of tilesets available. For\n        each tileset the id, a title, links to the tileset is provided.\n\n        For a small number of the tilesets the currently simple approach is sufficient,\n        but in general the operation should support paging (using a\n        parameter `limit` and links to the `next` page in responses).\n      responses:\n        '200':\n          description: the set of available tilesets\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  format: uuid\n        '406':\n          description: |-\n            The media types accepted by the client are not\n            supported for this resource\n    post:\n      tags:\n        - Tilesets\n      summary: |-\n        adds a new tileset\n      operationId: addTileset\n      description: |-\n        Adds a tileset to the tileset repository.\n\n        If no identifier can be determined from the submitted\n        tileset, the server will assign a new identifier to the\n        style.\n\n        The URI of the new tileset is returned in the header\n        `Location`.\n      responses:\n        '201':\n          description: |-\n            tileset created\n          headers:\n            Location:\n              schema:\n                type: string\n              description: |-\n                URI of the new tileset\n        '409':\n          description: |-\n            a tileset with that id already exists\n      requestBody:\n        description: |-\n          Tileset to be added\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/tileSet'\n  '/tilesets/{tilesetId}':\n    get:\n      tags:\n        - Tilesets\n      summary: |-\n        fetch a tileset by id\n      description: |-\n        Fetches the tileset with identifier `tilesetId`. The set of\n        available tilesets can be retrieved at `/tilesets`.\n      operationId: getTileset\n      parameters:\n        - $ref: '#/components/parameters/tilesetId'\n      responses:\n        '200':\n          description: |-\n            The tileset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tileSet'\n        '404':\n          description: |-\n            tileset not found\n    put:\n      tags:\n        - Tilesets\n      summary: |-\n        replace a tileset or add a new tileset\n      description: |-\n        Replace an existing tileset with the id `tilesetId`. If no\n        such style exists, a new style with that id is added.\n      operationId: updateTileset\n      parameters:\n        - $ref: '#/components/parameters/tilesetId'\n      requestBody:\n        description: |-\n          A single tileset in one of the supported tileset encodings.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/tileSet'\n      responses:\n        '204':\n          description: |-\n            tileset updated or created successfully\n    delete:\n      tags:\n        - Tilesets\n      summary: |-\n        delete a tileset\n      description: |-\n        Delete an existing tileset with the id `tilesetId`. If no\n        such tileset exists, an error is returned.\n      operationId: deleteTileset\n      parameters:\n        - $ref: '#/components/parameters/tilesetId'\n      responses:\n        '204':\n          description: |-\n            tileset deleted\n        '404':\n          description: |-\n            tileset not found\n  /tilesets/{tilesetId}/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}:\n    get:\n      tags:\n        - Tilesets\n      summary: fetch a tile from one or more geospatial data resources\n      description: Retrieves a tile in the requested tileMatrixSet, on the requested\n        tileMatrix in the TileMatrixSet, with the requested tile indices (tileRow,\n        tileCol). The tile has multiple collections (formerly refered as layers) with\n        all selected features in the bounding box of the tile.\n      operationId: getTile\n      parameters:\n        - $ref: '#/components/parameters/tilesetId'\n        - name: tileMatrixSetId\n          in: path\n          description: Identifier of a specific tiling scheme. It can be one of those\n            specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this\n            service.\n          required: true\n          schema:\n            type: string\n          example: WebMercatorQuad\n        - name: tileMatrix\n          in: path\n          description: |-\n            Identifier selecting one of the scales (z) defined in the TileMatrixSet and\n            representing the scaleDenominator the tile.\n          required: true\n          schema:\n            type: integer\n          example: \"11\"\n        - name: tileRow\n          in: path\n          description: Row index (y) of the tile on the selected TileMatrix. It cannot exceed\n            the MatrixWidth-1 for the selected TileMatrix.\n          required: true\n          schema:\n            minimum: 0\n            type: integer\n          example: \"827\"\n        - name: tileCol\n          in: path\n          description: Column index (x) of the tile on the selected TileMatrix. It cannot\n            exceed the MatrixHeight-1 for the selected TileMatrix.\n          required: true\n          schema:\n            minimum: 0\n            type: integer\n          example: 1231\n      responses:\n        \"200\":\n          description: A Mapbox Vector Tile of the collection.\n          content:\n            application/vnd.mapbox-vector-tile:\n              schema:\n                type: string\n                format: byte\n        \"404\":\n          description: The requested URI was not found\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n  /studio/{entitiesKind}:\n    get:\n      tags:\n        - Entities\n      summary: the entities\n      description: A list of all maps metadata available.\n      operationId: getEntities\n      parameters:\n        - $ref: '#/components/parameters/entitiesKind'\n      responses:\n        \"200\":\n          description: |-\n            The entities of a certain kind shared by this API.\n            This response can be references directly for every service that wants only essential information at the maps level. /{entitiesType}/entityId might return more information.\n            This resource provides information about and how to access the entities.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/entities'\n        \"500\":\n          description: A server error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n    post:\n      tags:\n        - Entities\n      summary: |-\n        adds a new entity\n      operationId: addEntity\n      parameters:\n        - $ref: '#/components/parameters/entitiesKind'\n      description: |-\n        Adds a entity to the entity repository.\n\n        In case, a new entity is created, the following rules\n        apply.\n\n        If the entity submitted in the request body includes an\n        identifier, that identifier will be used. If an entity with that identifier\n        already exists, an error is returned.\n\n        If no identifier can be determined from the submitted\n        entity, the server will assign a new identifier to the\n        entity.\n\n        The URI of the new entity is returned in the header\n        `Location`.\n      responses:\n        '201':\n          description: |-\n            entity created\n          headers:\n            Location:\n              schema:\n                type: string\n              description: |-\n                URI of the new entity\n        '409':\n          description: |-\n            an entity with that id already exists\n      requestBody:\n        description: |-\n          Entity to be added\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/entity'\n  /studio/{entitiesKind}/{entityId}:\n    get:\n      tags:\n        - Entities\n      summary: |-\n        fetch an entity by id\n      description: |-\n        Fetches the entity with identifier `entityId`. The set of\n        available entities can be retrieved at `/{entitiesKind}`.\n      operationId: getEntity\n      parameters:\n        - $ref: '#/components/parameters/entityId'\n        - $ref: '#/components/parameters/entitiesKind'\n      responses:\n        '200':\n          description: |-\n            The entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/entity'\n        '404':\n          description: |-\n            entity not found\n    put:\n      tags:\n        - Entities\n      summary: |-\n        replace an entity\n      description: |-\n        Replace an existing entity with the id `entityId`.\n      operationId: updateEntity\n      parameters:\n        - $ref: '#/components/parameters/entityId'\n        - $ref: '#/components/parameters/entitiesKind'\n      requestBody:\n        description: |-\n          A single entity.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/entity'\n      responses:\n        '204':\n          description: |-\n            entity updated or created successfully\n    delete:\n      tags:\n        - Entities\n      summary: |-\n        delete an entity\n      description: |-\n        Delete an existing entity with the id `entityId`. If no\n        such entity exists, an error is returned.\n      operationId: deleteMap\n      parameters:\n        - $ref: '#/components/parameters/entityId'\n        - $ref: '#/components/parameters/entitiesKind'\n      responses:\n        '204':\n          description: |-\n            entity deleted\n        '404':\n          description: |-\n            entity not found\n  /studio/import:\n    post:\n      tags:\n        - Import\n      summary: load data\n      description: Import data from a file\n      operationId: importFile\n      requestBody:\n        description: A geojson collection\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      responses:\n        '201':\n          description: |-\n            data uploaded\n          headers:\n            Location:\n              schema:\n                type: string\n              description: |-\n                URI of the new collection\ncomponents:\n  parameters:\n    collectionId:\n      name: collectionId\n      in: path\n      description: local identifier of a collection\n      required: true\n      schema:\n        type: string\n        format: uuid\n    styleId:\n      name: styleId\n      in: path\n      description: |-\n        Local identifier of a style. \\\n        A list of all available styles can be found\n        under the /styles path.\n      required: true\n      schema:\n        type: string\n        format: uuid\n    tilesetId:\n      name: tilesetId\n      in: path\n      description: |-\n        Local identifier of a tileset. \\\n        A list of all available tilesets can be found\n        under the /styles path.\n      required: true\n      schema:\n        type: string\n        format: uuid\n    entityId:\n      name: entityId\n      in: path\n      description: |-\n        Local identifier of an entity. \\\n        A list of all available entities can be found\n        under the /{entitiesType} path.\n      required: true\n      schema:\n        type: string\n        format: uuid\n    entitiesKind:\n      name: entitiesKind\n      in: path\n      description: |-\n        Local identifier of an entity kind. \\\n        A list of all available entities can be found\n        under the /{entitiesKind} path.\n      required: true\n      schema:\n        type: string\n  schemas:\n    collection:\n      type: object\n      required:\n        - id\n        - links\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: address\n        title:\n          type: string\n          example: address\n        description:\n          type: string\n          example: An address\n        attribution:\n          type: string\n          title: attribution for the collection\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n        extent:\n          $ref: \"#/components/schemas/extent\"\n        itemType:\n          description: An indicator about the type of the items in the collection\n          type: string\n        crs:\n          description: the list of coordinate reference systems supported by the API; the first item is the default coordinate reference system\n          type: array\n          items:\n            type: string\n          default:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n          example:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            - http://www.opengis.net/def/crs/EPSG/0/4326\n        # additional properties\n        created:\n          description: Date of creation\n          type: string\n          format: date-time\n        count:\n          description: Feature count\n          type: integer\n        geometryType:\n          description: Geometry type of the features\n          type: string\n    collections:\n      type: object\n      required:\n        - links\n        - collections\n      properties:\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n        collections:\n          type: array\n          items:\n            $ref: \"#/components/schemas/collection\"\n    confClasses:\n      type: object\n      required:\n        - conformsTo\n      properties:\n        conformsTo:\n          type: array\n          items:\n            type: string\n    entity:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          description: identifier of the entity used, for example, in URIs\n          type: string\n          format: uuid\n      additionalProperties: { }\n    entities:\n      type: array\n      items:\n        $ref: '#/components/schemas/entity'\n    exception:\n      type: object\n      required:\n        - code\n      properties:\n        code:\n          type: string\n        description:\n          type: string\n    extent:\n      title: Extent Schema\n      description: The extent of the resources in the collection. Only spatial and temporal\n        extents are specified. Additional API standards may add members to represent other\n        extents, for example, thermal or pressure ranges.\n      type: object\n      properties:\n        spatial:\n          description: The spatial extend of the resources in the collection.\n          type: object\n          properties:\n            bbox:\n              description: One or more bounding boxes or cubes which describe the spatial\n                extent of the collection. If multiple areas are provided, the union of the\n                bounding boxes describes the spatial extent.\n              type: array\n              minItems: 1\n              items:\n                type: array\n                oneOf:\n                  - minItems: 4\n                    maxItems: 4\n                  - minItems: 6\n                    maxItems: 6\n                items:\n                  type: number\n                  format: double\n            crs:\n              description: Coordinate reference system of the coordinates in the spatial extent\n                (property `spatial`).\n              type: string\n              enum:\n                - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n              default: http://www.opengis.net/def/crs/OGC/1.3/CRS84\n        temporal:\n          description: Begin and end times of the temporal extent.\n          type: object\n          properties:\n            interval:\n              type: array\n              minItems: 1\n              items:\n                type: array\n                minItems: 2\n                maxItems: 2\n                items:\n                  type: string\n                  format: date-time\n                  nullable: 'true'\n                example:\n                  - '2011-11-11T12:22:11Z'\n                  - '2012-11-24T12:32:43Z'\n            trs:\n              description: Temporal reference system of the coordinates in the temporal\n                extent (property `temporal`). Only the Gregorian calendar is supported by\n                API-Collections. Extensions may support additional temporal reference systems.\n              type: string\n              enum:\n                - http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\n              default: http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\n    landingPage:\n      type: object\n      required:\n        - links\n      properties:\n        title:\n          type: string\n          example: Buildings in Bonn\n        description:\n          type: string\n          example: Access to data about buildings in the city of Bonn via a Web API that conforms to the OGC API Features specification.\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n    link:\n      type: object\n      required:\n        - href\n      properties:\n        href:\n          type: string\n          example: http://data.example.com/buildings/123\n        rel:\n          type: string\n          example: alternate\n        type:\n          type: string\n          example: application/geo+json\n        hreflang:\n          type: string\n          example: en\n        title:\n          type: string\n          example: Trierer Strasse 70, 53115 Bonn\n        length:\n          type: integer\n    mb-style:\n      required:\n        - layers\n        - sources\n        - version\n      type: object\n      properties:\n        version:\n          type: number\n          example: 8\n        name:\n          type: string\n          example: night\n        sources:\n          type: object\n          additionalProperties:\n            type: object\n            properties:\n              type:\n                type: string\n                example: vector\n              url:\n                type: string\n                example: 'https://services.interactive-instruments.de/vtp/daraa/tiles/default/{z}/{y}/{x}?f=mvt'\n        sprite:\n          type: string\n          example: 'http://vtp2018.s3-eu-west-1.amazonaws.com/static/{entitiesType}torestyle/sprites/sprites'\n        glyphs:\n          type: string\n          example: 'http://fonts.openmaptiles.org/{fontstack}/{range}.pbf'\n        layers:\n          type: array\n          items:\n            $ref: '#/components/schemas/layers-array'\n        center:\n          type: array\n          items:\n            type: number\n        metadata:\n          type: object\n        zoom:\n          type: number\n    layers-array:\n      required:\n        - id\n        - type\n      type: object\n      properties:\n        id:\n          type: string\n          example: '1'\n        type:\n          type: string\n          example: fill\n          enum:\n            - fill\n            - line\n            - symbol\n            - circle\n            - heatmap\n            - fill-extrusion\n            - raster\n            - hillshade\n            - background\n        filter:\n          type: array\n          items: {}\n        source:\n          type: string\n          example: daraa\n        source-layer:\n          type: string\n          example: vegetationsrf\n        layout:\n          type: object\n        minzoom:\n          type: number\n        maxzoom:\n          type: number\n        paint:\n          type: object\n    mb-sprite-index:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/mb-sprite-index-symbol'\n    mb-sprite-index-symbol:\n      type: object\n      required:\n        - width\n        - height\n        - x\n        - 'y'\n        - pixelRatio\n      properties:\n        width:\n          type: integer\n          example: 32\n        height:\n          type: integer\n          example: 32\n        x:\n          type: integer\n          example: 0\n        y:\n          type: integer\n          example: 0\n        pixelRatio:\n          type: number\n          example: 1\n    style-set:\n      type: object\n      required:\n        - styles\n      properties:\n        styles:\n          type: array\n          nullable: true\n          items:\n            $ref: '#/components/schemas/style-set-entry'\n          example:\n            - id: 'night'\n              title: 'Topographic night style'\n              links:\n                - href: 'https://example.com/api/1.0/styles/night?f=mapbox'\n                  type: 'application/vnd.mapbox.style+json'\n                  rel: 'stylesheet'\n                - href: 'https://example.com/api/1.0/styles/night?f=sld10'\n                  type: 'application/vnd.ogc.sld+xml;version=1.0'\n                  rel: 'stylesheet'\n                - href: 'https://example.com/api/1.0/styles/night/metadata?f=json'\n                  type: 'application/json'\n                  rel: 'describedBy'\n            - id: 'topographic'\n              title: 'Regular topographic style'\n              links:\n                - href: 'https://example.com/api/1.0/styles/topographic?f=mapbox'\n                  type: 'application/vnd.mapbox.style+json'\n                  rel: 'stylesheet'\n                - href: 'https://example.com/api/1.0/styles/topographic?f=sld10'\n                  type: 'application/vnd.ogc.sld+xml;version=1.0'\n                  rel: 'stylesheet'\n                - href: 'https://example.com/api/1.0/styles/topographic/metadata?f=json'\n                  type: 'application/json'\n                  rel: 'describedBy'\n    style-set-entry:\n      type: object\n      nullable: true\n      required:\n        - id\n        - links\n      properties:\n        id:\n          type: string\n          format: uuid\n          nullable: true\n        title:\n          type: string\n          nullable: true\n        links:\n          type: array\n          nullable: true\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/link'\n    stylesheet:\n      type: object\n      nullable: true\n      required:\n        - link\n      properties:\n        title:\n          type: string\n          nullable: true\n        version:\n          type: string\n          nullable: true\n        specification:\n          type: string\n          format: url\n          nullable: true\n        native:\n          type: boolean\n          nullable: true\n        tilingScheme:\n          type: string\n          nullable: true\n        link:\n          $ref: '#/components/schemas/link'\n    tileSet:\n      type: object\n      required:\n        - tilejson\n        - tiles\n      properties:\n        tilejson:\n          type: string\n          pattern: \"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\w?[\\\\w\\\\d]*\"\n        name:\n          type: string\n        description:\n          type: string\n        version:\n          type: string\n          pattern: \"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\w?[\\\\w\\\\d]*\"\n        attribution:\n          type: string\n        template:\n          type: string\n        legend:\n          type: string\n        scheme:\n          type: string\n        tiles:\n          type: array\n          items:\n            type: string\n        grids:\n          type: array\n          items:\n            type: string\n        data:\n          type: array\n          items:\n            type: string\n        minzoom:\n          minimum: 0\n          maximum: 30\n          type: integer\n        maxzoom:\n          minimum: 0\n          maximum: 30\n          type: integer\n        bounds:\n          type: array\n          items:\n            type: number\n            format: double\n        center:\n          type: array\n          items:\n            type: number\n        vector_layers:\n          type: array\n          items:\n            $ref: '#/components/schemas/layer'\n    layer:\n      type: object\n      properties:\n        id:\n          type: string\n        description:\n          type: string\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/query'\n    query:\n      type: object\n      properties:\n        minzoom:\n          type: integer\n        maxzoom:\n          type: integer\n        sql:\n          type: string\n"
		}
	},
	"Error": "unmarshal: callback: callback: json: cannot unmarshal string into Go struct field Schema.items.items.nullable of type bool"
}