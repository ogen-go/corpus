{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/epam/badgerdoc"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "annotation/documentation/openapi.yaml",
			"byteSize": 98837,
			"content": "openapi: 3.0.2\ninfo:\n  title: Badgerdoc Annotation\n  version: 0.1.5\npaths:\n  /annotation/{task_id}:\n    post:\n      tags:\n      - Annotation\n      - Annotation\n      summary: Save annotation by user.\n      description: |-\n        Saves annotated doc (annotation) by user. For first save base\n        revision of given annotated doc should be null. \"Pages\", \"validated\"\n        and \"failed_validation_pages\" arrays should not be empty at the same\n        time, because there will be nothing to save. Tenant in header is the\n        name of the bucket in minIO, where annotated pages will be saved.\n        Path to pages from bucket (tenant) in minIO is as follows -\n        annotation / {job_id} / {file_id}. Job_id and file_id are received from\n        task entity by provided task_id in path. Also, by this path in minIO there\n        will be manifest.json file, that will contain \"pages\" field with hashes\n        for pages of only latest revisions, \"validated\"/\"failed_validation_pages\"\n        fields with numbers of validated/failed_validation pages respectively.\n      operationId: post_annotation_by_user_annotation__task_id__post\n      parameters:\n      - required: true\n        schema:\n          title: Task Id\n          type: integer\n        example: 5\n        name: task_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocForSaveSchema'\n        required: true\n      responses:\n        '201':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnnotatedDocSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /annotation/{job_id}/{file_id}:\n    get:\n      tags:\n      - Annotation\n      - Revision\n      - Annotation\n      summary: Get all users revisions (or pipeline revision) for particular pages.\n      operationId: get_all_revisions_annotation__job_id___file_id__get\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        name: job_id\n        in: path\n      - required: true\n        schema:\n          title: File Id\n          type: integer\n        name: file_id\n        in: path\n      - required: true\n        schema:\n          title: Page Numbers\n          minimum: 1.0\n          minItems: 1\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n        name: page_numbers\n        in: query\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: Response Get All Revisions Annotation  Job Id   File Id  Get\n                type: object\n                additionalProperties:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/PageOutSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n    post:\n      tags:\n      - Annotation\n      - Annotation\n      summary: Save annotation by pipeline.\n      description: |-\n        Saves annotated doc (annotation) by pipeline. Base revision of\n        given annotated doc should always be null. \"Pages\", \"validated\"\n        and \"failed_validation_pages\" arrays should not be empty at the\n        same time, because there will be nothing to save. Tenant in header\n        is the name of the bucket in minIO, where annotated pages will\n        be saved. Path to pages from bucket (tenant) in minIO is as follows -\n        annotation / {job_id} / {file_id}. Also by this path in minIO there\n        will be manifest.json file, that will contain \"pages\" field with hashes\n        for pages of only latest revisions, \"validated\"/\"failed_validation_pages\"\n        fields with numbers of validated/failed_validation pages respectively.\n      operationId: post_annotation_by_pipeline_annotation__job_id___file_id__post\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        example: 3\n        name: job_id\n        in: path\n      - required: true\n        schema:\n          title: File Id\n          type: integer\n        example: 4\n        name: file_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocForSaveSchema'\n        required: true\n      responses:\n        '201':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnnotatedDocSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /annotation/{file_id}:\n    get:\n      tags:\n      - Annotation\n      - Jobs\n      summary: Get all job_ids that have annotations for the given file_id.\n      operationId: get_jobs_by_file_id_annotation__file_id__get\n      parameters:\n      - required: true\n        schema:\n          title: File Id\n          type: integer\n        example: 4\n        name: file_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: Response Get Jobs By File Id Annotation  File Id  Get\n                type: array\n                items:\n                  $ref: '#/components/schemas/JobOutSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /annotation/{job_id}/{file_id}/latest_by_user:\n    get:\n      tags:\n      - Annotation\n      - Revision\n      - Annotation\n      summary: Get latest revision made by particular user (or by pipeline) for particular\n        pages.\n      operationId: get_latest_revision_by_user_annotation__job_id___file_id__latest_by_user_get\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        example: 3\n        name: job_id\n        in: path\n      - required: true\n        schema:\n          title: File Id\n          type: integer\n        example: 4\n        name: file_id\n        in: path\n      - required: true\n        schema:\n          title: Page Numbers\n          minimum: 1.0\n          minItems: 1\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n        example:\n        - 1\n        - 3\n        - 4\n        name: page_numbers\n        in: query\n      - required: false\n        schema:\n          title: User Id\n          type: string\n          format: uuid\n        example: 1843c251-564b-4c2f-8d42-c61fdac369a1\n        name: user_id\n        in: query\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: Response Get Latest Revision By User Annotation  Job Id   File\n                  Id  Latest By User Get\n                type: object\n                additionalProperties:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/PageOutSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /annotation/{job_id}/{file_id}/{revision}:\n    get:\n      tags:\n      - Annotation\n      - Revision\n      - Annotation\n      summary: Get annotation for given revision.Info will be accumulated from first\n        revision up togiven.\n      operationId: get_annotations_up_to_given_revision_annotation__job_id___file_id___revision__get\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        example: 1\n        name: job_id\n        in: path\n      - required: true\n        schema:\n          title: File Id\n          type: integer\n        example: 1\n        name: file_id\n        in: path\n      - required: true\n        schema:\n          title: Revision\n          type: string\n        example: latest\n        name: revision\n        in: path\n      - required: false\n        schema:\n          title: Page Numbers\n          minimum: 1.0\n          minItems: 1\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n        example:\n        - 1\n        - 3\n        - 4\n        name: page_numbers\n        in: query\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ParticularRevisionSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /annotation/{job_id}/{file_id}/changes/{revision}:\n    get:\n      tags:\n      - Annotation\n      - Revision\n      - Annotation\n      summary: Get annotation for latest or particular revision.\n      operationId: get_annotation_for_given_revision_annotation__job_id___file_id__changes__revision__get\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        example: 1\n        name: job_id\n        in: path\n      - required: true\n        schema:\n          title: File Id\n          type: integer\n        example: 1\n        name: file_id\n        in: path\n      - required: true\n        schema:\n          title: Revision\n          type: string\n        example: latest\n        name: revision\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ParticularRevisionSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /tasks/next:\n    post:\n      tags:\n      - Manual Annotation Tasks\n      summary: Get one annotation task from assigned to a user.\n      description: |-\n        Returns one annotation task from assigned to a user. Current - if\n        there is a task with the \"in_progress\" status, or new, if not.\n      operationId: get_next_annotation_task_tasks_next_post\n      parameters:\n      - required: true\n        schema:\n          title: User\n          type: string\n          format: uuid\n        example: 40b6b526-d6f4-45e8-8af3-d26b5a404018\n        name: user\n        in: header\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExpandedManualAnnotationTaskSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /tasks:\n    get:\n      tags:\n      - Manual Annotation Tasks\n      summary: Get a list of manual annotation tasks based on search parameters.\n      operationId: get_tasks_tasks_get\n      parameters:\n      - required: false\n        schema:\n          title: File Id\n          type: integer\n        example: 5\n        name: file_id\n        in: query\n      - required: false\n        schema:\n          title: Job Id\n          type: integer\n        example: 6\n        name: job_id\n        in: query\n      - required: false\n        schema:\n          title: User Id\n          type: string\n          format: uuid\n        example: 2016a913-47f2-417d-afdb-032165b9330d\n        name: user_id\n        in: query\n      - required: false\n        schema:\n          title: Deadline\n          type: string\n          format: date-time\n        example: '2021-10-19 01:01:01'\n        name: deadline\n        in: query\n      - required: false\n        schema:\n          title: Task Status\n          type: string\n        example: Ready\n        name: task_status\n        in: query\n      - required: false\n        schema:\n          title: Pagination Page Size\n          maximum: 100.0\n          exclusiveMinimum: 0.0\n          type: integer\n          default: 50\n        example: 25\n        name: pagination_page_size\n        in: query\n      - required: false\n        schema:\n          title: Pagination Start Page\n          exclusiveMinimum: 0.0\n          type: integer\n          default: 1\n        example: 1\n        name: pagination_start_page\n        in: query\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: Response Get Tasks Tasks Get\n                type: object\n                additionalProperties:\n                  anyOf:\n                  - type: integer\n                  - type: array\n                    items:\n                      $ref: '#/components/schemas/ExpandedManualAnnotationTaskSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n    post:\n      tags:\n      - Manual Annotation Tasks\n      summary: Save one manual annotation task.\n      operationId: post_task_tasks_post\n      parameters:\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManualAnnotationTaskInSchema'\n        required: true\n      responses:\n        '201':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManualAnnotationTaskSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n    delete:\n      tags:\n      - Manual Annotation Tasks\n      summary: Delete batch of tasks.\n      operationId: delete_batch_tasks_tasks_delete\n      parameters:\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Task Ids\n              type: array\n              items:\n                type: integer\n            example:\n            - 1\n            - 3\n            - 4\n        required: true\n      responses:\n        '204':\n          description: Successful Response\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /tasks/{task_id}:\n    get:\n      tags:\n      - Manual Annotation Tasks\n      summary: Get manual annotation task by id.\n      operationId: get_task_tasks__task_id__get\n      parameters:\n      - required: true\n        schema:\n          title: Task Id\n          type: integer\n        example: 1\n        name: task_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExpandedManualAnnotationTaskSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n    delete:\n      tags:\n      - Manual Annotation Tasks\n      summary: Delete task by id.\n      operationId: delete_task_tasks__task_id__delete\n      parameters:\n      - required: true\n        schema:\n          title: Task Id\n          type: integer\n        example: 3\n        name: task_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '204':\n          description: Successful Response\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n    patch:\n      tags:\n      - Manual Annotation Tasks\n      summary: Update task by id.\n      description: |-\n        Takes not required fields file_id, pages, job_id,\n        user_id or (and) is_validation. By task`s id\n        in path, updates task with tasks file and returns updated task.\n      operationId: update_task_tasks__task_id__patch\n      parameters:\n      - required: true\n        schema:\n          title: Task Id\n          type: integer\n        example: 5\n        name: task_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskPatchSchema'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManualAnnotationTaskSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /tasks/search:\n    post:\n      tags:\n      - Manual Annotation Tasks\n      summary: Search tasks.\n      description: |-\n        Searches and returns annotation and validation tasks data according to\n        search request parameters filters. Supports pagination and ordering.\n      operationId: search_tasks_tasks_search_post\n      parameters:\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/_BadgerdocSearch_tasks_ManualAnnotationTask_'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page_Any_'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /tasks/{task_id}/pages_summary:\n    get:\n      tags:\n      - Manual Annotation Tasks\n      - Revision\n      summary: Get arrays of pages, that have been validated, marked as failed, annotated\n        and not processed in all saved revisions by task_id\n      operationId: get_pages_info_tasks__task_id__pages_summary_get\n      parameters:\n      - required: true\n        schema:\n          title: Task Id\n          type: integer\n        name: task_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PagesInfoSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /tasks/{task_id}/finish:\n    post:\n      tags:\n      - Manual Annotation Tasks\n      summary: Finish task.\n      description: |-\n        Changes task status to Finished by\n        given id.\n\n        If task was for annotation, searches for validation tasks that can\n        be unblocked (moved from 'pending' to 'ready' status) and updates\n        their statuses.\n        If task was for validation, there are several\n        actions for marked as failed or edited pages.\n\n        Parameter annotation_user_for_failed_pages can be assigned\n        the following values:\n\n        initial: annotation tasks will be created for user(s), who\n        annotated failed pages in 'ready' status. Validation tasks will be\n        created and distributed automatically in 'pending' status.\n\n        auto: annotation tasks (in 'ready' status) and validation tasks\n        (in 'pending' status) for failed pages will be created and distributed\n        automatically.\n\n        user_id: annotation task for failed pages will be created in 'ready'\n        status for user with provided id. Validation tasks will be created\n        in 'pending' status and distributed automatically. Note that, if\n        validation type of job is hierarchical, validator in this job\n        cannot be assigned as annotator for marked as failed pages\n\n        Parameter validation_user_for_reannotated_pages can be assigned\n        the following values:\n\n        not_required: validation for edited pages is not required\n\n        auto: validation tasks for edited pages\n        will be created in 'ready' status and distributed automatically\n\n        user_id: validation task for edited pages will be created\n        in 'ready' status for user with provided id. Note that,\n        if validation type of job\n        is not hierarchical, user cannot assign himself for validation\n        of edited pages\n\n        If all tasks associated with\n        job are finished, sends a request to\n        job microservice to put job status to Finished and message to search\n        service via kafka to start indexation for this job.\n        Saves annotated/validated pages in the file.\n\n        If all pages of the file are annotated or validated,\n        the status of the file changes accordingly.\n      operationId: finish_task_tasks__task_id__finish_post\n      parameters:\n      - required: true\n        schema:\n          title: Task Id\n          type: integer\n        example: 3\n        name: task_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ValidationEndSchema'\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManualAnnotationTaskSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /distribution:\n    post:\n      tags:\n      - Manual Annotation Tasks\n      summary: Save manual annotation tasks distribution. Distribution between users\n        is automatic.\n      operationId: post_tasks_distribution_post\n      parameters:\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskInfoSchema'\n        required: true\n      responses:\n        '201':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: Response Post Tasks Distribution Post\n                type: array\n                items:\n                  $ref: '#/components/schemas/ManualAnnotationTaskSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /distribution/{job_id}:\n    post:\n      tags:\n      - Manual Annotation Tasks\n      summary: Distribute all remaining unassigned files and pages for given job_id.\n      operationId: post_tasks_for_unassigned_files_distribution__job_id__post\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        example: 3\n        name: job_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '201':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: Response Post Tasks For Unassigned Files Distribution  Job\n                  Id  Post\n                type: array\n                items:\n                  $ref: '#/components/schemas/ManualAnnotationTaskSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /metadata:\n    get:\n      tags:\n      - Manual Annotation Tasks\n      - Metadata\n      summary: Get list of possible statuses of tasks.\n      operationId: get_entities_statuses_metadata_get\n      parameters:\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntitiesStatusesSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /jobs/{job_id}:\n    post:\n      tags:\n      - Jobs\n      summary: Save info about job.\n      operationId: post_job_jobs__job_id__post\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        example: 3\n        name: job_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JobInfoSchema'\n        required: true\n      responses:\n        '201':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n    patch:\n      tags:\n      - Jobs\n      summary: Update job by job_id.\n      operationId: update_job_jobs__job_id__patch\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        example: 1\n        name: job_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JobPatchSchema'\n        required: true\n      responses:\n        '204':\n          description: Successful Response\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /jobs/{job_id}/files:\n    get:\n      tags:\n      - Files\n      summary: Get list of files for a particular job.\n      operationId: get_job_files_jobs__job_id__files_get\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        name: job_id\n        in: path\n      - required: false\n        schema:\n          title: Page Num\n          exclusiveMinimum: 0.0\n          type: integer\n          default: 1\n        name: page_num\n        in: query\n      - required: false\n        schema:\n          title: Page Size\n          maximum: 100.0\n          exclusiveMinimum: 0.0\n          type: integer\n          default: 50\n        name: page_size\n        in: query\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobFilesInfoSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /jobs/{job_id}/files/unassigned:\n    get:\n      tags:\n      - Files\n      summary: Get list of unassigned files by job id.\n      operationId: get_unassigned_files_jobs__job_id__files_unassigned_get\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        name: job_id\n        in: path\n      - required: false\n        schema:\n          title: Page Num\n          exclusiveMinimum: 0.0\n          type: integer\n          default: 1\n        name: page_num\n        in: query\n      - required: false\n        schema:\n          title: Page Size\n          maximum: 100.0\n          exclusiveMinimum: 0.0\n          type: integer\n          default: 50\n        name: page_size\n        in: query\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnassignedFilesInfoSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /jobs/{job_id}/start:\n    post:\n      tags:\n      - Jobs\n      summary: Start job.\n      description: |-\n        Changes status of tasks associated with\n        given job_id to Ready and sends a request\n        to job microservice to change\n        job status to In Progress.\n      operationId: start_job_jobs__job_id__start_post\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        example: 3\n        name: job_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: Response Start Job Jobs  Job Id  Start Post\n                type: array\n                items:\n                  $ref: '#/components/schemas/ManualAnnotationTaskSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /jobs/{job_id}/users:\n    get:\n      tags:\n      - Jobs\n      summary: Get list of annotators ids and their overall load for job id.\n      operationId: get_users_for_job_jobs__job_id__users_get\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        example: 1\n        name: job_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: Response Get Users For Job Jobs  Job Id  Users Get\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    anyOf:\n                    - type: string\n                      format: uuid\n                    - type: integer\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /jobs/{job_id}/categories:\n    get:\n      tags:\n      - Jobs\n      summary: Get list of categories for provided job_id\n      description: Returns list of categories for provided job_id. Supports pagination\n      operationId: fetch_job_categories_jobs__job_id__categories_get\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        example: 1\n        name: job_id\n        in: path\n      - required: false\n        schema:\n          title: Page Size\n          maximum: 100.0\n          minimum: 1.0\n          type: integer\n          default: 50\n        example: 15\n        name: page_size\n        in: query\n      - required: false\n        schema:\n          title: Page Num\n          minimum: 1.0\n          type: integer\n          default: 1\n        example: 1\n        name: page_num\n        in: query\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page_Union_'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /jobs/{job_id}/categories/search:\n    post:\n      tags:\n      - Jobs\n      summary: Search categories for provided job_id\n      description: |-\n        Searches and returns categories data according to search request parameters\n        filters for the given {job_id}. Supports pagination and ordering.\n      operationId: fetch_job_categories_jobs__job_id__categories_search_post\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        example: 1\n        name: job_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/_BadgerdocSearch_categories_Category_'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page_Union_'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /jobs:\n    get:\n      tags:\n      - Jobs\n      summary: Get info about jobs, in which provided file ids participate\n      operationId: get_jobs_info_by_files_jobs_get\n      parameters:\n      - required: true\n        schema:\n          title: File Ids\n          minimum: 1.0\n          minItems: 1\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n        example:\n        - 1\n        - 3\n        - 4\n        name: file_ids\n        in: query\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /jobs/{job_id}/progress:\n    get:\n      tags:\n      - Jobs\n      summary: Get amount of job's tasks in finished status and total amount of job's\n        tasks.\n      operationId: get_job_progress_jobs__job_id__progress_get\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        example: 1\n        name: job_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobProgressSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /categories:\n    post:\n      tags:\n      - Categories\n      summary: Save new category and return saved one.\n      operationId: save_category_categories_post\n      parameters:\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CategoryInputSchema'\n        required: true\n      responses:\n        '201':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategoryResponseSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /categories/{category_id}:\n    get:\n      tags:\n      - Categories\n      summary: Get category by id.\n      operationId: fetch_category_categories__category_id__get\n      parameters:\n      - required: true\n        schema:\n          title: Category Id\n          type: string\n        example: '1'\n        name: category_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategoryResponseSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n    put:\n      tags:\n      - Categories\n      summary: Update category.\n      description: Updates category by id and returns updated category.\n      operationId: update_category_categories__category_id__put\n      parameters:\n      - required: true\n        schema:\n          title: Category Id\n          type: string\n        example: '1'\n        name: category_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CategoryBaseSchema'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategoryResponseSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n    delete:\n      tags:\n      - Categories\n      summary: Delete category by id.\n      operationId: delete_category_categories__category_id__delete\n      parameters:\n      - required: true\n        schema:\n          title: Category Id\n          type: string\n        example: '1'\n        name: category_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '204':\n          description: Successful Response\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /categories/{category_id}/child:\n    get:\n      tags:\n      - Categories\n      summary: Get list of child categories ids for category with category_id.\n      operationId: get_child_categories_categories__category_id__child_get\n      parameters:\n      - required: true\n        schema:\n          title: Category Id\n          type: string\n        example: Table\n        name: category_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: Response Get Child Categories Categories  Category Id  Child\n                  Get\n                type: array\n                items:\n                  $ref: '#/components/schemas/SubCategoriesOutSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /categories/search:\n    post:\n      tags:\n      - Categories\n      summary: Search categories.\n      description: |-\n        Searches and returns categories data according to search request parameters\n        filters. Supports pagination and ordering.\n      operationId: search_categories_categories_search_post\n      parameters:\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/_BadgerdocSearch_categories_Category_'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page_Union_'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\n  /revisions/{job_id}/{file_id}:\n    get:\n      tags:\n      - Revision\n      - Annotation\n      summary: Get list of all revisions for provided job_id and file_id without annotation\n        of pages.\n      operationId: get_revisions_without_annotation_revisions__job_id___file_id__get\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: integer\n        example: 1\n        name: job_id\n        in: path\n      - required: true\n        schema:\n          title: File Id\n          type: integer\n        example: 1\n        name: file_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: Response Get Revisions Without Annotation Revisions  Job Id   File\n                  Id  Get\n                type: array\n                items:\n                  $ref: '#/components/schemas/AnnotatedDocSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n      - TenantDependencyDocs: []\ncomponents:\n  schemas:\n    AnnotatedDocSchema:\n      title: AnnotatedDocSchema\n      required:\n      - revision\n      - user\n      - pipeline\n      - date\n      - file_id\n      - job_id\n      - pages\n      - validated\n      - failed_validation_pages\n      - tenant\n      type: object\n      properties:\n        revision:\n          title: Revision\n          type: string\n          example: 20fe52cce6a632c6eb09fdc5b3e1594f926eea69\n        user:\n          title: User\n          type: string\n          format: uuid\n          example: 0b0ea570-e4e8-4664-84ac-dd1122471fc5\n        pipeline:\n          title: Pipeline\n          type: integer\n          example: 1\n        date:\n          title: Date\n          type: string\n          format: date-time\n          example: '2021-10-19 01:01:01'\n        file_id:\n          title: File Id\n          type: integer\n          example: 1\n        job_id:\n          title: Job Id\n          type: integer\n          example: 1\n        pages:\n          title: Pages\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            '1': 19fe52cce6a632c6eb09fdc5b3e1594f926eea69\n            '2': adda414648714f01c1c9657646b72ebb4433c8b5\n        validated:\n          title: Validated\n          minimum: 1.0\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n          example:\n          - 1\n          - 2\n          - 10\n        failed_validation_pages:\n          title: Failed Validation Pages\n          minimum: 1.0\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n          example:\n          - 3\n          - 4\n        tenant:\n          title: Tenant\n          type: string\n          example: badger-doc\n        task_id:\n          title: Task Id\n          type: integer\n          example: 2\n    BadRequestErrorSchema:\n      title: BadRequestErrorSchema\n      required:\n      - detail\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: string\n      example:\n        detail: Bad request.\n    CategoryBaseSchema:\n      title: CategoryBaseSchema\n      required:\n      - name\n      - type\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n          example: Title\n        parent:\n          title: Parent\n          type: string\n          example: 'null'\n        metadata:\n          title: Metadata\n          type: object\n          example:\n            color: blue\n        type:\n          $ref: '#/components/schemas/CategoryTypeSchema'\n        editor:\n          title: Editor\n          type: string\n          example: http://editor/\n        data_attributes:\n          title: Data Attributes\n          type: array\n          items:\n            type: object\n          example:\n          - attr_1: value_1\n          - attr_2: value_2\n    CategoryInputSchema:\n      title: CategoryInputSchema\n      required:\n      - name\n      - type\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n          example: Title\n        parent:\n          title: Parent\n          type: string\n          example: 'null'\n        metadata:\n          title: Metadata\n          type: object\n          example:\n            color: blue\n        type:\n          $ref: '#/components/schemas/CategoryTypeSchema'\n        editor:\n          title: Editor\n          type: string\n          example: http://editor/\n        data_attributes:\n          title: Data Attributes\n          type: array\n          items:\n            type: object\n          example:\n          - attr_1: value_1\n          - attr_2: value_2\n        id:\n          title: Id\n          type: string\n          description: If id is not provided, generates it as a UUID.\n          example: my_category\n    CategoryResponseSchema:\n      title: CategoryResponseSchema\n      required:\n      - name\n      - type\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n          example: Title\n        parent:\n          title: Parent\n          type: string\n          example: 'null'\n        metadata:\n          title: Metadata\n          type: object\n          example:\n            color: blue\n        type:\n          $ref: '#/components/schemas/CategoryTypeSchema'\n        editor:\n          title: Editor\n          type: string\n          example: http://editor/\n        data_attributes:\n          title: Data Attributes\n          type: array\n          items:\n            type: object\n          example:\n          - attr_1: value_1\n          - attr_2: value_2\n        id:\n          title: Id\n          type: string\n          description: If id is not provided, generates it as a UUID.\n          example: my_category\n        parents:\n          title: Parents\n          type: array\n          items:\n            type: object\n          default: []\n        children:\n          title: Children\n          type: array\n          items:\n            type: object\n          default: []\n    CategoryTypeSchema:\n      title: CategoryTypeSchema\n      enum:\n      - box\n      - link\n      - segmentation\n      type: string\n      description: An enumeration.\n    ConnectionErrorSchema:\n      title: ConnectionErrorSchema\n      required:\n      - detail\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: string\n      example:\n        detail: 'Error: Connection error.'\n    DocForSaveSchema:\n      title: DocForSaveSchema\n      type: object\n      properties:\n        base_revision:\n          title: Base Revision\n          type: string\n          example: 20fe52cce6a632c6eb09fdc5b3e1594f926eea69\n        user:\n          title: User\n          type: string\n          format: uuid\n          example: b0ac6d8c-7b31-4570-a634-c92b07c9e566\n        pipeline:\n          title: Pipeline\n          type: integer\n          example: 1\n        pages:\n          title: Pages\n          type: array\n          items:\n            $ref: '#/components/schemas/PageSchema'\n        validated:\n          title: Validated\n          minimum: 1.0\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n          example:\n          - 1\n          - 2\n          - 10\n        failed_validation_pages:\n          title: Failed Validation Pages\n          minimum: 1.0\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n          example:\n          - 3\n          - 4\n    EntitiesStatusesSchema:\n      title: EntitiesStatusesSchema\n      type: object\n      properties:\n        task_statuses:\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskStatusEnumSchema'\n          default:\n          - Pending\n          - Ready\n          - In Progress\n          - Finished\n    ExpandedManualAnnotationTaskSchema:\n      title: ExpandedManualAnnotationTaskSchema\n      required:\n      - id\n      - pages\n      - user_id\n      - file\n      - job\n      type: object\n      properties:\n        id:\n          title: Id\n          type: integer\n          example: 4\n        status:\n          allOf:\n          - $ref: '#/components/schemas/TaskStatusEnumSchema'\n          default: Pending\n          example: Pending\n        pages:\n          title: Pages\n          minimum: 1.0\n          minItems: 1\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n        user_id:\n          title: User Id\n          type: string\n          format: uuid\n          example: 3082242e-15e3-4e18-aad0-e3bf182b8550\n        is_validation:\n          title: Is Validation\n          type: boolean\n          default: false\n          example: false\n        deadline:\n          title: Deadline\n          type: string\n          format: date-time\n          example: '2021-10-19 01:01:01'\n        file:\n          $ref: '#/components/schemas/NameSchema'\n        job:\n          $ref: '#/components/schemas/NameSchema'\n    FileInfoSchema:\n      title: FileInfoSchema\n      required:\n      - id\n      - status\n      type: object\n      properties:\n        id:\n          title: Id\n          type: integer\n          example: 1\n        status:\n          $ref: '#/components/schemas/FileStatusEnumSchema'\n    FileStatusEnumSchema:\n      title: FileStatusEnumSchema\n      enum:\n      - Pending\n      - Annotated\n      - Validated\n      type: string\n      description: An enumeration.\n    HTTPValidationError:\n      title: HTTPValidationError\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: array\n          items:\n            $ref: '#/components/schemas/ValidationError'\n    JobFilesInfoSchema:\n      title: JobFilesInfoSchema\n      required:\n      - tenant\n      - job_id\n      - total_objects\n      - current_page\n      - page_size\n      - files\n      type: object\n      properties:\n        tenant:\n          title: Tenant\n          type: string\n          example: test\n        job_id:\n          title: Job Id\n          type: integer\n          example: 1\n        total_objects:\n          title: Total Objects\n          type: integer\n          example: 10\n        current_page:\n          title: Current Page\n          type: integer\n          example: 1\n        page_size:\n          title: Page Size\n          type: integer\n          example: 50\n        files:\n          title: Files\n          type: array\n          items:\n            $ref: '#/components/schemas/FileInfoSchema'\n    JobInfoSchema:\n      title: JobInfoSchema\n      required:\n      - callback_url\n      - annotators\n      - validators\n      - owners\n      - files\n      - datasets\n      - categories\n      - job_type\n      type: object\n      properties:\n        callback_url:\n          title: Callback Url\n          type: string\n          example: http://jobs/jobs/1\n        name:\n          title: Name\n          type: string\n          example: job_name\n        annotators:\n          title: Annotators\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n            format: uuid\n          example:\n          - b44156f8-e634-48a6-b5f3-c8b1462a2d67\n          - f0474853-f733-41c0-b897-90b788b822e3\n        validators:\n          title: Validators\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n            format: uuid\n          example:\n          - b44156f8-e634-48a6-b5f3-c8b1462a2d67\n          - f0474853-f733-41c0-b897-90b788b822e3\n        owners:\n          title: Owners\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n            format: uuid\n          example:\n          - b44156f8-e634-48a6-b5f3-c8b1462a2d67\n          - f0474853-f733-41c0-b897-90b788b822e3\n        validation_type:\n          allOf:\n          - $ref: '#/components/schemas/ValidationSchema'\n          default: cross\n          example: cross\n        files:\n          title: Files\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n        datasets:\n          title: Datasets\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n        is_auto_distribution:\n          title: Is Auto Distribution\n          type: boolean\n          default: false\n          example: false\n        categories:\n          title: Categories\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n          example:\n          - '1'\n          - '2'\n        deadline:\n          title: Deadline\n          type: string\n          format: date-time\n          example: '2021-10-19 01:01:01'\n        job_type:\n          $ref: '#/components/schemas/JobTypeEnumSchema'\n    JobOutSchema:\n      title: JobOutSchema\n      required:\n      - job_id\n      - is_manual\n      type: object\n      properties:\n        job_id:\n          title: Job Id\n          type: integer\n          example: 1\n        is_manual:\n          title: Is Manual\n          type: boolean\n          example: true\n    JobPatchSchema:\n      title: JobPatchSchema\n      type: object\n      properties:\n        callback_url:\n          title: Callback Url\n          type: string\n          example: http://jobs/jobs/1\n        name:\n          title: Name\n          type: string\n          example: job_name\n        annotators:\n          title: Annotators\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n            format: uuid\n          example:\n          - f0474853-f733-41c0-b897-90b788b822e3\n        validators:\n          title: Validators\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n            format: uuid\n          example:\n          - b44156f8-e634-48a6-b5f3-c8b1462a2d67\n        owners:\n          title: Owners\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n            format: uuid\n          example:\n          - b44156f8-e634-48a6-b5f3-c8b1462a2d67\n        files:\n          title: Files\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n        datasets:\n          title: Datasets\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n        categories:\n          title: Categories\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n          example:\n          - '1'\n          - '2'\n        deadline:\n          title: Deadline\n          type: string\n          format: date-time\n          example: '2021-10-19 01:01:01'\n    JobProgressSchema:\n      title: JobProgressSchema\n      required:\n      - finished\n      - total\n      type: object\n      properties:\n        finished:\n          title: Finished\n          type: integer\n          example: 1\n        total:\n          title: Total\n          type: integer\n          example: 1\n    JobTypeEnumSchema:\n      title: JobTypeEnumSchema\n      enum:\n      - ExtractionJob\n      - ExtractionWithAnnotationJob\n      - AnnotationJob\n      - ImportJob\n      type: string\n      description: An enumeration.\n    ManualAnnotationTaskInSchema:\n      title: ManualAnnotationTaskInSchema\n      required:\n      - file_id\n      - pages\n      - job_id\n      - user_id\n      type: object\n      properties:\n        file_id:\n          title: File Id\n          type: integer\n          example: 2\n        pages:\n          title: Pages\n          minimum: 1.0\n          minItems: 1\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n        job_id:\n          title: Job Id\n          type: integer\n          example: 3\n        user_id:\n          title: User Id\n          type: string\n          format: uuid\n          example: 4e9c5839-f63b-49c8-b918-614b87813e53\n        is_validation:\n          title: Is Validation\n          type: boolean\n          default: false\n          example: false\n        deadline:\n          title: Deadline\n          type: string\n          format: date-time\n          example: '2021-10-19 01:01:01'\n    ManualAnnotationTaskSchema:\n      title: ManualAnnotationTaskSchema\n      required:\n      - id\n      - file_id\n      - pages\n      - job_id\n      - user_id\n      type: object\n      properties:\n        id:\n          title: Id\n          type: integer\n          example: 4\n        status:\n          allOf:\n          - $ref: '#/components/schemas/TaskStatusEnumSchema'\n          default: Pending\n          example: Pending\n        file_id:\n          title: File Id\n          type: integer\n          example: 2\n        pages:\n          title: Pages\n          minimum: 1.0\n          minItems: 1\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n        job_id:\n          title: Job Id\n          type: integer\n          example: 3\n        user_id:\n          title: User Id\n          type: string\n          format: uuid\n          example: 4e9c5839-f63b-49c8-b918-614b87813e53\n        is_validation:\n          title: Is Validation\n          type: boolean\n          default: false\n          example: false\n        deadline:\n          title: Deadline\n          type: string\n          format: date-time\n          example: '2021-10-19 01:01:01'\n    NameSchema:\n      title: NameSchema\n      required:\n      - id\n      type: object\n      properties:\n        id:\n          title: Id\n          type: integer\n          example: 1\n        name:\n          title: Name\n          type: string\n          example: NameOfJobOrFile\n    NotFoundErrorSchema:\n      title: NotFoundErrorSchema\n      required:\n      - detail\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: string\n      example:\n        detail: Resource was not found.\n    PageOutSchema:\n      title: PageOutSchema\n      required:\n      - page_num\n      - size\n      - objs\n      - revision\n      - user_id\n      - pipeline\n      - date\n      type: object\n      properties:\n        page_num:\n          title: Page Num\n          minimum: 1.0\n          type: integer\n          example: 2\n        size:\n          title: Size\n          type: object\n          additionalProperties:\n            type: number\n          example:\n            width: 10.2\n            height: 123.34\n        objs:\n          title: Objs\n          type: array\n          items:\n            type: object\n          example:\n          - id: 2\n            type: string\n            segmentation:\n              segment: string\n            bbox:\n            - 10.2\n            - 123.34\n            - 34.2\n            - 43.4\n            links:\n            - category_id: '1'\n              to: 2\n              page_num: 2\n            text: text in object\n            category: '3'\n            data: string\n            children:\n            - 1\n            - 2\n            - 3\n          - id: 3\n            type: string\n            segmentation:\n              segment: string\n            tokens:\n            - token-string1\n            - token-string2\n            - token-string3\n            links:\n            - category_id: '1'\n              to: 2\n              page_num: 3\n            text: text in object\n            category: '3'\n            data: string\n            children:\n            - 1\n            - 2\n            - 3\n        revision:\n          title: Revision\n          type: string\n          example: 20fe52cce6a632c6eb09fdc5b3e1594f926eea69\n        user_id:\n          title: User Id\n          type: string\n          format: uuid\n          example: c1c76433-5bfb-4c4a-a5b5-93c66fbfe376\n        pipeline:\n          title: Pipeline\n          type: integer\n          example: 2\n        date:\n          title: Date\n          type: string\n          format: date-time\n          example: '2021-10-19 01:01:01'\n        is_validated:\n          title: Is Validated\n          type: boolean\n          default: false\n          example: false\n    PageSchema:\n      title: PageSchema\n      required:\n      - page_num\n      - size\n      - objs\n      type: object\n      properties:\n        page_num:\n          title: Page Num\n          minimum: 1.0\n          type: integer\n          example: 2\n        size:\n          title: Size\n          type: object\n          additionalProperties:\n            type: number\n          example:\n            width: 10.2\n            height: 123.34\n        objs:\n          title: Objs\n          type: array\n          items:\n            type: object\n          example:\n          - id: 2\n            type: string\n            segmentation:\n              segment: string\n            bbox:\n            - 10.2\n            - 123.34\n            - 34.2\n            - 43.4\n            links:\n            - category_id: '1'\n              to: 2\n              page_num: 2\n            text: text in object\n            category: '3'\n            data: string\n            children:\n            - 1\n            - 2\n            - 3\n          - id: 3\n            type: string\n            segmentation:\n              segment: string\n            tokens:\n            - token-string1\n            - token-string2\n            - token-string3\n            links:\n            - category_id: '1'\n              to: 2\n              page_num: 3\n            text: text in object\n            category: '3'\n            data: string\n            children:\n            - 1\n            - 2\n            - 3\n    Page_Any_:\n      title: Page[Any]\n      required:\n      - pagination\n      - data\n      type: object\n      properties:\n        pagination:\n          $ref: '#/components/schemas/PaginationOut'\n        data:\n          title: Data\n          type: array\n          items: {}\n      description: |-\n        Abstract base class for generic types.\n\n        A generic type is typically declared by inheriting from\n        this class parameterized with one or more type variables.\n        For example, a generic mapping type might be defined as::\n\n          class Mapping(Generic[KT, VT]):\n              def __getitem__(self, key: KT) -\u003e VT:\n                  ...\n              # Etc.\n\n        This class can then be used as follows::\n\n          def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -\u003e VT:\n              try:\n                  return mapping[key]\n              except KeyError:\n                  return default\n    Page_Union_:\n      title: Page[Union]\n      required:\n      - pagination\n      - data\n      type: object\n      properties:\n        pagination:\n          $ref: '#/components/schemas/PaginationOut'\n        data:\n          title: Data\n          type: array\n          items:\n            anyOf:\n            - $ref: '#/components/schemas/CategoryResponseSchema'\n            - type: string\n            - type: object\n      description: |-\n        Abstract base class for generic types.\n\n        A generic type is typically declared by inheriting from\n        this class parameterized with one or more type variables.\n        For example, a generic mapping type might be defined as::\n\n          class Mapping(Generic[KT, VT]):\n              def __getitem__(self, key: KT) -\u003e VT:\n                  ...\n              # Etc.\n\n        This class can then be used as follows::\n\n          def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -\u003e VT:\n              try:\n                  return mapping[key]\n              except KeyError:\n                  return default\n    PagesInfoSchema:\n      title: PagesInfoSchema\n      required:\n      - validated\n      - failed_validation_pages\n      - annotated_pages\n      - not_processed\n      type: object\n      properties:\n        validated:\n          title: Validated\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n        failed_validation_pages:\n          title: Failed Validation Pages\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n          example:\n          - 4\n          - 5\n        annotated_pages:\n          title: Annotated Pages\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n          - 4\n        not_processed:\n          title: Not Processed\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n          example:\n          - 6\n    Pagination:\n      title: Pagination\n      required:\n      - page_size\n      type: object\n      properties:\n        page_num:\n          title: Page Num\n          exclusiveMinimum: 0.0\n          type: integer\n          default: 1\n        page_size:\n          $ref: '#/components/schemas/_FilterPagesize'\n    PaginationOut:\n      title: PaginationOut\n      required:\n      - page_size\n      - min_pages_left\n      - total\n      - has_more\n      type: object\n      properties:\n        page_num:\n          title: Page Num\n          exclusiveMinimum: 0.0\n          type: integer\n          default: 1\n        page_size:\n          $ref: '#/components/schemas/_FilterPagesize'\n        min_pages_left:\n          title: Min Pages Left\n          type: integer\n        total:\n          title: Total\n          type: integer\n        has_more:\n          title: Has More\n          type: boolean\n    ParticularRevisionSchema:\n      title: ParticularRevisionSchema\n      required:\n      - revision\n      - user\n      - pipeline\n      - date\n      - pages\n      type: object\n      properties:\n        revision:\n          title: Revision\n          type: string\n          example: 20fe52cce6a632c6eb09fdc5b3e1594f926eea69\n        user:\n          title: User\n          type: string\n          format: uuid\n          example: c7311267-fdfd-4ef1-be44-160d3dd819ca\n        pipeline:\n          title: Pipeline\n          type: integer\n          example: 1\n        date:\n          title: Date\n          type: string\n          format: date-time\n          example: '2021-10-19 01:01:01'\n        pages:\n          title: Pages\n          type: array\n          items:\n            $ref: '#/components/schemas/PageSchema'\n        validated:\n          title: Validated\n          minimum: 1.0\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n          example:\n          - 2\n        failed_validation_pages:\n          title: Failed Validation Pages\n          minimum: 1.0\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n          example: []\n    SubCategoriesOutSchema:\n      title: SubCategoriesOutSchema\n      required:\n      - id\n      type: object\n      properties:\n        id:\n          title: Id\n          type: string\n          example: '123'\n    TaskInfoSchema:\n      title: TaskInfoSchema\n      required:\n      - user_ids\n      - files\n      - datasets\n      - job_id\n      type: object\n      properties:\n        user_ids:\n          title: User Ids\n          minItems: 1\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n            format: uuid\n          example:\n          - b44156f8-e634-48a6-b5f3-c8b1462a2d67\n          - f0474853-f733-41c0-b897-90b788b822e3\n        files:\n          title: Files\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n        datasets:\n          title: Datasets\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n        job_id:\n          title: Job Id\n          type: integer\n          example: 3\n        deadline:\n          title: Deadline\n          type: string\n          format: date-time\n          example: '2021-10-19 01:01:01'\n    TaskPatchSchema:\n      title: TaskPatchSchema\n      type: object\n      properties:\n        file_id:\n          title: File Id\n          type: integer\n          example: 2\n        pages:\n          title: Pages\n          minimum: 1.0\n          minItems: 1\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n        job_id:\n          title: Job Id\n          type: integer\n          example: 3\n        user_id:\n          title: User Id\n          type: string\n          format: uuid\n          example: 4e9c5839-f63b-49c8-b918-614b87813e53\n        is_validation:\n          title: Is Validation\n          type: boolean\n          example: false\n        deadline:\n          title: Deadline\n          type: string\n          format: date-time\n          example: '2021-10-19 01:01:01'\n    TaskStatusEnumSchema:\n      title: TaskStatusEnumSchema\n      enum:\n      - Pending\n      - Ready\n      - In Progress\n      - Finished\n      type: string\n      description: An enumeration.\n    UnassignedFileSchema:\n      title: UnassignedFileSchema\n      required:\n      - id\n      - pages_to_annotate\n      - pages_to_validate\n      type: object\n      properties:\n        id:\n          title: Id\n          type: integer\n          example: 1\n        pages_to_annotate:\n          title: Pages To Annotate\n          minimum: 1.0\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n        pages_to_validate:\n          title: Pages To Validate\n          minimum: 1.0\n          uniqueItems: true\n          type: array\n          items:\n            minimum: 1.0\n            type: integer\n          example:\n          - 1\n          - 2\n          - 3\n    UnassignedFilesInfoSchema:\n      title: UnassignedFilesInfoSchema\n      required:\n      - tenant\n      - job_id\n      - total_objects\n      - current_page\n      - page_size\n      - unassigned_files\n      type: object\n      properties:\n        tenant:\n          title: Tenant\n          type: string\n          example: test\n        job_id:\n          title: Job Id\n          type: integer\n          example: 1\n        total_objects:\n          title: Total Objects\n          type: integer\n          example: 1\n        current_page:\n          title: Current Page\n          type: integer\n          example: 1\n        page_size:\n          title: Page Size\n          type: integer\n          example: 50\n        unassigned_files:\n          title: Unassigned Files\n          type: array\n          items:\n            $ref: '#/components/schemas/UnassignedFileSchema'\n    ValidationEndSchema:\n      title: ValidationEndSchema\n      type: object\n      properties:\n        annotation_user_for_failed_pages:\n          title: Annotation User For Failed Pages\n          type: string\n          example: initial\n        validation_user_for_reannotated_pages:\n          title: Validation User For Reannotated Pages\n          type: string\n          example: auto\n    ValidationError:\n      title: ValidationError\n      required:\n      - loc\n      - msg\n      - type\n      type: object\n      properties:\n        loc:\n          title: Location\n          type: array\n          items:\n            type: string\n        msg:\n          title: Message\n          type: string\n        type:\n          title: Error Type\n          type: string\n    ValidationSchema:\n      title: ValidationSchema\n      enum:\n      - cross\n      - hierarchical\n      - validation only\n      type: string\n      description: An enumeration.\n    _BadgerdocSearch_categories_Category_:\n      title: _BadgerdocSearch[categories_Category]\n      type: object\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        filters:\n          title: Filters\n          type: array\n          items:\n            $ref: '#/components/schemas/_Filters_categories_Category_'\n        sorting:\n          title: Sorting\n          type: array\n          items:\n            $ref: '#/components/schemas/_Sorts_categories_Category_'\n      description: |-\n        Abstract base class for generic types.\n\n        A generic type is typically declared by inheriting from\n        this class parameterized with one or more type variables.\n        For example, a generic mapping type might be defined as::\n\n          class Mapping(Generic[KT, VT]):\n              def __getitem__(self, key: KT) -\u003e VT:\n                  ...\n              # Etc.\n\n        This class can then be used as follows::\n\n          def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -\u003e VT:\n              try:\n                  return mapping[key]\n              except KeyError:\n                  return default\n    _BadgerdocSearch_tasks_ManualAnnotationTask_:\n      title: _BadgerdocSearch[tasks_ManualAnnotationTask]\n      type: object\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        filters:\n          title: Filters\n          type: array\n          items:\n            $ref: '#/components/schemas/_Filters_tasks_ManualAnnotationTask_'\n        sorting:\n          title: Sorting\n          type: array\n          items:\n            $ref: '#/components/schemas/_Sorts_tasks_ManualAnnotationTask_'\n      description: |-\n        Abstract base class for generic types.\n\n        A generic type is typically declared by inheriting from\n        this class parameterized with one or more type variables.\n        For example, a generic mapping type might be defined as::\n\n          class Mapping(Generic[KT, VT]):\n              def __getitem__(self, key: KT) -\u003e VT:\n                  ...\n              # Etc.\n\n        This class can then be used as follows::\n\n          def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -\u003e VT:\n              try:\n                  return mapping[key]\n              except KeyError:\n                  return default\n    _FilterOperations:\n      title: _FilterOperations\n      enum:\n      - is_null\n      - is_not_null\n      - eq\n      - ne\n      - gt\n      - lt\n      - ge\n      - le\n      - like\n      - ilike\n      - not_ilike\n      - in\n      - not_in\n      - any\n      - not_any\n      - match\n      - distinct\n      - parent\n      - parents_recursive\n      - children\n      - children_recursive\n      type: string\n      description: An enumeration.\n    _FilterPagesize:\n      title: _FilterPagesize\n      enum:\n      - 15\n      - 30\n      - 50\n      - 80\n      - 100\n      type: integer\n      description: An enumeration.\n    _Filters_categories_Category_:\n      title: _Filters[categories_Category]\n      required:\n      - field\n      - operator\n      type: object\n      properties:\n        field:\n          $ref: '#/components/schemas/categories_Category'\n        operator:\n          $ref: '#/components/schemas/_FilterOperations'\n        value:\n          title: Value\n    _Filters_tasks_ManualAnnotationTask_:\n      title: _Filters[tasks_ManualAnnotationTask]\n      required:\n      - field\n      - operator\n      type: object\n      properties:\n        field:\n          $ref: '#/components/schemas/tasks_ManualAnnotationTask'\n        operator:\n          $ref: '#/components/schemas/_FilterOperations'\n        value:\n          title: Value\n    _SortDirection:\n      title: _SortDirection\n      enum:\n      - asc\n      - desc\n      type: string\n      description: An enumeration.\n    _Sorts_categories_Category_:\n      title: _Sorts[categories_Category]\n      required:\n      - field\n      - direction\n      type: object\n      properties:\n        field:\n          $ref: '#/components/schemas/categories_Category'\n        direction:\n          $ref: '#/components/schemas/_SortDirection'\n    _Sorts_tasks_ManualAnnotationTask_:\n      title: _Sorts[tasks_ManualAnnotationTask]\n      required:\n      - field\n      - direction\n      type: object\n      properties:\n        field:\n          $ref: '#/components/schemas/tasks_ManualAnnotationTask'\n        direction:\n          $ref: '#/components/schemas/_SortDirection'\n    categories_Category:\n      title: categories_Category\n      enum:\n      - id\n      - name\n      - parent\n      - type\n      - editor\n      - tree\n      type: string\n      description: An enumeration.\n    tasks_ManualAnnotationTask:\n      title: tasks_ManualAnnotationTask\n      enum:\n      - id\n      - file_id\n      - job_id\n      - user_id\n      - is_validation\n      - status\n      - deadline\n      type: string\n      description: An enumeration.\n  securitySchemes:\n    TenantDependencyDocs:\n      type: http\n      scheme: bearer\ntags:\n- name: Manual Annotation Tasks\n  description: Actions associated with manual annotation tasks.\n- name: Jobs\n  description: Actions associated with jobs.\n- name: Annotation\n  description: Actions associated with annotation.\n- name: Revision\n  description: Actions associated with revisions.\n- name: Categories\n  description: Actions associated with categories.\n- name: Files\n  description: Actions associated with files.\n- name: Metadata\n  description: Get list of possible entities statuses.\n",
			"canonicalURL": "/github.com/epam/badgerdoc@39600e5ebb9e54145bbbb7973b16d79612111db1/-/blob/annotation/documentation/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/epam/badgerdoc/blob/39600e5ebb9e54145bbbb7973b16d79612111db1/annotation/documentation/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 590: cannot unmarshal !!float `0.0` into bool; yaml: line 599: cannot unmarshal !!float `0.0` into bool; yaml: line 1359: cannot unmarshal !!float `0.0` into bool; yaml: line 1368: cannot unmarshal !!float `0.0` into bool; yaml: line 1423: cannot unmarshal !!float `0.0` into bool; yaml: line 1432: cannot unmarshal !!float `0.0` into bool; yaml: line 3177: cannot unmarshal !!float `0.0` into bool; yaml: line 3193: cannot unmarshal !!float `0.0` into bool"
}