{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/netology-code/jd-homeworks"
		},
		"file": {
			"name": "CloudServiceSpecification.yaml",
			"size": 0,
			"path": "diploma/CloudServiceSpecification.yaml",
			"byteSize": 7054,
			"content": "openapi: 3.0.0\ninfo:\n  title: Cloud API\n  description: Cloud API\n  version: 1.0.0\nservers:\n  - url: 'http://localhost:8080/cloud'\n    description: local server\npaths:\n  /login:\n    post:\n      description: Authorization method\n      requestBody:\n        description: Login and password hash\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                login:\n                  type: string\n                  required: true\n                password:\n                  type: string\n                  required: true\n      responses:\n        '200':\n          description: Success authorization\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Login'\n        '400':\n          description: Bad credentials\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /logout:\n    post:\n      parameters:\n        - in: header\n          name: auth-token\n          schema:\n            type: string\n          required: true\n      description: Logout\n      responses:\n        '200':\n          description: Success logout\n  /file:\n    post:\n      description: Upload file to server\n      parameters:\n        - in: header\n          name: auth-token\n          schema:\n            type: string\n          required: true\n        - name: filename\n          in: query\n          schema:\n            type: string\n          description: File name to upload\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/File'\n      responses:\n        '200':\n          description: Success upload\n        '400':\n          description: Error input data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      description: Delete file\n      parameters:\n        - in: header\n          name: auth-token\n          schema:\n            type: string\n          required: true\n        - name: filename\n          in: query\n          schema:\n            type: string\n          description: File name to delete\n          required: true\n      responses:\n        '200':\n          description: Success deleted\n        '400':\n          description: Error input data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Error delet file\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      description: Dowload file from cloud\n      parameters:\n        - in: header\n          name: auth-token\n          schema:\n            type: string\n          required: true\n        - name: filename\n          in: query\n          schema:\n            type: string\n          description: File name to download\n      responses:\n        '200':\n          description: Success deleted\n          content:\n            multipart/form-data:\n              schema:\n                $ref: '#/components/schemas/File'\n        '400':\n          description: Error input data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Error upload file\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      description: Edit file name\n      parameters:\n        - in: header\n          name: auth-token\n          schema:\n            type: string\n          required: true\n        - name: filename\n          in: query\n          schema:\n            type: string\n          description: File name to upload\n      requestBody:\n        description: Login and password hash\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n      responses:\n        '200':\n          description: Success upload\n        '400':\n          description: Error input data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Error upload file\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'                \n  /list:\n    get:\n      description: Get all files\n      parameters:\n        - in: header\n          name: auth-token\n          schema:\n            type: string\n          required: true\n        - name: limit\n          in: query\n          schema:\n            type: integer\n          description: Number requested items\n      responses:\n        '200':\n          description: Success get list\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  filename:\n                    type: string\n                    description: File name\n                    required: true\n                  size:\n                    type: integer\n                    description: File size in bytes\n                    required: true\n        '400':\n          description: Error input data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Error getting file list\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    Error:\n      type: object\n      properties:\n        message:\n          type: string\n          description: Error message\n        id:\n          type: integer\n    File:\n      type: object\n      properties:\n        hash:\n          type: string\n        file:\n          type: string\n          format: binary\n    Login:\n      type: object\n      properties:\n        auth-token:\n          type: string\n",
			"canonicalURL": "/github.com/netology-code/jd-homeworks@7e2aad039b550c9cd8a6bddfaae56b654cafe4ab/-/blob/diploma/CloudServiceSpecification.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/netology-code/jd-homeworks/blob/7e2aad039b550c9cd8a6bddfaae56b654cafe4ab/diploma/CloudServiceSpecification.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:43: callback: json: cannot unmarshal bool into Go struct field Schema.required of type []string"
}