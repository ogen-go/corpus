{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/fogfish/oauth2"
		},
		"file": {
			"name": "restapi.yml",
			"size": 0,
			"path": "doc/restapi.yml",
			"byteSize": 15092,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: v2.0\n  title: OAuth 2.0 Authorization Server Interface\n  description:\n    The interface implements an authorization layer and separating the role of \n    the client from that of the resource owner.\n\n    See The OAuth 2.0 Authorization Framework and other related specifications\n      \n      * https://tools.ietf.org/html/rfc6749\n\n      * https://tools.ietf.org/html/rfc8252\n\n      * https://tools.ietf.org/html/rfc7662\n\n      * https://tools.ietf.org/html/rfc7519\n\n\n    This document quotes listed specification to clarify details of interfaces. \n\n##-----------------------------------------------------------------------------\n##\n## Interface end-points\n##\n##-----------------------------------------------------------------------------\n\npaths:\n\n  ##\n  ##\n  /oauth2/authorize:\n    get:\n      description: |\n        The authorization endpoint is used to interact with the resource owner \n        and obtain an authorization grant. The OAuth app redirects a consumer's\n        user agent to initiate either Authorization Code or Implicit Grants.\n\n        See RFC 6749 for details\n          * https://tools.ietf.org/html/rfc6749#section-4.1\n          * https://tools.ietf.org/html/rfc6749#section-4.2\n\n        The endpoint renders a user-expereince that verifies the identity of \n        the resource owner. It uses a traditional username/password pair to\n        authenticate the resources owners.\n\n        After completing its interaction with the resource owner, the authorization \n        server directs the resource owner's user-agent back to the client. \n        The authorization server redirects the user-agent to the client's \n        redirection endpoint previously established with the authorization \n        server during the client registration process.\n\n\n      parameters:\n        - $ref: '#/components/parameters/client_id'\n        - $ref: '#/components/parameters/response_type'\n        - $ref: '#/components/parameters/state'\n\n      responses:\n        '200':\n          description: |\n            Renders OAuth 2.0 user expereince.\n\n          content:\n            text/html:\n              schema:\n                type: string\n                format: binary\n\n        default:\n          description: |\n            Unable to execute the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n\n  ##\n  ##\n  /oauth2/token:\n    post:\n      description: |\n        The token endpoint is used by the client to obtain an access token by \n        presenting its authorization grant or refresh token.\n\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/request'\n\n      responses:\n        '200':\n          description: |\n            Authorization server exchanges the grant to valid token.\n\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/token'\n\n        default:\n          description: |\n            Unable to execute the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n\n  ##\n  ##\n  /oauth2/introspect:\n    post:\n      description: |\n        The contents of access tokens are opaque to clients. The client does not \n        need to know anything about the content or structure of the token itself, \n        if there is any. However, there is still a large amount of metadata that \n        may be attached to a token, such as its current validity, approved scopes, \n        and information about the context in which the token was issued. These pieces \n        of information are often vital to protected resources making authorization \n        decisions based on the tokens being presented.\n\n        This specification defines a protocol that allows authorized protected \n        resources to query the authorization server to determine the set of metadata \n        for a given token that was presented to them by an OAuth 2.0 client.\n\n        See https://tools.ietf.org/html/rfc7662\n\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                  description: |\n                    access token issued by the service\n\n      responses:\n        '200':\n          description: |\n            Authorization server return claims assotiated with the token.\n\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/claims'\n\n        default:\n          description: |\n            Unable to execute the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n\n  ##\n  ##\n  /oauth2/jwks:\n    get:\n      description: |\n        The endpoint returns a public key used to sign access tokens.\n\n      responses:\n        '200':\n          description: |\n            Authorization server return claims assotiated with the token.\n\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jwks'\n\n        default:\n          description: |\n            Unable to execute the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n\n  ##\n  ##\n  /oauth2/signin:\n    post:\n      description: |\n        Request the consumer sign-in with username/password credentials. \n\n        Note: this api is not defined by OAuth 2.0 specification, it is defined\n        by this authorization server to facilitate an implementation of\n        branded identity management process.\n\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/identity'\n\n      responses:\n        '302':\n          description: |\n            The authorization server validates credentials and redirects\n            consumer's user-agent to redirect uri of the client who issues\n            the request. \n\n        default:\n          description: |\n            Unable to execute the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n\n\n  /oauth2/signup:\n    post:\n      description: |\n        Request the consumer sign-up with username/password credentials. \n\n        Note: this api is not defined by OAuth 2.0 specification, it is defined\n        by this authorization server to facilitate an implementation of\n        branded identity management process.\n\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/identity'\n\n      responses:\n        '302':\n          description: |\n            The authorization server validates credentials, creates a basic\n            profile and redirects consumer's user-agent to redirect uri of \n            the client who issues the request. \n\n        default:\n          description: |\n            Unable to execute the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n\ncomponents:\n\n##-----------------------------------------------------------------------------\n##\n## Request parameters\n##\n##-----------------------------------------------------------------------------\n  parameters:\n\n    ##\n    client_id:\n      name: client_id\n      in: query\n      description: |\n        The valid client identifier issued by the authorization server\n        See https://tools.ietf.org/html/rfc6749#section-2.2\n      required: true\n      schema:\n        type: string\n\n    ##\n    response_type:\n      name: response_type\n      in: query\n      description: |\n        The client informs the authorization server of the desired grant type\n        See https://tools.ietf.org/html/rfc6749#section-3.1.1\n      required: true\n      schema:\n        type: string\n\n    ##\n    state:\n      name: state\n      in: query\n      description: |\n        An opaque value used by the client to maintain state between the request and callback.\n      required: true\n      schema:\n        type: string\n\n\n##-----------------------------------------------------------------------------\n##\n## Data Types (Schemas) definition\n##\n##-----------------------------------------------------------------------------\n  schemas:\n\n    ##\n    ##\n    identity:\n      type: object\n      description: |\n        The class exposes consumer and client identity required for sign-in, sign-up\n        procedures. \n      required:\n        - access\n        - secret\n        - response_type\n        - client_id\n        - state\n      properties:\n        access:\n          type: string\n          description: |\n            the access key is a public identity of the principal to whom access is granted.\n        secret:\n          type: string\n          description: |\n            the secret key is a private identity of the principal to whom access is granted.\n        response_type:\n          type: string\n          description: |\n            The client informs the authorization server of the desired grant type\n            See https://tools.ietf.org/html/rfc6749#section-3.1.1\n        client_id:\n          type: string\n          description: |\n            The valid client identifier issued by the authorization server\n            See https://tools.ietf.org/html/rfc6749#section-2.2\n        state:\n          type: string\n          description: |\n            An opaque value used by the client to maintain state between the request and callback.\n\n    ##\n    ##\n    request:\n      type: object      \n      description: |\n        The data type represent the access token request\n          * Authorization Code Grant https://tools.ietf.org/html/rfc6749#section-4.1.3\n          * Resource Owner Password Credentials Grant https://tools.ietf.org/html/rfc6749#section-4.3.2\n          * Client Credentials Grant https://tools.ietf.org/html/rfc6749#section-4.4.2\n          * Refreshing access token https://tools.ietf.org/html/rfc6749#section-6\n      required: \n        - grant_type\n      properties:\n        grant_type:\n          type: string\n          description: |\n            the type of grant\n        code:\n          type: string\n          description: |\n            The authorization code received from the authorization server.\n        username:\n          type: string\n          description: |\n            The resource owner username.\n        password:\n          type: string\n          description: |\n            The resource owner password.\n        refresh_token:\n          type: string\n          description: |\n            The refresh token issued to the client.\n        scopes:\n          type: string\n          description: |\n            The scope of the access request as described by https://tools.ietf.org/html/rfc6749#section-3.3\n\n    ##\n    ##\n    token:\n      type: object      \n      description: |\n        The authorization server issues an access token and optional refresh token.\n        https://tools.ietf.org/html/rfc6749#section-5.1\n      required:\n        - access_token\n        - token_type\n        - expires_in\n      properties:\n        access_token:\n          type: string\n          description: |\n            The access token issued by the authorization server.\n        token_type:\n          type: string\n          description: |\n            The type of the token issued (usually bearer)\n        expires_in:\n          type: string\n          description: |\n            The lifetime in seconds of the access token.\n        refresh_token:\n          type: string\n          description: |\n            The refresh token, which can be used to obtain new access tokens.\n        scopes:\n          type: string\n          description: |\n            The scope of the access request as described by https://tools.ietf.org/html/rfc6749#section-3.3\n\n    ##\n    ##\n    claims:\n      type: object      \n      description: |\n        It represent a set of security claims as a JSON object\n      required:\n        - iss\n        - aud\n        - sub\n        - idp\n        - app\n      properties:\n        iss:\n          type: string\n          description: |\n            identifies the security token service (STS) that constructs and returns the token.\n        aud:\n          type: string\n          description: |\n            identifies intended recipient of the token. The application that receives the token\n            must verify that the audience value is correct and reject any tokens intended for \n            a different audience.\n        sub:\n          type: string\n          description: |\n            identifies the principal about which the token asserts information, such as \n            the user of an application.\n        idp:\n          type: string\n          description: |\n            records the identity provider that authenticated the subject of the token.\n        app:\n          type: string\n          description: |\n            identifies the application that is using the token to access a resource.\n        rev:\n          type: string\n          description: |\n            identifies if token is revocable\n\n    ##\n    ##\n    jwks:\n      type: array\n      items:\n        $ref: \"#/components/schemas/jwk\"\n\n    jwk:\n      type: object\n      required:\n        - alg\n        - kty\n        - kid\n        - e\n        - n\n      properties:\n        alg:\n          type: string\n          description: |\n            the algorithm for the key\n        kty:\n          type: string\n          description: |\n            the key type\n        kid:\n          type: string\n          description: |\n            the unique identifier for the key\n        e:\n          type: string\n          description: |\n            the exponent for a standard pem\n        n:\n          type: string\n          description: |\n            the modulus for a standard pem\n\n    ##\n    ##\n    error:\n      description: |\n        The high-level class to expose interface errors (See RFC 7807).\n      required:\n        - type\n        - status\n        - title\n        - instance\n        - details\n      properties:\n        type:\n          type: string\n          description: |\n            A URI reference that identifies the problem type.\n        status:\n          type: number\n          format: integer\n          description: |\n            The HTTP status code generated by the interface\n        title:\n          type: string\n          description: |\n            A short, human-readable summary of the problem type.\n        instance:\n          type: string\n          description: |\n            A URI reference that identifies faulty resource and its context.\n        details:\n          type: string\n          description: |\n            A human-readable explanation specific to this occurrence of the problem.\n",
			"canonicalURL": "/github.com/fogfish/oauth2@f758bf689833aa97947e7740e64cbb9211dfa5c2/-/blob/doc/restapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/fogfish/oauth2/blob/f758bf689833aa97947e7740e64cbb9211dfa5c2/doc/restapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:3705: json: unable to unmarshal Go value of type ogen.Spec: spec: json: cannot unmarshal JSON boolean into Go value of type string"
}