{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ShipChain/transmission"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "apps/schema/static/schema/swagger.yaml",
			"byteSize": 6880,
			"content": "openapi: 3.0.0\nservers:\n- url: https://transmission.shipchain.io\n  description: ShipChain Transmission API\ninfo:\n  version: 1.0.0\n  title: ShipChain Transmission API\n  description: |\n    The ShipChain Transmission API is a microservice developed to provide a traditional REST abstraction for interactions with\n    the Ethereum smart contract platform. Transmission facilitates the reliable submission and retrying of asynchronous\n    transactions sent to the ShipChain Ethereum smart contracts. Transmission is also responsible for the implementation\n    of the Shipment-related business logic required for the ShipChain Portal and AXLE Gateway projects.\n    # Data Format\n    All response payloads will be formatted using the [JSON API](http://jsonapi.org) specification.\n    Requests can be made to Transmission using `application/json`, `application/vnd.api+json`, and `multipart/form-data`,\n    formatted as documented below.\n    # Errors\n    The API uses standard HTTP status codes and the [JSON API](http://jsonapi.org/examples/#error-objects) specification to indicate the success or failure of the API call. The body of the response will be JSON in the following format:\n    ```\n    {\n      \"errors\": [\n        {\n          \"status\": \"422\",\n          \"source\": { \"pointer\": \"/data/attributes/volume\" },\n          \"detail\": \"Volume does not, in fact, go to 11.\",\n          \"code\": \"unprocessable_entity\"\n        }\n      ]\n    }\n    ```\n  x-logo:\n    url: '/static/schema/shipchain-logo.png'\n\npaths:\n  /api/v1/shipments:\n    $ref: components/shipments/shipments.yaml\n\n  /api/v1/shipments/{shipment_id}:\n    $ref: components/shipments/shipmentId.yaml\n\n  /api/v1/shipments/{shipment_id}/access_requests:\n    $ref: components/shipmentAccessRequests/accessRequests.yaml\n\n  /api/v1/shipments/{shipment_id}/access_requests/{access_request_id}:\n    $ref: components/shipmentAccessRequests/accessRequestId.yaml\n\n  /api/v1/shipments/{shipment_id}/actions:\n    $ref: components/shipments/actions.yaml\n\n  /api/v1/shipments/{shipment_id}/documents:\n    $ref: components/documents/documents.yaml\n\n  /api/v1/shipments/{shipment_id}/documents/{document_id}:\n    $ref: components/documents/documentId.yaml\n\n  /api/v1/shipments/{shipment_id}/notes:\n    $ref: components/shipmentNotes/notes.yaml\n\n  /api/v1/shipments/{shipment_id}/notes/{shipment_note_id}:\n    $ref: components/shipmentNotes/noteId.yaml\n\n  /api/v1/shipments/{shipment_id}/tags:\n    $ref: components/shipmentTags/tags.yaml\n\n  /api/v1/shipments/{shipment_id}/tags/{shipment_tag_id}:\n    $ref: components/shipmentTags/tagsId.yaml\n\n  /api/v1/shipments/overview:\n    $ref: components/shipmentsOverview/status.yaml\n\n  /api/v1/shipments/{shipment_id}/permission_links:\n    $ref: components/permissionLinks/permissionLinks.yaml\n\n  /api/v1/shipments/{shipment_id}/permission_links/{permission_link_id}:\n    $ref: components/permissionLinks/permissionLinksId.yaml\n\n  /api/v1/shipments/{shipment_id}/transactions:\n    $ref: components/shipments/transactions.yaml\n\n  /api/v1/shipments/{shipment_id}/tracking:\n    $ref: components/shipments/tracking.yaml\n\n  /api/v1/shipments/{shipment_id}/telemetry:\n    $ref: components/shipments/telemetry.yaml\n\n  /api/v1/shipments/{shipment_id}/history:\n    $ref: components/shipmentHistory/shipmentHistory.yaml\n\n  /api/v1/jobs:\n    $ref: components/jobs/jobs.yaml\n\n  /api/v1/jobs/{job_id}:\n    $ref: components/jobs/jobId.yaml\n\n  /api/v1/transactions:\n    $ref: components/transactions/transactions.yaml\n\n  /api/v1/transactions/{transaction_hash}:\n    $ref: components/transactions/transactionHash.yaml\n\n  /api/v1/devices/{device_id}/sensors:\n    $ref: components/sensors/sensor.yaml\n\n  /api/v1/devices/{device_id}/tracking:\n    $ref: components/devices/deviceTracking.yaml\n\n  /api/v1/devices/{device_id}/telemetry:\n    $ref: components/devices/deviceTelemetry.yaml\n\n  /api/v1/imports/shipments:\n    $ref: components/shipmentImports/shipmentImports.yaml\n\n  /api/v1/imports/shipments/{shipment_import_id}:\n    $ref: components/shipmentImports/shipmentImportsId.yaml\n\n  /api/v1/routes:\n    $ref: components/routes/route.yaml\n\n  /api/v1/routes/{route_id}:\n    $ref: components/routes/routeId.yaml\n\n  /api/v1/routes/{route_id}/reorder:\n    $ref: components/routes/reorder.yaml\n\n  /api/v1/routes/{route_id}/legs:\n    $ref: components/routeLegs/routeLeg.yaml\n\n  /api/v1/routes/{route_id}/legs/{route_leg_id}:\n    $ref: components/routeLegs/routeLegId.yaml\n\ncomponents:\n  securitySchemes:\n    $ref: components/securitySchemes.yaml\n\nx-tagGroups:\n  - name: Shipment Management\n    tags:\n      - Shipments\n      - Access Requests\n      - Shipment Tags\n      - Notes\n      - Permission Links\n      - Additional Shipment Details\n  - name: Devices\n    tags:\n      - Devices\n  - name: Routes\n    tags:\n      - Routes\n      - Route Legs\n  - name: Imports\n    tags:\n      - Imports\n  - name: Documents\n    tags:\n      - Documents\n  - name: AsyncJobs\n    tags:\n      - AsyncJobs\n  - name: Transactions\n    tags:\n      - Transactions\nsecurity:\n- JWT: []\ntags:\n- name: AsyncJobs\n  description: \u003e\n    AsyncJobs model an asynchronous interaction with ShipChain Engine. They also contain references to the state of an associated Ethereum Transaction.\n- name: Documents\n  description: \u003e\n    Documents are entities that allow documents and media objects management within ShipChain Transmission service.\n- name: Imports\n  description: \u003e\n    Imports are entities that allow creation or import of Transmission objects from external sources within ShipChain Transmission service.\n- name: Notes\n  description: \u003e\n    Notes allow for a timestamped comment to be added to a shipment\n- name: Permission Links\n  description: \u003e\n    Permission Links are entities that allow for retrieval of shipment data by unauthenticated or non-owner users\n- name: Access Requests\n  description: \u003e\n    Shipment Access Requests allow a user to granularly request access to a shipment owned by another User or Organization.\n- name: Shipment Tags\n  description: \u003e\n    Shipment Tags are a mechanism to allow for easier filtering of shipments\n- name: Additional Shipment Details\n  description: \u003e\n    These endpoints contain additional details about a shipment, such as transmission, telemetry, history and transactions\n- name: Devices\n  description: \u003e\n    These handle the posting of telemetry and tracking data from devices for shipments\n- name: Shipments\n  description: \u003e\n    Shipments are the core entity in the ShipChain Transmission service. This is a collection of endpoints related to managing shipments.\n- name: Routes\n  description: \u003e\n    Routes are a collection of shipments that will be in transit together.\n- name: Route Legs\n  description: \u003e\n    Route Legs are individual Shipments included in a Route\n- name: Transactions\n  description: \u003e\n    Transaction entities contain read-only data about Ethereum Transactions and Transaction Receipts.\n",
			"canonicalURL": "/github.com/ShipChain/transmission@c29ae529c02c885cdb0e64a35d7d4750ab1b8001/-/blob/apps/schema/static/schema/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ShipChain/transmission/blob/c29ae529c02c885cdb0e64a35d7d4750ab1b8001/apps/schema/static/schema/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:75: json: cannot unmarshal string into Go struct field Components.components.securitySchemes of type ogen.SecuritySchema"
}