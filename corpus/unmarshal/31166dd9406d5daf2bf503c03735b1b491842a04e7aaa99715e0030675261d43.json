{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tyntec/api-collection"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "third-party/eazy/v1/openapi.yaml",
			"byteSize": 92074,
			"content": "openapi: 3.0.0\ninfo:\n  title: 'Conversations Inbox API'\n  description: |\n    The Conversations Inbox API is a JSON REST API to connect to social messaging platforms like WhatsApp Business,\n    Apple Business Chat, Facebook Messenger, Twitter DM, Viber, LINE and more.\n\n    **HTTP requests**\n\n    Standard HTTP methods, such as GET or POST, are used with the *application/json* content type.\n    API keys are used for authentication and TLS 1.2 is required.\n\n    **HTTP responses**\n\n    HTTP success status codes, such as *200 OK* or *201 Created*, are returned for successful responses and the\n    response data has the *application/json* content type.\n\n    HTTP error status codes, such as *400 Bad Request* or *401 Unauthorized*, are returned for error responses.\n    See [Error codes](#error-codes) for more information.\n\n    ## Channels \u0026 JIDs\n\n    The API uses Jabber IDs (JIDs) to identify channels and contacts. They have the same format as email addresses.\n    The following channels are supported:\n\n    | Channel             | JID example |\n    |---------------------|----------------------------------------------------|\n    | WhatsApp Business   | 31611111111@whatsapp.eazy.im |\n    | Apple Business Chat | d2b9f484-08ac-45a7-bbe0-f2f7d844bcb6@apple.eazy.im |\n    | Facebook Messenger  | 1918363544518991@messenger.eazy.im |\n    | Line                | 8191584934115639@line.eazy.im |\n    | Twitter DM          | 872362551@twitter.eazy.im |\n    | Viber               | voON2IU2FTGtgUB50qc08g@viber.eazy.im |\n    | Web chat            | 8191584934115639@webchat.eazy.im |\n    | SMS                 | 31633333333@sms.eazy.im |\n\n    **Note:** Custom channels can be added on your demand. For instance, an existing chat in your custom mobile app\n    or live chat on your website can be added as a channel in the Conversations Inbox.\n\n    ## Error codes\n\n    ```json\n    400 Bad Request\n\n    {\n        \"error\": {\n            \"code\": 1005,\n            \"message\": \"Jid is invalid\"\n        },\n        \"traceId\": \"7e6459\"\n    }\n    ```\n\n    In the case an HTTP error status (4xx) was returned, the response provides a detailed error code and message\n    in the JSON body, see the sample on the right.\n\n    The *traceId* can be used by our support team to track down the corresponding request.\n\n    The following error codes and messages are defined:\n\n    | Error code | Description |\n    |----------------|-------------------|\n    | 1001 | Unauthorized |\n    | 1002 | Access denied |\n    | 1003 | Service unavailable |\n    | 1004 | Internal server error |\n    | 1005 | Validation error |\n    | 1006 | Template name does not exist |\n    | 1007 | User does not have WhatsApp |\n    | 1008 | Media is invalid |\n    | 1009 | Not found |\n    | 1010 | Assistant has no ownership of conversation |\n    | 1011 | Message rejected |\n    | 1012 | Bad gateway |\n    | 1013 | Parameter count mismatch |\n    | 1014 | Already exists |\n    | 1015 | Customer care window expired |\n  contact:\n    name: tyntec API Support\n    url: http://www.tyntec.com/support\n    email: support@tyntec.com\n  version: '1.0'\n  x-repository: https://github.com/tyntec/api-collection/blob/master/third-party/eazy\n  x-major-version: v1\nservers:\n  - url: https://api.cmd.tyntec.com/\nsecurity:\n  - bearerAuth: []\ntags:\n  - name: 'API Keys'\n    description: |\n      You can read information about your API keys and their scopes.\n  - name: 'Company Management'\n    description: |\n      Each owner is defined by a company. Owners can only manage their own company except for resellers\n      who can manage multiple companies.\n\n      **Agents and teams**\n\n      Agents are accounts of users in your company who respond to your customers via the Conversations Inbox.\n\n      You may organize agents into teams (e.g. support team, sales team).\n\n      **Assistants**\n\n      AI assistants can be used to automate conversations. If you want to add and assign an assistant to your agent,\n      contact us.\n\n      **Labels**\n\n      Labels can be used to assign friendly titles in colored boxes to conversations.\n  - name: 'Channel Management'\n    description: |\n      The available channels can be used.\n  - name: 'WhatsApp Management'\n    description: |\n      WhatsApp Business channel has the following additional features:\n\n      - Profile – define customer-facing information that consists of a logo, business information and an *About* message\n      - QR code – assign QR codes to messages and other objects in WhatsApp\n      - Message templates – define your message templates\n\n      ### Message templates\n\n      Operations for WhatsApp Business templates.\n\n      An example of a media template with a header, body, footer and buttons is as follows:\n\n      ```\n      {\n           \"category\": \"TICKET_UPDATE\",\n           \"components\": [\n               {\n                   \"format\": \"DOCUMENT\",\n                   \"type\": \"HEADER\"\n               },\n               {\n                   \"text\": \"This is your KLM ticket for your flight on December 20th to New York.\",\n                   \"type\": \"BODY\"\n               },\n               {\n                   \"text\": \"Questions? We are available now, just send us a message\",\n                   \"type\": \"FOOTER\"\n               },\n               {\n                   \"buttons\": [\n                       {\n                           \"text\": \"Confirm\",\n                           \"type\": \"QUICK_REPLY\"\n                       },\n                       {\n                           \"text\": \"Reschedule\",\n                           \"type\": \"QUICK_REPLY\"\n                       }\n                   ],\n                   \"type\": \"BUTTONS\"\n               }\n           ],\n           \"language\": \"en\",\n           \"name\": \"ticket\"\n       }\n      ```\n\n      And this is a response example:\n\n      ```\n      {\n          \"namespace\": \"e08e69cb_d136_86fc_c33f_0f64becd1f46\",\n          \"templates\": [\n              {\n                  \"category\": \"ISSUE_RESOLUTION\",\n                  \"name\": \"delivery_notification\",\n                  \"translations\": [\n                      {\n                          \"components\": [\n                              {\n                                  \"text\": \"Hello {{1}}, your order with reference {{2}} has been delivered.\",\n                                  \"type\": \"body\"\n                              }\n                          ],\n                          \"localeName\": \"en\",\n                          \"status\": \"APPROVED\"\n                      },\n                      {\n                          \"components\": [\n                              {\n                                  \"text\": \"Hallo {{1}}, je bestelling met nummer {{2}} is afgeleverd.\",\n                                  \"type\": \"body\"\n                              }\n                          ],\n                          \"localeName\": \"nl\",\n                          \"rejectedReason\": \"NONE\",\n                          \"status\": \"APPROVED\"\n                      }\n                  ]\n              },\n              {\n                  \"category\": \"ACCOUNT_UPDATE\",\n                  \"name\": \"hello\",\n                  \"translations\": [\n                      {\n                          \"components\": [\n                              {\n                                  \"text\": \"Hello {{1}}\",\n                                  \"type\": \"body\"\n                              }\n                          ],\n                          \"localeName\": \"en\",\n                          \"rejectedReason\": \"PROMOTIONAL\",\n                          \"status\": \"REJECTED\"\n                      }\n                  ]\n              }\n          ]\n      }\n      ```\n  - name: 'Quick Reply Management'\n    description: |\n      Operations around management of quick replies.\n  - name: 'Contact Management'\n    description: |\n      Operations regarding contacts.\n\n      **Remarks \u0026 Notes**\n\n      Assign remarks and notes to contacts.\n\n      **Contact lists**\n\n      Operations regarding custom lists of contacts that can be created in the GUI. You may use contact lists to send\n      the same message to several contacts at once while keeping them as individual recipients.\n\n      **Black list**\n\n      Contacts can be black listed so that any messages received from those contacts are ignored.\n      Also agents will not be able to send messages to blacklisted contacts.\n  - name: 'Conversation Management'\n    description: |\n      Operations regarding conversations.\n\n      **Use cases**\n\n      The following table shows a quick reference of the most common use cases.\n\n      | **Example**                             | **Description**                                                               |\n      | ---                                     | ---                                                                           |\n      | status: \"CLOSED\"                        | Close the conversation                                                        |\n      | assignee: \"john@mycompany.com\"          | Handover the conversation from the assistant to a specific agent or assistant |\n      | assignee: null\t                        | Handover the conversation from the assistant to the agents                    |\n      | labels: [\"1580486175684@label.eazy.im\"] | Label the conversation with the specified labels                              |\n      | labels: []                              | Unlabel the conversation                                                      |\n      | unreadCount: null                       | Mark as read                                                                  |\n      | unreadCount: 0                          | Mark as unread                                                                |\n\n      **Comments**\n\n      Comments can be used in many paths of this API.\n\n      **Automated messages**\n\n      Automated messages are used in conversations.\n  - name: 'Messaging'\n    description: \"\"\n  - name: 'Webhook Configuration'\n    description: |\n      Webhooks are used to receive real-time events like messages and receipts. Multiple webhooks can be defined per channel, each with their own events.\n\n      Webhooks must always return a *200 OK* response.\n\n      **Important:** HTTPS with TLS 1.2 is required. Self-signed certificates are NOT allowed.\n\n      **Retries**\n\n      In the case of connection or HTTP errors, the platform will retry indefinitely.\n\n      ## Webhook Events\n\n      The following events are defined:\n\n      | **Name**        | **Description**                                                                 |\n      | ---             | ---                                                                             |\n      | custom          |\tCustom event for specific customer purposes                                     |\n      | echo            |\tOutgoing messages sent by agents or assistants                                  |\n      | handover        |\tHandover event whenever a conversation is transferred to an assistant or agent  |\n      | label           |\tLabel event whenever a conversation is labelled or unlabelledv                  |\n      | message         |\tIncoming messages from customers                                                |\n      | note            |\tNote creation or deletion event                                                 |\n      | postback        |\tPostback event for WhatsApp button templates, Apple list pickers etc            |\n      | receipt         |\tMessage receipt event                                                           |\n      | template_pack   |\tTemplate updates whenever templates are approved, rejected etc.                 |\n      | typing          |\tTyping indications when customers are typing a message                          |\n  - name: 'Webhook Events'\n    description: |\n      TODO\n\n      The following events are defined:\n\n      | **Name**        | **Description**                                                                 |\n      | ---             | ---                                                                             |\n      | custom          |\tCustom event for specific customer purposes                                     |\n      | echo            |\tOutgoing messages sent by agents or assistants                                  |\n      | handover        |\tHandover event whenever a conversation is transferred to an assistant or agent  |\n      | label           |\tLabel event whenever a conversation is labelled or unlabelledv                  |\n      | message         |\tIncoming messages from customers                                                |\n      | note            |\tNote creation or deletion event                                                 |\n      | postback        |\tPostback event for WhatsApp button templates, Apple list pickers etc            |\n      | receipt         |\tMessage receipt event                                                           |\n      | template_pack   |\tTemplate updates whenever templates are approved, rejected etc.                 |\n      | typing          |\tTyping indications when customers are typing a message                          |\npaths:\n  /keys:\n    get:\n      summary: List all API keys\n      tags:\n        - 'API Keys'\n      operationId: allApiKeys\n      description: A list of all keys can be retrieved using the GET method.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schema/apiKeyResponse'\n  /keys/currrent:\n    get:\n      summary: Current API key\n      tags:\n        - 'API Keys'\n      operationId: currentApiKey\n      description: A specific agent can be requested\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schema/apiKeyResponse'\n  /companies:\n    get:\n      summary: List all companies\n      tags:\n        - 'Company Management'\n      operationId: listAllCompanies\n      description: List of all companies can be requested\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/companyResponse'\n  /companies/current:\n    get:\n      summary: Current company\n      tags:\n        - 'Company Management'\n      operationId: currentCompany\n      description: The current company can be requested\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/companyResponse'\n  /companies/{id}:\n    get:\n      summary: Company by ID\n      tags:\n        - 'Company Management'\n      operationId: companyById\n      description: Request a company by the ID\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: ID of the company\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/companyResponse'\n  /companies/{companyId}/agents:\n    get:\n      summary: List all agents\n      tags:\n        - 'Company Management'\n      operationId: allAgents\n      description: A list of all agents can be retrieved using the GET method. The objects field specifies to which objects the key has access to. IP whitelisting can be used to restrict originating IP addresses.\n      parameters:\n        - in: path\n          name: companyId\n          required: true\n          description: ID of the company\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/agentResponse'\n  /companies/{companyId}/agents/{email}:\n    get:\n      summary: Read an agent\n      tags:\n        - 'Company Management'\n      operationId: singleAgents\n      description: A specific agent can be retrieved using the GET method.\n      parameters:\n        - in: path\n          name: companyId\n          required: true\n          description: ID of the company\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n        - in: path\n          name: email\n          required: true\n          description: email of the agent\n          schema:\n            type: string\n            format: email\n            example: 'name@company.com'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/agentsResponse'\n  /companies/{companyId}/teams:\n    post:\n      summary: Create a team\n      tags:\n        - 'Company Management'\n      operationId: createTeam\n      description: Create a new team\n      parameters:\n        - in: path\n          name: companyId\n          required: true\n          description: Company ID\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n      requestBody:\n        description: The team you would like to create\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n              properties:\n                name:\n                  description: Name of the team to be created\n                  type: string\n                  example: Support\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/teamResponse'\n    get:\n      summary: List all teams\n      tags:\n        - 'Company Management'\n      operationId: listTeams\n      description: A list of all teams can be requested\n      parameters:\n        - in: path\n          name: companyId\n          required: true\n          description: Company ID\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/teamResponse'\n  /companies/{companyId}/teams/{jid}:\n    patch:\n      summary: Update a team\n      tags:\n        - 'Company Management'\n      operationId: updateTeam\n      description: A team can be updated using the PATCH method. Only the specified fields will be updated, all other fields will remain unchanged. The following fields can be updated *color*, *metadata*, *name*\n      parameters:\n        - in: path\n          name: companyId\n          required: true\n          description: Company ID\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n        - in: path\n          name: jid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'jid@company.com'\n      requestBody:\n        description: The team you would like to create\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Name of the team to be created\n                  type: string\n                  example: Support\n                color:\n                  description: Color of the team\n                  type: integer\n                  minimum: 0\n                  maximum: 20\n                  example: 1\n                metadata:\n                  description: Meta data for this team\n                  type: object\n                reference:\n                  description: Companies reference information\n                  type: string\n                  example: Team-Support-1231-DE\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/teamResponse'\n    delete:\n      summary: Delete a team\n      tags:\n        - 'Company Management'\n      operationId: deleteTeam\n      description: An existing Team can be deleted\n      parameters:\n        - in: path\n          name: companyId\n          required: true\n          description: Company ID\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n        - in: path\n          name: jid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'jid@company.com'\n      responses:\n        204:\n          description: No Content\n  /companies/{companyId}/assistants:\n    get:\n      summary: List all assistants\n      tags:\n        - 'Company Management'\n      operationId: allAssistants\n      description: A list of all assistants can be requested using the GET method.\n      parameters:\n        - in: path\n          name: companyId\n          required: true\n          description: ID of the company\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/assistantResponse'\n  /companies/{companyId}/assistants/{jid}:\n    patch:\n      summary: Update an assistant\n      tags:\n        - 'Company Management'\n      operationId: updateAssistant\n      description: An assistant can be updated using the PATCH method. Only the specified fields will be updated, all other fields will remain unchanged. The following fields can be updated, *color*, *description*, *name*\n      parameters:\n        - in: path\n          name: companyId\n          required: true\n          description: ID of the company\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n        - in: path\n          name: jid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'jid@company.com'\n      requestBody:\n        description: The assistant you would like to update\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                color:\n                  description: Color\n                  type: integer\n                description:\n                  description: Description of the assistant\n                  type: string\n                name:\n                  description: Name of the assistant\n                  type: string\n                enabled:\n                  description: is the assistant enabled\n                  type: boolean\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/assistantResponse'\n  /companies/{companyId}/labels:\n    post:\n      summary: Create a label\n      tags:\n        - 'Company Management'\n      operationId: createLabel\n      description: Create a new label. The *name* must be unique.\n      parameters:\n        - in: path\n          name: companyId\n          required: true\n          description: Company ID\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n      requestBody:\n        description: The label you would like to create\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                description:\n                  description: Description of the label\n                  type: string\n                  example: 'Support related questions'\n                name:\n                  description: Name of the label\n                  type: string\n                  example: 'Support'\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/labelResponse'\n    get:\n      summary: List all labels\n      tags:\n        - 'Company Management'\n      operationId: listAllLabel\n      description: A list of all labels can be requested\n      parameters:\n        - in: path\n          name: companyId\n          required: true\n          description: Company ID\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/responses/labelResponse'\n  /companies/{companyId}/labels/{jid}:\n    patch:\n      summary: Update a label\n      tags:\n        - 'Company Management'\n      operationId: updateLabel\n      description: A label can be updated using the PATCH method. Only the specified fields will be updated, all other fields will remain unchanged. The following fields can be updated *color*, *name*, *priority*.\n      parameters:\n        - in: path\n          name: companyId\n          required: true\n          description: Company ID\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n        - in: path\n          name: jid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'jid@company.com'\n      requestBody:\n        description: The label you would like to update\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                color:\n                  description: Color of the label\n                  type: integer\n                  example: 8\n                name:\n                  description: Friendly name of the label\n                  type: string\n                  example: 'Customer support'\n                priority:\n                  description: Priority of the label\n                  type: integer\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/labelResponse'\n    delete:\n      summary: Delete a label\n      tags:\n        - 'Company Management'\n      operationId: deleteLabel\n      description: An existing label can be deleted by using the DELETE method.\n      parameters:\n        - in: path\n          name: companyId\n          required: true\n          description: Company ID\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n        - in: path\n          name: jid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'jid@company.com'\n      responses:\n        204:\n          description: No Content\n  /companies/current/quick-replies:\n    get:\n      summary: List of available quick replies\n      tags:\n        - 'Quick Reply Management'\n      operationId: listQuickReplies\n      description: Quick replies available for the current company\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/quickRepliesResponse'\n  /channels:\n    get:\n      summary: List all channels\n      tags:\n        - 'Channel Management'\n      operationId: listAllChannels\n      description: A list of all channels can be requested\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/channelResponse'\n  /channels/{channelJid}:\n    patch:\n      summary: Update a channel\n      tags:\n        - 'Channel Management'\n      operationId: updateChannel\n      description: A channel can be updated using the PATCH method. Only the specified fields will be updated, all other fields will remain unchanged. The following fields can be updated, *name*, *priority*\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'jid@company.com'\n      requestBody:\n        description: The channel you would like to update\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Name of the channel\n                  type: integer\n                priority:\n                  description: Priority of the channel\n                  type: integer\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/channelResponse'\n  /channels/{channelJid}/automated-messages:\n    get:\n      summary: List all automated messages\n      tags:\n        - 'Conversation Management'\n      operationId: allAutoMessages\n      description: A list of all automated messages can be requested using the GET method.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'jid@company.com'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/autoMessageResponse'\n  /channels/{channelJid}/automated-messages/{type}:\n    get:\n      summary: Read an automated message\n      tags:\n        - 'Conversation Management'\n      operationId: singleAutoMessage\n      description: A specific automated message can be requested.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'jid@company.com'\n        - in: path\n          name: type\n          required: true\n          description: Type of automated message\n          schema:\n            type: string\n            enum:\n              - AWAY\n              - GREETING\n            example: 'GREETING'\n      responses:\n        200:\n          description: The message is accepted by our system\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/autoMessageResponse'\n    patch:\n      summary: Update an automated message\n      tags:\n        - 'Conversation Management'\n      operationId: updateAutoMessage\n      description: An automated message can be updated using the PATCH method. Only the specified fields will be updated, all other fields will remain unchanged. The following fields can be updated *body*, *enabled*\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'jid@company.com'\n        - in: path\n          name: type\n          required: true\n          description: Type of automated message\n          schema:\n            type: string\n            enum:\n              - AWAY\n              - GREETING\n            example: 'GREETING'\n      requestBody:\n        description: The message you would like to update\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                body:\n                  description: Text of the automated message\n                  type: string\n                  example: 'Sorry, we are currently closed. Your question will be answered as soon as possible.'\n                enabled:\n                  description: Is the automated message enabled?\n                  type: boolean\n                  example: false\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/autoMessageResponse'\n  /channels/{channelJid}/contacts:\n    post:\n      summary: Create a contact\n      tags:\n        - 'Contact Management'\n      operationId: createContact\n      description: Create a new contact.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n      requestBody:\n        description: The contact you would like to create\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                jid:\n                  description: Contact ID\n                  type: string\n                  example: '31611111111@company.com'\n                name:\n                  description: Name of the contact\n                  type: string\n                  example: 'John Doe'\n                reference:\n                  description: Reference of the contact\n                  type: string\n                  example: 'Customer #545'\n                remarks:\n                  description: Comment for the contact\n                  type: string\n                  example: 'VIP'\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/contactResponse'\n  /channels/{channelJid}/contacts/{contactJid}:\n    get:\n      summary: Read a contact\n      tags:\n        - 'Contact Management'\n      operationId: getContact\n      description: A contact can be retrieved\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/contactResponse'\n    patch:\n      summary: Update a contact\n      tags:\n        - 'Contact Management'\n      operationId: updateContact\n      description: A contact can be updated using the PATCH method. Only the specified fields will be updated, all other fields will remain unchanged. The following fields can be updated *name*, *reference*, *remarks*\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n      requestBody:\n        description: The contact you would like to update\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Name of the contact\n                  type: string\n                  example: 'John Doe'\n                reference:\n                  description: Reference of the contact\n                  type: string\n                  example: 'Customer #545'\n                remarks:\n                  description: Comment for the contact\n                  type: string\n                  example: 'VIP'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/contactResponse'\n  /channels/{channelJid}/contacts/blacklist:\n    get:\n      summary: List blocked contacts\n      tags:\n        - 'Contact Management'\n      operationId: listBlockContact\n      description: A list of all blocked contacts can be requested.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/email'\n  /channels/{channelJid}/contacts/blacklist/{contactJid}:\n    post:\n      summary: Block a contact\n      tags:\n        - 'Contact Management'\n      operationId: blockContact\n      description: A contact can be blocked by adding it to the blacklist. Messages received from a blocked contact will be ignored and it is not possible to send messages to it.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n      responses:\n        204:\n          description: No Content\n    delete:\n      summary: Unblock a contact\n      tags:\n        - 'Contact Management'\n      operationId: unblockContact\n      description: A contact can be removed from the blacklist\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n      responses:\n        204:\n          description: No Content\n  /channels/{channelJid}/conversations/{contactJid}/comments:\n    post:\n      summary: Create a comment\n      tags:\n        - 'Conversation Management'\n      operationId: createComment\n      description: Create a new comment for a conversation.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n      requestBody:\n        description: The comment you would like to create\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                body:\n                  description: Text for the comment\n                  type: string\n                  example: 'Order #12345 has been delivered'\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/commentResponse'\n  /channels/{channelJid}/conversations/{contactJid}:\n    get:\n      summary: Read a conversation\n      tags:\n        - 'Conversation Management'\n      operationId: conversationByJid\n      description: A conversation can be requested\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/conversationResponse'\n    patch:\n      summary: Update a conversation\n      tags:\n        - 'Conversation Management'\n      operationId: updateConversation\n      description: A conversation can be updated using the PATCH method. Only the specified fields will be updated, all other fields will remain unchanged. The following fields can be updated *assignee*, *labels*, *status*, *unreadCount*\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n      requestBody:\n        description: The conversation you would like to update\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                assignee:\n                  description: Assistant to the agents\n                  type: string\n                  example: 'john@mycompany.com'\n                label:\n                  description: Labels of the conversation\n                  type: string\n                  example: 'Label123'\n                status:\n                  description: Status of the conversation\n                  type: string\n                  enum:\n                    - CLOSED\n                    - OPEN\n                  example: 'CLOSED'\n                unreadCount:\n                  description: Number of unread messages\n                  type: integer\n                  example: 5\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/conversationResponse'\n  /channels/{channelJid}/lists:\n    get:\n      summary: List all contact lists\n      tags:\n        - 'Contact Management'\n      operationId: listAllLists\n      description: All lists can be requested\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/responses/listResponse'\n  /channels/{channelJid}/lists/{listJid}/{contactJid}:\n    post:\n      summary: Add a contact to a list\n      tags:\n        - 'Contact Management'\n      operationId: addContactTolist\n      description: A contact can be added to a list.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: listJid\n          required: true\n          description: Jabber IDs to represent a list\n          schema:\n            type: string\n            format: email\n            example: 'listJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n      responses:\n        200:\n          description: OK\n    delete:\n      summary: Remove a contact from a list\n      tags:\n        - 'Contact Management'\n      operationId: removeContactfromlist\n      description: A contact can be removed from a list.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: listJid\n          required: true\n          description: Jabber IDs to represent a list\n          schema:\n            type: string\n            format: email\n            example: 'listJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n      responses:\n        200:\n          description: OK\n  /channels/{channelJid}/messages/{contactJid}:\n    post:\n      summary: Send a message\n      tags:\n        - 'Messaging'\n      operationId: sendMessage\n      description: |\n        Request to send a message to a contact in a channel.\n\n        The JSON body structure of each message type is listed below.\n\n        **Audio**\n\n        | **Element** | **Value**\t| **Mandatory**\t| **Description**  |\n        | ---         | ---       | ---           | ---              |\n        | mimeType    | string    | Y             |MIME type         |\n        |type\t        | \"audio\"\t| Y             | Message type     |\n\n        **Contact**\n\n        | **Element** | **Value**\t| **Mandatory**\t| **Description**   |\n        | ---         | ---       | ---           | ---               |\n        | contacts\t| array \t| Y             | Contact structure |\n        | type    \t| \"contact\" | Y          \t| Message type      |\n\n        **Document**\n\n        | **Element** | **Value**\t| **Mandatory**\t| **Description**  |\n        | ---         | ---       | ---           | ---              |\n        | fileName\t| string\t| Y\t            | File name        |\n        | mimeType\t| string\t| Y\t            | MIME type        |\n        | title   \t| string\t| Y           \t| Document title   |\n        | type        | \"document\"| Y         \t| Message type     |\n\n        **Gif**\n\n        | **Element** | **Value**\t| **Mandatory**\t| **Description**      |\n        | ---         | ---       | ---           | ---                  |\n        | caption\t    | string\t| N             | Caption text message |\n        | mimeType\t| string\t| Y         \t| MIME type            |\n        | type    \t| \"gif\" \t| Y           \t| Message type         |\n\n        **Image**\n\n        | **Element** | **Value**\t| **Mandatory**\t| **Description**      |\n        | ---         | ---       | ---           | ---                  |\n        | caption   \t| string \t| N             | Caption text message |\n        | mimeType\t| string\t| Y             | MIME type            |\n        | type        | \"image\" \t| Y         \t| Message type         |\n\n        **Location**\n\n        | **Element** | **Value**\t | **Mandatory**\t| **Description**         |\n        | ---         | ---        | ---              | ---                     |\n        | latitude\t| float\tY\t | Latitude         | coordinate              |\n        | longitude\t| float\tY\t | Longitude        | coordinate              |\n        | name\t    | string\t | N                | Name of the location    |\n        | type\t    | \"location\" | Y                | Message type            |\n        | url\t        | string\t | N                | Website URL             |\n\n        **Voice message**\n\n        | **Element** | **Value** | **Mandatory** | **Description**   |\n        | ---         | ---       | ---           | ---               |\n        | mimeType    | string    | Y             | MIME type         |\n        | type        | \"ptt\"     | Y             | Message type      |\n\n        **Sticker**\n\n        | **Element** | **Value**\t| **Mandatory**\t| **Description**   |\n        | ---         | ---       | ---           | ---               |\n        | mimeType\t| string\t| Y             | MIME type         |\n        | type        | \"sticker\"\t| Y             | Message type      |\n\n        **Template**\n\n        | **Element** | **Value**\t | **Mandatory**\t| **Description**     |\n        | ---         | ---        | ---              | ---                 |\n        | template\t| array      | Y                | Template structure  |\n        | type        | \"template\" | Y                | Message type        |\n\n        **Text**\n\n        | **Element** | **Value**\t| **Mandatory**\t| **Description**   |\n        | ---         | ---       | ---           | ---               |\n        | body        | string\t| Y             | Message body      |\n        | type        | \"text\"\t| Y             | Message type      |\n\n        **Video**\n\n        | **Element** | **Value**\t| **Mandatory**\t| **Description**       |\n        | ---         | ---       | ---           | ---                   |\n        | caption     | string\t| N             | Caption text message  |\n        | mimeType\t| string\t| Y             | MIME type             |\n        | type        | \"video\"\t| Y             | Message type          |\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n      requestBody:\n        description: The message you would like to send\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                message:\n                  description: Outgoing message\n                  type: object\n                  example:\n                    body: Hello world\n                    type: text\n      responses:\n        202:\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    description: The returned id can be used to match delivery [receipts](https://api.eazy.im/v3/#webhooks-overview) to the original message.\n                    type: string\n                    example: \"b48eaa2fab1e942cad8b8717ec6bf3ed2dad05a\"\n  /incoming:\n    post:\n      summary: Receive messages\n      tags:\n        - 'Messaging'\n      description: |\n        To receive messages, create an endpoint on your webserver that will be able to process POST requests\n        and subscribe its URL via [Webhook Configuration](#webhook-configuration) to the \"message\" events.\n\n        **Note:** The path above is only an example, you may choose your URL freely.\n  /channels/{channelJid}/contacts/{contactJid}/notes:\n    get:\n      summary: List all notes\n      tags:\n        - 'Contact Management'\n      operationId: listAllNotes\n      description: List all notes from a contact.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/noteResponse'\n    post:\n      summary: Create a note\n      tags:\n        - 'Contact Management'\n      operationId: createNote\n      description: Create a new note in a contact.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n      requestBody:\n        description: The note you would like to create\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                body:\n                  description: Text/Body of the note.\n                  type: string\n                  example: 'Customer number #63553'\n                referenceId:\n                  description: Friendly reference name as an ID.\n                  type: string\n                  example: 'CUSTOMER_NUMBER'\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/noteResponse'\n  /channels/{channelJid}/contacts/{contactJid}/notes/{id}:\n    post:\n      summary: Update a note\n      tags:\n        - 'Contact Management'\n      operationId: updateNote\n      description: |\n        Update a note in a contact. Only the specified fields will be updated, all other fields will remain unchanged.\n        The following fields can be updated: *body*, *isPinned*, *isReadOnly*, *referenceId*\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n        - in: path\n          name: id\n          required: true\n          description: ID of the node\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n      requestBody:\n        description: The note you would like to update\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                body:\n                  description: Text/Body of the note.\n                  type: string\n                  example: 'Customer number #63553'\n                isPinned:\n                  description: Is this note pinned?\n                  type: boolean\n                  example: true\n                isReadOnly:\n                  description: Is this note read only or not?\n                  type: boolean\n                  example: false\n                referenceId:\n                  description: Friendly reference name as an ID.\n                  type: string\n                  example: 'CUSTOMER_NUMBER'\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/noteResponse'\n    delete:\n      summary: Delete a note\n      tags:\n        - 'Contact Management'\n      operationId: deleteNote\n      description: Delete an existing note in a contact.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: contactJid\n          required: true\n          description: Jabber IDs to represent contacts\n          schema:\n            type: string\n            format: email\n            example: 'contactJid@company.com'\n        - in: path\n          name: id\n          required: true\n          description: ID of the node\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n      responses:\n        204:\n          description: No Content\n  /channels/{channelJid}/profile:\n    get:\n      summary: Read your profile\n      tags:\n        - 'WhatsApp Management'\n      operationId: getWabaProfile\n      description: The WhatsApp Business profile can be retrieved\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/profileResponse'\n    post:\n      summary: Overwrite your profile\n      tags:\n        - 'WhatsApp Management'\n      operationId: ovewriteWabaProfile\n      description: The WhatsApp Business profile can be completely overwritten or partially updated. The POST method is used to overwrite the whole profile.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n      requestBody:\n        description: The profile you would like to overwrite\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                about:\n                  description: Description of what is this profile about.\n                  type: string\n                  example: 'Welcome! We are here to help you 24/7'\n                businessProfile:\n                  description: WhatsApp for Business profile\n                  type: object\n                  properties:\n                    address:\n                      description: Address associated with the profile\n                      type: string\n                      example: \"High Street 15, New York\"\n                    description:\n                      description: Description of the profile\n                      type: string\n                      example: \"YourCompany Ltd.\"\n                    email:\n                      description: email address associated with the WhatsApp for business profile\n                      type: string\n                      format: email\n                      example: \"info@your-company.com\"\n                    vertical:\n                      type: string\n                      example:\n                    websites:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/website'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/profileResponse'\n    patch:\n      summary: Update your profile\n      tags:\n        - 'WhatsApp Management'\n      operationId: updateWabaProfile\n      description: The PATCH method is used for a partial update. Unspecified fields will remain unchanged.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n      requestBody:\n        description: The profile you would like to update\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                businessProfile:\n                  description: Example of WhatsApp for Business profile update\n                  type: object\n                  properties:\n                    description:\n                      description: Description of the profile\n                      type: string\n                      example: \"YourCompany Ltd.\"\n                    email:\n                      description: email address associated with the WhatsApp for business profile\n                      type: string\n                      format: email\n                      example: \"info@your-company.com\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/profileResponse'\n  /channels/{channelJid}/qr-codes:\n    get:\n      summary: List all QR codes\n      tags:\n        - 'WhatsApp Management'\n      operationId: listQrCodes\n      description: A list of all QR codes can be requested\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/qrCodesResponse'\n    post:\n      summary: Create a QR code\n      tags:\n        - 'WhatsApp Management'\n      operationId: createQrCode\n      description: Create a new QR code with a prefilled message for WhatsApp Business\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n      requestBody:\n        description: The QR code you would like to create\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                message:\n                  description: Text/Body of the message.\n                  type: string\n                  example: 'I have a question about product ABC'\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/qrCodeResponse'\n  /channels/{channelJid}/qr-codes/{code}:\n    patch:\n      summary: Update a QR code\n      tags:\n        - 'WhatsApp Management'\n      operationId: updateQrCode\n      description: The prefilled message of a QR code can be updated using the PATCH method. Only the specified fields will be updated, all other fields will remain unchanged. The following fields can be updated *message*\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: code\n          required: true\n          description: QR code\n          schema:\n            type: string\n            example: 'VETO8Y3SYCSFH1'\n      requestBody:\n        description: The QR code you would like to update\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - message\n              properties:\n                message:\n                  description: Text/Body of the message.\n                  type: string\n                  example: 'I have a question about product ABC'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/qrCodeResponse'\n    delete:\n      summary: Delete a QR code\n      tags:\n        - 'WhatsApp Management'\n      operationId: deleteQrCode\n      description: An existing QR code can be deleted\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: code\n          required: true\n          description: QR code\n          schema:\n            type: string\n            example: 'VETO8Y3SYCSFH1'\n      responses:\n        204:\n          description: No Content\n  /channels/{channelJid}/templates:\n    get:\n      summary: List all templates\n      tags:\n        - 'WhatsApp Management'\n      operationId: listWabaTemplates\n      description: All WhatsApp Business templates can be retrieved\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n      responses:\n        200:\n          description: OK - Check response in example above\n    post:\n      summary: Create a template\n      tags:\n        - 'WhatsApp Management'\n      operationId: createTemplate\n      description: Create a new WhatsApp Business template. Templates can include a header, body, footer and buttons.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n      requestBody:\n        description: The template you would like to create\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - category\n                - language\n                - name\n              properties:\n                category:\n                  description: Category text\n                  type: string\n                  example: 'ISSUE_RESOLUTION'\n                components:\n                  description: Array of components to be used in the template\n                  type: string\n                language:\n                  description: Language to be used in the template\n                  type: string\n                  example: 'en'\n                name:\n                  description: Name of the template\n                  type: string\n                  example: 'support_after_24hours'\n      responses:\n        201:\n          description: Created - Check response in example above\n  /channels/{channelJid}/templates/{name}:\n    delete:\n      summary: Delete a template\n      tags:\n        - 'WhatsApp Management'\n      operationId: deleteWabaTemplate\n      description: An existing Template can be deleted\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: name\n          required: true\n          description: Name of the template to be deleted\n          schema:\n            type: string\n          example: 'delivery_notification'\n      responses:\n        204:\n          description: No Content\n  /channels/{channelJid}/webhooks:\n    get:\n      summary: List all webhooks\n      tags:\n        - 'Webhook Configuration'\n      operationId: listWebhooks\n      description: |\n        A list of all webhooks can be requested\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/webhooksResponse'\n    post:\n      summary: Create a webhook\n      tags:\n        - 'Webhook Configuration'\n      operationId: createWebhook\n      description: Create a new webhook for the specified events.\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n      requestBody:\n        description: The webhook you would like to create\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - events\n                - url\n              properties:\n                events:\n                  description: Events described above\n                  type: array\n                  items:\n                    type: string\n                    example: \"message\"\n                url:\n                  description: URL of the webhook\n                  type: string\n                  format: uri\n                  example: 'https://your.company.com/webhook'\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/webhookResponse'\n  /channels/{channelJid}/webhooks/{id}:\n    patch:\n      summary: Update a webhook\n      tags:\n        - 'Webhook Configuration'\n      operationId: updateWebhook\n      description: A webhook can be updated using the PATCH method. Only the specified fields will be updated, all other fields will remain unchanged. The following fields can be updated *name*\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: id\n          required: true\n          description: ID of the node\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n      requestBody:\n        description: The webhook you would like to update\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n              properties:\n                name:\n                  description: Name of the webhook to be created\n                  type: string\n                  example: 'Support'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/webhookResponse'\n    delete:\n      summary: Delete a webhook\n      tags:\n        - 'Webhook Configuration'\n      operationId: deleteWebhook\n      description: An existing Webhook can be deleted\n      parameters:\n        - in: path\n          name: channelJid\n          required: true\n          description: Jabber IDs to represent channel\n          schema:\n            type: string\n            format: email\n            example: 'channelJid@company.com'\n        - in: path\n          name: id\n          required: true\n          description: ID of the node\n          schema:\n            type: string\n            example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n      responses:\n        204:\n          description: No Content\n  /custom/e96eb049-ec39-4a19-9973-c6f770c4e636/unread:\n    get:\n      summary: Get unread messages\n      tags:\n        - 'Conversation Management'\n      parameters:\n        - in: query\n          name: agent\n          required: true\n          description: Agents mail\n          schema:\n            type: string\n            format: email\n            example: 'agent@company.com'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/unreadMessagesResponse'\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: The API key is transmitted using the Authentication header with the Bearer scheme.\n      name: Authorization\n      description: |\n        The Conversations Inbox API uses API keys for authentication. The API key is transmitted using the Authorization\n        header with the Bearer scheme:\n\n        `Authorization: Bearer Tnhip5Hiq10gGiKhNS850ShCAjIQZAgKDAN0JAIL`\n\n        ## Scopes\n\n        Each key has a scope that defines to which endpoints the key has access to. The following scopes are defined:\n\n        | **Scope**   | **Description** |\n        |-------------|---------------|\n        | Channel     | Access to channel related endpoints |\n        | Assistant   | Same as channel including assistant related endpoints |\n        | Company     | Same as channel including company related endpoints |\n        | Owner       | Same as company including owner related endpoints |\n\n        **Note:** API keys are stored in a hashed format. so it is not possible to retrieve them.\n  schemas:\n    agentResponse:\n      description: Details of an agent\n      type: object\n      properties:\n        email:\n          description: email address\n          type: string\n          example: jane@mycompany.com\n        name:\n          description: Name\n          type: object\n          properties:\n            firstName:\n              description: First Name of the Agent\n              type: string\n              example: Jane\n            fullName:\n              description: Full Name of the Agent\n              type: string\n              example: Jane Mayers\n            lastName:\n              description: Last Name of the Agent\n              type: string\n              example: Mayers\n        roles:\n          description: The role of the agent\n          type: array\n          items:\n            type: string\n          example:\n            - admin\n            - user\n        status:\n          description: Status of the agent\n          type: string\n          enum:\n            - OFFLINE\n            - AWAY\n            - ONLINE\n        teams:\n          description: Teams to be contacted with email\n          type: array\n          items:\n            type: string\n            format: email\n            example: company@domail.com\n    apiKeyResponse:\n      description: Current API key response\n      type: object\n      properties:\n        cipherKey:\n          description: Cipher Key\n          type: string\n        description:\n          description: Description for the key or usage of the key\n          type: string\n          example: 'Test environment'\n        id:\n          description: Id of the key\n          type: string\n          example: '509000e9-05c9-43a9-b6f1-70f1c6a5448a'\n        lastUsed:\n          description: When the key last used\n          type: string\n          format: date-time\n          example: '2020-03-11T19:53:02.000000Z'\n        objects:\n          description: Array of objects. Check example on the right\n          type: array\n          items:\n            type: array\n            items:\n              type: string\n            example:\n              - \"'jid': '31612345678@tyntec.com'\"\n              - \"'type': 'CHANNEL'\"\n        scope:\n          description: The scope of this key\n          type: string\n          example: 'CHANNEL'\n        whitelist:\n          description: Array of whitelisted IPs. Check example on the right\n          type: array\n          items:\n            type: string\n            format: IP\n          example:\n            - '95.95.95.95'\n            - '12.12.12.12'\n    assistantResponse:\n      description: Single assistant response\n      type: object\n      properties:\n        color:\n          description: Color\n          type: integer\n          example: 8\n        description:\n          description: Role of the Assistant\n          type: string\n          example: 'Sales assistant'\n        jid:\n          description: Id of the key\n          type: string\n          format: email\n          example: 'jane@mycompany.com'\n        name:\n          description: Name of the assistant\n          type: string\n          example: 'Jane Mayer'\n    autoMessageResponse:\n      description: Automated message response\n      type: object\n      properties:\n        body:\n          description: Body/text of the message\n          type: string\n          example: 'Sorry, we are currently closed. Your question will be answered as soon as possible.'\n        createdAt:\n          description: When message is created\n          type: string\n          format: date-time\n          example: '2020-03-11T19:00:02.000000Z'\n        enabled:\n          description: Is the message enabled?\n          type: boolean\n        type:\n          description: Name of the assistant\n          type: string\n          enum:\n            - 'AWAY'\n            - 'GREETING'\n          example: 'AWAY'\n        updatedAt:\n          description: When message is last updated\n          type: string\n          format: date-time\n          example: '2020-04-11T19:00:02.000000Z'\n    channelResponse:\n      description: Channel Response\n      type: object\n      properties:\n        dataRetentionInDays:\n          description: Body/text of the message\n          type: integer\n          example: 90\n        jid:\n          description: ID\n          type: string\n          format: email\n          example: 31611111111@company.com\n        name:\n          description: Name of the channel\n          type: string\n          example: 'WhatApp'\n        priority:\n          description: Priority of the channel\n          type: integer\n    commentResponse:\n      description: Comment response\n      type: object\n      properties:\n        id:\n          description: ID of the contact added the comment\n          type: string\n          example: 'ee487689cac84f972ff1d8d10ed7b64f4148'\n    companyResponse:\n      description: Company response\n      type: object\n      properties:\n        id:\n          description: ID of the company\n          type: string\n          example: '458e633a-ab50-445f-9d1f-52afbf720ec3'\n        name:\n          description: Name of the company\n          type: string\n          format: string\n          example: 'tyntec'\n    contactResponse:\n      description: Contact response\n      type: object\n      properties:\n        names:\n          description: Names\n          type: array\n          items:\n            $ref: '#/components/schemas/name'\n        notes:\n          description: Notes\n          type: array\n          items:\n            $ref: '#/components/schemas/note'\n        phoneNumber:\n          description: Phone number of the contact\n          type: integer\n          example: 31611111111\n        reference:\n          description: Reference of the contact\n          type: string\n          example: 'Customer #545'\n        remarks:\n          description: Comment for the contact\n          type: string\n          example: 'VIP'\n        type:\n          description: Type of the contact\n          type: string\n          example: 'INDIVIDUAL'\n    conversationResponse:\n      description: Conversation response\n      type: object\n      properties:\n        assignee:\n          description: Assistant to the agents\n          type: string\n          example: 'john@mycompany.com'\n        channel:\n          description: Channel to be used\n          type: string\n          items:\n            $ref: '#/components/schemas/channelResponse'\n        contact:\n          description: Contact of the conversation\n          type: string\n          items:\n            $ref: '#/components/schemas/contact'\n        createdAt:\n          description: Date and time the conversation is created\n          type: string\n          format: date-time\n          example: '2019-04-04T15:29:47.000000Z'\n        labels:\n          description: Labels of the conversation\n          type: array\n          items:\n            $ref: '#/components/schemas/allLabelsResponse'\n        lastMessageReceivedAt:\n          description: Date and time the last message is received\n          type: string\n          format: date-time\n          example: '2019-04-08T23:55:39.000000Z'\n        lastMessageSentAt:\n          description: Date and time that the last message is sent\n          type: string\n          format: date-time\n          example: '2019-04-07T17:12:00.000000Z'\n        messagesReceived:\n          description: Number of messages received\n          type: integer\n          example: 12\n        messagesSent:\n          description: Number of messages sent\n          type: integer\n          example: 8\n        status:\n          description: Status of the conversation\n          type: string\n          example: \"CLOSED\"\n        unreadCount:\n          description: Number of unread messages\n          type: integer\n          example: 5\n    emailsResponse:\n      description: List all email addresses\n      type: array\n      items:\n        $ref: '#/components/schemas/email'\n      example: [jane@mycompany1.com, jo@mycompany1.com, john@company2.com]\n    labelResponse:\n      description: Single Label Response\n      type: object\n      properties:\n        color:\n          description: Color\n          type: integer\n          example: 8\n        jid:\n          description: ID\n          type: string\n          format: email\n          example: '31611111111@company.com'\n        name:\n          description: Name of the label\n          type: string\n          example: 'Support'\n        priority:\n          description: Priority of the channel\n          type: integer\n    listResponse:\n      description: Single list response\n      type: object\n      properties:\n        jid:\n          description: ID\n          type: string\n          format: email\n          example: '31611111111@company.com'\n        name:\n          description: Name of the list\n          type: string\n          example: 'Mailing list'\n        remarks:\n          description: Comment for the list\n          type: string\n          example: 'Support'\n    noteResponse:\n      description: Single Note Response\n      type: object\n      properties:\n        body:\n          description: Text/Body of the note\n          type: string\n          example: 'Return order received'\n        createdAt:\n          description: Date and time the note is created\n          type: string\n          format: date-time\n          example: '2020-03-11T19:53:02.000000Z'\n        createdBy:\n          description: Who created this note\n          type: string\n          format: email\n          example: 'john@mycompany.com'\n        id:\n          description: ID of the note\n          type: string\n          example: '280cbbe0-c08a-4606-bf8d-a30242c4eaa4'\n        isPinned:\n          description: Is this note pinned?\n          type: boolean\n          example: false\n        isReadOnly:\n          description: Is this note read only or not?\n          type: boolean\n          example: false\n        updatedAt:\n          description: Date and time the note is last updated\n          type: string\n          format: date-time\n          example: '2020-04-11T19:53:02.000000Z'\n        referenceId:\n          description: Reference ID of the note\n          type: string\n          example: \"CUSTOMER_NUMBER\"\n    profileResponse:\n      description: WhatsApp for Business profile response\n      type: object\n      properties:\n        about:\n          description: Description of what is this profile about.\n          type: string\n          example: \"Welcome! We are here to help you 24/7\"\n        businessProfile:\n          $ref: '#/components/schemas/businessProfile'\n        name:\n          description: Name of the profile\n          type: string\n          example: \"YourCompany\"\n        phoneNumber:\n          description: Phone number associated with the WhatsApp for Business profile\n          type: integer\n          example: 31612345678\n        pictureUrl:\n          description: URL of the picture used in the profile\n          type: string\n          example: \"https://pps.whatsapp.net/v/t61.24694-24/s96x96/71527172_751740171986704_2078049712831220364_n.jpg?oe=5E2168E9\u0026oh=174efd2076218dff633a1e748beac190\"\n    qrCodeResponse:\n      description: Single QR code response\n      type: object\n      properties:\n        code:\n          description: QR code\n          type: string\n          example: \"VETO8Y3SYCSFH1\"\n        createdAt:\n          description: Date and time the note is created\n          type: string\n          format: date-time\n          example: '2020-03-11T19:53:02.000000Z'\n        image:\n          description: QR image URL\n          type: string\n          format: uri\n          example: \"https://scontent.xx.fbcdn.net/...\"\n        message:\n          description: QR message to be displayed\n          type: string\n          example: \"I have a question about product ABC\"\n        updatedAt:\n          description: Date and time the note is last updated\n          type: string\n          format: date-time\n          example: '2020-04-11T19:53:02.000000Z'\n        url:\n          description: QR URL\n          type: string\n          format: uri\n          example: \"https://wa.me/message/VEKO8Y3SYCSFH1\"\n    teamResponse:\n      description: Single team response\n      type: object\n      properties:\n        channels:\n          description: Array of channels\n          type: array\n          items:\n            $ref: '#/components/schemas/channelResponse'\n        color:\n          description: Color\n          type: integer\n          example: 8\n        jid:\n          description: ID\n          type: string\n          format: email\n          example: 31611111111@company.com\n        metadata:\n          description: Metadata information\n          type: string\n        name:\n          description: Name of the team\n          type: string\n          example: \"Support\"\n    webhookResponse:\n      description: Webhook response\n      type: object\n      properties:\n        assistant:\n          description: Assistant to the agents\n          type: string\n          example: 'john@mycompany.com'\n        cipherKey:\n          description: Cipher key to be used in the webhook\n          type: string\n        createdAt:\n          description: Date and time the Webhook is created\n          type: string\n          format: date-time\n          example: '2019-04-04T15:29:47.000000Z'\n        enabled:\n          description: Is the Webhook active or not?\n          type: boolean\n          example: true\n        events:\n          description: Array of event on the webhooks\n          type: array\n          items:\n            $ref: '#/components/schemas/events'\n        headers:\n          description: Header parameters\n          type: object\n          items:\n            example: \"'Authorization': 'Bearer SomeApiKey'\"\n        id:\n          description: ID of the event\n          type: string\n          example: '8520d8d6-7b28-4d6f-8631-ecd528a0246d'\n        updatedAt:\n          description: Date and time that the last message is sent\n          type: string\n          format: date-time\n          example: '2019-04-07T17:12:00.000000Z'\n        url:\n          description: URL of the webhook\n          type: string\n          example: \"https://your.company.com/webhook\"\n    businessProfile:\n      description: WhatsApp for Business profile response\n      type: object\n      properties:\n        address:\n          description: Address associated with the profile\n          type: string\n          example: \"High Street 15, New York\"\n        description:\n          description: Description of the profile\n          type: string\n          example: \"YourCompany Ltd.\"\n        email:\n          description: email address associated with the WhatsApp for business profile\n          type: string\n          format: email\n          example: \"info@your-company.com\"\n        vertical:\n          description: Vertical\n          type: string\n          example: \"Vertical\"\n        websites:\n          description: Website list of URLs\n          type: array\n          items:\n            $ref: '#/components/schemas/website'\n          example:\n            - 'www.company1.com'\n            - 'www.company2.com'\n    website:\n      description: Website URL\n      type: string\n      example: \"https://your-company.com\"\n    quickRepliesResponse:\n      type: array\n      description: List of quick replies\n      items:\n        $ref: '#/components/schemas/quickReply'\n    quickReply:\n      type: object\n      required:\n        - createdAt\n        - name\n        - message\n      properties:\n        category:\n          type: string\n          description: Custom category\n          example: Welcome Message\n        createdAt:\n          type: string\n          description: Creation date of the quick reply\n          format: date-time\n          example: 2021-07-05T06:20:33.000000Z\n        jids:\n          type: array\n          description: List of channels the quick reply is assigned to\n          items:\n            - type: string\n              example: 123152345245@whatsapp.eazy.im\n        message:\n          type: string\n          description: Message of the quick reply\n          example: Hi {{1}}, how can we help you?\n        name:\n          type: string\n          description: Name of the quick reply\n          example: welcome\n        updatedAt:\n          type: string\n          format: date-time\n          description: Last update of the quick reply\n          example: 2021-07-05T06:28:33.000000Z\n    unreadMessagesResponse:\n      type: object\n      description: How many messages are unread for the selected agent\n      required:\n        - unread\n      properties:\n        unread:\n          type: integer\n          description: How many messages are unread for the selected agent\n          minimum: 0\n          example: 100\n  parameters:\n    components:\n      name: components\n      in: body\n      description: Array of components to be used in the template\n      schema:\n        type: string\n    text:\n      name: text\n      in: body\n      description: Text to be used\n      schema:\n        type: string\n      example: 'This is your KLM ticket for your flight on December 20th to New York.'\n",
			"canonicalURL": "/github.com/tyntec/api-collection@5c81113d8e5c67cecaf54dd31e6776a12c4d1a0e/-/blob/third-party/eazy/v1/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/tyntec/api-collection/blob/5c81113d8e5c67cecaf54dd31e6776a12c4d1a0e/third-party/eazy/v1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!seq into ogen.Schema"
}