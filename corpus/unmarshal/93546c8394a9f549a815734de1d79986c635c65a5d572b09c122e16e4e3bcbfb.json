{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CDL-Dryad/dryad-app"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "public/openapi.yml",
			"byteSize": 31752,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: dryad-api\n  description: |\n    The API for the [Dryad](https://datadryad.org) data publication and\n    preservation platform.\n\n    In addition to this documentation, please see the [descriptive API documentation](https://github.com/CDL-Dryad/dryad-app/tree/main/documentation/apis),\n    particularly the [API Submission Examples](https://github.com/CDL-Dryad/dryad-app/blob/main/documentation/apis/submission.md) which give concrete\n    examples of submission through the Dryad API.\n\n    Our [Github Documentation Directory](https://github.com/CDL-Dryad/dryad/tree/main/documentation) will also be expanded further in the future as more\n    documentation is created (though not all of it may be relevant to API users).\n\n    Rate limits:\n      - Anonymous users of the API are limited to 30 requests per minute, with a lower limit for downloads of data files.\n      - Authenticated users of the API are limited to 120 requests per minute.\n  version: \"2.1.0\"\n\nservers:\n  - url: https://datadryad.org/api/v2/\n    description: Main Dryad server\n  - url: https://dryad-stg.cdlib.org/api/v2/\n    description: Staging server, for testing new features.\n\ntags:\n    - name: root\n      description: Root-level API calls\n    - name: datasets\n      description: Dataset operations\n    - name: versions\n      description: Operations on individual versions of a dataset\n    - name: files\n      description: Operations on individual files of a dataset\n    \npaths:\n  # --- root uri ----\n  /:\n    get:\n      summary: The root of the API\n      tags:\n        - root \n      description: Mainly to have HATEOAS links to root level objects like datasets.\n      responses:\n        '200':\n          description: The root of the API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/root_links'\n              examples:\n                $ref: 'api/v2/docs/examples/root.json'\n\n  # --- test for bearer authentication ---\n  /test:\n    get:\n      security:\n        - bearerAuth: []\n      summary: Test OAuth2 and bearer authentication.\n      tags:\n        - root \n      description: \"Test authentication by sending authenticated headers like **'Accept: application/json'**, **'Content-Type: application/json'**, **'Authorization: Bearer {your-token}'**.\"\n      responses:\n        '200':\n          description: a welcome message if successful\n          content:\n            application/json:\n              schema:\n                properties:\n                  message:\n                    type: string\n                    example: \"Welcome Brenda Ngrulu\"\n                  user_id:\n                    type: integer\n                    example: 10\n\n  # --- datasets uris ---\n  /datasets:\n    get:\n      summary: Get list of all datasets\n      tags:\n        - datasets \n      description: Items returned may depend on user or permission and are paged.\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/per_page'\n        - $ref: '#/components/parameters/publicationISSN'\n        - $ref: '#/components/parameters/manuscriptNumber'\n      responses:\n        '200':\n          description: A list of datasets.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/datasets'\n          examples:\n            application/json:\n              $ref: api/v2/docs/examples/datasets.json\n    post:\n      summary: Create a new dataset with a DOI automatically generated\n      tags:\n        - datasets \n      description: You must be logged in. Use the JSON structure and schema as shown below.\n      security:\n        - bearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/dc_metadata'\n            # https://github.com/swagger-api/swagger-ui/issues/3771 -- examples don't work\n            example:\n              $ref: api/v2/docs/examples/dataset_post_request.json\n      responses:\n        '201':\n          description: response showing dataset info that has been saved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/datasets'\n          examples:\n            application/json:\n              $ref: api/v2/docs/examples/dataset.json\n\n  '/datasets/{doi}':\n    get:\n      summary: Get a dataset by its doi\n      tags:\n        - datasets \n      description: Be sure to encode the DOI (see below for format)\n      parameters:\n        - $ref: '#/components/parameters/doi'\n      responses:\n        '200':\n          description: A dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/dataset'\n          examples:\n            application/json:\n              $ref: api/v2/docs/examples/dataset.json\n    put:\n      summary: Update (overwrite) dataset metadata for DOI or insert new with specified DOI\n      tags:\n        - datasets \n      description: This will overwrite writeable metadata for an in-progress dataset or will create a new dataset with the specified DOI identifier if one doesn't exist.  This is an insert or update action (upsert).\n      parameters:\n        - $ref: '#/components/parameters/doi'\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: \"json needed for updating a new dataset: example doesn't show because OpenAPI is broken it seems\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/dc_metadata'\n            # https://github.com/swagger-api/swagger-ui/issues/3771 -- examples don't work\n            example:\n              $ref: api/v2/docs/examples/dataset_post_request.json\n      responses:\n        '200':\n          description: response showing dataset info that has been saved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/datasets'\n          examples:\n            application/json:\n              $ref: api/v2/docs/examples/dataset.json\n    patch:\n      parameters:\n        - $ref: '#/components/parameters/doi'\n      security:\n        - bearerAuth: []\n      summary: Update state or details of an in-progress dataset\n      tags:\n        - datasets \n      description: \"Sending a JSON patch request whose JSON body looks like **[ { 'op': 'replace', 'path': '/versionStatus', 'value': 'submitted' } ]**. (This is the most common command, attempting to change the versionStatus to Submitted.) Other options are available that are useful for integration with manuscript processing systems. See the [embedded Dryad documentation](https://github.com/CDL-Dryad/dryad-app/blob/main/documentation/apis/embedded_submission.md) for details. Set http header **'Content-Type: application/json-patch+json'** when making the request instead of a standard json content-type.\"\n      requestBody:\n        description: JSON Patch object\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/dataset_submission'\n      responses:\n        '202':\n          description: Submission taking place, watch the dataset versionStatus for changes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/dataset'\n          examples:\n            application/json:\n              $ref: api/v2/docs/examples/dataset.json\n\n  '/datasets/{doi}/download':\n    get:\n      summary: Get download package for dataset.\n      tags:\n        - datasets \n      description: This would download the zip file for the latest submitted and visible version of the dataset to the user (if authorized) or the public.\n      parameters:\n        - $ref: '#/components/parameters/doi'\n      responses:\n        '200':\n          description: The binary content for a compressed archive\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n\n  '/datasets/{doi}/versions':\n    get:\n      summary: Show all versions of a dataset\n      tags:\n        - datasets \n      description: The versions endpoint allows seeing all (visible) versions. This is in contrast to GETting the datasets endpoiunt for a DOI, since it only embeds metadata for the latest visible version.\n      parameters:\n        - $ref: '#/components/parameters/doi'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/per_page'\n      responses:\n        '200':\n          description: A list of a dataset's versions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/versions'\n          examples:\n            application/json:\n              $ref: api/v2/docs/examples/versions.json\n\n  # --- versions uris ---\n  '/versions/{id}':\n    get:\n      summary: Show a specific dataset version\n      tags:\n        - versions\n      description: \"If you know the dataset version's internal id, you can request to see it directly. The versions endpoint lists the versions and their ids if you need to find this id.\"\n      parameters:\n        - $ref: '#/components/parameters/version_id'\n      responses:\n        '200':\n          description: The version of the dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/version'\n          examples:\n            application/json:\n              $ref: api/v2/docs/examples/version.json\n\n  '/versions/{id}/files':\n    get:\n      summary: Show a list of files and file metadata in this version\n      tags:\n        - versions\n      description: Returns the list of files and file metadata for a known version of a dataset with the version id you specify.\n      parameters:\n        - $ref: '#/components/parameters/version_id'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/per_page'\n      responses:\n        '200':\n          description: A list of the files in the version\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/files'\n          examples:\n            application/json:\n              $ref: api/v2/docs/examples/files.json\n\n  '/versions/{id}/download':\n    get:\n      summary: Get a download package for a dataset version\n      tags:\n        - versions\n      description: This only works for versions submitted to the repository (and assuming permission to view).  Allows you to download a zip file for the contents for that version of the dataset.\n      parameters:\n        - $ref: '#/components/parameters/version_id'\n      responses:\n        '200':\n          description: The binary content for a compressed archive\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n\n  '/files/{id}':\n    get:\n      summary: Get metadata information about a file\n      tags:\n        - files\n      description: Returns file metadata information (if visible to you) and if you know the internal id.  The version file list embeds this and also gives the internal ids.\n      parameters:\n        - $ref: '#/components/parameters/file_id'\n      responses:\n        '200':\n          description: A single file\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/file'\n          examples:\n            application/json:\n              $ref: api/v2/docs/examples/file.json\n    delete:\n      security:\n        - bearerAuth: []\n      parameters:\n        - $ref: '#/components/parameters/file_id'\n      summary: Remove a file from an in-progress dataset version\n      tags:\n        - files\n      description: \"This action only works on an in-progress dataset (this means that the latest version of a dataset associated with this file has to be in-progress). It will destroy the metadata and file if it's a staged file that hasn't been submitted to the repository yet.  If the file was submitted previously in an earlier version of the same dataset it will stage removal from the in-progress dataset version.  In order to finalize staged file changes into the storage repository, the in-progress dataset must be submitted again after all changes are ready.\"\n      responses:\n        '201':\n          description: The file and metadata was removed from staging.  Or the file and metadata was staged for removal from this version.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/file'\n          examples:\n            application/json:\n              $ref: api/v2/docs/examples/file.json\n\n  '/files/{id}/download':\n    get:\n      summary: Download a specific file\n      tags:\n        - files\n      description: Only files that have been stored in the storage repository may be downloaded (and ability to download may depend on the user).  Versions of a dataset still in-progress only have staged files that may not be downloaded until they have been submitted to the storage repository.\n      parameters:\n        - $ref: '#/components/parameters/file_id'\n      responses:\n        '200':\n          description: The binary content of the file downloads as the http body.  The \"Content-Type\" and \"Content-Disposition\" headers will be set to reflect the file content-type and filename when downloading (following http standards).\n          content:\n            \"*/*\":\n              schema:\n                type: string\n                format: binary\n\n  # --- upload a file in body with filename in url ---\n  '/datasets/{doi}/files/{filename}':\n    put:\n      summary: Upload and stage a file for an in-progress dataset.\n      tags:\n        - files\n      description: Allows uploading a file to be staged for submission to the storage repository. The files will be stored in the storage repository after the dataset is submitted.  The body of the request will be the file you are uploading.  Set the **'Content-Type'** http header to the appropriate mimetype for your file when uploading.\n      security:\n        - bearerAuth: []\n      parameters:\n        - $ref: '#/components/parameters/doi'\n        - $ref: '#/components/parameters/filename'\n      requestBody:\n        description: a binary file with content-type set\n        required: true\n        content:\n          \"*/*\":\n            schema:\n              type: string\n              format: binary\n      responses:\n        '201':\n          description: file was created on the server\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/file'\n          examples:\n            application/json:\n              $ref: api/v2/docs/examples/file.json\n\n  '/datasets/{doi}/urls':\n    put:\n      summary: Stage a file submission by URL\n      tags:\n        - files\n      description: \"The URL you specify will be deposited into the storage repository from a publicly accessible URL on the internet when the in-progress dataset is submitted.  The dataset must be an in-progress dataset. The URL will be validated and metadata about it obtained to populate metadata about the file when it is added.  Send the url to be retrieved as part of a JSON document like **{'url': 'http://example.org/testing/my/file.csv' }**.  Priviliged users may have additional options to specify URL metadata rather than having live-validation and metadata gathering performed from the Internet.\"\n      security:\n        - bearerAuth: []\n      parameters:\n        - $ref: '#/components/parameters/doi'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/url_json'\n      responses:\n        '201':\n          description: Metadata for the URL was saved and the response json indicates information populated for a file object based on the URL.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/file'\n          examples:\n            application/json:\n              $ref: api/v2/docs/examples/file.json\n\n  # --- search ---\n  /search:\n    get:\n      summary: Search over the publicly-available datasets\n      tags:\n        - root\n      description: Search the published Dryad datasets by keyword, institutional affiliation, and date.\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/per_page'\n        - in: query\n          name: q\n          schema:\n            type: string\n          description:\n            A list of terms to be searched. If multiple terms are\n            supplied, matches will only be returned for items that contain\n            all terms. Terms may include an `*` at the end to indicate a\n            wildcard. A term may be negated to indicate terms that should *not*\n            be present in the results (e.g., `cat -fish`).\n        - in: query\n          name: affiliation\n          schema:\n            type: string\n          description:\n            A *ROR* identifier specifying an institutional\n            affiliation that must be present in the list of dataset authors. The\n            identifier should be in the full \"https\" format and should be\n            URL-encoded, e.g., `https%3A%2F%2Fror.org%2F00x6h5n95`.\n        - in: query\n          name: tenant\n          schema:\n            type: string\n          description:\n            The abbreviation for a \"tenant\" organization in\n            Dryad. This will automatically search all affiliations associated\n            with the given tenant. If both a *tenant* and *affiliation* are\n            specified, the tenant will be ignored.\n        - in: query\n          name: modifiedSince\n          schema:\n            type: string\n          description:\n            A timestamp for limiting results. Datasets will\n            only be returned that have been modified since the given\n            time. The time must be specified in ISO 8601 format, and the time\n            zone must be set to UTC, e.g., `2020-10-08T10:24:53Z`. Shortened versions\n            of the time string are acceptable, e.g., `2020-10`.\n      responses:\n        '200':\n          description: A list of datasets.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/datasets'\n          examples:\n            application/json:\n              $ref: api/v2/docs/examples/datasets.json\n        '400':\n          description:\n            Dryad encountered an error parsing the query options for the search.\n            The most likely cause of this problem is an improperly-formatted timestamp\n            for the `modifiedSince` parameter.\n\n# ------------------\n# --- components ---\n# ------------------\ncomponents:\n  schemas:\n\n    # --- root ---\n    root:\n      type: object\n      properties:\n        _links:\n          $ref: '#/components/schemas/root_links'\n      required:\n        - _links\n\n    root_links:\n      type: object\n      properties:\n        self:\n          $ref: '#/components/schemas/hal_link'\n        \"stash:datasets\":\n          $ref: '#/components/schemas/hal_link'\n        curies:\n          type: array\n          items:\n            $ref: '#/components/schemas/hal_curie'\n      required:\n        - self\n\n    # --- Dataset(s) ---\n\n    # plural\n    datasets:\n      allOf:\n        - $ref: '#/components/schemas/hal_paged_response'\n        - $ref: '#/components/schemas/embedded_datasets'\n\n    embedded_datasets:\n      type: object\n      properties:\n        _embedded:\n          type: object\n          properties:\n            'stash:datasets':\n              type: array\n              items:\n                $ref: '#/components/schemas/dataset'\n\n    #singular\n    dataset:\n      allOf:\n        - $ref: '#/components/schemas/dataset_links'\n        - $ref: '#/components/schemas/version'\n      properties:\n            id:\n              type: integer\n            identifier:\n              type: string\n            storageSize:\n              type: string\n            license:\n              type: string\n            relatedPublicationISSN:\n              type: string\n\n    dataset_links:\n      properties:\n        _links:\n          allOf:\n            - $ref: '#/components/schemas/hal_self_link'\n            - $ref: '#/components/schemas/hal_dataset_links'\n\n    hal_dataset_links:\n      properties:\n        'stash:versions':\n          $ref: '#/components/schemas/hal_link'\n        'stash:version':\n          $ref: '#/components/schemas/hal_link'\n        'stash:download':\n          $ref: '#/components/schemas/hal_link'\n        curies:\n          type: array\n          items:\n            $ref: '#/components/schemas/hal_curie'\n\n    dataset_submission:\n      properties:\n        op:\n          type: string\n          enum: ['replace']\n          example: replace\n        path:\n          type: string\n          enum: ['/versionStatus']\n          example: \"/versionStatus\"\n        value:\n          type: string\n          enum: ['submitted']\n          example: submitted\n\n    # --- Version(s) ---\n    # plural\n    versions:\n      allOf:\n        - $ref: '#/components/schemas/hal_paged_response'\n        - $ref: '#/components/schemas/embedded_versions'\n\n    embedded_versions:\n      type: object\n      properties:\n        _embedded:\n          type: object\n          properties:\n            'stash:versions':\n              type: array\n              items:\n                $ref: '#/components/schemas/version'\n\n    # singular\n    version:\n      allOf:\n        - $ref: '#/components/schemas/version_links'\n        - $ref: '#/components/schemas/dc_metadata'\n        - properties:\n            versionNumber:\n              type: integer\n            userId:\n              type: integer\n            versionStatus:\n              type: string\n              description: Internal processing status, aka Merritt State.\n            curationStatus:\n              type: string\n              description: Status in the curation workflow. See https://github.com/CDL-Dryad/dryad-app/blob/main/documentation/submission_flow.md\n            visibility:\n              type: string\n              description: Whether this version is publicly visible or not\n            versionChanges:\n              type: string\n              description: Whether this version has had files_changed, or only metadata_changed\n            lastModificationDate:\n              type: string\n\n    version_links:\n      properties:\n        _links:\n          allOf:\n            - $ref: '#/components/schemas/hal_self_link'\n            - $ref: '#/components/schemas/hal_version_links'\n\n    hal_version_links:\n      properties:\n        'stash:dataset':\n          $ref: '#/components/schemas/hal_link'\n        'stash:files':\n          $ref: '#/components/schemas/hal_link'\n        'stash:download':\n          $ref: '#/components/schemas/hal_link'\n        curies:\n          type: array\n          items:\n            $ref: '#/components/schemas/hal_curie'\n\n    simple_version:\n      allOf:\n        - $ref: '#/components/schemas/dc_metadata'\n\n    # --- file(s) ---\n\n    # plural\n    files:\n      allOf:\n        - $ref: '#/components/schemas/hal_paged_response'\n        - $ref: '#/components/schemas/embedded_files'\n\n    embedded_files:\n      type: object\n      properties:\n        _embedded:\n          type: object\n          properties:\n            'stash:files':\n              type: array\n              items:\n                $ref: '#/components/schemas/file'\n\n    # singular\n    file:\n      allOf:\n        - $ref: '#/components/schemas/file_links'\n        - properties:\n            path:\n              type: string\n            size:\n              type: integer\n            mimeType:\n              type: string\n            status:\n              type: string\n            digest:\n              type: string\n            digestType:\n              type: string\n\n    file_links:\n      properties:\n        _links:\n          allOf:\n            - $ref: '#/components/schemas/hal_self_link'\n            - $ref: '#/components/schemas/hal_file_links'\n\n\n    # singular\n    url:\n      properties:\n        url:\n          type: string\n\n    hal_file_links:\n      properties:\n        'stash:dataset':\n          $ref: '#/components/schemas/hal_link'\n        'stash:version':\n          $ref: '#/components/schemas/hal_link'\n        'stash:files':\n          $ref: '#/components/schemas/hal_link'\n        'stash:download':\n          $ref: '#/components/schemas/hal_link'\n        curies:\n          type: array\n          items:\n            $ref: '#/components/schemas/hal_curie'\n\n    dc_metadata:\n      type: object\n      properties:\n        title:\n          type: string\n        authors:\n          type: array\n          items:\n            $ref: '#/components/schemas/author'\n        abstract:\n          type: string\n        funders:\n          type: array\n          items:\n            $ref: '#/components/schemas/funder'\n        keywords:\n          type: array\n          items:\n            type: string\n        methods:\n          type: string\n        usageNotes:\n          type: string\n        locations:\n          type: array\n          items:\n            $ref: '#/components/schemas/geolocation'\n        relatedWorks:\n          type: array\n          items:\n            $ref: '#/components/schemas/relatedWork'\n      required:\n        - title\n        - authors\n        - abstract\n\n    author:\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        affiliation:\n          type: string\n        affiliationROR:\n          type: string\n        affiliationISNI:\n          type: string\n        orcid:\n          type: string\n        order:\n          type: integer\n    simple_author:\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        affiliation:\n          type: string\n    funder:\n      properties:\n        organization:\n          type: string\n        awardNumber:\n          type: string\n        identifier:\n          type: string\n        identifierType:\n          description: type of identifier -- null, isni, grid, crossref_funder_id or other\n          type: string\n    relatedWork:\n      properties:\n        relationship:\n          type: string\n        identifierType:\n          type: string\n        identifier:\n          type: string\n    geolocation:\n      properties:\n        place:\n          description: a place name.\n          type: string\n        box:\n          $ref: '#/components/schemas/geolocationBox'\n          description: a bounding box.\n        point:\n          $ref: '#/components/schemas/geolocationPoint'\n          description: a coordinate point.\n    geolocationBox:\n      properties:\n        swLongitude:\n          description: the longitude of the southwest corner of the box.\n          type: number\n        swLatitude:\n          description: the latitude of the southwest corner of the box.\n          type: number\n        neLongitude:\n          description: the longitude of the northeast corner of the box.\n          type: number\n        neLatitude:\n          description: the latitude of the northeast corner of the box.\n          type: number\n    geolocationPoint:\n      type: object\n      properties:\n        latitude:\n          description: the latitude of the point.\n          type: number\n        longitude:\n          description: the longitude of the point.\n          type: number\n    embargo:\n      type: object\n      properties:\n        embargoEndDate:\n          format: date\n          description: the end date of the embargo.\n          type: string\n    tenant:\n      type: object\n      properties:\n        id:\n          format: string\n        abbreviation:\n          format: string\n        shortName:\n          format: string\n        longName:\n          format: string\n        domainName:\n          format: string\n\n    # --- specific link section for different resources ---\n\n\n    # --- generic linking methods that give links for boilerplate junk used everywhere ---\n    # TODO: hal_links should be purged because it's too generic and doesn't express real link structure\n    hal_links:\n      properties:\n        self:\n          $ref: '#/components/schemas/hal_link'\n        curies:\n          type: array\n          items:\n            $ref: '#/components/schemas/hal_curie'\n      required:\n        - self\n\n    hal_self_link:\n      type: object\n      properties:\n        self:\n          $ref: '#/components/schemas/hal_link'\n\n    hal_page_links:\n      properties:\n        first:\n          $ref: '#/components/schemas/hal_link'\n        last:\n          $ref: '#/components/schemas/hal_link'\n        prev:\n          $ref: '#/components/schemas/hal_link'\n        next:\n          $ref: '#/components/schemas/hal_link'\n\n    paging_counts:\n      properties:\n        count:\n          type: integer\n        total:\n          type: integer\n\n    hal_link:\n      type: object\n      properties:\n        href:\n          type: string\n          format: uri\n      required:\n        - href\n\n    hal_curie:\n      type: object\n      properties:\n        name:\n          type: string\n        href:\n          type: string\n          format: uri\n        templated:\n          type: boolean\n      required:\n        - name\n        - href\n        - templated\n\n    hal_paged_response:\n      allOf:\n        - properties:\n            _links:\n              allOf:\n                - $ref: '#/components/schemas/hal_self_link'\n                - $ref: '#/components/schemas/hal_page_links'\n        - $ref: '#/components/schemas/paging_counts'\n\n    url_json:\n      type: object\n      properties:\n        url:\n          type: string\n      required:\n        - url\n\n  # parameters for going into URLs (and json?)\n  parameters:\n    doi:\n      in: path\n      name: doi\n      schema:\n        type: string\n      required: true\n      description: \"DOI like doi:10.1000/18238577 that should be escaped (example: doi%3A10.1000%2F18238577 )\"\n\n    version_id:\n      in: path\n      name: id\n      schema:\n        type: integer\n      required: true\n      description: \"The version id is a unique integer and can be obtained from the list of versions for a dataset\"\n\n    file_id:\n      in: path\n      name: id\n      schema:\n        type: integer\n      required: true\n      description: \"The file id is a unique integer and can be obtained from the list of files for a version of a dataset\"\n\n    filename:\n      in: path\n      name: id\n      schema:\n        type: string\n      required: true\n      description: \"The filename is the filename for the file. It should be escaped in the URL (for example 'cat tundra.jpg' would be 'cat%20tundra.jpg'.  Your programming language will have a library to encode for you.\"\n\n    page:\n      in: query\n      name: page\n      schema:\n        type: integer\n      description:\n        Which page of results to view. Defaults to page 1.\n\n    per_page:\n      in: query\n      name: per_page\n      schema:\n        type: integer\n      description:\n        Number of results to return on each page. Defaults\n        to 20. Maximum allowed is 100.\n\n    publicationISSN:\n      in: query\n      name: publicationISSN\n      schema:\n        type: string\n      description:\n        ISSN of a journal associated with the datasets.\n\n    manuscriptNumber:\n      in: query\n      name: manuscriptNumber\n      schema:\n        type: string\n      description:\n        Manuscript number associated with the dataset.\n\n      \n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n",
			"canonicalURL": "/github.com/CDL-Dryad/dryad-app@81a5289416461db141552b45579123b42d1573a5/-/blob/public/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/CDL-Dryad/dryad-app/blob/81a5289416461db141552b45579123b42d1573a5/public/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!str `api/v2/...` into ogen.Example"
}