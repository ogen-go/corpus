{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mrin9/RapiDoc"
		},
		"file": {
			"name": "open-api-3-1-test.yaml",
			"size": 0,
			"path": "docs/specs/open-api-3-1-test.yaml",
			"byteSize": 4169,
			"content": "openapi: 3.1.0\ninfo:\n  title: Sample Pet Store App\n  summary: A pet store manager.\n  description: This is a sample server for a pet store.\n  termsOfService: https://example.com/terms/\n  contact:\n    name: API Support\n    url: https://www.example.com/support\n    email: support@example.com\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.1\nwebhooks:\n  newPet:\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\npaths:\n  /person:\n    post:\n      summary: Demonstrates data-types and constraints\n      description: Request-Parameters and Response-Schema contains various data types and constrains. Check out how is it desplayed below\n      parameters:\n        - name: height\n          in: query\n          description: height (in inches)\n          required: true\n          example: 70\n          schema:\n            type: integer\n            format: int32\n            minimum: 12\n            maximum: 120\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/person'\ntags:\n  - name: Person\n    description: Person Datatype\ncomponents:\n  schemas:\n    location:\n      description: longitude/latitude or city name\n      type: \n        - object\n        - string\n      properties:\n        longitude:\n          type: \n            - number\n            - string\n        latitude:\n          type: \n            - number\n            - string\n    person:\n      type: object\n      required:\n        - id\n        - photoUrls\n      properties:\n        id:\n          description: Person ID\n          type: \n            - string\n            - integer\n          minLength: 4\n          example: Guru\n        name:\n          description: Name of the person\n          type: \n            - string\n            - 'null'\n          minLength: 4\n          example: Guru\n        age:\n          description: Age of Person\n          type: \n            - integer\n            - number\n        photoUrls:\n          description: One or more URL's\n          type: \n            - string\n            - array\n          maxItems: 20\n          minimum: 10\n          items:\n            type: string\n            format: url\n        hobby:\n          description: comma separated list of hobbies or an array of object \n          type:\n            - string \n            - array\n          items:\n            type: object\n            properties:\n              hobbyRank:\n                type:\n                  - integer\n                  - number\n              hobbyName:\n                type: string\n        location:\n          description: Location\n          type: \n            - array\n            - integer\n          minimum: 10  \n          minItems: 1\n          items:\n            $ref: '#/components/schemas/location'\n        tag:\n          description: A tag-object or comma separated text\n          type: \n            - object\n            - string\n          properties:\n            tagId:\n              description: Tag ID\n              type: string\n            tagDefinition:\n              description: Tag properties or plain text\n              minLength: 1\n              type: \n                - object\n                - string\n              properties:\n                tagText:\n                  description: Text inside the tag\n                  minLength: 1\n                  type: string\n                tagColor:\n                  description: Color of Tag in RGB or Color Name\n                  type: \n                    - string\n                    - object\n                  properties:\n                    red:\n                      type: integer\n                    green:\n                      type: integer\n                    blue:\n                      type: integer\n\n"
		}
	},
	"Error": "unmarshal: callback: json: cannot unmarshal array into Go struct field Schema.type of type string"
}