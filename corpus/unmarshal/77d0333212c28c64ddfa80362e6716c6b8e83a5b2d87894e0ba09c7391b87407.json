{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vrchatapi/specification"
		},
		"file": {
			"name": "invite.yaml",
			"size": 0,
			"path": "openapi/components/paths/invite.yaml",
			"byteSize": 7971,
			"content": "openapi: 3.0.3\ninfo:\n  title: invite\n  version: '1.0'\n  description: Invite Docs Here\npaths:\n  '/message/{userId}/{messageType}':\n    parameters:\n      - $ref: ../parameters.yaml#/userId\n      - $ref: ../parameters.yaml#/messageType\n    get:\n      summary: List Invite Messages\n      tags:\n        - invite\n      responses:\n        '200':\n          $ref: ../responses/invite/InviteMessageListResponse.yaml\n        '400':\n          $ref: ../responses/invite/InviteMessageInvalidSlotNumberError.yaml\n        '401':\n          $ref: ../responses/NotAuthorizedActionError.yaml\n      operationId: getInviteMessages\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: |-\n        Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!\n\n        Message type refers to a different collection of messages, used during different types of responses.\n\n        * `message` = Message during a normal invite\n        * `response` = Message when replying to a message\n        * `request` = Message when requesting an invite\n        * `requestResponse` = Message when replying to a request for invite\n  '/message/{userId}/{messageType}/{slot}':\n    parameters:\n      - $ref: ../parameters.yaml#/userId\n      - $ref: ../parameters.yaml#/messageType\n      - $ref: ../parameters.yaml#/slot\n    get:\n      summary: Get Invite Message\n      tags:\n        - invite\n      responses:\n        '200':\n          $ref: ../responses/invite/InviteMessageResponse.yaml\n        '400':\n          $ref: ../responses/invite/InviteMessageGetNegativeSlotError.yaml\n        '401':\n          $ref: ../responses/NotAuthorizedActionError.yaml\n        '404':\n          $ref: ../responses/invite/InviteMessageGetTooHighSlotError.yaml\n      operationId: getInviteMessage\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: |-\n        Returns a single Invite Message. This returns the exact same information but less than `getInviteMessages`. Admin Credentials are required to view messages of other users!\n\n        Message type refers to a different collection of messages, used during different types of responses.\n\n        * `message` = Message during a normal invite\n        * `response` = Message when replying to a message\n        * `request` = Message when requesting an invite\n        * `requestResponse` = Message when replying to a request for invite\n    put:\n      summary: Update Invite Message\n      operationId: updateInviteMessage\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: |-\n        Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!\n\n        Updating a message automatically sets the cooldown timer to 60 minutes.\n        Trying to edit a message before the cooldown timer expires results in a 429 \"Too Fast Error\".\n\n        Message type refers to a different collection of messages, used during different types of responses.\n\n        * `message` = Message during a normal invite\n        * `response` = Message when replying to a message\n        * `request` = Message when requesting an invite\n        * `requestResponse` = Message when replying to a request for invite\n      responses:\n        '200':\n          $ref: ../responses/invite/InviteMessageListResponse.yaml\n        '400':\n          $ref: ../responses/invite/InviteMessageInvalidSlotNumberError.yaml\n        '401':\n          $ref: ../responses/NotAuthorizedActionError.yaml\n        '429':\n          $ref: ../responses/invite/InviteMessageUpdateRateLimitError.yaml\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../requests/UpdateInviteMessageRequest.yaml\n        description: Message of what to set the invite message to.\n      tags:\n        - invite\n    delete:\n      summary: Reset Invite Message\n      operationId: resetInviteMessage\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      responses:\n        '200':\n          $ref: ../responses/invite/InviteMessageListResponse.yaml\n        '400':\n          $ref: ../responses/invite/InviteMessageInvalidSlotNumberError.yaml\n        '401':\n          $ref: ../responses/NotAuthorizedActionError.yaml\n        '404':\n          $ref: ../responses/invite/InviteMessageNoEntryForSlotError.yaml\n        '429':\n          $ref: ../responses/invite/InviteMessageUpdateRateLimitError.yaml\n      tags:\n        - invite\n      description: |-\n        Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!\n\n        Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown.\n        Resetting it does however not set the rate-limit to 60 like when editing it.\n        It is possible to edit it right after resetting it.\n        Trying to edit a message before the cooldown timer expires results in a 429 \"Too Fast Error\".\n\n        Message type refers to a different collection of messages, used during different types of responses.\n\n        * `message` = Message during a normal invite\n        * `response` = Message when replying to a message\n        * `request` = Message when requesting an invite\n        * `requestResponse` = Message when replying to a request for invite\n\n        The DELETE endpoint does not have/require any request body.\n  '/invite/{userId}':\n    parameters:\n      - $ref: ../parameters.yaml#/userId\n    post:\n      summary: Invite User\n      tags:\n        - invite\n      responses:\n        '200':\n          $ref: ../responses/notifications/NotificationResponse.yaml\n        '403':\n          $ref: ../responses/invite/InviteMustBeFriendsError.yaml\n      operationId: inviteUser\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: Sends an invite to a user. Returns the Notification of type `invite` that was sent.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../requests/InviteRequest.yaml\n        description: Slot number of the Invite Message to use when inviting a user.\n  '/invite/{notificationId}/response':\n    parameters:\n      - $ref: ../parameters.yaml#/notificationId\n    post:\n      summary: Respond Invite\n      tags:\n        - invite\n      responses:\n        '200':\n          $ref: ../responses/notifications/NotificationResponse.yaml\n        '400':\n          $ref: ../responses/invite/InviteResponse400Error.yaml\n      operationId: respondInvite\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: 'Respond to an invite request by sending a world invite to the requesting user. `:notificationId` is the ID of the requesting notification.'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../requests/InviteResponse.yaml\n        description: Slot number of the Response Message to use when responding to a user.\n  '/requestInvite/{userId}':\n    parameters:\n      - $ref: ../parameters.yaml#/userId\n    post:\n      summary: Request Invite\n      operationId: requestInvite\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: Requests an invite from a user. Returns the Notification of type `requestInvite` that was sent.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../requests/RequestInviteRequest.yaml\n        description: Slot number of the Request Message to use when request an invite.\n      tags:\n        - invite\n      responses:\n        '200':\n          $ref: ../responses/notifications/NotificationResponse.yaml\n        '403':\n          $ref: ../responses/invite/InviteMustBeFriendsError.yaml\ntags:\n  $ref: ../tags.yaml\ncomponents:\n  securitySchemes:\n    $ref: ../securitySchemes.yaml\n"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal object into Go struct field Spec.tags of type []ogen.Tag"
}