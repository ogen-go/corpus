{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "launchdarkly.com-2.0.5-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/launchdarkly.com-2.0.5-swagger.yaml",
			"byteSize": 61537,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: support@launchdarkly.com\n    name: LaunchDarkly Support\n    url: https://support.launchdarkly.com\n    x-twitter: launchdarkly\n  description: Build custom integrations with the LaunchDarkly REST API\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  termsOfService: https://launchdarkly.com/terms\n  title: LaunchDarkly\n  version: 2.0.5\n  x-apisguru-categories:\n    - developer_tools\n  x-logo:\n    url: https://twitter.com/launchdarkly/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://launchdarkly.github.io/ld-openapi/swagger.json\n      version: \"2.0\"\n  x-providerName: launchdarkly.com\nsecurity:\n  - Token: []\npaths:\n  /:\n    get:\n      description: You can issue a GET request to the root resource to find all of the\n        resource categories supported by the API.\n      operationId: getRoot\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Root200\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      tags:\n        - Root\n  /auditlog:\n    get:\n      operationId: getAuditLogEntries\n      parameters:\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/Q\"\n        - $ref: \"#/components/parameters/AuditLimit\"\n        - $ref: \"#/components/parameters/Spec\"\n      responses:\n        \"200\":\n          description: Audit log entries response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuditLogEntries\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: Get a list of all audit log entries. The query parameters allow you to\n        restrict the returned results by date ranges, resource specifiers, or a\n        full-text search query.\n      tags:\n        - Audit log\n  \"/auditlog/{resourceId}\":\n    get:\n      operationId: getAuditLogEntry\n      parameters:\n        - $ref: \"#/components/parameters/ResourceId\"\n      responses:\n        \"200\":\n          description: Audit log entry response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuditLogEntry\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Use this endpoint to fetch a single audit log entry by its resouce ID.\n      tags:\n        - Audit log\n  \"/flag-statuses/{projectKey}/{environmentKey}\":\n    get:\n      operationId: getFeatureFlagStatuses\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n      responses:\n        \"200\":\n          description: List of feature flag statuses.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeatureFlagStatuses\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: Get a list of statuses for all feature flags. The status includes the\n        last time the feature flag was requested, as well as the state of the\n        flag.\n      tags:\n        - Feature flags\n  \"/flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}\":\n    get:\n      operationId: getFeatureFlagStatus\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n        - $ref: \"#/components/parameters/FeatureFlagKey\"\n      responses:\n        \"200\":\n          description: Status of the requested feature flag.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeatureFlagStatus\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: Get the status for a particular feature flag.\n      tags:\n        - Feature flags\n  \"/flags/{projectKey}\":\n    get:\n      operationId: getFeatureFlags\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKeyQuery\"\n        - $ref: \"#/components/parameters/Tag\"\n      responses:\n        \"200\":\n          description: Flags response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeatureFlags\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: Get a list of all features in the given project.\n      tags:\n        - Feature flags\n    post:\n      operationId: postFeatureFlag\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                includeInSnippet:\n                  description: Whether or not this flag should be made available to the\n                    client-side JavaScript SDK.\n                  type: boolean\n                key:\n                  description: A unique key that will be used to reference the flag in your\n                    code.\n                  example: new-test-flag\n                  type: string\n                name:\n                  description: A human-friendly name for the feature flag. Remember to note\n                    if this flag is intended to be temporary or permanent.\n                  example: new test flag\n                  type: string\n                tags:\n                  description: Tags for the feature flag.\n                  items:\n                    example: \"[]\"\n                    type: string\n                  type: array\n                temporary:\n                  description: Whether or not the flag is a temporary flag.\n                  type: boolean\n                variations:\n                  description: An array of possible variations for the flag.\n                  items:\n                    $ref: \"#/components/schemas/Variation\"\n                  type: array\n              required:\n                - name\n                - key\n                - variations\n              type: object\n        description: Create a new feature flag.\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Standard201\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"409\":\n          $ref: \"#/components/responses/Standard409\"\n      summary: Creates a new feature flag.\n      tags:\n        - Feature flags\n  \"/flags/{projectKey}/{featureFlagKey}\":\n    delete:\n      operationId: deleteFeatureFlag\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/FeatureFlagKey\"\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/Standard204\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Delete a feature flag in all environments. Be careful-- only delete\n        feature flags that are no longer being used by your application.\n      tags:\n        - Feature flags\n    get:\n      operationId: getFeatureFlag\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/FeatureFlagKey\"\n        - $ref: \"#/components/parameters/EnvironmentKeyQuery\"\n      responses:\n        \"200\":\n          description: Flag response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeatureFlag\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Get a single feature flag by key.\n      tags:\n        - Feature flags\n    patch:\n      operationId: patchFeatureFlag\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/FeatureFlagKey\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                comment:\n                  example: This is a comment string\n                  type: string\n                patch:\n                  items:\n                    $ref: \"#/components/schemas/PatchOperation\"\n                  type: array\n              type: object\n        description: Requires a JSON Patch representation of the desired changes to the\n          project, and an optional comment. 'http://jsonpatch.com/' Feature flag\n          patches also support JSON Merge Patch format.\n          'https://tools.ietf.org/html/rfc7386' The addition of comments is also\n          supported.\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/FeatureFlags200\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n        \"409\":\n          $ref: \"#/components/responses/Standard409\"\n      summary: Perform a partial update to a feature.\n      tags:\n        - Feature flags\n  /members:\n    get:\n      operationId: getMembers\n      responses:\n        \"200\":\n          description: Projects response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Members\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: Returns a list of all members in the account.\n      tags:\n        - Team members\n    post:\n      operationId: postMembers\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                properties:\n                  customRoles:\n                    items:\n                      $ref: \"#/components/schemas/CustomRoleKeyOrId\"\n                    type: array\n                  email:\n                    example: exampleuser@email.com\n                    type: string\n                  firstName:\n                    example: Bob\n                    type: string\n                  inlineRole:\n                    $ref: \"#/components/schemas/Statements\"\n                  lastName:\n                    example: Loblaw\n                    type: string\n                  role:\n                    $ref: \"#/components/schemas/Role\"\n                required:\n                  - email\n                type: object\n              type: array\n        description: New members to invite.\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Standard201\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"409\":\n          $ref: \"#/components/responses/Standard409\"\n      summary: Invite new members.\n      tags:\n        - Team members\n  \"/members/{memberId}\":\n    delete:\n      operationId: deleteMember\n      parameters:\n        - $ref: \"#/components/parameters/MemberId\"\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/Standard204\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Delete a team member by ID.\n      tags:\n        - Team members\n    get:\n      operationId: getMember\n      parameters:\n        - $ref: \"#/components/parameters/MemberId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Member200\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: Get a single team member by ID.\n      tags:\n        - Team members\n    patch:\n      operationId: patchMember\n      parameters:\n        - $ref: \"#/components/parameters/MemberId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/PatchOperationArray\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Member200\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n        \"409\":\n          $ref: \"#/components/responses/Standard409\"\n      summary: Modify a team member by ID.\n      tags:\n        - Team members\n  /projects:\n    get:\n      operationId: getProjects\n      responses:\n        \"200\":\n          description: Projects response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Projects\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: Returns a list of all projects in the account.\n      tags:\n        - Projects\n    post:\n      operationId: postProject\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                key:\n                  example: new-project\n                  type: string\n                name:\n                  example: New Project\n                  type: string\n              required:\n                - name\n                - key\n              type: object\n        description: Project keys must be unique within an account.\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Standard201\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"409\":\n          $ref: \"#/components/responses/Standard409\"\n      summary: Create a new project with the given key and name.\n      tags:\n        - Projects\n  \"/projects/{projectKey}\":\n    delete:\n      operationId: deleteProject\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/Standard204\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Delete a project by key. Caution-- deleting a project will delete all\n        associated environments and feature flags. You cannot delete the last\n        project in an account.\n      tags:\n        - Projects\n    get:\n      operationId: getProject\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Projects200\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Fetch a single project by key.\n      tags:\n        - Projects\n    patch:\n      operationId: patchProject\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n      requestBody:\n        $ref: \"#/components/requestBodies/PatchOperationArray\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Projects200\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n        \"409\":\n          $ref: \"#/components/responses/Standard409\"\n      summary: Modify a project by ID.\n      tags:\n        - Projects\n  \"/projects/{projectKey}/environments\":\n    post:\n      operationId: postEnvironment\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                color:\n                  description: A color swatch (as an RGB hex value with no leading '#',\n                    e.g. C8C8C8).\n                  example: \"417505\"\n                  type: string\n                defaultTtl:\n                  description: The default TTL for the new environment.\n                  example: 0\n                  type: number\n                key:\n                  description: A project-unique key for the new environment.\n                  example: dev\n                  type: string\n                name:\n                  description: The name of the new environment.\n                  example: Development\n                  type: string\n              required:\n                - name\n                - key\n                - color\n              type: object\n        description: New environment.\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Standard201\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"409\":\n          $ref: \"#/components/responses/Standard409\"\n      summary: Create a new environment in a specified project with a given name, key,\n        and swatch color.\n      tags:\n        - Environments\n  \"/projects/{projectKey}/environments/{environmentKey}\":\n    delete:\n      operationId: deleteEnvironment\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/Standard204\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Delete an environment in a specific project.\n      tags:\n        - Environments\n    get:\n      operationId: getEnvironment\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n      responses:\n        \"200\":\n          description: Environment response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Environment\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Get an environment given a project and key.\n      tags:\n        - Environments\n    patch:\n      operationId: patchEnvironment\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n      requestBody:\n        $ref: \"#/components/requestBodies/PatchOperationArray\"\n      responses:\n        \"200\":\n          description: Environment response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Environment\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n        \"409\":\n          $ref: \"#/components/responses/Standard409\"\n      summary: Modify an environment by ID.\n      tags:\n        - Environments\n  /roles:\n    get:\n      operationId: getCustomRoles\n      responses:\n        \"200\":\n          description: Custom roles response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CustomRoles\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: Return a complete list of custom roles.\n      tags:\n        - Custom roles\n    post:\n      operationId: postCustomRole\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                description:\n                  description: Description of the custom role.\n                  example: Description of revenue team role here\n                  type: string\n                key:\n                  $ref: \"#/components/schemas/CustomRoleKeyOrId\"\n                name:\n                  description: Name of the custom role.\n                  example: revenue team\n                  type: string\n                policy:\n                  items:\n                    $ref: \"#/components/schemas/Policy\"\n                  type: array\n              required:\n                - name\n                - key\n                - policy\n              type: object\n        description: New role or roles to create.\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Standard201\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"409\":\n          $ref: \"#/components/responses/Standard409\"\n      summary: Create a new custom role.\n      tags:\n        - Custom roles\n  \"/roles/{customRoleKey}\":\n    delete:\n      operationId: deleteCustomRole\n      parameters:\n        - $ref: \"#/components/parameters/CustomRoleKey\"\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/Standard204\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Delete a custom role by key.\n      tags:\n        - Custom roles\n    get:\n      operationId: getCustomRole\n      parameters:\n        - $ref: \"#/components/parameters/CustomRoleKey\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/CustomRole200\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: Get one custom role by key.\n      tags:\n        - Custom roles\n    patch:\n      operationId: patchCustomRole\n      parameters:\n        - $ref: \"#/components/parameters/CustomRoleKey\"\n      requestBody:\n        $ref: \"#/components/requestBodies/PatchOperationArray\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/CustomRole200\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n        \"409\":\n          $ref: \"#/components/responses/Standard409\"\n      summary: Modify a custom role by key.\n      tags:\n        - Custom roles\n  \"/segments/{projectKey}/{environmentKey}\":\n    get:\n      operationId: getUserSegments\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n        - $ref: \"#/components/parameters/Tag\"\n      responses:\n        \"200\":\n          description: Segments response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserSegments\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: Get a list of all user segments in the given project.\n      tags:\n        - User segments\n    post:\n      operationId: postUserSegment\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                description:\n                  description: A description for the user segment.\n                  example: Users in this segment will have access to beta features.\n                  type: string\n                key:\n                  description: A unique key that will be used to reference the user segment\n                    in feature flags.\n                  example: new-segment\n                  type: string\n                name:\n                  description: A human-friendly name for the user segment.\n                  example: new segment\n                  type: string\n                tags:\n                  description: Tags for the user segment.\n                  items:\n                    example: \"[]\"\n                    type: string\n                  type: array\n              required:\n                - name\n                - key\n              type: object\n        description: Create a new user segment.\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Standard201\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"409\":\n          $ref: \"#/components/responses/Standard409\"\n      summary: Creates a new user segment.\n      tags:\n        - User segments\n  \"/segments/{projectKey}/{environmentKey}/{userSegmentKey}\":\n    delete:\n      operationId: deleteUserSegment\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n        - $ref: \"#/components/parameters/UserSegmentKey\"\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/Standard204\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Delete a user segment.\n      tags:\n        - User segments\n    get:\n      operationId: getUserSegment\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n        - $ref: \"#/components/parameters/UserSegmentKey\"\n      responses:\n        \"200\":\n          description: User segment response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserSegment\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Get a single user segment by key.\n      tags:\n        - User segments\n    patch:\n      operationId: patchUserSegment\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n        - $ref: \"#/components/parameters/UserSegmentKey\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/PatchOperation\"\n              type: array\n        description: Requires a JSON Patch representation of the desired changes to the\n          project. 'http://jsonpatch.com/' Feature flag patches also support\n          JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The\n          addition of comments is also supported.\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UserSegment200\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n        \"409\":\n          $ref: \"#/components/responses/Standard409\"\n      summary: Perform a partial update to a user segment.\n      tags:\n        - User segments\n  \"/user-search/{projectKey}/{environmentKey}\":\n    get:\n      operationId: getSearchUsers\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n        - $ref: \"#/components/parameters/Query\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/After\"\n      responses:\n        \"200\":\n          description: Users response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: Search users in LaunchDarkly based on their last active date, or a\n        search query. It should not be used to enumerate all users in\n        LaunchDarkly-- use the List users API resource.\n      tags:\n        - Users\n  \"/users/{projectKey}/{environmentKey}\":\n    get:\n      operationId: getUsers\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/HMAC\"\n        - $ref: \"#/components/parameters/ScrollId\"\n      responses:\n        \"200\":\n          description: Users response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: List all users in the environment. Includes the total count of users. In\n        each page, there will be up to 'limit' users returned (default 20). This\n        is useful for exporting all users in the system for further analysis.\n        Paginated collections will include a next link containing a URL with the\n        next set of elements in the collection.\n      tags:\n        - Users\n  \"/users/{projectKey}/{environmentKey}/{userKey}\":\n    delete:\n      operationId: deleteUser\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n        - $ref: \"#/components/parameters/UserKey\"\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/Standard204\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Delete a user by ID.\n      tags:\n        - Users\n    get:\n      operationId: getUser\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n        - $ref: \"#/components/parameters/UserKey\"\n      responses:\n        \"200\":\n          description: User response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Get a user by key.\n      tags:\n        - Users\n  \"/users/{projectKey}/{environmentKey}/{userKey}/flags\":\n    get:\n      operationId: getUserFlagSettings\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n        - $ref: \"#/components/parameters/UserKey\"\n      responses:\n        \"200\":\n          description: User flags settings response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserFlagSettings\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Fetch a single flag setting for a user by key.\n      tags:\n        - User settings\n  \"/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}\":\n    get:\n      operationId: getUserFlagSetting\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n        - $ref: \"#/components/parameters/UserKey\"\n        - $ref: \"#/components/parameters/FeatureFlagKey\"\n      responses:\n        \"200\":\n          description: User flag setting response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserFlagSetting\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Fetch a single flag setting for a user by key.\n      tags:\n        - User settings\n    put:\n      operationId: putFlagSetting\n      parameters:\n        - $ref: \"#/components/parameters/ProjectKey\"\n        - $ref: \"#/components/parameters/EnvironmentKey\"\n        - $ref: \"#/components/parameters/UserKey\"\n        - $ref: \"#/components/parameters/FeatureFlagKey\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                setting:\n                  description: \u003e\n                    The variation value to set for the user. Must match the\n                    variation type of the flag.\n                  type: boolean\n              type: object\n        required: true\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/Standard204\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Specifically enable or disable a feature flag for a user based on their\n        key.\n      tags:\n        - User settings\n  /webhooks:\n    get:\n      operationId: getWebhooks\n      responses:\n        \"200\":\n          description: Webhooks response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Webhooks\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: Fetch a list of all webhooks.\n      tags:\n        - Webhooks\n    post:\n      operationId: postWebhook\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: The name of the webhook.\n                  example: Example hook\n                  type: string\n                on:\n                  description: Whether this webhook is enabled or not.\n                  example: true\n                  type: boolean\n                secret:\n                  description: If sign is true, and the secret attribute is omitted,\n                    LaunchDarkly will automatically generate a secret for you.\n                  example: \u003cpassword\u003e\n                  type: string\n                sign:\n                  description: If sign is false, the webhook will not include a signature\n                    header, and the secret can be omitted.\n                  type: boolean\n                url:\n                  description: The URL of the remote webhook.\n                  example: https://example.com/example\n                  type: string\n              required:\n                - url\n                - sign\n                - on\n              type: object\n        description: New webhook.\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Standard201\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n      summary: Create a webhook.\n      tags:\n        - Webhooks\n  \"/webhooks/{resourceId}\":\n    delete:\n      operationId: deleteWebhook\n      parameters:\n        - $ref: \"#/components/parameters/ResourceId\"\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/Standard204\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Delete a webhook by ID.\n      tags:\n        - Webhooks\n    get:\n      operationId: getWebhook\n      parameters:\n        - $ref: \"#/components/parameters/ResourceId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Webhooks200\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n      summary: Get a webhook by ID.\n      tags:\n        - Webhooks\n    patch:\n      operationId: patchWebhook\n      parameters:\n        - $ref: \"#/components/parameters/ResourceId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/PatchOperationArray\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Webhooks200\"\n        \"400\":\n          $ref: \"#/components/responses/Standard400\"\n        \"401\":\n          $ref: \"#/components/responses/Standard401\"\n        \"404\":\n          $ref: \"#/components/responses/Standard404\"\n        \"409\":\n          $ref: \"#/components/responses/Standard409\"\n      summary: Modify a webhook by ID.\n      tags:\n        - Webhooks\nservers:\n  - url: https://app.launchdarkly.com/api/v2\ncomponents:\n  parameters:\n    After:\n      description: A timestamp filter, expressed as a Unix epoch time in milliseconds. All\n        entries returned will have occured after this timestamp.\n      in: query\n      name: after\n      required: false\n      schema:\n        type: number\n        format: int64\n    AuditLimit:\n      description: A limit on the number of audit log entries to be returned, between 1 and\n        20.\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: number\n    Before:\n      description: A timestamp filter, expressed as a Unix epoch time in milliseconds. All\n        entries returned will have before this timestamp.\n      in: query\n      name: before\n      required: false\n      schema:\n        type: number\n    CustomRoleKey:\n      description: The custom role key.\n      in: path\n      name: customRoleKey\n      required: true\n      schema:\n        type: string\n    EnvironmentKey:\n      description: The environment key, used to tie together flag configuration and users\n        under one environment so they can be managed together.\n      in: path\n      name: environmentKey\n      required: true\n      schema:\n        type: string\n    EnvironmentKeyQuery:\n      description: By default, each feature will include configurations for each\n        environment. You can filter environments with the env query parameter.\n        For example, setting env=production will restrict the returned\n        configurations to just your production environment.\n      in: query\n      name: env\n      required: false\n      schema:\n        type: string\n    FeatureFlagKey:\n      description: The feature flag's key. The key identifies the flag in your code.\n      in: path\n      name: featureFlagKey\n      required: true\n      schema:\n        type: string\n    HMAC:\n      description: This parameter is required when following \"next\" links.\n      in: query\n      name: h\n      required: false\n      schema:\n        type: string\n    Limit:\n      description: Pagination limit.\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: integer\n    MemberId:\n      description: The member ID.\n      in: path\n      name: memberId\n      required: true\n      schema:\n        type: string\n    Offset:\n      description: Specifies the first item to return in the collection.\n      in: query\n      name: offset\n      required: false\n      schema:\n        type: integer\n    ProjectKey:\n      description: The project key, used to tie the flags together under one project so\n        they can be managed together.\n      in: path\n      name: projectKey\n      required: true\n      schema:\n        type: string\n    Q:\n      description: Text to search for. You can search for the full or partial name of the\n        resource involved or fullpartial email address of the member who made\n        the change.\n      in: query\n      name: q\n      required: false\n      schema:\n        type: string\n    Query:\n      description: Search query.\n      in: query\n      name: q\n      required: false\n      schema:\n        type: string\n    ResourceId:\n      description: The resource ID.\n      in: path\n      name: resourceId\n      required: true\n      schema:\n        type: string\n    ScrollId:\n      description: This parameter is required when following \"next\" links.\n      in: query\n      name: scrollId\n      required: false\n      schema:\n        type: string\n    Spec:\n      description: A resource specifier, allowing you to filter audit log listings by\n        resource.\n      in: query\n      name: spec\n      required: false\n      schema:\n        type: string\n    Tag:\n      description: Filter by tag. A tag can be used to group flags across projects.\n      in: query\n      name: tag\n      required: false\n      schema:\n        type: string\n    UserKey:\n      description: The user's key.\n      in: path\n      name: userKey\n      required: true\n      schema:\n        type: string\n    UserSegmentKey:\n      description: The user segment's key. The key identifies the user segment in your code.\n      in: path\n      name: userSegmentKey\n      required: true\n      schema:\n        type: string\n  responses:\n    CustomRole200:\n      description: Custom role response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CustomRole\"\n    FeatureFlags200:\n      description: Feature flag response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/FeatureFlag\"\n    Member200:\n      description: Member response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Member\"\n    Projects200:\n      description: Successful Project response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Project\"\n    Root200:\n      description: A list of links to available resources in the API.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Links\"\n    Standard201:\n      description: Resource created.\n    Standard204:\n      description: Action completed successfully.\n    Standard400:\n      description: Invalid request body.\n    Standard401:\n      description: Invalid access token.\n    Standard404:\n      description: Invalid resource specifier.\n    Standard409:\n      description: Status conflict.\n    UserSegment200:\n      description: User segment response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UserSegment\"\n    Webhooks200:\n      description: Webhook response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Webhook\"\n  requestBodies:\n    PatchOperationArray:\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/PatchOperation\"\n            type: array\n      description: Requires a JSON Patch representation of the desired changes to the\n        project. 'http://jsonpatch.com/'\n      required: true\n  securitySchemes:\n    Token:\n      description: https://app.launchdarkly.com/settings#/tokens\n      in: header\n      name: Authorization\n      type: apiKey\n  schemas:\n    Action:\n      description: An action to perform on a resource.\n      example: updateOn\n      type: string\n    Actions:\n      items:\n        $ref: \"#/components/schemas/Action\"\n      type: array\n    AuditLogEntries:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        items:\n          items:\n            $ref: \"#/components/schemas/AuditLogEntry\"\n          type: array\n      type: object\n    AuditLogEntry:\n      properties:\n        _id:\n          $ref: \"#/components/schemas/Id\"\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        comment:\n          example: This is a comment string\n          type: string\n        date:\n          example: 1472243938774\n          format: int64\n          type: integer\n        description:\n          example: Changed the name from Test to Testing\n          type: string\n        kind:\n          example: environment\n          type: string\n        member:\n          $ref: \"#/components/schemas/Member\"\n        name:\n          example: Testing\n          type: string\n        shortDescription:\n          example: '\"\"'\n          type: string\n        target:\n          properties:\n            _links:\n              $ref: \"#/components/schemas/Links\"\n            name:\n              example: Testing\n              type: string\n            resources:\n              items:\n                example: proj/alexis:env/test\n                type: string\n              type: array\n          type: object\n        title:\n          example: \"[Reese Applebaum](mailto:refapp@launchdarkly.com) changed the name\n            of [Testing](https://app.launchdarkly.com/settings#/projects)\"\n          type: string\n        titleVerb:\n          example: changed the name of\n          type: string\n      type: object\n    Clause:\n      properties:\n        attribute:\n          example: groups\n          type: string\n        negate:\n          type: boolean\n        op:\n          example: in\n          type: string\n        values:\n          items:\n            example: Top Customers\n            type: object\n          type: array\n      type: object\n    CustomRole:\n      properties:\n        _id:\n          $ref: \"#/components/schemas/Id\"\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        description:\n          description: Description of the custom role.\n          example: Description of revenue team role here\n          type: string\n        key:\n          $ref: \"#/components/schemas/CustomRoleKeyOrId\"\n        name:\n          description: Name of the custom role.\n          example: revenue team\n          type: string\n        policy:\n          items:\n            $ref: \"#/components/schemas/Policy\"\n          type: array\n      type: object\n    CustomRoleKeyOrId:\n      description: The 20-hexdigit id or the key for a custom role.\n      example: revenue-team\n      type: string\n    CustomRoles:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        items:\n          $ref: \"#/components/schemas/CustomRole\"\n      type: object\n    Environment:\n      properties:\n        _id:\n          $ref: \"#/components/schemas/Id\"\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        apiKey:\n          description: The SDK key for backend LaunchDarkly SDKs.\n          example: XXX\n          type: string\n        color:\n          description: The swatch color for the environment.\n          example: \"417505\"\n          type: string\n        defaultTrackEvents:\n          description: Set to true to send detailed event information for new flags.\n          example: false\n          type: boolean\n        defaultTtl:\n          description: The default TTL.\n          example: 0\n          type: number\n        key:\n          description: The key for the environment.\n          example: production\n          type: string\n        mobileKey:\n          description: The SDK key for mobile LaunchDarkly SDKs.\n          example: XXX\n          type: string\n        name:\n          description: The name of the environment.\n          example: Production\n          type: string\n        secureMode:\n          description: Determines if this environment is in safe mode.\n          example: false\n          type: boolean\n      type: object\n    Fallthrough:\n      properties:\n        rollout:\n          $ref: \"#/components/schemas/Rollout\"\n        variation:\n          type: integer\n      type: object\n    FeatureFlag:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        _maintainer:\n          $ref: \"#/components/schemas/Member\"\n        creationDate:\n          description: A unix epoch time in milliseconds specifying the creation time of\n            this flag.\n          example: 1443652232590\n          format: int64\n          type: number\n        description:\n          description: Description of the feature flag.\n          example: This flag controls whether test feature is turned on or not.\n          type: string\n        environments:\n          additionalProperties:\n            $ref: \"#/components/schemas/FeatureFlagConfig\"\n          type: object\n        includeInSnippet:\n          example: false\n          type: boolean\n        key:\n          example: test-feature\n          type: string\n        kind:\n          description: Whether the feature flag is a boolean flag or multivariate.\n          example: boolean\n          type: string\n        maintainerId:\n          description: The ID of the member that should maintain this flag.\n          example: 561c579cd8fd5c2704000001\n          type: string\n        name:\n          description: Name of the feature flag.\n          example: Test Feature\n          type: string\n        tags:\n          description: An array of tags for this feature flag.\n          example: \"[]\"\n          items:\n            type: string\n          type: array\n        temporary:\n          description: Whether or not this flag is temporary.\n          example: false\n          type: boolean\n        variations:\n          description: The variations for this feature flag.\n          example: '[ { \"value\": \"a\" }, { \"value\": \"b\" } ]'\n          items:\n            $ref: \"#/components/schemas/Variation\"\n          type: array\n      type: object\n    FeatureFlagConfig:\n      properties:\n        archived:\n          type: boolean\n        fallthrough:\n          $ref: \"#/components/schemas/Fallthrough\"\n        lastModified:\n          example: 1469326565348\n          format: int64\n          type: integer\n        offVariation:\n          type: integer\n        on:\n          type: boolean\n        prerequisites:\n          items:\n            $ref: \"#/components/schemas/Prerequisite\"\n          type: array\n        rules:\n          items:\n            $ref: \"#/components/schemas/Rule\"\n          type: array\n        salt:\n          example: YWx0ZXJuYXRlLnBhZ2U=\n          type: string\n        sel:\n          example: 45501b9314dc4641841af774cb038b96\n          type: string\n        targets:\n          items:\n            $ref: \"#/components/schemas/Target\"\n          type: array\n        trackEvents:\n          description: Set to true to send detailed event information for this flag.\n          example: false\n          type: boolean\n        version:\n          example: 65\n          type: integer\n      type: object\n    FeatureFlagStatus:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        default:\n          type: object\n        lastRequested:\n          example: 2016-08-16T21:10:11.886Z\n          type: string\n        name:\n          description: \u003e\n            | Name     | Description |\n\n            | --------:| ----------- |\n\n            | new      | the feature flag was created within the last 7 days, and has not been requested yet |\n\n            | active   | the feature flag was requested by your servers or clients within the last 7 days |\n\n            | inactive | the feature flag was created more than 7 days ago, and hasn't been requested by your servers or clients within the past 7 days |\n\n            | launched | one variation of the feature flag has been rolled out to all your users for at least 7 days |\n          enum:\n            - new\n            - active\n            - inactive\n            - launched\n          type: string\n      type: object\n    FeatureFlagStatuses:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        items:\n          items:\n            $ref: \"#/components/schemas/FeatureFlagStatus\"\n          type: array\n      type: object\n    FeatureFlags:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        items:\n          items:\n            $ref: \"#/components/schemas/FeatureFlag\"\n          type: array\n      type: object\n    Id:\n      description: The unique resource id.\n      example: 5a580a01b4ff89217bdf9dc1\n      type: string\n    Link:\n      properties:\n        href:\n          example: /api/v2/endpoint\n          type: string\n        type:\n          example: application/json\n          type: string\n      type: object\n    Links:\n      properties:\n        next:\n          $ref: \"#/components/schemas/Link\"\n        self:\n          $ref: \"#/components/schemas/Link\"\n      type: object\n    Member:\n      properties:\n        _id:\n          $ref: \"#/components/schemas/Id\"\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        _pendingInvite:\n          type: boolean\n        customRoles:\n          items:\n            $ref: \"#/components/schemas/Id\"\n          type: array\n        email:\n          example: user@launchdarkly.com\n          type: string\n        isBeta:\n          type: boolean\n        role:\n          $ref: \"#/components/schemas/Role\"\n      type: object\n    Members:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        items:\n          $ref: \"#/components/schemas/Member\"\n      type: object\n    PatchOperation:\n      properties:\n        op:\n          example: replace\n          type: string\n        path:\n          example: /on\n          type: string\n        value:\n          type: object\n      required:\n        - op\n        - path\n        - value\n      type: object\n    Policy:\n      properties:\n        actions:\n          $ref: \"#/components/schemas/Actions\"\n        effect:\n          description: Effect of the policy - allow or deny.\n          example: deny\n          type: string\n        resources:\n          $ref: \"#/components/schemas/Resources\"\n      type: object\n    Prerequisite:\n      properties:\n        key:\n          type: string\n        variation:\n          type: integer\n      type: object\n    Project:\n      properties:\n        _id:\n          $ref: \"#/components/schemas/Id\"\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        environments:\n          items:\n            $ref: \"#/components/schemas/Environment\"\n          type: array\n        key:\n          example: zentasks\n          type: string\n        name:\n          example: Zentasks\n          type: string\n      type: object\n    Projects:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        items:\n          items:\n            $ref: \"#/components/schemas/Project\"\n          type: array\n      type: object\n    Resource:\n      description: A resource specifier string\n      example: proj/*:env/*:flag/my-flag\n      type: string\n    Resources:\n      items:\n        $ref: \"#/components/schemas/Resource\"\n      type: array\n    Role:\n      enum:\n        - writer\n        - reader\n        - admin\n        - owner\n      type: string\n    Rollout:\n      properties:\n        variations:\n          items:\n            $ref: \"#/components/schemas/WeightedVariation\"\n          type: array\n      type: object\n    Rule:\n      properties:\n        clauses:\n          items:\n            $ref: \"#/components/schemas/Clause\"\n          type: array\n        rollout:\n          $ref: \"#/components/schemas/Rollout\"\n        variation:\n          type: integer\n      type: object\n    Statement:\n      properties:\n        actions:\n          $ref: \"#/components/schemas/Actions\"\n        effect:\n          enum:\n            - allow\n            - deny\n          type: string\n        notactions:\n          $ref: \"#/components/schemas/Actions\"\n        notresources:\n          $ref: \"#/components/schemas/Resources\"\n        resources:\n          $ref: \"#/components/schemas/Resources\"\n      type: object\n    Statements:\n      items:\n        $ref: \"#/components/schemas/Statement\"\n      type: array\n    Target:\n      properties:\n        values:\n          items:\n            example: '\"1461797806427-7-115540266\",\n              \"00142875-a39d-4028-a3b7-987ccd151649\"'\n            type: string\n          type: array\n        variation:\n          type: integer\n      type: object\n    User:\n      properties:\n        anonymous:\n          type: boolean\n        avatar:\n          type: string\n        country:\n          type: string\n        custom:\n          example:\n            company: example.com\n          type: object\n        email:\n          type: string\n        firstName:\n          type: string\n        ip:\n          type: string\n        key:\n          example: a00bea\n          type: string\n        lastName:\n          type: string\n        name:\n          example: Bob Loblaw\n          type: string\n        secondary:\n          type: string\n      type: object\n    UserFlagSetting:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        _value:\n          description: The most important attribute in the response. The _value is the\n            current setting for the user. For a boolean feature toggle, this\n            will be true, false, or null if there is no defined fallthrough\n            value.\n          example: true\n          type: boolean\n        setting:\n          description: The setting attribute indicates whether you've explicitly targeted\n            this user to receive a particular variation. For example, if you\n            have explicitly turned off a feature toggle for a user, setting will\n            be false. A setting of null means that you haven't assigned that\n            user to a specific variation.\n          type: boolean\n      type: object\n    UserFlagSettings:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        items:\n          example:\n            alternate.page:\n              _links:\n                self:\n                  href: /api/v2/users/lacuna/production/Abbie_Braun/flags/alternate.page\n                  type: application/json\n              _value: false,\n            sort.order:\n              _links:\n                _value: true\n                self:\n                  href: /api/v2/users/lacuna/production/Abbie_Braun/flags/sort.order\n                  type: application/json\n          type: object\n      type: object\n    UserRecord:\n      properties:\n        avatar:\n          example: https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg\n          type: string\n        environmentId:\n          example: 54ac2d97de674204ddd61096\n          type: string\n        lastPing:\n          example: 2015-03-03T02:37:22.492Z\n          format: int64\n          type: string\n        ownerId:\n          $ref: \"#/components/schemas/Id\"\n        user:\n          $ref: \"#/components/schemas/User\"\n      type: object\n    UserSegment:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        creationDate:\n          description: A unix epoch time in milliseconds specifying the creation time of\n            this flag.\n          example: 1443652232590\n          format: int64\n          type: number\n        description:\n          description: Description of the user segment.\n          example: Users in this segment can access beta features.\n          type: string\n        excluded:\n          description: An array of user keys that should not be included in this segment,\n            unless they are also listed in \"included\".\n          items:\n            type: string\n          type: array\n        included:\n          description: An array of user keys that are included in this segment.\n          items:\n            type: string\n          type: array\n        key:\n          description: Unique identifier for the user segment.\n          example: beta-testers\n          type: string\n        name:\n          description: Name of the user segment.\n          example: Beta Testers\n          type: string\n        rules:\n          description: An array of rules that can cause a user to be included in this\n            segment.\n          items:\n            $ref: \"#/components/schemas/UserSegmentRule\"\n          type: array\n        tags:\n          description: An array of tags for this user segment.\n          items:\n            type: string\n          type: array\n        version:\n          type: integer\n      required:\n        - key\n        - name\n        - creationDate\n      type: object\n    UserSegmentRule:\n      properties:\n        bucketBy:\n          type: string\n        clauses:\n          items:\n            $ref: \"#/components/schemas/Clause\"\n          type: array\n        weight:\n          type: integer\n      type: object\n    UserSegments:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        items:\n          items:\n            $ref: \"#/components/schemas/UserSegment\"\n          type: array\n      type: object\n    Users:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        items:\n          items:\n            $ref: \"#/components/schemas/UserRecord\"\n          type: array\n        totalCount:\n          example: 3\n          type: number\n      type: object\n    Variation:\n      properties:\n        description:\n          example: The true variation\n          type: string\n        name:\n          example: \"True\"\n          type: string\n        value:\n          type: object\n      required:\n        - value\n      type: object\n    Webhook:\n      properties:\n        _id:\n          $ref: \"#/components/schemas/Id\"\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        name:\n          description: The name of the webhook.\n          example: Example hook\n          type: string\n        on:\n          description: Whether this webhook is enabled or not.\n          example: true\n          type: boolean\n        secret:\n          description: If defined, the webhooks post request will include a X-LD-Signature\n            header whose value will contain an HMAC SHA256 hex digest of the\n            webhook payload, using the secret as the key.\n          example: frobozz\n          type: string\n        tags:\n          description: Tags assigned to this webhook.\n          items:\n            example: \"[]\"\n            type: string\n          type: array\n        url:\n          description: The URL of the remote webhook.\n          example: https://example.com/example\n          type: string\n      type: object\n    Webhooks:\n      properties:\n        _links:\n          $ref: \"#/components/schemas/Links\"\n        items:\n          items:\n            $ref: \"#/components/schemas/Webhook\"\n          type: array\n      type: object\n    WeightedVariation:\n      properties:\n        variation:\n          type: integer\n        weight:\n          type: integer\n      type: object\n"
		}
	},
	"Error": "unmarshal: json: line 1:46737: json: cannot unmarshal bool into Go struct field Schema.paths.post.requestBody.content.schema.required of type string"
}