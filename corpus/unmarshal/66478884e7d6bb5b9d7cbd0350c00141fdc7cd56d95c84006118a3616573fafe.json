{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/netresearch/timetracker"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "web/api.yml",
			"byteSize": 62103,
			"content": "openapi: 3.0.0\ninfo:\n  title: Time Tracker API\n  description: Track your time\n  version: 0.1.9\ntags:\n- name: \"Activity\"\n- name: \"Contract\"\n- name: \"Customer\"\n- name: \"Data\"\n- name: \"Preset\"\n- name: \"Project\"\n- name: \"Summary\"\n- name: \"Team\"\n- name: \"User\"\n- name: \"Ticketsystem\"\n- name: \"Entries\"\n- name: \"Setting\"\n\npaths:\n  /activity/delete:\n    post:\n      summary: Delete an activity\n      tags:\n        - Activity\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/DeleteParameter'\n      responses:\n        '403':\n          description: Error Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenResponse'\n        '422':\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                refer:\n                  value:\n                    message: Dataset could not be removed. Other datasets refer to this one.\n                notExist:\n                  value:\n                    message: Dataset could not be removed.\n                    description: The ID does not exist\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessResponse'\n\n  /activity/save:\n    post:\n      summary: Create an activity\n      tags:\n        - Activity\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  example: Design\n                needsTicket:\n                  type: integer\n                  enum: [1]\n                  example: 1\n                factor:\n                  type: integer\n                  example: 1\n              required:\n              - name\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '406':\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: string\n                example: The activity name provided already exists.\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - type: string\n                    - type: boolean\n                    - type: string\n                description: id, name, needsTicket, factor\n              example: [1,\"Design\",true,\"1\"]\n\n  /contract/delete:\n    post:\n      summary: Delete a contract\n      tags:\n        - Contract\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/DeleteParameter'\n      responses:\n        '403':\n          description: Error Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenResponse'\n        '422':\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: Dataset could not be removed.\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessResponse'\n\n  /contract/save:\n    post:\n      summary: Create a contract\n      tags:\n        - Contract\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Contract'\n      responses:\n        '406':\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: string\n                example: Please enter a valid user.\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  example: 1\n                  description: contract-id\n\n  /controlling/export/{userid}/{year}/{month}/{project}/{customer}/{billable}:\n   get:\n      summary: Export monthly bill\n      tags:\n        - Data\n      parameters:\n      - in: path\n        name: userid\n        required: true\n        schema:\n          type: integer\n          example: 1\n      - in: path\n        name: year\n        required: true\n        schema:\n          type: integer\n          example: 2019\n      - in: path\n        name: month\n        required: true\n        schema:\n          type: integer\n          default: 0\n          example: 10\n      - in: path\n        name: project\n        required: true\n        schema:\n          type: integer\n          default: 0\n          example: 1\n      - in: path\n        name: customer\n        required: true\n        schema:\n          type: integer\n          default: 0\n          example: 1\n      - in: path\n        name: billable\n        required: true\n        schema:\n          type: integer\n          enum: [0,1]\n          example: 1\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '200':\n          description: Download file\n\n  /customer/delete:\n    post:\n      summary: Delete a customer\n      tags:\n        - Customer\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n             $ref: '#/components/schemas/DeleteParameter'\n      responses:\n        '403':\n          description: Error Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenResponse'\n        '422':\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                refer:\n                  value:\n                    message: Dataset could not be removed. Other datasets refer to this one.\n                notExist:\n                  value:\n                    message: Dataset could not be removed.\n                    description: The ID does not exist\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessResponse'\n\n  /customer/save:\n    post:\n      summary: Create a customer\n      tags:\n        - Customer\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Customer'\n      responses:\n        '500':\n          description: Error Internal Server Error\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - type: integer\n                    - type: string\n                    - type: integer\n                    - type: integer\n                    - type: array\n                      items:\n                        type: string\n                  description: id, name of the customer, active, global ,team-id\n                example: [1,\"Kunde1\",\"1\",\"1\",[\"1\"]]\n\n  /export/{days}:\n    get:\n      summary: Export data\n      tags:\n        - Data\n      parameters:\n      - in: path\n        name: days\n        schema:\n          type: integer\n          default: 10000\n        required: true\n      responses:\n        '500':\n          description: Error\n        '200':\n          description: Download file\n\n  /getActivities:\n    get:\n      summary: Returns a list of all activities\n      tags:\n        - Activity\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    activity:\n                      type: object\n                      properties:\n                        id:\n                          type: integer\n                          example: 1\n                        name:\n                          type: string\n                          example: Design\n                        needsTicket:\n                          type: boolean\n                          example: true\n                        factor:\n                          type: integer\n                          example: 1\n\n  /getAllCustomers:\n    get:\n      summary: Returns a list of all customers\n      tags:\n        - Customer\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    customer:\n                      type: object\n                      $ref: '#/components/schemas/Customer'\n\n  /getAllPresets:\n    get:\n      summary: Returns a list of all presets\n      tags:\n        - Preset\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    preset:\n                      $ref: '#/components/schemas/Preset'\n\n  /getAllProjects:\n    get:\n      summary: Returns a list of all projects\n      tags:\n        - Project\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    project:\n                      $ref: '#/components/schemas/ProjectInfo'\n\n  /getAllTeams:\n    get:\n      summary: Returns a list of all teams\n      tags:\n        - Team\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    team:\n                      $ref: '#/components/schemas/Team'\n\n  /getAllUsers:\n    get:\n      summary: Returns a list of all users\n      tags:\n        - User\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users'\n\n  /getContracts:\n    get:\n      summary: Returns a list of all contracts\n      tags:\n        - Contract\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    contract:\n                      type: object\n                      $ref: '#/components/schemas/Contract'\n\n  /getCustomers:\n    get:\n      summary: Returns a list of all 'global' contracts\n      tags:\n        - Customer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    customer:\n                      type: object\n                      properties:\n                        id:\n                          type: integer\n                          example: \"2\"\n                        name:\n                          type: string\n                          example: Kunde2\n                        active:\n                          type: string\n                          example: \"2\"\n\n  /getData:\n    get:\n      summary: Returns a list of all entries\n      tags:\n        - Data\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DaysSuccessResponse'\n\n  /getData/days/{days}:\n    get:\n      summary: Returns all entries for the number of days you choose\n      tags:\n        - Data\n      parameters:\n      - in: path\n        name: days\n        schema:\n          type: integer\n        required: true\n        example: \"3\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DaysSuccessResponse'\n\n  /getProjects:\n    get:\n      summary: Returns a list of all projects with a \"global\" customer\n      tags:\n        - Project\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    project:\n                      $ref: '#/components/schemas/ProjectInfo'\n\n  /getSummary:\n    get:\n      summary: Returns a summary about the customer, project,activity and ticket\n      tags:\n        - Summary\n      responses:\n        '200':\n          description: OK\n          content:\n              application/json:\n                schema:\n                  type: object\n                  properties:\n                    customer:\n                      $ref: '#/components/schemas/SummaryInfo'\n                    project:\n                      $ref: '#/components/schemas/SummaryInfo'\n                    activity:\n                      $ref: '#/components/schemas/SummaryInfo'\n                    ticket:\n                      $ref: '#/components/schemas/SummaryInfo'\n\n  /getTicketSystems:\n    get:\n      summary: Returns information about the ticket system\n      tags:\n        - Ticketsystem\n      responses:\n        '500':\n          description: Error\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    ticketSystem:\n                      type: object\n                      $ref: '#/components/schemas/TicketSystem'\n\n  /getTimeSummary:\n    get:\n      summary: Return a time summary for an entry\n      tags:\n        - Summary\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  today:\n                    $ref: '#/components/schemas/TimeInfo'\n                  week:\n                    $ref: '#/components/schemas/TimeInfo'\n                  month:\n                    $ref: '#/components/schemas/TimeInfo'\n\n  /getTicketTimeSummary/{ticket}:\n   get:\n      summary: Get time summary for a ticket\n      tags:\n        - Data\n      parameters:\n      - in: path\n        name: ticket\n        required: true\n        schema:\n          type: string\n          example: \"TIM-1\"\n      responses:\n        '404':\n          description: Ticket not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TicketInformationNotFound'\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_time:\n                    type: object\n                    properties:\n                    $ref: '#/components/schemas/Time'\n                  activities:\n                    type: object\n                    properties:\n                      additionalProperties:\n                        type: object\n                        properties:\n                        $ref: '#/components/schemas/Time'\n                  users:\n                    type: object\n                    properties:\n                      additionalProperties:\n                        type: object\n                        properties:\n                        $ref: '#/components/schemas/Time'\n\n  /getUsers:\n    get:\n      summary: Returns a list of users without teams\n      tags:\n        - User\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users'\n\n  /interpretation/activity:\n    get:\n      summary: Data for the 'effort by activity' diagram\n      tags:\n        - Activity\n      parameters:\n        - $ref: '#/components/parameters/datestart'\n        - $ref: '#/components/parameters/dateend'\n        - $ref: '#/components/parameters/customer'\n        - $ref: '#/components/parameters/project'\n        - $ref: '#/components/parameters/team'\n        - $ref: '#/components/parameters/user'\n        - $ref: '#/components/parameters/activity'\n        - $ref: '#/components/parameters/ticket'\n        - $ref: '#/components/parameters/description'\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '406':\n          description: Error Not Acceptable\n          content:\n            application/json:\n              schema:\n                type: string\n                example: You need to specify at least customer, project, ticket, user or month and year.\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: integer\n                  $ref: '#/components/schemas/ChartDataSuccessResponse'\n\n  /interpretation/customer:\n    get:\n      summary: Data for the 'effort by customer' diagram\n      tags:\n        - Customer\n      parameters:\n        - $ref: '#/components/parameters/datestart'\n        - $ref: '#/components/parameters/dateend'\n        - $ref: '#/components/parameters/customer'\n        - $ref: '#/components/parameters/project'\n        - $ref: '#/components/parameters/team'\n        - $ref: '#/components/parameters/user'\n        - $ref: '#/components/parameters/activity'\n        - $ref: '#/components/parameters/ticket'\n        - $ref: '#/components/parameters/description'\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '406':\n          description: Error Not Acceptable\n          content:\n            application/json:\n              schema:\n                type: string\n                example: You need to specify at least customer, project, ticket, user or month and year.\n\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                  $ref: '#/components/schemas/ChartDataSuccessResponse'\n\n  /interpretation/entries:\n    get:\n      summary: Data for the 'last entries' diagram\n      tags:\n        - Entries\n      parameters:\n        - $ref: '#/components/parameters/datestart'\n        - $ref: '#/components/parameters/dateend'\n        - $ref: '#/components/parameters/customer'\n        - $ref: '#/components/parameters/project'\n        - $ref: '#/components/parameters/team'\n        - $ref: '#/components/parameters/user'\n        - $ref: '#/components/parameters/activity'\n        - $ref: '#/components/parameters/re_ticket'\n        - $ref: '#/components/parameters/description'\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '406':\n          description: Error Not Acceptable\n          content:\n            application/json:\n              schema:\n                type: string\n                example: You need to specify at least customer, project, ticket, user or month and year.\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    entry:\n                      type: object\n                      properties:\n                        id:\n                          type: integer\n                        date:\n                          type: string\n                        start:\n                          type: string\n                        end:\n                          type: string\n                        user:\n                          type: integer\n                        customer:\n                          type: integer\n                        project:\n                          type: integer\n                          nullable: true\n                        activity:\n                          type: integer\n                          nullable: true\n                        description:\n                          type: string\n                        ticket:\n                          type: integer\n                        duration:\n                          type: string\n                        durationString:\n                          type: string\n                        class:\n                          type: string\n                        worklog:\n                          type: string\n                          nullable: true\n                        quota:\n                          type: string\n\n  /interpretation/project:\n    get:\n      summary: Data for the 'effort by project' diagram\n      tags:\n        - Project\n      parameters:\n        - $ref: '#/components/parameters/datestart'\n        - $ref: '#/components/parameters/dateend'\n        - $ref: '#/components/parameters/customer'\n        - $ref: '#/components/parameters/project'\n        - $ref: '#/components/parameters/team'\n        - $ref: '#/components/parameters/user'\n        - $ref: '#/components/parameters/activity'\n        - $ref: '#/components/parameters/ticket'\n        - $ref: '#/components/parameters/description'\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '406':\n          description: Error Not Acceptable\n          content:\n            application/json:\n              schema:\n                type: string\n                example: You need to specify at least customer, project, ticket, user or month and year.\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                  $ref: '#/components/schemas/ChartDataSuccessResponse'\n\n  /interpretation/ticket:\n    get:\n      summary: Data for the 'effort by ticket' diagram\n      tags:\n        - Ticketsystem\n      parameters:\n        - $ref: '#/components/parameters/datestart'\n        - $ref: '#/components/parameters/dateend'\n        - $ref: '#/components/parameters/customer'\n        - $ref: '#/components/parameters/project'\n        - $ref: '#/components/parameters/team'\n        - $ref: '#/components/parameters/user'\n        - $ref: '#/components/parameters/activity'\n        - $ref: '#/components/parameters/ticket'\n        - $ref: '#/components/parameters/description'\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '406':\n          description: Error Not Acceptable\n          content:\n            application/json:\n              schema:\n                type: string\n                example: You need to specify at least customer, project, ticket, user or month and year.\n\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                  $ref: '#/components/schemas/ChartDataSuccessResponse'\n\n  /interpretation/time:\n    get:\n      summary: Data for the 'Hours - Day' diagram\n      tags:\n        - Entries\n      parameters:\n        - $ref: '#/components/parameters/datestart'\n        - $ref: '#/components/parameters/dateend'\n        - $ref: '#/components/parameters/customer'\n        - $ref: '#/components/parameters/project'\n        - $ref: '#/components/parameters/team'\n        - $ref: '#/components/parameters/user'\n        - $ref: '#/components/parameters/activity'\n        - $ref: '#/components/parameters/ticket'\n        - $ref: '#/components/parameters/description'\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '406':\n          description: Error Not Acceptable\n          content:\n            application/json:\n              schema:\n                type: string\n                example: You need to specify at least customer, project, ticket, user or month and year.\n\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                      format: date\n                      example: \"19-11-18\"\n                    day:\n                      type: string\n                      example: \"18.11\"\n                    hours:\n                      type: number\n                      example: 11.9\n                    quota:\n                      type: string\n                      example: \"100.00%\"\n\n  /interpretation/user:\n    get:\n      summary: Time evaluation of users\n      tags:\n        - User\n      parameters:\n        - $ref: '#/components/parameters/datestart'\n        - $ref: '#/components/parameters/dateend'\n        - $ref: '#/components/parameters/customer'\n        - $ref: '#/components/parameters/project'\n        - $ref: '#/components/parameters/team'\n        - $ref: '#/components/parameters/user'\n        - $ref: '#/components/parameters/activity'\n        - $ref: '#/components/parameters/ticket'\n        - $ref: '#/components/parameters/description'\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '406':\n          description: Error Not Acceptable\n          content:\n            application/json:\n              schema:\n                type: string\n                example: You need to specify at least customer, project, ticket, user or month and year.\n\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                  $ref: '#/components/schemas/ChartDataSuccessResponse'\n\n  /login:\n     post:\n      summary: login\n      tags:\n        - User\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  example: tinatest\n                password:\n                  type: string\n                  format: password\n                  example: abc1234\n                loginCookie:\n                  type: boolean\n                  example: true\n              required:\n                - username\n                - password\n      responses:\n        '200':\n          description: OK\n\n  /logout:\n    get:\n      summary: Logout\n      tags:\n        - User\n      responses:\n         '200':\n          description: OK\n\n  /team/delete:\n    post:\n      summary: Delete a team\n      tags:\n        - Team\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n             $ref: '#/components/schemas/DeleteParameter'\n      responses:\n        '403':\n          description: Error Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenResponse'\n        '422':\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                  refer:\n                    value:\n                      message: Dataset could not be removed. Other datasets refer to this one.\n                  notExist:\n                    value:\n                      message: Dataset could not be removed.\n                      description: The ID does not exist\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessResponse'\n\n  /ticketsystem/delete:\n    post:\n      summary: Delete the ticketsystem by its ID\n      tags:\n        - Ticketsystem\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/DeleteParameter'\n      responses:\n        '403':\n          description: Error Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenResponse'\n        '422':\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                refer:\n                  value:\n                    message: Dataset could not be removed. Other datasets refer to this one.\n                notExist:\n                  value:\n                    message: Dataset could not be removed.\n                    description: The ID does not exist\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessResponse'\n\n  /tracking/bulkentry:\n    post:\n      summary: Create a bulk entry\n      tags:\n        - Entries\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                startdate:\n                  type: string\n                  format: date-time\n                  example: \"2019-11-23T00:00:00\"\n                enddate:\n                  type: string\n                  format: date-time\n                  example: \"2019-11-24T00:00:00\"\n                starttime:\n                  type: string\n                  format: date-time\n                  example: \"2008-01-01T08:00:00\"\n                endtime:\n                  type: string\n                  format: date-time\n                  example: \"2008-01-01T16:00:00\"\n                skipweekend:\n                  type: integer\n                  example: 1\n                skipholidays:\n                  type: integer\n                  example: 1\n                preset:\n                  type: integer\n                  example: 11\n              required:\n                - starttime\n                - preset\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '406':\n          description: Error\n          content:\n           application/json:\n              schema:\n                type: string\n              examples:\n                duration:\n                  value: Duration must be greater than 0!\n                preset:\n                  value: Preset not found\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n                example: All entries have been saved.\n\n  /tracking/delete:\n    post:\n      summary: Delete an entry\n      tags:\n        - Entries\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/DeleteParameter'\n      responses:\n        '500':\n          description: Internal Server Error\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessResponse'\n\n  /preset/delete:\n    post:\n      summary: Delete a preset\n      tags:\n        - Preset\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/DeleteParameter'\n      responses:\n        '403':\n          description: Error Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenResponse'\n        '422':\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: Dataset could not be removed.\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessResponse'\n\n  /preset/save:\n    post:\n      summary: Create a preset\n      tags:\n        - Preset\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              $ref: '#/components/schemas/Preset'\n      responses:\n        '403':\n          description: Error Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenResponse'\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    example: 5\n                  name:\n                    type: string\n                    example: Urlaub\n                  customer:\n                    type: integer\n                    example: 2\n                  project:\n                    type: integer\n                    example: 1\n                  activity:\n                    type: integer\n                    example: 3\n                  description:\n                    type: string\n                    example: Urlaubsvorlage\n\n  /project/delete:\n    post:\n      summary: Delete a project\n      tags:\n        - Project\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n             $ref: '#/components/schemas/DeleteParameter'\n      responses:\n        '403':\n          description: Error Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenResponse'\n        '422':\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                refer:\n                  value:\n                    message: Dataset could not be removed. Other datasets refer to this one.\n                notExist:\n                  value:\n                    message: Dataset could not be removed.\n                    description: The ID does not exist\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessResponse'\n\n  /project/save:\n    post:\n      summary: Create a project\n      tags:\n        - Project\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/ProjectInfo'\n      responses:\n        '403':\n          description: Error Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenResponse'\n        '406':\n          description: Error Not Acceptable\n          content:\n            application/json:\n              schema:\n                type: string\n              examples:\n                customer:\n                  value: \"Please choose a customer\"\n                valid:\n                  value: \"Please provide a valid ticket prefix with only capital letters.\"\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - type: integer\n                    - type: string\n                    - type: integer\n                    - type: string\n                description: id, name, customer, jiraId\n                example: [1,\"TestProject\",1,\"TIM\"]\n\n  /settings/save:\n    post:\n      summary: Update settings\n      tags:\n        - Setting\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                locale:\n                  type: string\n                  enum: [de, en, es, fr, ru]\n                  example: de\n                show_empty_line:\n                  type: string\n                  default: \"0\"\n                  enum: [\"1\"]\n                  description: Ja (1) Nein (-)\n                  example: \"1\"\n                suggest_time:\n                  type: string\n                  default: \"0\"\n                  enum: [\"1\"]\n                  description: Ja (1) Nein (-)\n                  example: \"1\"\n                show_future:\n                  type: string\n                  default: \"0\"\n                  enum: [\"1\"]\n                  description: Ja (1) Nein (-)\n                  example: \"1\"\n              required:\n                - locale\n                - show_empty_line\n                - suggest_time\n                - show_future\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                  settings:\n                    type: object\n                    properties:\n                      show_empty_line:\n                        type: string\n                        default: \"0\"\n                        enum: [\"1\"]\n                        description: Ja (1) Nein (-)\n                        example: \"1\"\n                      suggest_time:\n                        type: string\n                        default: \"0\"\n                        enum: [\"1\"]\n                        description: Ja (1) Nein (-)\n                        example: \"1\"\n                      show_future:\n                        type: string\n                        default: \"0\"\n                        enum: [\"1\"]\n                        description: Ja (1) Nein (-)\n                        example: \"1\"\n                      user_id:\n                        type: string\n                        example: \"1\"\n                      user_name:\n                        type: string\n                        example: \"1\"\n                      locale:\n                        type: string\n                        enum: [de, en, es, fr, ru]\n                        example: de\n                  locale:\n                    type: string\n                    enum: [de, en, es, fr, ru]\n                    example: de\n                  message:\n                    type: string\n                    example: The configuration has been successfully saved.\n\n  /status/check:\n    get:\n      summary: Check the login status\n      tags:\n      - Setting\n      responses:\n         '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  loginStatus:\n                    type: boolean\n                    example: true\n\n  /status/page:\n    get:\n      summary: Display login status\n      tags:\n        - Setting\n      responses:\n         '200':\n          description: OK\n\n  /syncentries/jira:\n    get:\n      summary: Sync entries (Jira)\n      tags:\n        - Ticketsystem\n      responses:\n         '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n         '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  value:\n                    type: string\n                example: \"Name of the Ticketsystem | Username: error (JiraApi: Could not parse RSA certificate)\"\n\n  /team/save:\n    post:\n      summary: Create a team\n      tags:\n        - Team\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Team'\n      responses:\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '406':\n          description: Error Not Acceptable\n          content:\n            application/json:\n              schema:\n                type: string\n                example: Please provide a valid user as team leader.\n\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - type: integer\n                    - type: string\n                    - type: integer\n                  description: id, name, lead_user_id\n                example: [1,\"Backend\",1]\n\n  /ticketsystem/save:\n    post:\n      summary: Create a ticketsystem\n      tags:\n        - Ticketsystem\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TicketSystem'\n      responses:\n        '403':\n          description: Error Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenResponse'\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/TicketSystem'\n\n  /tracking/save:\n    post:\n      summary: Create an entry\n      tags:\n        - Entries\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                date:\n                  type: string\n                  format: date-time\n                  example: \"2019-11-22T00:00:00\"\n                start:\n                  type: string\n                  format: date-time\n                  example: \"2019-11-22T09:55:00\"\n                end:\n                  type: string\n                  format: date-time\n                  example: \"2019-11-22T13:25:00\"\n                user:\n                  type: integer\n                  example: 1\n                customer:\n                  type: integer\n                  example: 1\n                project:\n                  type: integer\n                  example: 7\n                activity:\n                  type: integer\n                  example: 3\n                description:\n                  type: string\n                  example: Button hinzugefügt\n                ticket:\n                  type: string\n                  example: TIM-1\n                duration:\n                  type: string\n                  format: date-time\n                  example: \"1899-12-31T03:30:00\"\n                class:\n                  type: integer\n                  example: 0\n              required:\n                - start\n                - project\n      responses:\n        '500':\n          description: Error\n        '401':\n          description: Error Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedResponse'\n        '406':\n          description: Error\n          content:\n           application/json:\n              schema:\n                type: string\n              example:\n                  value: Duration must be greater than 0!\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: object\n                    properties:\n                      id:\n                        type: integer\n                      date:\n                        type: string\n                        example: 22\\/11\\/2019\n                      start:\n                        type: string\n                        example: \"09:55\"\n                      end:\n                        type: string\n                        example: \"13:25\"\n                      user:\n                        type: integer\n                        example: 1\n                      customer:\n                        type: integer\n                        example: 1\n                      project:\n                        type: integer\n                        example: 7\n                      activity:\n                        type: integer\n                        nullable: true\n                        example: 3\n                      description:\n                        type: string\n                        example: Button hinzugef\\u00fcgt\n                      ticket:\n                        type: string\n                        example: TIM-1\n                      duration:\n                        type: integer\n                        example: 210\n                      durationString:\n                        type: string\n                        example: \"03:30\"\n                      class:\n                        type: integer\n                        example: 2\n                      worklog:\n                        type: string\n                        nullable: true\n                        example: null\n                  alert:\n                    type: string\n                    nullable: true\n                    example: null\n\n  /user/delete:\n    post:\n      summary: Delete an user\n      tags:\n        - User\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n             $ref: '#/components/schemas/DeleteParameter'\n      responses:\n        '403':\n          description: Error Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenResponse'\n        '422':\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                refer:\n                  value:\n                    message: Dataset could not be removed. Other datasets refer to this one.\n                notExist:\n                  value:\n                    message: Dataset could not be removed.\n                    description: The ID does not exist\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessResponse'\n\n  /user/save:\n    post:\n      summary: Create an user\n      tags:\n        - User\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '403':\n          description: Error Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenResponse'\n        '406':\n          description: Error Not Acceptable\n          content:\n            application/json:\n              schema:\n                type: string\n                example: Please provide a valid user name with at least 3 letters.\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - type: integer\n                    - type: string\n                    - type: string\n                    - type: string\n                description: id, username, abbr, type\n                example: [16,\"tinatest\",\"TINA\",\"DEV\"]\n\n\ncomponents:\n  schemas:\n\n    ChartDataSuccessResponse:\n      type: object\n      properties:\n        name:\n          type: string\n          example: \"Kunde1\"\n          description: display the name of the user/customer/projekt/activity\n        hours:\n          type: number\n          example: 11.9\n        quota:\n          type: string\n          example: \"100.00%\"\n\n    Contract:\n      type: object\n      properties:\n        user_id:\n          type: integer\n          example: 1\n        start:\n          type: string\n          format: date\n          example: \"2019-11-01\"\n        end:\n          type: string\n          format: date\n          example: \"2019-11-30\"\n        hours_0:\n          type: integer\n          description: Sunday\n          example: 1\n        hours_1:\n          type: integer\n          description: Monday\n          example: 8\n        hours_2:\n          type: integer\n          description: Tuesday\n          example: 8\n        hours_3:\n          type: integer\n          description: Wednesday\n          example: 8\n        hours_4:\n          type: integer\n          description: Thursday\n          example: 7\n        hours_5:\n          type: integer\n          description: Friday\n          example: 8\n        hours_6:\n          type: integer\n          description: Saturday\n          example: 1\n      required:\n        - user_id\n        - start\n\n    Customer:\n      type: object\n      properties:\n        name:\n          type: string\n          description: name with at least 3 letters\n          example: Kunde1\n        active:\n          type: integer\n          enum:\n            - 0\n            - 1\n          example: 1\n        global:\n          type: integer\n          enum:\n            - 0\n            - 1\n          example: 1\n        teams[]:\n          description: team id\n          type: string\n          example: 1\n      required:\n        - name\n\n    DaysSuccessResponse:\n      type: array\n      items:\n        type: object\n        properties:\n          entry:\n            type: object\n            properties:\n              date:\n                type: string\n                format: date\n                example: 18/11/2019\n              start:\n                type: string\n                example: \"12:00\"\n              end:\n                type: string\n                example: \"12:55\"\n              user:\n                type: integer\n                description: user id\n                example: 1\n              customer:\n                type: integer\n                description: customer id\n                example: 1\n              project:\n                type: integer\n                description: project id\n                example: 2\n              activity:\n                type: integer\n                example: 1\n              description:\n                type: string\n                example: Button hinzugefügt\n              ticket:\n                type: string\n                example: TIM-1\n              class:\n                type: integer\n                example: 4\n              duration:\n                type: string\n                example: \"00:55\"\n\n    DeleteParameter:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n      required:\n        - id\n\n    ErrorResponse:\n      type: object\n      properties:\n        message:\n          type: string\n\n    ForbiddenResponse:\n      type: object\n      properties:\n        message:\n          type: string\n          example: You are not allowed to perform this action.\n\n    Preset:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Urlaub\n        customer:\n          type: integer\n          description: customer ID\n          example: 2\n        project:\n          type: integer\n          description: project ID\n          example: 1\n        activity:\n          type: integer\n          description: activity ID\n          example: 3\n        description:\n          type: string\n          example: Urlaubsvorlage\n      required:\n        - name\n        - customer\n        - project\n        - activity\n\n    ProjectInfo:\n      type: object\n      properties:\n        name:\n          type: string\n          example: TestProject\n        jiraId:\n          type: string\n          example: \"TIM\"\n          description: Ticket prefix with only capital letters\n        ticket_system:\n          type: string\n          example: TestTicketSystem\n        customer:\n          type: string\n          example: \"1\"\n        active:\n          type: string\n          enum:\n          - \"0\"\n          - \"1\"\n          example: \"1\"\n        global:\n          type: string\n          enum:\n          - \"0\"\n          - \"1\"\n          example: \"1\"\n        estimation:\n          type: string\n          example: \"0\"\n        estimationText:\n          type: string\n          description: Estimated duration in minutes\n          example: 16m\n        billing:\n          type: string\n          enum:\n          - \"0\"\n          - \"1\"\n          - \"2\"\n          description: None (0), Time And Material(1), Fixed Price(2)\n          example: \"1\"\n        cost_center:\n          type: string\n          example: \"Kostenstelle\"\n        offer:\n          type: string\n          example: akzeptiert\n        project_lead:\n          type: string\n          example: \"2\"\n        technical_lead:\n          type: string\n          example: \"1\"\n        additionalInformationFromExternal:\n          type: string\n          enum:\n          - \"0\"\n          - \"1\"\n          example: \"1\"\n      required:\n        - name\n        - customer\n\n    SuccessResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n          example: true\n\n    SummaryInfo:\n      type: object\n      properties:\n        scope:\n          type: string\n          example: customer/project/ticket/activitys\n          description: name of the object\n        name:\n          type: string\n          example: Test\n        entries:\n          type: integer\n          example: 1\n        total:\n          type: integer\n          example: 1\n        own:\n          type: integer\n          example: 2\n        estimation:\n          type: integer\n          example: 1\n        quota:\n          type: integer\n          example: 1\n\n    Team:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Backend\n        lead_user_id:\n          type: integer\n          example: 2\n      required:\n        - lead_user_id\n\n    TicketSystem:\n      type: object\n      properties:\n        name:\n          type: string\n          example: TestTicketSystem\n        bookTime:\n          type: integer\n          enum: [0, 1]\n          example: 1\n        type:\n          type: string\n          enum:\n          - JIRA\n          - OTRS\n          example: JIRA\n        url:\n          type: string\n          example: https://test.TicketSystem.com\n        login:\n          type: string\n          example: tinatest\n        password:\n          type: string\n          example: test12345\n        publicKey:\n          type: string\n          example: publicKey\n        privateKey:\n          type: string\n          example: privateKey\n        ticketUrl:\n          type: string\n          nullable: true\n          example: https://test.TicketSystem.com/browse/%s\n        oauthConsumerKey:\n          type: string\n          nullable: true\n          example: key\n        oauthConsumerSecret:\n          type: string\n          nullable: true\n          example: SecretKey\n      required:\n        - name\n\n    TicketInformationNotFound:\n      type: string\n      example: \"There is no information available about this ticket.\"\n\n    Time:\n      type: object\n      properties:\n        time:\n          type: string\n          example: \"09:10\"\n        seconds:\n          type: integer\n          example: 33000\n\n    TimeInfo:\n      type: object\n      properties:\n        duration:\n          type: string\n          nullable: true\n          example: \"40\"\n        count:\n          type: boolean\n          example: true\n\n    UnauthorizedResponse:\n      type: object\n      properties:\n        message:\n          type: string\n          example: You need to login.\n\n    User:\n      type: object\n      properties:\n        username:\n          type: string\n          description: username with at least 3 letters\n          example: \"tinatest\"\n        type:\n          type: string\n          enum:\n            - DEV\n            - PL\n            - CTL\n          example: DEV\n        abbr:\n          type: string\n          nullable: true\n          description: abbreviation with at least 3 letters\n          example: TINA\n        locale:\n          type: string\n          enum:\n            - de\n            - en\n            - es\n            - fr\n            - ru\n          example: en\n        teams:\n          type: array\n          items:\n            type: string\n            description: team id\n          example: [\"1\"]\n      required:\n        - username\n        - abbr\n        - locale\n        - teams\n\n    Users:\n      type: array\n      items:\n        type: object\n        properties:\n          user:\n            type: object\n            $ref: '#/components/schemas/User'\n\n  parameters:\n\n    activity:\n      in: query\n      name: activity\n      schema:\n        type: integer\n        example: 1\n\n    customer:\n      in: query\n      name: customer\n      schema:\n        type: integer\n        example: 1\n\n    dateend:\n      in: query\n      name: dateend\n      schema:\n        type: string\n        format: date-time\n        example: \"2019-11-30T00:00:00\"\n\n    datestart:\n      in: query\n      name: datestart\n      schema:\n        type: string\n        format: date-time\n        example: \"2019-11-01T00:00:00\"\n\n    description:\n      in: query\n      name: description\n      schema:\n        type: string\n        example: \"Button hinzugefügt\"\n\n    project:\n      in: query\n      name: project\n      schema:\n        type: integer\n        example: 1\n\n    re_ticket:\n      in: query\n      name: ticket\n      schema:\n        type: string\n        example: \"TIM-1\"\n      required: true\n\n    team:\n      in: query\n      name: team\n      schema:\n        type: integer\n        example: 1\n\n    ticket:\n      in: query\n      name: ticket\n      schema:\n        type: string\n        example: \"TIM-1\"\n\n    user:\n      in: query\n      name: user\n      schema:\n        type: integer\n        example: 1\n      required: true\n",
			"canonicalURL": "/github.com/netresearch/timetracker@82d6c0133bac9c1a5a60a4382bfc5a3cfde66095/-/blob/web/api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/netresearch/timetracker/blob/82d6c0133bac9c1a5a60a4382bfc5a3cfde66095/web/api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: unexpected YAML kind 8"
}