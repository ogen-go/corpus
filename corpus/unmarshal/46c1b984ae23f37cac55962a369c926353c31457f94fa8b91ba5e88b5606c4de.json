{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kiwigrid/helm-charts"
		},
		"file": {
			"name": "ditto-api-1.yml",
			"size": 0,
			"path": "charts/ditto-digital-twins/openapi/ditto-api-1.yml",
			"byteSize": 123553,
			"content": "# Copyright (c) 2017 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Eclipse Public License 2.0 which is available at\n# http://www.eclipse.org/legal/epl-2.0\n#\n# SPDX-License-Identifier: EPL-2.0\nopenapi: 3.0.0\ninfo:\n  title: Eclipse Ditto HTTP API\n  description: JSON-based, REST-like API for Eclipse Ditto\n  version: \"1\"\nservers:\n  - url: https://ditto.eclipse.org/api/1\n    description: \"online Ditto Sandbox\"\n  - url: /api/1\n    description: \"local Ditto\"\ntags:\n  - name: Things\n    description: Manage every Thing\n  - name: Features\n    description: Structure the Features of your Things\n  - name: Things-Search\n    description: Find every Thing\n  - name: Messages\n    description: Talk with your Things\nsecurity:\n#  - Google:\n#    - openid\n  - basicAuth: []\n  - bearerAuth: []\npaths:\n  /things:\n    get:\n      summary: List all available Things\n      description: |-\n        Returns all Things passed in by the required parameter `ids`.\n\n        Optionally you can use field selectors (see parameter `fields`) to only get the specified fields.\n\n        To retrieve all Things the logged in user is allowed to read, please use the `GET /search/things` operation.\n      tags:\n        - Things\n      parameters:\n        - name: ids\n          in: query\n          description: Contains a comma separated list of `thingId`s to retrieve in one single request.\n          required: true\n          schema:\n            type: string\n        - $ref: '#/components/parameters/thingFieldsQueryParam'\n      responses:\n        '200':\n          description: The successfully completed request contains as its result the first 200 for the user available Things, sorted by their `thingId`.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Thing'\n        '400':\n          description: The request could not be completed. At least one of the defined query parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '414':\n          description: The request could not be completed due to an URI length exceeding 8k characters.\n    post:\n      summary: Create a new Thing\n      description: |-\n        Creates the Thing defined in the optional JSON body.\n\n        The ID of the created Thing is a UUID generated by the service with the default namespace `org.eclipse.ditto`.\n        Any `thingId`\n        specified in the request body is therefore ignored. The ACL of the created Thing must include at least one\n        entry with `READ`, `WRITE` and `ADMINISTRATE` permissions set to `true`.\n        If no ACL is provided, a default ACL with an entry for the authorized subject with all permissions set to\n        `true` will be created.\n      tags:\n        - Things\n      responses:\n        '201':\n          description: The Thing was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Thing resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Thing'\n        '400':\n          description: |-\n            The request could not be completed. The JSON of the Thing to be created was invalid or the `thingId` was\n            wrongly set in the request body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewThing'\n            example: {}\n        description: |-\n          JSON representation of the Thing to be created.\n\n\n          Use the placeholder `{{ request:subjectId }}` in order to let the backend insert the authenticated subjectId of the HTTP request.\n  /things/{thingId}:\n    get:\n      summary: Retrieve a specific Thing\n      description: |-\n        Returns the Thing identified by the `thingId` path parameter.\n        The response includes all details about the Thing.\n        Optionally you can use field selectors (see parameter `fields`) to only get the specified fields.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/thingFieldsQueryParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The request successfully returned the specific Thing.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Thing'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or one of the defined query parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update a Thing with a specified ID\n      description: |-\n        Create or update the Thing specified by the `thingId` path parameter and the optional JSON body. The `thingId` has to:\n\n          * contain a mandatory namespace prefix (java package notation + `:` colon) - periods (`.`) may be used in namespace but not as first or last character\n          * conform to RFC-2396 (URI)\n\n        #### Valid examples\n\n          * `org.eclipse.ditto.myproject:myFridge1`\n          * `mynamespace:myFridge1`\n\n        #### Invalid examples\n\n          * `42:myFridge1`\n          * `.foo:myFridge1`\n          * `bar.:myFridge1`\n\n        The ID of a Thing can't be changed after creation. Any `thingId` specified in the request body is therefore ignored.\n\n        ### Creation of a new Thing\n\n        The ACL of the created Thing must include at least one entry with `READ`, `WRITE` and `ADMINISTRATE` permissions set to `true`.\n        If no ACL is provided, a default ACL with an entry for the authorized subject with all permissions set to `true` will be created.\n\n\n        Use the placeholder `{{ request:subjectId }}` in order to let the backend insert the authenticated subjectId of the HTTP request.\n\n        ### Permissions for updating an existing Thing\n\n        For updating an existing Thing the authorized subject has to have the `WRITE` permission.\n        If the new Thing to update contains an `acl` entry, the authorized subject additionally has to have the `ADMINISTRATE` permission.\n        For authorized subjects which don't have the `ADMINISTRATE` permission, the complete Thing may be updated if the `acl` entry is not set.\n\n        ### Partially updating an existing Thing\n\n        When updating an existing Thing already containing `attributes`, `acl` or `features` the already existing fields\n        must not explicitly be provided again. For this \"PUT Thing\" request (and only for this top-level update on the\n        Thing) the top-level field to update is merged with the existing top-level fields of the Thing.\n\n\n        For example: A Thing already exists with this content:\n\n        ```\n\n        {\n          \"thingId\": \"namespace:thing-name\",\n          \"acl\": {...},\n          \"attributes\": {\n            \"foo\": 1\n          },\n          \"features\": {...}\n        }\n\n        ```\n\n        The Thing's `attributes` may be modified without having to pass the `acl` or the `features` in again. The content\n        of the request's body would be sufficient for updating the `attributes`:\n\n        ```\n\n        {\n          \"attributes\": {\n            \"foo\": 2,\n            \"bar\": false\n          }\n        }\n\n        ```\n\n        The `acl` and `features` of the Thing will not be overwritten, the Thing will be merged as one would expect it:\n\n        ```\n\n        {\n          \"thingId\": \"namespace:thing-name\",\n          \"acl\": {...},\n          \"attributes\": {\n            \"foo\": 2,\n            \"bar\": false\n          },\n          \"features\": {...}\n        }\n\n        ```\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Thing was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Thing resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Thing'\n        '204':\n          description: The Thing was successfully modified.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON of the Thing to be created/modified was either invalid or did contain a `thingId` which did not match the ID in the URL.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For modifying an existing Thing `WRITE` permission is required.\n\n            If the `acl` of the Thing should be updated as well, the permission `ADMINISTRATE` is additionally required.\n            The complete Thing without `acl` can however be updated with `WRITE` permission if the body does not contain an `acl` entry.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewThing'\n            example: {}\n        description: |-\n          JSON representation of the Thing to be modified.\n\n\n          Use the placeholder `{{ request:subjectId }}` in order to let the backend insert the authenticated subjectId of the HTTP request.\n    delete:\n      summary: Delete a specific Thing\n      description: |-\n        Deletes the Thing identified by the `thingId` path parameter.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Thing was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For deleting an existing Thing `WRITE` and `ADMINISTRATE` permissions are required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n  /things/{thingId}/acl:\n    get:\n      summary: Retrieve the complete ACL of a Thing\n      description: |-\n        Returns the Access Control List (ACL) of the Thing identified by the `thingId` path parameter.\n        The response contains the ACL as JSON object containing a key for each subject having ACL permissions.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The request successfully returned completed and returned is the Access Control List.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Acl'\n              example:\n                {\n                  \"authorizationSubject1\": {\n                    \"READ\": true,\n                    \"WRITE\": true,\n                    \"ADMINISTRATE\": true\n                  },\n                  \"authorizationSubjectN\": {\n                    \"READ\": true,\n                    \"WRITE\": true,\n                    \"ADMINISTRATE\": true\n                  }\n                }\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Modify the complete ACL of a Thing\n      description: |-\n        Modify the complete Access Control List (ACL) of the Thing identified by the `thingId` path parameter.\n\n        The ACL must include at least one entry with `READ`, `WRITE` and `ADMINISTRATE` permissions set to `true`.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Access Control List was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid, or no valid ACL JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For modifying the ACL of an existing Thing `ADMINISTRATE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Acl'\n            example:\n              {\n                \"{{ request:subjectId }}\":{\n                  \"READ\": true,\n                  \"WRITE\": true,\n                  \"ADMINISTRATE\": true\n                }\n              }\n        description: |-\n          JSON representation of the Access Control List (ACL).\n\n\n          Use the placeholder `{{ request:subjectId }}` in order to let the backend insert the authenticated subjectId of the HTTP request.\n        required: true\n  /things/{thingId}/acl/{authorizationSubject}:\n    get:\n      summary: Retrieve one ACL entry of a Thing for a specific subject\n      description: |-\n        Returns one Access Control List (ACL) entry of the Thing identified by the `thingId` path parameter and for the subject\n        identified by the `authorizationSubject` path parameter.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/authorizationSubjectPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The request successfully returned completed and returned is the ACL entry.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AclEntry'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID or the ACL entry was not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or modify one ACL entry of a Thing for a specific subject\n      description: |-\n        Create or modify the Access Control List (ACL) entry of the Thing identified by the `thingId` path parameter and for the subject\n        identified by the `authorizationSubject` path parameter.\n\n        An ACL entry must contain values for `READ`, `WRITE` and `ADMINISTRATE` permissions, all other permissions will be ignored.\n        The ACL must contain at least one entry with all permissions set to `true`.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/authorizationSubjectPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The ACL entry was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created ACL entry\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AclEntry'\n        '204':\n          description: The ACL entry was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid, or no valid ACL JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For modifying an ACL entry of an existing Thing `ADMINISTRATE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/AclEntry'\n    delete:\n      summary: Delete one ACL entry of a Thing for a specific subject\n      description: |-\n        Deletes the the Access Control List (ACL) entry of the Thing identified by the `thingId` path parameter and for the subject\n        identified by the `authorizationSubject` path parameter.\n\n        The ACL must contain at least one entry with all permissions set to `true`.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/authorizationSubjectPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The ACL entry was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For deleting an ACL entry of an existing Thing `ADMINISTRATE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/things/{thingId}/attributes':\n    get:\n      summary: List all Attributes of a specific Thing\n      description: |-\n        Returns all Attributes of the Thing identified by the `thingId` path parameter.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/attributesFieldsQueryParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The Attributes of the specific Thing were successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attributes'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update all Attributes of a specific Thing at once\n      description: |-\n        Create or update the Attributes of a Thing identified by the `thingId` path parameter at once.\n        The Attributes will be replaced by the request body's JSON.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Attributes were successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Attribute resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attributes'\n        '204':\n          description: The Attributes were successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid or was not a JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For modifying the Attributes of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Attributes'\n    delete:\n      summary: Delete all Attributes of a specific Thing at once\n      description: |-\n        Deletes all Attributes of the Thing identified by the `thingId` path parameter at once.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Attributes were successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n             For deleting all Attributes of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID or its Attributes were not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/things/{thingId}/attributes/{attributePath}':\n    get:\n      ummary: Retrieve a specific Attribute of a specific Thing\n      description: |-\n        Returns a specific Attribute of the Thing identified by the `thingId` path parameter. The Attribute (JSON) can be referenced hierarchically by applying JSON Pointer notation (RFC-6901), e.g.:\n        `/things/{thingId}/attributes/address/city` in order to retrieve the `city` field of an `address` object.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/attributePathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The Attribute was successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID or the Attribute at the specified path was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update a specific Attribute of a specific Thing\n      description: |-\n        Create or update a specific Attribute of the Thing identified by the `thingId` path parameter.\n        The Attribute will be created if it doesn't exist or else updated. The Attribute (JSON) can be referenced hierarchically by applying JSON Pointer notation (RFC-6901), e.g.:\n        `/things/{thingId}/attributes/address/city` in order to create/update the `city` field of an `address` object.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/attributePathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Attribute was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Attribute resource\n              schema:\n                type: string\n        '204':\n          description: The Attribute was successfully modified.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying a single Attribute of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Value'\n    delete:\n      summary: Delete a specific Attribute of a specific Thing\n      description: |-\n        Deletes a specific Attribute of the Thing identified by the `thingId` path parameter. The Attribute (JSON) can be referenced hierarchically by applying JSON Pointer notation (RFC-6901), e.g.:\n        `/things/{thingId}/attributes/address/city` in order to delete the `city` field of an `address` object.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/attributePathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Attribute was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For deleting a single Attribute of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID or the Attribute at the specified path was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  /things/{thingId}/features:\n    get:\n      summary: List all Features of a specific Thing\n      description: |-\n        Returns all Features of the Thing identified by the `thingId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featuresFieldsQueryParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The list of Features of the specific Thing were successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Features'\n              example:\n                {\n                  \"featureId1\": {\n                    \"definition\": [ \"namespace:definition1:v1.0\" ],\n                    \"properties\": { \"property1\": \"value1\" }\n                  },\n                  \"featureId2\": {\n                    \"definition\": [ \"namespace:definition2:v1.0\" ],\n                    \"properties\": { \"property2\": \"value2\" }\n                  }\n                }\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined query parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found or the Features have not been defined.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or modify all Features of a specific Thing at once\n      description: |-\n        Create or modify the Features of a Thing identified by the `thingId` path parameter at once. The list of Features will be replaced by the request body's JSON.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Features were successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Features resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Features'\n              example:\n                {}\n        '204':\n          description: The Features were successfully modified.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid or was not a JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For modifying all features of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Features'\n            example: {}\n        description: |-\n          JSON object of the Features to be modified at once. It can be also `null` or an empty object `{}` (all features cleared).\n        required: true\n    delete:\n      summary: Delete all Features of a specific Thing\n      description: |-\n        Deletes all features of the Thing identified by the `thingId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Features were successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For deleting all features of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found or the Features have not been defined.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/things/{thingId}/features/{featureId}':\n    get:\n      summary: Retrieve a specific Feature of a specific Thing\n      description: |-\n        Returns a specific Feature identified by the `featureId` path parameter of the Thing identified by the `thingId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/featureFieldsQueryParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The Feature was successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feature'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined query parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID or the Feature with the specified `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or modify a specific Feature of a specific Thing\n      description: |-\n        Create or modify a specific Feature identified by the `featureId` path parameter of the Thing identified by the `thingId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Feature was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Feature resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feature'\n        '204':\n          description: The Feature was successfully modified.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON of the Feature to be created was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For modifying a single feature of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Feature'\n            example: {}\n        description: |-\n          JSON representation of the Feature to be created/modified. It can also be `null` or an empty object `{}`.\n        required: true\n    delete:\n      summary: Delete a specific Feature of a specific Thing\n      description: |-\n        Deletes a specific Feature identified by the `featureId` path parameter of the Thing identified by the `thingId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Feature was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For deleting a single feature of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID or the Feature at the specified path was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/things/{thingId}/features/{featureId}/definition':\n    get:\n      summary: List the Definition of a Feature\n      description: |-\n        Returns the complete Definition of the Feature identified by the `thingId` and\n        `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The Definition was successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureDefinition'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined query parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified Feature has no\n            Definition or the Thing with the specified `thingId` or the Feature\n            with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update the Definition of a Feature\n      description: |-\n        Create or update the complete Definition of a Feature identified by the `thingId`\n        and `featureId` path parameter at once. The Definition will be replaced\n        by the request body's JSON array.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Definition was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Definition resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureDefinition'\n        '204':\n          description: The Definition was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For modifying the Definition of an existing Feature `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Thing or the Feature with\n            the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FeatureDefinition'\n            example: {}\n        description: |-\n          JSON array of the complete Definition to be updated. Consider that\n          the value has to be a JSON array or `null`. The content of the JSON array\n          are strings in the format `\"namespace:name:version\"` which is enforced.\n        required: true\n    delete:\n      summary: Delete the Definition of a Feature\n      description: |-\n        Deletes the complete Definition of the Feature identified by the `thingId` and\n        `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Definition was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For deleting the Definition of an existing Feature `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified Feature has no\n            Definition or the Thing with the specified `thingId` or the Feature\n            with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/things/{thingId}/features/{featureId}/properties':\n    get:\n      summary: List all Properties of a Feature.\n      description: |-\n        Returns all Properties of the Feature identified by the `thingId` and `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/propertiesFieldsQueryParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The Properties were successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureProperties'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined query parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The specified Feature has no Properties or the Thing with the specified `thingId` or the Feature with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update all Properties of a Feature at once.\n      description: |-\n        Create or update the Properties of a Feature identified by the `thingId` and `featureId` path parameter at once.\n        The Properties will be replaced by the request body's JSON.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Properties were successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureProperties'\n        '204':\n          description: The Properties were successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For modifying the Properties of an existing Feature `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing or the Feature with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FeatureProperties'\n            example: {}\n        description: |-\n          JSON object of all Properties to be updated at once. Consider that the value has to be a JSON object or `null`. We strongly recommend to use a restricted set of characters for the key (identifier). Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n        required: true\n    delete:\n      summary: Delete all Properties of a Feature.\n      description: |-\n        Deletes all Properties of the Feature identified by the `thingId` and `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Properties were successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For deleting the Properties of an existing Feature `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The specified Feature has no Properties or the Thing with the specified `thingId` or the Feature with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  /things/{thingId}/features/{featureId}/properties/{propertyPath}:\n    get:\n      summary: Retrieve a specific Property of a Feature.\n      description: |-\n        Returns the Property of the Feature identified by the `thingId` and `featureId` path parameter. The Property (JSON) can be referenced hierarchically by applying JSON Pointer notation (RFC-6901), e.g.:\n        `/things/{thingId}/features/{featureId}/properties/location/latitude` in order to retrieve the `latitude` field of an `location` Property.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/propertyPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The Property was successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The specified Property or the Thing with the specified `thingId` or the Feature with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update a specific Property of a Feature.\n      description: |-\n        Create or update a specific Property of a Feature identified by the `thingId` and `featureId` path parameter.\n        The Property will be created if it doesn't exist or else updated. The Property (JSON) can be referenced hierarchically by applying JSON Pointer notation (RFC-6901), e.g.:\n        `/things/{thingId}/features/{featureId}/properties/location/latitude` in order to create/update the `latitude` field of an `location` object.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/propertyPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Property was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n        '204':\n          description: The Property was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions.\n            For creating/updating a Property of an existing Feature `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing or the Feature with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Value'\n    delete:\n      summary: Delete a specific Property of a Feature.\n      description: |-\n        Deletes a specific Property of the Feature identified by the `thingId` and `featureId` path parameter.  The Property (JSON) can be referenced hierarchically by applying JSON Pointer notation (RFC-6901), e.g.:\n        `/things/{thingId}/features/{featureId}/properties/location/latitude` in order to delete the `latitude` field of an `location` Property.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/propertyPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Property was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The specified Property or the Thing with the specified `thingId` or the Feature with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  /things/{thingId}/inbox/claim:\n    post:\n      summary: Initiates claiming a specific Thing in order to gain access.\n      description: |-\n        Send a Claim message to the Thing identified by the `thingId` path\n        parameter in order to gain access to it. The Claim message is forwarded\n        together with the request body and `Content-Type` header to client(s)\n        which registered for Claim messages of the specific Thing.\n\n\n        The decision whether to grant access (by setting permissions) is\n        completely up to the client(s) which handle the Claim message.\n\n\n        The HTTP request blocks until a response to the issued Claim message is\n        available or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n        No special permissions are required to issue a Claim message.\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/messageClaimTimeoutParam'\n      responses:\n        '200':\n          description: The Claim message was processed successfully and the response body contains the custom response. The response body may contain arbitrary data chosen by the recipient. The response code defaults to `200` but may be chosen by the recipient too.\n        '204':\n          description: The Claim message was processed successfully and no custom response body was set. The response code defaults to `204` but may be chosen by the recipient.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined path parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '413':\n          $ref: '#/components/responses/messageTooLarge'\n        '429':\n          description: The user has sent too many requests in a given amount of time (\"rate limiting\").\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  /things/{thingId}/inbox/messages/{messageSubject}:\n    post:\n      summary: Send a message TO a specific Thing.\n      description: |-\n        Send a message with the subject `messageSubject` `TO` the Thing\n        identified by the `thingId` path parameter. The request body contains\n        the message payload and the `Content-Type` header defines its type. The\n        API does not provide any kind of acknowledgement that the message was\n        received by the Thing. In order to send a message, the user needs `WRITE`\n        permission at the Thing level.\n\n        The HTTP request blocks until a response to the message is available\n        or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n\n        In order to handle the message in a fire and forget manner, add\n        a query-parameter `timeout=0` to the request.\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/messageSubjectPathParam'\n        - $ref: '#/components/parameters/messageTimeoutParam'\n      responses:\n        '202':\n          description: The message was sent but not necessarly received by the Thing (fire and forget).\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined path parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller does not have `WRITE` permission at the Thing level.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '413':\n          $ref: '#/components/responses/messageTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  /things/{thingId}/outbox/messages/{messageSubject}:\n    post:\n      summary: Send a message FROM a specific Thing.\n      description: |-\n        Send a message with the subject `messageSubject` `FROM` the Thing\n        identified by the `thingId` path parameter. The request body contains\n        the message payload and the `Content-Type` header defines its type.\n        In order to send a message, the user needs `WRITE` permission at the\n        Thing level.\n\n        The HTTP request blocks until a response to the message is available\n        or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n\n        In order to handle the message in a fire and forget manner, add\n        a query-parameter `timeout=0` to the request.\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/messageSubjectPathParam'\n        - $ref: '#/components/parameters/messageTimeoutParam'\n      responses:\n        '202':\n          description: The message was sent (fire and forget).\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined path parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller does not have `WRITE` permission at the Thing level.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '413':\n          $ref: '#/components/responses/messageTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  /things/{thingId}/features/{featureId}/inbox/messages/{messageSubject}:\n    post:\n      summary: Send a message TO a specific Feature of a specific Thing.\n      description: |-\n        Send a message with the subject `messageSubject` `TO` the Feature\n        specified by the `featureId` and `thingId` path parameter. The request\n        body contains the message payload and the `Content-Type` header defines\n        its type. The API does not provide any kind of acknowledgement that the\n        message was received by the Feature. In order to send a message, the user needs `WRITE` permission at the Thing level.\n\n        The HTTP request blocks until a response to the message is available\n        or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n\n        In order to handle the message in a fire and forget manner, add\n        a query-parameter `timeout=0` to the request.\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/messageSubjectPathParam'\n        - $ref: '#/components/parameters/messageTimeoutParam'\n      responses:\n        '202':\n          description: The message was sent but not necessarly received by the Feature (fire and forget).\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined path parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller does not have `WRITE` permission at the Thing level.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '413':\n          $ref: '#/components/responses/messageTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  /things/{thingId}/features/{featureId}/outbox/messages/{messageSubject}:\n    post:\n      summary: Send a message FROM a specific Feature of a specific Thing.\n      description: |-\n        Send a message with the subject `messageSubject` `FROM` the Feature\n        specified by the `featureId` and `thingId` path parameter. The request\n        body contains the message payload and the `Content-Type` header defines\n        its type. In order to send a message, the user needs `WRITE` permission\n        at the Thing level.\n\n        The HTTP request blocks until a response to the message is available\n        or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n\n        In order to handle the message in a fire and forget manner, add\n        a query-parameter `timeout=0` to the request.\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/messageSubjectPathParam'\n        - $ref: '#/components/parameters/messageTimeoutParam'\n      responses:\n        '202':\n          description: The message was sent (fire and forget).\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined path parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller does not have `WRITE` permission at the Thing level.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '413':\n          $ref: '#/components/responses/messageTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  /search/things:\n    get:\n      summary: Search for Things\n      description: |-\n        This resource can be used to search for things.\n\n        The query parameter `filter` is not mandatory. If it is not set there are returned all things which the logged\n        in user is allowed to read. The resource supports sorting\n        and paging. If paging is not explicitly specified by means of the `limit`\n        option, a default count of `25` documents is returned.\n\n        To search for nested properties, we use JSON Pointer notation (RFC-6901).\n        See the following example how to search for the sub property `location`\n        of the parent property `attributes` with a forward slash as separator:\n\n        ```eq(attributes/location,\"kitchen\")```\n      parameters:\n        - $ref: '#/components/parameters/searchFilter'\n        - $ref: '#/components/parameters/namespacesFilter'\n        - $ref: '#/components/parameters/thingFieldsQueryParam'\n        - name: option\n          in: query\n          description: |-\n            Possible values for the parameter:\n\n            ###### Sort operations\n\n            * ```sort([+|-]{property})```\n            * ```sort([+|-]{property},[+|-]{property},...)```\n\n            ###### Paging operations\n\n            * ```size({page-size})```  Maximum allowed page-size is `200`.\n            * ```cursor({cursor-id})```  Start the search from the cursor location. Specify the cursor ID without\n            quotation marks. Cursor IDs are given in responses and mark the position after the final search result.\n            The meaning of cursor IDs is unspecified and may change without notice.\n\n            The paging option `limit({offset},{count})` is deprecated.\n            It may result in slow queries, time-outs and will be removed eventually.\n\n            ##### Examples:\n\n            * ```sort(+thingId)```\n            * ```sort(-attributes/manufacturer)```\n            * ```sort(+thingId,-attributes/manufacturer)```\n            * ```size(10)``` return 10 results\n            * ```cursor(LOREMIPSUM)```  return results after the position of the cursor `LOREMIPSUM`.\n\n            ##### Combine:\n\n            If you need to specify multiple options, when using the swagger UI just write each option in a new line.\n            When using the plain REST API programmatically,\n            you will need to separate the options using a comma (,) character.\n\n            ```size(200),cursor(LOREMIPSUM)```\n\n            The deprecated paging option `limit` may not combine with the other paging options `size` and `cursor`.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n\n      tags:\n        - Things-Search\n      responses:\n        '200':\n          description: An array of the matching things.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResultThings'\n        '400':\n          description: The request could not be completed. A provided parameter was in a wrong format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to an invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '504':\n          description: The request ran out of time to execute on the the back-end. Optimize your query and try again.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n  /search/things/count:\n    get:\n      summary: Count Things\n      description: |-\n        This resource can be used to count things.\n\n        The query parameter `filter` is not mandatory. If it is not set there is returned the total amount of things which the logged\n        in user is allowed to read.\n\n        To search for nested properties, we use JSON Pointer notation (RFC-6901).\n        See the following example how to search for the sub property `location`\n        of the parent property `attributes` with a forward slash as separator:\n\n        ```eq(attributes/location,\"kitchen\")```\n      parameters:\n        - $ref: '#/components/parameters/searchFilter'\n        - $ref: '#/components/parameters/namespacesFilter'\n\n      tags:\n        - Things-Search\n      responses:\n        '200':\n          description: A number indicating the amount of matched things\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResultThingsCount'\n        '400':\n          description: The request could not be completed. A provided parameter was in a wrong format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to an invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '504':\n          description: The request ran out of time to execute on the the back-end. Optimize your query and try again.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\ncomponents:\n  requestBodies:\n    Attributes:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Attributes'\n          example: {}\n      description: |-\n        JSON object of all Attributes to be modified at once.\n        Consider that the value has to be a JSON object or `null`, examples:\n\n          * an object: `{ \"key\": \"value\"}` -} We strongly recommend to use a restricted set of characters for the key (identifier). Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n          * an empty object: `{}`\n      required: true\n    AclEntry:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AclEntry'\n          example:\n            {\n              \"READ\": true,\n              \"WRITE\": true,\n              \"ADMINISTRATE\": true\n            }\n      description: |-\n        JSON representation of the Access Control List (ACL) entry for a single\n        authorization subject\n      required: true\n    Payload:\n      content:\n        application/json:\n          schema:\n            type: string\n            example: ''\n        application/octet-stream:\n          schema:\n            type: string\n            example: ''\n        text/plain:\n          schema:\n            type: string\n            example: ''\n      description: |-\n        Payload of the message with max size of 250 kB. It can be any HTTP\n        supported content, including binary content.\n    Value:\n      content:\n        application/json:\n          schema:\n            type: object\n            example: {}\n      description: |-\n        JSON representation of the value to be created/updated. This may be as\n        well `null` or an empty object.\n\n        Consider that the value has to be a JSON value, examples:\n\n          * for a number, the JSON value is the number: `42`\n\n          * for a string, the JSON value must be quoted: `\"aString\"`\n\n          * for a boolean, the JSON value is the boolean: `true`\n\n          * for an object, the JSON value is the object: `{ \"key\": \"value\"}` -} We strongly recommend to use a restricted set of characters for the key (identifier). Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n\n          * for an list, the JSON value is the list: `[ 1,2,3 ]`\n      required: true\n  securitySchemes:\n    basicAuth:\n      type: http\n      description: |-\n        Eclipse Ditto sandbox demo user (demo1 ... demo9) + password (demo)\n      scheme: basic\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: |-\n        A JSON Web Token issued by a supported OAuth 2.0 Identity Provider, e.g. a Google \"id_token\"\n  schemas:\n    Error:\n      properties:\n        status:\n          type: integer\n          description: The HTTP status of the error\n        message:\n          type: string\n          description: The message of the error - what went wrong\n        description:\n          type: string\n          description: A description how to fix the error or more details\n        href:\n          type: string\n          description: A link to further information about the error and how to fix it\n      required:\n        - status\n        - message\n    AdvancedError:\n      properties:\n        status:\n          type: integer\n          description: The HTTP status of the error\n        error:\n          type: string\n          description: The error code of the occurred exception\n        message:\n          type: string\n          description: The message of the error - what went wrong\n        description:\n          type: string\n          description: A description how to fix the error or more details\n        href:\n          type: string\n          description: A link to further information about the error and how to fix it\n      required:\n        - status\n        - error\n        - message\n    Attributes:\n      type: object\n      description: An arbitrary JSON object.\n    FeatureDefinition:\n      type: array\n      items:\n        $ref: '#/components/schemas/FeatureDefinitionString'\n    FeatureDefinitionString:\n      type: string\n      description: \"A single fully qualified identifier of a Feature Definition in the form 'namespace:name:version'\"\n      pattern: ([_a-zA-Z0-9\\-.]+):([_a-zA-Z0-9\\-.]+):([_a-zA-Z0-9\\-.]+)\n    FeatureProperties:\n      type: object\n      description: An arbitrary JSON object.\n    Feature:\n      type: object\n      properties:\n        definition:\n          $ref: '#/components/schemas/FeatureDefinition'\n          description: The Definition of this Feature\n        properties:\n          $ref: '#/components/schemas/FeatureProperties'\n          description: The Properties of this Feature\n    SearchResultThings:\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Thing'\n        cursor:\n          type: string\n    SearchResultThingsCount:\n      type: integer\n    NewThing:\n      type: object\n      properties:\n        acl:\n          $ref: '#/components/schemas/Acl'\n          description: The Access Control List of this Thing containing one AclEntry for each\n        attributes:\n          $ref: '#/components/schemas/Attributes'\n          description: The attributes of this Thing\n        features:\n          $ref: '#/components/schemas/Features'\n          description: The Features of this Thing\n    Thing:\n      type: object\n      required:\n        - thingId\n        - acl\n        - attributes\n        - features\n      properties:\n        thingId:\n          type: string\n          description: |-\n            Unique identifier representing the Thing - has to:\n\n              * contain the mandatory namespace prefix (java package notation + `:` colon) - periods (`.`) may be used in namespace but not as first or last character\n              * conform to RFC-2396 (URI)\n        acl:\n          $ref: '#/components/schemas/Acl'\n          description: The Access Control List of this Thing containing one AclEntry for each arbitrary `authorizationSubject` key\n        attributes:\n          $ref: '#/components/schemas/Attributes'\n          description: The attributes of this Thing\n        features:\n          $ref: '#/components/schemas/Features'\n          description: The Features of this Thing\n    Acl:\n      type: object\n      description: Access Control List containing one AclEntry for each arbitrary `authorizationSubject` key\n      properties:\n      additionalProperties:\n        $ref: '#/components/schemas/AclEntry'\n    AclEntry:\n      type: object\n      description: Single Access Control List entry containing the permissions (READ, WRITE, ADMINISTRATE) for the Authorization Subject.\n      required:\n        - READ\n        - WRITE\n        - ADMINISTRATE\n      properties:\n        READ:\n          type: boolean\n          description: Whether the Authorization Subject has permissions to read this entity\n        WRITE:\n          type: boolean\n          description: Whether the Authorization Subject has permissions to modify this entity\n        ADMINISTRATE:\n          type: boolean\n          description: Whether the Authorization Subject has permissions to modify this entity's Access Control List\n    Features:\n      type: object\n      description: List of Features where the key represents the `featureId` of each Feature. The `featureId` key must be unique in the list.\n      properties:\n      additionalProperties:\n        $ref: '#/components/schemas/Feature'\n  responses:\n    entityTooLarge:\n      description: |-\n        The created or modified entity is larger than the accepted limit of 100 kB.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AdvancedError'\n    messageTooLarge:\n      description: |-\n        The size of the send message is larger than the accepted limit of 250 kB.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AdvancedError'\n    notModified:\n      description: |-\n        The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n        matches the current ETag of the (sub-)resource.\n      headers:\n        ETag:\n          description: |-\n            The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n            \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n          schema:\n            type: string\n    preconditionFailed:\n      description: |-\n        A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, when you\n        specified an If-Match or If-None-Match header which fails the precondition check against the current ETag of\n        the (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\n        failing If-None-Match header for a read request, status 304 will be returned instead.\n      headers:\n        ETag:\n          description: |-\n            The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n            \"rev:\u003crevision\u003e\", for sub-resources it has the format \"hash:\u003ccalculated-hash\u003e\".\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AdvancedError'\n  parameters:\n    ifMatchHeaderParam:\n      name: If-Match\n      in: header\n      description:  \u003e-\n        The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:\n          * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: \"rev:4711\"`\n          * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`\n      required: false\n      schema:\n        type: string\n    ifNoneMatchHeaderParam:\n      name: If-None-Match\n      in: header\n      description:  \u003e-\n        The `If-None-Match` header which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to\n        modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.\n      required: false\n      schema:\n        type: string\n    featureIdPathPathParam:\n      name: featureId\n      in: path\n      description: The ID of the Feature - has to conform to RFC-2396 (URI)\n      required: true\n      schema:\n        type: string\n    attributePathPathParam:\n      name: attributePath\n      in: path\n      description: The path to the Attribute\n      required: true\n      schema:\n        type: string\n    thingIdPathParam:\n      name: thingId\n      in: path\n      description: |-\n        The ID of the Thing - has to:\n\n          * contain the mandatory namespace prefix (java package notation + `:` colon)\n          * conform to RFC-2396 (URI)\n      required: true\n      schema:\n        type: string\n    messageSubjectPathParam:\n      name: messageSubject\n      in: path\n      description: The subject of the Message - has to conform to RFC-2396 (URI)\n      required: true\n      schema:\n        type: string\n    messageClaimTimeoutParam:\n      name: timeout\n      in: query\n      description: |-\n        Contains an optional timeout (in seconds) of how long to wait for the Claim response and therefore block the\n        HTTP request. Default value (if omitted): 60 seconds. Maximum value: 600 seconds. A value of 0 seconds applies\n        fire and forget semantics for the message.\n      required: false\n      schema:\n        type: integer\n    messageTimeoutParam:\n      name: timeout\n      in: query\n      description: |-\n        Contains an optional timeout (in seconds) of how long to wait for the message response and therefore block the\n        HTTP request. Default value (if omitted): 10 seconds. Maximum value: 60 seconds. A value of 0 seconds applies\n        fire and forget semantics for the message.\n      required: false\n      schema:\n        type: integer\n    authorizationSubjectPathParam:\n      name: authorizationSubject\n      in: path\n      description: The subject for authorization (e.g. a user id) inside an ACL\n      required: true\n      schema:\n        type: string\n    propertyPathPathParam:\n      name: propertyPath\n      in: path\n      description: The path to the Property\n      required: true\n      schema:\n        type: string\n    thingFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma separated list of fields to be included in the returned JSON. Attributes can be selected in the same manner.\n\n        #### Selectable fields\n\n        * `thingId`\n\n        * `acl`\n\n        * `attributes`\n\n          Supports selecting arbitrary sub-fields by using a comma separated list:\n            * several attribute paths can be passed as a comma separated list of JSON pointers (RFC-6901)\n\n              For example:\n                * `?fields=attributes/model` would select only `model` attribute value (if present)\n                * `?fields=attributes/model,attributes/make` would select only `model` and `make` attribute values (if present)\n\n          Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:\n            * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n            * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n              For example:\n               * `?fields=attributes(model,make)` would select only `model` and `make` attribute values (if present)\n               * `?fields=attributes(location/longitude)` would select the `longitude` value inside the `location` object\n               * `?fields=attributes/address/postal(city,street)` would select the `city` and `street` values inside the `postal` object inside the `address` object\n\n\n        * `features`\n\n          Supports selecting arbitrary fields in features similar to `attributes` (see also Features documentation for more details)\n\n        * `_namespace`\n\n          Specifically selects the namespace also contained in the `thingId`\n\n        * `_revision`\n\n          Specifically selects the revision of the Thing. The revision is a counter which is incremented on each modification of a Thing.\n\n        * `_modified`\n\n          Specifically selects the modified timestamp of the Thing in ISO-8601 UTC format. The timestamp is set on each modification of a Thing.\n\n        #### Examples\n\n        * `?fields=thingId,attributes,features`\n\n        * `?fields=attributes(model,make),features`\n\n        * `?fields=thingId,attributes/location/longitude,attributes/address(city,street)`\n\n      required: false\n      schema:\n        type: string\n    attributesFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma separated list of fields from the attributes to be included in the returned JSON.\n\n        #### Selectable fields\n\n        Supports selecting arbitrary sub-fields as defined in the attributes by using a comma separated list:\n          * several properties paths can be passed as a comma separated list of JSON pointers (RFC-6901)\n\n            For example:\n              * `?fields=model` would select only `model` attribute value (if present)\n              * `?fields=model,make` would select only `model` and `make` attribute values (if present)\n\n        Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:\n          * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n          * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n            For example:\n             * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` attribute\n\n        #### Examples\n\n        * `?fields=model,make,location(longitude,latitude)`\n\n        * `?fields=listOfAddresses/postal(city,street))`\n\n      required: false\n      schema:\n        type: string\n    propertiesFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma separated list of fields from the properties to be included in the returned JSON.\n\n        #### Selectable fields\n\n        Supports selecting arbitrary sub-fields as defined in the properties by using a comma separated list:\n          * several properties paths can be passed as a comma separated list of JSON pointers (RFC-6901)\n\n            For example:\n              * `?fields=temperature` would select only `temperature` property value (if present)\n              * `?fields=temperature,humidity` would select only `temperature` and `humidity` property values (if present)\n\n        Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:\n          * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n          * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n            For example:\n             * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` property\n\n        #### Examples\n\n        * `?fields=temperature,humidity,location(longitude,latitude)`\n\n        * `?fields=configuration,status(powerConsumption/watts)`\n\n      required: false\n      schema:\n        type: string\n    featuresFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma separated list of fields from one or more Features to be included in the returned JSON.\n\n        #### Selectable fields\n\n        * `{featureId}` The ID of the Feature to select properties in\n\n          * `properties`\n\n            Supports selecting arbitrary sub-fields by using a comma separated list:\n              * several properties paths can be passed as a comma separated list of JSON pointers (RFC-6901)\n\n                For example:\n                  * `?fields={featureId}/properties/color` would select only `color` property value (if present) of the Feature identified with `{featureId}`\n                  * `?fields={featureId}/properties/color,properties/brightness` would select only `color` and `brightness` property values (if present) of the Feature identified with `{featureId}`\n\n            Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:\n              * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n              * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n                For example:\n                 * `?fields={featureId}/properties(color,brightness)` would select only `color` and `brightness` property values (if present) of the Feature identified with `{featureId}`\n                 * `?fields={featureId}/properties(location/longitude)` would select the `longitude` value inside the `location` object of the Feature identified with `{featureId}`\n\n\n        #### Examples\n\n        * `?fields=EnvironmentScanner/properties(temperature,humidity)`\n\n        * `?fields=EnvironmentScanner/properties(temperature,humidity),Vehicle/properties/configuration`\n\n      required: false\n      schema:\n        type: string\n    featureFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma separated list of fields from the selected Feature to be included in the returned JSON.\n\n        #### Selectable fields\n\n        * `properties`\n\n          Supports selecting arbitrary sub-fields by using a comma separated list:\n            * several properties paths can be passed as a comma separated list of JSON pointers (RFC-6901)\n\n              For example:\n                * `?fields=properties/color` would select only `color` property value (if present)\n                * `?fields=properties/color,properties/brightness` would select only `color` and `brightness` property values (if present)\n\n          Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:\n            * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n            * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n              For example:\n               * `?fields=properties(color,brightness)` would select only `color` and `brightness` property values (if present)\n               * `?fields=properties(location/longitude)` would select the `longitude` value inside the `location` object\n\n        #### Examples\n\n        * `?fields=properties(color,brightness)`\n\n      required: false\n      schema:\n        type: string\n    searchFilter:\n      name: filter\n      in: query\n      description: |-\n        Possible values for the parameter:\n\n        ##### Filter operations\n\n        * ```eq({property},{value})```\n\n        * ```ne({property},{value})```\n\n        * ```gt({property},{value})```\n\n        * ```ge({property},{value})```\n\n        * ```lt({property},{value})```\n\n        * ```le({property},{value})```\n\n        * ```in({property},{value},{value},...)```\n\n        * ```like({property},{value})```\n\n        * ```exists({property})```\n\n\n        Note: When using filter operations, only things with the specified properties are returned.\n        For example, the filter `ne(attributes/owner, \"SID123\")` will only return things that have the `owner` attribute.\n\n\n        ##### logical operations\n\n        * ```and({query},{query},...)```\n\n        * ```or({query},{query},...)```\n\n        * ```not({query})```\n\n\n        ##### Examples\n\n        * ```eq(attributes/location,\"kitchen\")```\n\n        * ```exists(features/featureId)```\n\n        * ```and(eq(attributes/location,\"kitchen\"),eq(attributes/color,\"red\"))```\n\n        * ```or(eq(attributes/location,\"kitchen\"),eq(attributes/location,\"living-room\"))```\n      required: false\n      schema:\n        type: string\n    namespacesFilter:\n      name: namespaces\n      in: query\n      description: |-\n        A comma separated list of namespaces. This list is used to limit the query to things in the given namespaces\n        only. When this parameter is omitted, all namespaces will be queried.\n\n\n        #### Examples:\n\n        * `?namespaces=com.example.namespace`\n\n        * `?namespaces=com.example.namespace1,com.example.namespace2`\n      required: false\n      schema:\n        type: string\n",
			"canonicalURL": "/github.com/kiwigrid/helm-charts@68b6ed2c66ca7f1f69d811fb1045668798ba403f/-/blob/charts/ditto-digital-twins/openapi/ditto-api-1.yml",
			"externalURLs": [
				{
					"url": "https://github.com/kiwigrid/helm-charts/blob/68b6ed2c66ca7f1f69d811fb1045668798ba403f/charts/ditto-digital-twins/openapi/ditto-api-1.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: line 1: cannot unmarshal !!null into *ogen.Properties"
}