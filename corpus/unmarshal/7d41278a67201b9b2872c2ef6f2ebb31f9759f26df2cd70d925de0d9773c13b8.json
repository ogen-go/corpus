{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/reproto/reproto"
		},
		"file": {
			"name": "HttpService.yaml",
			"size": 0,
			"path": "it/structures/openapi/service-yaml/service/HttpService.yaml",
			"byteSize": 6499,
			"content": "---\nopenapi: 3.0.0\ninfo: {}\nservers:\n  - url: \"http://example.com\"\npaths:\n  \"/simple/{id}\":\n    get:\n      operationId: get_simple\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Entry\"\n  /simple:\n    post:\n      operationId: post_simple\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ServiceEntry\"\n      responses:\n        \"200\": {}\n  /entry:\n    get:\n      operationId: get_entry\n      description: \"# Endpoint to get a really complicated entity called `Entry` for some reason.\\n\\nThe entity has a ton of optional fields.\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceEntry\"\n  /state:\n    get:\n      operationId: get_state\n      description: Endpoint to get the state of the service.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/State\"\n  /error-code:\n    get:\n      operationId: get_error_code\n      description: Endpoint to get the error code of the service\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorCode\"\n  /point:\n    get:\n      operationId: get_point\n      description: Endpoint to retrieve a single point.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Point\"\n  /tagged:\n    get:\n      operationId: get_tagged\n      description: Endpoint to retrieve a single tagged interface.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Tagged\"\n  /untagged:\n    get:\n      operationId: get_untagged\n      description: Endpoint to retrieve a single untagged interface.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Untagged\"\ncomponents:\n  schemas:\n    Entry:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n    ServiceEntry:\n      type: object\n      description: A bizarre entry with many different optional fields.\n      properties:\n        boolean_type:\n          type: boolean\n        string_type:\n          type: string\n        datetime_type:\n          type: string\n          format: date-time\n        unsigned_32:\n          type: integer\n          format: uint32\n        unsigned_64:\n          type: integer\n          format: uint64\n        signed_32:\n          type: integer\n          format: int32\n        signed_64:\n          type: integer\n          format: int64\n        float_type:\n          type: integer\n          format: float\n        double_type:\n          type: integer\n          format: double\n        bytes_type:\n          type: string\n          format: byte\n        any_type:\n          $ref: \"#/components/schemas/Any\"\n        array_type:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ServiceEntry\"\n        array_of_array_type:\n          type: array\n          items:\n            type: array\n            items:\n              $ref: \"#/components/schemas/ServiceEntry\"\n        map_type:\n          type: object\n          additionalProperties:\n            $ref: \"#/components/schemas/ServiceEntry\"\n    State:\n      type: string\n      enum:\n        - open\n        - closed\n    ErrorCode:\n      type: integer\n      format: uint32\n      enum:\n        - 400\n        - 500\n    Point:\n      type: array\n      format: tuple\n      required:\n        - 0\n        - 1\n      properties:\n        0:\n          type: integer\n          format: uint64\n        1:\n          type: integer\n          format: double\n    Tagged:\n      oneOf:\n        - $ref: \"#/components/schemas/TaggedA\"\n        - $ref: \"#/components/schemas/TaggedB\"\n        - $ref: \"#/components/schemas/TaggedBar\"\n        - $ref: \"#/components/schemas/TaggedBaz\"\n      discriminator:\n        propertyName: \"@type\"\n        mapping:\n          foo: \"#/components/schemas/TaggedA\"\n          b: \"#/components/schemas/TaggedB\"\n          Bar: \"#/components/schemas/TaggedBar\"\n          Baz: \"#/components/schemas/TaggedBaz\"\n    Untagged:\n      description: An untagged interface.\n      oneOf:\n        - type: object\n          description: \"Special case: fields shared with other sub-types.\\nNOTE: due to rust support through untagged, the types are matched in-order.\"\n          required:\n            - shared\n            - a\n            - b\n          properties:\n            shared:\n              type: string\n            shared_ignore:\n              type: string\n            a:\n              type: string\n            b:\n              type: string\n            ignore:\n              type: string\n        - type: object\n          required:\n            - shared\n            - a\n          properties:\n            shared:\n              type: string\n            shared_ignore:\n              type: string\n            a:\n              type: string\n            ignore:\n              type: string\n        - type: object\n          required:\n            - shared\n            - b\n          properties:\n            shared:\n              type: string\n            shared_ignore:\n              type: string\n            b:\n              type: string\n            ignore:\n              type: string\n    Any: {}\n    TaggedA:\n      type: object\n      required:\n        - \"@type\"\n        - shared\n      properties:\n        \"@type\":\n          type: string\n        shared:\n          type: string\n    TaggedB:\n      type: object\n      required:\n        - \"@type\"\n        - shared\n      properties:\n        \"@type\":\n          type: string\n        shared:\n          type: string\n    TaggedBar:\n      type: object\n      required:\n        - \"@type\"\n        - shared\n      properties:\n        \"@type\":\n          type: string\n        shared:\n          type: string\n    TaggedBaz:\n      type: object\n      required:\n        - \"@type\"\n        - shared\n      properties:\n        \"@type\":\n          type: string\n        shared:\n          type: string"
		}
	},
	"Error": "unmarshal: json: line 1:324: json: cannot unmarshal number into Go struct field Schema.components.schemas.required of type string"
}