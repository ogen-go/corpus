{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/oxen-io/session-pysogs"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "api.yaml",
			"byteSize": 25025,
			"content": "openapi: 3.0.1\ninfo:\n  title: Session Open Group Server\n  description: \u003e\n    API documentation for Session open groups.  This is the API that\n    [Session](https://getsession.org) and related tools use to interface with open groups.\n  contact:\n    name: The Oxen Project\n    email: team@oxen.io\n    url: https://getsession.org\n  license:\n    name: GPL v3.0\n    url: https://www.gnu.org/licenses/gpl-3.0.en.html\n  version: \"3.0\"\nexternalDocs:\n  description: Find out more about the Oxen project\n  url: http://oxen.io\npaths:\n  /user/{sessionId}/permission:\n    post:\n      tags: [Users]\n      summary: Applies permissions or restrictions to a user.\n      description: \u003e\n        Applies or removes a user's permissions to one or more rooms.\n        \n        \n        The request specifies grants (`true`) or revocations (`false`) of permissions to apply.\n        Granting or revoking a permission adds a specific override for the given user that overrides\n        the default room permissions.\n        \n        \n        You can explicitly clear one or more permission setting by specifying a timeout of `-1` (in\n        this case the actual true/false value of the permissions are ignored).\n        \n        \n        Note that the given session ID does not have to exist: it is possible to grant permissions\n        preemptively for a session ID that has never visited the server or room(s).\n      parameters:\n      - $ref: \"#/components/parameters/pathSessionId\"\n      requestBody:\n        description: \"Details of the permission update to apply.\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required: [rooms]\n              properties:\n                rooms:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/RoomToken\"\n                  minItems: 1\n                  description: \u003e\n                    List of room tokens to which the permissions should be applied. The invoking\n                    user must be a moderator (or admin) of all of the given rooms.\n                timeout:\n                  type: number\n                  format: double\n                  nullable: true\n                  example: 86400\n                  description: \u003e\n                    How long the new permission (or restriction) should apply, in seconds.  If the\n                    user already has future permission changes scheduled then they will be cancelled\n                    and replaced the changes scheduled here.\n                    \n                    \n                    When the timeout expires, the specific override will be removed and the user's\n                    permission will revert to the room's defaults.\n                    \n                    \n                    Using a timeout of -1 clears any given permission/restrictions immediately.\n                    Note that, in this case, the actual true/false value is ignored.  For instance,\n                    `timeout: -1, read: false` and `timeout: -1, read: true` both clear any existing\n                    user-specific permission for `read`.\n                read:\n                  type: boolean\n                  nullable: true\n                  example: false\n                  description: \u003e\n                    If true this grants permission to read the room's messages even if the room\n                    defaults do not allow reading.  If false this restricts permission to read the\n                    room's messages even if the room's default allows reading.  Specifying this as\n                    null will explicitly delete any user-specific read override (effectively\n                    returning the user's read permission to the room's default).\n                accessible:\n                  type: boolean\n                  nullable: true\n                  example: false\n                  description: \u003e\n                    If true this grants permission to read the room's metadata when the user doesn't\n                    have read permission.  That is, having this true and read false means the user\n                    cannot read messages, but can get information about the room, while both false\n                    means the user cannot access any details of the room.  Specifying this as null\n                    will explicitly delete any user-specific accessible override, returning the\n                    user's effective permission to the room's default.\n                write:\n                  type: boolean\n                  nullable: true\n                  example: true\n                  description: \u003e\n                    If true this grants permission to post messages to the room, even if the room's\n                    default permissions do not allow posting.  If false this restricts the user from\n                    posting.  Specifying this as null will explicitly delete any user-specific write\n                    override, returning the user's effective permission to the room's default.\n                upload:\n                  type: boolean\n                  nullable: true\n                  example: true\n                  description: \u003e\n                    If true this grants permission to upload files to the room for this user, even\n                    if the room's default permission does not allow uploads.  If false the user is\n                    restricted from uploading files.  Specifying as null will explicitly delete any\n                    user-specific override, returning the user's effective permission to the room's\n                    default.\n            examples:\n              tworooms:\n                summary: \"1-day mute in two rooms\"\n                value:\n                  rooms: [\"session\", \"lokinet\"]\n                  timeout: 86400\n                  write: false\n              allow-uploads:\n                summary: \"Allow file attachments for 1 week\"\n                value:\n                  rooms: [\"session-help\"]\n                  upload: true\n                  timeout: 604800\n              secretroom:\n                summary: \"Grant access to a restricted room\"\n                value:\n                  rooms: [\"top-secret\"]\n                  read: true\n                  write: true\n                  upload: true\n      responses:\n        200:\n          description: Permission update applied successfully.\n          content: {}\n        403:\n          description: \u003e\n            Permission denied.  The user attempting to set the permissions does not have moderator\n            permissions for one or more of the given rooms.\n          content: {}\n  /user/{sessionId}/deleteMessages:\n    post:\n      tags: [Users]\n      summary: Deletes all of a user's messages.\n      description: \u003e\n        Deletes all messages posted by the given user from one or more rooms, or from all rooms on\n        the server.\n        \n        \n        The caller must have moderator permission in all given rooms, or be a server moderator for\n        global server deletion.\n      parameters:\n      - $ref: \"#/components/parameters/pathSessionId\"\n      requestBody:\n        description: \"Details of the deletion.\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                rooms:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/RoomToken\"\n                  minItems: 1\n                  description: \u003e\n                    List of room tokens from which messages should be deleted.  The invoking user\n                    must be a moderator (or admin) or all of the given rooms.\n                    \n                    \n                    Exclusive of `global`.\n                global:\n                  type: boolean\n                  description: \u003e\n                    If true then delete all messages made by this user from all rooms on the server.\n                    The invoking user must be a server-level moderator or admin.  In particular,\n                    this does *not* allow a non-server moderator to delete the user's messages from\n                    all rooms they moderate.\n                    \n                    \n                    Exclusive of `rooms`.\n            examples:\n              tworooms:\n                summary: \"Delete all messages from two rooms\"\n                value:\n                  rooms: [\"session\", \"lokinet\"]\n              permaban:\n                summary: \"Delete all messages from all rooms\"\n                value:\n                  global: true\n      responses:\n        200:\n          description: Messages deleted successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    $ref: \"#/components/schemas/SessionID\"\n                  messages_deleted:\n                    type: integer\n                    format: int64\n                    description: The number of messages deleted.\n        403:\n          description: \u003e\n            Permission denied.  The user attempting to set the ban does not have moderator\n            permissions for one or more of the given rooms (or server moderator permission for a\n            global ban).\n          content: {}\n  /batch:\n    post:\n      tags: [Batch]\n      summary: \"Utility endpoint to allow submitting multiple independent requests at once.\"\n      description: \u003e\n        This is used, for example, to poll multiple rooms on the same server for updates in a single\n        query rather than needing to make multiple requests for each room.\n        \n        No guarantee is made as to the order in which sub-requests are processed; use the\n        `/sequence` instead if you need that.\n        \n        For contained subrequests that specify a body (i.e. POST or PUT requests) exactly one of\n        `json`, `b64`, or `bytes` must be provided with the request body.\n      requestBody:\n        description: \"List of sub-requests to issue for this batch request.\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: object\n                required: [method, path]\n                properties:\n                  method:\n                    type: string\n                    description: \"The request method, typically GET for batched requests, though other methods are also permitted.\"\n                  path:\n                    type: string\n                    description: \"The request path, e.g. `/room/123/messages/since/45678`\"\n                  headers:\n                    type: object\n                    description: \"Dict of HTTP headers for the subrequest.  Optional.\"\n                  json:\n                    description: \"Nested json structure containing a json body for a POST/PUT request.  Exclusive of `b64` and `bytes`.\"\n                    oneOf:\n                    - type: object\n                    - type: array\n                  b64:\n                    description: \"Byte data for the body for a POST/PUT request.  Exclusive of `json` and `bytes`\"\n                    type: string\n                    format: byte\n                  bytes:\n                    description: \"Optional binary body, as raw octets.  Exclusive of `b64` and `json`.  Not recommended when using json unless the data happens to be mostly safe ascii\"\n                    type: string\n                    format: binary\n      responses:\n        200:\n          description: \"Batch jobs completed. Note that 200 only means the batch was processed; for individual sub-requests see the relevant sub-response code.  The returned array returns responses in exactly the same order as the request's list of sub-requests (regardless of the actual order jobs were processed).\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  required: [code, content-type, body]\n                  properties:\n                    code:\n                      type: integer\n                      format: int32\n                      description: \"HTTP response code for the subrequest (e.g. 200, 404, etc.)\"\n                    content-type:\n                      type: string\n                      description: \"HTTP content-type of the subrequest response (e.g. `application/json`)\"\n                    body:\n                      oneOf:\n                        - type: object\n                        - type: array\n                        - type: string\n                          format: byte\n                      description: \u003e\n                        The response body.  For responses with `content-type` set to\n                        `application/json` this will be the direct object or array response; for any\n                        other content otherwise this will be a string containing the base64-encoded\n                        response data.\n\n  /sequence:\n    post:\n      tags: [Batch]\n      summary: \"Utility endpoint to submit a batch of sequenced, dependent requests.\"\n      description: \u003e\n        The requests are guaranteed to be performed sequentially in the order given in the request\n        and will abort if any request does not return a status-`2xx` response.\n        \n        For example, this can be used to ban and delete all of a user's messages by sequencing the\n        ban followed by the delete_all: if the ban fails (e.g. because permission is denied) then\n        the delete_all will not occur. The batch body and response are identical to the `/batch`\n        endpoint; requests that are not carried out because of an earlier failure will have a\n        response code of `412` (Precondition Failed).\"\n      requestBody:\n        $ref: \"#/paths/~1batch/post/requestBody\"\n      responses:\n        200:\n          $ref: \"#/paths/~1batch/post/responses/200\"\n\n  /oxen/v4/lsrpc:\n    post:\n      tags: [Onion]\n      summary: \"Endpoint for submitting an encrypted onion request\"\n      description: \u003e\n        The data is an onion-encrypted request for another endpoint, wrapped in an encrypted layer\n        for this open group server.\n      requestBody:\n        description: \u003e\n          Onion request endpoint information.  Note that the field descriptions here are *inside*\n          the onion encryption layer; the onion encryption payload itself is documented elsewhere.\n        required: true\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: \u003e\n                The onion request data.  This is encoded/encrypted in multiple layers, as follows.\n                \n                \n                The data is first constructed as one or two parts: the first part is json contains\n                request metadata with fields:\n                - method -- \"GET\", \"POST\", etc. of the subrequest\n                - endpoint -- the subrequest endpoint, e.g. `/room/some-room/messages/since/123`\n                - headers -- request headers, typically containing X-SOGS-* auth info and, for\n                  POST/PUT requests, a Content-Type.\n                \n                \n                The second part is the request body, in bytes (only for POST/PUT requests).\n                \n                \n                These two pieces are encoded as a one- or two-string bencoded list, which has format:\n                \n                \n                `l123:jsone` or `l123:json456:bodye` where 123 is the length of the json and 456 is\n                the length of the body, if the request has a body.  (Both strings are byte strings).\n                \n                \n                This data is then encrypted using onion-request style encryption; see the\n                oxen-storage-server for details on how this is done.\n      responses:\n        200:\n          description: \u003e\n            Onion request completed.  The subrequest response will be encoded in a two-string\n            bencoded list (see the request details for the encoding specifics) where the first\n            string contains the response metadata as json with keys:\n            \n            \n            - code -- the HTTP response code of the subrequest, e.g. 200, 404\n            - headers -- a dict of HTTP response headers; the header name keys are always\n              lower-cased.\n            \n            \n            The second part is the response body bytes; as in HTTP, interpreting this depends on the\n            `content-type` header in the `headers` metadata, and the details of the invoked\n            endpoint.\n            \n            \n            These two byte strings are bencoded, and then the bencoded data is encrypted using the\n            same ephemeral key and encryption type as was used in the request.\n\ncomponents:\n  schemas:\n    RoomToken:\n      type: string\n      title: A room token used in URLs to identify the room.\n      pattern: \"^[\\\\w-]{1,64}$\"\n      example: \"session-general\"\n    SessionID:\n      type: string\n      title: A session ID, in hex.\n      description: \u003e\n        The Session ID is the fixed byte `05` followed by the 32-byte X25519 pubkey used to sign and\n        encrypt messages.\n      pattern: \"^05[0-9a-fA-F]{64}$\"\n    Room:\n      title: Information about a room\n      type: object\n      properties:\n\n    Message:\n      title: The content of a posted message\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The numeric message id.\n        session_id:\n          allOf:\n            - $ref: \"#/components/schemas/SessionID\"\n            - type: object\n              description: \u003e\n                The session ID of the user who posted this message.  Omitted in contexts where the\n                information isn't available or isn't useful or available, such as in the\n                confirmation of submitting a post.\n        posted:\n          type: number\n          format: double\n          description: \u003e\n            Unix timestamp of when the message was posted to the server.\n        edited:\n          type: number\n          format: double\n          description: \u003e\n            Unix timestamp of the last edit to this message.  This field is omitted if the message\n            has never been edited.\n        seqno:\n          type: integer\n          format: int64\n          description: \u003e\n            This message's event sequence number in the room; this number is set to the room's\n            current monotonic sequence counter (*not* a timestamp!) when this message is first\n            posted and whenever the message is edited or deleted.  Thus an update to this value for\n            the same message indicates an update or deletion has occurred.\n            \n            \n            Note that this sequence number is used for event tracking, *not* message ordering.  For\n            example, an edit will increase this value so that polling clients will receive the edit,\n            but the edit itself should not re-position the message.\n        whisper:\n          type: boolean\n          description: \u003e\n            If true then this message is a whisper for the current user (either directed at them, or\n            sent to all moderators).  Omitted when the message is not a whisper.\n        whisper_mods:\n          type: boolean\n          description: \u003e\n            If true then this whisper is meant to be seen by all moderators, false for whispers\n            meant only for a specific user.  Omitted if the message is not a whisper.\n        whisper_to:\n          allOf:\n            - $ref: \"#/components/schemas/SessionID\"\n            - type: object\n              description: \u003e\n                The session ID of the recipient of this whisper.  Omitted if the message is not a\n                whisper, or if the whisper is for all mods without a specific recipient.\n        data:\n          type: string\n          format: byte\n          description: \u003e\n            The posted message data, encoded in base64.  For a deleted message this field is\n            omitted.  For an edited message, this field contains the latest message value.\n        signature:\n          type: string\n          format: byte\n          description: \u003e\n            An XEd25519 signature of the data contained in `data`, signed using the X25519 pubkey\n            contained in the user's Session ID.  This field is omitted when `data` is omitted (i.e.\n            for deleted messages.)\n\n    DirectMessage:\n      title: The content of a direct message sent through this server\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The numeric message id.\n        data:\n          type: string\n          format: byte\n          description: \u003e\n            The direct message data, encoded in base64.\n        signature:\n          type: string\n          format: byte\n          description: \u003e\n            An XEd25519 signature of the data contained in `data`, signed using the X25519 pubkey\n            contained in the user's Session ID.\n        expires_at:\n          type: number\n          format: double\n          description: \u003e\n            Unix timestamp of when the message is scheduled to expire from the server.\n        sender:\n          allOf:\n            - $ref: \"#/components/schemas/SessionID\"\n            - type: object\n              description: \"The session ID of the user who sent this message.\"\n        recipient:\n          allOf:\n            - $ref: \"#/components/schemas/SessionID\"\n            - type: object\n              description: \"The session ID to which this message was sent.\"\n\n  parameters:\n    pathRoomToken:\n      name: roomToken\n      in: path\n      description: \"Token of the room to which the request is being made.\"\n      required: true\n      schema:\n        $ref: \"#/components/schemas/RoomToken\"\n    pathMessageId:\n      name: messageId\n      in: path\n      description: \"Numeric message id of a post.\"\n      required: true\n      schema:\n        type: integer\n        format: int64\n    queryMessagesLimit:\n      name: limit\n      in: query\n      required: false\n      description: \"Number of messages to return.  If omitted 100 messages are returned.\"\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        maximum: 256\n    pathFileId:\n      name: fileId\n      in: path\n      required: true\n      description: \"ID of a file uploaded to the room.\"\n      schema:\n        type: integer\n        format: int64\n    pathSessionId:\n      name: sessionId\n      in: path\n      required: true\n      description: \"Session ID of a user.\"\n      schema:\n        $ref: \"#/components/schemas/SessionID\"\n\n  securitySchemes:\n    pubkey:\n      type: apiKey\n      name: X-SOGS-Pubkey\n      in: header\n      description: \u003e\n        The Ed25519 public key of the request.  For non-blinded requests this is the root session\n        Ed25519 pubkey with '00' prefixed; for blinded requests this begins with '15' and follows\n        the blinding procedure detailed elsewhere.\n    nonce:\n      type: apiKey\n      name: X-SOGS-Nonce\n      in: header\n      description: \u003e\n        A unique, random nonce string of exactly 16 source bytes encoded in base64 (i.e. 24 base64\n        characters, including two trailing padding characters).  This must be unique for every\n        request from this pubkey within the last 24 hours; nonce reuse will result in failed\n        requests.\n    timestamp:\n      type: apiKey\n      name: X-SOGS-Timestamp\n      in: header\n      description: \u003e\n        Unix timestamp integer (expressed as a string) of the time when the request was initiated to\n        help avoid replay attacks.  This timestamp must be within ±24 hours of the server's time\n        when the request is received.\n    signature:\n      type: apiKey\n      name: X-SOGS-Signature\n      in: header\n      description: \u003e\n        Ed25519 signature of\n        \n        \n        `SERVER_PUBKEY || NONCE || TIMESTAMP || METHOD || PATH || HBODY`\n        \n        \n        signed using the client's blinded or unblinded pubkey (from the `X-SOGS-Pubkey` header),\n        encoded using base64 (with or without padding).\n        \n        \n        SERVER_PUBKEY and NONCE are 32- and 16-byte values, respectively (i.e. the nonce here is the\n        *decoded* value of the X-SOGS-Nonce header).\n        \n        \n        TIMESTAMP is the timestamp expressed as a decimal string, encoded in ascii bytes.\n        \n        \n        METHOD is the ascii request method (`GET`, `POST`, etc.)\n        \n        \n        PATH is in utf-8 encoded bytes.\n        \n        \n        HBODY is an empty string (i.e. omitted from the signature) if the request has no body, or\n        has an empty body.  Otherwise it must be a 64-byte BLAKE2b hash of the request body.\n\n# vim:sw=2:et:tw=100\n"
		}
	},
	"Error": "unmarshal: json: start: unexpected byte 110 'n'"
}