{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/codingsoo/REST_Go"
		},
		"file": {
			"name": "openapi.json",
			"size": 0,
			"path": "RESTest/src/test/resources/cwa-verification/openapi.json",
			"byteSize": 10670,
			"content": "{\n  \"openapi\": \"3.0.1\",\n  \"info\": {\n    \"title\": \"cwa-verification-server\",\n    \"license\": {\n      \"name\": \"Apache 2.0\",\n      \"url\": \"http://www.apache.org/licenses/LICENSE-2.0\"\n    },\n    \"version\": \"1.2.0-SNAPSHOT\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:50116\",\n      \"description\": \"Generated server url\"\n    }\n  ],\n  \"paths\": {\n    \"/version/v1/tan\": {\n      \"post\": {\n        \"tags\": [\n          \"external-tan-controller\"\n        ],\n        \"summary\": \"Generates a Tan\",\n        \"description\": \"Generates a TAN on input of Registration Token. With the TAN one can submit his Diagnosis keys\",\n        \"operationId\": \"generateTan\",\n        \"parameters\": [\n          {\n            \"name\": \"cwa-fake\",\n            \"in\": \"header\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RegistrationToken\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Registration Token is valid\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DeferredResultResponseEntityTan\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Registration Token does not exist\"\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\"\n          }\n        }\n      }\n    },\n    \"/version/v1/testresult\": {\n      \"post\": {\n        \"tags\": [\n          \"external-test-state-controller\"\n        ],\n        \"summary\": \"COVID-19 test result for given RegistrationToken\",\n        \"description\": \"Gets the result of COVID-19 Test. If the RegistrationToken belongs to a TeleTan the result is always positive\",\n        \"operationId\": \"getTestState\",\n        \"parameters\": [\n          {\n            \"name\": \"cwa-fake\",\n            \"in\": \"header\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RegistrationToken\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Testresult retrieved\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DeferredResultResponseEntityTestResult\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request\"\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\"\n          }\n        }\n      }\n    },\n    \"/version/v1/registrationToken\": {\n      \"post\": {\n        \"tags\": [\n          \"external-token-controller\"\n        ],\n        \"summary\": \"Get registration Token\",\n        \"description\": \"Get a registration token by providing a SHA-256 hasehd GUID or a teleTAN\",\n        \"operationId\": \"generateRegistrationToken\",\n        \"parameters\": [\n          {\n            \"name\": \"cwa-fake\",\n            \"in\": \"header\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RegistrationTokenRequest\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"registration token generated.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DeferredResultResponseEntityRegistrationToken\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"GUID/TeleTAN already exists.\"\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\"\n          }\n        }\n      }\n    },\n    \"/version/v1/tan/teletan\": {\n      \"post\": {\n        \"tags\": [\n          \"internal-tan-controller\"\n        ],\n        \"summary\": \"Request generation of a teleTAN\",\n        \"description\": \"A teleTAN is a human readable TAN with 7 characters which is supposed to be issued via call line\",\n        \"operationId\": \"createTeleTan\",\n        \"parameters\": [\n          {\n            \"name\": \"Authorization\",\n            \"in\": \"header\",\n            \"required\": true,\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/AuthorizationToken\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"201\": {\n            \"description\": \"TeleTan created\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/TeleTan\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request\"\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\"\n          }\n        }\n      }\n    },\n    \"/version/v1/tan/verify\": {\n      \"post\": {\n        \"tags\": [\n          \"internal-tan-controller\"\n        ],\n        \"summary\": \"Verify provided Tan\",\n        \"description\": \"The provided Tan is verified to be formerly issued by the verification server\",\n        \"operationId\": \"verifyTan\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Tan\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Tan is valid an formerly issued by the verification server\",\n            \"content\": {\n              \"*/*\": {\n                \"schema\": {\n                  \"type\": \"object\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request\"\n          },\n          \"404\": {\n            \"description\": \"Tan could not be verified\",\n            \"content\": {\n              \"*/*\": {\n                \"schema\": {\n                  \"type\": \"object\"\n                }\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"RegistrationToken\": {\n        \"required\": [\n          \"registrationToken\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"registrationToken\": {\n            \"pattern\": \"^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$\",\n            \"type\": \"string\"\n          },\n          \"responsePadding\": {\n            \"type\": \"string\"\n          }\n        },\n        \"description\": \"The registration token model.\"\n      },\n      \"DeferredResultHandler\": {\n        \"type\": \"object\"\n      },\n      \"DeferredResultResponseEntityTan\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"resultHandler\": {\n            \"$ref\": \"#/components/schemas/DeferredResultHandler\"\n          },\n          \"result\": {\n            \"type\": \"object\"\n          },\n          \"resultInternal\": {\n            \"type\": \"boolean\",\n            \"writeOnly\": true\n          },\n          \"setOrExpired\": {\n            \"type\": \"boolean\"\n          },\n          \"errorResult\": {\n            \"type\": \"boolean\",\n            \"writeOnly\": true\n          }\n        }\n      },\n      \"DeferredResultResponseEntityTestResult\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"resultHandler\": {\n            \"$ref\": \"#/components/schemas/DeferredResultHandler\"\n          },\n          \"result\": {\n            \"type\": \"object\"\n          },\n          \"resultInternal\": {\n            \"type\": \"boolean\",\n            \"writeOnly\": true\n          },\n          \"setOrExpired\": {\n            \"type\": \"boolean\"\n          },\n          \"errorResult\": {\n            \"type\": \"boolean\",\n            \"writeOnly\": true\n          }\n        }\n      },\n      \"RegistrationTokenRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\": \"string\"\n          },\n          \"keyDob\": {\n            \"type\": \"string\",\n            \"required\": false,\n            \"description\": \"Only used in conjunction with keyType == GUID. The hashed GUID consists of concat('x', substring(sha256_hex(concat(test-id-uuid, DateOfBirth.format(DDMMYYYY))), 1) - e.g. concat('x', substring(sha256_hex('7bb41672-7de4-44c3-b751-4258e59f3e2508051992')), 1)) --\u003e x3712193bd35d40f03ee497ea7e4ea8278d8fcc8a2287843bb0ab36939d222b4\"\n          },\n          \"keyType\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"GUID\",\n              \"TELETAN\"\n            ]\n          }\n        },\n        \"description\": \"The registration token request model.\"\n      },\n      \"DeferredResultResponseEntityRegistrationToken\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"resultHandler\": {\n            \"$ref\": \"#/components/schemas/DeferredResultHandler\"\n          },\n          \"result\": {\n            \"type\": \"object\"\n          },\n          \"resultInternal\": {\n            \"type\": \"boolean\",\n            \"writeOnly\": true\n          },\n          \"setOrExpired\": {\n            \"type\": \"boolean\"\n          },\n          \"errorResult\": {\n            \"type\": \"boolean\",\n            \"writeOnly\": true\n          }\n        }\n      },\n      \"AuthorizationToken\": {\n        \"required\": [\n          \"token\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"token\": {\n            \"type\": \"string\"\n          }\n        },\n        \"description\": \"The bearer jwt token header model.\"\n      },\n      \"TeleTan\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"value\": {\n            \"type\": \"string\"\n          }\n        },\n        \"description\": \"The teleTAN model.\"\n      },\n      \"Tan\": {\n        \"required\": [\n          \"tan\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"tan\": {\n            \"pattern\": \"^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$\",\n            \"type\": \"string\"\n          },\n          \"responsePadding\": {\n            \"type\": \"string\"\n          }\n        },\n        \"description\": \"The transaction number model.\"\n      }\n    }\n  }\n}\n"
		}
	},
	"Error": "unmarshal: callback: json: cannot unmarshal bool into Go struct field Schema.required of type []string"
}