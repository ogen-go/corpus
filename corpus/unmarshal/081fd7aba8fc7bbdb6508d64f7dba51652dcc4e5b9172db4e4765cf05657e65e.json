{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/cloudrf.com/2.0.0/openapi.yaml",
			"byteSize": 23365,
			"content": "openapi: 3.0.1\nservers:\n  - url: https://api.cloudrf.com\ninfo:\n  contact:\n    email: support@cloudrf.com\n  description: Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key\n  termsOfService: https://cloudrf.com/terms-and-conditions/\n  title: Cloud-RF API\n  version: 2.0.0\n  x-apisguru-categories:\n    - telecom\n    - location\n  x-logo:\n    url: https://cloudrf.com/wp-content/uploads/2021/05/CloudRF_logo_70px.png\n  x-origin:\n    - format: openapi\n      url: https://api.cloudrf.com/swagger-ui/Cloud-RF_API2.0.yaml\n      version: \"3.0\"\n  x-providerName: cloudrf.com\nsecurity:\n  - ApiKeyAuth: []\ntags:\n  - description: Create and test links, site heatmaps and networks\n    externalDocs:\n      description: Find out more\n      url: https://cloudrf.com\n    name: Create, analyse and manage\npaths:\n  /archive/delete:\n    get:\n      description: Warning! you could lose data. This function will delete the entry from the database and the file from the disk. Accidental deletion can be reversed by contacting support with biscuits who maintain an offsite backup.\n      operationId: delete\n      parameters:\n        - description: Unique calculation ID number\n          in: query\n          name: cid\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          content: {}\n          description: Request OK\n      security:\n        - ApiKeyAuth: []\n      summary: Delete a calculation from the database.\n      tags:\n        - Manage\n  /archive/delete/network:\n    get:\n      description: Warning! you could lose data. This function will delete the entry from the database and the file from the disk. Accidental deletion can be reversed by contacting support with biscuits who maintain an offsite backup.\n      operationId: deleteNetwork\n      parameters:\n        - description: Network name\n          in: query\n          name: nid\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content: {}\n          description: Request OK\n      security:\n        - ApiKeyAuth: []\n      summary: Delete an entire network\n      tags:\n        - Manage\n  /archive/export:\n    get:\n      description: Download your data in a format suitable for a third party viewer like Google Earth or ESRI Arcmap.\n      operationId: export\n      parameters:\n        - description: Calculation file name\n          in: query\n          name: file\n          required: true\n          schema:\n            type: string\n        - description: \"Raster/Vector file format: KML, KMZ, SHP, GeoTIFF\"\n          in: query\n          name: fmt\n          required: true\n          schema:\n            enum:\n              - kml\n              - kml\n              - kmzppa\n              - shp\n              - tiff\n            type: string\n      responses:\n        \"200\":\n          content: {}\n          description: Request OK\n      security:\n        - ApiKeyAuth: []\n      summary: Export a calculation in a GIS file format\n      tags:\n        - Manage\n  /archive/list:\n    get:\n      description: List your area and path calculations, sorted by time and limited to the last few hundred. To fetch all for a given network append a 'net' filter with the network name.\n      operationId: list\n      parameters:\n        - description: North bounding box\n          in: query\n          name: n\n          required: false\n          schema:\n            format: float\n            type: number\n        - description: East bounding box\n          in: query\n          name: e\n          required: false\n          schema:\n            format: float\n            type: number\n        - description: South bounding box\n          in: query\n          name: s\n          required: false\n          schema:\n            format: float\n            type: number\n        - description: West bounding box\n          in: query\n          name: w\n          required: false\n          schema:\n            format: float\n            type: number\n      responses:\n        \"200\":\n          content: {}\n          description: Request OK\n      security:\n        - ApiKeyAuth: []\n      summary: List calculations from your archive\n      tags:\n        - Manage\n  /area:\n    post:\n      description: An area coverage assumes the same receiver height at all locations out to fixed radius (maximum 300km). Due to it's exhaustive processing it is the slowest of all the API calls. Speed can be improved significantly by adjusting the resolution 'res' parameter. A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.\n      operationId: area\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                antenna:\n                  $ref: \"#/components/schemas/Antenna\"\n                environment:\n                  $ref: \"#/components/schemas/Environment\"\n                model:\n                  $ref: \"#/components/schemas/Model\"\n                network:\n                  default: Testing\n                  description: Network name/group\n                  maxLength: 24\n                  minLength: 1\n                  type: string\n                output:\n                  $ref: \"#/components/schemas/Output\"\n                receiver:\n                  $ref: \"#/components/schemas/Receiver\"\n                site:\n                  default: A1\n                  description: Site name\n                  maxLength: 24\n                  minLength: 1\n                  type: string\n                transmitter:\n                  $ref: \"#/components/schemas/Transmitter\"\n              type: object\n        description: A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.\n        required: true\n      responses:\n        \"200\":\n          content: {}\n          description: Request OK\n      security:\n        - ApiKeyAuth: []\n      summary: Create a point-to-multipoint heatmap\n      tags:\n        - Create\n  /clutter/add:\n    post:\n      description: Upload GeoJSON lineString and polygon features to your account. The height property is in metres and the material code / type / attenuation are.. 1\tTrees –\t0.25,2Trees +\t0.5,3\tTimber –\t1.0,4\tTimber +\t1.5,5\tBrick – \t1.5,6\tBrick +\t2.0,7\tConcrete –\t3.0,8\tConcrete +\t4.0,9\tMetal\t6.0\n      operationId: addClutter\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                features:\n                  items:\n                    $ref: \"#/components/schemas/Feature\"\n                  type: array\n                name:\n                  default: Clutter\n                  type: string\n                type:\n                  default: FeatureCollection\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content: {}\n          description: Request OK\n      security:\n        - ApiKeyAuth: []\n      summary: Upload clutter data as GeoJSON\n      tags:\n        - Manage\n  /interference:\n    get:\n      description: Merge and analyse sites within a network channel to determine the best server at a given location. Each site will be dynamically allocated a monochrome colour from a palette and the strongest signal promoted at a given location.\n      operationId: interference\n      parameters:\n        - description: Network name eg. Overlapping broadcast stations\n          in: query\n          name: network\n          required: true\n          schema:\n            type: string\n        - description: Interference layer name eg. QRM_map\n          in: query\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content: {}\n          description: Request OK\n      security:\n        - ApiKeyAuth: []\n      summary: Find the best server for overlapping coverage\n      tags:\n        - Analyse\n  /mesh:\n    get:\n      description: A merge of 'area' calculations for a network to create a single super layer. Stronger signals are promoted over weaker ones. The same colour key must be used.\n      operationId: mesh\n      parameters:\n        - description: Network name eg. 100_BLUE_repeaters_nationwide\n          in: query\n          name: network\n          required: true\n          schema:\n            type: string\n        - description: Super layer name eg. National_map\n          in: query\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content: {}\n          description: Request OK\n      security:\n        - ApiKeyAuth: []\n      summary: Merge sites into a super layer.\n      tags:\n        - Analyse\n  /network:\n    get:\n      description: Query your network to find the best server(s) for a given receiver/customer location. A previously generated network is required.\n      operationId: network\n      parameters:\n        - description: Network name\n          in: query\n          name: net\n          required: true\n          schema:\n            type: string\n        - description: Super layer name\n          in: query\n          name: nam\n          required: true\n          schema:\n            type: string\n        - description: Latitude in decimal degrees\n          in: query\n          name: lat\n          required: true\n          schema:\n            format: float\n            type: number\n        - description: Longitude in decimal degrees\n          in: query\n          name: lon\n          required: true\n          schema:\n            format: float\n            type: number\n        - description: Height above ground level in metres\n          in: query\n          name: alt\n          required: true\n          schema:\n            format: int32\n            type: integer\n        - description: Receiver gain in dBi\n          in: query\n          name: rxg\n          required: false\n          schema:\n            format: float\n            type: number\n      responses:\n        \"200\":\n          content: {}\n          description: Request OK\n      security:\n        - ApiKeyAuth: []\n      summary: Find the best server for somewhere\n      tags:\n        - Analyse\n  /path:\n    post:\n      description: A path profile is a single link from A to B. It is much faster than an area calculation and can be used out to 300km. A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.\n      operationId: path\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                antenna:\n                  $ref: \"#/components/schemas/Antenna\"\n                environment:\n                  $ref: \"#/components/schemas/Environment\"\n                model:\n                  $ref: \"#/components/schemas/Model\"\n                network:\n                  default: Testing\n                  description: Network name/group\n                  maxLength: 24\n                  minLength: 1\n                  type: string\n                output:\n                  $ref: \"#/components/schemas/Output\"\n                receiver:\n                  $ref: \"#/components/schemas/Receiver\"\n                site:\n                  default: Link\n                  description: Site name\n                  maxLength: 24\n                  minLength: 1\n                  type: string\n                transmitter:\n                  $ref: \"#/components/schemas/Transmitter\"\n              type: object\n        description: A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.\n        required: true\n      responses:\n        \"200\":\n          content: {}\n          description: Request OK\n      security:\n        - ApiKeyAuth: []\n      summary: Point-to-point path profile analysis (Tx to Rx)\n      tags:\n        - Create\n  /points:\n    post:\n      description: The points function tests many transmitters and one receiver and is designed for route analysis. A minimal request needs a transmitters array of (latitude,longitude,altitude) locations, antenna, receiver and output objects defined as a minimum. Model and environment options will enhance accuracy.\n      operationId: points\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                antenna:\n                  $ref: \"#/components/schemas/Antenna\"\n                environment:\n                  $ref: \"#/components/schemas/Environment\"\n                model:\n                  $ref: \"#/components/schemas/Model\"\n                network:\n                  default: Testing\n                  description: Network name/group\n                  maxLength: 24\n                  minLength: 1\n                  type: string\n                output:\n                  $ref: \"#/components/schemas/Output\"\n                points:\n                  items:\n                    $ref: \"#/components/schemas/Point\"\n                  type: array\n                receiver:\n                  $ref: \"#/components/schemas/Receiver\"\n                site:\n                  default: Points\n                  description: Site name\n                  maxLength: 24\n                  minLength: 1\n                  type: string\n                transmitter:\n                  $ref: \"#/components/schemas/Transmitter\"\n              type: object\n        description: A minimal request needs a transmitters array of (latitude,longitude,altitude) locations, antenna, receiver and output objects defined as a minimum. Model and environment options will enhance accuracy.\n        required: true\n      responses:\n        \"200\":\n          content: {}\n          description: Request OK\n      security:\n        - ApiKeyAuth: []\n      summary: Point-to-multipoint path profile analysis (Many Tx, one Rx)\n      tags:\n        - Create\ncomponents:\n  schemas:\n    Antenna:\n      properties:\n        ant:\n          default: 1\n          description: Antenna pattern code. 1=Vertical dipole (Omni-directional)\n          format: int32\n          type: integer\n        azi:\n          default: 0\n          description: Antenna azimuth in degrees north\n          format: int32\n          maximum: 360\n          minimum: 0\n          type: integer\n        hbw:\n          default: 0\n          description: Custom antenna horizontal beamwidth in degrees. For use only with ant=0\n          format: int32\n          maximum: 360\n          minimum: 0\n          type: integer\n        pol:\n          default: v\n          description: Antenna polarization as either h or v\n          enum:\n            - h\n            - v\n          type: string\n        tlt:\n          default: 0\n          description: Antenna tilt in degrees below the horizon (inverted)\n          format: float\n          maximum: 90\n          minimum: -10\n          type: number\n        txg:\n          default: 2.15\n          description: Transmitter antenna gain in dBi\n          format: float\n          maximum: 60\n          minimum: -10\n          type: number\n        txl:\n          default: 0\n          description: Feeder loss in dB\n          format: float\n          maximum: 60\n          minimum: 0\n          type: number\n        vbw:\n          default: 0\n          description: Custom antenna vertical beamwidth in degrees. For use only with ant=0\n          format: int32\n          maximum: 360\n          minimum: 0\n          type: integer\n      type: object\n    Environment:\n      properties:\n        cll:\n          default: 2\n          description: Clutter loss. 0=None/DSM only, 1=Hard / LOS mode, 2=Soft / NLOS mode\n          format: int32\n          maximum: 2\n          minimum: 1\n          type: integer\n        clm:\n          default: 1\n          description: Clutter mode. 0=None/DSM only, 1=System \u0026 custom clutter, 2=Custom clutter only\n          format: int32\n          maximum: 2\n          minimum: 1\n          type: integer\n        mat:\n          default: 0.25\n          description: Clutter attenuation override in dB/m based on a tree block OR hollow building. Light foliage=0.1dB/m, brick=1.0dB/m, concrete=5dB/m\n          format: float\n          maximum: 9\n          minimum: 0.1\n          type: number\n      type: object\n    Feature:\n      properties:\n        geometry:\n          default: \"{'type':'Polygon','coordinates':[[]]}\"\n          type: string\n        properties:\n          default: \"{'height':4,'material':1}\"\n          type: string\n        type:\n          default: Feature\n          type: string\n      type: object\n    Model:\n      properties:\n        cli:\n          default: 6\n          description: \"Radio climate for ITM model (1). 1: Equatorial (Congo) 2: Continental Subtropical (Sudan) 3: Maritime Subtropical (West coast of Africa) 4: Desert (Sahara) 5: Continental Temperate 6: Maritime Temperate, over land (UK and west coasts of US \u0026 EU) 7: Maritime Temperate, over sea\"\n          format: int32\n          maximum: 7\n          minimum: 1\n          type: integer\n        ked:\n          default: 0\n          description: Knife edge diffraction for enhancing basic empirical models (Already in ITM)\n          maximum: 1\n          minimum: 0\n          type: integer\n        pe:\n          default: 2\n          description: Propagation model subtype/environment. 1=Conservative/Urban,2=Average/Suburban,3=Optimistic/rural\n          format: int32\n          maximum: 3\n          minimum: 1\n          type: integer\n        pm:\n          default: 1\n          description: Propagation model. 1=Irregular Terrain Model, 2=Line of Sight (LOS), 3=Hata, 4=ECC33, 5=SUI Microwave, 6=COST231, 7=Free space path loss, 9=Ericsson9999, 10=Plane earth loss, 11=Egli.\n          format: int32\n          maximum: 20\n          minimum: 1\n          type: integer\n        rel:\n          default: 95\n          description: ITM model required reliability as %\n          format: int32\n          maximum: 99\n          minimum: 50\n          type: integer\n        ter:\n          default: 4\n          description: Terrain code for ITM model (1). 1=Water,2=Wet ground,3=Farmland,4=Forest/Average,5=Mountain/Sand,6=City/Poor ground\n          format: int32\n          maximum: 6\n          minimum: 1\n          type: integer\n      type: object\n    Output:\n      properties:\n        ber:\n          default: 0\n          description: \"Bit error rate. 1=0.1, 2=0.01, 3=0.001, 4=0.0001,5=0.00001,6=0.000001. \u003e6=Lora: 7=SF7,8=SF8,9=SF9,10=SF10,11=SF11,12=SF12\"\n          format: int32\n          maximum: 10\n          minimum: 0\n          type: integer\n        col:\n          default: RAINBOW.dBm\n          description: Colour schema code OR filename. 1 = Cellular (5), 2=Red, 3=Green, 4=Blue, 5=Microwave(7), 7=Custom RGB, 8=Automatic by frequency, 9=Greyscale / GIS, 10=Rainbow(24), 11=Green/Blue/Red, 13=Sub noise floor (10), 14=TV broadcasting (4), 15=Red threshold, 16=Green threshold, 17=Blue threshold. RAINBOW.dBm, CUSTOMSCHEMA.dBm..\n          type: string\n        mod:\n          default: 0\n          description: Modulation. 1=4QAM,2=16QAM,3=64QAM,4=256QAM,5=1024QAM,6=BPSK,7=QPSK,8=8PSK,9=16PSK,10=32PSK,11=LoRa\n          format: int32\n          maximum: 11\n          minimum: 1\n          type: integer\n        nf:\n          default: -114\n          description: Noise floor in dBm for use with out=4 / SNR\n          format: int32\n          maximum: -90\n          minimum: -120\n          type: integer\n        out:\n          default: 2\n          description: Measured units. 1=dB,2=dBm,3=dBuV,4=SNR\n          format: int32\n          maximum: 4\n          minimum: 1\n          type: integer\n        rad:\n          default: 5\n          description: Radius in kilometres for output\n          format: float\n          maximum: 300\n          minimum: 0.03\n          type: number\n        res:\n          default: 10\n          description: Resolution in metres for output\n          format: int32\n          maximum: 200\n          minimum: 2\n          type: integer\n        units:\n          default: metric\n          description: Distance units in either metres/kilometres (metric) or feet/miles (imperial)\n          enum:\n            - metric\n            - imperial\n          type: string\n      type: object\n    Point:\n      properties:\n        alt:\n          default: 1\n          description: Altitude above ground level in metres OR feet\n          format: float\n          maximum: 60000\n          minimum: 0.1\n          type: number\n        lat:\n          default: 38.916\n          description: Latitude in decimal degrees\n          format: float\n          maximum: 89\n          minimum: -89\n          type: number\n        lon:\n          default: 1.411\n          description: Longitude in decimal degrees\n          format: float\n          maximum: 180\n          minimum: -180\n          type: number\n      type: object\n    Receiver:\n      properties:\n        alt:\n          default: 0.1\n          description: Altitude above ground level in metres OR feet\n          format: float\n          maximum: 60000\n          minimum: 0.1\n          type: number\n        lat:\n          default: 0\n          description: Latitude in decimal degrees\n          format: float\n          maximum: 89\n          minimum: -89\n          type: number\n        lon:\n          default: 0\n          description: Longitude in decimal degrees\n          format: float\n          maximum: 180\n          minimum: -180\n          type: number\n        rxg:\n          default: 2.15\n          description: Receiver antenna gain in dBi\n          format: float\n          maximum: 60\n          minimum: -10\n          type: number\n        rxs:\n          default: -90\n          description: Receiver sensitivity/threshold in measured units defined by 'out' param\n          format: float\n          maximum: 200\n          minimum: -140\n          type: number\n      type: object\n    Transmitter:\n      properties:\n        alt:\n          default: 1\n          description: Altitude above ground level in metres OR feet\n          format: float\n          maximum: 60000\n          minimum: 0.1\n          type: number\n        bwi:\n          default: 0.1\n          description: Bandwidth in MHz. 1MHz has a noise floor of -114dBm. 10MHz = -104dBm, 20MHz = -101dBm\n          format: float\n          maximum: 100\n          minimum: 0.1\n          type: number\n        frq:\n          default: 868\n          description: Centre frequency in megahertz\n          format: float\n          maximum: 100000\n          minimum: 1\n          type: number\n        lat:\n          default: 38.916\n          description: Latitude in decimal degrees\n          format: float\n          maximum: 89\n          minimum: -89\n          type: number\n        lon:\n          default: 1.448\n          description: Longitude in decimal degrees\n          format: float\n          maximum: 180\n          minimum: -180\n          type: number\n        txw:\n          default: 0.1\n          description: Transmitter power in watts before the antenna\n          format: float\n          maximum: 2000000\n          minimum: 0.001\n          type: number\n      type: object\n  securitySchemes:\n    ApiKeyAuth:\n      in: header\n      name: key\n      type: apiKey\n"
		}
	},
	"Error": "unmarshal: json: callback: value \"\\\"kml\\\"\" is duplicated"
}