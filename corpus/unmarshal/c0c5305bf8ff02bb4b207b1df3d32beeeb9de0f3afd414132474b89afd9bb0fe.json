{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/LedgerHQ/speculos"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "speculos/api/swagger.yaml",
			"byteSize": 5883,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: \"Speculos API\"\n  version: \"1.0.0\"\n\nservers:\n  - url: \"http://127.0.0.1:5000\"\n\npaths:\n  /apdu:\n    post:\n      summary: \"Transmit APDU and return device response\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Apdu'\n            example: {\"data\": \"e0c0000004\"}\n      responses:\n        \"200\":\n           description: \"Device response to the APDU command\"\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/Apdu'\n               example: {\"data\": \"105e441f9000\"}\n\n  /automation:\n    post:\n      summary: \"Updates the automation rules\"\n      externalDocs:\n        description: More information about the automation feature and the rules format can be found in the speculos documentation.\n        url: https://github.com/LedgerHQ/speculos/blob/master/docs/user/automation.md\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              full-syntax:\n                summary: Regexp, conditions and actions\n                value: { \"version\": 1, \"rules\": [ { \"text\": \"Application\", \"x\": 35, \"y\": 3, \"conditions\": [ [ \"seen\", false ] ], \"actions\": [ [ \"button\", 2, true ], [ \"button\", 2, false ], [ \"setbool\", \"seen\", true ] ] }, { \"regexp\": \"\\\\d+\", \"actions\": [ [ \"exit\" ] ] }, { \"actions\": [ [ \"setbool\", \"default_match\", true ] ] } ] }\n              press-buttons:\n                summary: Press both button when the text \"Approve\" is displayed\n                value: {\"version\": 1, \"rules\": [ { \"text\": \"Approve\", \"actions\": [ [ \"button\", 1, true ], [ \"button\", 2, true ], [ \"button\", 1, false ], [ \"button\", 2, false ] ] } ] }\n      responses:\n        \"200\":\n          description: \"successful operation\"\n\n  /button/{button}:\n    post:\n      summary: \"Press or release a button (Nano S and Nano X)\"\n      parameters:\n      - name: \"button\"\n        description: \"Button to press\"\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/ButtonName'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Button'\n            examples:\n              button-press-and-release:\n                summary: Press and release the specified button\n                value: {\"action\": \"press-and-release\"}\n      responses:\n        \"200\":\n          description: \"successful operation\"\n        \"400\":\n          description: \"invalid parameter\"\n\n  /events:\n    get:\n      summary: \"Get the events produced by the app\"\n      parameters:\n      - name: \"stream\"\n        description: \"Stream the events instead of returning a list\"\n        in: query\n        required: false\n        schema:\n          type: boolean\n          default: false\n      responses:\n        \"200\":\n          description: \"List of events separated by line-returns\"\n          content:\n            text/event-stream:\n              schema:\n                type: string\n              example: '{\"text\": \"Application\", \"x\": 35, \"y\": 3}\\n{\"text\": \"is ready\", \"x\": 44, \"y\": 17}\\n{\"text\": \"Settings\", \"x\": 41, \"y\": 19}\\n'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventList'\n              example: {\"events\": [{\"text\": \"Application\", \"x\": 35, \"y\": 3}, {\"text\": \"is ready\", \"x\": 44, \"y\": 17}, {\"text\": \"Settings\", \"x\": 41, \"y\": 19}]}\n    delete:\n      summary: \"Reset the list of events\"\n      responses:\n        \"200\":\n          description: \"successful operation\"\n\n  /finger:\n    post:\n      summary: \"Touch the screen (Blue)\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Finger'\n            examples:\n              finger-press-and-release:\n                summary: Press and release\n                value: {\"action\": \"press-and-release\", \"x\": 10, \"y\": 25}\n      responses:\n        \"200\":\n          description: \"successful operation\"\n        \"400\":\n          description: \"invalid parameter\"\n\n  /screenshot:\n    get:\n      summary: \"Get a screenshot\"\n      responses:\n        \"200\":\n          description: \"Image in format PNG\"\n          content:\n            image/png:\n              schema:\n                type: string\n                format: binary\ncomponents:\n  schemas:\n    Apdu:\n      type: object\n      properties:\n        data:\n          description: APDU data, in hexadecimal.\n          type: string\n          pattern: '^([0-9a-fA-F]{2})+$'\n      required:\n        - data\n    Button:\n      type: object\n      properties:\n        action:\n          description: Press, release or press and release the specified button(s).\n          type: string\n          enum: [press, release, press-and-release]\n        delay:\n          $ref: '#/components/schemas/Delay'\n      required:\n      - action\n    ButtonName:\n      type: string\n      enum: [left, right, both]\n    Delay:\n      description: Delay in seconds between press and release, ignored if action isn't `press-and-released`.\n      type: number\n      format: float\n      default: 0.1\n    EventList:\n      type: object\n      properties:\n        events:\n          type: array\n          items:\n            type: object\n    Finger:\n      type: object\n      properties:\n        action:\n          description: Press, release or press and release.\n          type: string\n          enum: [press, release, press-and-release]\n        x:\n          description: \"Vertical position\"\n          type: integer\n        y:\n          description: \"Horizontal position\"\n          type: integer\n        delay:\n          $ref: '#/components/schemas/Delay'\n      required:\n      - action\n      - x\n      - y\n",
			"canonicalURL": "/github.com/LedgerHQ/speculos@8657b297798561a09d057b472f0e5d5fd9a58993/-/blob/speculos/api/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/LedgerHQ/speculos/blob/8657b297798561a09d057b472f0e5d5fd9a58993/speculos/api/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:1116: json: cannot unmarshal bool into Go struct field Schema.components.schemas.required of type string"
}