{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/strapi/strapi"
		},
		"file": {
			"name": "oas.yml",
			"size": 0,
			"path": "packages/core/content-manager/oas.yml",
			"byteSize": 25291,
			"content": "openapi: 3.0.2\ninfo:\n  title: Strapi Content Manager API\n  version: 1.0.0\nservers:\n  - url: http://localhost:1337\n    description: Local server\nexternalDocs:\n  url: https://docs.strapi.io\n  description: Strapi documentation\npaths:\n  /content-manager/content-types:\n    get:\n      tags:\n        - ContentTypes\n      description: List content types\n      parameters:\n        - $ref: '#/components/parameters/kind'\n      responses:\n        200:\n          description: A list of content types\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/contentType'\n  /content-manager/content-types-settings:\n    get:\n      tags:\n        - ContentTypes\n      description: List content types settings\n      responses:\n        200:\n          description: A list of content types settings\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/contentTypeSettings'\n  /content-manager/content-types/{uid}/configuration:\n    get:\n      tags:\n        - ContentTypes\n      description: Get content type configuration\n      parameters:\n        - $ref: '#/components/parameters/uid'\n      responses:\n        200:\n          description: A content type configuration with its components configuration\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      contentType:\n                        $ref: '#/components/schemas/content-type-configuration'\n                      components:\n                        type: object\n                        additionalProperties:\n                          $ref: '#/components/schemas/component-configuration'\n    put:\n      tags:\n        - ContentTypes\n      description: Edit content type configuration\n      parameters:\n        - $ref: '#/components/parameters/uid'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/configuration'\n      responses:\n        200:\n          description: A content type configuration\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/content-type-configuration'\n  /content-manager/components:\n    get:\n      tags:\n        - Components\n      description: List components\n      responses:\n        200:\n          description: A list of components\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/component'\n  /content-manager/components/{uid}/configuration:\n    get:\n      tags:\n        - Components\n      description: Get content type configuration\n      parameters:\n        - $ref: '#/components/parameters/uid'\n      responses:\n        200:\n          description: A component configuration with its components configuration\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      component:\n                        $ref: '#/components/schemas/component-configuration'\n                      components:\n                        type: object\n                        additionalProperties:\n                          $ref: '#/components/schemas/component-configuration'\n    put:\n      tags:\n        - Components\n      description: Edit component configuration\n      parameters:\n        - $ref: '#/components/parameters/uid'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/configuration'\n      responses:\n        200:\n          description: A component configuration with its components configuration\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/component-configuration'\n  # UID\n  /content-manager/uid/generate:\n    post:\n      tags:\n        - UID attribute utils\n      description: Generate a uid\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - contentTypeUID\n                - field\n                - data\n              properties:\n                contentTypeUID:\n                  type: string\n                field:\n                  type: string\n                data:\n                  type: object\n                  description: Current value of the entry being created or edited\n      responses:\n        200:\n          description: A generated uid value\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - data\n                properties:\n                  data:\n                    type: string\n  /content-manager/uid/check-availability:\n    post:\n      tags:\n        - UID attribute utils\n      description: Check availability of a uid\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - contentTypeUID\n                - field\n                - value\n              properties:\n                contentTypeUID:\n                  type: string\n                field:\n                  type: string\n                value:\n                  type: string\n      responses:\n        200:\n          description: A generated uid value\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - isAvailable\n                properties:\n                  isAvailable:\n                    type: boolean\n                  suggestion:\n                    type: string\n                    description: Suggestion if request value is not available\n  # Relationships\n  /content-manager/relations/{model}/{targetField}:\n    post:\n      tags:\n        - Relational fields\n      description: Get available entries to add to a relational field\n      parameters:\n        - in: path\n          name: model\n          schema:\n            type: string\n          required: true\n          description: Content type uid or component uid depending on what holds the relation\n        - in: path\n          name: targetField\n          schema:\n            type: string\n          required: true\n          description: Name of the field in the model that holds the relation\n        - in: query\n          name: entityId\n          schema:\n            type: string\n          description: Id of the entry or the component, used to omit already existing relations (if the entity already exists)\n        - in: query\n          name: idsToOmit\n          schema:\n            type: array\n            items:\n              type: string\n              name: id\n          description: Used to omit ids of client-side selected relations (for entities that haven’t been created in the DB yet)\n        - in: query\n          name: idsToInclude\n          schema:\n            type: array\n            items:\n              type: string\n              name: id\n          description: Used to include ids of client-side unselected relations (for entities that haven’t been removed from the DB yet)\n        - in: query\n          name: _q\n          schema:\n            type: string\n          description: Search among the available relations (against the main field only)\n        - in: query\n          name: page\n          schema:\n            type: integer\n          description: Page number to fetch\n        - in: query\n          name: pageSize\n          schema:\n            type: integer\n          description: Page size to fetch\n\n      responses:\n        200:\n          description: Returns a list of sanitized entries based of the relational attribute info\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    results:\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          id:\n                            $ref: '#/components/schemas/id'\n                          '[mainField]':\n                            type: string\n                            description: Value of the mainField of the entry\n                          publishedAt:\n                            type: date\n                    pagination:\n                      $ref: '#/components/schemas/pagination'\n\n  /content-manager/relations/{model}/{id}/{targetField}:\n    post:\n      tags:\n        - Relational fields\n      description: Get existing entries for a relational field of an entry\n      parameters:\n        - in: path\n          name: model\n          schema:\n            type: string\n          required: true\n          description: Content type uid or component uid depending on what holds the relation\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: Id of the entity (entry or component) that holds the relation\n        - in: path\n          name: targetField\n          schema:\n            type: string\n          required: true\n          description: Name of the field in the model that holds the relation\n        - in: query\n          name: page\n          schema:\n            type: integer\n          description: Page number to fetch\n        - in: query\n          name: pageSize\n          schema:\n            type: integer\n          description: Page size to fetch\n\n      responses:\n        200:\n          description: Returns a list of sanitized entries based of the relational attribute info\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - type: object\n                      properties:\n                        results:\n                          type: array\n                          items:\n                            type: object\n                            properties:\n                              id:\n                                $ref: '#/components/schemas/id'\n                              '[mainField]':\n                                type: string\n                                description: Value of the mainField of the entry\n                              publishedAt:\n                                type: date\n                        pagination:\n                          $ref: '#/components/schemas/pagination'\n                    - type: object\n                      properties:\n                        data:\n                          type: object\n                          properties:\n                            id:\n                              $ref: '#/components/schemas/id'\n                            '[mainField]':\n                              type: string\n                              description: Value of the mainField of the entry\n                            publishedAt:\n                              type: date\n\n  # Collection type\n  /content-manager/collection-types/{model}:\n    get:\n      tags:\n        - Collection Types content management\n      description: |\n        Get a list of entries\n\n        All components and dynamic zones along with relations (1 level only) are automatically populated.\n\n        xToMany relations are counted (exemple: { count: 4 }).\n      parameters:\n        - $ref: '#/components/parameters/model'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/entity'\n                  pagination:\n                    $ref: '#/components/schemas/pagination'\n    post:\n      tags:\n        - Collection Types content management\n      description: Create an entry\n      parameters:\n        - $ref: '#/components/parameters/model'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/entityInput'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/entity'\n  /content-manager/collection-types/{model}/actions/bulkDelete:\n    post:\n      tags:\n        - Collection Types content management\n      description: Bulk delete entries\n      parameters:\n        - $ref: '#/components/parameters/model'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ids:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/id'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/entity'\n  /content-manager/collection-types/{model}/{id}:\n    get:\n      tags:\n        - Collection Types content management\n      description: |\n        Get one entry\n\n        All components and dynamic zones along with relations (1 level only) are automatically populated.\n\n        All relations are counted (exemple: { count: 4 }).\n      parameters:\n        - $ref: '#/components/parameters/model'\n        - $ref: '#/components/parameters/entity-id'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/entity'\n    put:\n      tags:\n        - Collection Types content management\n      description: Update one entry\n      parameters:\n        - $ref: '#/components/parameters/model'\n        - $ref: '#/components/parameters/entity-id'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/entityInput'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/entity'\n    delete:\n      tags:\n        - Collection Types content management\n      description: Delete one entry\n      parameters:\n        - $ref: '#/components/parameters/model'\n        - $ref: '#/components/parameters/entity-id'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/entity'\n  /content-manager/collection-types/{model}/{id}/actions/publish:\n    post:\n      tags:\n        - Collection Types content management\n      description: Publish one entry\n      parameters:\n        - $ref: '#/components/parameters/model'\n        - $ref: '#/components/parameters/entity-id'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/entity'\n                  - type: object\n                    properties:\n                      publishedAt:\n                        type: datetime\n  /content-manager/collection-types/{model}/{id}/actions/unpublish:\n    post:\n      tags:\n        - Collection Types content management\n      description: Unpublish one entry\n      parameters:\n        - $ref: '#/components/parameters/model'\n        - $ref: '#/components/parameters/entity-id'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/entity'\n                  - type: object\n                    properties:\n                      publishedAt:\n                        type: datetime\n  /content-manager/collection-types/{model}/{id}/actions/numberOfDraftRelations:\n    get:\n      tags:\n        - Collection Types content management\n      description: Get the number of relations of that entry that are in draft\n      parameters:\n        - $ref: '#/components/parameters/model'\n        - $ref: '#/components/parameters/entity-id'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: integer\n  # Single type\n  /content-manager/single-types/{model}:\n    get:\n      tags:\n        - Single Types content management\n      description: Find Single type content\n      parameters:\n        - $ref: '#/components/parameters/model'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/entity'\n    put:\n      tags:\n        - Single Types content management\n      description: Update Single type content\n      parameters:\n        - $ref: '#/components/parameters/model'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/entityInput'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/entity'\n    delete:\n      tags:\n        - Single Types content management\n      description: Delete Single type content\n      parameters:\n        - $ref: '#/components/parameters/model'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/entity'\n  /content-manager/single-types/{model}/actions/publish:\n    post:\n      tags:\n        - Single Types content management\n      description: Publish Single type content\n      parameters:\n        - $ref: '#/components/parameters/model'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/entity'\n                  - type: object\n                    properties:\n                      publishedAt:\n                        type: datetime\n  /content-manager/single-types/{model}/actions/unpublish:\n    post:\n      tags:\n        - Single Types content management\n      description: Unpublish Single type content\n      parameters:\n        - $ref: '#/components/parameters/model'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/entity'\n                  - type: object\n                    properties:\n                      publishedAt:\n                        type: datetime\n                        nullable: true\n  /content-manager/single-types/{model}/actions/numberOfDraftRelations:\n    get:\n      tags:\n        - Single Types content management\n      description: Get the number of relations of that entry that are in draft\n      parameters:\n        - $ref: '#/components/parameters/model'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: integer\n\ncomponents:\n  schemas:\n    id:\n      oneOf:\n        - type: integer\n        - type: string\n\n    pagination:\n      type: object\n      properties:\n        page:\n          type: integer\n        pageSize:\n          type: integer\n        pageCount:\n          type: integer\n        total:\n          type: integer\n\n    entity:\n      type: object\n      required:\n        - id\n        - createdBy\n        - updatedBy\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        createdBy:\n          $ref: '#/components/schemas/user'\n        updatedBy:\n          $ref: '#/components/schemas/user'\n      additionalProperties:\n        type: any\n\n    entityInput:\n      type: object\n      additionalProperties:\n        type: any\n\n    contentTypeSettings:\n      type: object\n      properties:\n        uid:\n          type: string\n          description: Model uid\n        settings:\n          $ref: '#/components/schemas/configurationSettings'\n\n    contentType:\n      type: object\n      properties:\n        uid:\n          type: string\n          description: Model uid\n        kind:\n          $ref: '#/components/schemas/kind'\n        isDisplayed:\n          type: boolean\n        apiID:\n          type: string\n          description: Model key based on filename\n        info:\n          type: object\n          properties:\n            name:\n              type: string\n              description: User defined name\n            label:\n              type: string\n              description: Computed label with pluralization\n            description:\n              type: string\n              description: Content type description\n\n        options:\n          type: object\n          properties:\n            increments:\n              type: boolean\n            timestamps:\n              type: array\n              uniqueItems: true\n              minItems: 2\n              maxItems: 2\n              items:\n                type: string\n            draftAndPublish:\n              type: boolean\n        attributes:\n          type: object\n          additionalProperties:\n            oneOf:\n              - $ref: '#/components/schemas/scalarAttribute'\n              - $ref: '#/components/schemas/relationalAttribute'\n\n    component:\n      allOf:\n        - type: object\n          properties:\n            category:\n              type: string\n              description: Component category\n\n        - $ref: '#/components/schemas/contentType'\n\n    scalarAttribute:\n      type: object\n      properties:\n        type:\n          type: string\n        required:\n          type: boolean\n\n    relationalAttribute:\n      type: object\n      properties:\n        type:\n          type: string\n\n        targetModel:\n          type: string\n        relationType:\n          type: string\n          enum:\n            - oneWay\n            - manyWay\n            - oneToOne\n            - oneToMany\n            - manyToOne\n            - manyToMany\n\n    configurationSettings:\n      type: object\n      properties:\n        searchable:\n          type: boolean\n        bulkable:\n          type: boolean\n        filterable:\n          type: boolean\n        pageSize:\n          type: integer\n        mainField:\n          type: string\n        defaultSortBy:\n          type: string\n        defaultSortOrder:\n          type: string\n\n    configuration:\n      type: object\n      properties:\n        settings:\n          $ref: '#/components/schemas/configurationSettings'\n        metadatas:\n          type: object\n        layouts:\n          type: object\n          properties:\n            list:\n              type: array\n              items:\n                type: string\n            edit:\n              type: array\n              items:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    name: string\n                    size: integer\n\n    content-type-configuration:\n      allOf:\n        - type: object\n          properties:\n            uid:\n              type: string\n        - $ref: '#/components/schemas/configuration'\n\n    component-configuration:\n      allOf:\n        - type: object\n          properties:\n            isComponent:\n              type: boolean\n        - $ref: '#/components/schemas/content-type-configuration'\n\n    kind:\n      type: string\n      enum:\n        - singleType\n        - collectionType\n\n    user:\n      type: object\n      properties:\n        id:\n          oneOf:\n            - type: integer\n            - type: string\n        firstname:\n          type: string\n        lastname:\n          type: string\n        email:\n          type: string\n\n  parameters:\n    kind:\n      in: query\n      name: kind\n      schema:\n        $ref: '#/components/schemas/kind'\n      description: A content type kind (singleType or collectionType)\n\n    model:\n      in: path\n      name: model\n      schema:\n        type: string\n      required: true\n      description: Model uid\n\n    uid:\n      in: path\n      name: uid\n      schema:\n        type: string\n      required: true\n      description: Model uid\n\n    entity-id:\n      in: path\n      name: id\n      schema:\n        type: string\n      required: true\n      description: Entity id\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n\nsecurity:\n  - bearerAuth: []\n",
			"canonicalURL": "/github.com/strapi/strapi@d28ec979176bacb8661f7bbb38fb616f7b530ba1/-/blob/packages/core/content-manager/oas.yml",
			"externalURLs": [
				{
					"url": "https://github.com/strapi/strapi/blob/d28ec979176bacb8661f7bbb38fb616f7b530ba1/packages/core/content-manager/oas.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 823: cannot unmarshal !!str `string` into ogen.Schema"
}