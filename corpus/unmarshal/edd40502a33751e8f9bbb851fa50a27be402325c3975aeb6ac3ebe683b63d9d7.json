{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/akraino-edge-stack/icn-sdwan"
		},
		"file": {
			"name": "scc_apis.yaml",
			"size": 0,
			"path": "central-controller/docs/scc_apis.yaml",
			"byteSize": 27359,
			"content": "\nopenapi: 3.0.2\ninfo:\n  version: '2.0.0'\n\n  title: SCC\n\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  x-logo:\n    url: 'https://redocly.github.io/openapi-template/logo.png'\n\n  description: |\n    SCC - SDEWAN Central Controller\n\nexternalDocs:\n  description: Wiki for the API's.\n  url: 'https://wiki.akraino.org/display/AK/SDEWAN+Central+Controller'\n\ntags:\n  - name: v1\n    description: |\n     SCC V1 API\n\npaths:\n  ############################ Overlay Registration API'S #################################################\n  /overlays:\n    post:\n      tags:\n        - Overlay Registration\n      summary: Overlay Registration\n      description: Add a new `Overlay`\n      operationId: addOverlay\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/Overlay'\n        '409':\n          description: Name conflict\n          content: {}\n        '422':\n          description: Invalid Input\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/Overlay'\n        description: Overlay Info\n        required: true\n    get: # documentation for GET operation for this path\n          tags:\n            - Overlay Registration\n          summary: Get all overlays\n\n          description: |\n            Get all `overlays`\n\n          operationId: getOverlays\n          responses: # list of responses\n            '200':\n              description: Success\n              content:\n                application/json: # operation response mime type\n                  schema:\n                    $ref: '#/components/schemas/OverlayArray'\n            '500':\n              description: Internal error\n              content: {}\n\n  /overlays/{overlay-name}:\n    # parameters list that are used with each operation for this path\n    parameters:\n    - $ref: '#/components/parameters/OverlayName'\n    get: # documentation for GET operation for this path\n      tags:\n        - Overlay Registration\n      summary: Get overlay by name\n\n      description: overlay name\n      responses: # list of responses\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/Overlay'\n        '500':\n          description: Internal error\n          content: {}\n    put:\n      tags:\n        - Overlay Registration\n      summary: Update overlay\n      description: Update `overlay`\n      operationId: updateOverlay\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/Overlay'\n        '422':\n          description: Invalid data\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n      # request body documentation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Overlay'\n        description: Update overlay object\n        required: true\n    delete: # documentation for DELETE operation for this path\n      tags:\n        - Overlay Registration\n      summary: Delete overlay\n\n      description: |\n        Delete `overlay`\n\n      operationId: deleteOverlay\n      responses: # list of responses\n        '204':\n          description: Deleted\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n  ############################ Proposal Registration API'S #################################################\n  /overlays/{overlay-name}/proposals:\n    parameters:\n    - $ref: '#/components/parameters/OverlayName'\n    post:\n      tags:\n        - Proposal Registration\n      summary: Proposal Registration\n      description: Add a new `Proposal`\n      operationId: addProposal\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/Proposal'\n        '409':\n          description: Name conflict\n          content: {}\n        '422':\n          description: Invalid Input\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/Proposal'\n        description: Proposal Info\n        required: true\n    get: # documentation for GET operation for this path\n          tags:\n            - Proposal Registration\n          summary: Get all proposals\n\n          description: |\n            Get all `proposals`\n\n          operationId: getProposals\n          responses: # list of responses\n            '200':\n              description: Success\n              content:\n                application/json: # operation response mime type\n                  schema:\n                    $ref: '#/components/schemas/ProposalArray'\n            '500':\n              description: Internal error\n              content: {}\n\n  /overlays/{overlay-name}/proposals/{proposal-name}:\n    # parameters list that are used with each operation for this path\n    parameters:\n    - $ref: '#/components/parameters/OverlayName'\n    - $ref: '#/components/parameters/ProposalName'\n    get: # documentation for GET operation for this path\n      tags:\n        - Proposal Registration\n      summary: Get proposal by name\n\n      description: proposal name\n      responses: # list of responses\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/Proposal'\n        '500':\n          description: Internal error\n          content: {}\n    put:\n      tags:\n        - Proposal Registration\n      summary: Update proposal\n      description: Update `proposal`\n      operationId: updateProposal\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/Proposal'\n        '422':\n          description: Invalid data\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n      # request body documentation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Proposal'\n        description: Update Proposal object\n        required: true\n    delete: # documentation for DELETE operation for this path\n      tags:\n        - Proposal Registration\n      summary: Delete proposal\n\n      description: |\n        Delete `proposal`\n\n      operationId: deleteProposal\n      responses: # list of responses\n        '204':\n          description: Deleted\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n          \n  ############################ Hub Registration API'S #################################################\n  /overlays/{overlay-name}/hubs:\n    parameters:\n    - $ref: '#/components/parameters/OverlayName'\n    post:\n      tags:\n        - Hub Registration\n      summary: Hub\n      description: Add a new `hub`\n      operationId: addHub\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/Hub'\n        '409':\n          description: Name conflict\n          content: {}\n        '422':\n          description: Invalid Input\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/Hub'\n        description: Traffic Hub information\n        required: true\n\n    get: # documentation for GET operation for this path\n      tags:\n        - Hub Registration\n      summary: Get all registered hubs\n\n      description: |\n        Get all `hubs`\n\n      operationId: getAllHubs\n      responses: # list of responses\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/HubArray'\n        '500':\n          description: Internal error\n          content: {}\n\n  /overlays/{overlay-name}/hubs/{hub-name}:\n    # parameters list that are used with each operation for this path\n    parameters:\n    - $ref: '#/components/parameters/OverlayName'\n    - $ref: '#/components/parameters/HubName'\n    get: # documentation for GET operation for this path\n      tags:\n        - Hub Registration\n      summary: Get a traffic hub by hub name\n\n      description: |\n        Get `hub`\n\n      operationId: getHubByName\n      responses: # list of responses\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/Hub'\n        '500':\n          description: Internal error\n          content: {}\n    put:\n      tags:\n        - Hub Registration\n      summary: Update Hub\n      description: Update `hub`\n      operationId: updateHub\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/Hub'\n        '422':\n          description: Invalid data\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n      # request body documentation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Hub'\n        description: Update hub object\n        required: true\n    delete: # documentation for DELETE operation for this path\n      tags:\n        - Hub Registration\n      summary: Delete hub by hub name\n\n      description: |\n        Delete `hub`\n\n      operationId: deleteHubByName\n      responses: # list of responses\n        '204':\n          description: Deleted\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n\n  ############################ Hub connection API'S #################################################\n  /overlays/{overlay-name}/hubs/{hub-name}/connections:\n    parameters:\n    - $ref: '#/components/parameters/OverlayName'\n    - $ref: '#/components/parameters/HubName'\n\n    get: # get all connections (hub or device) to this hub\n      tags:\n        - Hub Connection\n      summary: Get all connections\n\n      description: |\n        Get all `connections`\n\n      operationId: getAllHubConnections\n      responses: # list of responses\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/ConnectionArray'\n        '500':\n          description: Internal error\n          content: {}\n\n  /overlays/{overlay-name}/hubs/{hub-name}/devices/{device-name}:\n    # parameters list that are used with each operation for this path\n    parameters:\n    - $ref: '#/components/parameters/OverlayName'\n    - $ref: '#/components/parameters/HubName'\n    - $ref: '#/components/parameters/DeviceName'\n    post: # documentation for GET operation for this path\n      tags:\n        - Hub Connection\n      summary: create hub-device connection\n\n      description: |\n        create `hub-device connection`\n\n      operationId: addHubConnection\n      responses: # list of responses\n        '201':\n          description: Success\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n    delete: # documentation for DELETE operation for this path\n      tags:\n        - Hub Connection\n      summary: Delete hub-device connection\n\n      description: |\n        Delete `hub-device connection`\n\n      operationId: deleteHubConnection\n      responses: # list of responses\n        '204':\n          description: Deleted\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n  ############################ Device Registration API'S #################################################\n  /overlays/{overlay-name}/devices:\n    parameters:\n    - $ref: '#/components/parameters/OverlayName'\n    post:\n      tags:\n        - Device Registration\n      summary: Edge location device Registration\n      description: Add a new `device`\n      operationId: addDevice\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/Device'\n        '409':\n          description: Name conflict\n          content: {}\n        '422':\n          description: Invalid Input\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/Device'\n        description: Edge location device Info\n        required: true\n    get: # documentation for GET operation for this path\n          tags:\n            - Device Registration\n          summary: Get all devices\n\n          description: |\n            Get all `devices`\n\n          operationId: getDevices\n          responses: # list of responses\n            '200':\n              description: Success\n              content:\n                application/json: # operation response mime type\n                  schema:\n                    $ref: '#/components/schemas/DeviceArray'\n            '500':\n              description: Internal error\n              content: {}\n\n  /overlays/{overlay-name}/devices/{device-name}:\n    # parameters list that are used with each operation for this path\n    parameters:\n    - $ref: '#/components/parameters/OverlayName'\n    - $ref: '#/components/parameters/DeviceName'\n    get: # documentation for GET operation for this path\n      tags:\n        - Device Registration\n      summary: Get device by name\n\n      description: edge location device name\n      responses: # list of responses\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/Device'\n        '500':\n          description: Internal error\n          content: {}\n    put:\n      tags:\n        - Device Registration\n      summary: Update device\n      description: Update `device`\n      operationId: updateDevice\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/Device'\n        '422':\n          description: Invalid data\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n      # request body documentation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Device'\n        description: Update devices object\n        required: true\n    delete: # documentation for DELETE operation for this path\n      tags:\n        - Device Registration\n      summary: Delete device\n\n      description: |\n        Delete `device`\n\n      operationId: deleteDevice\n      responses: # list of responses\n        '204':\n          description: Deleted\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n\n  ############################ Device connection API'S #################################################\n  /overlays/{overlay-name}/devices/{device-name}/connections:\n    parameters:\n    - $ref: '#/components/parameters/OverlayName'\n    - $ref: '#/components/parameters/DeviceName'\n\n    get: # get all connections (hub or device) to this device\n      tags:\n        - Device Connection\n      summary: Get all connections\n\n      description: |\n        Get all `connections`\n\n      operationId: getAllDeviceConnections\n      responses: # list of responses\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/ConnectionArray'\n        '500':\n          description: Internal error\n          content: {}\n  \n  ############################ IP ranges API'S #################################################\n  /overlays/{overlay-name}/ipranges:\n    parameters:\n    - $ref: '#/components/parameters/OverlayName'\n    post:\n      tags:\n        - IP range Registration\n      summary: IP range\n      description: Add a new `ip range`\n      operationId: addIpRange\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/IpRange'\n        '409':\n          description: Name conflict\n          content: {}\n        '422':\n          description: Invalid Input\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/IpRange'\n        description: Ip range information\n        required: true\n\n    get: # documentation for GET operation for this path\n      tags:\n        - IP range Registration\n      summary: Get all ip ranges\n\n      description: |\n        Get all `ip ranges`\n\n      operationId: getAllIpRanges\n      responses: # list of responses\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/IpRangeArray'\n        '500':\n          description: Internal error\n          content: {}\n\n  /overlays/{overlay-name}/ipranges/{iprange-name}:\n    # parameters list that are used with each operation for this path\n    parameters:\n    - $ref: '#/components/parameters/OverlayName'\n    - $ref: '#/components/parameters/IpRangeName'\n    get: # documentation for GET operation for this path\n      tags:\n        - IP range Registration\n      summary: Get a Ip range by ip range name\n\n      description: |\n        Get `ip range`\n\n      operationId: getIpRangeByName\n      responses: # list of responses\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/IpRange'\n        '500':\n          description: Internal error\n          content: {}\n    put:\n      tags:\n        - IP range Registration\n      summary: Update ip range\n      description: Update `ip range`\n      operationId: updateIpRange\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema:\n                $ref: '#/components/schemas/IpRange'\n        '422':\n          description: Invalid data\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n      # request body documentation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IpRange'\n        description: Update ip range object\n        required: true\n    delete: # documentation for DELETE operation for this path\n      tags:\n        - IP range Registration\n      summary: Delete ip range by ip range name\n\n      description: |\n        Delete `ip range`\n\n      operationId: deleteIpRangeByName\n      responses: # list of responses\n        '204':\n          description: Deleted\n          content: {}\n        '500':\n          description: Internal error\n          content: {}\n     \n######################### SCHEMAS ####################################################\n# An object to hold reusable parts that can be used across the definition\ncomponents:\n  schemas:\n    MetadataBase:\n      type: object\n      properties:\n        name:\n          description: Name of the resource\n          type: string\n          maxLength: 128\n          example: \"ResName\"\n        description:\n          description: Description for the resource\n          type: string\n          maxLength: 1024\n          example: \"Resource description\"\n        userData1:\n          description: User relevant data for the resource\n          type: string\n          maxLength: 512\n          example: \"Some data\"\n        userData2:\n          description: User relevant data for the resource\n          type: string\n          maxLength: 512\n          example: \"Some more data\"\n    Metadata:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/MetadataBase'\n    MetadataArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/Metadata'\n    ProposalSpec:\n      type: object\n      properties:\n        encryption:\n          description: encryption algorithm\n          type: string\n          maxLength: 1024\n          example: \"aes256\"\n        hash:\n          type: string\n          description: hash algorithm\n          example: \"sha256\"\n        dhGroup:\n          type: string\n          description: dh group\n          example: \"modp4096\"\n      required:\n      - encryption\n      - hash\n      - dhGroup\n    Proposal:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/MetadataBase'\n        spec:\n          $ref: '#/components/schemas/ProposalSpec'\n    ProposalArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/Proposal'\n    HubSpec:\n      type: object\n      properties:\n        publicIps:\n          description: public ip list for the traffic hub\n          type: string\n          maxLength: 1024\n          example: \"192.168.10.1;192.168.10.2\"\n        kubeConfig:\n          type: string\n          description: kubeconfiguration information for the traffic hub device\n          example: \"token\"\n      required:\n      - publicIps\n      - kubeConfig\n    Hub:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/MetadataBase'\n        spec:\n          $ref: '#/components/schemas/HubSpec'\n    HubArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/Hub'\n    DeviceSpec:\n      type: object\n      properties:\n        publicIps:\n          description: public ip list for the devices\n          type: string\n          maxLength: 1024\n          example: \"192.168.10.1;192.168.10.2\"\n        forceHubConnectivity:\n          description: Whether connect Hub for connectivity, Valid only if \"External IP address type is Public\"\n          type: boolean\n          example: false\n        proxyHub:\n          description: Name of proxy hub which used for connectivity, Valid only if \"forceHubConnectivity is true\"\n          type: string\n          example: \"hub1\"\n        proxyHubPort:\n          description: the port used by proxy hub to connect this device, Valid only if \"forceHubConnectivity is true\"\n          type: integer\n          example: 9001  \n        kubeConfig:\n          type: string\n          description: kubeconfiguration information for the traffic hub device\n          example: \"token\"\n      required:\n      - name\n      - kubeConfig\n    Device:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/MetadataBase'\n        spec:\n          $ref: '#/components/schemas/DeviceSpec'\n    DeviceArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/Device'\n    ConnectionEnd:\n      type: object\n      properties:\n        name:\n          type: string\n          description: connection end name\n          example: \"Hub.hub1\"\n        type:\n          type: string\n          description: connection end type\n          example: \"Hub\"\n        ip:\n          type: string\n          description: ip used for connection end\n          example: \"10.10.10.10\"\n    ConnectionInfo:\n      type: object\n      properties:\n        end1:\n          $ref: '#/components/schemas/ConnectionEnd'\n        end2:\n          $ref: '#/components/schemas/ConnectionEnd'\n        state:\n          type: string\n          description: connection state\n          example: \"Deployed\"\n        message:\n          type: string\n          description: error message if connection state is Error\n          example: \"\"\n    Connection:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/MetadataBase'\n        info:\n          $ref: '#/components/schemas/ConnectionInfo'\n    ConnectionArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/Connection'\n    IpRangeSpec:\n      type: object\n      properties:\n        subnet:\n          description: subnet of the ip range\n          type: string\n          maxLength: 128\n          example: \"192.168.11.0/24\"\n        minIp:\n          description: minium ip of the ip range\n          type: int\n          example: \"1\"\n        maxIp:\n          description: maximum ip of the ip range\n          type: int\n          example: \"100\"\n      required:\n      - name\n      - subnet\n    IpRange:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/MetadataBase'\n        spec:\n          $ref: '#/components/schemas/IpRangeSpec'\n    IpRangeArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/IpRange'\n    OverlaySpec:\n      type: object\n      properties:\n    Overlay:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/MetadataBase'\n        spec:\n          $ref: '#/components/schemas/OverlaySpec'\n    OverlayArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/Overlay'\n\n################## PARAMETERS #########################################################    \n  parameters:\n    ProposalName:\n      name: proposal-name\n      in: path\n      description: Name of the Proposal\n      required: true\n      schema:\n        type: string\n        maxLength: 128\n    HubName:\n      name: hub-name\n      in: path\n      description: Name of the traffic\n      required: true\n      schema:\n        type: string\n        maxLength: 128\n    DeviceName:\n      name: device-name\n      in: path\n      description: Name of the edge location device\n      required: true\n      schema:\n        type: string\n        maxLength: 128\n    IpRangeName:\n      name: iprange-name\n      in: path\n      description: Name of the ip range\n      required: true\n      schema:\n        type: string\n        maxLength: 128\n    OverlayName:\n      name: overlay-name\n      in: path\n      description: Name of the overlay\n      required: true\n      schema:\n        type: string\n        maxLength: 128",
			"canonicalURL": "/github.com/akraino-edge-stack/icn-sdwan@9c7db912e90d2d09703aa360ff708d0694af861b/-/blob/central-controller/docs/scc_apis.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/akraino-edge-stack/icn-sdwan/blob/9c7db912e90d2d09703aa360ff708d0694af861b/central-controller/docs/scc_apis.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: line 1: cannot unmarshal !!null into *ogen.Properties"
}