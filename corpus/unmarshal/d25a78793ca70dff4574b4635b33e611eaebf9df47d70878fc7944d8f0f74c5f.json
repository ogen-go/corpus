{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zircote/swagger-php"
		},
		"file": {
			"name": "polymorphism-3.1.0.yaml",
			"size": 0,
			"path": "Examples/polymorphism/polymorphism-3.1.0.yaml",
			"byteSize": 1633,
			"content": "openapi: 3.1.0\ninfo:\n  title: Polymorphism\n  description: 'Polymorphism example'\n  contact:\n    name: 'Swagger API Team'\n  version: '1'\nservers:\n  -\n    url: 'https://example.localhost'\n    description: 'API server'\npaths:\n  /test:\n    get:\n      tags:\n        - api\n      description: 'Get test'\n      operationId: 2bf08e1a95c02130edf82da5846bfca3\n      responses:\n        '200':\n          description: Polymorphism\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Request'\ncomponents:\n  schemas:\n    Responsible:\n      properties:\n        type:\n          type: string\n          enum:\n            - employee\n            - assignee\n            - fl\n      type: object\n      discriminator:\n        propertyName: type\n        mapping:\n          fl: '#/components/schemas/FlResponsible'\n          employee: '#/components/schemas/EmployeeResponsible'\n      oneOf:\n        -\n          $ref: '#/components/schemas/FlResponsible'\n        -\n          $ref: '#/components/schemas/EmployeeResponsible'\n    EmployeeResponsible:\n      allOf:\n        -\n          $ref: '#/components/schemas/Responsible'\n        -\n          properties:\n            property2:\n              type: string\n    FlResponsible:\n      allOf:\n        -\n          $ref: '#/components/schemas/Responsible'\n        -\n          properties:\n            property3:\n              type:\n                - string\n                - 'null'\n    Request:\n      properties:\n        payload:\n          $ref: '#/components/schemas/Responsible'\n      type: object\ntags:\n  -\n    name: api\n    description: 'API operations'\n"
		}
	},
	"Error": "unmarshal: callback: json: cannot unmarshal array into Go struct field Schema.type of type string"
}