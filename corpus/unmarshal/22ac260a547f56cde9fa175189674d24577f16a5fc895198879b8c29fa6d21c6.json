{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/yakworks/gorm-tools"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "api-docs/openapi/api.yaml",
			"byteSize": 4162,
			"content": "openapi: 3.0.3\nservers:\n  - url: https://demo.9ci.io/api\n    description: Default server\n  - url: https://sanbox.9ci.io/api\n    description: Sandbox server\ninfo:\n  version: 1.0.0\n  title: 9ci Rest Api\n  termsOfService: 'http://9ci.com/terms/'\n  contact:\n    name: 9ci Inc\n    url: 'https://9ci.com'\n    email: connect@9ci.com\n  x-logo:\n    url: 'https://www.9ci.com/assets/img/logo.svg'\n    altText: 9ci logo\n  license:\n    name: 9ci Proprietary and Confidential\n    url: 'http://www.9ci.com/licenses/LICENSE-2.0.html'\n  description:\n    $ref: Intro.md\nexternalDocs:\n  description: 9ci Documentation\n  url: 'https://9ci.com/documentation/2.0/'\ntags:\n- name: org\n  description: \u003e\n    This domain represents all organizational units within the system.  Customers and CustAccounts are special cases,\n    each having their own domain, but each also have corresponding Org records.  In addition, all other system client\n    organizational information is stored here.  This includes company, business units, ops regions, client stores,\n    sales regions, etc.  This domain is configurable to accommodate the hierarchical and overlay organizational\n    structure of a client for reporting, access and data management purposes.\n- name: appParam\n  description: Provides company-specific configuration of application parameters\n- name: activity\n  description: This domain records activity performed on an ArTran\n- name: attachment\n  description: \u003e\n    This domain links (Activity, Collection, Invoice, Report) to documents on the filesystem, like check images\n    or PDFs.\n- name: attachment upload\n  description: Upload files and attachments.\n- name: company\n  description: \u003e\n    This domain represents your organization as a financial entity. There could be multiple companies representing\n    different branches of your company.\n- name: contact\n  description: \u003e\n    This is a person with information by which he/she can be contacted. Email, phone number, which organization\u003e\n    they're associated with, etc.\n- name: org\n  description: \u003e\n    This domain represents all organizational units within the system.  Customers and CustAccounts are special cases,\n    each having their own domain, but each also have corresponding Org records.  In addition, all other system client\n    organizational information is stored here.  This includes company, business units, ops regions, client stores,\n    sales regions, etc.  This domain is configurable to accommodate the hierarchical and overlay organizational\n    structure of a client for reporting, access and data management purposes.\n- name: tag\n  description: \u003e\n    This domain is a list of labels that can be applied to various other domains, like Customer, CustAccount, etc.\n    The tags can be used in process flow and/or as informational categories.\n- name: user\n  description: This domain contains information about users who can login and operate this application.\n- name: role\n  description: This is a list of permission groups to allow access to features of this application.\n- name: roleUser\n  description: This domain maps users to roles, essentially giving a select group of features to the user.\n- name: syncJob\n  description: An instance created right away when \"any job\" in 9ci is called\n\nx-tagGroups: []\n# use the same key from rcm-api configs, will get replaced with description in rpocessing\n#- name: rally\n#  tags:\n#   - attachment upload\n\npaths:\n  /upload:\n    $ref: ./paths/rally/upload.yaml\n  /download/{id}/{name}:\n    $ref: ./paths/rally/download@{id}.yaml\n\ncomponents:\n  schemas: {}\n\n  securitySchemes:\n    main_auth:\n      description: |\n        Get access to data while protecting your account credentials.\n        OAuth2 is also a safer and more secure way to give you access.\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'http://9ci.io/api/oauth/dialog'\n          scopes:\n            'write:pets': modify pets in your account\n            'read:pets': read your pets\n    api_key:\n      description: \u003e\n        For this sample, you can use the api key `special-key` to test the\n        authorization filters.\n      type: apiKey\n      name: api_key\n      in: header\n"
		}
	},
	"Error": "unmarshal: json: line 1:745: json: cannot unmarshal object into Go struct field Info.info.description of type string"
}