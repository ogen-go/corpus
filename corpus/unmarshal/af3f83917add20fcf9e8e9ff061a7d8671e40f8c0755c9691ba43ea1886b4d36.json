{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/naturapeute/aposto-server"
		},
		"file": {
			"name": "doc.yaml",
			"size": 0,
			"path": "doc/doc.yaml",
			"byteSize": 17443,
			"content": "components:\n  schemas:\n    Invoice:\n      description: 'The `Invoice` model gathers all the information required for generating\n        an invoice with Aposto,\n\n        based on Tarif 590 and QR-invoice Swiss standards'\n      properties:\n        author:\n          allOf:\n          - $ref: '#/definitions/Author'\n          description: The invoice author. It can be the therapy society or the therapist\n            itself\n          title: Author\n        id:\n          description: The Naturapeute user ID\n          pattern: ^[a-fA-F0-9]{24}$\n          title: id\n          type: string\n        paid:\n          description: Indicates if the invoice has been paid or not\n          title: Paid\n          type: boolean\n        patient:\n          allOf:\n          - $ref: '#/definitions/Patient'\n          description: The patient who received the treatment\n          title: Patient\n        servicePrice:\n          description: The hourly price the therapist charges\n          exclusiveMinimum: 0\n          title: Service price\n          type: integer\n        services:\n          description: The list of services performed as part of the treatment\n          items:\n            $ref: '#/definitions/Service'\n          maxItems: 5\n          minItems: 1\n          title: Services\n          type: array\n        therapist:\n          allOf:\n          - $ref: '#/definitions/Therapist'\n          description: The therapist who performed the treatment\n          title: Therapist\n        timestamp:\n          description: The timestamp of the date the treatment was performed. The\n            timestamp is expressed in milliseconds (JavaScript standard) except if\n            negative (before 01/01/1970). If so, it is expressed in seconds\n          format: date-time\n          title: Timestamp\n          type: string\n      required:\n      - author\n      - therapist\n      - patient\n      - servicePrice\n      - services\n      - timestamp\n      - paid\n      title: Invoice\n      type: object\n    JSONError:\n      description: An error occurring when the request body contains wrongly formatted\n        JSON\n      properties:\n        json_error:\n          description: An error message describing the JSON error. The syntax error\n            position is provided\n          type: string\n    SendinBlueError:\n      description: An error occurring when sending an email with SendinBlue service\n        has failed\n      properties:\n        code:\n          description: An error code\n          type: string\n        message:\n          description: A readable message associated with the failure\n          type: string\n    ValidationError:\n      description: An error occurring when the invoice content is incorrect\n      properties:\n        loc:\n          description: The field sequence raising an error. `['author','name']` corresponds\n            to `author.name`\n          items:\n            type: string\n          type: array\n        msg:\n          description: The validation error message\n          type: string\n        type:\n          description: The type of validation error\n          type: string\ndefinitions:\n  Author:\n    description: The author who edits the invoice. It can be the therapy society or\n      the therapist itself\n    properties:\n      ESRBankId:\n        description: 'The author ESR bank ID. It is provided by the bank institution\n          (German: ESR, French: BVR, English: ISR)'\n        pattern: ^01[0-9]{7}$\n        title: ESR bank ID\n        type: string\n      ESRId:\n        description: 'The author ESR customer ID. It is provided by the bank institution\n          (German: ESR, French: BVR, English: ISR)'\n        pattern: ^[0-9]{6}$\n        title: ESR ID\n        type: string\n      city:\n        description: The author city name\n        maxLength: 35\n        minLength: 1\n        title: City\n        type: string\n      email:\n        description: The author email. Generated invoices can be sent to this email\n          address\n        format: email\n        title: Email\n        type: string\n      iban:\n        description: The author IBAN. The IBAN must correspond to the bank account\n          that cashes invoices. It can be an IBAN or a QR-IBAN\n        pattern: ^CH(\\d{2})(\\d{5})([A-Z0-9]{12})$\n        title: IBAN\n        type: string\n      name:\n        description: The author name. It can be the therapy society name or the therapist's\n          first name and last name\n        maxLength: 70\n        minLength: 1\n        title: Name\n        type: string\n      phone:\n        description: The author phone number. It can be the therapy society phone\n          number or the therapist phone number\n        maxLength: 25\n        minLength: 1\n        title: Phone\n        type: string\n      rcc:\n        description: The author RCC number. It can be the therapy society RCC number\n          or the therapist RCC number\n        pattern: ^[A-Z][0-9]{6}$\n        title: RCC\n        type: string\n      street:\n        description: The author address street part. It contains the mailbox number\n          and the street name. Extra information is not allowed. All author address\n          information corresponds to the address where the therapist performs therapies\n        maxLength: 35\n        minLength: 1\n        title: Street\n        type: string\n      zipcode:\n        description: The author zipcode code\n        maxLength: 9\n        minLength: 1\n        title: zipcode\n        type: string\n    required:\n    - name\n    - street\n    - zipcode\n    - city\n    - phone\n    - email\n    - iban\n    title: Author\n    type: object\n  Patient:\n    description: The patient who received the therapies\n    properties:\n      birthdate:\n        description: The timestamp of the patient birthdate. The timestamp is expressed\n          in milliseconds (JavaScript standard) except if negative (before 01/01/1970).\n          If so, it is expressed in seconds\n        format: date-time\n        title: Birthday\n        type: string\n      canton:\n        anyOf:\n        - const: AG\n          type: string\n        - const: AI\n          type: string\n        - const: AR\n          type: string\n        - const: BE\n          type: string\n        - const: BL\n          type: string\n        - const: BS\n          type: string\n        - const: FR\n          type: string\n        - const: GE\n          type: string\n        - const: GL\n          type: string\n        - const: GR\n          type: string\n        - const: JU\n          type: string\n        - const: LU\n          type: string\n        - const: NE\n          type: string\n        - const: NW\n          type: string\n        - const: OW\n          type: string\n        - const: SG\n          type: string\n        - const: SH\n          type: string\n        - const: SO\n          type: string\n        - const: SZ\n          type: string\n        - const: TI\n          type: string\n        - const: TG\n          type: string\n        - const: UR\n          type: string\n        - const: VD\n          type: string\n        - const: VS\n          type: string\n        - const: ZG\n          type: string\n        - const: ZH\n          type: string\n        - const: LI\n          type: string\n        - const: A\n          type: string\n        - const: D\n          type: string\n        - const: F\n          type: string\n        - const: I\n          type: string\n        description: The patient Swiss canton\n        title: Canton\n      city:\n        description: The patient city name\n        maxLength: 35\n        minLength: 1\n        title: City\n        type: string\n      email:\n        description: The patient email. Generated invoices can be sent to this email\n          address\n        format: email\n        title: Email\n        type: string\n      firstname:\n        description: The patient first name\n        maxLength: 35\n        minLength: 1\n        title: First name\n        type: string\n      gender:\n        anyOf:\n        - const: man\n          type: string\n        - const: woman\n          type: string\n        description: The patient gender\n        title: Gender\n      lastname:\n        description: The patient last name\n        maxLength: 35\n        minLength: 1\n        title: Last name\n        type: string\n      street:\n        description: The patient address street part. It contains the mailbox number\n          and the street name. Extra information is not allowed\n        maxLength: 35\n        minLength: 1\n        title: Street\n        type: string\n      zipcode:\n        description: The patient zipcode code\n        maxLength: 9\n        minLength: 1\n        title: zipcode\n        type: string\n    required:\n    - firstname\n    - lastname\n    - street\n    - zipcode\n    - city\n    - canton\n    - birthdate\n    - gender\n    - email\n    title: Patient\n    type: object\n  Service:\n    description: A service performed. It corresponds to a therapy and its duration\n    properties:\n      code:\n        anyOf:\n        - const: 1003\n          type: integer\n        - const: 1004\n          type: integer\n        - const: 1005\n          type: integer\n        - const: 1006\n          type: integer\n        - const: 1008\n          type: integer\n        - const: 1010\n          type: integer\n        - const: 1012\n          type: integer\n        - const: 1013\n          type: integer\n        - const: 1014\n          type: integer\n        - const: 1017\n          type: integer\n        - const: 1021\n          type: integer\n        - const: 1022\n          type: integer\n        - const: 1024\n          type: integer\n        - const: 1025\n          type: integer\n        - const: 1026\n          type: integer\n        - const: 1027\n          type: integer\n        - const: 1028\n          type: integer\n        - const: 1029\n          type: integer\n        - const: 1030\n          type: integer\n        - const: 1032\n          type: integer\n        - const: 1033\n          type: integer\n        - const: 1034\n          type: integer\n        - const: 1039\n          type: integer\n        - const: 1045\n          type: integer\n        - const: 1047\n          type: integer\n        - const: 1048\n          type: integer\n        - const: 1049\n          type: integer\n        - const: 1050\n          type: integer\n        - const: 1051\n          type: integer\n        - const: 1052\n          type: integer\n        - const: 1054\n          type: integer\n        - const: 1055\n          type: integer\n        - const: 1056\n          type: integer\n        - const: 1057\n          type: integer\n        - const: 1058\n          type: integer\n        - const: 1060\n          type: integer\n        - const: 1061\n          type: integer\n        - const: 1062\n          type: integer\n        - const: 1063\n          type: integer\n        - const: 1064\n          type: integer\n        - const: 1065\n          type: integer\n        - const: 1066\n          type: integer\n        - const: 1067\n          type: integer\n        - const: 1068\n          type: integer\n        - const: 1069\n          type: integer\n        - const: 1070\n          type: integer\n        - const: 1071\n          type: integer\n        - const: 1072\n          type: integer\n        - const: 1076\n          type: integer\n        - const: 1077\n          type: integer\n        - const: 1079\n          type: integer\n        - const: 1080\n          type: integer\n        - const: 1081\n          type: integer\n        - const: 1082\n          type: integer\n        - const: 1084\n          type: integer\n        - const: 1085\n          type: integer\n        - const: 1087\n          type: integer\n        - const: 1088\n          type: integer\n        - const: 1089\n          type: integer\n        - const: 1091\n          type: integer\n        - const: 1092\n          type: integer\n        - const: 1093\n          type: integer\n        - const: 1094\n          type: integer\n        - const: 1096\n          type: integer\n        - const: 1097\n          type: integer\n        - const: 1098\n          type: integer\n        - const: 1100\n          type: integer\n        - const: 1102\n          type: integer\n        - const: 1104\n          type: integer\n        - const: 1105\n          type: integer\n        - const: 1106\n          type: integer\n        - const: 1111\n          type: integer\n        - const: 1114\n          type: integer\n        - const: 1115\n          type: integer\n        - const: 1117\n          type: integer\n        - const: 1120\n          type: integer\n        - const: 1121\n          type: integer\n        - const: 1122\n          type: integer\n        - const: 1123\n          type: integer\n        - const: 1131\n          type: integer\n        - const: 1132\n          type: integer\n        - const: 1134\n          type: integer\n        - const: 1140\n          type: integer\n        - const: 1141\n          type: integer\n        - const: 1142\n          type: integer\n        - const: 1200\n          type: integer\n        - const: 1202\n          type: integer\n        - const: 1203\n          type: integer\n        - const: 1204\n          type: integer\n        - const: 1205\n          type: integer\n        - const: 1206\n          type: integer\n        - const: 1207\n          type: integer\n        - const: 1210\n          type: integer\n        description: The therapy code as defined in the Tarif 590 standard\n        title: Code\n      date:\n        description: The timestamp of the date the therapy was performed. The timestamp\n          is expressed in milliseconds (JavaScript standard) except if negative (before\n          01/01/1970). If so, it is expressed in seconds\n        format: date-time\n        title: Date\n        type: string\n      duration:\n        description: The therapy duration\n        minimum: 5\n        multipleOf: 5\n        title: Duration\n        type: integer\n    required:\n    - date\n    - duration\n    - code\n    title: Service\n    type: object\n  Therapist:\n    description: The therapist who performed the billed therapies\n    properties:\n      city:\n        description: The therapist city name\n        maxLength: 35\n        minLength: 1\n        title: City\n        type: string\n      firstname:\n        description: The therapist first name\n        maxLength: 35\n        minLength: 1\n        title: First name\n        type: string\n      lastname:\n        description: The therapist last name\n        maxLength: 35\n        minLength: 1\n        title: Last name\n        type: string\n      phone:\n        description: The therapist phone number\n        maxLength: 25\n        minLength: 1\n        title: Phone\n        type: string\n      rcc:\n        description: The therapist RCC number\n        pattern: ^[A-Z][0-9]{6}$\n        title: RCC\n        type: string\n      street:\n        description: The therapist address street part. It contains the mailbox number\n          and the street name. Extra information is not allowed\n        maxLength: 35\n        minLength: 1\n        title: Street\n        type: string\n      zipcode:\n        description: The therapist zipcode code\n        maxLength: 9\n        minLength: 1\n        title: zipcode\n        type: string\n    required:\n    - firstname\n    - lastname\n    - street\n    - zipcode\n    - city\n    - phone\n    title: Therapist\n    type: object\ninfo:\n  title: Aposto API\n  version: '1.0'\nopenapi: 3.0.0\npaths:\n  /email:\n    post:\n      description: 'Generate an invoice as PDF, based on Tarif 590 and QR-invoice\n        Swiss standards and send it to the author''s and patient''s mail addresses\n\n        '\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Invoice'\n        description: The content used to generate the PDF invoice\n        required: true\n      responses:\n        201:\n          description: The invoice as been successfully sent\n        400:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/JSONError'\n                - items:\n                    $ref: '#/components/schemas/ValidationError'\n                  type: array\n                - $ref: '#/components/schemas/SendinBlueError'\n          description: Bad Request Error\n      summary: Send an invoice by email\n  /pdf/{name}:\n    post:\n      description: Generate an invoice as PDF, based on Tarif 590 and QR-invoice Swiss\n        standards\n      parameters:\n      - description: 'The generated PDF invoice filename. It is needed when downloading\n          the PDF from this endpoint or when opening the PDF in a browser directly\n          from the endpoint URL. It should end with _.pdf_\n\n          '\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Invoice'\n        description: The content used to generate the PDF invoice\n        required: true\n      responses:\n        200:\n          content:\n            application/pdf:\n              schema:\n                format: binary\n                type: string\n          description: The generated PDF invoice\n        400:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/JSONError'\n                - items:\n                    $ref: '#/components/schemas/ValidationError'\n                  type: array\n          description: Bad Request Error\n      summary: Generate an invoice as PDF\nservers: []\n",
			"canonicalURL": "/github.com/naturapeute/aposto-server@ae40624a888c27c7b9801b58326b3f80c4c8005f/-/blob/doc/doc.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/naturapeute/aposto-server/blob/ae40624a888c27c7b9801b58326b3f80c4c8005f/doc/doc.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!int `0` into bool"
}