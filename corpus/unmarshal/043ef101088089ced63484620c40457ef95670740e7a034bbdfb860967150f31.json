{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/yonaskolb/SwagGen"
		},
		"file": {
			"name": "spec.yml",
			"size": 0,
			"path": "Specs/Rocket/spec.yml",
			"byteSize": 175869,
			"content": "openapi: 3.0.0\ninfo:\n  title: Rocket Services\n  version: 1.0.0\n  description: >\n    An Orchestration Layer that takes ISL services and packages them in a more\n    targeted way for front-end applications.\n\n    This in turn makes client integration easier and reduces the complexity and size of front-end applications.\n\n\n    Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that\n\n    best suits the application they are developing.\npaths:\n  /account:\n    x-serviceId: account\n    get:\n      description: Get the details of an account along with the profiles and entitlements\n        under it.\n      operationId: getAccount\n      tags:\n        - account\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n    patch:\n      description: >\n        Update the details of an account.\n\n\n        This supports partial updates so you can send just the properties you wish to update.\n      operationId: updateAccount\n      tags:\n        - account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AccountUpdateRequest\"\n        description: Updated account details.\n        required: true\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Settings\n  /account/devices:\n    x-serviceId: device\n    get:\n      description: >\n        Get all devices registered under this account.\n\n\n        Also includes information around device registration and deregistration limits.\n      operationId: getDevices\n      tags:\n        - account\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccountDevices\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n    post:\n      description: >\n        Register a playback device under an account.\n\n\n        If a device with the same id already exists a `409` conflict will be returned.\n      operationId: registerDevice\n      tags:\n        - account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DeviceRegistrationRequest\"\n        description: Registration details for a new playback device.\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Device\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"409\":\n          description: A device with the provided id already exists.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n  \"/account/devices/{id}\":\n    x-serviceId: device\n    get:\n      description: Get a registered device.\n      operationId: getDevice\n      tags:\n        - account\n      parameters:\n        - name: id\n          description: The unique identifier for the registered device e.g. serial number.\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Device\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n    delete:\n      description: Deregister a playback device from an account.\n      operationId: deregisterDevice\n      tags:\n        - account\n      parameters:\n        - name: id\n          description: The unique identifier for the registered device e.g. serial number.\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Device deregistered.\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n  \"/account/devices/{id}/name\":\n    x-serviceId: device\n    put:\n      description: Rename a device\n      operationId: renameDevice\n      tags:\n        - account\n      parameters:\n        - name: id\n          description: The unique identifier for this registered device e.g. serial number.\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: name\n          description: The new name for the device.\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Device renamed.\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n  /account/entitlements:\n    x-serviceId: entitlement\n    get:\n      description: >\n        Get all entitlements under the account.\n\n\n        This list is returned under the call to get account information so a call here is\n\n        only required when wishing to refresh a local copy of entitlements.\n      operationId: getEntitlements\n      tags:\n        - account\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Entitlement\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n  \"/account/items/{id}/videos\":\n    x-serviceId: media\n    get:\n      description: >\n        Get the video files associated with an item given maximum resolution,\n        device type\n\n        and one or more delivery types.\n\n\n        This endpoint accepts an Account Catalog token, however if when requesting\n\n        playback files you receive an *403 status code with error code 1* then the file\n\n        you're requesting is classification restricted. This means you should switch\n\n        to target the `/account/items/{id}/videos-guarded` endpoint, passing it an Account\n\n        Playback token. If not already obtained, this token can be requested via the\n\n        `/authorization` endpoint with an account level pin.\n\n\n        For convenience you may also access free / public files through this endpoint\n\n        instead of the /items/{id}/videos endpoint, when authenticated.\n\n\n        Returns an array of video file objects which each include a url to a video.\n\n\n        The first entry in the array contains what is predicted to be the best match.\n\n        The remainder of the entries, if any, may contain resolutions below what was\n\n        requests. For example if you request HD-720 the response may also contain\n\n        SD entries.\n\n\n        If you specify multiple delivery types, then the response array will insert\n\n        types in the order you specify them in the query. For example `stream,progressive`\n\n        would return an array with 0 or more stream files followed by 0 or more progressive files.\n\n\n        If no files are found a 404 is returned.\n      operationId: getItemMediaFiles\n      tags:\n        - account\n      parameters:\n        - name: id\n          description: The identifier of the item whose video files to load.\n          in: path\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/MediaFileDelivery\"\n        - $ref: \"#/components/parameters/MediaFileResolution\"\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: |\n            The list of video files available.\n            The first entry containing what is predicted to be the best match.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/MediaFile\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n  \"/account/items/{id}/videos-guarded\":\n    x-serviceId: media\n    get:\n      description: >\n        Get the video files associated with an item given maximum resolution,\n        device type\n\n        and one or more delivery types.\n\n\n        This endpoint is identical to the `/account/items/{id}/videos` however it expects\n\n        an Account Playback token. This token, and in association this endpoint, is specifically\n\n        for use when playback files are classification restricted and require an account\n\n        level pin to access them.\n\n\n        Returns an array of video file objects which each include a url to a video.\n\n\n        The first entry in the array contains what is predicted to be the best match.\n\n        The remainder of the entries, if any, may contain resolutions below what was\n\n        requests. For example if you request HD-720 the response may also contain\n\n        SD entries.\n\n\n        If you specify multiple delivery types, then the response array will insert\n\n        types in the order you specify them in the query. For example `stream,progressive`\n\n        would return an array with 0 or more stream files followed by 0 or more progressive files.\n\n\n        If no files are found a 404 is returned.\n      operationId: getItemMediaFilesGuarded\n      tags:\n        - account\n      parameters:\n        - name: id\n          description: The identifier of the item whose video files to load.\n          in: path\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/MediaFileDelivery\"\n        - $ref: \"#/components/parameters/MediaFileResolution\"\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: |\n            The list of video files available.\n            The first entry containing what is predicted to be the best match.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/MediaFile\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Playback\n  /account/password:\n    x-serviceId: account\n    put:\n      description: Change the password of an account.\n      operationId: changePassword\n      tags:\n        - account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ChangePasswordRequest\"\n        description: The new account password.\n        required: true\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Settings\n  /account/pin:\n    x-serviceId: account\n    put:\n      description: Change the pin of an account.\n      operationId: changePin\n      tags:\n        - account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ChangePinRequest\"\n        description: The new account pin.\n        required: true\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Settings\n  /account/profile:\n    x-serviceId: profile\n    get:\n      description: Get the details of the active profile, including watched, bookmarked and\n        rated items.\n      operationId: getProfile\n      tags:\n        - profile\n      responses:\n        \"200\":\n          description: Details of the active profile.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProfileDetail\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n  /account/profile/bookmarks:\n    x-serviceId: bookmark\n    get:\n      description: Get the map of bookmarked item ids (itemId => creationDate) under the\n        active profile.\n      operationId: getBookmarks\n      tags:\n        - profile\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n                  format: date-time\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n  /account/profile/bookmarks/list:\n    x-serviceId: bookmark\n    get:\n      description: Returns the list of bookmarked items under the active profile.\n      operationId: getBookmarkList\n      tags:\n        - profile\n      parameters:\n        - name: page\n          description: The page of items to load. Starts from page 1.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n        - name: page_size\n          description: The number of items to return in a page.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 50\n        - $ref: \"#/components/parameters/ListOrder\"\n        - $ref: \"#/components/parameters/ItemType\"\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: The list of items requested.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemList\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n  \"/account/profile/bookmarks/{itemId}\":\n    x-serviceId: bookmark\n    get:\n      description: Get the bookmark for an item under the active profile.\n      operationId: getItemBookmark\n      tags:\n        - profile\n      parameters:\n        - name: itemId\n          in: path\n          description: The id of the item to get the bookmark for.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Bookmark\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n    put:\n      description: |\n        Bookmark an item under the active profile.\n\n        Creates one if it doesn't exist, overwrites one if it does.\n      operationId: bookmarkItem\n      tags:\n        - profile\n      parameters:\n        - name: itemId\n          in: path\n          description: The id of the item to bookmark.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Bookmark created.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Bookmark\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n    delete:\n      description: Unbookmark an item under the active profile.\n      operationId: deleteItemBookmark\n      tags:\n        - profile\n      parameters:\n        - name: itemId\n          in: path\n          description: The identifier of the bookmark to delete.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Bookmark deleted.\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n  /account/profile/ratings:\n    x-serviceId: userRating\n    get:\n      description: Get the map of rated item ids (itemId => rating out of 10) under the\n        active profile.\n      operationId: getRatings\n      tags:\n        - profile\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n  /account/profile/ratings/list:\n    x-serviceId: userRating\n    get:\n      description: Returns the list of rated items under the active profile.\n      operationId: getRatingsList\n      tags:\n        - profile\n      parameters:\n        - name: page\n          description: The page of items to load. Starts from page 1.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            default: 1\n        - name: page_size\n          description: The number of items to return in a page.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 50\n            default: 12\n        - $ref: \"#/components/parameters/ListOrder\"\n        - name: order_by\n          description: >\n            What to order by.\n\n\n            Ordering by `date-modified` equates to ordering by the last rated date.\n          in: query\n          schema:\n            type: string\n            enum:\n              - date-added\n              - date-modified\n            default: date-added\n        - $ref: \"#/components/parameters/ItemType\"\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: The list of items requested.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemList\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n  \"/account/profile/ratings/{itemId}\":\n    x-serviceId: userRating\n    get:\n      description: Get the rating info for an item under the active profile.\n      operationId: getItemRating\n      tags:\n        - profile\n      parameters:\n        - name: itemId\n          description: The id of the item to get the rating info for.\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserRating\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n    put:\n      description: |\n        Rate an item under the active profile.\n\n        Creates one if it doesn't exist, overwrites one if it does.\n      operationId: rateItem\n      tags:\n        - profile\n      parameters:\n        - name: itemId\n          description: The id of the item to rate.\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: rating\n          description: The item rating between 1 and 10 inclusive.\n          in: query\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 10\n      responses:\n        \"200\":\n          description: OK.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserRating\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n  /account/profile/watched:\n    x-serviceId: watched\n    get:\n      description: Get the map of watched item ids (itemId => last playhead position) under\n        the active profile.\n      operationId: getWatched\n      tags:\n        - profile\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: \"#/components/schemas/Watched\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n  /account/profile/watched/list:\n    x-serviceId: watched\n    get:\n      description: Returns the list of watched items under the active profile.\n      operationId: getWatchedList\n      tags:\n        - profile\n      parameters:\n        - name: page\n          description: The page of items to load. Starts from page 1.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            default: 1\n        - name: page_size\n          description: The number of items to return in a page.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 50\n            default: 12\n        - $ref: \"#/components/parameters/ListOrder\"\n        - name: order_by\n          description: >\n            What to order by.\n\n\n            Ordering by `date-modified` equates to ordering by the last watched date.\n          in: query\n          schema:\n            type: string\n            enum:\n              - date-added\n              - date-modified\n            default: date-added\n        - $ref: \"#/components/parameters/ItemType\"\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: The list of items requested.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemList\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n  \"/account/profile/watched/{itemId}\":\n    x-serviceId: watched\n    get:\n      description: Get the watched status info for an item under the active profile.\n      operationId: getItemWatchedStatus\n      tags:\n        - profile\n      parameters:\n        - name: itemId\n          in: path\n          description: The id of the item to get the watched status for.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Watched\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n    put:\n      description: >\n        Record the watched playhead position of a video under the active\n        profile.\n\n\n        Can be used later to resume a video from where it was last watched.\n\n\n        Creates one if it doesn't exist, overwrites one if it does.\n      operationId: setItemWatchedStatus\n      tags:\n        - profile\n      parameters:\n        - name: itemId\n          description: The id of the item being watched.\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: position\n          description: The playhead position to record.\n          in: query\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n      responses:\n        \"200\":\n          description: OK.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Watched\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - profileAuth:\n            - Catalog\n  /account/profiles:\n    x-serviceId: profile\n    post:\n      description: Create a new profile under the active account.\n      operationId: createProfile\n      tags:\n        - account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ProfileCreationRequest\"\n        description: Profile details.\n        required: true\n      responses:\n        \"201\":\n          description: Details of the created profile.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProfileDetail\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n  \"/account/profiles/{id}\":\n    x-serviceId: profile\n    get:\n      description: Get the summary of a profile with a specific id under the active account.\n      operationId: getProfileWithId\n      tags:\n        - account\n      parameters:\n        - name: id\n          description: The identifier of the profile to return.\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProfileSummary\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n    patch:\n      description: >\n        Update the summary of a profile with a specific id under the active\n        account.\n\n\n        This supports partial updates so you can send just the properties you wish to update.\n      operationId: updateProfileWithId\n      tags:\n        - account\n      parameters:\n        - name: id\n          description: The identifier of the profile to update.\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ProfileUpdateRequest\"\n        description: Updated profile details.\n        required: true\n      responses:\n        \"204\":\n          description: Profile updated.\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n    delete:\n      description: |\n        Delete a profile with a specific id under the active account.\n\n        Note that you cannot delete the primary profile.\n      operationId: deleteProfileWithId\n      tags:\n        - account\n      parameters:\n        - name: id\n          description: The identifier of the profile to delete.\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Profile deleted.\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n  /account/request-email-verification:\n    x-serviceId: account\n    post:\n      description: >\n        Request that the email address tied to an account be verified.\n\n\n        This will send a verification email to the email address of the primary profile containing\n\n        a link which, once clicked, completes the verification process via the /verify-email endpoint.\n\n\n        Note that when an account is created this email is sent automatically so there's no need\n\n        to call this directly.\n\n\n        If the user doesn't click the link before it expires then this endpoint can be called\n\n        to request a new verification email. In the future it may also be used if we add support\n\n        for changing an account email address.\n      operationId: requestEmailVerification\n      tags:\n        - account\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n  /authorization:\n    x-serviceId: auth\n    post:\n      description: >\n        Request one or more `Account` level authorization tokens each with a\n        chosen scope.\n\n\n        Tokens are used to access restricted service endpoints. These restricted endpoints\n\n        will require a specific token type (e.g Account) with a specific scope (e.g. Catalog)\n\n        before access is granted.\n\n\n        For convenience, where a Profile level token with the same scope exists it will also be returned.\n\n        This removes the need to prompt a user for a password on login followed directly with a\n\n        pin prompt for a profile token of the same scope.\n\n\n        Where an Account level pin is supported, some tokens may be returned from this endpoint\n\n        by providing this pin instead of a password. For example the `Playback` scoped Account\n\n        token is one such type.\n\n\n        Any token which is returnable with an Account pin will also be returnable with the\n\n        Account password. On the inverse, not all scoped tokens that are returnable via password\n\n        will be returnable via the pin. For example when you log in you receive an Account Catalog\n\n        token. This is not obtainable from an Account pin, only password.\n\n\n        If both a pin and password are supplied only the password will be used.\n\n\n        If neither a pin or password are supplied an http 400 error will be returned.\n      operationId: getAccountToken\n      tags:\n        - authorization\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AccountTokenRequest\"\n        description: The account credentials with requested token scope.\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                additionalProperties: false\n                items:\n                  $ref: \"#/components/schemas/AccessToken\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n    delete:\n      description: |\n        When a user signs out of an application we need to clear some\n        basic cookies we assigned them during token authorization.\n      operationId: signOut\n      tags:\n        - authorization\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  /authorization/profile:\n    x-serviceId: auth\n    post:\n      description: >\n        Request one or more `Profile` level authorization tokens each with a\n        chosen scope.\n\n\n        Tokens are used to access restricted service endpoints. These restriced endpoints\n\n        will require a specific token type (e.g Profile) with a specific scope (e.g. Catalog)\n\n        before access is granted.\n      operationId: getProfileToken\n      tags:\n        - authorization\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ProfileTokenRequest\"\n        description: The profile id and optional pin with required token scope.\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                additionalProperties: false\n                items:\n                  $ref: \"#/components/schemas/AccessToken\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - accountAuth:\n            - Catalog\n  /authorization/refresh:\n    x-serviceId: auth\n    post:\n      description: Refresh an account or profile level authorization token which is marked\n        as refreshable.\n      operationId: refreshToken\n      tags:\n        - authorization\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TokenRefreshRequest\"\n        description: The token to refresh.\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccessToken\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  /config:\n    x-serviceId: config\n    get:\n      description: >\n        Get the global configuration for an application. Should be called during\n        app statup.\n\n\n        This includes things like device and playback rules, classifications,\n\n        sitemap and subscriptions.\n\n\n        You have the option to select specific configuration objects using the 'include'\n\n        parameter, or if unspecified, getting all configuration.\n      operationId: getAppConfig\n      tags:\n        - app\n      parameters:\n        - name: include\n          description: |\n            A comma delimited list of config objects to return.\n            If none specified then all configuration is returned.\n          in: query\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - classification\n                - playback\n                - sitemap\n                - navigation\n                - subscription\n                - general\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: The list of available pages\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AppConfig\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  \"/items/{id}\":\n    x-serviceId: item\n    get:\n      description: Returns the details of an item with the specified id.\n      operationId: getItem\n      tags:\n        - content\n      parameters:\n        - name: id\n          in: path\n          description: >\n            The identifier of the item to load.\n\n\n            The custom identifier of an item can be used here if the `use_custom_id` parameter is true.\n          required: true\n          schema:\n            type: string\n        - name: max_rating\n          in: query\n          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.\n          schema:\n            type: string\n        - name: expand\n          description: >\n            If no value is specified no dependencies are expanded.\n\n\n            If 'children' is specified then the list of any direct children will be expanded. For example\n\n            seasons of a show or episodes of a season.\n\n\n            If 'all' is specified then the parent chain will be expanded along with any child list at each level.\n\n            For example if an episode is specified then its season will be expanded and that season's episode list.\n\n            The season will have its show expanded and the show will have its season list expanded.\n\n\n            The 'all' options is useful when you deep link into a show/season/episode for the first time as\n\n            it provides full context for navigating around the show page. Subsequent navigation around\n\n            children of the show should only need to request expand of children.\n\n\n            If an expand is specified which is not relevant to the item type, it will be ignored.\n          in: query\n          schema:\n            type: string\n            enum:\n              - all\n              - children\n        - name: select_season\n          in: query\n          description: >\n            Given a provided show id, it can be useful to get the details of a\n            child season. This option\n\n            provides a means to return the `first` or `latest` season of a show given the show id.\n\n\n            The `expand` parameter also works here so for example you could land on a show page and request the\n\n            latest season along with `expand=all`. This would then return the detail of the latest season with\n\n            its list of child episode summaries, and also expand the detail of the show with its list of seasons summaries.\n\n\n            Note the `id` parameter must be a show id for this parameter to work correctly.\n          schema:\n            type: string\n            enum:\n              - first\n              - latest\n        - name: use_custom_id\n          description: Set to true when passing a custom Id as the `id` path parameter.\n          in: query\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: The item requested\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemDetail\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  \"/items/{id}/children\":\n    x-serviceId: itemChildList\n    get:\n      description: >\n        Returns the List of child summary items under an item.\n\n\n        If the item is a Season then the children will be episodes and ordered by episode number.\n\n\n        If the item is a Show then the children will be Seasons and ordered by season number.\n\n\n        Returns 404 if no children found.\n      operationId: getItemChildrenList\n      tags:\n        - content\n      parameters:\n        - name: id\n          description: The identifier of the item whose children to load.\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: page\n          description: The page of items to load. Starts from page 1.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            default: 1\n        - name: page_size\n          description: The number of items to return in a page.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 100\n            default: 12\n        - name: max_rating\n          in: query\n          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/ListOrder\"\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: The list of items requested.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemList\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  \"/items/{id}/related\":\n    x-serviceId: itemRelatedList\n    get:\n      description: >\n        Returns the list of items related to the parent item.\n\n\n        Note for now, due to the size of the list being unknown, only a single page will be returned.\n      operationId: getItemRelatedList\n      tags:\n        - content\n      parameters:\n        - name: id\n          required: true\n          in: path\n          description: The identifier of the item to based related items off.\n          schema:\n            type: string\n        - name: page\n          description: The page of items to load. Starts from page 1.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            default: 1\n        - name: page_size\n          description: The number of items to return in a page.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 100\n            default: 12\n        - name: max_rating\n          in: query\n          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: The list of items requested.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemList\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  \"/items/{id}/videos\":\n    x-serviceId: media\n    get:\n      description: >\n        Get the free / public video files associated with an item given maximum\n        resolution,\n\n        device type and one or more delivery types.\n\n\n        Returns an array of video file objects which each include a url to a video.\n\n\n        The first entry in the array contains what is predicted to be the best match.\n\n        The remainder of the entries, if any, may contain resolutions below what was\n\n        requests. For example if you request HD-720 the response may also contain\n\n        SD entries.\n\n\n        If you specify multiple delivery types, then the response array will insert\n\n        types in the order you specify them in the query. For example `stream,progressive`\n\n        would return an array with 0 or more stream files followed by 0 or more progressive files.\n\n\n        If no files are found a 404 is returned.\n      operationId: getPublicItemMediaFiles\n      tags:\n        - content\n      parameters:\n        - name: id\n          description: The identifier of the item whose video files to load.\n          in: path\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/MediaFileDelivery\"\n        - $ref: \"#/components/parameters/MediaFileResolution\"\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: |\n            The list of video files available.\n            The first entry containing what is predicted to be the best match.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/MediaFile\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  /lists:\n    x-serviceId: list\n    get:\n      description: Returns an array of item lists with their first page of content resolved.\n      operationId: getLists\n      tags:\n        - content\n      parameters:\n        - name: ids\n          description: >\n            A comma delimited list of item list identifiers.\n\n\n            These can be list ids e.g. `14354,65473,3234`\n\n\n            Or more complex sort/filter queries using pipes e.g.\n\n\n            `14354|max_rating=AUOFLC-E|order=asc|order_by=year-added,65473|page_size=30,3234`\n\n\n            _Note the id must always come first for each encoded list query_\n\n\n            List parameters may be provide without the `param=` prefix e.g. `14354|genre:action`\n\n\n            Only the following options can be present.\n              - `order`\n              - `order_by`\n              - `max_rating`\n              - `page_size`\n              - `item_type`\n              - `param`\n          in: query\n          required: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: page_size\n          description: The number of items to return in a page.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 100\n            default: 12\n        - name: max_rating\n          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.\n          in: query\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/ListOrder\"\n        - $ref: \"#/components/parameters/ListOrderBy\"\n        - $ref: \"#/components/parameters/ItemType\"\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: The array of item lists requested.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ItemList\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  \"/lists/{id}\":\n    x-serviceId: list\n    get:\n      description: Returns a list of items under the specified item list\n      operationId: getList\n      tags:\n        - content\n      parameters:\n        - name: id\n          description: The identifier of the list to load.\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: page\n          description: The page of items to load. Starts from page 1.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            default: 1\n        - name: page_size\n          description: The number of items to return in a page.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 100\n            default: 12\n        - name: max_rating\n          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.\n          in: query\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/ListOrder\"\n        - $ref: \"#/components/parameters/ListOrderBy\"\n        - name: param\n          description: The list parameter in format 'key:value', e.g. 'genre:action'.\n          in: query\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/ItemType\"\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: The list of items requested.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemList\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  /page:\n    x-serviceId: page\n    get:\n      description: >\n        Returns a page with the specified id.\n\n\n        If targeting the search page you must url encode the search term as a parameter\n\n        using the `q` key. For example if your browser path looks like `/search?q=the`\n\n        then what you pass to this endpoint would look like `/page?path=/search%3Fq%3Dthe`.\n      operationId: getPage\n      tags:\n        - app\n      parameters:\n        - name: path\n          description: The path of the page to load, e.g. '/movies'.\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: list_page_size\n          description: The number of items to load when prefetching and paging each list in\n            the page row.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 100\n            default: 12\n        - name: list_page_size_large\n          description: >\n            The number of items to load when prefetching a continuous scroll\n            list entry in a page.\n\n\n            By default any list page entry with template pattern `/^CS\\d+$/` will\n\n            be considered a continuous scroll list.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 100\n            default: 50\n        - name: max_list_prefetch\n          description: The maximum number of lists to prefetch in the page.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            maximum: 15\n            default: 2\n        - name: item_detail_expand\n          description: >\n            Only relevant when loading item detail pages as these embed a\n            detailed item in the main page entry.\n\n\n            If no value is specified no item dependencies are expanded.\n\n\n            If 'children' is specified then the list of any direct children will be expanded. For example\n\n            seasons of a show or episodes of a season.\n\n\n            If 'all' is specified then the parent chain will be expanded along with any child list at each level.\n\n            For example if an episode is specified then its season will be expanded and that season's episode list.\n\n            The season will have its show expanded and the show will have its season list expanded.\n\n\n            The 'all' options is useful when you deep link into a show/season/episode for the first time as\n\n            it provides full context for navigating around the show page. Subsequent navigation around\n\n            children of the show should only need to request expand of children.\n\n\n            If an expand is specified which is not relevant to the item type, it will be ignored.\n          in: query\n          schema:\n            type: string\n            enum:\n              - all\n              - children\n        - name: item_detail_select_season\n          description: >\n            Only relevant when loading show detail pages as these embed a\n            detailed item in the main page entry.\n\n\n            Given a targeted show page, it can be useful to get the details of a child season. This option\n\n            provides a means to return the `first` or `latest` season of a show embedded in the page.\n\n\n            The `expand` parameter also works here so for example you could land on a show page and request the\n\n            `item_detail_select_season=latest` along with `item_detail_expand=all`. This would then return the\n\n            detail of the latest season with its list of child episode summaries, and also expand\n\n            the detail of the show with its list of seasons summaries.\n          in: query\n          schema:\n            type: string\n            enum:\n              - first\n              - latest\n        - name: text_entry_format\n          description: |\n            Only relevant to page entries of type `TextEntry`.\n\n            Converts the value of a text page entry to the specified format.\n          in: query\n          schema:\n            type: string\n            enum:\n              - markdown\n              - html\n            default: markdown\n        - name: max_rating\n          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.\n          in: query\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: The page requested.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Page\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  \"/plans/{id}\":\n    x-serviceId: subscription\n    get:\n      description: Returns the details of a Plan with the specified id.\n      operationId: getPlan\n      tags:\n        - content\n      parameters:\n        - name: id\n          in: path\n          description: The identifier of the Plan to load.\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: The Plan requested.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Plan\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  /register:\n    x-serviceId: registration\n    post:\n      description: >\n        Register a new user, creating them an account.\n\n\n        Registration, when successful, will return an array of access tokens so the user is\n\n        immediately signed in.\n\n\n        It returns Catalog and Commerce scoped tokens for both Account and Profile.\n\n        The Commerce ones are intended to allow the purchase of a subscription plan\n\n        in the step after registration, without the user being prompted to enter\n\n        their username and password again.\n\n\n        An email will also be sent with a link they need to click to confirm their\n\n        email address. This confirmation is done via the /verify-email endpoint.\n      operationId: register\n      tags:\n        - registration\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RegistrationRequest\"\n        description: Registration details.\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                additionalProperties: false\n                items:\n                  $ref: \"#/components/schemas/AccessToken\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  /request-password-reset:\n    x-serviceId: support\n    post:\n      description: >\n        Request the password of an account's primary profile be reset.\n\n\n        Should be called when a user has forgotten their password.\n\n\n        This will send an email with a password reset link to the email address of the\n\n        primary profile of an account.\n\n\n        The link, once clicked, should take the user to the \"reset-password\" page of the\n\n        website. Here they will enter their new password and submit to the /reset-password\n\n        endpoint here, along with the password reset token provided in the original link.\n      operationId: forgotPassword\n      tags:\n        - support\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordResetEmailRequest\"\n        description: Email address of account to request a password reset on.\n        required: true\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  /reset-password:\n    x-serviceId: support\n    post:\n      description: >\n        When a user requests to reset their password via the\n        /request-password-reset endpoint, an\n\n        email is sent to the email address of the primary profile of the account. This email contains a link\n\n        with a token as query parameter. The link should takes the user to the \"reset-password\"\n\n        page of the website.\n\n\n        From the reset-password page a user should enter their primary account email address\n\n        and the new password they wish to use. These should then be submitted to this endpoint,\n\n        along with the token from the email link. The token should be provided in the authorization\n\n        header as a bearer token.\n      operationId: resetPassword\n      tags:\n        - support\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordResetRequest\"\n        description: Account email and new password.\n        required: true\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - resetPasswordAuth:\n            []\n  /schedules:\n    x-serviceId: schedule\n    get:\n      description: >\n        Returns schedules for a defined set of channels over a requested period.\n\n\n        Schedules are requested in hour blocks and returned grouped by the channel\n\n        they belong to.\n\n\n        For example, to load 12 hours of schedules for channels `4343` and `5234`,\n\n        on 21/2/2017 starting from 08:00.\n\n\n        ```\n\n        channels=4343,5234\n\n        date=2017-02-21\n\n        hour=8\n\n        x=12\n\n        ```\n\n\n        If a channel id is passed which doesn't exist then this endpoint will\n\n        return an empty schedule list for it. If instead we returned 404,\n\n        this would invalidate all other channel schedules in the same request\n\n        which would be unfriendly for clients presenting these channel schedules.\n      operationId: getSchedules\n      tags:\n        - content\n      parameters:\n        - name: channels\n          description: The list of channel ids to get schedules for.\n          in: query\n          required: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: date\n          description: |\n            The date to target in ISO format, e.g. `2017-05-23`.\n\n            The base hour requested will belong to this date.\n          in: query\n          required: true\n          schema:\n            type: string\n            format: date\n        - name: hour\n          description: >\n            The base hour in the day, defined by the `date` parameter, you wish\n            to load schedules for.\n\n\n            From 0 to 23, where 0 is midnight.\n          in: query\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            maximum: 23\n        - name: duration\n          description: >\n            The number of hours of schedules to load from the base `hour`\n            parameter.\n\n\n            This may be negative or positive depending on whether you want to load past or future schedules.\n\n\n            A value of zero is invalid.\n          in: query\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: -24\n            maximum: 24\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: >\n            An array of schedule lists for each channel requested.\n\n\n            The order of the channels will match the order of channel ids passed during the request.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ItemScheduleList\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  /search:\n    x-serviceId: search\n    get:\n      description: Search the catalog of items and people.\n      operationId: search\n      tags:\n        - content\n      parameters:\n        - name: term\n          description: The search term to query.\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: include\n          description: |\n            By default people, movies and tv (shows + programs) will be included\n            in the search results.\n\n            If you don't want all of these types you can specifiy the specific\n            includes you care about.\n          in: query\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - tv\n                - movies\n                - people\n        - name: group\n          description: >\n            When this option is set, instead of all search result items being\n            returned\n\n            in a single list, they will instead be returned under two lists. One for\n\n            movies and another for tv (shows + programs).\n\n\n            Default is undefined meaning items will be returned in a single list.\n\n\n            The array of `people` results will alway be separate from items.\n          in: query\n          schema:\n            type: boolean\n        - name: max_results\n          description: The maximum number of results to return.\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 50\n            default: 20\n        - name: max_rating\n          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.\n          in: query\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/Device\"\n        - $ref: \"#/components/parameters/Subscription\"\n        - $ref: \"#/components/parameters/Segments\"\n        - $ref: \"#/components/parameters/FeatureFlags\"\n      responses:\n        \"200\":\n          description: OK.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SearchResults\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n  /verify-email:\n    x-serviceId: support\n    post:\n      description: >\n        When an account is created an email is sent to the email address of the\n        new account.\n\n        This contains a link, which once clicked, verifies the email address of the account is correct.\n\n\n        The link contains a token as a query parameter which should be passed as the authorization\n\n        bearer token to this endpoint to complete email verification.\n\n\n        The token has en expiry, so if the link is not clicked before it expires, the account holder\n\n        may need to request a new verification email be sent. This can be done via the endpoint\n\n        /account/request-email-verification.\n      operationId: verifyEmail\n      tags:\n        - support\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"401\":\n          description: Invalid access token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"403\":\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"404\":\n          description: Not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n        default:\n          description: Service error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n      security:\n        - verifyEmailAuth:\n            []\nservers:\n  - url: /\ncomponents:\n  parameters:\n    Device:\n      name: device\n      description: The type of device the content is targeting.\n      in: query\n      schema:\n        type: string\n        default: web_browser\n    FeatureFlags:\n      name: ff\n      description: >\n        The set of opt in feature flags which cause breaking changes to\n        responses.\n\n\n        While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses\n\n        may need to evolve over this time.\n\n\n        These feature flags allow clients to select which response formats they expect and avoid breaking\n\n        clients as these formats evolve under the current major version.\n\n\n        ### Flags\n\n\n        - `all` - Enable all flags. Useful for testing. _Don't use in production_.\n\n        - `idp` - Dynamic item detail pages with schedulable rows.\n\n        - `ldp` - Dynamic list detail pages with schedulable rows.\n\n\n        See the `feature-flags.md` for available flag details.\n      in: query\n      style: form\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - all\n            - idp\n            - ldp\n    ItemType:\n      name: item_type\n      description: The item type to filter by. Defaults to unspecified.\n      in: query\n      enumEmoji:\n        movie: 🎬\n        show: 📺\n        season: 📺\n        episode: 📺\n        program: 🎟\n        link: 🔗\n        trailer: 🖥\n        channel: 📺\n      schema:\n        type: string\n        enum:\n          - movie\n          - show\n          - season\n          - episode\n          - program\n          - link\n          - trailer\n          - channel\n    ListOrder:\n      name: order\n      description: The list sort order, either 'asc' or 'desc'.\n      in: query\n      schema:\n        type: string\n        enum:\n          - asc\n          - desc\n        default: desc\n    ListOrderBy:\n      name: order_by\n      description: What to order by.\n      in: query\n      schema:\n        type: string\n        enum:\n          - a-z\n          - release-year\n          - date-added\n    MediaFileDelivery:\n      name: delivery\n      description: The video delivery type you require.\n      in: query\n      required: true\n      style: form\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - stream\n            - progressive\n            - download\n    MediaFileResolution:\n      name: resolution\n      description: The maximum resolution the device to playback the media can present.\n      required: true\n      in: query\n      schema:\n        type: string\n        enum:\n          - HD-1080\n          - HD-720\n          - SD\n    Segments:\n      name: segments\n      description: The list of segments to filter the response by.\n      in: query\n      style: form\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n    Subscription:\n      name: sub\n      description: The active subscription code.\n      in: query\n      schema:\n        type: string\n  securitySchemes:\n    accountAuth:\n      type: oauth2\n      description: Account JWT token\n      flows:\n        password:\n          tokenUrl: /account/authorization\n          scopes:\n            Catalog: Access all read only content\n            Commerce: Perform account level transactions\n            Settings: Modify account settings\n            Playback: Allow playback of restricted content\n    profileAuth:\n      type: oauth2\n      description: Profile JWT token\n      flows:\n        password:\n          tokenUrl: /account/profile/authorization\n          scopes:\n            Catalog: Modify profile preferences and activity (bookmarks, watch list)\n    resetPasswordAuth:\n      type: apiKey\n      name: authorization\n      in: header\n    verifyEmailAuth:\n      type: apiKey\n      name: authorization\n      in: header\n  schemas:\n    AccessToken:\n      emoji: 🔑\n      type: object\n      required:\n        - value\n        - refreshable\n        - expirationDate\n        - type\n      additionalProperties: false\n      properties:\n        value:\n          description: The token value used for authenticated requests.\n          type: string\n        refreshable:\n          description: True if this token can be refreshed, false if not.\n          type: boolean\n        expirationDate:\n          description: The timestamp this token expires.\n          type: string\n          format: date-time\n        type:\n          description: The type of the token.\n          type: string\n          enum:\n            - UserAccount\n            - UserProfile\n    Account:\n      emoji: 👤\n      type: object\n      required:\n        - id\n        - email\n        - trackingEnabled\n        - pinEnabled\n        - marketingEnabled\n        - primaryProfileId\n        - subscriptionCode\n        - profiles\n      additionalProperties: false\n      properties:\n        id:\n          description: The id of the account.\n          type: string\n        email:\n          description: The email address belonging to the account.\n          type: string\n        firstName:\n          description: The first name of the account holder.\n          type: string\n        lastName:\n          description: The last name of the account holder.\n          type: string\n        trackingEnabled:\n          description: Whether usage tracking is associated with the account or anonymous.\n          type: boolean\n        pinEnabled:\n          description: When an account level pin is defined this will be true.\n          type: boolean\n        marketingEnabled:\n          type: boolean\n          description: Whether the account has opted in or out of marketing material.\n        primaryProfileId:\n          description: The id of the primary profile.\n          type: string\n        usedFreeTrial:\n          description: Whether the account has used up their free trial period of a plan.\n          type: boolean\n        minRatingPlaybackGuard:\n          description: >\n            The classification rating defining the minimum rating level a user\n            should be\n\n            forced to enter the account pin code for playback. Anything at this rating\n\n            level or above will require the pin for playback.\n\n\n            e.g. AUOFLC-MA15+\n\n\n            If you want to disable this guard pass an empty string or `null`.\n          type: string\n        defaultPaymentInstrumentId:\n          description: The id of the payment instrument to use by default for account\n            transactions.\n          type: string\n        subscriptions:\n          description: The list of subscriptions, if any, the account has signed up to.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Subscription\"\n        subscriptionCode:\n          description: >\n            The active subscription code for an account.\n\n\n            The value of this should be passed to any endpoints accepting a `sub` query parameter.\n          type: string\n        profiles:\n          description: The list of profiles under this account.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ProfileSummary\"\n        entitlements:\n          description: The list of entitlements to playback specific items.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Entitlement\"\n    AccountDevices:\n      type: object\n      required:\n        - devices\n        - maxRegistered\n      additionalProperties: false\n      properties:\n        devices:\n          description: The array of registered playack devices.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Device\"\n        maxRegistered:\n          description: |\n            The maximum number of playback devices that can be registered\n            under an account at a single time.\n\n            If there is no maximum defined this value will be `-1`.\n          type: integer\n          format: int32\n        registrationWindow:\n          $ref: \"#/components/schemas/DeviceRegistrationWindow\"\n          description: |\n            Defines the start and end date of the current registration window along with calculated limits.\n      \n            If undefined then there are no registration limits for a period.\n      \n            For example given a registration period of 30 days, this sliding window will start on the\n            oldest registration of the last 30 days, and end 30 days from that registration date.\n      \n            In this window there is a limit on how many devices can be registered in 30 days.\n            If exceeded then no more devices can be registered unless one is deregistered or the\n            oldest registration drops off the 30 day window.\n      \n            Deregistration also has potential limits which may prevent a device being deregistered.\n            In this case the user must wait until the oldest deregistered device is more than 30\n            days old.\n        deregistrationWindow:\n          $ref: \"#/components/schemas/DeviceRegistrationWindow\"\n          description: |\n            Defines the start and end date of the current deregistration window along with calculated limits.\n      \n            If undefined then there are no deregistration limits for a period.\n      \n            For example given a deregistration period of 30 days, this sliding window will start on the\n            oldest deregistration of the last 30 days, and end 30 days from that deregistration date.\n      \n            In this window there is a limit on how many devices can be deregistered in 30 days.\n            If exceeded then no more devices can be deregistered unless the oldest deregistration drops\n            off the 30 day window.\n    AccountTokenRequest:\n      type: object\n      required:\n        - email\n        - scopes\n      additionalProperties: false\n      properties:\n        email:\n          description: The email associated with the account.\n          type: string\n        password:\n          description: >\n            The password associated with the account.\n\n\n            Either a pin or password should be supplied. If both are supplied the password will take precedence.\n          type: string\n        pin:\n          description: >\n            The pin associated with the account.\n\n\n            Either a pin or password should be supplied. If both are supplied the password will take precedence.\n          type: string\n        scopes:\n          description: >\n            The scope(s) of the tokens required.\n\n            For each scope listed an Account and Profile token of that scope will be returned\n          type: array\n          items:\n            type: string\n            enum:\n              - Catalog\n              - Commerce\n              - Settings\n              - Playback\n        cookieType:\n          description: >\n            If you specify a cookie type then a content filter cookie will be\n            returned\n\n            along with the token(s). This is only really intended for web based clients which\n\n            need to pass the cookies to a server to render a page based on the users\n\n            content filters, e.g subscription code.\n\n\n            If type `Session` the cookie will be session based.\n\n            If type `Persistent` the cookie will have a medium term lifespan.\n\n            If undefined no cookies will be set.\n          type: string\n          enum:\n            - Session\n            - Persistent\n      example:\n        email: \"\"\n        password: \"\"\n        pin: \"\"\n        scopes:\n          - Catalog\n    AccountUpdateRequest:\n      type: object\n      additionalProperties: false\n      properties:\n        firstName:\n          description: The first name of the account holder.\n          type: string\n        lastName:\n          description: The last name of the account holder.\n          type: string\n        trackingEnabled:\n          description: Whether usage tracking is associated with an account or anonymous.\n          type: boolean\n        defaultPaymentInstrumentId:\n          description: The id of the payment instrument to use by default for account\n            transactions.\n          type: string\n        minRatingPlaybackGuard:\n          description: >\n            The classification rating defining the minimum rating level a user\n            should be\n\n            forced to enter the account pin code for playback. Anything at this rating\n\n            level or above will require the pin for playback.\n\n\n            e.g. AUOFLC-MA15+\n\n\n            If you want to disable this guard pass an empty string or `null`.\n          type: string\n    AppConfig:\n      emoji: ⚙️\n      type: object\n      additionalProperties: false\n      properties:\n        classification:\n          description: The map of classification ratings.\n          type: object\n          additionalProperties:\n            $ref: \"#/components/schemas/Classification\"\n        subscription:\n          $ref: \"#/components/schemas/AppConfigSubscription\"\n        playback:\n          $ref: \"#/components/schemas/AppConfigPlayback\"\n        general:\n          $ref: \"#/components/schemas/AppConfigGeneral\"\n        navigation:\n          $ref: \"#/components/schemas/Navigation\"\n        sitemap:\n          type: array\n          items:\n            $ref: \"#/components/schemas/PageSummary\"\n    AppConfigGeneral:\n      type: object\n      additionalProperties: false\n      properties:\n        websiteUrl:\n          description: The url of the primary website.\n          type: string\n          format: uri\n        gaToken:\n          description: A Google Analytics token to track applicaton user events.\n          type: string\n        stripeKey:\n          description: The public Stripe key to use for payment transactions.\n          type: string\n        itemImageTypes:\n          description: A map of default item image types where the key is the item types.\n          type: object\n          additionalProperties:\n            type: string\n        currencyCode:\n          description: The currency code to target.\n          type: string\n        customFields:\n          description: A map of custom configuration fields.\n          type: object\n          additionalProperties: true\n    AppConfigPlayback:\n      type: object\n      required:\n        - heartbeatFrequency\n        - viewEventPoints\n      additionalProperties: false\n      properties:\n        heartbeatFrequency:\n          description: How often a heartbeat should be renewed during playback.\n          type: integer\n          format: int32\n        viewEventPoints:\n          description: >\n            An array of percentage points in which to fire off plabyack view\n            events.\n\n            For example a value of 0.5 would indicate that an event should be\n\n            fired when the user is half way through the video.\n\n            Often known as quartiles when four equaly spread event points.\n          type: array\n          items:\n            type: number\n            minimum: 0\n            maximum: 1\n    AppConfigSubscription:\n      type: object\n      additionalProperties: false\n      properties:\n        plans:\n          description: The available public plans a user can subscribe to.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Plan\"\n    Bookmark:\n      emoji: 🔖\n      type: object\n      required:\n        - itemId\n        - creationDate\n      additionalProperties: false\n      properties:\n        itemId:\n          description: The id of the item bookmarked.\n          type: string\n        creationDate:\n          description: The date the bookmark was created.\n          type: string\n          format: date-time\n    ChangePasswordRequest:\n      type: object\n      required:\n        - password\n      additionalProperties: false\n      properties:\n        password:\n          description: The new password for the account.\n          type: string\n    ChangePinRequest:\n      type: object\n      required:\n        - pin\n      additionalProperties: false\n      properties:\n        pin:\n          description: The new pin to set.\n          type: string\n    Classification:\n      allOf:\n        - $ref: \"#/components/schemas/ClassificationSummary\"\n        - type: object\n          required:\n            - level\n            - system\n            - images\n          properties:\n            advisoryText:\n              description: Parental advisort text.\n              type: string\n            level:\n              description: >\n                The level of this classification when compared with its\n                siblings.\n\n                A higher level means a greater restriction.\n\n                Each classification in a system should have a unique level.\n              type: integer\n              format: int32\n            system:\n              description: The parent system code of the classification.\n              type: string\n            images:\n              type: object\n              additionalProperties:\n                type: string\n                format: uri\n    ClassificationSummary:\n      emoji: 🔞\n      type: object\n      required:\n        - code\n        - name\n      properties:\n        code:\n          description: The unique code for a classification.\n          type: string\n        name:\n          description: The name of the classification for display.\n          type: string\n    Credit:\n      allOf:\n        - $ref: \"#/components/schemas/Person\"\n        - type: object\n          required:\n            - role\n          properties:\n            role:\n              description: The type of role the credit performed, e.g. actor.\n              type: string\n              enum:\n                - actor\n                - associateproducer\n                - coactor\n                - director\n                - executiveproducer\n                - filminglocation\n                - guest\n                - narrator\n                - other\n                - presenter\n                - producer\n                - productmanager\n                - thememusicby\n                - voice\n                - writer\n            character:\n              description: The name of the character.\n              type: string\n    Device:\n      emoji: 📱\n      type: object\n      required:\n        - id\n        - name\n        - registrationDate\n        - type\n      additionalProperties: false\n      properties:\n        id:\n          description: The unique identifier for this device e.g. serial number.\n          type: string\n        name:\n          description: The human recognisable name for this device.\n          type: string\n        registrationDate:\n          description: The date this device was registered.\n          type: string\n          format: date-time\n        type:\n          description: The device type e.g. web_browser.\n          type: string\n    DeviceRegistrationRequest:\n      type: object\n      required:\n        - id\n        - name\n        - type\n      additionalProperties: false\n      properties:\n        id:\n          description: The unique identifier for this device e.g. serial number.\n          type: string\n        name:\n          description: A human recognisable name for this device.\n          type: string\n        type:\n          description: The device type e.g. web_browser.\n          type: string\n    DeviceRegistrationWindow:\n      type: object\n      required:\n        - periodDays\n        - limit\n        - remaining\n        - startDate\n        - endDate\n      additionalProperties: false\n      properties:\n        periodDays:\n          description: The number of days a de/registration period runs for.\n          type: integer\n          format: int32\n        limit:\n          description: The maximum de/registrations that can be made in a period.\n          type: integer\n          format: int32\n        remaining:\n          description: The remaining de/registrations that can be made in the current\n            period.\n          type: integer\n          format: int32\n        startDate:\n          description: >\n            The start date of the current period.\n\n\n            This is based on the earliest device de/registrations in the past N days, where\n\n            N is defined by `periodDays`.\n\n\n            If no device has been de/registered then start date will be from the current date.\n          type: string\n          format: date-time\n        endDate:\n          description: >\n            The end date of the current period.\n\n\n            This is based on the value of `startDate` plus the number of days defined by  `periodDays`.\n          type: string\n          format: date-time\n    Entitlement:\n      allOf:\n        - $ref: \"#/components/schemas/OfferRights\"\n        - emoji: 🎟\n          type: object\n          properties:\n            activationDate:\n              description: The date of activation. If no date is defined the entitlement\n                has not be activated.\n              type: string\n              format: date-time\n            expirationDate:\n              description: The date the entitlement expires.\n              type: string\n              format: date-time\n            creationDate:\n              description: The date the entitlement was created.\n              type: string\n              format: date-time\n            playCount:\n              description: How many times the media has been played.\n              type: integer\n              format: int32\n            remainingDownloads:\n              description: How many more downloads of this media are available.\n              type: integer\n              format: int32\n            itemId:\n              description: The id of the item this entitlement is for.\n              type: string\n            itemType:\n              description: The type of item this entitlement is for.\n              type: string\n              enum:\n                - movie\n                - show\n                - season\n                - episode\n                - program\n                - link\n                - trailer\n                - channel\n              enumEmoji:\n                movie: 🎬\n                show: 📺\n                season: 📺\n                episode: 📺\n                program: 🎟\n                link: 🔗\n                trailer: 🖥\n                channel: 📺\n            mediaDuration:\n              description: The duration of the entitled media.\n              type: integer\n              format: int32\n            classification:\n              description: The classification of the entitled item.\n              $ref: \"#/components/schemas/ClassificationSummary\"\n    ExclusionRule:\n      emoji: ⛔️\n      type: object\n      description: Defines playback exclusion rules for an Offer or Entitlement.\n      additionalProperties: false\n      properties:\n        description:\n          type: string\n        device:\n          description: The device type that the exclusion rules apply to.\n          type: string\n        excludeAirplay:\n          description: Prevent airplay from an apple device.\n          type: boolean\n        excludeChromecast:\n          description: Prevent chromecasting.\n          type: boolean\n        excludeDelivery:\n          type: string\n          enum:\n            - Stream\n            - Download\n            - StreamOrDownload\n            - ProgressiveDownload\n            - None\n        excludeMinResolution:\n          type: string\n          enum:\n            - SD\n            - HD-720\n            - HD-1080\n            - Unknown\n    ItemCustomMetadata:\n      type: object\n      description: Custom metadata associated with an item.\n      required:\n        - name\n        - value\n      properties:\n        name:\n          description: The name of the custom metadata.\n          type: string\n        value:\n          description: The value of the custom metadata.\n          type: string\n    ItemDetail:\n      allOf:\n        - $ref: \"#/components/schemas/ItemSummary\"\n        - type: object\n          properties:\n            advisoryText:\n              description: Advisory text about this item, related to the classification\n              type: string\n            copyright:\n              description: Copyright information about this item\n              type: string\n            distributor:\n              description: The distributor of this item.\n              type: string\n            description:\n              description: The description of this item.\n              type: string\n            episodeName:\n              description: The full name of an episode.\n              type: string\n            customMetadata:\n              description: |\n                An ordered list of custom name-value-pair item metadata.\n\n                Usually displayed on an item detail page.\n              type: array\n              items:\n                $ref: \"#/components/schemas/ItemCustomMetadata\"\n            genrePaths:\n              description: >\n                An array of genre paths mapping to the values within the\n                `genres` array from ItemSummary.\n              type: array\n              items:\n                type: string\n            location:\n              description: |\n                The optional location (e.g. city) of an event.\n                Specific to a Program item type.\n              type: string\n            venue:\n              description: |\n                The optional venue of an event.\n                Specific to a Program item type.\n              type: string\n            eventDate:\n              description: |\n                The optional date of an event.\n                Specific to a Program item type.\n              type: string\n              format: date-time\n            credits:\n              description: A list of credits associated with this item.\n              type: array\n              items:\n                $ref: \"#/components/schemas/Credit\"\n            seasons:\n              description: A list of seasons associated with this item.\n              $ref: \"#/components/schemas/ItemList\"\n            episodes:\n              description: A list of episodes associated with this item.\n              $ref: \"#/components/schemas/ItemList\"\n            season:\n              description: The season associated with this item.\n              $ref: \"#/components/schemas/ItemDetail\"\n            show:\n              description: The season associated with this item.\n              $ref: \"#/components/schemas/ItemDetail\"\n            totalUserRatings:\n              description: The total number of users who have rated this item.\n              type: number\n              format: int32\n              minimum: 0\n            trailers:\n              description: A list of trailers associated with this item.\n              type: array\n              items:\n                $ref: \"#/components/schemas/ItemSummary\"\n    ItemList:\n      emoji: 📚\n      type: object\n      required:\n        - id\n        - size\n        - items\n        - paging\n        - path\n      description: A pageable list of items.\n      additionalProperties: false\n      properties:\n        id:\n          type: string\n          description: The id of this list\n        title:\n          type: string\n          description: The title of this list\n        description:\n          type: string\n          description: A full description of this list.\n        shortDescription:\n          type: string\n          description: A short description of this list.\n        tagline:\n          type: string\n          description: The tagline of the item.\n        path:\n          type: string\n          description: The path of this list\n        itemTypes:\n          type: array\n          description: The types of items in the list\n          items:\n            type: string\n            enum:\n              - movie\n              - show\n              - season\n              - episode\n              - program\n              - link\n              - trailer\n              - channel\n            enumEmoji:\n              movie: 🎬\n              show: 📺\n              season: 📺\n              episode: 📺\n              program: 🎟\n              link: 🔗\n              trailer: 🖥\n              channel: 📺\n        size:\n          type: integer\n          format: int32\n          description: The total size of the list\n        items:\n          type: array\n          description: A list of items\n          items:\n            $ref: \"#/components/schemas/ItemSummary\"\n        images:\n          type: object\n          additionalProperties:\n            type: string\n            format: uri\n        parameter:\n          type: string\n          description: >-\n            If this list is parameterized, then this contains the parameter of\n            the list in the format `name:value`.\n\n            For example the Movies Genre list will take a parameter `genre` with a given value. e.g. `genre:action` or `genre:drama`.\n        paging:\n          description: Metadata describing how to load the next or previous page of the list\n          $ref: \"#/components/schemas/Pagination\"\n        customFields:\n          description: A map of custom fields defined by a curator for a list.\n          type: object\n          additionalProperties: true\n    ItemSchedule:\n      emoji: ⏳\n      type: object\n      required:\n        - id\n        - channelId\n        - startDate\n        - endDate\n      additionalProperties: false\n      properties:\n        id:\n          type: string\n        channelId:\n          decription: The id of the channel item this schedule belongs to.\n          type: string\n        startDate:\n          description: The date and time this schedule starts.\n          type: string\n          format: date-time\n        endDate:\n          description: The date and time this schedule ends.\n          type: string\n          format: date-time\n        repeat:\n          description: True if this has been aired previously on the same channel.\n          type: boolean\n        live:\n          description: True if this is a live event.\n          type: boolean\n        featured:\n          description: True if this is a featured item schedule.\n          type: boolean\n        item:\n          description: The item this schedule targets.\n          $ref: \"#/components/schemas/ItemSummary\"\n    ItemScheduleList:\n      type: object\n      required:\n        - channelId\n        - startDate\n        - endDate\n        - schedules\n      additionalProperties: false\n      properties:\n        channelId:\n          description: The id of the channel the schedules belong to.\n          type: string\n        startDate:\n          description: The date and time this list of schedules starts.\n          type: string\n          format: date-time\n        endDate:\n          description: The date and time this list of schedules ends.\n          type: string\n          format: date-time\n        schedules:\n          description: The list of item schedules.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ItemSchedule\"\n    ItemSummary:\n      emoji: 📘\n      type: object\n      required:\n        - id\n        - type\n        - path\n        - title\n      discriminator:\n        propertyName: type\n      properties:\n        id:\n          description: Unique identifier for an Item\n          type: string\n        type:\n          description: The type of item\n          type: string\n          enum:\n            - movie\n            - show\n            - season\n            - episode\n            - program\n            - link\n            - trailer\n            - channel\n          enumEmoji:\n            movie: 🎬\n            show: 📺\n            season: 📺\n            episode: 📺\n            program: 🎟\n            link: 🔗\n            trailer: 🖥\n            channel: 📺\n        title:\n          description: The display title of the item.\n          type: string\n        contextualTitle:\n          description: |\n            A contextually relative title to display after a parent title.\n            Mostly applicable to Season, Episode and Trailer.\n          type: string\n        shortDescription:\n          description: A truncated description of the item\n          type: string\n        tagline:\n          description: The tagline of the item\n          type: string\n        classification:\n          description: The classification rating of this item.\n          $ref: \"#/components/schemas/ClassificationSummary\"\n        path:\n          description: The path to the detail page of this item. Can be used to load the\n            item detail page via the /page endpoint.\n          type: string\n        watchPath:\n          description: The path to watch this item, if the item is a watchable type, e.g. a\n            `movie`, `program` and `episode`.\n          type: string\n        scopes:\n          description: The scopes for this item\n          type: array\n          items:\n            type: string\n        releaseYear:\n          description: The year this item was released\n          type: integer\n          format: int32\n        episodeCount:\n          description: The number of episodes in the season, if the item is a season.\n          type: integer\n          format: int32\n        availableEpisodeCount:\n          description: The number of available episodes in the season, if the item is a\n            season.\n          type: integer\n          format: int32\n        availableSeasonCount:\n          description: The number of available seasons in the show, if the item is a show.\n          type: integer\n          format: int32\n        seasonNumber:\n          description: The number of a season, if the item is a season.\n          type: integer\n          format: int32\n        episodeNumber:\n          description: The number of an episode, if the item is an episode.\n          type: integer\n          format: int32\n        showId:\n          description: The identifier of the show this item belongs to, if the item is a\n            season or episode.\n          type: string\n        seasonId:\n          description: The identifier of the season this item belongs to, if the item is an\n            episode.\n          type: string\n        hasClosedCaptions:\n          description: Whether closed captioning is available.\n          type: boolean\n        averageUserRating:\n          description: The average user rating.\n          type: number\n          format: int32\n          minimum: 0\n        badge:\n          description: The badge this item has.\n          type: string\n        genres:\n          description: The array of genres this item belongs to.\n          type: array\n          items:\n            type: string\n        duration:\n          description: The duration of the media in seconds.\n          type: integer\n          format: int32\n          minimum: 0\n        customId:\n          description: |\n            A custom identifier for this item.\n            For example the id for this item under a different content system.\n          type: string\n        offers:\n          description: The array of available offers for this item.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Offer\"\n        images:\n          type: object\n          additionalProperties:\n            type: string\n            format: uri\n        customFields:\n          description: A map of custom fields defined by a curator for an item.\n          type: object\n          additionalProperties: true\n    MediaFile:\n      emoji: 📀\n      type: object\n      required:\n        - name\n        - deliveryType\n        - url\n        - drm\n        - format\n        - resolution\n        - width\n        - height\n        - language\n      additionalProperties: false\n      properties:\n        name:\n          description: The name of the media file.\n          type: string\n        deliveryType:\n          description: The way in which the media file is delivered.\n          type: string\n          enum:\n            - Stream\n            - Progressive\n            - Download\n        url:\n          description: The url to access the media file.\n          type: string\n          format: uri\n        drm:\n          description: The type of drm used to encrypt the media. 'None' if unencrypted.\n          type: string\n        format:\n          description: The format the media was encoded in.\n          type: string\n        resolution:\n          description: The resolution of the video media.\n          type: string\n          enum:\n            - SD\n            - HD-720\n            - HD-1080\n            - Unknown\n        width:\n          description: The width of the video media.\n          type: integer\n          format: int32\n        height:\n          description: The height of the video media.\n          type: integer\n          format: int32\n        channels:\n          description: The number of audio channels.\n          type: integer\n          format: int32\n        language:\n          description: The language code for the media, e.g. 'en'.\n          type: string\n    NavContent:\n      type: object\n      properties:\n        title:\n          description: The title of the embedded navigation content.\n          type: string\n        list:\n          description: An embedded list.\n          $ref: \"#/components/schemas/ItemList\"\n        imageType:\n          description: |\n            The image type to target when rendering items of the list.\n\n            e.g wallpaper, poster, hero3x1, logo.\n          type: string\n    NavEntry:\n      type: object\n      additionalProperties: false\n      properties:\n        label:\n          description: The text label for this nav entry.\n          type: string\n        path:\n          description: >\n            The path this nav entry links to.\n\n            May be undefined if the nav entry is not clickable e.g. a nav heading.\n\n            If the value begins with `http` then it's an external url.\n          type: string\n        content:\n          description: Embedded content to display in a navigation menu.\n          $ref: \"#/components/schemas/NavContent\"\n        children:\n          description: Child nav entries.\n          type: array\n          items:\n            $ref: \"#/components/schemas/NavEntry\"\n        featured:\n          description: >\n            True if this is a featured menu item.\n\n\n            Featured menu items may have a more prominent presentation than others in the navigation.\n          type: boolean\n        customFields:\n          description: A map of custom fields defined by a curator for a nav entry.\n          type: object\n          additionalProperties: true\n    Navigation:\n      type: object\n      required:\n        - header\n      additionalProperties: false\n      properties:\n        header:\n          description: The header navigation.\n          type: array\n          items:\n            $ref: \"#/components/schemas/NavEntry\"\n        footer:\n          description: The footer navigation.\n          $ref: \"#/components/schemas/NavEntry\"\n        account:\n          description: The account navigation.\n          $ref: \"#/components/schemas/NavEntry\"\n        copyright:\n          description: Copyright information.\n          type: string\n        customFields:\n          description: A map of custom fields defined by a curator for navigation.\n          type: object\n          additionalProperties: true\n    Offer:\n      allOf:\n        - $ref: \"#/components/schemas/OfferRights\"\n        - emoji: 💰\n          type: object\n          required:\n            - price\n            - availability\n          properties:\n            name:\n              type: string\n            price:\n              type: number\n              format: float\n            startDate:\n              type: string\n              format: date-time\n            endDate:\n              type: string\n              format: date-time\n            availability:\n              type: string\n              enum:\n                - Available\n                - ComingSoon\n            subscriptionCode:\n              description: The code of the subscription this offer is offered under, if any.\n              type: string\n    OfferRights:\n      emoji: 🎟\n      type: object\n      description: The base type for both Offer and Entitlement.\n      required:\n        - deliveryType\n        - scopes\n        - resolution\n        - ownership\n      properties:\n        deliveryType:\n          type: string\n          enum:\n            - Stream\n            - Download\n            - StreamOrDownload\n            - ProgressiveDownload\n            - None\n        scopes:\n          type: array\n          items:\n            type: string\n        resolution:\n          type: string\n          enum:\n            - SD\n            - HD-720\n            - HD-1080\n            - Unknown\n        ownership:\n          type: string\n          enum:\n            - Subscription\n            - Free\n            - Rent\n            - Own\n            - None\n        maxPlays:\n          type: integer\n          format: int32\n          description: The maximum number of allowed plays.\n        maxDownloads:\n          type: integer\n          format: int32\n          description: The maximum number of allowed downloads.\n        rentalPeriod:\n          type: integer\n          format: int32\n          description: The length of time in minutes which the rental will last once\n            purchased.\n        playPeriod:\n          type: integer\n          format: int32\n          description: The length of time in minutes which the rental will last once played\n            for the first time.\n        exclusionRules:\n          type: array\n          description: Any specific playback exclusion rules.\n          items:\n            $ref: \"#/components/schemas/ExclusionRule\"\n    Page:\n      allOf:\n        - $ref: \"#/components/schemas/PageSummary\"\n        - type: object\n          required:\n            - entries\n          properties:\n            metadata:\n              $ref: \"#/components/schemas/PageMetadata\"\n            entries:\n              description: Entries of a page\n              type: array\n              items:\n                $ref: \"#/components/schemas/PageEntry\"\n            customFields:\n              description: A map of custom fields defined by a curator for a page.\n              type: object\n              additionalProperties: true\n            item:\n              description: |\n                When the page represents the detail of an item this property will contain the item detail.\n      \n                For clients consuming an item detail page, any page row entry of type `ItemDetailEntry`\n                should look to obtain its data from the contents of this property.\n      \n                *Note that you have to be using feature flag `idp` to enable this\n                on item detail pages. See `feature-flags.md` for further details.*\n              $ref: \"#/components/schemas/ItemDetail\"\n            list:\n              description: |\n                When the page represents the detail of a List this property will contain the list in question.\n      \n                For clients consuming a list detail page, any page row entry of type `ListDetailEntry`\n                should look to obtain its data from the contents of this property.\n      \n                *Note that you have to be using feature flag `ldp` to enable this\n                on list detail pages. See `feature-flags.md` for further details.*\n              $ref: \"#/components/schemas/ItemList\"\n    PageEntry:\n      emoji: 📑\n      type: object\n      required:\n        - id\n        - type\n        - title\n        - template\n      description: >\n        Represents an entry of a Page.\n\n        Defines what specific piece of content should be presented e.g. an Item or ItemList.\n\n        Also defines what visual template should be used to render that content.\n      additionalProperties: false\n      properties:\n        id:\n          type: string\n          description: The unique identifier for a page entry.\n        type:\n          type: string\n          description: The type of PageEntry. Used to help identify what type of content\n            will be presented.\n          enum:\n            - ItemEntry\n            - ItemDetailEntry\n            - ListEntry\n            - ListDetailEntry\n            - UserEntry\n            - TextEntry\n            - ImageEntry\n            - CustomEntry\n            - PeopleEntry\n          enumEmoji:\n            ItemEntry: 📘\n            ItemDetailEntry: 📘\n            ListEntry: 📚\n            ListDetailEntry: 📚\n            UserEntry: 👤\n            TextEntry: 📝\n            ImageEntry: 🌅\n            CustomEntry: ⚙️\n            PeopleEntry: 👱\n        title:\n          description: The name of the Page Entry.\n          type: string\n        template:\n          description: Template type used to present the content of the PageEntry.\n          type: string\n        item:\n          description: If 'type' is 'ItemEntry' then this is the item to be represented.\n          $ref: \"#/components/schemas/ItemSummary\"\n        list:\n          description: If 'type' is 'ListEntry' or 'UserEntry' then this is the list to be represented.\n          $ref: \"#/components/schemas/ItemList\"\n        text:\n          description: If 'type' is 'TextEntry' then this is the text to be represented.\n          type: string\n        people:\n          description: If 'type' is 'PeopleEntry' then this is the array of people to\n            present.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Person\"\n        customFields:\n          description: A map of custom fields defined by a curator for a page entry.\n          type: object\n          additionalProperties: true\n        images:\n          description: |\n            The images for the page entry if any.\n\n            For example the images of an `ImageEntry`.\n          type: object\n          additionalProperties:\n            type: string\n            format: uri\n    PageMetadata:\n      type: object\n      description: Metadata associated with a page. Primarily intended for SEO usage.\n      additionalProperties: false\n      properties:\n        description:\n          type: string\n        keywords:\n          type: array\n          items:\n            type: string\n    PageSummary:\n      emoji: 📃\n      type: object\n      required:\n        - id\n        - path\n        - title\n        - template\n        - isStatic\n        - isSystemPage\n      properties:\n        id:\n          description: Unique identifier for the page.\n          type: string\n        title:\n          description: Title of the page.\n          type: string\n        path:\n          description: Unique path for the page.\n          type: string\n        key:\n          description: Key used to lookup a known page.\n          type: string\n        template:\n          description: Identifier for of the page template to render this page.\n          type: string\n        isStatic:\n          description: >\n            True if this page is static and doesn't have any dynamic content to\n            load.\n\n\n            Static pages don't need to go back to the page endpoint to load page content\n\n            instead the page summary loaded with the sitemap should be enough to determine\n\n            the page template type and render based on this.\n          type: boolean\n        isSystemPage:\n          deprecated: Replaced with isStatic\n          description: >\n            True if this page is a system page type.\n\n\n            **DEPRECATED** This property doesn't have any real use in client applications\n\n            anymore so shouldn't be used. It especially shouldn't be used to determine if\n\n            a page is static or not. Use the `isStatic` property instead.\n          type: boolean\n    Pagination:\n      type: object\n      required:\n        - total\n        - page\n      additionalProperties: false\n      properties:\n        next:\n          description: Path to load next page of data, or null if not available\n          type: string\n        previous:\n          description: Path to load previous page of data, or null if not available.\n          type: string\n        page:\n          description: >\n            The current page number.\n\n\n            A value of 0 indicates that the fist page has not yet been loaded. This is\n\n            useful when wanting to return the paging metadata to indicate how to\n\n            load in the first page.\n          type: integer\n          format: int32\n          minimum: 0\n        size:\n          description: >\n            The current page size.\n\n\n            A value of -1 indicates that the size has not yet been determined. This may\n\n            arise when embedding secure list pagination info in a page which must be cached\n\n            by a CDN. For example a Bookmarks list.\n          type: integer\n          format: int3\n          minimum: -1\n        total:\n          description: >\n            The total number of pages available given the current page size.\n\n\n            A value of -1 indicates that the total has not yet been determined. This may\n\n            arise when embedding secure list pagination info in a page which must be cached\n\n            by a CDN. For example a Bookmarks list.\n          type: integer\n          format: int32\n          minimum: -1\n        authorization:\n          description: |\n            The authorization requirements to load a page of items.\n      \n            This will only be present on lists which are protected by some form\n            of authorization token e.g. Bookmarks, Watched, Entitlements.\n          $ref: \"#/components/schemas/PaginationAuth\"\n        options:\n          description: |\n            Any active list sort and filter options.\n      \n            If an option has a default value then it won't be defined.\n          $ref: \"#/components/schemas/PaginationOptions\"\n    PaginationAuth:\n      type: object\n      required:\n        - type\n        - scope\n      properties:\n        type:\n          description: The token type required to load the list.\n          type: string\n          enum:\n            - UserAccount\n            - UserProfile\n        scope:\n          description: The token scope required.\n          type: string\n          enum:\n            - Catalog\n            - Commerce\n            - Settings\n    PaginationOptions:\n      type: object\n      additionalProperties: false\n      properties:\n        pageSize:\n          description: The number of items to return in a list page.\n          type: integer\n          format: int32\n        order:\n          description: The applied sort order if any.\n          type: string\n          enum:\n            - asc\n            - desc\n        orderBy:\n          description: The applied sort ordering property if any.\n          type: string\n          enum:\n            - a-z\n            - release-year\n            - date-added\n        maxRating:\n          description: The maximum rating (inclusive) of items returned, e.g. 'AUOFLC-PG'.\n          type: string\n        itemType:\n          description: Specific item type filter.\n          type: string\n          enum:\n            - movie\n            - show\n            - season\n            - episode\n            - program\n            - link\n            - trailer\n            - channel\n          enumEmoji:\n            movie: 🎬\n            show: 📺\n            season: 📺\n            episode: 📺\n            program: 🎟\n            link: 🔗\n            trailer: 🖥\n            channel: 📺\n    PasswordResetEmailRequest:\n      type: object\n      required:\n        - email\n      additionalProperties: false\n      properties:\n        email:\n          description: The email address of the primary account profile to reset the\n            password for.\n          type: string\n    PasswordResetRequest:\n      type: object\n      required:\n        - email\n        - password\n      additionalProperties: false\n      properties:\n        email:\n          description: The email address of the primary account profile to reset the\n            password for.\n          type: string\n        password:\n          description: The new password for the primary account profile.\n          type: string\n    Person:\n      emoji: 👱\n      type: object\n      required:\n        - name\n        - path\n      properties:\n        name:\n          description: The name of the person.\n          type: string\n        path:\n          description: The path to the person\n          type: string\n    Plan:\n      emoji: 💳\n      type: object\n      required:\n        - id\n        - title\n        - tagline\n        - type\n        - isFeatured\n        - isActive\n        - isPrivate\n        - revenueType\n        - subscriptionCode\n        - alias\n        - benefits\n        - billingPeriodType\n        - billingPeriodFrequency\n        - hasTrialPeriod\n        - trialPeriodDays\n        - termsAndConditions\n        - currency\n      additionalProperties: false\n      properties:\n        id:\n          description: The identifier of a plan.\n          type: string\n        title:\n          description: The title of a plan.\n          type: string\n        tagline:\n          description: The short tagline for a plan.\n          type: string\n        type:\n          description: The type of plan.\n          type: string\n          enum:\n            - Free\n            - Subscription\n        isFeatured:\n          description: True if a plan should be highlighted as featured, false if not.\n          type: boolean\n        isActive:\n          description: True if a plan is active, false if its retired.\n          type: boolean\n        isPrivate:\n          description: True if a plan should not be presented in the primary plan options,\n            false if not.\n          type: boolean\n        revenueType:\n          description: The revenue type a plan targets.\n          type: string\n          enum:\n            - TVOD\n            - SVOD\n        subscriptionCode:\n          description: The subscription code a plan targets.\n          type: string\n        alias:\n          description: An alias for a plan.\n          type: string\n        benefits:\n          description: The list of benefits to display for a plan.\n          type: array\n          items:\n            type: string\n        billingPeriodType:\n          description: The type of billing period used.\n          type: string\n          enum:\n            - week\n            - month\n            - year\n            - none\n        billingPeriodFrequency:\n          description: Given the `billingPeriodType` this is how frequently it will run.\n            e.g. every 2 weeks.\n          type: integer\n          format: int32\n        hasTrialPeriod:\n          description: True if a plan has a trial period, false if not.\n          type: boolean\n        trialPeriodDays:\n          description: How many days a trial period runs for a plan. Only valid if\n            `hasTrialPeriod` is true.\n          type: integer\n          format: int32\n        termsAndConditions:\n          description: The terms and conditions for a plan.\n          type: string\n        price:\n          description: The price of a plan. If a free plan then undefined.\n          type: number\n          format: float\n        currency:\n          description: The currency a plan is offered in.\n          type: string\n        customFields:\n          description: A map of custom fields defined by a curator for a plan.\n          type: object\n          additionalProperties: true\n    ProfileCreationRequest:\n      type: object\n      required:\n        - name\n      additionalProperties: false\n      properties:\n        name:\n          description: The unique name of the profile.\n          type: string\n          minLength: 1\n        pinEnabled:\n          description: |\n            Whether an account pin is required to enter the profile.\n\n            If no account pin is defined this has no impact.\n          type: boolean\n          default: false\n        purchaseEnabled:\n          description: Whether the profile can make purchases with the account payment\n            options.\n          type: boolean\n          default: true\n        segments:\n          description: The segments a profile should be placed under\n          type: array\n          items:\n            type: string\n    ProfileDetail:\n      allOf:\n        - $ref: \"#/components/schemas/ProfileSummary\"\n        - type: object\n          required:\n            - watched\n            - rated\n            - bookmarked\n          properties:\n            watched:\n              description: A map of watched itemIds => last watched position\n              type: object\n              additionalProperties:\n                $ref: \"#/components/schemas/Watched\"\n            rated:\n              description: A map of rated itemIds => rating out of 10\n              type: object\n              additionalProperties:\n                type: integer\n                format: int32\n            bookmarked:\n              description: A map of bookmarked itemIds => created date\n              type: object\n              additionalProperties:\n                type: string\n                format: date-time\n    ProfileSummary:\n      emoji: 👥\n      type: object\n      required:\n        - id\n        - name\n        - isActive\n        - pinEnabled\n        - purchaseEnabled\n        - marketingEnabled\n        - segments\n      properties:\n        id:\n          type: string\n          description: The id of the profile.\n        name:\n          type: string\n          description: The unique name of the profile.\n        pinEnabled:\n          type: boolean\n          description: Whether a pin is required to enter the profile.\n        purchaseEnabled:\n          type: boolean\n          description: Whether the profile can make purchases with the account payment\n            options.\n        segments:\n          description: The segments a profile has been placed under\n          type: array\n          items:\n            type: string\n        isActive:\n          deprecated: Inactive profiles are no longer returned\n          type: boolean\n          description: >\n            Whether the profile is active or not.\n\n\n            **DEPRECATED** - Always true. Inactive profiles are no longer returned.\n        marketingEnabled:\n          deprecated: Has moved to Account.marketingEnabled\n          type: boolean\n          description: >\n            Whether the profile has opted in or out of marketing material.\n\n\n            **DEPRECATED** - Marketing material is no longer tied to profiles, only account. See `Account.marketingEnabled`.\n        maxRatingContentFilter:\n          deprecated: Replaced with segmentation tags\n          description: |\n            The maximum rating (inclusive) of content to return in feeds.\n      \n            **DEPRECATED** - It's no longer recommended filtering content globally as apps can end up\n            with pages without content, even the homepage. Instead using features like segmentation\n            tags to target demographics like kids means content curation can be more thought out.\n          $ref: \"#/components/schemas/ClassificationSummary\"\n        minRatingPlaybackGuard:\n          deprecated: Has moved to Account\n          description: |\n            The minumum rating (inclusive) of content where an account pin should be presented before entring playback.\n      \n            **DEPRECATED** - The playback guard is now defined at the account level, where an account\n            pin also exists. This is then applied across all profiles.\n          $ref: \"#/components/schemas/ClassificationSummary\"\n    ProfileTokenRequest:\n      type: object\n      required:\n        - profileId\n        - scopes\n      additionalProperties: false\n      properties:\n        profileId:\n          description: The id of the profile the token should grant access rights to.\n          type: string\n        pin:\n          description: The pin associated with this profile, if any.\n          type: string\n        scopes:\n          description: The scope(s) of the token(s) required.\n          type: array\n          items:\n            type: string\n            enum:\n              - Catalog\n              - Commerce\n              - Settings\n    ProfileUpdateRequest:\n      type: object\n      additionalProperties: false\n      properties:\n        name:\n          description: The unique name of the profile.\n          type: string\n          minLength: 1\n        pinEnabled:\n          description: |\n            Whether an account pin is required to enter the profile.\n\n            If no account pin is defined this has no impact.\n          type: boolean\n        purchaseEnabled:\n          description: Whether the profile can make purchases with the account payment\n            options.\n          type: boolean\n        segments:\n          description: The segments a profile should be placed under\n          type: array\n          items:\n            type: string\n    RegistrationRequest:\n      type: object\n      required:\n        - email\n        - password\n      additionalProperties: false\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        pin:\n          description: The primary account pin.\n          type: string\n        marketing:\n          description: Whether to receive marketing material or not. Default to true.\n          type: boolean\n          default: true\n        segments:\n          description: The segments to apply to the primary profile.\n          type: array\n          items:\n            type: string\n    SearchResults:\n      emoji: 🔍\n      type: object\n      required:\n        - term\n        - total\n      additionalProperties: false\n      properties:\n        term:\n          description: The search term.\n          type: string\n        total:\n          description: The total number of results.\n          type: integer\n          format: int32\n          minimum: 0\n        items:\n          $ref: \"#/components/schemas/ItemList\"\n        movies:\n          $ref: \"#/components/schemas/ItemList\"\n        tv:\n          $ref: \"#/components/schemas/ItemList\"\n        people:\n          description: The list of people relevant to the search term.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Person\"\n    ServiceError:\n      emoji: 🔴\n      type: object\n      required:\n        - message\n      additionalProperties: false\n      properties:\n        message:\n          type: string\n          description: A description of the error.\n        code:\n          type: integer\n          format: int32\n          description: An optional code classifying the error. Should be taken in the\n            context of the http status code.\n    Subscription:\n      emoji: 💳\n      type: object\n      required:\n        - code\n        - startDate\n        - isTrialPeriod\n        - planId\n        - status\n      additionalProperties: false\n      properties:\n        code:\n          description: The unique subscription code.\n          type: string\n        startDate:\n          description: The start date of a subscription.\n          type: string\n          format: date-time\n        endDate:\n          description: |\n            The end date of a subscription.\n\n            Some subscriptions may not have an end date, in which case this\n            property will not exist.\n          type: string\n          format: date-time\n        isTrialPeriod:\n          description: True if a subscription is in its trial period, false if not.\n          type: boolean\n        planId:\n          description: The plan a subscription belongs to.\n          type: string\n        status:\n          description: The status of a subscription.\n          type: string\n          enum:\n            - Active\n            - Cancelled\n            - Lapsed\n            - Expired\n            - None\n    TokenRefreshRequest:\n      type: object\n      required:\n        - token\n      additionalProperties: false\n      properties:\n        token:\n          description: The token to refresh.\n          type: string\n        cookieType:\n          description: >\n            If you specify a cookie type then a content filter cookie will be\n            returned\n\n            along with the token(s). This is only really intended for web based clients which\n\n            need to pass the cookies to a server to render a page based on the users\n\n            content filters, e.g subscription code.\n\n\n            If type `Session` the cookie will be session based.\n\n            If type `Persistent` the cookie will have a medium term lifespan.\n\n            If undefined no cookies will be set.\n          type: string\n          enum:\n            - Session\n            - Persistent\n    UserRating:\n      emoji: ⭐️\n      type: object\n      required:\n        - itemId\n        - rating\n      additionalProperties: false\n      properties:\n        itemId:\n          type: string\n          description: The id of the item rated.\n        rating:\n          description: The rating out of 10\n          type: integer\n          format: int32\n          minimum: 1\n          maximum: 10\n    Watched:\n      emoji: 👀\n      type: object\n      required:\n        - position\n        - firstWatchedDate\n        - lastWatchedDate\n      additionalProperties: false\n      properties:\n        itemId:\n          description: The id of the item watched.\n          type: string\n        position:\n          description: The last playhead position watched for the item.\n          type: integer\n          format: int32\n        firstWatchedDate:\n          type: string\n          format: date-time\n        lastWatchedDate:\n          type: string\n          format: date-time",
			"canonicalURL": "/github.com/yonaskolb/SwagGen@0bef6077c83620565e2ae50d76f9633061b0a2ac/-/blob/Specs/Rocket/spec.yml",
			"externalURLs": [
				{
					"url": "https://github.com/yonaskolb/SwagGen/blob/0bef6077c83620565e2ae50d76f9633061b0a2ac/Specs/Rocket/spec.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:35229: json: cannot unmarshal Go value of type ogen.Spec: spec: json: cannot unmarshal Go value of type ogen.Properties: json: cannot unmarshal JSON string into Go value of type bool"
}