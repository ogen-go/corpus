{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/contao/contao-manager"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "docs/api/swagger.yaml",
			"byteSize": 56846,
			"content": "openapi: 3.0.0\ninfo:\n    title: Contao Manager API\n    version: \"1.5.0\"\n\npaths:\n\n    ###############\n    #   Session   #\n    ###############\n\n    /api/session:\n        post:\n            summary: Create a new session (login)\n            description: If no users are defined, this will create an initial user with the given credentials.\n            tags: [Session]\n            security: []\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UserPassword'\n\n            responses:\n                200:\n                    description: Successful login\n                    headers:\n                        Cookie:\n                            description: On successful login the server will set the authentication cookies.\n                            schema:\n                                type: object\n                                properties:\n                                    contao_manager_auth:\n                                        description: Authentication token as HTTP-only cookie.\n                                        type: string\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/User'\n                401:\n                    description: If the authentication was not successful.\n                403:\n                    description: If the Contao Manager is locked after three unsuccessful login attempts.\n\n        get:\n            summary: Get current session status\n            description: Returns information about the current session (based on authentication)\n            tags: [Session]\n            responses:\n                200:\n                    description: If the user is authenticated\n                    content:\n                        application/json:\n                            schema:\n                                oneOf:\n                                    - $ref: '#/components/schemas/User'\n                                    - $ref: '#/components/schemas/TokenResponse'\n                204:\n                    description: If there are no records in the user database\n                401:\n                    description: If the user is not authenticated\n                403:\n                    description: If the Contao Manager is locked after three unsuccessful login attempts.\n\n        delete:\n            summary: Delete the current session (logout)\n            tags: [Session]\n            responses:\n                204:\n                    description: On successful logout.\n                401:\n                    description: If there is no active session.\n                403:\n                    description: If the Contao Manager is locked after three unsuccessful login attempts.\n\n\n    #############\n    #   Files   #\n    #############\n\n    /api/files/{file}:\n        parameters:\n            - name: file\n              in: path\n              description: The filename to handle.\n              required: true\n              schema:\n                  type: string\n                  enum: [composer.json, composer.lock]\n        get:\n            summary: Gets the content of a file.\n            tags: [Files]\n            responses:\n                200:\n                    description: Content of the files.\n                    content:\n                        text/plain:\n                            schema:\n                                type: string\n                403:\n                    description: If the file parameter is invalid.\n        put:\n            summary: Writes content of a file\n            tags: [Files]\n            responses:\n                200:\n                    description: Content of the file\n                    content:\n                        text/plain:\n                            schema:\n                                type: string\n                403:\n                    description: If the file parameter is invalid.\n\n\n    ##############\n    #   System   #\n    ##############\n\n    /api/server/self-update:\n        get:\n            summary: Gets update status of the Contao Manager\n            tags: [Server Configuration]\n            responses:\n                200:\n                    description: The update status.\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    current_version:\n                                        type: string\n                                        description: Current version of the Contao Manager.\n                                    latest_version:\n                                        type: string\n                                        description: Latest available version of the Contao Manager.\n                                    channel:\n                                        type: string\n                                        enum: [stable, dev]\n                                    supported:\n                                        type: boolean\n                                        description: False if the current build cannot be updated.\n                                    error:\n                                        type: string\n                                        description: Error information if the request for the latest version failed.\n                501:\n                    description: If version is a development build that cannot be updated.\n\n    /api/server/config:\n        get:\n            summary: Gets server configuration\n            tags: [Server Configuration]\n            responses:\n                200:\n                    description: The configured server configuration if available, otherwise the detected values.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ServerConfig'\n        put:\n            summary: Sets server configuration\n            tags: [Server Configuration]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            properties:\n                                php_cli:\n                                    type: string\n                                    description: Path to the PHP command line.\n                                cloud:\n                                    type: boolean\n                                    description: Enables or disables use of the Composer Resolver Cloud.\n\n            responses:\n                200:\n                    description: If the config was successfully saved.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ServerConfig'\n                400:\n                    description: Error message if the PHP CLI is invalid\n                    content:\n                        application/problem+json:\n                            schema:\n                                $ref: '#/components/schemas/ApiProblem'\n\n    /api/server/php-web:\n        get:\n            summary: Gets PHP web server configuration\n            tags: [Server Configuration]\n            responses:\n                200:\n                    description: Version of the current PHP web server. The problem key returns the first found server issue or empty if none.\n                    content:\n                        application/json:\n                            schema:\n                                properties:\n                                    version:\n                                        type: string\n                                        description: PHP version\n                                    version_id:\n                                        type: integer\n                                        description: PHP version ID\n                                    platform:\n                                        type: string\n                                        enum:\n                                            - unix\n                                            - windows\n                                    problem:\n                                        $ref: '#/components/schemas/ApiProblem'\n\n    /api/server/php-cli:\n        get:\n            summary: Gets PHP command line configuration\n            tags: [Server Configuration]\n            responses:\n                200:\n                    description: Version of the current PHP command line binary. The problem key returns the first found server issue or empty if none.\n                    content:\n                        application/json:\n                            schema:\n                                properties:\n                                    version:\n                                        type: string\n                                    version_id:\n                                        type: integer\n                                        description: PHP version ID\n                                    problem:\n                                        $ref: '#/components/schemas/ApiProblem'\n                503:\n                    description: If the command line binary cannot be found.\n\n    /api/server/phpinfo:\n        get:\n            summary: Gets PHP Information\n            tags: [Server Configuration]\n            responses:\n                200:\n                    description: Gets result of the phpinfo() function.\n\n    /api/server/opcode:\n        get:\n            summary: Gets PHP opcode cache Information\n            tags: [Server Configuration]\n            responses:\n                200:\n                    description: Status of the opcode cache.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ServerOpcache'\n        delete:\n            summary: Resets the opcode cache\n            tags: [Server Configuration]\n            responses:\n                200:\n                    description: Status of the opcode cache.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ServerOpcache'\n\n    /api/server/composer:\n        get:\n            summary: Gets Composer configuration\n            tags: [Server Configuration]\n            responses:\n                200:\n                    description: Returns information about the composer configuration.\n                    content:\n                        application/json:\n                            schema:\n                                properties:\n                                    json:\n                                        type: object\n                                        properties:\n                                            found:\n                                                type: boolean\n                                            valid:\n                                                type: boolean\n                                            error:\n                                                type: object\n                                                properties:\n                                                    message:\n                                                        type: string\n                                                    details:\n                                                        type: string\n                                    lock:\n                                        type: object\n                                        properties:\n                                            found:\n                                                type: boolean\n                                            fresh:\n                                                type: boolean\n                                    vendor:\n                                        type: object\n                                        properties:\n                                            found:\n                                                type: boolean\n                503:\n                    description: If the PHP command line binary cannot be found.\n\n    /api/server/contao:\n        get:\n            summary: Gets Contao configuration\n            tags: [Server Configuration]\n            responses:\n                200:\n                    description: Gets information about the current Contao installation.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ServerContao'\n                500:\n                    description: If any of the commands did not run successfully.\n                    content:\n                        application/problem+json:\n                            schema:\n                                $ref: '#/components/schemas/ApiProblem'\n                503:\n                    description: If the server config is not ready or the command line binary cannot be found.\n\n        post:\n            summary: Create the Contao directory structure.\n            description: Creates the necessary directory to install Contao. If the current directory is not empty,\n                pass a new directory name to be created. If the current directory is empty but not a web dir, pass\n                an empty directory to create the `web` directory only.\n            tags: [Server Configuration]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            properties:\n                                directory:\n                                    type: string\n                                    nullable: true\n                                    description: The directory name or null if only the `web`/`public` directory must be created.\n                                usePublicDir:\n                                    type: boolean\n                                    description: To use `public` instead of `web` directory\n            responses:\n                201:\n                    description: Operation successful\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ServerContao'\n                403:\n                    description: Target directory already exists.\n                    content:\n                        application/problem+json:\n                            schema:\n                                $ref: '#/components/schemas/ApiProblem'\n                501:\n                    description: Operation is not supported (e.g. not running as Phar).\n\n\n    #############\n    #   Users   #\n    #############\n\n    /api/users:\n        get:\n            summary: User List\n            tags: [Users]\n            responses:\n                200:\n                    description: An array of users.\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: '#/components/schemas/User'\n        post:\n            summary: Create User\n            tags: [Users]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UserPassword'\n            responses:\n                200:\n                    description: Data of the newly created user.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/User'\n\n    /api/users/{username}:\n        get:\n            summary: Get User\n            tags: [Users]\n            parameters:\n                - name: username\n                  in: path\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    description: The user data\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/User'\n                404:\n                    description: User was not found.\n\n        put:\n            summary: Update User\n            tags: [Users]\n            parameters:\n                - name: username\n                  in: path\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    description: User updated\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/User'\n\n        delete:\n            summary: Delete User\n            tags: [Users]\n            parameters:\n                - name: username\n                  in: path\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    description: User deleted\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/User'\n\n    /api/users/{username}/tokens:\n        get:\n            summary: Token List\n            tags: [Users]\n            parameters:\n                - name: username\n                  in: path\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    description: An array of tokens.\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: '#/components/schemas/TokenResponse'\n        post:\n            summary: Create Token\n            tags: [Users]\n            parameters:\n                - name: username\n                  in: path\n                  required: true\n                  schema:\n                      type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/TokenRequest'\n            responses:\n                200:\n                    description: Data of the newly created token.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TokenResponse'\n\n    /api/users/{username}/tokens/{id}:\n        get:\n            summary: Get Token\n            tags: [Users]\n            parameters:\n                - name: username\n                  in: path\n                  required: true\n                  schema:\n                      type: string\n                - name: id\n                  in: path\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    description: The token data\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TokenResponse'\n                404:\n                    description: Token was not found.\n\n        delete:\n            summary: Delete Token\n            tags: [Users]\n            parameters:\n                - name: username\n                  in: path\n                  required: true\n                  schema:\n                      type: string\n                - name: id\n                  in: path\n                  required: true\n                  schema:\n                      type: string\n            responses:\n                200:\n                    description: Token deleted\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TokenResponse'\n\n\n    #####################\n    #   Configuration   #\n    #####################\n\n    /api/config/manager:\n        get:\n            summary: Get manager config.\n            tags: [Configuration]\n            responses:\n                200:\n                    description: The manager configuration.\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: '#/components/schemas/ConfigManager'\n        put:\n            summary: Replace manager config.\n            tags: [Configuration]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ConfigManager'\n            responses:\n                200:\n                    description: The manager configuration.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ConfigManager'\n        patch:\n            summary: Append manager config.\n            tags: [Configuration]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ConfigManager'\n            responses:\n                200:\n                    description: The manager configuration.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ConfigManager'\n\n    /api/config/auth:\n        get:\n            summary: Get Composer auth config.\n            tags: [Configuration]\n            responses:\n                200:\n                    description: The Composer auth configuration.\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: '#/components/schemas/ConfigAuth'\n        put:\n            summary: Replace Composer auth config.\n            tags: [Configuration]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ConfigAuth'\n            responses:\n                200:\n                    description: The Composer auth configuration.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ConfigAuth'\n        patch:\n            summary: Append Composer auth config.\n            tags: [Configuration]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ConfigAuth'\n            responses:\n                200:\n                    description: The Composer auth configuration.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ConfigAuth'\n\n    /api/config/auth/github-oauth:\n        put:\n            summary: Set GitHub OAuth token.\n            tags: [Configuration]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            properties:\n                                token:\n                                    type: string\n\n            responses:\n                200:\n                    description: The Composer auth configuration.\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    github.com:\n                                        type: string\n                                        description: OAuth token for github.com.\n\n    /api/config/composer:\n        get:\n            summary: Get Composer config.\n            tags: [Configuration]\n            responses:\n                200:\n                    description: The Composer configuration.\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: '#/components/schemas/ConfigComposer'\n        put:\n            summary: Replace Composer config.\n            tags: [Configuration]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ConfigComposer'\n            responses:\n                200:\n                    description: The Composer configuration.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ConfigComposer'\n        patch:\n            summary: Append Composer config.\n            tags: [Configuration]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ConfigComposer'\n            responses:\n                200:\n                    description: The Composer configuration.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ConfigComposer'\n\n\n    ##################\n    #   Contao API   #\n    ##################\n\n    /api/contao/access-key:\n        get:\n            summary: Gets the hashed access key.\n            tags: [Contao API]\n            responses:\n                200:\n                    description: The Contao access key\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ContaoAccessKeyGet'\n                501:\n                    description: If the current Contao version does not support the access-key API.\n        put:\n            summary: Sets the hashed access key.\n            tags: [Contao API]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ContaoAccessKeySet'\n            responses:\n                200:\n                    description: The access key was set.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ContaoAccessKeyGet'\n                501:\n                    description: If the current Contao version does not support the access-key API.\n        delete:\n            summary: Removes the access key.\n            tags: [Contao API]\n            responses:\n                200:\n                    description: The access key was removed.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ContaoAccessKeyGet'\n                501:\n                    description: If the current Contao version does not support the access-key API.\n\n\n    /api/contao/install-tool/lock:\n        get:\n            summary: Get install tool lock status\n            tags: [Contao API]\n            responses:\n                200:\n                    description: Get install tool lock status\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ContaoInstallToolLock'\n                501:\n                    description: If the current Contao version does not support locking the install tool.\n        put:\n            summary: Lock the install tool\n            tags: [Contao API]\n            responses:\n                200:\n                    description: Lock the install tool\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ContaoInstallToolLock'\n                501:\n                    description: If the current Contao version does not support locking the install tool.\n        delete:\n            summary: Unlock the instal tool\n            tags: [Contao API]\n            responses:\n                200:\n                    description: Unlock the instal tool\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ContaoInstallToolLock'\n                501:\n                    description: If the current Contao version does not support locking the install tool.\n\n\n    /api/contao/jwt-cookie:\n        get:\n            summary: Get JWT cookie content\n            tags: [Contao API]\n            responses:\n                200:\n                    description: Get JWT cookie content\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ContaoJwtCookie'\n                501:\n                    description: If the current Contao version does not support the JWT cookie.\n        put:\n            summary: Set JWT cookie\n            tags: [Contao API]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ContaoJwtCookie'\n            responses:\n                200:\n                    description: Set JWT cookie\n                    headers:\n                        Cookie:\n                            schema:\n                                type: string\n                                description: Sets the `contao_settings` cookie\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ContaoJwtCookie'\n                501:\n                    description: If the current Contao version does not support the JWT cookie.\n        delete:\n            summary: Delete JWT Cookie\n            tags: [Contao API]\n            responses:\n                200:\n                    description: Delete JWT Cookie\n                    headers:\n                        Cookie:\n                            schema:\n                                type: string\n                                description: Deletes the `contao_settings` cookie\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ContaoJwtCookie'\n                501:\n                    description: If the current Contao version does not support the JWT cookie.\n\n    /api/contao/maintenance-mode:\n        get:\n            summary: Get maintenance mode status\n            tags: [Contao API]\n            responses:\n                200:\n                    description: Get maintenance mode status\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ContaoMaintenanceMode'\n                501:\n                    description: If the current Contao version does not support maintenance mode.\n        put:\n            summary: Enable the maintenance mode\n            tags: [Contao API]\n            responses:\n                200:\n                    description: Enable the maintenance mode\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ContaoMaintenanceMode'\n                501:\n                    description: If the current Contao version does not support maintenance mode.\n        delete:\n            summary: Disable the maintenance mode\n            tags: [Contao API]\n            responses:\n                200:\n                    description: Disable the maintenance mode\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ContaoMaintenanceMode'\n                501:\n                    description: If the current Contao version does not support maintenance mode.\n\n\n\n    #############\n    #   Tasks   #\n    #############\n\n    /api/task:\n        get:\n            summary: Gets task data.\n            tags: [Tasks]\n            responses:\n                200:\n                    description: The current task data.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TaskStatus'\n                204:\n                    description: If no task is active.\n        put:\n            summary: Sets task data.\n            tags: [Tasks]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/TaskSet'\n            responses:\n                200:\n                    description: The current task data.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TaskStatus'\n                400:\n                    description: If a task is already running or the payload is invalid\n\n        patch:\n            summary: Starts or stops the active task.\n            tags: [Tasks]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            required: [\"status\"]\n                            properties:\n                                status:\n                                    type: string\n                                    enum:\n                                        - aborting\n            responses:\n                200:\n                    description: If the status was successfully updated.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TaskStatus'\n                400:\n                    description: If the task status is unknown.\n\n        delete:\n            summary: Deletes task data.\n            tags: [Tasks]\n            responses:\n                200:\n                    description: The deleted task data.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TaskStatus'\n                400:\n                    description: If the task cannot be deleted because it's running.\n\n\n    ################\n    #   Packages   #\n    ################\n\n    /api/packages/root:\n        get:\n            summary: Gets details of the root Composer package.\n            tags: [Packages]\n            responses:\n                200:\n                    description: Gets details of the root Composer package.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Package'\n\n    /api/packages/local/:\n        get:\n            summary: Gets list of installed Composer packages.\n            tags: [Packages]\n            responses:\n                200:\n                    description: Collection of installed packages. Object key equals package name, the root package is added with key \"root\".\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                additionalProperties:\n                                    $ref: '#/components/schemas/Package'\n\n    /api/packages/local/{name}:\n        get:\n            summary: Gets details of an installed Composer package.\n            tags: [Packages]\n            responses:\n                200:\n                    description: Gets details of an installed Composer package.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Package'\n\n    /api/packages/cloud:\n        get:\n            summary: Gets data for a Composer Cloud job\n            tags: [Packages]\n            responses:\n                200:\n                    description: Gets data for a Composer Cloud job\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    composerJson:\n                                        type: object\n                                    composerLock:\n                                        type: object\n                                    platform:\n                                        type: object\n                                    localPackages:\n                                        type: object\n\n        put:\n            summary: Writes `composer.lock` and optional `composer.json` and runs a `composer install`\n            tags: [Packages]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            required: [composerLock]\n                            properties:\n                                composerLock:\n                                    type: object\n                                    description: New content of the `composer.lock` file\n                                composerJson:\n                                    type: object\n                                    description: Optional content of the `composer.json` file\n            responses:\n                200:\n                    description: Writes `composer.lock` and optional `composer.json` and runs a `composer install`\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TaskStatus'\n\n    /api/constraint:\n        post:\n            summary: Validates a Composer version constraint\n            tags: [Packages]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            required: [constraint]\n                            properties:\n                                constraint:\n                                    type: string\n                                    description: The version constraint to validate.\n            responses:\n                200:\n                    description: Validates a Composer version constraint\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ConstraintValidation'\n                400:\n                    description: If no constraint is given.\n\ncomponents:\n    schemas:\n        User:\n            type: object\n            properties:\n                username:\n                    type: string\n                    description: Username of the user.\n\n        UserPassword:\n            allOf:\n                -   $ref: '#/components/schemas/User'\n                -   type: object\n                    required: [username, password]\n                    properties:\n                        password:\n                            type: string\n                            format: password\n                            description: Password of the user.\n\n        TokenRequest:\n            type: object\n            properties:\n                client_id:\n                    type: string\n                    description: OAuth client ID of the token.\n\n        TokenResponse:\n            type: object\n            properties:\n                id:\n                    type: string\n                token:\n                    type: string\n                    description: Only available if the token was freshly created.\n                username:\n                    type: string\n                    description: Username of the token.\n                client_id:\n                    type: string\n                    description: Client ID of the token.\n                scope:\n                    type: string\n                    description: Permission scope of the token.\n\n        ConfigManager:\n            type: object\n            properties:\n                php_cli:\n                    type: string\n                    description: Path to the PHP executable.\n\n        ConfigAuth:\n            type: object\n            properties:\n                github-oauth:\n                    type: object\n\n        ConfigComposer:\n            type: object\n\n        ServerConfig:\n            type: object\n            properties:\n                php_cli:\n                    type: string\n                    description: Path to the PHP command line.\n                cloud:\n                    type: object\n                    properties:\n                        enabled:\n                            type: boolean\n                            description: Whether the Composer Resolver Cloud is used when updating packages.\n                        issues:\n                            type: array\n                            items:\n                                type: string\n\n        ServerOpcache:\n            type: object\n            properties:\n                opcache_enabled:\n                    type: boolean\n                reset_token:\n                    type: string\n\n        ServerContao:\n            type: object\n            properties:\n                    version:\n                        description: The Contao version number.\n                        type: string\n                        nullable: true\n                    cli:\n                        type: object\n                        properties:\n                            commands:\n                                type: object\n                                additionalProperties:\n                                    type: object\n                                    properties:\n                                        arguments:\n                                            type: array\n                                        options:\n                                            type: array\n                    api:\n                        type: object\n                        properties:\n                            version:\n                                type: integer\n                                description: The Contao API version number.\n                            features:\n                                type: array\n                            commands:\n                                type: array\n                    supported:\n                        type: boolean\n                    conflicts:\n                        type: array\n                        description: List of conflicting files in the project directory.\n                    project_dir:\n                        type: string\n                        description: Full path to the project directory.\n                    public_dir:\n                        type: string\n                        description: Name of the public directory (\"public\" or \"web\").\n\n        ContaoAccessKeyGet:\n            type: object\n            properties:\n                access-key:\n                    type: string\n\n        ContaoAccessKeySet:\n            type: object\n            properties:\n                user:\n                    type: string\n                password:\n                    type: string\n\n        ContaoInstallToolLock:\n            type: object\n            properties:\n                locked:\n                    type: boolean\n\n        ContaoJwtCookie:\n            type: object\n            properties:\n                debug:\n                    type: boolean\n\n        ContaoMaintenanceMode:\n            type: object\n            properties:\n                enabled:\n                    type: boolean\n\n        TaskGet:\n            type: object\n            properties:\n                id:\n                    type: string\n                status:\n                    type: string\n                type:\n                    type: string\n                created_at:\n                    type: string\n                    format: date-time\n                output:\n                    type: string\n\n        TaskSet:\n            type: object\n            discriminator:\n                propertyName: name\n                mapping:\n                    composer/update: '#/components/schemas/TaskPackagesUpdate'\n                    composer/install: '#/components/schemas/TaskPackagesInstall'\n                    contao/install: '#/components/schemas/TaskPackagesSetup'\n                    contao/rebuild-cache: '#/components/schemas/TaskContaoRebuildCache'\n                    composer/clear-cache: '#/components/schemas/TaskComposerClearCache'\n                    composer/dump-autoload: '#/components/schemas/TaskComposerDumpAutoload'\n                    manager/self-update: '#/components/schemas/TaskManagerSelfUpdate'\n            properties:\n                name:\n                    type: string\n            required: [name]\n            oneOf:\n                - $ref: '#/components/schemas/TaskPackagesUpdate'\n                - $ref: '#/components/schemas/TaskPackagesInstall'\n                - $ref: '#/components/schemas/TaskPackagesSetup'\n                - $ref: '#/components/schemas/TaskContaoRebuildCache'\n                - $ref: '#/components/schemas/TaskComposerClearCache'\n                - $ref: '#/components/schemas/TaskComposerDumpAutoload'\n                - $ref: '#/components/schemas/TaskManagerSelfUpdate'\n\n        TaskComposerClearCache:\n            description: Clears the Contao (Symfony) Cache\n            allOf:\n                -   $ref: '#/components/schemas/TaskSet'\n                -   type: object\n                    properties:\n                        name:\n                            description: Clears the Composer cache.\n\n        TaskComposerDumpAutoload:\n            allOf:\n                -   $ref: '#/components/schemas/TaskSet'\n                -   type: object\n                    properties:\n                        name:\n                            description: Dumps the Composer autoloader.\n\n        TaskContaoRebuildCache:\n            allOf:\n                -   $ref: '#/components/schemas/TaskSet'\n                -   type: object\n                    properties:\n                        name:\n                            description: Clears the Contao/Symfony cache and optionally rebuilds it.\n                        environment:\n                            type: string\n                            default: prod\n                        warmup:\n                            type: boolean\n                            default: true\n\n        TaskManagerSelfUpdate:\n            allOf:\n                -   $ref: '#/components/schemas/TaskSet'\n                -   type: object\n                    properties:\n                        name:\n                            description: Updated the Contao Manager to the latest version.\n\n        TaskPackagesSetup:\n            required: [name, version]\n            allOf:\n                -   $ref: '#/components/schemas/TaskSet'\n                -   type: object\n                    properties:\n                        name:\n                            description: Creates a `composer.json` for the Contao Managed Edition.\n                        version:\n                            type: string\n                            enum: [4.4, 4.9, 4.13]\n                            required: true\n                        core-only:\n                            type: boolean\n                            default: false\n                            description: Do not add Contao bundles like news and calendar to the `composer.json`\n                        no-update:\n                            type: boolean\n                            default: false\n                            description: Only create the `composer.json` but do not run a `composer update`.\n\n        TaskPackagesInstall:\n            allOf:\n                -   $ref: '#/components/schemas/TaskSet'\n                -   type: object\n                    properties:\n                        name:\n                            description: Installs Composer packages from lock file (`composer install`).\n                              This automatically runs an update if there is no `composer.lock` file and uses\n                              the Composer Resolver Cloud if enabled.\n                        dry_run:\n                            type: boolean\n                            default: false\n                        remove-vendor:\n                            type: boolean\n                            default: false\n                            description: Removes the `vendor` folder before installation (clean install).\n\n        TaskPackagesUpdate:\n            allOf:\n                -   $ref: '#/components/schemas/TaskSet'\n                -   type: object\n                    properties:\n                        name:\n                            description: Updates the installed Composer packages (`composer update`).\n                        dry_run:\n                            type: boolean\n                            default: false\n                        uploads:\n                            type: boolean\n                            default: false\n                            description: Install uploaded packages that are in the list of packages to update\n                        require:\n                            type: object\n                            description: List of packages to require. Key is package name and value is version, which can be empty.\n                        remove:\n                            type: array\n                            description: List of packages to remove.\n                            items:\n                                type: string\n                        update:\n                            type: array\n                            description: List of package names to include in the update. If not set, all packages will be updated.\n                            items:\n                                type: string\n\n        TaskStatus:\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: A unique UUIDv4 for the current task.\n                title:\n                    type: string\n                console:\n                    type: string\n                cancellable:\n                    type: boolean\n                    description: If the task can be aborted\n                autoclose:\n                    type: boolean\n                    description: If it should be possible to close the task automatically.\n                audit:\n                    type: boolean\n                    description: If a successful task might requires audit (install tool).\n                status:\n                    type: string\n                    enum: [active, complete, error, aborting, stopped]\n                operations:\n                    type: array\n                    items:\n                        type: object\n                        properties:\n                            summary:\n                                type: string\n                            details:\n                                type: string\n                            console:\n                                type: string\n                            status:\n                                type: string\n                                enum: [active, complete, error, stopped]\n\n        Package:\n            type: object\n            description: \"A package definition according to the Composer schema: https://getcomposer.org/doc/04-schema.md\"\n            properties:\n                name:\n                    type: string\n                version:\n                    type: string\n                    description: Currently installed version\n                type:\n                    type: string\n                    description: A Composer package type\n                    enum:\n                        - contao-bundle\n                        - contao-module\n                        - library\n                time:\n                    type: string\n                description:\n                    type: string\n                license:\n                    oneOf:\n                        - type: string\n                        - type: array\n                          items:\n                              type: string\n                authors:\n                    type: array\n                    items:\n                        type: object\n                        properties:\n                            name:\n                                type: string\n                            email:\n                                type: string\n                            homepage:\n                                type: string\n                require:\n                    type: object\n                    description: List of dependent packages.\n                    additionalProperties:\n                        type: string\n                        description: A Composer constraint.\n                extra:\n                    type: object\n                    properties:\n                        contao-manager-plugin:\n                            oneOf:\n                                - type: string\n                                  description: Class name if this package has a Manager Plugin.\n                                - type: array\n                                  description: Array of class names if this package has multiple Manager Plugins.\n                                  items:\n                                      type: string\n                abandoned:\n                    type: boolean\n\n        ConstraintValidation:\n            type: object\n            properties:\n                valid:\n                    type: boolean\n                error:\n                    type: string\n\n        ApiProblem:\n            type: object\n            properties:\n                title:\n                    type: string\n                type:\n                    type: string\n                status:\n                    type: integer\n                detail:\n                    type: string\n\n    securitySchemes:\n        CookieAuthentication:\n            type: apiKey\n            description: Uses an authentication cookie called \"contao_manager_auth\". The cookie is set by the server as HTTP-only after successful login.\n            name: contao_manager_auth\n            in: cookie\n        TokenAuthentication:\n            type: apiKey\n            description: 'Uses authentication with a user token. Alternatively, token authentication also works using the\n                `Authorization: Bearer …` header. The Contao Manager supports a custom header because bearer\n                authentication does not work on all server setups.'\n            name: Contao-Manager-Auth\n            in: header\n\nsecurity:\n    - { CookieAuthentication: [] }\n    - { TokenAuthentication: [] }\n",
			"canonicalURL": "/github.com/contao/contao-manager@3e3244721891a5887d9d2ecfbdc2f72f0daea43e/-/blob/docs/api/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/contao/contao-manager/blob/3e3244721891a5887d9d2ecfbdc2f72f0daea43e/docs/api/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:39: callback: json: cannot unmarshal bool into Go struct field Schema.required of type []string"
}