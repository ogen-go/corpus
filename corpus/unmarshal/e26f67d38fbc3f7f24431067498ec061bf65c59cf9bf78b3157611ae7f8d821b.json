{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/uc-cdis/arborist"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 53495,
			"content": "openapi: 3.0.1\ninfo:\n  title: Arborist\n  version: 2.4.0\n  description: authorization microservice to handle ABAC based on configured policies\n  license:\n    name: 'Apache 2.0'\n    url: 'https://github.com/uc-cdis/arborist'\ntags:\n  - name: auth\n    description: make requests to determine authorization\n  - name: resource\n    description: manage resources in the arborist database\n  - name: role\n    description: manage roles in the arborist database\n  - name: policy\n    description: manage policies to grant authorization\npaths:\n  /auth/mapping:\n    get:\n      tags:\n        - auth\n      description: \u003e-\n        Return a mapping from the resources the specified user can access, to\n        the actions which they are authorized for on those resources. This includes\n        the mappings available to members of the `anonymous` and `logged-in` groups, \n        which apply to all users (anonymous) and to all logged-in users (logged-in). \n\n\n        This endpoint accepts either a username in the query string or a username\n        in a token in the Authorization header. If no username is provided in the query\n        string, the endpoint will use the username in the token in the Authorization\n        header.\n\n\n        If the specified user is not recognized by arborist, this endpoint returns\n        ONLY the mappings available to members of the `anonymous` and `logged-in` groups.\n\n\n        If no username is provided (i.e., if there is no username passed in the query\n        string AND no token is provided in the Authorization header), this endpoint returns ONLY the mappings \n        available to members of the `anonymous` group.\n      parameters:\n        - in: query\n          name: username\n          schema:\n            type: string\n          required: false\n          description: the username in arborist to return results for\n        - in: header\n          name: Authorization\n          schema:\n            type: string\n          required: false\n      responses:\n        200:\n          description: successful response\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  map from resource paths as keys, to lists of actions\n                type: object\n                example: {\"/programs/DEV\": [{\"service\": \"*\", \"method\": \"read\"}, {\"service\": \"*\", \"method\": \"read-storage\"}]}\n        401:\n          description: \u003e-\n            Authorization header or token failed to validate (authentication error)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Unauthenticated'\n    post:\n      tags:\n        - auth\n      description: \u003e-\n        Return a mapping from the resources the specified user can access, to\n        the actions which they are authorized for on those resources. This includes\n        the mappings available to members of the `anonymous` and `logged-in` groups, \n        which apply to all users (anonymous) and to all logged-in users (logged-in). \n\n\n        If the specified user is not recognized by arborist, this endpoint returns\n        ONLY the mappings available to members of the `anonymous` and `logged-in` groups.\n\n      requestBody:\n\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  description: the username in arborist to return results for\n      responses:\n        200:\n          description: successful response\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  map from resource paths as keys, to lists of actions\n                type: object\n                example: {\"/programs/DEV\": [{\"service\": \"*\", \"method\": \"read\"}, {\"service\": \"*\", \"method\": \"read-storage\"}]}\n        400:\n          description: \u003e-\n            the input was somehow invalid; probably missing username\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserError'\n  /auth/request:\n    post:\n      tags:\n        - auth\n      description: \u003e-\n        Ask arborist to check authorization on a user request. A client of the\n        Gen3 auth stack sends the user's JWT to this endpoint, along with the\n        information about the user's specific request. The terminology used to\n        describe user requests is flexible and arborist does not \"nail it down\";\n        however our usage so far is to use the permission model to capture the\n        basic set of operations one might expect in ABAC (read/write, etc.)\n        combined with the client service, and the path for the resource the user\n        is trying to access.\n        If using a list of `requests`, the response is positive if the user\n        has access to ALL items in the list.\n        If the given JWT has `azp` field, the permission of\n        the corresponding client will be also checked; only when both the user\n        and the client have permission can the response be positive. \n        IMPORTANT NOTE: Under `body` you can now also check authorization of \n        a user given just the username using the field `user_id` instead of \n        using `token`. This means that anyone can check anyone's authorization\n        if they have their username. For this reason, this API is not meant to \n        be fully exposed publically. Arborist does not currently have \n        authorization for the management of the authorization in the system.\n        The service itself does not provide a way to expose only certain parts \n        of the API to super admins vs admins.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthRequestBody'\n      responses:\n        200:\n          description: \u003e-\n            Arborist successfully returned an authorization decision. NOTE\n            that a 200 status DOES NOT indicate authorization, only that the\n            input was valid. The `\"auth\"` field in the response indicates\n            authorization.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthRequestResponse'\n        400:\n          description: \u003e-\n            The input was somehow invalid; for example, a given resource does\n            not exist.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserError'\n  /auth/proxy:\n    get:\n      tags:\n        - auth\n      description: \u003e-\n        Ask arborist to check authorization on a user request. A client of the\n        Gen3 auth stack sends the user's JWT to this endpoint, along with the\n        information about the user's specific request. The terminology used to\n        describe user requests is flexible and arborist does not \"nail it down\";\n        however our usage so far is to use the permission model to capture the\n        basic set of operations one might expect in ABAC (read/write, etc.)\n        combined with the client service, and the path for the resource the user\n        is trying to access.\n        If the given JWT has `azp` field, the permission of\n        the corresponding client will be also checked; only when both the user\n        and the client have permission can the response be positive.\n      parameters:\n        - in: query\n          name: resource\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: service\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: method\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: \u003e-\n            Arborist successfully returned an authorization decision. NOTE\n            that a 200 status DOES NOT indicate authorization, only that the\n            input was valid. The `\"ok\"` field in the response indicates\n            authorization.\n        400:\n          description: \u003e-\n            The input was somehow invalid; for example, a given resource does\n            not exist.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserError'\n        401:\n          description: \u003e-\n            The user is not logged in.\n        403:\n          description: \u003e-\n            The user does not have access.\n  /auth/resources:\n    get:\n      tags:\n        - auth\n      description: \u003e-\n        Given a user token in the Authorization header, return a list of\n        resources which are accessible to the user (using any action) according\n        to the policies listed in the token. This includes the resources available \n        to members of the `anonymous` and `logged-in` groups, which apply to all users \n        (anonymous) and to all logged-in users (logged-in).\n\n\n        If the specified user is not recognized by arborist, this endpoint returns\n        ONLY the resources available to members of the `anonymous` and `logged-in` groups.\n\n\n        If no username is provided (i.e., if no token is provided in the Authorization header)\n        this endpoint returns ONLY the resources available to members of the `anonymous` group.\n\n\n        If the `tags` query string parameter is passed, this endpoint returns the resource\n        tags for the resources, not the resources themselves.\n      parameters:\n        - in: header\n          name: Authorization\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: tags\n          required: false\n          schema:\n            type: string\n          description: Instructs the endpoint to return resource tags instead of resources.\n      responses:\n        200:\n          description: \u003e-\n            Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthResourcesResponse'\n        401:\n          description: \u003e-\n            Authorization header or token failed to validate (authentication error)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Unauthenticated'\n    post:\n      tags:\n        - auth\n      description: \u003e-\n        Given a user token in the body of the request, return a list of\n        resources which are accessible to the user (using any action) according\n        to the policies listed in the token. This includes the resources available \n        to members of the `anonymous` and `logged-in` groups, which apply to all users \n        (anonymous) and to all logged-in users (logged-in).\n\n\n        If the specified user is not recognized by arborist, this endpoint returns\n        ONLY the resources available to members of the `anonymous` and `logged-in` groups.\n\n\n        If the `tags` query string parameter is passed, this endpoint returns the resource\n        tags for the resources, not the resources themselves.\n      parameters:\n        - in: query\n          name: tags\n          required: false\n          schema:\n            type: string\n          description: Instructs the endpoint to return resource tags instead of resources.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthResourcesRequestBody'\n      responses:\n        200:\n          description: \u003e-\n            Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthResourcesResponse'\n        400:\n          description: invalid input (missing fields or fields have incorrect types)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserError'\n        401:\n          description: \u003e-\n            Token failed to validate (authentication error)\n  /health:\n    get:\n      tags:\n        - health\n      description: \u003e-\n        Check that the arborist instance is healthy and the database is\n        available.\n      responses:\n        200:\n          description: Healthy\n        500:\n          description: Unhealthy (database ping failed)\n  /resource:\n    get:\n      tags:\n        - resource\n      description: \u003e-\n        List all resources which have been created in arborist. The resources in\n        arborist are saved in a tree structure; however this endpoint will\n        traverse through all the resources and return a flattened list of just\n        the full resource paths for all available resources.\n      responses:\n        200:\n          description: list of resources\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  resource_paths:\n                    type: array\n                    items:\n                      type: string\n                    example: [\"/data_file\", \"/programs\", \"/\", \"/programs/DEV\",\"/programs/DEV/projects\",\"/programs/DEV/projects/test\"]\n  /resource/{resourcePath}:\n    parameters:\n      - in: path\n        name: resourcePath\n        required: true\n        schema:\n          type: string\n        allowReserved: true\n        description: \u003e-\n          The full path for a resource, which includes slashes. For example, if\n          a resource was created which has the path `/a/b/c`, then the endpoint\n          `/resource/a/b/c` can now be used to access this resource.\n    get:\n      tags:\n        - resource\n      description: Read the resource given by the path\n      responses:\n        200:\n          description: JSON representation of the specified resource\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resource'\n        404:\n          description: no resource exists with the given `resourcePath`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n    post:\n      tags:\n        - resource\n      description: \u003e-\n        Add a new subresource, *underneath* an existing resource. The path *is\n        allowed to be empty*; when `resourcePath` is empty, the resource is\n        created under the root resource, as `/new_resource`.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResourceInput'\n      parameters:\n        - in: query\n          name: p\n          description: \u003e-\n            Ordinarily arborist will return an error if parent resources of a\n            resource you're trying to create do not exist yet. If the `p`\n            parameter is included, it behaves like `mkdir -p` and creates all\n            parent resources as necessary.\n          required: false\n      responses:\n        201:\n          description: JSON representation of successfully-created resource\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  created:\n                    $ref: '#/components/schemas/Resource'\n        404:\n          description: no resource exists with the given `resourcePath`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserError'\n    put:\n      tags:\n        - resource\n      description: \u003e-\n        Overwrite an existing resource. This endpoint requires a fully-formed\n        resource model (and cannot patch over individual fields on the existing\n        resources). If the specified resource doesn't exist, it will be created.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResourceInput'\n      parameters:\n        - in: query\n          name: p\n          description: \u003e-\n            Ordinarily arborist will return an error if parent resources of a\n            resource you're trying to create do not exist yet. If the `p`\n            parameter is included, it behaves like `mkdir -p` and creates all\n            parent resources as necessary.\n          required: false\n        - in: query\n          name: merge\n          description: \u003e-\n            Ordinarily arborist will overwrite the resource by deleting\n            existing subresources. If the `merge` parameter is included,\n            those existing subresources are not deleted.\n          required: false\n      responses:\n        201:\n          description: JSON representation of successfully-updated resource\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  updated:\n                    $ref: '#/components/schemas/Resource'\n        400:\n          description: invalid input (missing fields or fields have incorrect types)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserError'\n    delete:\n      tags:\n        - resource\n      responses:\n        204:\n          description: resource successfully deleted\n        404:\n          description: no resource exists with the given `resourcePath`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n  /role:\n    get:\n      tags:\n        - role\n      description: List all the roles registered in arborist.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  roles:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Role'\n    post:\n      tags:\n        - role\n      description: Create a new role\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Role'\n      responses:\n        201:\n          description: Success; returns JSON representation of created role\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  created:\n                    $ref: '#/components/schemas/Role'\n        400:\n          description: invalid input (missing fields or fields have incorrect types)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserError'\n  /role/{roleID}:\n    parameters:\n      - in: path\n        name: roleID\n        required: true\n        schema:\n          type: string\n        description: The ID for a role registered in arborist.\n    get:\n      tags:\n        - role\n      description: \u003e-\n        Output the information for a specific role.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n        404:\n          description: no role exists with the given `roleID`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n    put:\n      tags:\n        - role\n      description: \u003e-\n        Overwrite an existing role with new content. This endpoint requires a\n        fully-formed role (and cannot patch over individual fields on the\n        existing resources).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Role'\n      responses:\n        201:\n          description: Success; returns JSON representation of updated role\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  updated:\n                    $ref: '#/components/schemas/Role'\n        400:\n          description: invalid input (missing fields or fields have incorrect types)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserError'\n        404:\n          description: no role exists with the given `roleID`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n    patch:\n      tags:\n        - role\n      description: \u003e-\n        Append information to an existing role. The contents of all the fields\n        provided in a `PATCH` request are appended to the existing fields on\n        this role.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Role'\n      responses:\n        201:\n          description: Success; returns JSON representation of updated role\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  updated:\n                    $ref: '#/components/schemas/Role'\n        400:\n          description: invalid input (missing fields or fields have incorrect types)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserError'\n        404:\n          description: no role exists with the given `roleID`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n    delete:\n      tags:\n        - role\n      description: Delete this role.\n      responses:\n        204:\n          description: role successfully deleted\n        404:\n          description: no role exists with the given `roleID`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n  /policy:\n    get:\n      tags:\n        - policy\n      description: \u003e-\n        List just the IDs for all policies which have been created in arborist.\n      parameters:\n        - in: path\n          name: expand\n          required: false\n          schema:\n            type: boolean\n          description: Whether to return detailed roles instead of only role IDs (disabled by default). If enabled, 'roles' will replace 'role_ids' in the returned data.\n      responses:\n        200:\n          description: list of resources\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  policies:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Policy'\n    post:\n      tags:\n        - policy\n      description: Create a new policy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Policy'\n      responses:\n        201:\n          description: Success; returns JSON representation of created policy\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  created:\n                    $ref: '#/components/schemas/Policy'\n        400:\n          description: invalid input (missing fields or fields have incorrect types)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserError'\n  /policy/{policyID}:\n    parameters:\n      - in: path\n        name: policyID\n        required: true\n        schema:\n          type: string\n        description: The ID for a policy registered in arborist.\n    get:\n      tags:\n        - policy\n      description: \u003e-\n        Output the information for a specific policy.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Policy'\n        404:\n          description: no role exists with the given `policyID`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n    put:\n      tags:\n        - policy\n      description: \u003e-\n        Overwrite an existing policy with new content. This endpoint requires a\n        fully-formed policy (and cannot patch over individual fields on the\n        existing resources).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Policy'\n      responses:\n        201:\n          description: Success; returns JSON representation of updated policy\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  updated:\n                    $ref: '#/components/schemas/Policy'\n        400:\n          description: invalid input (missing fields or fields have incorrect types)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserError'\n        404:\n          description: no policy exists with the given `policyID`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n    patch:\n      tags:\n        - policy\n      description: \u003e-\n        Append information to an existing policy. The contents of all the fields\n        provided in a `PATCH` request are appended to the existing fields on\n        this policy.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Policy'\n      responses:\n        201:\n          description: Success; returns JSON representation of updated policy\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  updated:\n                    $ref: '#/components/schemas/Policy'\n        400:\n          description: invalid input (missing fields or fields have incorrect types)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserError'\n        404:\n          description: no policy exists with the given `policyID`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n    delete:\n      tags:\n        - policy\n      description: Delete this policy.\n      responses:\n        204:\n          description: policy successfully deleted\n        404:\n          description: no policy exists with the given `policyID`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n  /bulk/policy:\n    put:\n      tags:\n        - policy\n      description: \u003e-\n        Overwrite existing policies with new content. This endpoint requires a list of\n        fully-formed policies (and cannot patch over individual fields on the \n        existing resources)\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Policies'\n      responses:\n        201:\n          description: Success; returns JSON representation of updated policies\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  updated:\n                    $ref: '#/components/schemas/Policies'\n        400:\n          description: invalid input (missing fields or fields have incorrect types)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserError'\n        404:\n          description: no policy exists with the given `policyID`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n  /user:\n    get:\n      tags:\n        - user\n      description: \u003e-\n        List all the users registered in arborist.\n      responses:\n        200:\n          description: list of users\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UsersList'\n    post:\n      tags:\n        - user\n      description: \u003e-\n        Create a new user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        201:\n          description: created user\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  created:\n                    $ref: '#/components/schemas/User'\n  /user/{username}:\n    parameters:\n      - in: path\n        name: username\n        required: true\n        schema:\n          type: string\n        description: the username for a user registered in arborist\n    get:\n      tags:\n        - user\n      description: \u003e-\n        Read the information for a specific user. \n      responses:\n        200:\n          description: user information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        404:\n          description: user not found\n    patch:\n      tags:\n        - user\n      description: \u003e-\n        Update either the name, email or both for a specific user.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserWithScalars'\n      responses:\n        204:\n          description: user successfully updated\n        400:\n          description: invalid input\n        404:\n          description: user not found\n        409:\n          description: user with target name already exists\n    delete:\n      tags:\n        - user\n      description: \u003e-\n        Delete this user from the database.\n      responses:\n        204:\n          description: user successfully deleted\n        404:\n          description: user not found\n  /user/{username}/policy:\n    parameters:\n      - in: path\n        name: username\n        required: true\n        schema:\n          type: string\n        description: the username for a user registered in arborist\n      - $ref: \"#/components/parameters/authzProvider\"\n    post:\n      tags:\n        - user\n      description: \u003e-\n        Grant an additional policy to a user. The policy must exist already.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GrantUserPolicy'\n      responses:\n        204:\n          description: successfully granted additional policy\n        404:\n          description: user not found, or policy not found\n    delete:\n      tags:\n        - user\n      description: \u003e-\n        Revoke all policies for this user.\n      responses:\n        204:\n          description: successfully revoked policies\n  /user/{username}/bulk/policy:\n    parameters:\n      - in: path\n        name: username\n        required: true\n        schema:\n          type: string\n        description: the username for a user registered in arborist\n    post:\n      tags:\n        - user\n      description: \u003e-\n        Grant list of policies to a user. The policy must exist already.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GrantUserPolicies'\n      responses:\n        204:\n          description: successful granted policies\n        404:\n          description: user not found, or policy not found\n  /user/{username}/policy/{policyName}:\n    parameters:\n      - in: path\n        name: username\n        required: true\n        schema:\n          type: string\n        description: the username for a user registered in arborist\n      - in: path\n        name: policyName\n        required: true\n        schema:\n          type: string\n        description: the name for a policy\n      - $ref: \"#/components/parameters/authzProvider\"\n    delete:\n      tags:\n        - user\n      description: \u003e-\n        Revoke this policy from this user, so they will no longer have access.\n      responses:\n        204:\n          description: successfully revoked\n        404:\n          description: user not found\n  /user/{username}/resources:\n    parameters:\n      - in: path\n        name: username\n        required: true\n        schema:\n          type: string\n        description: the username for a user registered in arborist\n    get:\n      tags:\n        - user\n      description: \u003e-\n        Returns the resources available to a specific user. \n      responses:\n        200:\n          description: Resources available to this user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthResourcesResponse'\n        404:\n          description: user not found\n  /client:\n    get:\n      tags:\n        - client\n      description: \u003e-\n        List all the clients registered in arborist.\n      responses:\n        200:\n          description: list of clients\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientsList'\n    post:\n      tags:\n        - client\n      description: \u003e-\n        Create a new client\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Client'\n      parameters:\n        - $ref: \"#/components/parameters/authzProvider\"\n      responses:\n        201:\n          description: created client\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  created:\n                    $ref: '#/components/schemas/Client'\n  /client/{clientID}:\n    parameters:\n      - in: path\n        name: clientID\n        required: true\n        schema:\n          type: string\n        description: the client ID for a client registered in arborist\n    get:\n      tags:\n        - client\n      description: \u003e-\n        Read the information for a specific client.\n      responses:\n        200:\n          description: client information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n        404:\n          description: client not found\n    delete:\n      tags:\n        - client\n      description: \u003e-\n        Delete this client from the database.\n      responses:\n        204:\n          description: client successfully deleted\n        404:\n          description: client not found\n  /client/{clientID}/policy:\n    parameters:\n      - in: path\n        name: clientID\n        required: true\n        schema:\n          type: string\n        description: the client ID for a client registered in arborist\n      - $ref: \"#/components/parameters/authzProvider\"\n    post:\n      tags:\n        - client\n      description: \u003e-\n        Grant an additional policy to a client. The policy must exist already.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GrantPolicy'\n      responses:\n        204:\n          description: successfully granted additional policy\n        404:\n          description: client not found, or policy not found\n    delete:\n      tags:\n        - client\n      description: \u003e-\n        Revoke all policies for this client.\n      responses:\n        204:\n          description: successfully revoked policies\n  /client/{clientID}/policy/{policyName}:\n    parameters:\n      - in: path\n        name: clientID\n        required: true\n        schema:\n          type: string\n        description: the client ID for a client registered in arborist\n      - in: path\n        name: policyName\n        required: true\n        schema:\n          type: string\n        description: the name for a policy\n      - $ref: \"#/components/parameters/authzProvider\"\n    delete:\n      tags:\n        - client\n      description: \u003e-\n        Revoke this policy from this client, so they will no longer have access.\n      responses:\n        204:\n          description: successfully revoked\n        404:\n          description: client not found\n  /group:\n    get:\n      tags:\n        - group\n      description: \u003e-\n        List all the groups registered in arborist.\n      responses:\n        200:\n          description: list of groups\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  groups:\n                    $ref: '#/components/schemas/Group'\n    post:\n      tags:\n        - group\n      description: \u003e-\n        Create a new group\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n      parameters:\n        - $ref: \"#/components/parameters/authzProvider\"\n      responses:\n        201:\n          description: created group\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  created:\n                    $ref: '#/components/schemas/Group'\n    put:\n      tags:\n        - group\n      description: \u003e-\n        Update a group with users and policies, create if not exist.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n      parameters:\n        - $ref: \"#/components/parameters/authzProvider\"\n      responses:\n        201:\n          description: updated or created group\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  created:\n                    $ref: '#/components/schemas/Group'\n  /group/{groupName}:\n    parameters:\n      - in: path\n        name: groupName\n        required: true\n        schema:\n          type: string\n        description: the groupName for a group registered in arborist\n    get:\n      tags:\n        - group\n      description: \u003e-\n        Read the information for a specific group.\n      responses:\n        200:\n          description: group information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n        404:\n          description: group not found\n    delete:\n      tags:\n        - group\n      description: \u003e-\n        Delete this group from the database.\n      responses:\n        204:\n          description: group successfully deleted\n        404:\n          description: group not found\n  /group/{groupName}/policy:\n    parameters:\n      - in: path\n        name: groupName\n        required: true\n        schema:\n          type: string\n        description: the groupName for a group registered in arborist\n      - $ref: \"#/components/parameters/authzProvider\"\n    post:\n      tags:\n        - group\n      description: \u003e-\n        Grant an additional policy to a group. The policy must exist already.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GrantPolicy'\n      responses:\n        204:\n          description: successfully granted additional policy\n        404:\n          description: group not found, or policy not found\n  /group/{groupName}/policy/{policyName}:\n    parameters:\n      - in: path\n        name: groupName\n        required: true\n        schema:\n          type: string\n        description: the groupName for a group registered in arborist\n      - in: path\n        name: policyName\n        required: true\n        schema:\n          type: string\n        description: the name for a policy\n      - $ref: \"#/components/parameters/authzProvider\"\n    delete:\n      tags:\n        - group\n      description: \u003e-\n        Revoke this policy from this group, so they will no longer have access.\n      responses:\n        204:\n          description: successfully revoked\n        404:\n          description: group not found\n  /group/{groupName}/user:\n    parameters:\n      - in: path\n        name: groupName\n        required: true\n        schema:\n          type: string\n        description: the groupName for a group registered in arborist\n      - $ref: \"#/components/parameters/authzProvider\"\n    post:\n      tags:\n        - group\n      description: \u003e-\n        Add a user to this group.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddUserToGroup'\n      responses:\n        204:\n          description: successfully added user to group\n        400:\n          description: \u003e-\n            couldn't parse JSON input, or couldn't parse timestamp, or user not\n            provided, or user doesn't exist\n        404:\n          description: group does not exist\n  /group/{groupName}/user/{username}:\n    parameters:\n      - in: path\n        name: groupName\n        required: true\n        schema:\n          type: string\n        description: the groupName for a group registered in arborist\n      - in: path\n        name: username\n        required: true\n        schema:\n          type: string\n        description: the username for the user to remove from the group\n      - $ref: \"#/components/parameters/authzProvider\"\n    delete:\n      tags:\n        - group\n      description: Remove a user from this group.\n      responses:\n        204:\n          description: successfully removed user from group\n        500:\n          description: unable to remove user from group\ncomponents:\n  schemas:\n    AuthRequestBody:\n      type: object\n      properties:\n        user:\n          type: object\n          properties:\n            token:\n              type: string\n              description: \u003e-\n                A JWT token belonging to a user, as defined by RFC 7519.\n              example: 'eyJhbGciOiJFUzI1NiIsImtpZCI6IjE2In0[...]'\n            user_id:\n              type: string\n              description: \u003e-\n                Username of the user registered in arborist\n              example: \"username\"\n        request:\n          type: object\n          description: \u003e-\n              The action and resource a user is trying to access. Instead of\n              `request` the API also accepts `requests` which should be an array\n              of these objects. When using `requests`, arborist will return true\n              if the user has access for every request in the list, though they\n              may be granted via different policies.\n          properties:\n            resource:\n              type: string\n              example: '2iEb_M'\n              description: \u003e-\n                The identifier for a resource a user is trying to access, which\n                can be *either* the human-readable path or the tag that\n                arborist generated for that resource.\n            action:\n              type: object\n              properties:\n                service:\n                  type: string\n                  example: 'fence'\n                method:\n                  type: string\n                  example: 'read-storage'\n              required:\n                - service\n                  method\n          required:\n            - token\n        requests:\n          type: array\n          items:\n            type: object\n            description: \u003e-\n              Same as the `request` field. Use `requests` to send multiple\n              auth requests. Arborist returns positive authorization if every\n              request in the list succeeds.\n            properties:\n              resource:\n                type: string\n                example: '/programs/DEV/projects/test'\n              action:\n                type: object\n                properties:\n                  service:\n                    type: string\n                    example: 'fence'\n                  method:\n                    type: string\n                    example: 'read-storage'\n                required:\n                  - service\n                    method\n            required:\n              - token\n    AuthRequestResponse:\n      type: object\n      properties:\n        auth:\n          type: boolean\n    AuthResourcesRequestBody:\n      type: object\n      properties:\n        user:\n          type: object\n          properties:\n            token:\n              type: string\n              example: 'eyJhbGciOiJFUzI1NiIsImtpZCI6IjE2In0[...]'\n          required:\n            - token\n      required:\n        - user\n    AuthResourcesResponse:\n      type: object\n      properties:\n        resources:\n          type: array\n          items:\n            type: string\n          example: ['/programs/DEV/projects/test', '/programs/foo/projects/bar']\n    UserError:\n      type: object\n      properties:\n        error:\n          type: object\n          properties:\n            message:\n              type: string\n              description: an explanation of the error that occurred\n            code:\n              type: integer\n              description: the HTTP error code\n      example:\n        error:\n          message: \"input resource is missing the following required fields: ...\"\n          code: 400\n    NotFound:\n      type: object\n      properties:\n        error:\n          type: object\n          properties:\n            message:\n              type: string\n              description: an explanation of the error that occurred\n            code:\n              type: integer\n              description: the HTTP error code\n      example:\n        error:\n          message: \"resource with path `/foo/bar` does not exist\"\n          code: 404\n    Resource:\n      type: object\n      properties:\n        name:\n          type: string\n          description: \u003e-\n            The name (final path segment) of this particular resource. The names\n            are not globally unique; they must be unique only within the\n            \"directory\" of the tree they live in.  example: \"programs\"\n        path:\n          type: string\n          description: \u003e-\n            The full path to this resource, which is formed from the list of resource\n            names starting from the root and continuing down to this one, joined by slashes.\n            Note that the path is generated by arborist and should not be included in the\n            input value.\n          example: \"/programs\"\n        description:\n          type: string\n        subresources:\n          type: array\n          description: nested Resource items\n          items:\n            type: string\n          example:  [\"/programs/DEV-1\", \"/programs/DEV-2\"]\n    ResourceInput:\n      type: object\n      description: \u003e-\n        Input resources require *either* the `name` field, if the resource is\n        input as the immediate child of another resource node, or the `path`\n        field if submitted at the root resource endpoint. Note that the name\n        and path are only allowed to contain alphanumeric characters and\n        underscores.\n      properties:\n        name:\n          type: string\n          description: \u003e-\n            The name (final path segment) of this particular resource. The names\n            are not globally unique; they must be unique only within the\n            \"directory\" of the tree they live in.  example: \"programs\"\n        path:\n          type: string\n          description: \u003e-\n            The full path to this resource, which is formed from the list of resource\n            names starting from the root and continuing down to this one, joined by slashes.\n            Note that the path is generated by arborist and should not be included in the\n            input value.\n          example: \"/programs\"\n        description:\n          type: string\n        subresources:\n          type: array\n          description: nested Resource items\n          items:\n            type: string\n          example:  [\"/programs/DEV-1\", \"/programs/DEV-2\"]\n    Role:\n      type: object\n      properties:\n        id:\n          type: string\n          description: a name which uniquely identifies this role in arborist\n          example: \"read\"\n        description:\n          type: string\n          description: some optional human-readable information about the role\n        permissions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Permission'\n      required:\n        - id\n          permissions\n    Permission:\n      type: object\n      description: a permission to do a specific action.\n      properties:\n        id:\n          type: string\n          description: a name which uniquely identifies this permission in arborist\n          example: \"read\"\n        description:\n          type: string\n          description: some optional human-readable information about the permission\n        action:\n          type: object\n          description: a model for an action that a user can do\n          properties:\n            service:\n              type: string\n              description: \u003e-\n                the service in which the action is granted; or, `\"*\"` to grant\n                the role for all, arbitrary services\n              example: \"fence\"\n            method:\n              type: string\n              description: \u003e-\n                a basic operation such as read or write; could also use RESTful\n                language such as GET/POST/etc.\n              example: \"read\"\n          required:\n            - service\n              method\n      required:\n        - id\n          action\n    Policy:\n      type: object\n      properties:\n        id:\n          type: string\n          description: a name which uniquely identifies this permission in arborist\n        role_ids:\n          type: array\n          description: a list of role IDs\n          items:\n            type: string\n          example: [\"upload\"]\n        resource_paths:\n          type: array\n          description: a list of resource paths\n          items:\n            type: string\n          example: [\"/programs/DEV/projects/test\"]\n    Policies:\n      type: array\n      description: list of policies\n      items:\n        $ref: '#/components/schemas/Policy'\n    GrantPolicy:\n      type: object\n      properties:\n        policy:\n          type: string\n          description: the policy to grant\n          example: 'policy_name'\n    GrantUserPolicy:\n      type: object\n      properties:\n        policy:\n          type: string\n          description: the policy to grant\n          example: 'policy_name'\n          required: true\n        expires_at:\n          type: string\n          description: \u003e-\n            timestamp in RFC 3339 format specifying the time at which the\n            user's access to this policy should expire\n          example: '2019-08-12T12:34:56Z'\n    GrantUserPolicies:\n      type: array\n      description: list of policies for a user\n      items:\n        $ref: '#/components/schemas/GrantUserPolicy'\n    AddUserToGroup:\n      type: object\n      properties:\n        username:\n          type: string\n          description: username for the user in arborist to add to the group\n          required: true\n        expires_at:\n          type: string\n          description: \u003e-\n            timestamp in RFC 3339 format specifying the time at which the\n            user's access to this group should expire\n          example: '2019-08-12T12:34:56Z'\n    User:\n      type: object\n      properties:\n        name:\n          type: string\n          example: 'username'\n        email:\n          type: string\n          example: 'user@example.net'\n        groups:\n          type: array\n          items:\n            type: string\n            example: 'group'\n        policies:\n          type: array\n          items:\n            type: object\n            properties:\n              policy:\n                type: string\n                example: 'policy'\n              expires_at:\n                type: string\n                example: '2019-08-12T12:34:56Z'\n    UserWithScalars:\n      type: object\n      properties:\n        name:\n          type: string\n          example: 'username'\n        email:\n          type: string\n          example: 'user@example.net'\n    UsersList:\n      type: object\n      properties:\n        users:\n          type: array\n          items:\n            type: string\n            example: 'username'\n    Client:\n      type: object\n      properties:\n        clientID:\n          type: string\n          example: 'x68GTbL0NHOV085t51jEuJW3vDrng3G5hr7p1B4l'\n        policies:\n          type: array\n          items:\n            type: string\n            example: 'policy'\n    ClientsList:\n      type: object\n      properties:\n        clients:\n          type: array\n          items:\n            type: string\n            example: 'x68GTbL0NHOV085t51jEuJW3vDrng3G5hr7p1B4l'\n    Group:\n      type: object\n      properties:\n        name:\n          type: string\n          example: 'example_group'\n        users:\n          type: array\n          items:\n            type: string\n            example: 'username'\n        policies:\n          type: array\n          items:\n            type: string\n            example: 'policy'\n    Unauthenticated:\n      type: object\n      properties:\n        error:\n          type: object\n          properties:\n            message:\n              type: string\n              example: failed to validate JWT\n            code:\n              type: integer\n              example: 401\n  parameters:\n    authzProvider:\n      name: X-AuthZ-Provider\n      in: header\n      schema:\n        type: string\n      description: \u003e-\n        operate only within the given AuthZ provider if specified\n        (data mismatching the given AuthZ provider will not be affected)\n"
		}
	},
	"Error": "unmarshal: callback: json: cannot unmarshal bool into Go struct field Schema.required of type []string"
}