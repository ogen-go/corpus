{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openTCS/opentcs"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openTCS-Documentation/src/docs/service-web-api-v1/openapi.yaml",
			"byteSize": 27350,
			"content": "# OpenAPI 3 specification:\n# - https://swagger.io/docs/specification/\n# - https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md\n# Online validator:\n# - https://apidevtools.org/swagger-parser/online/\nopenapi: 3.0.0\ninfo:\n  description: \u003e-\n    Bodies of HTTP requests and responses, where applicable, are JSON structures.\n    The encoding used may be UTF-8, UTF-16 or UTF-32.\n    Where time stamps are used, they are encoded using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601); the time zone used is UTC.\n    \n    \n    The TCP port to be used for the HTTP requests is configuration-dependent; by default, it is 55200.\n    \n    \n    By default, requests are accepted without requiring any authentication.\n    Optionally, an access key can be set in the kernel configuration.\n    The configured value is then expected to be sent by the client in an HTTP header named `X-Api-Access-Key`.\n  # IMPORTANT: When updating this version number, remember to mention that in the changelog, too!\n  version: 1.1.0\n  title: openTCS web API specification\nservers:\n  - url: http://localhost:55200/v1\n    description: openTCS kernel running on localhost\ntags:\n  - name: Transport orders\n    description: Working with transport orders\n  - name: Vehicles\n    description: Working with vehicles\n  - name: Status\n    description: Retrieving status updates\nsecurity:\n  - ApiKeyAuth: []\npaths:\n  /transportOrders:\n    get:\n      tags:\n        - Transport orders\n      summary: Retrieves a set of transport orders.\n      description: \"\"\n      parameters:\n        - name: intendedVehicle\n          in: query\n          description: \u003e-\n            The name of the vehicle that is intended to process the transport orders to be retrieved.\n          required: false\n          schema:\n            type: string\n            default: null\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                title: ArrayOfTransportOrders\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TransportOrderState\"\n        \"404\":\n          description: Referencing object that could not be found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  description: Details on the actual error.\n                  example: Could not find the intended vehicle 'Vehicle-0001'.\n  \"/transportOrders/{NAME}\":\n    get:\n      tags:\n        - Transport orders\n      summary: Retrieves a single named transport order.\n      description: \"\"\n      parameters:\n        - name: NAME\n          in: path\n          description: The name of the transport order to be retrieved.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TransportOrderState\"\n        \"404\":\n          description: Referencing object that could not be found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  description: Details on the actual error.\n                  example: Could not find transport order 'TOrder-01'.\n    post:\n      tags:\n        - Transport orders\n      summary: Creates a new transport order with the given name.\n      description: \"\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TransportOrderState\"\n        \"404\":\n          description: Referencing object that could not be found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  description: Details on the actual error.\n                  example: Could not find location 'Storage 01'.\n        \"409\":\n          description: An object with the same name already exists in the model.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  description: Details on the actual error.\n                  example: Transport order 'TOrder-01' already exists.\n        \"500\":\n          description: \u003e-\n            Unexpectedly interrupted or there was an exception in the kernel\n            while executing this method.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  description: Details on the actual error.\n      parameters:\n        - name: NAME\n          in: path\n          description: The name of the transport order to be created.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TransportOrder\"\n        description: The details of the transport order to be created.\n  \"/transportOrders/{NAME}/withdrawal\":\n    post:\n      tags:\n        - Transport orders\n      summary: Withdraws the transport order with the given name.\n      description: \"\"\n      parameters:\n        - name: NAME\n          in: path\n          description: The name of the transport order to be withdrawn.\n          required: true\n          schema:\n            type: string\n        - name: immediate\n          in: query\n          description: Whether the transport order should be aborted as quickly as possible.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: disableVehicle\n          in: query\n          description: Deprecated, explicitly set the vehicle's integration level, instead.\n          required: false\n          deprecated: true\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: Successful operation\n        \"404\":\n          description: Referencing object that could not be found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  description: Details on the actual error.\n                  example: Could not find transport order 'TOrder-01'.\n  /vehicles:\n    get:\n      tags:\n        - Vehicles\n      summary: Retrieves a set of vehicles.\n      description: \"\"\n      parameters:\n        - name: procState\n          in: query\n          description: The processing state of the vehicles to be retrieved.\n          example: IDLE\n          required: false\n          schema:\n            type: string\n            default: null\n            enum:\n              - UNAVAILABLE\n              - IDLE\n              - AWAITING_ORDER\n              - PROCESSING_ORDER\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                title: ArrayOfVehicles\n                type: array\n                items:\n                  $ref: \"#/components/schemas/VehicleState\"\n  \"/vehicles/{NAME}\":\n    get:\n      tags:\n        - Vehicles\n      summary: Retrieves the vehicle with the given name.\n      description: \"\"\n      parameters:\n        - name: NAME\n          in: path\n          description: The name of the vehicle to be retrieved.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VehicleState\"\n        \"404\":\n          description: Referencing object that could not be found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  description: Details on the actual error.\n                  example: Could not find vehicle 'Vehicle-0001'.\n  \"/vehicles/{NAME}/withdrawal\":\n    post:\n      tags:\n        - Vehicles\n      summary: Withdraws a transport order processed by the vehicle with the given name.\n      description: \"\"\n      parameters:\n        - name: NAME\n          in: path\n          description: Name of the vehicle processing the transport order to be withdrawn\n          required: true\n          schema:\n            type: string\n        - name: immediate\n          in: query\n          description: Whether the transport order should be aborted as quickly as possible.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: disableVehicle\n          in: query\n          description: Deprecated, explicitly set the vehicle's integration level, instead.\n          required: false\n          deprecated: true\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: Successful operation\n        \"404\":\n          description: Referencing object that could not be found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  description: Details on the actual error.\n                  example: Could not find vehicle 'Vehicle-0001'.\n  \"/vehicles/{NAME}/integrationLevel\":\n    put:\n      tags:\n        - Vehicles\n      summary: Sets a new integration level for the named vehicle.\n      description: \"\"\n      parameters:\n        - name: NAME\n          in: path\n          description: The name of the vehicle.\n          required: true\n          schema:\n            type: string\n        - name: newValue\n          in: query\n          description: The vehicle's new integration level.\n          required: true\n          example: TO_BE_RESPECTED\n          schema:\n            type: string\n            enum:\n              - TO_BE_UTILIZED\n              - TO_BE_RESPECTED\n              - TO_BE_NOTICED\n              - TO_BE_IGNORED\n      responses:\n        \"200\":\n          description: Successful operation\n        \"404\":\n          description: Referencing object that could not be found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  description: Details on the actual error.\n                  example: Could not find vehicle 'Vehicle-0001'.\n  /events:\n    get:\n      tags:\n        - Status\n      summary: Retrieves a list of events.\n      description: \u003e-\n        This operation uses *long polling* to avoid excessive load on the server:\n        Set the *timeout* parameter to a value that indicates how long the operation may wait if there currently aren't any events to be returned.\n      parameters:\n        - name: minSequenceNo\n          in: query\n          description: \u003e-\n            The minimum sequence number of events to be retrieved.\n            Can/Should be used to filter out events that have already been retrieved.\n            (Set this to the maximum sequence number already seen, incremented by 1.)\n          required: false\n          schema:\n            type: integer\n            format: int64\n            default: 0\n        - name: maxSequenceNo\n          in: query\n          description: \u003e-\n            The maximum sequence number of events to be retrieved.\n            Can/Should be used to limit the number of events retrieved.\n            (Set this to e.g. *minSequenceNo* + 100.)\n          required: false\n          schema:\n            type: integer\n            format: int64\n            # NOTE: Encoding this value as a string is a workaround to prevent the Swagger UI/JavaScript from rounding it.\n            default: '9223372036854775807'\n        - name: timeout\n          in: query\n          description: \u003e-\n            The time (in milliseconds) to wait for events to arrive if there currently are not any events to be returned.\n            May not be greater than 10000.\n          required: false\n          schema:\n            type: integer\n            format: int64\n            default: 1000\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusMessageList\"\n        \"400\":\n          description: Invalid parameter value(s).\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  description: Details on the actual error.\n                  example: Parameter 'timeout' is not in the correct range.\n  /dispatcher/trigger:\n    post:\n      tags:\n        - Transport orders\n        - Vehicles\n      summary: Explicitly triggers dispatching of vehicles / transport orders.\n      description: \u003e-\n        Triggers the kernel's dispatcher to assign vehicles to transport orders.\n        This usually happens automatically, but depending on the kernel configuration, explicitly triggering it may be necessary.\n      responses:\n        \"200\":\n          description: Successful response\n        \"500\":\n          description: \u003e-\n            Unexpectedly interrupted or there was an exception in the kernel while executing this method.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  description: Details on the actual error.\ncomponents:\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-Api-Access-Key\n  schemas:\n    TransportOrderState:\n      title: Transport Order State\n      type: object\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n          description: The name of the transport order.\n          example: TOrder-01\n        category:\n          type: string\n          description: The category of the transport order.\n          example: Park\n        state:\n          type: string\n          enum:\n            - RAW\n            - ACTIVE\n            - DISPATCHABLE\n            - BEING_PROCESSED\n            - WITHDRAWN\n            - FINISHED\n            - FAILED\n            - UNROUTABLE\n          description: The transport order's current state.\n        intendedVehicle:\n          type: string\n          description: The name of the vehicle that is intended to process the transport\n            order.\n          example: Vehicle-0001\n        processingVehicle:\n          type: string\n          description: The name of the vehicle currently processing the transport order.\n          example: Vehicle-0002\n        destinations:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DestinationState\"\n          description: The sequence of destinations of the transport order.\n    DestinationState:\n      type: object\n      additionalProperties: false\n      properties:\n        locationName:\n          type: string\n          description: The name of the destination location\n          example: Storage-01\n        operation:\n          type: string\n          description: The destination operation\n          example: Store\n        state:\n          type: string\n          enum:\n            - PRISTINE\n            - ACTIVE\n            - TRAVELLING\n            - OPERATING\n            - FINISHED\n            - FAILED\n          description: The drive order's state\n        properties:\n          type: array\n          minItems: 0\n          maxItems: 2147483647\n          items:\n            $ref: \"#/components/schemas/Property\"\n          description: The drive order's properties\n      required:\n        - locationName\n        - operation\n        - state\n    TransportOrder:\n      title: Transport Order\n      type: object\n      additionalProperties: false\n      properties:\n        incompleteName:\n          type: boolean\n          description: Whether the name of the transport order is considered to be incomplete. If\n            set, the kernel will complete the name according to its configuration, e.g. by appending\n            a suffix to it. It is recommended to set this, as names generated by the kernel can be\n            guaranteed to be unique, while clients typically cannot guarantee this.\n          default: false\n        deadline:\n          type: string\n          format: date-time\n          description: The (optional) deadline of the transport order\n          example: 2018-05-17T06:42:40.396Z\n        intendedVehicle:\n          type: string\n          description: The (optional) intended vehicle of the transport order\n          example: Vehicle-01\n        destinations:\n          type: array\n          minItems: 1\n          maxItems: 2147483647\n          items:\n            $ref: \"#/components/schemas/DestinationOrder\"\n          description: The destinations\n        properties:\n          type: array\n          minItems: 0\n          maxItems: 2147483647\n          items:\n            $ref: \"#/components/schemas/Property\"\n          description: The transport order's properties\n        dependencies:\n          type: array\n          minItems: 0\n          maxItems: 2147483647\n          items:\n            type: string\n            example: TOrder-002\n          description: The transport order's dependencies\n      required:\n        - destinations\n    DestinationOrder:\n      type: object\n      additionalProperties: false\n      properties:\n        locationName:\n          type: string\n          description: The name of the destination location\n          example: Storage 01\n        operation:\n          type: string\n          description: The destination operation\n          example: Load cargo\n        properties:\n          type: array\n          minItems: 0\n          maxItems: 2147483647\n          items:\n            $ref: \"#/components/schemas/Property\"\n          description: The drive order's properties\n      required:\n        - locationName\n        - operation\n    VehicleState:\n      title: Vehicle State\n      type: object\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n          description: The name of the vehicle\n          example: Vehicle-0001\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n          description: A set of properties (key-value pairs) associated with this object.\n        length:\n          type: integer\n          description: The vehicle's length (in mm).\n          example: 1000\n        energyLevelGood:\n          type: integer\n          description: The value at/above which the vehicle's energy level is considered\n            'good'.\n          example: 90\n        energyLevelCritical:\n          type: integer\n          description: The value at/below which the vehicle's energy level is considered\n            'critical'.\n          example: 30\n        energyLevel:\n          type: integer\n          description: The vehicle's remaining energy (in percent of the maximum).\n          example: 60\n        integrationLevel:\n          type: string\n          enum:\n            - TO_BE_IGNORED\n            - TO_BE_NOTICED\n            - TO_BE_RESPECTED\n            - TO_BE_UTILIZED\n          description: The vehicle's integration level.\n        procState:\n          type: string\n          enum:\n            - UNAVAILABLE\n            - IDLE\n            - AWAITING_ORDER\n            - PROCESSING_ORDER\n          description: The vehicle's current processing state.\n        transportOrder:\n          type: string\n          description: The name of the transport order the vehicle is currently processing.\n          example: TOrder-01\n        currentPosition:\n          type: string\n          description: The name of the point which the vehicle currently occupies.\n          example: Point-0001\n        precisePosition:\n          $ref: \"#/components/schemas/PrecisePosition\"\n        state:\n          type: string\n          enum:\n            - UNKNOWN\n            - UNAVAILABLE\n            - ERROR\n            - IDLE\n            - EXECUTING\n            - CHARGING\n          description: The vehicle's current state.\n        allocatedResources:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ResourceSet\"\n          description: The resources already allocated by the vehicle.\n          example: [ [ \"Path-0039--0040\", \"Point-0040\" ], [ \"Path-0040--0041\", \"Point-0041\" ] ]\n        claimedResources:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ResourceSet\"\n          description: The resources claimed - i.e. not yet allocated - for the vehicle's route.\n          example: [ [ \"Path-0041--0042\", \"Point-0042\" ], [ \"Path-0042--0043\", \"Point-0043\", \"Location-2345\" ] ]\n      required:\n        - length\n        - energyLevelGood\n        - energyLevelCritical\n        - energyLevel\n        - allocatedResources\n        - claimedResources\n    ResourceSet:\n      type: array\n      items:\n        type: string\n        description: Name of the resource\n      example: [ Point-0042, Path-0041--0042 ]\n    StatusMessageList:\n      title: Status Message List\n      type: object\n      additionalProperties: false\n      properties:\n        timeStamp:\n          type: string\n          format: date-time\n          description: The point of time at which this data structure was created\n        statusMessages:\n          type: array\n          items:\n            oneOf:\n              - $ref: \"#/components/schemas/OrderStatusMessage\"\n              - $ref: \"#/components/schemas/VehicleStatusMessage\"\n          description: The status messages\n      required:\n        - timeStamp\n        - statusMessages\n    StatusMessage:\n      title: AbstractStatusMessage\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - OrderStatusMessage\n            - VehicleStatusMessage\n        sequenceNumber:\n          type: integer\n          description: The (unique) sequence number of this status message\n          example: 123\n        creationTimeStamp:\n          type: string\n          format: date-time\n          description: When this status message was created\n          example: 2018-05-14T07:42:00.343Z\n      discriminator:\n        propertyName: type\n      required:\n        - type\n        - sequenceNumber\n        - creationTimeStamp\n    OrderStatusMessage:\n      title: OrderStatusMessage\n      type: object\n      additionalProperties: false\n      allOf:\n        - $ref: \"#/components/schemas/StatusMessage\"\n        - properties:\n            type:\n              type: string\n              enum:\n                - TransportOrder\n              default: TransportOrder\n            sequenceNumber:\n              example: 124\n            orderName:\n              type: string\n              description: The (optional) transport order name\n              example: TOrder-0001\n            processingVehicleName:\n              type: string\n              description: The processing vehicle's name\n              example: Vehicle-0001\n            orderState:\n              type: string\n              enum:\n                - RAW\n                - ACTIVE\n                - DISPATCHABLE\n                - BEING_PROCESSED\n                - WITHDRAWN\n                - FINISHED\n                - FAILED\n                - UNROUTABLE\n              description: The transport order's current state\n            destinations:\n              type: array\n              minItems: 1\n              maxItems: 2147483647\n              items:\n                $ref: \"#/components/schemas/DestinationState\"\n              description: The transport order's destinations\n            properties:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Property\"\n              description: The transport order's properties\n      required:\n        - type\n    VehicleStatusMessage:\n      type: object\n      additionalProperties: false\n      allOf:\n        - $ref: \"#/components/schemas/StatusMessage\"\n        - properties:\n            type:\n              type: string\n              enum:\n                - Vehicle\n              default: Vehicle\n            sequenceNumber:\n              example: 125\n            vehicleName:\n              type: string\n              description: The vehicle's name\n              example: Vehicle-0001\n            transportOrderName:\n              type: string\n              description: The name of the transport order the vehicle currently processes\n              example: TOrder-0001\n            position:\n              type: string\n              description: The name of the point the vehicle currently occupies\n              example: Point-0001\n            precisePosition:\n              $ref: \"#/components/schemas/PrecisePosition\"\n            state:\n              type: string\n              enum:\n                - UNKNOWN\n                - UNAVAILABLE\n                - ERROR\n                - IDLE\n                - EXECUTING\n                - CHARGING\n              description: The vehicle's current state\n            procState:\n              type: string\n              enum:\n                - UNAVAILABLE\n                - IDLE\n                - AWAITING_ORDER\n                - PROCESSING_ORDER\n              description: The vehicle's current processing state\n            allocatedResources:\n              type: array\n              items:\n                $ref: \"#/components/schemas/ResourceSet\"\n              description: The resources already allocated by the vehicle.\n              example: [ [ \"Path-0039--0040\", \"Point-0040\" ], [ \"Path-0040--0041\", \"Point-0041\" ] ]\n            claimedResources:\n              type: array\n              items:\n                $ref: \"#/components/schemas/ResourceSet\"\n              description: The resources claimed - i.e. not yet allocated - for the vehicle's route.\n              example: [ [ \"Path-0041--0042\", \"Point-0042\" ], [ \"Path-0042--0043\", \"Point-0043\", \"Location-2345\" ] ]\n      title: VehicleStatusMessage\n      required:\n        - type\n        - vehicleName\n        - state\n        - procState\n        - allocatedResources\n        - claimedResources\n    Property:\n      type: object\n      additionalProperties: false\n      properties:\n        key:\n          type: string\n          description: The property's key\n          example: key1\n        value:\n          type: string\n          description: The property's value\n          example: value1\n      required:\n        - key\n        - value\n    PrecisePosition:\n      type: object\n      additionalProperties: false\n      properties:\n        x:\n          type: integer\n          description: The position's X coordinate\n          example: 60\n        y:\n          type: integer\n          description: The position's Y coordinate\n          example: 40\n        z:\n          type: integer\n          description: The position's Z coordinate\n          example: 0\n      required:\n        - x\n        - y\n        - z"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal bool into Go struct field Schema.components.schemas.required of type string"
}