{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/allenheltondev/serverless-api-key-registration"
		},
		"file": {
			"name": "api-key-registration-openapi.yaml",
			"size": 0,
			"path": "api-key-registration-openapi.yaml",
			"byteSize": 16451,
			"content": "openapi: 3.0.0\ninfo:\n  title: \n    Fn::Sub: Api Key Registration (${ApiName})\n  description: API to register consumers of a microservice and create a working API key\n  version: 1.0.0\n\nx-amazon-apigateway-request-validators:\n  Validate body, query string parameters, and headers:\n    validateRequestParameters: true\n    validateRequestBody: true\nx-amazon-apigateway-gateway-responses:\n  BAD_REQUEST_BODY:\n    statusCode: 400\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n    responseTemplates:\n      application/json: '{ \"message\": \"$context.error.validationErrorString\" }'\n  UNAUTHORIZED:\n    statusCode: 401\n    responseTemplates:\n      application/json: '{ \"message\": \"Unauthorized\" }'\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n  ACCESS_DENIED:\n    statusCode: 401\n    responseTemplates:\n      application/json: '{ \"message\": \"Unauthorized\" }'\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n      \npaths:\n  /api-keys:\n    post:\n      summary: Registers a new API key\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddApiKey'\n      responses:\n        201:\n          $ref: '#/components/responses/Created'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/Forbidden'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n      x-amazon-apigateway-request-validator: Validate body, query string parameters, and headers\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${AddApiKeyRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:states:action/StartSyncExecution\n        httpMethod: POST\n        type: aws\n        requestTemplates:\n          application/json:\n            Fn::Sub:  \n              - |-\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($body = \"{\"\"detail\"\" : $input.json('$')}\")\n                {\n                    \"input\": \"$util.escapeJavaScript($body)\",\n                    \"stateMachineArn\": \"${StateMachine}\"\n                }\n              - { StateMachine: { \"Ref\": \"AddApiKeyStateMachine\" }}\n        responses:\n          200:\n            statusCode: 201\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($inputRoot = $input.path('$'))\n                #set($output = $util.parseJson($input.path('$.output')))\n                {\n                  #if(\"$output.apiKey\" != \"\")\n                    \"apiKey\": \"$output.apiKey\"\n                  #end\n                  #if(\"$inputRoot.error\" == \"NameExists\")\n                    #set($context.responseOverride.status = 400)\n                    \"message\": \"$inputRoot.cause\"\n                  #end\n                  #if(\"$inputRoot.error\" == \"UnhandledError\")\n                    #set($context.responseOverride.status = 500)\n                    \"message\": \"$inputRoot.cause\"\n                  #end                  \n                }\n\n    get:\n      summary: Get a list of all registered API keys\n      responses:\n        200:\n          description: The list of registered API keys was successfully returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKeyList'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/Forbidden'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n      x-amazon-apigateway-request-validator: Validate body, query string parameters, and headers\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${GetApiKeyListRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/Query\n        httpMethod: POST\n        type: aws\n        passthroughBehavior: never\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                {\n                  \"TableName\": \"${TableName}\",\n                  \"KeyConditionExpression\": \"#pk = :pk\",\n                  \"ExpressionAttributeNames\": {\n                    \"#pk\": \"pk\"\n                  },\n                  \"ExpressionAttributeValues\": {\n                    \":pk\": { \"S\": \"apikey#\" }\n                  }                  \n                }\n              - { TableName: { Ref: DynamoTableName } }\n        responses:\n          200:\n            statusCode: 200\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($inputRoot = $input.path('$'))\n                {\n                  \"items\": [\n                    #foreach($elem in $inputRoot.Items) {                      \n                      \"name\": \"$elem.sk.S\",\n                      \"created\": {\n                        \"timestamp\": \"$elem.audit.M.created.M.timestamp.S\"\n                      } \n                    }#if($foreach.hasNext),#end\n                    #end\n                  ]                  \n                }\n\n  /api-keys/{name}:\n    parameters:\n      - $ref: '#/components/parameters/name'\n    get:\n      summary: Get the details about a specific API key\n      responses:\n        200:\n          description: The API key was found and the details returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKeyDetail'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/Forbidden'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n      x-amazon-apigateway-request-validator: Validate body, query string parameters, and headers\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${GetApiKeyDetailsRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/GetItem\n        httpMethod: POST\n        type: aws\n        passthroughBehavior: never\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                {\n                  \"TableName\": \"${TableName}\",\n                  \"Key\": {\n                    \"pk\": { \"S\": \"apikey#\" },\n                    \"sk\": { \"S\": \"$input.params('name')\"}\n                  }             \n                }\n              - { TableName: { Ref: DynamoTableName } }\n        responses:\n          200:\n            statusCode: 200\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($inputRoot = $input.path('$'))\n                {\n                  #if(\"$inputRoot.Item.sk.S\" != \"\")\n                    \"name\": \"$inputRoot.Item.sk.S\",\n                    \"created\": {\n                      \"timestamp\": \"$inputRoot.Item.audit.M.created.M.timestamp.S\"\n                    }                  \n                    #if(\"$inputRoot.Item.audit.M.lastUpdate.M\" != \"\"),\n                      \"lastUpdate\": {\n                        \"timestamp\": \"$inputRoot.Item.audit.M.lastUpdate.M.timestamp.S\",\n                        \"type\": \"$inputRoot.Item.audit.M.lastUpdate.M.type.S\"\n                      }\n                    #end\n                  #else\n                    #set($context.responseOverride.status = 404)\n                    \"message\": \"An api key with the provided name could not be found\"\n                  #end\n                }    \n    \n    delete:\n      summary: Remove the API key\n      responses:\n        204:\n          $ref: '#/components/responses/NoContent'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/Forbidden'        \n        500:\n          $ref: '#/components/responses/InternalServerError'\n      x-amazon-apigateway-request-validator: Validate body, query string parameters, and headers\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${DeleteApiKeyRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:states:action/StartExecution\n        httpMethod: POST\n        type: aws\n        requestTemplates:\n          application/json:\n            Fn::Sub:  \n              - |-\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($body = \"{\"\"name\"\" : \"\"$input.params('name')\"\"}\")\n                {\n                    \"input\": \"$util.escapeJavaScript($body)\",\n                    \"stateMachineArn\": \"${StateMachine}\"\n                }\n              - { StateMachine: { \"Ref\": \"DeleteApiKeyStateMachine\" }}\n        responses:\n          200:\n            statusCode: 204\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')                \n\n  /api-keys/{name}/rotate:\n    parameters:\n      - $ref: '#/components/parameters/name'\n    post:\n      summary: Rotate the API key value\n      description: Inactive the current API key and generate a new one effective immediately\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RotateApiKey'\n      responses:\n        200:\n          description: The API key was successfully updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKey'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/Forbidden'\n        404:\n          $ref: '#/components/responses/NotFound'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n      x-amazon-apigateway-request-validator: Validate body, query string parameters, and headers\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${RotateApiKeyRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:states:action/StartSyncExecution\n        httpMethod: POST\n        type: aws\n        requestTemplates:\n          application/json:\n            Fn::Sub:  \n              - |-\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($body = \"{\"\"detail\"\" : $input.json('$'), \"\"name\"\": \"\"$input.params('name')\"\"}\")\n                {\n                    \"input\": \"$util.escapeJavaScript($body)\",\n                    \"stateMachineArn\": \"${StateMachine}\"\n                }\n              - { StateMachine: { \"Ref\": \"RotateApiKeyStateMachine\" }}\n        responses:\n          200:\n            statusCode: 200\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($inputRoot = $input.path('$'))\n                #set($output = $util.parseJson($input.path('$.output')))\n                {\n                  #if(\"$output.apiKey\" != \"\")\n                    \"apiKey\": \"$output.apiKey\"\n                  #end\n                  #if(\"$inputRoot.error\" == \"NotFound\")\n                    #set($context.responseOverride.status = 404)\n                    \"message\": \"$inputRoot.cause\"\n                  #end\n                  #if(\"$inputRoot.error\" == \"UnhandledError\")\n                    #set($context.responseOverride.status = 500)\n                    \"message\": \"$inputRoot.cause\"\n                  #end                  \n                }\n\ncomponents:\n  schemas: \n    AddApiKey:\n      type: object\n      required:\n        - name\n      properties:        \n        name:\n          type: string\n          minLength: 2\n          pattern: ^[a-z]*$\n          description: Unique identifier for the API key. Must be all lowercase alpha characters\n          example: gopherholes\n\n    ApiKeyList:\n      type: object\n      required: \n        - items\n      properties:\n        items:\n          type: array\n          description: List of registered api keys\n          items:\n            $ref: '#/components/schemas/ApiKeySummary'\n\n    ApiKeySummary:\n      type: object\n      required:\n        - name\n        - created\n      properties:\n        name:\n          type: string\n          description: Unique identifier for the API key\n          example: gopherholes\n        created:\n          type: object\n          required:\n            - timestamp\n          properties:            \n            timestamp:\n              type: string\n              format: date-time\n              description: Date and time (UTC) the api key was registered\n              example: '2022-03-10T14:22:56.000Z'\n    \n    ApiKeyDetail:\n      allOf:\n        - $ref: '#/components/schemas/ApiKeySummary'\n        - type: object\n          required:\n            - lastUpdate\n          properties:\n            lastUpdate:\n              type: object\n              required:\n                - type\n                - email\n                - timestamp\n              properties:\n                type:\n                  type: string\n                  description: The type of change that was made\n                  example: key-rotation                \n                timestamp:\n                  type: string\n                  format: date-time\n                  description: Date and time of the last update\n                  example: '2022-04-10T12:41:00.445Z'\n\n    ApiKey:\n      type: object\n      required:\n        - apiKey\n      properties:\n        apiKey:\n          type: string\n          description: Api key used to authenticate with the microservice\n    \n    RotateApiKey:\n      type: object\n      properties:\n        value:\n          type: string\n          minLength: 20\n          description: Provided value to manually set the Api key to\n          example: mytestapikey\n\n    Error:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          type: string\n          description: Details of the error that occurred\n          example: The request type provided in the message is invalid.\n\n  parameters:\n    name:\n      name: name\n      in: path\n      description: Unique identifier for an API key\n      required: true      \n      schema:\n        type: string\n        example: gopherholes\n\n  responses:\n    Created:\n      description: The request succeeded and created a new resource. (Status Code 201)\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              id:\n                type: string\n            required:\n              - id\n    NoContent:\n      description: No content is returned by the API. (Status Code 204)\n    BadRequest:\n      description: Invalid content was provided in the request. (Status Code 400)\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Unauthorized: \n      description: The request requires authentication. (Status Code 401)\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Forbidden: \n      description: Access is not authorized. (Status Code 403)\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    NotFound:\n      description: The resource with the request id was not found. (Status Code 404)\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    InternalServerError:\n      description: Something went wrong during processing of the request. (Status Code 500)\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - message\n            properties:\n              message:\n                type: string\n                description: Error message details\n                example: Something went wrong",
			"canonicalURL": "/github.com/allenheltondev/serverless-api-key-registration@a126c3d1b8f0739734e2bfabb344a6de1c15dfe9/-/blob/api-key-registration-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/allenheltondev/serverless-api-key-registration/blob/a126c3d1b8f0739734e2bfabb344a6de1c15dfe9/api-key-registration-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 4: cannot unmarshal !!map into string"
}