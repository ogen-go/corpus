{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/epam/badgerdoc"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "taxonomy/documentation/openapi.yaml",
			"byteSize": 27907,
			"content": "openapi: 3.0.2\ninfo:\n  title: Badgerdoc Taxonomy\n  version: 0.0.1\npaths:\n  /taxons:\n    post:\n      tags:\n      - Taxon\n      summary: Save new taxon and return saved one.\n      operationId: save_taxon_taxons_post\n      parameters:\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaxonInputSchema'\n        required: true\n      responses:\n        '201':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaxonResponseSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n  /taxons/{taxon_id}:\n    get:\n      tags:\n      - Taxon\n      summary: Get taxon by id.\n      operationId: fetch_taxon_taxons__taxon_id__get\n      parameters:\n      - required: true\n        schema:\n          title: Taxon Id\n          type: string\n        example: '1'\n        name: taxon_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaxonResponseSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n    put:\n      tags:\n      - Taxon\n      summary: Update taxon.\n      description: Updates taxon by id and returns updated taxon.\n      operationId: update_taxon_taxons__taxon_id__put\n      parameters:\n      - required: true\n        schema:\n          title: Taxon Id\n          type: string\n        example: '1'\n        name: taxon_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaxonBaseSchema'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaxonResponseSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n    delete:\n      tags:\n      - Taxon\n      summary: Delete taxon by id.\n      operationId: delete_taxon_taxons__taxon_id__delete\n      parameters:\n      - required: true\n        schema:\n          title: Taxon Id\n          type: string\n        example: '1'\n        name: taxon_id\n        in: path\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      responses:\n        '204':\n          description: Successful Response\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n  /taxons/search:\n    post:\n      tags:\n      - Taxon\n      summary: Search taxons.\n      description: |-\n        Searches and returns taxons data according to search request parameters\n        filters. Supports pagination and ordering.\n      operationId: search_categories_taxons_search_post\n      parameters:\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/_BadgerdocSearch_taxon_Taxon_'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page_Union_app.schemas.taxon.TaxonResponseSchema__str__dict__'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n  /taxonomy:\n    get:\n      tags:\n      - Taxonomy\n      summary: Get all taxonomies by job id\n      operationId: get_job_taxonomies_taxonomy_get\n      parameters:\n      - required: true\n        schema:\n          title: Job Id\n          type: string\n        name: job_id\n        in: query\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: Response Get Job Taxonomies Taxonomy Get\n                type: array\n                items:\n                  $ref: '#/components/schemas/TaxonomyResponseSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n    put:\n      tags:\n      - Taxonomy\n      summary: Update taxonomy.\n      description: Updates taxonomy by id and returns updated taxonomy.\n      operationId: update_taxonomy_taxonomy_put\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaxonomyInputSchema'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaxonomyResponseSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n    post:\n      tags:\n      - Taxonomy\n      summary: Save new taxonomy and return saved one.\n      operationId: create_new_taxonomy_taxonomy_post\n      parameters:\n      - required: true\n        schema:\n          title: X-Current-Tenant\n          type: string\n        example: test\n        name: X-Current-Tenant\n        in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaxonomyInputSchema'\n        required: true\n      responses:\n        '201':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaxonomyResponseSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n  /taxonomy/{taxonomy_id}:\n    get:\n      tags:\n      - Taxonomy\n      summary: Get taxonomy by id.\n      operationId: get_taxonomy_by_id_taxonomy__taxonomy_id__get\n      parameters:\n      - required: true\n        schema:\n          title: Taxonomy Id\n          type: string\n        example: '1'\n        name: taxonomy_id\n        in: path\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaxonomyResponseSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n    delete:\n      tags:\n      - Taxonomy\n      summary: Delete latest taxonomy by id.\n      operationId: delete_taxonomy_taxonomy__taxonomy_id__delete\n      parameters:\n      - required: true\n        schema:\n          title: Taxonomy Id\n          type: string\n        example: '1'\n        name: taxonomy_id\n        in: path\n      responses:\n        '204':\n          description: Successful Response\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n  /taxonomy/{taxonomy_id}/{version}:\n    get:\n      tags:\n      - Taxonomy\n      summary: Get taxonomy by id and version.\n      operationId: get_taxonomy_by_id_and_version_taxonomy__taxonomy_id___version__get\n      parameters:\n      - required: true\n        schema:\n          title: Taxonomy Id\n          type: string\n        example: '1'\n        name: taxonomy_id\n        in: path\n      - required: true\n        schema:\n          title: Version\n          type: integer\n        example: 1\n        name: version\n        in: path\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Taxonomy was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n    put:\n      tags:\n      - Taxonomy\n      summary: Update taxonomy by id and version.\n      description: Updates taxonomy by id and returns updated taxonomy.\n      operationId: update_taxonomy_by_id_and_version_taxonomy__taxonomy_id___version__put\n      parameters:\n      - required: true\n        schema:\n          title: Taxonomy Id\n          type: string\n        example: '1'\n        name: taxonomy_id\n        in: path\n      - required: true\n        schema:\n          title: Version\n          type: integer\n        example: 1\n        name: version\n        in: path\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaxonomyBaseSchema'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaxonomyResponseSchema'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n    delete:\n      tags:\n      - Taxonomy\n      summary: Delete taxonomy by id and version.\n      operationId: delete_taxonomy_by_id_and_version_taxonomy__taxonomy_id___version__delete\n      parameters:\n      - required: true\n        schema:\n          title: Taxonomy Id\n          type: string\n        example: '1'\n        name: taxonomy_id\n        in: path\n      - required: true\n        schema:\n          title: Version\n          type: integer\n        example: 1\n        name: version\n        in: path\n      responses:\n        '204':\n          description: Successful Response\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n  /taxonomy/{taxonomy_id}/link_to_job:\n    post:\n      tags:\n      - Taxonomy\n      summary: Save new taxonomy and return saved one.\n      operationId: associate_taxonomy_to_job_taxonomy__taxonomy_id__link_to_job_post\n      parameters:\n      - required: true\n        schema:\n          title: Taxonomy Id\n          type: string\n        example: '1'\n        name: taxonomy_id\n        in: path\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JobIdSchema'\n        required: true\n      responses:\n        '201':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\ncomponents:\n  schemas:\n    BadRequestErrorSchema:\n      title: BadRequestErrorSchema\n      required:\n      - detail\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: string\n      example:\n        detail: Bad request.\n    ConnectionErrorSchema:\n      title: ConnectionErrorSchema\n      required:\n      - detail\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: string\n      example:\n        detail: 'Error: Connection error.'\n    HTTPValidationError:\n      title: HTTPValidationError\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: array\n          items:\n            $ref: '#/components/schemas/ValidationError'\n    JobIdSchema:\n      title: JobIdSchema\n      required:\n      - id\n      type: object\n      properties:\n        id:\n          title: Id\n          type: string\n          example: 123abc\n    NotFoundErrorSchema:\n      title: NotFoundErrorSchema\n      required:\n      - detail\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: string\n      example:\n        detail: Resource was not found.\n    Page_Union_app.schemas.taxon.TaxonResponseSchema__str__dict__:\n      title: Page[Union[app.schemas.taxon.TaxonResponseSchema, str, dict]]\n      required:\n      - pagination\n      - data\n      type: object\n      properties:\n        pagination:\n          $ref: '#/components/schemas/PaginationOut'\n        data:\n          title: Data\n          type: array\n          items:\n            anyOf:\n            - $ref: '#/components/schemas/TaxonResponseSchema'\n            - type: string\n            - type: object\n      description: |-\n        Abstract base class for generic types.\n\n        A generic type is typically declared by inheriting from\n        this class parameterized with one or more type variables.\n        For example, a generic mapping type might be defined as::\n\n          class Mapping(Generic[KT, VT]):\n              def __getitem__(self, key: KT) -\u003e VT:\n                  ...\n              # Etc.\n\n        This class can then be used as follows::\n\n          def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -\u003e VT:\n              try:\n                  return mapping[key]\n              except KeyError:\n                  return default\n    Pagination:\n      title: Pagination\n      required:\n      - page_size\n      type: object\n      properties:\n        page_num:\n          title: Page Num\n          exclusiveMinimum: 0.0\n          type: integer\n          default: 1\n        page_size:\n          $ref: '#/components/schemas/_FilterPagesize'\n    PaginationOut:\n      title: PaginationOut\n      required:\n      - page_size\n      - min_pages_left\n      - total\n      - has_more\n      type: object\n      properties:\n        page_num:\n          title: Page Num\n          exclusiveMinimum: 0.0\n          type: integer\n          default: 1\n        page_size:\n          $ref: '#/components/schemas/_FilterPagesize'\n        min_pages_left:\n          title: Min Pages Left\n          type: integer\n        total:\n          title: Total\n          type: integer\n        has_more:\n          title: Has More\n          type: boolean\n    TaxonBaseSchema:\n      title: TaxonBaseSchema\n      required:\n      - name\n      - taxonomy_id\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n          example: taxon_name\n        taxonomy_id:\n          title: Taxonomy Id\n          type: string\n          example: my_taxonomy_id\n        parent_id:\n          title: Parent Id\n          type: string\n          example: 'null'\n        taxonomy_version:\n          title: Taxonomy Version\n          type: integer\n          example: 1\n    TaxonInputSchema:\n      title: TaxonInputSchema\n      required:\n      - name\n      - taxonomy_id\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n          example: taxon_name\n        taxonomy_id:\n          title: Taxonomy Id\n          type: string\n          example: my_taxonomy_id\n        parent_id:\n          title: Parent Id\n          type: string\n          example: 'null'\n        taxonomy_version:\n          title: Taxonomy Version\n          type: integer\n          example: 1\n        id:\n          title: Id\n          type: string\n          description: If id is not provided, generates it as a UUID.\n          example: my_taxon_id\n    TaxonResponseSchema:\n      title: TaxonResponseSchema\n      required:\n      - name\n      - taxonomy_id\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n          example: taxon_name\n        taxonomy_id:\n          title: Taxonomy Id\n          type: string\n          example: my_taxonomy_id\n        parent_id:\n          title: Parent Id\n          type: string\n          example: 'null'\n        taxonomy_version:\n          title: Taxonomy Version\n          type: integer\n          example: 1\n        id:\n          title: Id\n          type: string\n          description: If id is not provided, generates it as a UUID.\n          example: my_taxon_id\n        parents:\n          title: Parents\n          type: array\n          items:\n            type: object\n          default: []\n        is_leaf:\n          title: Is Leaf\n          type: boolean\n    TaxonomyBaseSchema:\n      title: TaxonomyBaseSchema\n      required:\n      - name\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n          example: taxonomy_name\n        category_id:\n          title: Category Id\n          type: string\n          example: my_category\n    TaxonomyInputSchema:\n      title: TaxonomyInputSchema\n      required:\n      - name\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n          example: taxonomy_name\n        category_id:\n          title: Category Id\n          type: string\n          example: my_category\n        id:\n          title: Id\n          type: string\n          description: If id is not provided, generates it as a UUID.\n          example: my_taxonomy_id\n    TaxonomyResponseSchema:\n      title: TaxonomyResponseSchema\n      required:\n      - name\n      - version\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n          example: taxonomy_name\n        category_id:\n          title: Category Id\n          type: string\n          example: my_category\n        id:\n          title: Id\n          type: string\n          description: If id is not provided, generates it as a UUID.\n          example: my_taxonomy_id\n        version:\n          title: Version\n          type: integer\n          description: Version of taxonomy\n          example: 1\n    ValidationError:\n      title: ValidationError\n      required:\n      - loc\n      - msg\n      - type\n      type: object\n      properties:\n        loc:\n          title: Location\n          type: array\n          items:\n            type: string\n        msg:\n          title: Message\n          type: string\n        type:\n          title: Error Type\n          type: string\n    _BadgerdocSearch_taxon_Taxon_:\n      title: _BadgerdocSearch[taxon_Taxon]\n      type: object\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        filters:\n          title: Filters\n          type: array\n          items:\n            $ref: '#/components/schemas/_Filters_taxon_Taxon_'\n        sorting:\n          title: Sorting\n          type: array\n          items:\n            $ref: '#/components/schemas/_Sorts_taxon_Taxon_'\n      description: |-\n        Abstract base class for generic types.\n\n        A generic type is typically declared by inheriting from\n        this class parameterized with one or more type variables.\n        For example, a generic mapping type might be defined as::\n\n          class Mapping(Generic[KT, VT]):\n              def __getitem__(self, key: KT) -\u003e VT:\n                  ...\n              # Etc.\n\n        This class can then be used as follows::\n\n          def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -\u003e VT:\n              try:\n                  return mapping[key]\n              except KeyError:\n                  return default\n    _FilterOperations:\n      title: _FilterOperations\n      enum:\n      - is_null\n      - is_not_null\n      - eq\n      - ne\n      - gt\n      - lt\n      - ge\n      - le\n      - like\n      - ilike\n      - not_ilike\n      - in\n      - not_in\n      - any\n      - not_any\n      - match\n      - distinct\n      - parent\n      - parents_recursive\n      - children\n      - children_recursive\n      type: string\n      description: An enumeration.\n    _FilterPagesize:\n      title: _FilterPagesize\n      enum:\n      - 15\n      - 30\n      - 50\n      - 80\n      - 100\n      type: integer\n      description: An enumeration.\n    _Filters_taxon_Taxon_:\n      title: _Filters[taxon_Taxon]\n      required:\n      - field\n      - operator\n      type: object\n      properties:\n        field:\n          $ref: '#/components/schemas/taxon_Taxon'\n        operator:\n          $ref: '#/components/schemas/_FilterOperations'\n        value:\n          title: Value\n    _SortDirection:\n      title: _SortDirection\n      enum:\n      - asc\n      - desc\n      type: string\n      description: An enumeration.\n    _Sorts_taxon_Taxon_:\n      title: _Sorts[taxon_Taxon]\n      required:\n      - field\n      - direction\n      type: object\n      properties:\n        field:\n          $ref: '#/components/schemas/taxon_Taxon'\n        direction:\n          $ref: '#/components/schemas/_SortDirection'\n    taxon_Taxon:\n      title: taxon_Taxon\n      enum:\n      - id\n      - name\n      - taxonomy_id\n      - taxonomy_version\n      - parent_id\n      - tree\n      - taxonomy.id\n      - taxonomy.name\n      - taxonomy.version\n      - taxonomy.tenant\n      - taxonomy.category_id\n      - taxonomy.latest\n      - parent.id\n      - parent.name\n      - parent.tenant\n      - parent.taxonomy_id\n      - parent.taxonomy_version\n      - parent.parent_id\n      - parent.tree\n      type: string\n      description: An enumeration.\ntags:\n- name: Taxonomy\n  description: Actions associated with taxonomies.\n- name: Taxon\n  description: Actions associated with taxons.\n",
			"canonicalURL": "/github.com/epam/badgerdoc@39600e5ebb9e54145bbbb7973b16d79612111db1/-/blob/taxonomy/documentation/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/epam/badgerdoc/blob/39600e5ebb9e54145bbbb7973b16d79612111db1/taxonomy/documentation/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 713: cannot unmarshal !!float `0.0` into bool; yaml: line 729: cannot unmarshal !!float `0.0` into bool"
}