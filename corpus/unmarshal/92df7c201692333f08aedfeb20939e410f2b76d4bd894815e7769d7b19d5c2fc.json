{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/anish-shanbhag/minecraft-api"
		},
		"file": {
			"name": "spec.yaml",
			"size": 0,
			"path": "docs/spec.yaml",
			"byteSize": 27445,
			"content": "openapi: 3.0.0\ninfo:\n  title: Minecraft API\n  version: \"2.0\"\n  license:\n    name: MIT\n  description: \"\"\n  contact:\n    name: Anish Shanbhag\n    url: \"https://github.com/anish-shanbhag\"\nservers:\n  - url: \"https://minecraft-api.vercel.app/api\"\npaths:\n  /items:\n    get:\n      summary: Get Items\n      tags:\n        - Endpoints\n      operationId: get-items\n      parameters:\n        - schema:\n            type: number\n          in: query\n          name: limit\n          description: \"The maximum number of items to return from this query. If excluded, the query returns all items.\"\n          style: \"\"\n        - schema:\n            type: number\n            default: 1\n          in: query\n          name: page\n          description: Allows for pagination of this query. You must pass the `limit` parameter if using this parameter as well. You can think of this as dividing the items into pages of length `limit` and returning the `page`th one.\n        - schema:\n            type: string\n            default: item\n            enum:\n              - name\n              - namespacedId\n              - description\n              - image\n              - stackSize\n          in: query\n          name: sort\n          description: Sorts the items by this field.\n        - schema:\n            type: string\n            enum:\n              - asc\n              - desc\n            default: asc\n          in: query\n          name: order\n          description: 'Whether to sort the items ascending or descending using the `sort` parameter. `\"asc\"` sorts ascending, while `\"desc\"` sorts descending.'\n        - schema:\n            default: \"*\"\n            example:\n              - name\n              - image\n              - stackSize\n            uniqueItems: false\n          in: query\n          name: fields\n          description: \"The fields of the item object to include in the response. Passing an array of strings results in all of those fields being included, while passing only a string results in only that single field being included. If you don't pass any value for this parameter, then all fields are included.\"\n        - schema:\n            type: number\n            enum:\n              - 1\n              - 16\n              - 64\n          in: query\n          name: stackSize\n          description: Filters the items by including only those with a certain stack size.\n      description: Get an array of Minecraft items.\n      responses:\n        \"200\":\n          description: OK - sent when the request was processed successfully. The body will contain the array of items.\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                      description: The name of the item.\n                    namespacedId:\n                      type: string\n                      description: \"The namespaced ID of this item, which is used to identify the item in game when using commands.\"\n                    description:\n                      type: string\n                      description: A short description of the item and its uses. Certain items that fall under a common category share a single description.\n                    image:\n                      type: string\n                      description: \"A link to a 16x16 image of the item, which is usually displayed inside the player's inventory.\"\n                    stackSize:\n                      type: number\n                      description: \"The maximum number of this item which can fit in a single stack of the player's inventory. Can be 1, 16, or 64.\"\n              examples:\n                Example 1:\n                  value:\n                    - name: Acacia Boat\n                      namespacedId: acacia_boat\n                      description: A boat is both an item and a vehicle entity.\n                      image: \"https://minecraft-api.vercel.app/images/items/acacia_boat.png\"\n                      stackSize: 1,\n                      renewable: true\n                    - name: Acacia Button\n                      namespacedId: acacia_button\n                      description: A button is a non-solid block that can provide temporary redstone power.\n                      image: \"https://minecraft-api.vercel.app/images/items/acacia_button.png\"\n                      stackSize: 64,\n                      renewable: true\n                Example 2:\n                  value:\n                    - name: Fishing Rod\n                      description: A fishing rod is a tool used primarily for fishing.\n                      image: \"https://minecraft-api.vercel.app/images/items/fishing_rod.png\"\n                    - name: Fletching Table\n                      description: A fletching table is a fletcher's job site block that can generate naturally in villages.\n                      image: \"https://minecraft-api.vercel.app/images/items/fletching_table.png\"\n                    - name: Flint\n                      description: Flint is a mineral obtained from gravel.\n                      image: \"https://minecraft-api.vercel.app/images/items/flint.png\"\n        \"400\":\n          description: Bad Request - sent when you pass the `page` parameter but not the `limit` parameter.\n        \"500\":\n          description: \"Internal Server Error - usually sent when you pass invalid fields for the `sort` or `fields` parameters, but it could also indicate a different server error as well.\"\n  /blocks:\n    get:\n      summary: Get Blocks\n      tags:\n        - Endpoints\n      responses:\n        \"200\":\n          description: OK - sent when the request was processed successfully. The body will contain the array of blocks.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                      description: The name of the block.\n                    namespacedId:\n                      type: string\n                      description: \"The namespaced ID of this block, which is used to identify the block in game when using commands.\"\n                    description:\n                      type: string\n                      description: A short description of the block and its uses. Certain blocks that fall under a common category share a single description.\n                    image:\n                      type: string\n                      description: \"A link to an image of the block. Image sizes can vary between blocks, but most are 200x200 or smaller. Not all blocks have an image (e.g. Air).\"\n                    transparent:\n                      type: boolean\n                      description: Whether this block is considered transparent by the game (does not necessarily correspond to the block being see-through).\n                    luminance:\n                      type: number\n                      description: 'The amount of light that this block gives off. Higher values mean brighter blocks. Some blocks only give off light in certain situations; in those cases, the `luminance` represents the amount of light the block gives off when it is actually \"activated\".'\n                    blastResistance:\n                      type: number\n                      description: A measure of how well this block withstands explosions. Higher values mean that it takes a stronger explosion to destroy the block.\n                    flammable:\n                      type: boolean\n                      description: Whether or not this block can catch fire from nearby blocks. Flammable blocks can also be destroyed after they burn for some time.\n                    tool:\n                      type: string\n                      description: The tool which breaks this block the fastest.\n              examples:\n                Example 1:\n                  value:\n                    - name: Anvil\n                      namespacedId: anvil\n                      description: \"An anvil is a block that allows players to repair items, rename items, and combine enchantments.\"\n                      image: \"https://minecraft-api.vercel.app/images/blocks/anvil.png\"\n                      item: \"Anvil\"\n                      transparent: true\n                      luminance: 0\n                      blastResistance: 1200\n                      flammable: false\n                      tool: Pickaxe\n                    - name: Attached Melon Stem\n                      namespacedId: attached_melon_stem\n                      description: Melon seeds are an item that can be used to grow melon plants.\n                      image: \"https://minecraft-api.vercel.app/images/blocks/attached_melon_stem.png\"\n                      item: null\n                      transparent: true\n                      luminance: 0\n                      blastResistance: 2\n                      flammable: false\n                      tool: Axe\n                Example 2:\n                  value:\n                    - name: Tall Grass\n                      image: \"https://minecraft-api.vercel.app/images/blocks/tall_grass.png\"\n                      luminance: 0\n                      blastResistance: 0\n                    - name: Tall Seagrass\n                      image: \"https://minecraft-api.vercel.app/images/blocks/tall_seagrass.png\"\n                      luminance: 0\n                      blastResistance: 0\n                    - name: Terracotta\n                      image: \"https://minecraft-api.vercel.app/images/blocks/terracotta.png\"\n                      luminance: 0\n                      blastResistance: 4.2\n                    - name: Torch\n                      image: \"https://minecraft-api.vercel.app/images/blocks/torch.png\"\n                      luminance: 14\n                      blastResistance: 0\n        \"400\":\n          description: \"Bad Request - sent when an invalid string is passed for the `color` parameter (it must be a hexadecimal color of the form #FFFFFF).\"\n        \"500\":\n          description: \"Internal Server Error - usually sent when you pass invalid fields for the `sort` or `fields` parameters, but it could also indicate a different server error as well.\"\n      operationId: get-blocks\n      description: \"Get an array of Minecraft blocks, including those which can't normally be obtained as items in the inventory.\"\n      parameters:\n        - schema:\n            type: number\n            minimum: \"\"\n            maximum: \"\"\n          in: query\n          name: limit\n          description: \"The maximum number of blocks to return from this query. If excluded, the query returns all blocks.\"\n          style: \"\"\n        - schema:\n            type: number\n            default: 1\n          in: query\n          name: page\n          description: Allows for pagination of this query. You must pass the `limit` parameter if using this parameter as well. You can think of this as dividing the blocks into pages of length `limit` and returning the `page`th one.\n        - schema:\n            type: string\n            default: name\n            enum:\n              - name\n              - namespacedId\n              - description\n              - image\n              - transparent\n              - luminance\n              - blastResistance\n              - flammable\n              - tool\n          in: query\n          name: sort\n          description: Sorts the blocks by this field.\n        - schema:\n            type: string\n            enum:\n              - asc\n              - desc\n            default: asc\n          in: query\n          name: order\n          description: 'Whether to sort the blocks ascending or descending using the `sort` parameter. `\"asc\"` sorts ascending, while `\"desc\"` sorts descending.'\n        - schema:\n            default: \"*\"\n            example:\n              - name\n              - image\n              - blastResistance\n            uniqueItems: false\n          in: query\n          name: fields\n          description: \"The fields of the block object to include in the response. Passing an array of strings results in all of those fields being included, while passing only a string results in only that single field being included. If you don't pass any value for this parameter, then all fields are included.\"\n        - schema:\n            type: string\n            example: \"#BFA32C\"\n            pattern: \"#^#[0-9A-F]{6}$\"\n          in: query\n          name: color\n          description: Filters the returned blocks by only including those within a certain threshold (`colorVariance`) of `color`. Should be a valid hexadecimal representation of a color.\n        - schema:\n            type: number\n            minimum: 0\n            maximum: 255\n            default: 20\n          in: query\n          name: colorVariance\n          description: 'Changes the maximum variance between a block''s color and the `color` parameter. Only has an affect when the `color` parameter is also passed. Higher values result in blocks which are a \"farther away\" color being included, while lower values restrict the blocks to only those which are close to `color`.'\n        - schema:\n            type: number\n            default: 0.1\n            minimum: 0\n            maximum: 1\n          in: query\n          name: colorAmount\n          description: \"Changes the minimum portion of a block which has to be a matching color defined by `color` and `colorVariance`. For example, passing an orange color for `color` and a high value for `colorAmount` may exclude Hay Bale from the result because only a small portion of the Hay Bale is orange.\"\n        - schema:\n            type: boolean\n          in: query\n          name: transparent\n          description: Filters the blocks by including only those with a certain value for the `transparent` field.\n        - schema:\n            type: number\n          in: query\n          name: luminance\n          description: Filters the blocks by including only those with a certain value for the `luminance` field.\n        - schema:\n            type: number\n          in: query\n          name: minLuminance\n          description: Filters the blocks by including only those with a value for the `luminance` field that is greater than `minLuminance`.\n        - schema:\n            type: number\n          in: query\n          name: maxLuminance\n          description: Filters the blocks by including only those with a value for the `luminance` field that is less than `maxLuminance`.\n        - schema:\n            type: number\n          in: query\n          name: blastResistance\n          description: Filters the blocks by including only those with a certain value for the `blastResistance` field.\n        - schema:\n            type: number\n          in: query\n          name: minBlastResistance\n          description: Filters the blocks by including only those with a value for the `blastResistance` field that is greater than `minBlastResistance`.\n        - schema:\n            type: number\n          in: query\n          name: maxBlastResistance\n          description: Filters the blocks by including only those with a value for the `blastResistance` field that is less than `maxBlastResistance`.\n        - schema:\n            type: boolean\n          in: query\n          name: flammable\n          description: Filters the blocks by including only those with a certain value for the `flammable` field.\n        - schema:\n            type: string\n            enum:\n              - Pickaxe\n              - Hoe\n              - Axe\n              - Shovel\n              - Sword\n              - Shears\n          in: query\n          name: tool\n          description: Filters the blocks by including only those with a certain value for the `tool` field.\n      requestBody: {}\n  /crafting-recipes:\n    get:\n      summary: Get Crafting Recipes\n      tags:\n        - Endpoints\n      responses:\n        \"200\":\n          description: OK - sent when the request was processed successfully. The body will contain the array of crafting recipes.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    item:\n                      type: object\n                      description: \"The name of the item which this recipe produces.\"\n                    quantity:\n                      type: number\n                      description: The number of items which are produced from this recipe.\n                    shapeless:\n                      type: boolean\n                      description: \"Whether or not this recipe is shapeless, meaning that its ingredients can be placed in any order in the crafting grid.\"\n                    recipe:\n                      type:\n                        - array\n                      description: \"An array of eight elements each representing one slot of the crafting grid, from left to right and top to bottom (like a book).\"\n                      items:\n                        oneOf:\n                          - type: \"null\"\n                            description: A null value represents no item in that slot of the crafting grid.\n                          - type: string\n                            description: \"The `name` of an item which needs to be in that slot.\"\n                          - type: array\n                            description: \"In certain recipes, you can use substitute different ingredients in a slot while still crafting the same item. For example, to craft a Note Block, you can use any wood plank type in each slot around the Redstone Dust, and you will still get a Note Block. In cases such as these, an array is used in place of an item string in one of the crafting grid slots. The array represents all of the possible ingredients which can be substituted for each other in that slot.\"\n                            items:\n                              oneOf:\n                                - type: \"null\"\n                                  description: A `null` value represents no item in that slot of the crafting grid.\n                                - type: string\n                                  description: \"The `name` of an item which needs to be in that slot.\"\n              examples:\n                Example 1:\n                  value:\n                    - item: Bone Meal\n                      quantity: 9\n                      shapeless: false\n                      recipe:\n                        - null\n                        - null\n                        - null\n                        - null\n                        - Bone Block\n                        - null\n                        - null\n                        - null\n                        - null\n                    - item: Book\n                      quantity: 1\n                      shapeless: true\n                      recipe:\n                        - null\n                        - null\n                        - null\n                        - Paper\n                        - Paper\n                        - null\n                        - Paper\n                        - Leather\n                        - null\n                    - item: Book and Quill\n                      quantity: 1\n                      shapeless: true\n                      recipe:\n                        - null\n                        - null\n                        - null\n                        - Book\n                        - Ink Sac\n                        - null\n                        - null\n                        - Feather\n                        - null\n                    - item: Bookshelf\n                      quantity: 1\n                      shapeless: false\n                      recipe:\n                        - - Oak Planks\n                          - Spruce Planks\n                          - Birch Planks\n                          - Jungle Planks\n                          - Acacia Planks\n                          - Dark Oak Planks\n                        - - Oak Planks\n                          - Spruce Planks\n                          - Birch Planks\n                          - Jungle Planks\n                          - Acacia Planks\n                          - Dark Oak Planks\n                        - - Oak Planks\n                          - Spruce Planks\n                          - Birch Planks\n                          - Jungle Planks\n                          - Acacia Planks\n                          - Dark Oak Planks\n                        - Book\n                        - Book\n                        - Book\n                        - - Oak Planks\n                          - Spruce Planks\n                          - Birch Planks\n                          - Jungle Planks\n                          - Acacia Planks\n                          - Dark Oak Planks\n                        - - Oak Planks\n                          - Spruce Planks\n                          - Birch Planks\n                          - Jungle Planks\n                          - Acacia Planks\n                          - Dark Oak Planks\n                        - - Oak Planks\n                          - Spruce Planks\n                          - Birch Planks\n                          - Jungle Planks\n                          - Acacia Planks\n                          - Dark Oak Planks\n                'Example 2 - item = \"Composter\"':\n                  value:\n                    - item: Composter\n                      quantity: 1\n                      shapeless: false\n                      recipe:\n                        - Oak Slab\n                        - null\n                        - Oak Slab\n                        - Oak Slab\n                        - null\n                        - Oak Slab\n                        - Oak Slab\n                        - Oak Slab\n                        - Oak Slab\n                    - item: Composter\n                      quantity: 1\n                      shapeless: false\n                      recipe:\n                        - Spruce Slab\n                        - null\n                        - Spruce Slab\n                        - Spruce Slab\n                        - null\n                        - Spruce Slab\n                        - Spruce Slab\n                        - Spruce Slab\n                        - Spruce Slab\n                    - item: Composter\n                      quantity: 1\n                      shapeless: false\n                      recipe:\n                        - Acacia Slab\n                        - null\n                        - Acacia Slab\n                        - Acacia Slab\n                        - null\n                        - Acacia Slab\n                        - Acacia Slab\n                        - Acacia Slab\n                        - Acacia Slab\n                    - item: Composter\n                      quantity: 1\n                      shapeless: false\n                      recipe:\n                        - Dark Oak Slab\n                        - null\n                        - Dark Oak Slab\n                        - Dark Oak Slab\n                        - null\n                        - Dark Oak Slab\n                        - Dark Oak Slab\n                        - Dark Oak Slab\n                        - Dark Oak Slab\n                    - item: Composter\n                      quantity: 1\n                      shapeless: false\n                      recipe:\n                        - Birch Slab\n                        - null\n                        - Birch Slab\n                        - Birch Slab\n                        - null\n                        - Birch Slab\n                        - Birch Slab\n                        - Birch Slab\n                        - Birch Slab\n                    - item: Composter\n                      quantity: 1\n                      shapeless: false\n                      recipe:\n                        - Jungle Slab\n                        - null\n                        - Jungle Slab\n                        - Jungle Slab\n                        - null\n                        - Jungle Slab\n                        - Jungle Slab\n                        - Jungle Slab\n                        - Jungle Slab\n                'Example 5 - item = \"Arrow\", fields = [\"item\", \"recipe\"]':\n                  value:\n                    - item: Arrow\n                      recipe:\n                        - null\n                        - Flint\n                        - null\n                        - null\n                        - Stick\n                        - null\n                        - null\n                        - Feather\n                        - null\n        \"404\":\n          description: Not Found - sent when there is no item corresponding to the `item` query parameter.\n        \"500\":\n          description: \"Internal Server Error - usually sent when you pass invalid fields for the `fields` or `itemFields` parameters, but it could also indicate a different server error as well.\"\n      operationId: get-crafting-recipes\n      description: Get an array of crafting recipes for Minecraft items.\n      parameters:\n        - schema:\n            type: number\n          in: query\n          name: limit\n          description: \"The maximum number of crafting recipes to return from this query. If excluded, the query returns all crafting recipes.\"\n          style: \"\"\n        - schema:\n            type: number\n            default: 1\n          in: query\n          name: page\n          description: Allows for pagination of this query. You must pass the `limit` parameter if using this parameter as well. You can think of this as dividing the crafting recipes into pages of length `limit` and returning the `page`th one.\n        - schema:\n            type: string\n            default: item\n            enum:\n              - item\n              - quantity\n              - shapeless\n          in: query\n          name: sort\n          description: Sorts the crafting recipes by this field.\n        - schema:\n            type: string\n            enum:\n              - asc\n              - desc\n            default: asc\n          in: query\n          name: order\n          description: 'Whether to sort the crafting recipes ascending or descending using the `sort` parameter. `\"asc\"` sorts ascending, while `\"desc\"` sorts descending.'\n        - schema:\n            default: \"*\"\n            example:\n              - item\n              - shapeless\n              - recipe\n            uniqueItems: false\n          in: query\n          name: fields\n          description: \"The fields of the crafting recipe object to include in the response. Passing an array of strings results in all of those fields being included, while passing only a string results in only that single field being included. If you don't pass any value for this parameter, then all fields are included.\"\n        - schema:\n            type: string\n          in: query\n          name: item\n          description: \"Filters the crafting recipes by only returning the recipes which produce `item`.\"\n        - schema:\n            type: string\n          in: query\n          name: uses\n          description: \"Filters the crafting recipes by only including recipes that uses a certain item as an ingredient.\"\ncomponents:\n  schemas: {}\n",
			"canonicalURL": "/github.com/anish-shanbhag/minecraft-api@8d5d95a3dd06e42620e8f540d0084529d6c1ebc9/-/blob/docs/spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/anish-shanbhag/minecraft-api/blob/8d5d95a3dd06e42620e8f540d0084529d6c1ebc9/docs/spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: line 222: cannot unmarshal !!str into *jsonschema.Num"
}