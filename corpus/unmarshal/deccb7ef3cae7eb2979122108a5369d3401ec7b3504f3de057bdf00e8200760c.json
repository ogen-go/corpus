{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/pb33f/libopenapi"
		},
		"file": {
			"name": "burgershop.openapi-modified.yaml",
			"size": 0,
			"path": "test_specs/burgershop.openapi-modified.yaml",
			"byteSize": 18095,
			"content": "openapi: 3.1.0\ninfo:\n  title: Burger Shop\n  description: |\n    The best burger API at princess beef. You can find the testiest burgers in the world\n  termsOfService: https://pb33f.io\n  contact:\n    name: pb33f\n    email: buckaroo@pb33f.io\n    url: https://pb33f.io\n  license:\n    name: pb33f-internal\n    url: https://pb33f.io/made-up\n  version: \"1.2\"\nsecurity:\n  - OAuthScheme:\n      - read:burgers\n      - write:burgers\n      - read:books\ntags:\n  - name: HotDogs\n    description: a new type of burger, its a thin round one in a bun.\n  - name: \"Burgers\"\n    description: All kinds of yummy burgers, the very best in the world.\n    externalDocs:\n      description: \"Find out more\"\n      url: \"https://pb33f.io\"\n    x-internal-ting: somethingSpecial\n    x-internal-tong: 1\n    x-internal-tang: 1.2.3\n    x-internal-tung: true\n    x-internal-arr:\n      - one\n      - two\n    x-internal-arrmap:\n      - what: now\n      - why: that\n    x-something-else:\n      ok:\n        - what: now?\n  - name: \"Dressing\"\n    description: \"Variety of dressings: cheese, veggie, oil and a lot more\"\n    externalDocs:\n      description: \"Find out more information about our products)\"\n      url: \"https://pb33f.io\"\nservers:\n  - url: \"{scheme}://api.pb33f.io\"\n    description: \"this is our main API server, for all fun API things. updated\"\n    variables:\n      scheme:\n        enum: [https]\n        default: https\n        description: this is a server variable for the scheme\n  - url: \"https://{domain}.{host}.com\"\n    description: \"this is our second API server, for all fun API things.\"\n    variables:\n      domain:\n        default: \"api\"\n        description: the default API domain is 'api'\n      host:\n        default: \"pb33f.io\"\n        description: the default host for this API is 'pb33f.io'\npaths:\n  x-milky-milk: milky updated\n  /burgers:\n    x-burger-meta: meaty pop\n    post:\n      operationId: createBurgerChanged\n      tags:\n        - \"Burgers\"\n        - \"HotDogs\"\n      summary:  Create a new burger the changed\n      description: A new burger for our menu\n      requestBody:\n        $ref: '#/components/requestBodies/BurgerRequest'\n      responses:\n        \"200\":\n          headers:\n            UseOil:\n              $ref: '#/components/headers/UseOil'\n          description: A tasty burger for you to eat. update\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Burger'\n              examples:\n                quarterPounder:\n                  $ref: '#/components/examples/QuarterPounder'\n                filetOFish:\n                  summary: a cripsy fish sammich filled with ocean goodness. changed\n                  value:\n                    name: Filet-O-Fish\n                    numPatties: 22\n          links:\n            DuplicateLocateBurger:\n              $ref: '#/components/links/LocateBurger'\n            LocateBurger:\n              $ref: '#/components/links/LocateBurger'\n            AnotherLocateBurger:\n              $ref: '#/components/links/AnotherLocateBurger'\n        \"500\":\n          description: Unexpected error creating a new burger. Sorry.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                unexpectedError:\n                  summary: oh my goodness\n                  value:\n                    message: something went terribly wrong my friend, no new burger for you. mate.\n      security:\n        - OAuthScheme:\n            - read:burgers\n            - write:burgers\n            - read:books\n      servers:\n        - url: https://pb33f.io\n          description: this is an alternative server for this operation.\n        - url: https://pb33f.io/new\n          description: this is an alternative server, copy pasta.\n  /burgers/{burgerId}:\n    get:\n      callbacks:\n        someCallback:\n          $ref: '#/components/callbacks/BurgerCallback'\n        niceCallback:\n          $ref: '#/components/callbacks/BurgerCallback'\n        burgerCallback:\n          $ref: '#/components/callbacks/BurgerCallback'\n      operationId: locateBurger\n      tags:\n        - \"Burgers\"\n      summary: Search a burger by ID - returns the burger with that identifier\n      description: Look up a tasty burger take it and enjoy it\n      parameters:\n        - $ref: '#/components/parameters/BurgerId'\n        - $ref: '#/components/parameters/BurgerHeader'\n      responses:\n        \"200\":\n          description: A tasty burger for you to eat. Wide variety of products to choose from\n          content:\n            application/xml:\n              schema:\n                type: int\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Burger'\n              examples:\n                quarterPounder:\n                  $ref: '#/components/examples/QuarterPounder'\n                filetOFish:\n                  summary: A tasty treat from the sea\n                  value:\n                    name: Filet-O-Fish\n                    numPatties: 2\n          links:\n            ListBurgerDressings:\n              operationId: listBurgerDressingsOhMy\n              parameters:\n                dressingId: 'something here'\n              description: 'Try the ketchup!'\n        \"404\":\n          description: Cannot find your burger. Sorry. We may have sold out of this type\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                notFound:\n                  summary: burger missing\n                  value:\n                    message: can't find a burger with that ID, we may have sold out my friend.\n        \"500\":\n          description: Unexpected error. Sorry.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                unexpectedError:\n                  summary: oh my stars\n                  value:\n                    message: something went terribly wrong my friend, burger location crashed!\n  /burgers/{burgerId}/dressings:\n    get:\n      operationId: listBurgerDressings\n      summary:  Get a list of all dressings available\n      description: Same as the summary, look up a tasty burger, by its ID - the burger identifier\n      parameters:\n        - in: query\n          name: burgerId\n          schema:\n            type: int\n          example: 12345\n          description: the name of the our fantastic burger. You can pick a name from our menu\n          required: true\n      responses:\n        \"200\":\n          $ref: '#/components/schemas/Error'\n        \"404\":\n          description: Cannot find your burger in which to list dressings. Sorry\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: There is no burger here\n        \"500\":\n          description: Unexpected error listing dressings for burger. Sorry friend\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: computer says no dressings for this burger.\n  /dressings/{dressingId}:\n    get:\n      operationId: getDressing\n      tags:\n        - \"Dressing\"\n        - \"Pepsi\"\n      summary:  Get a specific dressing - you can choose the dressing from our menu\n      description: Same as the summary, get a dressing, by its ID\n      parameters:\n        - in: path\n          name: dressingId\n          schema:\n            type: string\n          example: cheesey\n          description: This is the unique identifier for the dressing items.\n          required: true\n      responses:\n        \"201\":\n          description: a dressing again with a different code\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dressing'\n              example:\n                name: Butter Sauce\n        \"200\":\n          description: a dressing\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dressing'\n              example:\n                name: Butter Sauce\n        \"404\":\n          description: Cannot find your dressing, sorry.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: No such dressing as 'Pizza'\n        \"500\":\n          description: Unexpected error getting a dressing. Sorry.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: failed looking up dressing by ID, our server borked.\n  /dressings:\n    get:\n      operationId: getAllDressings\n      tags:\n        - \"Dressing\"\n      summary:  Get all dressings available in our store\n      description: Get all dressings and choose from them\n      responses:\n        \"200\":\n          description: an array of dressings\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Dressing'\n              example:\n                - name: Burger Sauce\n        \"418\":\n          description: I am a teapot.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: It's teapot time.\n        \"500\":\n          description: Something went wrong with getting dressings.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: \"failed looking up all dressings, something went wrong.\"\ncomponents:\n  callbacks:\n    BurgerCallback:\n      x-break-everything: please change me\n      \"{$request.query.queryUrl}\":\n        post:\n          requestBody:\n            description: Callback payload\n            content:\n              'application/json':\n                schema:\n                  $ref: '#/components/schemas/SomePayload'\n          responses:\n            '200':\n              description: callback successfully processes\n  links:\n    LocateBurger:\n      operationId: locateBurgers\n      parameters:\n        burgerId: '$response.body#/id'\n      description: Go and get a tasty burger\n    AnotherLocateBurger:\n      operationId: locateBurgers\n      parameters:\n        burgerId: '$response.body#/id'\n      description: Go and get another really tasty burger\n      server:\n        url: https://pb33f.io\n  headers:\n    UseOil:\n      description: this is a header example for UseOil\n      schema:\n        type: string\n  requestBodies:\n    BurgerRequest:\n      description: Give us the new burger! please!\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Burger'\n          examples:\n            pbjBurger:\n              summary: A horrible, nutty, sticky mess.\n              value:\n                name: Peanut And Jelly\n                numPatties: 3\n            cakeBurger:\n              summary: A sickly, sweet, atrocity\n              value:\n                name: Chocolate Cake Burger\n                numPatties: 5\n  examples:\n    QuarterPounder:\n      summary: A juicy two hander sammich yummy\n      value:\n        name: Quarter Pounder with Cheese\n        numPatties: 1\n    QuarterPounder2:\n      summary: A juicy two hander sammich yummy\n      value:\n        name: Quarter Pounder with Cheese\n        numPatties: 1\n  responses:\n    DressingResponse2:\n      description: all the dressings for a burger.\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Dressing'\n          example:\n            - name: Thousand Island\n  securitySchemes:\n    APIKeyScheme:\n      type: apiKey\n      description: an apiKey security scheme updated\n      name: apiKeyScheme\n      in: query\n    JWTScheme:\n      type: https\n      description: an JWT security scheme\n      name: aJWTThing\n      scheme: bearer\n      bearerFormat: JWT\n    OAuthScheme:\n      type: oauth2\n      description: an oAuth security scheme\n      name: oAuthy\n      flows:\n        implicit:\n          authorizationUrl: https://pb33f.io/oauth\n          scopes:\n            write:burgers: modify and add new burgers\n            read:burgers: read all burgers changed\n        authorizationCode:\n          authorizationUrl: https://pb33f.io/oauth/changed\n          tokenUrl: https://api.pb33f.io/oauth/token\n          scopes:\n            write:burgers: modify burgers and stuff\n            read:burgers: read all the burgers\n  parameters:\n    BurgerHeader:\n      in: header\n      name: burgerHeader\n      schema:\n        properties:\n          burgerTheme:\n            type: string\n            description: something about a theme goes in here? changed\n          burgerTime:\n            type: number\n            description: number of burgers ordered so far this year.\n      example: big-mac\n      description: the name of the burger. use this to order your food\n      required: true\n      content:\n        application/json:\n          example: somethingNice\n          encoding:\n            burgerTheme:\n              contentType: text/plain\n              headers:\n                someHeader:\n                  description: this is a header\n                  schema:\n                    type: string\n          schema:\n            type: object\n            required: [burgerTheme, burgerTime]\n            properties:\n              burgerTheme:\n                type: string\n                description: something about a theme?\n              burgerTime:\n                type: number\n                description: number of burgers ordered this year.\n    BurgerId:\n      in: path\n      name: burgerId\n      schema:\n        type: string\n      example: big-mac\n      description: the name of the burger. use this to order your tasty burger\n      required: true\n    BurgerId2:\n      in: path\n      name: burgerId\n      schema:\n        type: string\n      example: big-mac\n      description: the name of the burger. use this to order your tasty burger\n      required: true\n  schemas:\n    Error:\n      type: object\n      description: Error defining what went wrong when providing a specification. The message should help indicate the issue clearly.\n      properties:\n        message:\n          type: string\n          description: returns the error message if something wrong happens, updated.\n          example: No such burger as 'Big-Whopper'\n    Burger:\n      type: object\n      description: The tastiest food on the planet you would love to eat everyday, yum!\n      required:\n        - name\n        - numPatties\n      properties:\n        name:\n          type: string\n          description: The name of your tasty burger - burger names are listed in our menus\n          example: Big Mac and fries!\n        numPatties:\n          type: integer\n          description: The number of burger patties used\n          example: 2\n        numTomatoes:\n          type: integer\n          description: how many slices of orange goodness would you like?\n          example: 1\n        fries:\n          $ref: '#/components/schemas/Fries'\n    Fries:\n      type: object\n      description: golden slices of happy fun joy\n      required:\n        - potatoShape\n        - favoriteDrink\n        - seasoning\n      properties:\n        seasoning:\n          type: array\n          description: herbs and spices for your golden joy and fun\n          items:\n            type: string\n            description: type of herb or spice used to liven up the yummy things\n            example: salt\n        potatoShape:\n          type: string\n          description: what type of potato shape? wedges? shoestring?\n          example: Crispy Shoestring\n        favoriteDrink:\n          $ref: '#/components/schemas/Drink'\n    Dressing:\n      type: object\n      description: This is the object that contains the information about the content of the dressing\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          description: The name of your dressing you can pick up from the menu\n          example: Cheese\n      additionalProperties:\n        type: object\n        description: something in here. please\n    Drink:\n      type: object\n      description: a frosty cold beverage can be coke or sprite\n      required:\n        - size\n        - drinkType\n      properties:\n        ice:\n          type: boolean\n        drinkType:\n          description: select from coke or sprite\n          enum:\n            - coke\n            - sprite\n        size:\n          type: string\n          description: what size man? S/M/L\n          example: M\n      additionalProperties: true\n      discriminator:\n        propertyName: drinkType\n        mapping:\n          drink: some value\n    SomePayload:\n      type: string\n      description: some kind of payload for something.\n      xml:\n        name: is html programming? yes.\n      externalDocs:\n        url: https://pb33f.io/docs\n      anyOf:\n        - $ref: '#/components/schemas/Drink'\n      allOf:\n        - $ref: '#/components/schemas/Drink'\n      not:\n        type: string\n      items:\n        - $ref: '#/components/schemas/Drink'\n  x-screaming-baby:  very loud\nx-something-something: darkside changed\nexternalDocs:\n  description: \"Find out more information about our products and services\"\n  url: \"https://pb33f.io/new\"\njsonSchemaDialect: https://pb33f.io/schema/new\nwebhooks:\n  someHook:\n    post:\n      requestBody:\n        description: Information about a new burger but updated\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Burger\"\n      responses:\n        \"200\":\n          description: the hook is good! you have a new burger.\n        \"201\":\n          description: a new thing",
			"canonicalURL": "/github.com/pb33f/libopenapi@07a11be5a3651b840ff34181bec581ef4edb3d85/-/blob/test_specs/burgershop.openapi-modified.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/pb33f/libopenapi/blob/07a11be5a3651b840ff34181bec581ef4edb3d85/test_specs/burgershop.openapi-modified.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 64: cannot unmarshal !!str `milky u...` into ogen.PathItem; yaml: line 126: cannot unmarshal !!str `#/compo...` into ogen.PathItem; yaml: line 128: cannot unmarshal !!str `#/compo...` into ogen.PathItem; yaml: line 130: cannot unmarshal !!str `#/compo...` into ogen.PathItem; yaml: line 303: cannot unmarshal !!str `please ...` into ogen.PathItem; yaml: line 554: cannot unmarshal !!seq into ogen.Schema"
}