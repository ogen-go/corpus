{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/dropbox/openapi.yaml",
			"byteSize": 54438,
			"content": "openapi: 3.0.1\ninfo:\n  title: Dropbox Client\n  version: v1.0\n  description: \u003e\n    This is a generated connector for [Dropbox API v2](https://www.dropbox.com/developers/documentation/http/overview) OpenAPI specification. \n\n    Dropbox is a modern workspace designed to reduce busywork-so you can focus on the things that matter. Sign in and put your creative energy to work.  \n  x-ballerina-init-description: \n    The connector initialization requires setting the API credentials.\n\n    Create an [Dropbox account](https://www.dropbox.com/) and obtain tokens by following [this guide](https://www.dropbox.com/developers/documentation/http/documentation).\n  x-ballerina-display:\n    label: Dropbox\n    iconPath: \"icon.png\" \ntags: []\npaths:\n  /files/copy_v2:\n    post:\n      tags:\n        - \"Files\"\n      summary: Copy a file or folder to a different location in the user's Dropbox. \n      description: |\n        Copy a file or folder to a different location in the user's Dropbox.\n\n        If the source path is a folder all its contents will be copied.\n        scope**: files.content.write\n      operationId: Copy File or Folder\n      parameters:\n        - in: header\n          description: The specified `team_member_id` which refer to a team administrator.\n          name: Dropbox-API-Select-Admin\n          schema:\n            type: string\n          required: false\n      requestBody:\n        description: Arguments for relocation.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RelocationArg'\n        required: false\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RelocationResult'\n\n  /files/create_folder_v2:\n    post:\n      tags:\n        - \"Files\"\n      summary: Create a folder at a given path.\n      description: Create a folder at a given path.\n      operationId: Create Folder\n      parameters:\n        - in: header\n          description: The specified `team_member_id` which refer to a team administrator.\n          name: Dropbox-API-Select-Admin\n          schema:\n            type: string\n          required: false\n      requestBody:\n        description: Arguments for folder creation.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateFolderArg'\n        required: false\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateFolderResult'\n  \n  /files/delete_v2:\n    post:\n      tags:\n        - \"Files\"\n      summary: Delete the file or folder at a given path.\n      description: |\n        Delete the file or folder at a given path.\n\n        If the path is a folder, all its contents will be deleted too.\n        A successful response indicates that the file or folder was deleted. \n        The returned metadata will be the corresponding :type:`FileMetadata` or :type:`FolderMetadata` for the item at \n        time of deletion, and not a :type:`DeletedMetadata` object.\n      operationId: Delete File or Folder\n      parameters:\n        - in: header\n          description: The specified `team_member_id` which refer to a team administrator.\n          name: Dropbox-API-Select-Admin\n          schema:\n            type: string\n          required: false\n      requestBody:\n        description: Arguments for deletion.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeleteArg'\n        required: false\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteResult'\n\n  /files/move_v2:\n    post:\n      tags:\n        - \"Files\"\n      summary: Move a file or folder to a different location in the user's Dropbox.\n      description: |\n        Move a file or folder to a different location in the user's Dropbox.\n\n        If the source path is a folder all its contents will be moved.\n      operationId: Move File or Folder\n      parameters:\n        - in: header\n          description: The specified `team_member_id` which refer to a team administrator.\n          name: Dropbox-API-Select-Admin\n          schema:\n            type: string\n          required: false\n      requestBody:\n        description: Arguments for move.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RelocationArg'\n        required: false\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RelocationResult'\n\n  /files/restore:\n    post:\n      tags:\n        - \"Files\"\n      summary: Restore a file to a specific revision.\n      description: Restore a file to a specific revision.\n      operationId: Restore Files\n      parameters:\n        - in: header\n          description: The specified `team_member_id` which refer to a team administrator.\n          name: Dropbox-API-Select-Admin\n          schema:\n            type: string\n          required: false\n      requestBody:\n        description: Arguments for restore.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RestoreArg'\n        required: false\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileMetadata'\n\n  /sharing/create_shared_link_with_settings:\n    post:\n      tags:\n        - \"Sharing\"\n      summary: Create Shared Link With Settings\n      description: |\n        Create a shared link with custom settings. \n          \n        If no settings are given then the default visibility is :field:`RequestedVisibility.public` (The resolved\n        visibility, though, may depend on other aspects such as team and shared folder settings).\n      operationId: Create Shared Link With Settings\n      parameters:\n        - in: header\n          description: The specified `team_member_id` which refer to a team administrator.\n          name: Dropbox-API-Select-Admin\n          schema:\n            type: string\n          required: false\n      requestBody:\n        description: Arguments for create a Dropbox link.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateSharedLinkWithSettingsArg'\n        required: false\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SharedLinkMetadata'\n\n  /files/get_temporary_link:\n    post:\n      tags:\n        - \"Files\"\n      summary: Get a temporary link to stream content of a file.\n      description: Get a temporary link to stream content of a file. This link will\n        expire in four hours and afterwards you will get 410 Gone. Content-Type of\n        the link is determined automatically by the file's mime type.\n      operationId: Get Temporary Link\n      requestBody:\n        description: Arguments to get temporary link.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GetTemporaryLinkArg'\n        required: false\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTemporaryLinkResult'\n\n  /files/get_metadata:\n    post:\n      tags:\n        - \"Files\"\n      summary: Returns the metadata for a file or folder.\n      description: |\n        Returns the metadata for a file or folder.\n        **Note:** Metadata for the root folder is unsupported.\n      operationId: Get File Or Folder Metadata\n      parameters:\n        - in: header\n          description: The specified `team_member_id`.\n          name: Dropbox-API-Select-User\n          schema:\n            type: string\n          required: false\n      requestBody:\n        description: Arguments to get metadata.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GetMetadataArg'\n        required: false\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileMetadata' \n\n  /files/list_revisions:\n    post:\n      tags:\n        - \"Files\"\n      summary: Returns revisions for files based on a file path or a file id.\n      description: |\n        Returns revisions for files based on a file path or a file id. \n        \n        The file path or file id is identified from the latest file entry at the given file path or id. \n        This end point allows your app to query either by file path or file id by setting the mode parameter appropriately.\n        In the ListRevisionsMode.path (default) mode, all revisions at the same file path as the latest file entry are returned. \n        If revisions with the same file id are desired, then mode must be set to ListRevisionsMode.id. \n        The ListRevisionsMode.id mode is useful to retrieve revisions for a given file across moves or renames. \n      operationId: List Revisions\n      parameters:\n        - in: header\n          description: The specified `team_member_id`.\n          name: Dropbox-API-Select-User\n          schema:\n            type: string\n          required: false\n      requestBody:\n        description: Arguments to list revisions.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ListRevisionsArg'\n        required: false\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListRevisionsResult'\n\n  /files/search_v2:\n    post:\n      tags:\n        - \"Files\"\n      summary: Searches for files and folders.\n      description: |\n        Searches for files and folders.\n\n        **Note:**  `search:2` along with `search/continue:2` can only be used to retrieve a maximum of 10,000 matches.\n        Recent changes may not immediately be reflected in search results due to a short delay in indexing. \n        Duplicate results may be returned across pages. Some results may not be returned.      \n      operationId: Search Files\n      requestBody:\n        description: Arguments to search.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchArg'\n        required: false\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResult'\n\n  # /files/upload:\n  #   post:\n  #     tags:\n  #       - \"Files\"\n  #     summary: Create a new file with the contents provided in the request.\n  #     description: |\n  #       Create a new file with the contents provided in the request.\n\n  #       **Note:** that this endpoint is part of the properties API alpha and is slightly different from :route:`upload`.\n  #       Do not use this to upload a file larger than 150 MB. Instead, create an upload session with :route:`upload_session/start`.\n  #     operationId: Upload Files\n  #     parameters:\n  #       - in: header\n  #         description: The specified `team_member_id` which refer to a team administrator.\n  #         name: Dropbox-API-Select-Admin\n  #         schema:\n  #           type: string\n  #         required: false\n  #       - in: query\n  #         description: The content upload arguments.\n  #         name: arg\n  #         schema:\n  #           $ref: '#/components/schemas/CommitInfoWithProperties'\n  #         required: true\n  #     requestBody:\n  #       description: Commit information with properties.\n  #       content:\n  #         application/octet-stream:\n  #           schema:\n  #             type: string\n  #             format: binary\n  #     responses:\n  #       200:\n  #         description: Success\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/FileMetadata'\n\n  /files/download:\n    post:\n      tags:\n        - \"Files\"\n      summary: Download a file from a user's Dropbox.\n      description: Download a file from a user's Dropbox.\n      operationId: Download Files\n      parameters:\n        - in: header\n          description: The specified `team_member_id`.\n          name: Dropbox-API-Select-User\n          schema:\n            type: string\n          required: false\n        - in: header\n          description: Download arguments.\n          name: Dropbox-API-Arg\n          explode: false\n          schema:\n            type: object\n            $ref: '#/components/schemas/DownloadArg'\n          required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileMetadata'\n\ncomponents:\n  schemas:\n    CreateSharedLinkWithSettingsArg:\n      type: object\n      properties:\n        path:\n          type: string\n          description: The path to be shared by the shared link.\n        settings:\n          $ref: '#/components/schemas/SharedLinkSettings'\n      description: Shared links with errors arguments.\n\n    CreateFolderArg:\n      type: object\n      properties:\n        path:\n          type: string\n          description: Path in the user's Dropbox to create.\n        autorename:\n          type: boolean\n          description: If there's a conflict, have the Dropbox server try to autorename the folder to avoid the conflict.\n      description: Arguments to create a folder.\n    CreateFolderResult:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/FolderMetadata'\n      description: Metadata of the created folder.\n\n    CommitInfoWithProperties:\n      type: object\n      properties:\n        autorename:\n          type: boolean\n          description: |\n              If there's a conflict, as determined by mode, have the Dropbox server try to autorename the file to avoid conflict. \n              The default for this field is False.\n        mute:\n          type: boolean\n          description: |\n            If true, this tells the clients that this modification shouldn't result in a user notification.\n\n            Normally, users are made aware of any file modifications in their Dropbox account via notifications in the client software. \n            The default for this field is False. \n        client_modified:\n          type: string\n          description: |\n            The value to store as the client_modified timestamp. \n          \n            Dropbox automatically records the time at which the file was written to the Dropbox servers. \n            It can also record an additional timestamp, provided by Dropbox desktop clients, mobile clients, and API \n            apps of when the file was actually created or modified. This field is optional. \n        mode:\n          $ref: '#/components/schemas/WriteMode'\n        path:\n          type: string\n          description: Path in the user's Dropbox to save the file.\n        property_groups:\n          type: array\n          description: List of custom properties to add to file.\n          items:\n            $ref: '#/components/schemas/PropertyGroup'\n        strict_conflict:\n          type: boolean\n          description: |\n            Be more strict about how each WriteMode detects conflict. \n            \n            For example, always return a conflict error when mode = WriteMode.update and the given \"rev\" doesn't match the \n            existing file's \"rev\", even if the existing file has been deleted. This also forces a conflict even when the \n            target path refers to a file with identical contents. The default for this field is False. \n      description: Commit information.\n    DeleteArg:\n      type: object\n      properties:\n        path:\n          type: string\n          description: Path in the user's Dropbox to delete.\n        parent_rev:\n          type: string\n          description: |\n            Perform delete if given \"rev\" matches the existing file's latest \"rev\". This field is optional. \n          \n            This field does not support deleting a folder. \n      description: Delete arguments.\n\n    DeletedMetadata:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The last component of the path (including extension). This never contains a slash.\n        path_lower:\n          type: string\n          description: | \n            The lowercased full path in the user's Dropbox.\n\n            This always starts with a slash. \n            This field will be null if the file or folder is not mounted. This field is optional. \n        path_display:\n          type: string\n          description: |\n            The cased path to be used for display purposes only. This field is optional. \n\n            In rare instances the casing will not correctly match the user's filesystem, but this behavior will match \n            the path provided in the Core API v1, and at least the last path component will have the correct casing. \n            Changes to only the casing of paths won't be returned by list_folder/continue. This field will be null if \n            the file or folder is not mounted. \n        id:\n          type: string\n          description: A unique identifier for the file or folder.      \n      description: Indicates that there used to be a file or folder at this path, but it no longer exists.\n\n    DeleteResult:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/DeletedMetadata'\n      description: Delete result.\n    Dimensions:\n      type: object\n      properties:\n        width:\n          type: integer\n          description: Width of the photo/video.\n        height:\n          type: integer\n          description: Height of the photo/video.\n      description: Dimensions for a photo or video.\n    ExportMetadata:\n      type: object\n      properties:\n        export_as:\n          type: string\n          description: Format to which the file can be exported to. This field is optional\n        export_options:\n          type: array\n          description: |\n            Additional formats to which the file can be exported. This field is optional. \n          \n            These values can be specified as the export_format in /files/export. \n          items:\n            type: string\n      description: Export information for a file.\n\n    DownloadArg:\n      type: object\n      properties:\n        path:\n          type: string\n          description: The path of the file to download.\n      description: Download arguments.\n\n    FileMetadata:\n      type: object\n      properties:\n        name:\n          type: string\n          description: |\n            The last component of the path (including extension). \n\n            This never contains a slash.\n        property_groups:\n          type: array\n          description: Additional information if the file has custom properties with the property template specified.\n          items:\n            $ref: '#/components/schemas/PropertyGroup'\n        rev:\n          type: string\n          description: |\n            A unique identifier for the current revision of a file. \n\n            This field is the same rev as elsewhere in the API and can be used to detect changes and avoid conflicts.\n        client_modified:\n          type: string\n          description: |\n            For files, this is the modification time set by the desktop client when the file was added to Dropbox. \n\n            Since this time is not verified (the Dropbox server stores whatever the desktop client sends up), this\n            should only be used for display purposes (such as sorting) and not, for\n            example, to determine if a file has changed or not.\n        symlink_info:\n          $ref: '#/components/schemas/SymlinkInfo'\n        path_display:\n          type: string\n          description: |\n            The cased path to be used for display purposes only. \n\n            In rare instances the casing will not correctly match the user's filesystem, but this behavior will match \n            the path provided in the Core API v1, and at least the last path component will have the correct casing. \n            Changes to only the casing of paths won't be returned by :route:`list_folder/continue`.\n            This field will be null if the file or folder is not mounted.\n        has_explicit_shared_members:\n          type: boolean\n          description: |\n            This flag will only be present if include_has_explicit_shared_members  is true in :route:`list_folder` or :route:`get_metadata`. \n\n            If this  flag is present, it will be true if this file has any explicit shared  members. This is different \n            from sharing_info in that this could be true  in the case where a file has explicit members but is not \n            contained within a shared folder.\n        path_lower:\n          type: string\n          description: |\n            The lowercased full path in the user's Dropbox.\n\n            This always starts with a slash. This field will be null if the file or folder is not mounted.\n        server_modified:\n          type: string\n          description: The last time the file was modified on Dropbox.\n        sharing_info:\n          $ref: '#/components/schemas/FileSharingInfo'\n        media_info:\n          $ref: '#/components/schemas/MediaInfo'\n        content_hash:\n          type: string\n          description: |\n            A hash of the file content. This field can be used to verify data integrity. \n\n            For more information see our :link:`Content hash /developers/reference/content-hash` page.\n        id:\n          type: string\n          description: A unique identifier for the file.\n        size:\n          type: integer\n          description: The file size in bytes.\n        is_downloadable:\n          type: boolean\n          description: |\n            If true, file can be downloaded directly; else the file must be exported.\n\n            The default for this field is `true`\n        export_info:\n            $ref: '#/components/schemas/ExportMetadata'\n        file_lock_info:\n            $ref: '#/components/schemas/FileLockMetadata'\n      description: Metadata for a file.\n\n    FileLinkMetadata:\n      allOf:\n        - $ref: '#/components/schemas/FolderLinkMetadata'\n        - type: object\n          properties:\n            client_modified:\n              type: string\n              description: |\n                The modification time set by the desktop client when the file was added to Dropbox. \n              \n                Since this time is not verified (the Dropbox server stores whatever the desktop client sends up), \n                this should only be used for display purposes (such as sorting) and not, for example, to determine if a \n                file has changed or not. \n            server_modified:\n              type: string\n              description: The last time the file was modified on Dropbox. \n            rev:\n              type: string\n              description: A unique identifier for the current revision of a file. This field is the same rev as elsewhere \n                in the API and can be used to detect changes and avoid conflicts.\n            size:\n              type: integer\n              description: The file size in bytes. \n      description: File link metadata.\n\n    FileLockMetadata:\n      type: object\n      properties:\n        is_lockholder: \n          type: boolean\n          description: True if caller holds the file lock. This field is optional.\n        lockholder_name:\n          type: string\n          description: The display name of the lock holder. This field is optional.\n        lockholder_account_id:\n          type: string\n          description:  The account ID of the lock holder if known. This field is optional. \n        created:\n          type: string\n          description: The timestamp of the lock was created. This field is optional. \n      description: If present, the metadata associated with the file's current lock. This field is optional.\n\n    FileSharingInfo:\n      type: object\n      properties:\n        read_only:\n          type: boolean\n          description: True if the file or folder is inside a read-only shared folder.\n        parent_shared_folder_id:\n          type: string\n          description: ID of shared folder that holds this file.\n        modified_by:\n          type: string\n          description: |\n            The last user who modified the file.\n\n            This field will be null if the user's account has been deleted.\n      description: Sharing info for a file which is contained by a shared folder.\n\n    FileStatus:\n      type: string\n      description: Restricts search to the given file status. The default for this union is active.\n      enum:\n        - active\n        - deleted\n\n    FileCategory:\n      type: string\n      description: Restricts search to only the file categories specified. Only supported for active file search.\n      enum:\n        - image\n        - document\n        - pdf\n        - spreadsheet\n        - presentation\n        - audio\n        - video\n        - folder\n        - paper\n        - others\n\n    FolderLinkMetadata:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The linked file name (including extension). This never contains\n            a slash.\n        url:\n          type: string\n          description: URL of the shared link.\n        expires:\n          type: string\n          description: Expiration time, if set. By default the link won't expire. This field is optional. \n        path_lower:\n          type: string\n          description: |\n            The lowercased full path in the user's Dropbox. This always starts with a slash. This field is optional. \n          \n            This field will only be present only if the linked file is in the authenticated user's dropbox. \n        content_owner_team_info:\n          $ref: '#/components/schemas/Team'\n        link_permissions:\n          $ref: '#/components/schemas/LinkPermissions'\n        team_member_info:\n          $ref: '#/components/schemas/TeamMemberInfo'\n        id:\n          type: string\n          description: A unique identifier for the linked file.\n      description: Folder link metadata.\n\n    FolderMetadata:\n      type: object\n      properties:\n        name:\n          type: string\n          description: |\n            The last component of the path (including extension). \n          \n            This never contains a slash.\n        path_display:\n          type: string\n          description: |\n            The cased path to be used for display purposes only. \n\n            In rare instances the casing will not correctly match the user's filesystem, but this behavior will match \n            the path provided in the Core API v1, and at least the last path component will have the correct casing. \n            Changes to only the casing of paths won't be returned by :route:`list_folder/continue`.\n            This field will be null if the file or folder is not mounted.\n        path_lower:\n          type: string\n          description: |\n            The lowercased full path in the user's Dropbox. \n\n            This always starts with a slash. \n            This field will be null if the file or folder is not mounted.\n        sharing_info:\n          $ref: '#/components/schemas/FolderSharingInfo'\n        property_groups:\n          type: array\n          description: |\n            Additional information if the file has custom properties with the property template specified.\n\n            **Note:** Only properties associated with user-owned templates, not team-owned templates, can be attached \n            to folders.\n          items:\n            $ref: '#/components/schemas/PropertyGroup'\n        id:\n          type: string\n          description: A unique identifier for the folder.\n      description: Metadata for a folder.\n\n    FolderSharingInfo:\n      type: object\n      properties:\n        read_only:\n          type: boolean\n          description: True if the file or folder is inside a read-only shared folder.\n        parent_shared_folder_id:\n          type: string\n          description: Set if the folder is contained by a shared folder.\n        traverse_only:\n          type: boolean\n          description: |\n            Specifies that the folder can only be traversed.\n\n            The user can only see a limited subset of the contents of this folder because they don't have read access to \n            this folder. They do, however, have access to some sub folder.\n        shared_folder_id:\n          type: string\n          description: If this folder is a shared folder mount point, the ID of the shared folder mounted at this location.\n        no_access:\n          type: boolean\n          description: Specifies that the folder cannot be accessed by the user.\n      description: Sharing info for a folder which is contained in a shared folder or is a shared folder mount point.\n\n    GetMetadataArg:\n      type: object\n      properties:\n        include_property_groups:\n          $ref: '#/components/schemas/TemplateFilterBase'\n        include_has_explicit_shared_members:\n          type: boolean\n          description: If true, the results will include a flag for each file indicating whether or not that file has \n            any explicit members. The default for this field is False.\n        include_deleted:\n          type: boolean\n          description: If true, DeletedMetadata will be returned for deleted file or folder, otherwise \n            LookupError.not_found will be returned. The default for this field is False.\n        include_media_info:\n          type: boolean\n          description: If true, FileMetadata.media_info is set for photo and video. The default for this field is False. \n        path:\n          type: string\n          description: The path of a file or folder on Dropbox.\n      description: Metadata arguments.\n\n    GetTemporaryLinkArg:\n      type: object\n      properties:\n        path:\n          type: string\n          description: The path to the file you want a temporary link to.\n      description: Themporary link arguments.\n\n    GetTemporaryLinkResult:\n      type: object\n      properties:\n        link:\n          type: string\n          description: The temporary link which can be used to stream content the file.\n        metadata:\n          $ref: '#/components/schemas/FileMetadata'\n      description: Temporary link result. \n\n    GpsCoordinates:\n      type: object\n      properties:\n        latitude:\n          type: integer\n          description: Latitude of the GPS coordinates.\n        longitude:\n          type: integer\n          description: Longitude of the GPS coordinates.\n      description: GPS coordinates for a photo or video.\n\n    LinkAccessLevel:\n      type: object\n      properties:\n        .tag:\n          description: Type of LinkAudience\n          type: string\n          enum:\n            - public\n            - team\n            - no_one\n      description: |\n        The access level that the link will grant to its users. This field is optional.\n        \n        A link can grant additional rights to a user beyond their current access level. For example, if a user was \n        invited as a viewer to a file, and then opens a link with `link_access_level` set to `editor`, then they will \n        gain editor privileges. The `link_access_level` is a property of the link, and does not depend on who is calling \n        this API. In particular, `link_access_level` does not take into account the API caller's current permissions to the content. \n\n    LinkAudience:\n      type: object\n      properties:\n        .tag:\n          description: Type of LinkAudience\n          type: string\n          enum:\n            - public\n            - team\n            - no_one\n      description: The type of audience who can benefit from the access level specified by the `link_access_level` field. This field is optional.\n\n    LinkAudienceDisallowedReason:\n      type: object\n      properties:\n        .tag:\n          description: Type of LinkAudience\n          type: string\n          enum:\n            - delete_and_recreate\n            - restricted_by_shared_folder\n            - restricted_by_team\n            - user_not_on_team\n            - user_account_type\n            - permission_denied\n      description: If allowed is false, this will provide the reason that the user is not permitted to set the visibility to this policy. This field is optional.\n\n    LinkAudienceOption:\n      type: object\n      properties:\n        audience: \n          $ref: '#/components/schemas/LinkAudience'\n        allowed: \n          type: boolean\n          description: Whether the user calling this API can select this audience option\n        disallowed_reason:\n          $ref: '#/components/schemas/LinkAudienceDisallowedReason'\n      description: Link audience options the user might be able to set as the new audience.\n\n    LinkPermissions:\n      type: object\n      properties:\n        requested_visibility:\n          $ref: '#/components/schemas/RequestedVisibility'\n        resolved_visibility:\n          $ref: '#/components/schemas/ResolvedVisibility'\n        can_revoke:\n          type: boolean\n          description: Whether the caller can revoke the shared link.\n        revoke_failure_reason:\n          $ref: '#/components/schemas/SharedLinkAccessFailureReason'\n        visibility_policies:\n          type: array\n          items:\n            $ref: '#/components/schemas/VisibilityPolicy'\n          description: A list of policies that the user might be able to set for the visibility.\n        can_set_expiry:\n          type: boolean\n          description: Whether the user can set the expiry settings of the link. This refers to the ability to create a new expiry and modify an existing expiry. \n        can_remove_expiry:\n          type: boolean\n          description: Whether the user can remove the expiry of the link. \n        allow_download:\n          type: boolean\n          description: Whether the link can be downloaded or not. \n        can_allow_download:\n          type: boolean\n          description: Whether the user can allow downloads via the link. This refers to the ability to remove a no-download restriction on the link.\n        can_disallow_download:\n          type: boolean\n          description: Whether the user can disallow downloads via the link. This refers to the ability to impose a no-download restriction on the link. \n        effective_audience:\n          $ref: '#/components/schemas/LinkAudience'\n        link_access_level:\n          $ref: '#/components/schemas/LinkAccessLevel'\n        audience_options:\n          type: array\n          description: A list of link audience options the user might be able to set as the new audience. This field is optional.\n          items:\n            $ref: '#/components/schemas/LinkAudienceOption'\n        can_set_password:\n          type: boolean\n          description: Whether the user can set a password for the link. This field is optional. \n        can_remove_password:\n          type: boolean\n          description: Whether the user can remove the password of the link. This field is optional. \n        require_password:\n          type: boolean\n          description: Whether the user is required to provide a password to view the link. This field is optional. \n        can_use_extended_sharing_controls:\n          type: boolean\n          description: Whether the user can use extended sharing controls, based on their account type. This field is optional. \n      description: The link's access permissions.\n\n    ListRevisionsArg:\n      type: object\n      properties:\n        path:\n          type: string\n          description: The path to the file you want to see the revisions of.\n        limit:\n          type: integer\n          description: The maximum number of revision entries returned. The default for this field is 10.\n        mode:\n          $ref: '#/components/schemas/ListRevisionsMode'\n      description: Revision arguments.\n\n    ListRevisionsMode:\n      type: object\n      properties:\n        .tag:\n          description: Type of ListRevisionsMode\n          type: string\n          enum:\n            - path\n            - id\n      description: Determines the behavior of the API in listing the revisions for a given file path or id. The default for this union is path.\n\n    ListRevisionsResult:\n      type: object\n      properties:\n        is_deleted:\n          type: boolean\n          description: If the file identified by the latest revision in the response is either deleted or moved.\n        server_deleted:\n          type: string\n          description: The time of deletion if the file was deleted. This field is optional. \n        entries:\n          type: array\n          description: The revisions for the file. Only revisions that are not deleted\n            will show up here.\n          items:\n            $ref: '#/components/schemas/FileMetadata'\n      description: List revision result.\n\n    MediaInfo:\n      type: object\n      properties:\n        .tag:\n          description: Type of MediaInfo\n          type: string\n          enum:\n          - pending\n          - metadata\n        metadata:\n          $ref: '#/components/schemas/PhotoVedioMetadata'\n      description: |\n        Additional information if the file is a photo or video. This field is optional. \n\n        This field will not be set on entries returned by list_folder, list_folder/continue, or get_thumbnail_batch, \n        starting December 2, 2019.\n\n    # MediaMetadata:\n    #   description: The metadata for the photo/video.\n    #   oneOf:\n    #     - $ref: '#/components/schemas/PhotoVedioMetadata'\n    #     - $ref: '#/components/schemas/PhotoMetadata'\n\n    # Metadata:\n    #   description: Metadata of the relocated object.\n      # oneOf:\n      #   - $ref: '#/components/schemas/FileMetadata'\n      #   - $ref: '#/components/schemas/FolderMetadata'\n      #   - $ref: '#/components/schemas/DeletedMetadata'\n\n    PhotoMetadata:\n      type: object\n      properties:\n        dimensions:\n          $ref: '#/components/schemas/Dimensions'\n        location:\n          $ref: '#/components/schemas/GpsCoordinates'\n        time_taken:\n          type: string\n          description: The timestamp when the photo/video is taken.\n      description: Photo metadata.\n\n    PropertyField:\n      type: object\n      properties:\n        name:\n          type: string\n          description: |\n            Key of the property field associated with a file and template.\n\n            Keys can be up to 256 bytes.\n        value:\n          type: string\n          description: |\n            Value of the property field associated with a file and template.\n\n            Values can be up to 1024 bytes.\n      description: | \n        Raw key/value data to be associated with a Dropbox file.\n\n        Property fields are added to Dropbox files as a PropertyGroup. \n        This datatype comes from an imported namespace originally defined in the file_properties namespace.\n\n    PropertyGroup:\n      type: object\n      properties:\n        fields:\n          type: array\n          description: The actual properties associated with the template. There can\n            be up to 32 property types per template.\n          items:\n            $ref: '#/components/schemas/PropertyField'\n        template_id:\n          type: string\n          description: A unique identifier for the associated template.\n      description: |\n        A subset of the property fields described by the corresponding `PropertyGroupTemplate`.\n\n        Properties are always added to a Dropbox file as a PropertyGroup. \n        The possible key names and value types in this group are defined by the corresponding `PropertyGroupTemplate`. \n        This datatype comes from an imported namespace originally defined in the file_properties namespace.\n\n    RelocationArg:\n      type: object\n      properties:\n        from_path:\n          type: string\n          description: Path in the user's Dropbox to be copied or moved.\n        to_path:\n          type: string\n          description: Path in the user's Dropbox that is the destination.\n        allow_ownership_transfer:\n          type: boolean\n          description: |\n            Allow moves by owner even if it would result in an ownership transfer for the content being moved. \n            This does not apply to copies.\n        autorename:\n          type: boolean\n          description: If there's a conflict, have the Dropbox server try to autorename\n            the file to avoid the conflict.\n      description: Relocation arguments.\n\n    RelocationResult:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/FileMetadata'\n      description: Metadata of the relocated object.\n\n    RequestedVisibility:\n      type: object\n      properties:\n        .tag:\n          description: Type of RequestedVisibility\n          type: string\n          enum:\n            - public\n            - team_only\n            - password\n      description: |\n        The shared link's requested visibility. This field is optional.\n      \n        This can be overridden by the team and shared folder policies. The final visibility, after considering these \n        policies, can be found in resolved_visibility. This is shown only if the caller is the link's owner and \n        resolved_visibility is returned instead of effective_audience. \n\n    ResolvedVisibility:\n      type: object\n      properties:\n        .tag:\n          description: Type of ResolvedVisibility\n          type: string\n          enum:\n            - public\n            - team_only\n            - password\n            - team_and_password\n            - shared_folder_only\n            - other\n      description: |\n        The current visibility of the link after considering the shared links policies of the the team \n        (in case the link's owner is part of a team) and the shared folder (in case the linked file is part of a shared folder). This field is optional. \n        \n        This field is shown only if the caller has access to this info (the link's owner always has access to this data). \n        For some links, an effective_audience value is returned instead.\n        \n    RestoreArg:\n      type: object\n      properties:\n        path:\n          type: string\n          description: The path to the file you want to restore.\n        rev:\n          type: string\n          description: The revision to restore for the file.\n      description: Restore arguments.\n\n    SharedLinkAccessFailureReason:\n      type: object\n      properties:\n        .tag:\n          description: Type of SharedLinkAccessFailureReason\n          type: string\n          enum:\n            - login_required\n            - email_verify_required\n            - password_required\n            - team_only\n            - owner_only\n            - other\n      description: The failure reason for revoking the link. This field will only be present if the can_revoke is false. This field is optional.\n\n    SearchArg:\n      type: object\n      properties:\n        options:\n          $ref: '#/components/schemas/SearchOptions'\n        match_field_options:\n          $ref: '#/components/schemas/SearchMatchFieldOptions'\n        query:\n          type: string\n          description: The string to search for. May match across multiple fields based on the request arguments. \n      required:\n        - \"query\"\n      description: Search arguments.\n\n    SearchOptions:\n      type: object\n      properties:\n        path:\n          type: string\n          description: Scopes the search to a path in the user's Dropbox. Searches the entire Dropbox if not specified. This field is optional.\n        max_results:\n          type: integer\n          description: The string to search for. May match across multiple fields based on the request arguments. \n        order_by:\n          $ref: '#/components/schemas/SearchOrderBy'\n        file_status:\n          $ref: '#/components/schemas/FileStatus'\n        filename_only:\n          type: boolean\n          description:  Restricts search to only match on filenames. The default for this field is False. \n        file_extensions:\n          type: array\n          items:\n            type: string\n          description: Restricts search to only the extensions specified. Only supported for active file search. This field is optional. \n        file_categories:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileCategory'\n          description: Restricts search to only the file categories specified. Only supported for active file search. This field is optional.\n      description: Options for more targeted search results.\n\n    SearchMatchFieldOptions:\n      type: object\n      properties:\n        include_highlights:\n          type: boolean\n          description: Whether to include highlight span from file title. The default for this field is False. \n      description: Options for search results match fields.\n  \n    SearchOrderBy:\n      type: string\n      description: Specified property of the order of search results. By default, results are sorted by relevance.\n      enum:\n        - relevance\n        - last_modified_time\n\n    SearchResult:\n      type: object\n      properties:\n        matches:\n          type: array\n          description: A list (possibly empty) of matches for the query.\n          items:\n            $ref: '#/components/schemas/SearchMatch'\n        cursor:\n          type: integer\n          description: Pass the cursor into `search/continue:2` to fetch the next page of results. This field is optional. \n        has_more:\n          type: boolean\n          description: Used for paging. If true, indicates there is another page of results available that can be \n            fetched by calling `search/continue:2` with the cursor.\n      description: Search result.\n\n    SharedLinkMetadata:\n      oneOf:\n        - $ref: '#/components/schemas/FileLinkMetadata'\n        - $ref: '#/components/schemas/FolderLinkMetadata'\n      description: The metadata of a shared link.\n\n    SharedLinkSettings:\n      type: object\n      properties:\n        require_password:\n          type: boolean\n          description: Boolean flag to enable or disable password protection. This field is optional. \n        link_password:\n          type: string\n          description: If require_password is true, this is needed to specify the password to access the link. This field is optional. \n        expires:\n          type: string\n          description: Expiration time of the shared link. By default the link won't expire.\n        audience: \n          type: string\n          description: |\n            The new audience who can benefit from the access level specified by the link's access level specified in the \n            `link_access_level` field of `LinkPermissions`. This field is optional. \n          \n            This is used in conjunction with team policies and shared folder policies to determine the final effective \n            audience type in the `effective_audience` field of `LinkPermissions`.\n          enum:\n            - public\n            - team\n            - no_one\n        access:\n          type: string\n          description: |\n            Requested access level you want the audience to gain from this link.\n\n            **Note** modifying access level for an existing link is not supported. This field is optional.\n          enum:\n            - viewer\n            - editor\n            - max\n        allow_download:\n          type: boolean\n          description: Boolean flag to allow or not download capabilities for shared links. This field is optional. \n      description: The requested settings for the newly created shared link. This field is optional.\n\n    SearchMatch:\n      type: object\n      properties:\n        match_type:\n          $ref: '#/components/schemas/SearchMatchType'\n        metadata:\n          $ref: '#/components/schemas/MetadataV2'\n        highlight_spans:\n          type: array\n          items:\n            $ref: '#/components/schemas/HighlightSpan'\n          description: The list of HighlightSpan determines which parts of the file title should be highlighted. This field is optional.\n      description: The matches for the search query.\n\n    SearchMatchType:\n      type: object\n      properties:\n        .tag:\n          type: string\n          description: Type of search match.\n          enum:\n            - filename\n            - file_content\n            - filename_and_content\n            - filename_and_content\n      description: Indicates what type of match was found for a given item. \n    \n    HighlightSpan:\n      type: object\n      properties:\n        highlight_str:\n          type: string\n          description: String to be determined whether it should be highlighted or not. \n        is_highlighted:\n          type: boolean\n          description:  The string should be highlighted or not\n      description: he list of HighlightSpan determines which parts of the file title should be highlighted. \n\n    MetadataV2:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/FileMetadata'\n      description: The metadata for the matched file or folder.\n\n    SymlinkInfo:\n      type: object\n      properties:\n        target:\n          type: string\n          description: The target this symlink points to.\n      description: Set if this file is a symlink. This field is optional.\n    \n    Team:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The team's unique ID.\n        name:\n          type: string\n          description: The name of the team.\n      description: Information about a team.\n\n    TeamMemberInfo:\n      type: object\n      properties:\n        member_id:\n          type: string\n          description: |\n            ID of user as a member of a team. This field will only be present.\n\n            if the member is in the same team as current user.\n        display_name:\n          type: string\n          description: The display name of the user.\n        team_info:\n          $ref: '#/components/schemas/Team'\n      description: Information about a team member.\n    \n    TemplateFilterBase:\n      type: object\n      properties:\n        filter_some:\n          type: array\n          description: Only templates with an ID in the supplied list will be returned (a subset of templates will be returned).\n          items:\n            type: string\n      description: If set to a valid list of template IDs, FileMetadata.property_groups is set if there exists property \n        data associated with the file and each of the listed templates. This field is optional.\n        \n    PhotoVedioMetadata:\n      type: object\n      properties:\n        dimensions:\n          $ref: '#/components/schemas/Dimensions'\n        location:\n          $ref: '#/components/schemas/GpsCoordinates'\n        time_taken:\n          type: string\n          description: The timestamp when the photo/video is taken.  \n        duration:\n          type: integer\n          description: The duration of the video in milliseconds. This field is optional.\n      description: Vedio metadata.\n\n    VisibilityPolicy:\n      type: object\n      properties:\n        policy:\n          $ref: '#/components/schemas/RequestedVisibility'\n        resolved_policy:\n          $ref: '#/components/schemas/AlphaResolvedVisibility'        \n        allowed:\n          type: boolean\n          description:  Whether the user is permitted to set the visibility to this policy. \n        disallowed_reason:\n          $ref: '#/components/schemas/VisibilityPolicyDisallowedReason'\n\n    WriteMode:\n      type: object\n      properties:\n        .tag:\n          description: Type of WriteMode\n          type: string\n          enum:\n            - add\n            - overwrite\n            - update\n        update:\n          type: string\n          description: |\n            Overwrite if the given \"rev\" matches the existing file's \"rev\".\n\n            The autorename strategy is to append the string \"conflicted copy\" to the file name. \n            For example, \"document.txt\" might become \"document (conflicted copy).txt\" or \"document (Panda's conflicted copy).txt\".\n      description: Selects what to do if the file already exists. The default for this union is add.\n\n    AlphaResolvedVisibility:\n      type: object\n      properties:\n        .tag:\n          description: |\n            This is what the effective policy would be, if you selected this option. \n            \n            The resolved policy is obtained after considering external effects such as shared folder settings and team policy. \n            This value is guaranteed to be provided.\n          type: string\n          enum:\n            - public\n            - team_only\n            - password\n            - team_and_password\n            - shared_folder_only\n            - no_one\n            - only_you\n\n    VisibilityPolicyDisallowedReason:\n      type: object\n      properties:\n        .tag:\n          description: |\n            If allowed is false, this will provide the reason that the user is not permitted to set the visibility to this policy. \n            This field is optional.\n          type: string\n          enum:\n            - delete_and_recreate\n            - restricted_by_shared_folder\n            - restricted_by_team\n            - user_not_on_team\n            - user_account_type\n            - permission_denied\n\n  securitySchemes:\n    oAuth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://www.dropbox.com/oauth2/authorize\n          scopes:\n            files.content.write : files.content.write \n            sharing.write : sharing.write \n            files.content.read: files.content.read \n            files.metadata.read : files.metadata.read \nsecurity:\n- oAuth: [files.content.write, sharing.write, files.content.read, files.metadata.read]\n"
		}
	},
	"Error": "unmarshal: callback: callback: value \"\\\"filename_and_content\\\"\" is duplicated"
}