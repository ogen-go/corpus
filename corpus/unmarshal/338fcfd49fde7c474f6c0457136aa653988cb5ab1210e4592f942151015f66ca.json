{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Seluj78/PyMatcha"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "backend/schemas/swagger.yaml",
			"byteSize": 67540,
			"content": "openapi: 3.0.0\ninfo:\n  description: \"This is the Matcha API documentation\"\n  version: 0.0.0\n  title: Matcha API\n  termsOfService: https://github.com/Seluj78/PyMatcha/blob/dev/LICENSE\n  contact:\n    email: jlasne@student.42.fr\n  license:\n    name: GNU GPL 3\n    url: https://github.com/Seluj78/PyMatcha/blob/dev/LICENSE\n\ntags:\n  - name: Authentication\n    description: Login and register routes\n  - name: Profile\n  - name: Like\n    description: Like, unlike user etc...\n  - name: Match\n  - name: Messages\n    description: Send and receive messages\n  - name: Recommendations\n  - name: Search\n  - name: User\n    description: Get user info\n  - name: Debug\n    description: Debug routes\n\npaths:\n  /auth/register:\n    post:\n      tags:\n        - Authentication\n      summary: Register a new user to Matcha\n      description: \"\"\n      operationId: registerUser\n#      security:\n#        - bearerAuth: []\n      requestBody:\n        description: Parameters to create a user\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUser'\n      responses:\n        \"200\":\n          description: User successfully created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  email:\n                    type: string\n                    description: The user email\n                    example: foo@example.org\n        \"409\":\n          $ref: '#/components/responses/Conflict'\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n  /auth/login:\n    post:\n      tags:\n        - Authentication\n      summary: Login to Matcha\n      description: \"\"\n      operationId: loginUser\n#      security:\n#        - bearerAuth: []\n      requestBody:\n        description: Parameters to login a user. Either email or username\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginUser'\n      responses:\n        \"200\":\n          description: User successfully logged in\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  return:\n                    type: object\n                    properties:\n                      access_token:\n                        type: string\n                        description: The user access token to use in bearer auth\n                        example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDAyODM3NDAsIm5iZiI6MTYwMDI4Mzc0MCwianRpIjoiMTFlMmFhNzMtYWVkOS00NDQ2LWExNWItODAxZmFmYjYzYTdiIiwiZXhwIjoxNjAwMjg0NjQwLCJpZGVudGl0eSI6eyJpZCI6MSwiZW1haWwiOiJmb29AZXhhbXBsZS5vcmciLCJ1c2VybmFtZSI6ImZvbyIsImlzX29ubGluZSI6MCwiZGF0ZV9sYXN0c2VlbiI6IldlZCwgMTYgU2VwIDIwMjAgMTU6Mzk6MDQgR01UIn0sImZyZXNoIjp0cnVlLCJ0eXBlIjoiYWNjZXNzIn0.EFCIlsxSbEeHza_U9oPdVvvfx1rquItHDnoYtP19XBM\n                      refresh_token:\n                        type: string\n                        description: The user refresh token usd to refresh the access token when expired\n                        example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDAyODM3NDAsIm5iZiI6MTYwMDI4Mzc0MCwianRpIjoiNWQ2NjYwMTQtMDJkMi00YjY4LThjOTktNDQwNDZjYzYzZDNjIiwiZXhwIjoxNjAyODc1NzQwLCJpZGVudGl0eSI6eyJpZCI6MSwiZW1haWwiOiJmb29AZXhhbXBsZS5vcmciLCJ1c2VybmFtZSI6ImZvbyIsImlzX29ubGluZSI6MCwiZGF0ZV9sYXN0c2VlbiI6IldlZCwgMTYgU2VwIDIwMjAgMTU6Mzk6MDQgR01UIn0sInR5cGUiOiJyZWZyZXNoIn0.yz1QhL1QhxUdYvvacXZ0CkkVxFp2CkcNYpYRtKdRXdo\n                      is_profile_completed:\n                        type: boolean\n                        description: Is the user profile completed\n                        example: false\n        \"409\":\n          $ref: '#/components/responses/Conflict'\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"401\":\n          $ref: '#/components/responses/Unauthorized'\n  /auth/refresh:\n    post:\n      tags:\n        - Authentication\n      summary: Refreshes the access token\n      description: \"\"\n      operationId: refreshToken\n      security:\n        - refreshToken: []\n      responses:\n        \"409\":\n          description: Unauthorized error, token revoked.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: Token has been revoked\n                    default: Token has been revoked\n        \"200\":\n          description: Token successfully refreshed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  access_token:\n                    type: string\n                    description: The new and fresh access token\n                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDAzMjYzMjksIm5iZiI6MTYwMDMyNjMyOSwianRpIjoiZTA0ZWQ3NmMtMTcxMC00ZjQ4LWFkNzMtZDBmOTMxZTkxNzM0IiwiZXhwIjoxNjAwMzI3MjI5LCJpZGVudGl0eSI6eyJpZCI6MSwiZW1haWwiOiJmb29AZXhhbXBsZS5vcmciLCJ1c2VybmFtZSI6ImZvbyIsImlzX29ubGluZSI6MCwiZGF0ZV9sYXN0c2VlbiI6IldlZCwgMTYgU2VwIDIwMjAgMTU6Mzk6MDQgR01UIn0sImZyZXNoIjpmYWxzZSwidHlwZSI6ImFjY2VzcyJ9.dFJMy-04thKA9Q268bgQhiqLDrkqnCOCaiwHJ1XXook\n  /auth/logout:\n    post:\n      tags:\n        - Authentication\n      summary: Logout user\n      description: \"\"\n      operationId: logoutUser\n      security:\n        - refreshToken: [ ]\n      responses:\n        \"409\":\n          description: Unauthorized error, token already revoked.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: Token has been revoked\n                    default: Token has been revoked\n        \"200\":\n          description: Logout successful.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Logout successful.\n  /auth/confirm/{token}:\n    post:\n      summary: Confirm a user with a token\n      operationId: confirmUser\n      tags:\n        - Authentication\n      parameters:\n        - name: token\n          in: path\n          required: true\n          description: The confirmation token\n          schema:\n            type: string\n      responses:\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"200\":\n          description: Returned user to view\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Confirmation successful\n  /auth/confirm/new:\n    post:\n      summary: Request a new confirmation email\n      description: Will always return a success, even if the user is not found or already confirmed\n      operationId: newConfirmEmail\n      tags:\n        - Authentication\n      requestBody:\n        description: Parameters to request new confirmation email\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  required: true\n                  type: string\n                  example: foo@example.org\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"200\":\n          description: Returned user to view\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: New confirmation email sent if user exists in database and isn't already confirmed\n  /profile/complete:\n    post:\n      tags:\n        - Profile\n      summary: Complete user profile\n      description: \"\"\n      operationId: completeProfile\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Parameters to complete profile\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CompleteProfile'\n      responses:\n        \"409\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"200\":\n          description: Profile completed successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Profile completed !\n  /profile/edit/first_name:\n    patch:\n      tags:\n        - Profile\n      summary: Edit first name of user\n      description: \"\"\n      operationId: editProfileFirstName\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Parameters to edit first name\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                first_name:\n                  type: string\n                  example: Foo\n      responses:\n        \"409\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"200\":\n          description: First name edited successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: First name successfully modified !\n  /profile/edit/last_name:\n    patch:\n      tags:\n        - Profile\n      summary: Edit last name of user\n      description: \"\"\n      operationId: editProfileLastName\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Parameters to edit last name\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                last_name:\n                  type: string\n                  example: Bar\n      responses:\n        \"409\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"200\":\n          description: Last name edited successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Last name successfully modified !\n  /profile/edit/username:\n    patch:\n      tags:\n        - Profile\n      summary: Edit username of user\n      description: \"\"\n      operationId: editProfileUsername\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Parameters to edit username\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  example: FooBar\n      responses:\n        \"409\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"200\":\n          description: Username edited successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Username successfully modified !\n  /profile/edit/bio:\n    patch:\n      tags:\n        - Profile\n      summary: Edit bio of user\n      description: \"\"\n      operationId: editProfileBio\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Parameters to edit bio\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                bio:\n                  type: string\n                  example: Lorem ipsum...\n      responses:\n        \"409\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"200\":\n          description: Bio edited successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Bio successfully modified !\n  /profile/edit/gender:\n    patch:\n      tags:\n        - Profile\n      summary: Edit gender of user\n      description: \"\"\n      operationId: editProfileGender\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Parameters to edit gender\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                gender:\n                  type: string\n                  example: male\n                  description: One of male, female or other\n      responses:\n        \"409\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"200\":\n          description: Gender edited successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Gender successfully modified !\n  /profile/edit/orientation:\n    patch:\n      tags:\n        - Profile\n      summary: Edit orientation of user\n      description: \"\"\n      operationId: editProfileOrientation\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Parameters to edit orientation\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                orientation:\n                  type: string\n                  example: heterosexual\n                  description: One of heterosexual, homosexual, bisexual or other.\n      responses:\n        \"409\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"200\":\n          description: Orientation edited successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Orientation successfully modified !\n  /profile/edit/birthdate:\n    patch:\n      tags:\n        - Profile\n      summary: Edit birthdate of user\n      description: \"\"\n      operationId: editProfileBirthdate\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Parameters to edit birthdate\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                birthdate:\n                  type: string\n                  example: 06/04/1998\n                  description: Must be formatted as 'day/month/year'\n      responses:\n        \"409\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"200\":\n          description: Birthdate edited successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Birthdate successfully modified !\n  /profile/edit/tags:\n    patch:\n      tags:\n        - Profile\n      summary: Edit tags of user\n      description: \"\"\n      operationId: editProfileTags\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Parameters to edit tags\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              example: [\"food\", \"netflix\"]\n      responses:\n        \"409\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"200\":\n          description: Tags edited successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Tags successfully modified !\n  /profile/report/{uid}:\n    post:\n      summary: Report a profile\n      operationId: reportProfile\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Profile\n      parameters:\n        - name: uid\n          in: path\n          required: true\n          description: The id of the user to report. Either username, email or id\n          schema:\n            type: string\n      requestBody:\n        description: Parameters to report profile\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReportProfile'\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"200\":\n          description: Report created successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Report created on user {email_adress}.\n  /profile/view/{uid}:\n    get:\n      summary: View a profile\n      operationId: viewProfile\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Profile\n      parameters:\n        - name: uid\n          in: path\n          required: true\n          description: The id of the user to view. Either username, email or id\n          schema:\n            type: string\n      responses:\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"200\":\n          description: Returned user to view\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  profile:\n                    $ref: '#/components/schemas/User'\n  /profile/views:\n    get:\n      summary: Get your profile views\n      operationId: getProfileViews\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Profile\n      responses:\n        \"200\":\n          description: Returned list of views\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  views:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/View'\n  /like/{uid}:\n    post:\n      summary: Like a user\n      operationId: likeUser\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Like\n      parameters:\n        - name: uid\n          in: path\n          required: true\n          description: The id of the user to like. Either username, email or id\n          schema:\n            type: string\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"200\":\n          description: Like user successfully\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/LikedUser'\n                  - $ref: '#/components/schemas/MatchedUser'\n  /unlike/{uid}:\n    post:\n      summary: Unike a user\n      operationId: unlikeUser\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Like\n      parameters:\n        - name: uid\n          in: path\n          required: true\n          description: The id of the user to unlike. Either username, email or id\n          schema:\n            type: string\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"200\":\n          description: Unlike successfull\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Unliked user X.\n  /likes:\n    get:\n      summary: Get your likes\n      operationId: getLikes\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Like\n      responses:\n        \"200\":\n          description: Returned list of likes\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  likes:\n                    type: object\n                    properties:\n                      sent:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Like'\n                      received:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Like'\n  /matches:\n    get:\n      summary: Get your matches\n      operationId: getMatches\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Match\n      responses:\n        \"200\":\n          description: Returned list of matches\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  matches:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Match'\n  /conversations:\n    get:\n      summary: Get your open conversations\n      operationId: getConversations\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Messages\n      responses:\n        \"200\":\n          description: Returned list of matches\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  conversations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Conversation'\n  /messages/send:\n    post:\n      summary: Send a message\n      operationId: sendMessage\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Messages\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"200\":\n          description: Like user successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Message successfully sent to X.\n  /conversations/{with_uid}:\n    get:\n      summary: Get the messages between you and another user\n      operationId: conversationWithUID\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Messages\n      parameters:\n        - name: with_uid\n          in: path\n          required: true\n          description: The id of the user to get messages with. Either username, email or id\n          schema:\n            type: string\n      responses:\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"200\":\n          description: Returned the conversation between users\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  messages:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Message'\n  /messages/see/{with_uid}:\n    post:\n      summary: Mark as seen all the latest messages\n      operationId: seeMessagesWithUID\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Messages\n      parameters:\n        - name: with_uid\n          in: path\n          required: true\n          description: The id of the user to mark messages as seen. Either username, email or id\n          schema:\n            type: string\n      responses:\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"200\":\n          description: Messages marked as seen.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Messages marked as seen.\n  /messages/like/{message_id}:\n    post:\n      summary: Like a message\n      operationId: likeMessage\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Messages\n      parameters:\n        - name: message_id\n          in: path\n          required: true\n          description: The id of the message to like\n          schema:\n            type: integer\n      responses:\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"200\":\n          description: Message liked.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Liked message X.\n  /messages/unlike/{message_id}:\n    post:\n      summary: Unlike a message\n      operationId: unlikeMessage\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Messages\n      parameters:\n        - name: message_id\n          in: path\n          required: true\n          description: The id of the message to unlike\n          schema:\n            type: integer\n      responses:\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"200\":\n          description: Message unliked.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Unliked message X.\n  /messages/unseen:\n    get:\n      summary: Returns all the unseen messages\n      operationId: unseenMessages\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Messages\n      responses:\n        \"200\":\n          description: Returns a list of unseen messages\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  messages:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/UnseenMessage'\n  /recommendations:\n    get:\n      summary: Get user recommendations\n      operationId: getOnlineUsers\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Recommendations\n      responses:\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"200\":\n          description: Returns a list of recommendations\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  recommendations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Recommendation'\n  /users:\n    get:\n      summary: Get all users\n      operationId: getAllUsers\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - User\n      responses:\n        \"200\":\n          description: Returned list of users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n  /users/{uid}:\n    get:\n      summary: Get one user info.\n      description: Get one user info. DOESNT ADD A VIEW\n      operationId: getUser\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - User\n      parameters:\n        - name: uid\n          in: path\n          required: true\n          description: The id of the user to get ingo. Either username, email or id\n          schema:\n            type: string\n      responses:\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"200\":\n          description: Returned user to view\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /users/online:\n    get:\n      summary: Get all online users\n      description: Returns list of ids of online users\n      operationId: getAllOnlineUsers\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - User\n      responses:\n        \"200\":\n          description: Returned list of online users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OnlineUser'\n  /auth/password/forgot:\n    post:\n      summary: Request a password reset\n      description: Will always return a success, no matter the email passed. Emails will be sent only to valid email adresses in the database\n      operationId: requestPasswordReset\n      tags:\n        - Authentication\n      requestBody:\n        description: Parameters to request password reset\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  required: true\n                  example: foo@example.org\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n                    example: 200\n                  success:\n                    type: boolean\n                    example: true\n                  message:\n                    type: string\n                    example: Password reset mail sent successfully if user exists in DB\n  /auth/password/reset:\n    post:\n      summary: Reset a password\n      operationId: passwordReset\n      tags:\n        - Authentication\n      requestBody:\n        description: Parameters to request password reset\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                  required: true\n                  example: g4eh6584jhrhyk7486f5ghket6u87k78u\n                password:\n                  type: string\n                  required: true\n                  example: dolphin2\n      responses:\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n                    example: 200\n                  success:\n                    type: boolean\n                    example: true\n                  message:\n                    type: string\n                    example: Password reset successful.\n  /auth/password/check_token:\n    post:\n      summary: Check the token validity\n      operationId: checkToken\n      tags:\n        - Authentication\n      requestBody:\n        description: Parameters to test the token\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                  required: true\n                  example: qwERg3rtyhog23mrweof5ngib4j3ktnrvwefqjskldnakms\n      responses:\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n                    example: 200\n                  success:\n                    type: boolean\n                    example: true\n                  message:\n                    type: string\n                    example: Reset token is correct.\n  /profile/images:\n    post:\n      tags:\n        - Profile\n      summary: Add image to profile\n      description: The image must be passed in the `file[]` in form-data\n      operationId: addImage\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: is_primary\n          schema:\n            type: boolean\n          required: true\n          example: true\n          description: Is the image the primary profile image\n      requestBody:\n        content:\n          image/png:\n            schema:\n              type: string\n              format: binary\n      responses:\n        \"409\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"200\":\n          description: Image added successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  image:\n                    type: string\n                    example: https://i.imgur.com/Zv9DnWh.png\n    get:\n      summary: Get all user images\n      operationId: getAllUserImages\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Profile\n      responses:\n        \"200\":\n          description: Returned list of user images\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Image'\n  /profile/images/{image_id}:\n    put:\n      tags:\n        - Profile\n      summary: Edit which image is the primary one\n      description: This will change the previous primary image if it exists to the passed id\n      operationId: editPrimaryImage\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: image_id\n          in: path\n          required: true\n          description: The id of the image to become primary\n          schema:\n            type: string\n      responses:\n        \"409\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"200\":\n          description: Profile picture successfully modified\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Profile picture successfully modified\n    delete:\n      tags:\n        - Profile\n      summary: Delete an image\n      operationId: deleteImage\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: image_id\n          in: path\n          required: true\n          description: The id of the image to be delete\n          schema:\n            type: string\n      responses:\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"200\":\n          description: Profile picture successfully modified\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  message:\n                    type: string\n                    example: Image successfully deleted.\n  /search:\n    post:\n      summary: Search users\n      operationId: searchUsers\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Search\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"200\":\n          description: Returns a list of users based on the search\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: If the request is a success\n                    example: true\n                  code:\n                    type: integer\n                    description: The status code\n                    example: 200\n                  search_results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SearchResult'\n\n\nservers:\n  - url: https://api.matcha.com\n\n\ncomponents:\n  responses:\n    Conflict:\n      description: Conflict error\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                type: string\n                example: 409\n                default: 409\n              success:\n                type: boolean\n                default: false\n                example: false\n              error:\n                type: object\n                properties:\n                  type:\n                    type: string\n                    default: ConflictError\n                    example: ConflictError\n                  name:\n                    type: string\n                    default: Conflict Error\n                    example: Conflict Error\n                  message:\n                    type: string\n                  solution:\n                    type: string\n    BadRequest:\n      description: Bad Request error\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                type: string\n                example: 400\n                default: 400\n              success:\n                type: boolean\n                default: false\n                example: false\n              error:\n                type: object\n                properties:\n                  type:\n                    type: string\n                    default: BadRequestError\n                    example: BadRequestError\n                  name:\n                    type: string\n                    default: BadRequest Error\n                    example: BadRequest Error\n                  message:\n                    type: string\n                  solution:\n                    type: string\n    Unauthorized:\n      description: Unauthorized error\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                type: string\n                example: 401\n                default: 401\n              success:\n                type: boolean\n                default: false\n                example: false\n              error:\n                type: object\n                properties:\n                  type:\n                    type: string\n                    default: UnauthorizedError\n                    example: UnauthorizedError\n                  name:\n                    type: string\n                    default: Unauthorized Error\n                    example: Unauthorized Error\n                  message:\n                    type: string\n                  solution:\n                    type: string\n    NotFound:\n      description: Not Found error\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                type: string\n                example: 401\n                default: 401\n              success:\n                type: boolean\n                default: false\n                example: false\n              error:\n                type: object\n                properties:\n                  type:\n                    type: string\n                    default: NotFoundError\n                    example: NotFoundError\n                  name:\n                    type: string\n                    default: NotFound Error\n                    example: NotFound Error\n                  message:\n                    type: string\n                  solution:\n                    type: string\n\n  securitySchemes:\n    accessToken:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    refreshToken:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: Refresh token\n  schemas:\n    CreateUser:\n      type: object\n      properties:\n        username:\n          type: string\n          example: foobar\n        email:\n          type: string\n          example: foo@example.org\n        password:\n          type: string\n          example: dolphin2\n        first_name:\n          type: string\n          example: Foo\n        last_name:\n          type: string\n          example: Bar\n    LoginUser:\n      type: object\n      properties:\n        username:\n          type: string\n          example: foo@example.org\n          required: true\n        password:\n          type: string\n          example: dolphin2\n          required: true\n    CompleteProfile:\n      type: object\n      properties:\n        gender:\n          type: string\n          enum: [\"male\", \"female\", \"other\"]\n          example: other\n        birthdate:\n          type: date\n          example: 06/04/1998\n          description: Formatted as DAY/MONTH/YEAR\n        orientation:\n          type: string\n          enum: [\"heterosexual\", \"homosexual\", \"bisexual\", \"other\"]\n          example: heterosexual\n        bio:\n          type: string\n          example: I like running around on horses\n        tags:\n          type: array\n          example: [\"food\", \"sex\", \"drugs\"]\n    ReportProfile:\n      type: object\n      properties:\n        reason:\n          type: string\n          enum: [\"harassment\", \"bot\", \"spam\", \"inappropriate content\"]\n          example: spam\n        details:\n          type: string\n          example: He spammed me of dick pics\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n        first_name:\n          type: string\n          example: Foo\n        last_name:\n          type: string\n          example: Bar\n        username:\n          type: string\n          example: FooBar\n        email:\n          type: string\n          example: foo@example.org\n        bio:\n          type: string\n          example: Lorem Ipsum is the single greatest threat. We are not - we are not keeping up with other websites. Lorem Ipsum best not make any more threats to your website. It will be met with fire and fury like the world has never seen. Does everybody know that pig named Lorem Ipsum? An ‘extremely credible source’ has called my office and told me that Barack Obama’s placeholder text is a fraud.\n        birthdate:\n          type: date\n          example: Mon, 06 Apr 1998 00:00:00 GMT\n        gender:\n          type: string\n          enum: [\"male\", \"female\", \"other\"]\n          example: male\n        orientation:\n          type: string\n          enum: [ \"heterosexual\", \"homosexual\", \"bisexual\", \"other\" ]\n          example: heterosexual\n        geohash:\n          type: string\n          example: u09whv25xgzn\n        heat_score:\n          type: integer\n          example: 123\n        confirmed_on:\n          type: date\n          example: Wed, 16 Sep 2020 15:20:02 GMT\n        dt_joined:\n          type: date\n          example: Wed, 16 Sep 2020 15:18:02 GMT\n        dt_lastseen:\n          type: date\n          example: Wed, 19 Sep 2020 19:24:02 GMT\n        is_confirmed:\n          type: boolean\n          example: true\n        is_online:\n          type: boolean\n          example: true\n        is_profile_completed:\n          type: boolean\n          example: true\n        age:\n          type: int\n          example: 22\n        likes:\n          type: object\n          properties:\n            sent:\n              type: array\n              items:\n                $ref: '#/components/schemas/Like'\n              uniqueItems: true\n            received:\n              type: array\n              items:\n                $ref: '#/components/schemas/Like'\n              uniqueItems: true\n        reports:\n          type: object\n          properties:\n            sent:\n              type: array\n              items:\n                $ref: '#/components/schemas/Report'\n              uniqueItems: true\n            received:\n              type: array\n              items:\n                $ref: '#/components/schemas/Report'\n              uniqueItems: true\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n          uniqueItems: true\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/Image'\n          uniqueItems: true\n    Like:\n      type: object\n      properties:\n        dt_liked:\n          type: date\n          example: Wed, 16 Sep 2020 15:38:15 GMT\n          description: When was the like created\n        id:\n          type: integer\n          example: 1\n          description: The unique identifier of the like\n        is_superlike:\n          type: boolean\n          example: false\n          description: Is this like a superlike\n        liked_id:\n          type: integer\n          example: 1\n          description: The user id of the person who was liked\n        liker_id:\n          type: integer\n          example: 2\n          description: The user id of the person who liked\n    Report:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n          description: The unique identifier of the report\n        reporter_id:\n          type: integer\n          example: 2\n          description: The user id of who reported\n        reported_id:\n          type: integer\n          example: 3\n          description: The user id of who was reported\n        dt_reported:\n          type: date\n          example: Wed, 16 Sep 2020 15:38:15 GMT\n          description: When was the report created\n        details:\n          type: string\n          example: He is spamming me\n          description: The report detail\n        reason:\n          type: string\n          enum: ['harassment', 'bot', 'spam', 'inappropriate content']\n          example: spam\n          description: Type of report\n        status:\n          type: string\n          enum: ['processing request', 'insufficient evidence', 'convicted and banned']\n          example: processing request\n          description: The status of the report\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n          description: Unique identifier of this tag\n        name:\n          type: string\n          example: Food\n          description: The tag content\n        user_id:\n          type: string\n          example: 1\n          description: The user id to who belongs the tag\n    View:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n          description: Unique identifier of this tag\n        dt_seeen:\n          type: date\n          example: Thu, 17 Sep 2020 00:00:00 GMT\n          description: When was the profile seen\n        profile_id:\n          type: integer\n          example: 2\n          description: The user id of the profile that was viewed\n        viewer_id:\n          type: string\n          example: 3\n          description: The user id to who viewed the profile\n    LikedUser:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: If the request is a success\n          example: true\n        code:\n          type: integer\n          description: The status code\n          example: 200\n        message:\n          type: string\n          example: Liked user.\n    MatchedUser:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: If the request is a success\n          example: true\n        code:\n          type: integer\n          description: The status code\n          example: 200\n        message:\n          type: string\n          example: It's a match !\n    Match:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n          description: Unique identifier of this match\n        dt_matched:\n          type: date\n          example: Wed, 16 Sep 2020 15:38:15 GMT\n          description: The datetime when the match occured\n        user_1:\n          type: string\n          example: 1\n          description: The user id of one of the user for the match\n        user_2:\n          type: string\n          example: 2\n          description: The user id of one of the user for the match\n    Conversation:\n      type: object\n      properties:\n        last_message_content:\n          type: string\n          example: Ok for tonight !\n          description: The last message sent to the conversation content\n        last_message_timestamp:\n          type: date\n          example: Wed, 16 Sep 2020 15:38:15 GMT\n          description: The last message sent to the conversation timestamp\n        is_unseen:\n          type: boolean\n          example: true\n          description: Is the last message of the conversation from the other user unseen\n        with_user:\n          type: string\n          example: 2\n          description: The user id of the person the conversation is with\n    Message:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n          description: The unique id of the message\n        dt_added:\n          type: date\n          description: When was the message sent\n          example: Wed, 16 Sep 2020 15:38:15 GMT\n        dt_seen:\n          type: date\n          description: When was the message seen\n          example: Wed, 16 Sep 2020 15:39:15 GMT\n        content:\n          type: string\n          example: See you tonight !\n          description: The content of the message\n        is_seen:\n          type: boolean\n          example: true\n          description: Is the message seen\n        is_liked:\n          type: boolean\n          example: false\n          description: Is the message liked\n        from_user:\n          type: string\n          example: 2\n          description: The user id who sent the message\n        to_user:\n          type: string\n          example: 1\n          description: The user id who received the message\n    UnseenMessage:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n          description: The unique id of the message\n        dt_added:\n          type: date\n          description: When was the message sent\n          example: Wed, 16 Sep 2020 15:38:15 GMT\n        dt_seen:\n          type: date\n          description: When was the message seen\n          example: Wed, 16 Sep 2020 15:39:15 GMT\n        content:\n          type: string\n          example: See you tonight !\n          description: The content of the message\n        is_seen:\n          type: boolean\n          example: false\n          description: Is the message seen\n        is_liked:\n          type: boolean\n          example: false\n          description: Is the message liked\n        from_user:\n          type: string\n          example: 2\n          description: The user id who sent the message\n        to_user:\n          type: string\n          example: 1\n          description: The user id who received the message\n    Recommendation:\n      type: object\n      properties:\n        score:\n          type: integer\n          example: 10\n          description: A score to sort the recommendations by. The higher the closest the match. Score can be negative\n        common_tags:\n          type: array\n          example: [ \"friends\", \"drinks\", \"sun\" ]\n        distance:\n          type: integer\n          example: 50\n          description: The distance between two users\n        id:\n          type: integer\n          example: 1\n        first_name:\n          type: string\n          example: Foo\n        last_name:\n          type: string\n          example: Bar\n        username:\n          type: string\n          example: FooBar\n        email:\n          type: string\n          example: foo@example.org\n        bio:\n          type: string\n          example: Lorem Ipsum is the single greatest threat. We are not - we are not keeping up with other websites. Lorem Ipsum best not make any more threats to your website. It will be met with fire and fury like the world has never seen. Does everybody know that pig named Lorem Ipsum? An ‘extremely credible source’ has called my office and told me that Barack Obama’s placeholder text is a fraud.\n        birthdate:\n          type: date\n          example: Mon, 06 Apr 1998 00:00:00 GMT\n        gender:\n          type: string\n          enum: [\"male\", \"female\", \"other\"]\n          example: male\n        orientation:\n          type: string\n          enum: [ \"heterosexual\", \"homosexual\", \"bisexual\", \"other\" ]\n          example: heterosexual\n        geohash:\n          type: string\n          example: u09whv25xgzn\n        heat_score:\n          type: integer\n          example: 123\n        confirmed_on:\n          type: date\n          example: Wed, 16 Sep 2020 15:20:02 GMT\n        dt_joined:\n          type: date\n          example: Wed, 16 Sep 2020 15:18:02 GMT\n        dt_lastseen:\n          type: date\n          example: Wed, 19 Sep 2020 19:24:02 GMT\n        is_confirmed:\n          type: boolean\n          example: true\n        is_online:\n          type: boolean\n          example: true\n        is_profile_completed:\n          type: boolean\n          example: true\n        age:\n          type: int\n          example: 22\n        likes:\n          type: object\n          properties:\n            sent:\n              type: array\n              items:\n                $ref: '#/components/schemas/Like'\n              uniqueItems: true\n            received:\n              type: array\n              items:\n                $ref: '#/components/schemas/Like'\n              uniqueItems: true\n        reports:\n          type: object\n          properties:\n            sent:\n              type: array\n              items:\n                $ref: '#/components/schemas/Report'\n              uniqueItems: true\n            received:\n              type: array\n              items:\n                $ref: '#/components/schemas/Report'\n              uniqueItems: true\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n          uniqueItems: true\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/Image'\n          uniqueItems: true\n    OnlineUser:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The user id\n          example: 1\n        dt_lastseen:\n          type: timestamp\n          description: Timestamp of last time the user was online\n          example: 1600332058.537065,\n    Image:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The image id\n          example: 1\n        user_id:\n          type: integer\n          description: The user id to whom the image belongs\n          example: 1\n        link:\n          type: string\n          description: The image link\n          example: https://i.imgur.com/OCqF907.png\n        dt_added:\n          type: date\n          description: When was the image added\n          example: Wed, 19 Sep 2020 19:24:02 GMT\n        is_primary:\n          type: boolean\n          description: Is this image the profile picture of the user\n          example: true\n    SearchResult:\n      type: object\n      properties:\n        common_tags:\n          type: array\n          example: [ \"friends\", \"drinks\", \"sun\" ]\n        distance:\n          type: integer\n          example: 50\n          description: The distance between two users\n        id:\n          type: integer\n          example: 1\n        first_name:\n          type: string\n          example: Foo\n        last_name:\n          type: string\n          example: Bar\n        username:\n          type: string\n          example: FooBar\n        email:\n          type: string\n          example: foo@example.org\n        bio:\n          type: string\n          example: Lorem Ipsum is the single greatest threat. We are not - we are not keeping up with other websites. Lorem Ipsum best not make any more threats to your website. It will be met with fire and fury like the world has never seen. Does everybody know that pig named Lorem Ipsum? An ‘extremely credible source’ has called my office and told me that Barack Obama’s placeholder text is a fraud.\n        birthdate:\n          type: date\n          example: Mon, 06 Apr 1998 00:00:00 GMT\n        gender:\n          type: string\n          enum: [ \"male\", \"female\", \"other\" ]\n          example: male\n        orientation:\n          type: string\n          enum: [ \"heterosexual\", \"homosexual\", \"bisexual\", \"other\" ]\n          example: heterosexual\n        geohash:\n          type: string\n          example: u09whv25xgzn\n        heat_score:\n          type: integer\n          example: 123\n        confirmed_on:\n          type: date\n          example: Wed, 16 Sep 2020 15:20:02 GMT\n        dt_joined:\n          type: date\n          example: Wed, 16 Sep 2020 15:18:02 GMT\n        dt_lastseen:\n          type: date\n          example: Wed, 19 Sep 2020 19:24:02 GMT\n        is_confirmed:\n          type: boolean\n          example: true\n        is_online:\n          type: boolean\n          example: true\n        is_profile_completed:\n          type: boolean\n          example: true\n        age:\n          type: int\n          example: 22\n        likes:\n          type: object\n          properties:\n            sent:\n              type: array\n              items:\n                $ref: '#/components/schemas/Like'\n              uniqueItems: true\n            received:\n              type: array\n              items:\n                $ref: '#/components/schemas/Like'\n              uniqueItems: true\n        reports:\n          type: object\n          properties:\n            sent:\n              type: array\n              items:\n                $ref: '#/components/schemas/Report'\n              uniqueItems: true\n            received:\n              type: array\n              items:\n                $ref: '#/components/schemas/Report'\n              uniqueItems: true\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n          uniqueItems: true\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/Image'\n          uniqueItems: true\n",
			"canonicalURL": "/github.com/Seluj78/PyMatcha@2c30771396da934d195d667c0e8602651ce52313/-/blob/backend/schemas/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Seluj78/PyMatcha/blob/2c30771396da934d195d667c0e8602651ce52313/backend/schemas/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:4721: json: cannot unmarshal Go value of type ogen.Spec: spec: json: cannot unmarshal Go value of type ogen.Properties: json: unable to unmarshal JSON boolean into Go value of type []string"
}