{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/globaldothealth/list"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "geocoding/location-service/api/openapi.yaml",
			"byteSize": 6725,
			"content": "openapi: 3.0.3\ninfo:\n    title: Global.health geolocation service\n    description: Server for looking up geographic infomration for Global.health line-list data\n    termsOfService: 'https://global.health/terms-of-use/'\n    contact:\n        name: Global.health\n        url: https://global.health\n        email: info@global.health\n    license:\n        name: MIT\n        url: 'https://opensource.org/licenses/MIT'\n    version: 1.0.0\ntags:\n    - name: Geocode\n      description: Geolocation of a case\n    - name: Convert\n      description: Converting geocoding-related values\npaths:\n    /geocode/seed:\n        post:\n            tags: [Geocode]\n            summary: Adds geocodes to the geocoding database\n            operationId: seedGeocodes\n            requestBody:\n                description: A single geocode record\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n            responses:\n                '200':\n                    $ref: '#/components/responses/200'\n    /geocode/clear:\n        post:\n            tags: [Geocode]\n            summary: Clears geocodes from the geocoding database\n            operationId: clearGeocodes\n            responses:\n                '200':\n                    $ref: '#/components/responses/200'\n    /geocode/suggest:\n        get:\n            tags: [Suggest, Geocode]\n            summary: Suggests geocodes for a given query string\n            operationId: suggestGeocodes\n            parameters:\n                - name: q\n                  in: query\n                  description: The location string for which to find geocodes\n                  required: true\n                  allowReserved: true\n                  schema:\n                      type: string\n                - name: limitToResolution\n                  in: query\n                  allowReserved: true\n                  schema:\n                      type: string\n                  description: \u003e\n                      Comma-separated list of resolutions to restrict geocoding to.\n                      Allowed values are: Point, Admin3, Admin2, Admin1, Country.\n            responses:\n                '200':\n                    $ref: '#/components/responses/200LocationArray'\n                '422':\n                    $ref: '#/components/responses/422'\n                '500':\n                    $ref: '#/components/responses/500'\n    /geocode/convertUTM:\n        get:\n            tags: [Convert]\n            summary: Convert UTM coordinates to latitude/longitude.\n            operationId: convert\n            parameters:\n                - name: n\n                  in: query\n                  description: The northing coordinate (UTMY)\n                  required: true\n                  schema:\n                    type: number\n                - name: e\n                  in: query\n                  description: The easting coordinate (UTMX)\n                  required: true\n                  schema:\n                    type: number\n                - name: z\n                  in: query\n                  required: true\n                  description: The UTM zone.\n                  schema:\n                    type: number\n            responses:\n                '200':\n                    $ref: '#/components/responses/200Position'\n                '400':\n                    $ref: '#/components/responses/400'\n                '500':\n                    $ref: '#/components/responses/500'\n    /geocode/countryName:\n        get:\n            tags: [Convert]\n            summary: Convert ISO-3166-1 2-letter country code to the country's name.\n            operationId: countryName\n            parameters:\n                - name: c\n                  in: query\n                  required: true\n                  description: The ISO-3166-1 country code\n                  example: CR\n                  schema:\n                    type: string\n            responses:\n                '200':\n                    $ref: '#/components/responses/200String'\n                '400':\n                    $ref: '#/components/responses/400'\n                '404':\n                    $ref: '#/components/responses/404'\n                '500':\n                    $ref: '#/components/responses/500'\n                    \ncomponents:\n    schemas:\n        Location:\n            type: object\n            properties:\n                query:\n                    type: string\n                country:\n                    type: string\n                    description: ISO-3166-2 code of a country\n                    minLength: 2\n                    maxLength: 2\n                    example: CR\n                administrativeAreaLevel1:\n                    type: string\n                administrativeAreaLevel2:\n                    type: string\n                administrativeAreaLevel3:\n                    type: string\n                place:\n                    type: string\n                name:\n                    type: string\n                geoResolution:\n                    type: string\n                geometry:\n                    $ref: '#/components/schemas/Position'\n        LocationArray:\n            description: A list of geo locations\n            type: array\n            items:\n                $ref: '#/components/schemas/Location'\n        Position:\n            type: object\n            properties:\n                latitude:\n                    type: number\n                    minimum: -90\n                    maximum: 90\n                longitude:\n                    type: number\n                    minimum: -180\n                    maximum: 180\n            required:\n                - latitude\n                - longitude\n    responses:\n        '200LocationArray':\n            description: OK\n            content:\n                application/json:\n                    schema:\n                        $ref: '#/components/schemas/LocationArray'\n        '200Position':\n            description: OK\n            content:\n                application/json:\n                    schema:\n                        $ref: '#components/schemas/Position'\n        '200String':\n            description: OK\n            content:\n                application/json:\n                    schema:\n                        type: string\n        '200':\n            description: OK\n        '400':\n            description: Malformed request\n        '403':\n            description: Forbidden\n        '404':\n            description: Not found\n        '422':\n            description: Unprocessable entity\n        '500':\n            description: Internal server error\nservers:\n    - url: http://localhost:8080/\n      description: Local server\n",
			"canonicalURL": "/github.com/globaldothealth/list@5e525d0b9bff042fdf7c6fb3be0b9c170d58d32a/-/blob/geocoding/location-service/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/globaldothealth/list/blob/5e525d0b9bff042fdf7c6fb3be0b9c170d58d32a/geocoding/location-service/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:2126: json: cannot unmarshal bool into Go struct field Parameter.paths.get.parameters.name of type string"
}