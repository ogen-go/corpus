{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/swagger-api/swagger-inflector"
		},
		"file": {
			"name": "sample1.yaml",
			"size": 0,
			"path": "src/test/swagger/sample1.yaml",
			"byteSize": 17229,
			"content": "---\nopenapi: 3.0\ninfo:\n  title: Test Service\n  description: description\n  termsOfService: terms\n  contact:\n    name: API Team\n    url: http://swagger.io\n    email: apiteam@swagger.io\n  license:\n    name: MIT\n    url: http://opensource.org/licenses/MIT\n  version: 0.0.0\nbasePath: /api\npaths:\n  \"/producesTest\":\n    get:\n      parameters: []\n      responses:\n        '200':\n          description: it works\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  name:\n                    type: string\n  \"/fileUpload\":\n    post:\n      x-swagger-router-controller: TestController\n      operationId: uploadFile\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                theFile:\n                  type: string\n                  format: binary\n                stringMetadata:\n                  type: string\n                intMetadata:\n                  type: integer\n                  format: int32\n      responses:\n        '200':\n          description: the stringMetadata passed in\n          content:\n            \"*/*\":\n              schema:\n                type: string\n  \"/primitiveBody/inline\":\n    post:\n      operationId: inlineRequiredBody\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n        required: true\n      responses:\n        '200':\n          description: ok!\n  \"/primitiveBody/string\":\n    post:\n      operationId: stringBody\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              type: string\n        required: false\n      responses:\n        '200':\n          description: ok!\n  \"/primitiveBody/integer\":\n    post:\n      operationId: integerBody\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              type: integer\n              format: int32\n        required: false\n      responses:\n        '200':\n          description: ok!\n  \"/primitiveBody/binary\":\n    post:\n      operationId: binaryBody\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n        required: false\n      responses:\n        '200':\n          description: ok!\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n  \"/hidden\":\n    get:\n      responses:\n        default:\n          description: ok\n  \"/arrayInputTest\":\n    get:\n      operationId: arrayInputTest\n      parameters:\n      - name: users\n        in: query\n        required: true\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        '200':\n          description: success!\n  \"/formTest\":\n    post:\n      operationId: formTest\n      requestBody:\n        content:\n          x-www-form-urlencoded:\n            schema:\n              properties:\n                user:\n                  type: string\n      responses:\n        '200':\n          description: success!\n  \"/mockResponses\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n  \"/mockResponses/primitiveFloatResponse\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: number\n                format: float\n  \"/mockResponses/primitiveDoubleResponse\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: number\n                format: double\n  \"/mockResponses/primitiveStringResponse\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: string\n  \"/mockResponses/primitiveStringResponseWithExample\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: string\n  \"/mockResponses/responseWithExamples\":\n    get:\n      responses:\n        '200':\n          description: success!\n  \"/mockResponses/primitiveDateResponse\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: string\n                format: date\n  \"/mockResponses/primitiveDateTimeResponse\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: string\n                format: date-time\n  \"/mockResponses/primitiveBigDecimalResponse\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: number\n  \"/mockResponses/primitiveEmailResponse\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: string\n                format: email\n  \"/mockResponses/primitiveUUIDResponse\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: string\n                format: uuid\n  \"/mockResponses/primitiaveMapResponse\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n  \"/mockResponses/complexResponse\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Address\"\n  \"/mockResponses/complexResponseWithExample\":\n    get:\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n  \"/mockResponses/complexArrayResponse\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: array\n  \"/mockResponses/complexArrayResponseWithExample\":\n    get:\n      parameters:\n      - name: user\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                type: array\n  \"/issue-125\":\n    get:\n      responses:\n        '200':\n          description: int16\n          content:\n            \"*/*\":\n              schema:\n                type: integer\n                format: int16\n  \"/issue-128\":\n    get:\n      responses:\n        '303':\n          description: issue 128\n          content:\n            \"*/*\":\n              schema:\n                type: string\n                format: url\n  \"/issue-130\":\n    get:\n      responses:\n        '200':\n          description: issue 130\n          content:\n            \"*/*\":\n              schema:\n                type: object\n                properties:\n                  aStringArray:\n                    type: array\n                  anIntegerArray:\n                    type: array\n                description: an object with array properties\n  \"/issue-132\":\n    get:\n      responses:\n        '303':\n          description: issue 132\n  \"/issue-132.2\":\n    get:\n      responses:\n        '303':\n          description: issue 133, alternate example\n  \"/form\":\n    post:\n      operationId: postFormData\n      requestBody:\n        content: {}\n      responses:\n        '200':\n          description: ok\n  \"/goodbye\":\n    get:\n      operationId: goodbye\n      parameters:\n      - name: happy\n        in: query\n        required: true\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n  \"/hello\":\n    get:\n      operationId: testMe\n      parameters:\n      - name: limit\n        in: query\n        required: true\n        schema:\n          minimum: 0\n          type: integer\n          format: int32\n      - name: min\n        in: query\n        required: true\n        schema:\n          minimum: 10\n          type: integer\n          format: int32\n      responses:\n        '200':\n          description: fun!\n          content:\n            application/json:\n              schema:\n                type: string\n  \"/withModelArray/{id}\":\n    post:\n      operationId: withModelArray\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              type: array\n        required: true\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/Animal\"\n  \"/withModel/{id}\":\n    get:\n      operationId: withModel\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/Animal\"\n    post:\n      operationId: withModel\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              \"$ref\": \"#/components/schemas/Address\"\n        required: false\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/Address\"\n  \"/withInvalidComposedModel\":\n    post:\n      operationId: withInvalidComposedModel\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              \"$ref\": \"#/components/schemas/ExtendedAddress\"\n        required: false\n      responses:\n        '200':\n          description: success!\n  \"/withValidComposedModel\":\n    post:\n      operationId: withValidComposedModel\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              \"$ref\": \"#/components/schemas/ExtendedAddress\"\n        required: false\n      responses:\n        '200':\n          description: success!\n  \"/withInvalidComposedModelArray\":\n    post:\n      operationId: withInvalidComposedModelArray\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              type: array\n        required: false\n      responses:\n        '200':\n          description: success!\n  \"/unmappedWithModel/{id}\":\n    post:\n      operationId: unmappedWithModelInput\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              \"$ref\": \"#/components/schemas/Address\"\n        required: false\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/Address\"\n  \"/mappedWithDefinedModel/{id}\":\n    post:\n      operationId: mappedWithDefinedModel\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              \"$ref\": \"#/components/schemas/Dog\"\n        required: false\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/Dog\"\n  \"/unmappedWithUndefinedModel/{id}\":\n    post:\n      operationId: unmappedWithUndefinedModel\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              \"$ref\": \"#/components/schemas/UnmappedModel\"\n        required: false\n      responses:\n        '200':\n          description: success!\n  \"/withPath/{id}\":\n    get:\n      operationId: withPath\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n  \"/withDate/{date}\":\n    get:\n      operationId: withDateTime\n      parameters:\n      - name: date\n        in: path\n        required: true\n        schema:\n          type: string\n          format: date-time\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n  \"/withIntegerEnum/{stage}\":\n    get:\n      operationId: withDateTime\n      parameters:\n      - name: stage\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int32\n          enum:\n          - 1\n          - 2\n          - 3\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n  \"/overloaded\":\n    get:\n      operationId: overloadedResponse\n      parameters:\n      - name: arg1\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: success!\n          content:\n            \"*/*\":\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n  \"/throwApiException\":\n    get:\n      operationId: throwApiException\n      responses:\n        '200':\n          description: success!\n  \"/throwApiExceptionAsCause\":\n    get:\n      operationId: throwApiExceptionAsCause\n      responses:\n        '200':\n          description: success!\n  \"/throwNonApiException\":\n    get:\n      operationId: throwNonApiException\n      responses:\n        '200':\n          description: success!\n  \"/returnNonRfc2616Status\":\n    get:\n      operationId: returnNonRfc2616Status\n      responses:\n        '200':\n          description: success!\n  \"/responseHeaders\":\n    get:\n      operationId: returnWithResponseHeaders\n      responses:\n        '200':\n          description: success\ncomponents:\n  schemas:\n    Water:\n      properties:\n        clear:\n          type: boolean\n        name:\n          type: string\n        prices:\n          type: array\n        id:\n          type: string\n          format: uuid\n    ExtendedAddress: {}\n    User:\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      description: the name!\n    Address:\n      required:\n      - street\n      type: object\n      properties:\n        street:\n          type: string\n        city:\n          type: string\n        state:\n          type: string\n        zip:\n          type: string\n    UnmappedModel:\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Animal:\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        address:\n          \"$ref\": \"#/components/schemas/Address\"\n      description: the name!\n    Dog:\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        dogType:\n          type: string\n"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal number into Go struct field Alias.openapi of type string"
}