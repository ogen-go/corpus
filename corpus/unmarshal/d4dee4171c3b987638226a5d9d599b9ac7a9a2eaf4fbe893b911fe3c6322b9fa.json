{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/finos/symphony-api-spec"
		},
		"file": {
			"name": "profile-manager-api.yaml",
			"size": 0,
			"path": "profile-manager/profile-manager-api.yaml",
			"byteSize": 35715,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Symphony Profile Manager\n  description: Profile Manager is a microservice to manage users profile and groups\n\nservers:\n  - url: /profile-manager\n\npaths:\n  /v1/groups/{groupId}/member:\n    post:\n      summary: Add a new user to a an existing group\n      parameters:\n        - in: header\n          name: X-Symphony-Host\n          schema:\n            type: string\n            description: headers to indentify the origin\n            nullable: false\n            minLength: 1\n            example: localhost.symphony.com\n          required: true\n        - in: path\n          name: groupId\n          schema:\n            type: string\n            nullable: false\n            description: Group id\n            example: WzEwMF1bU0RMXVtUZXN0IEdyb3VwXQ\n          required: true\n      description: Add a new user to a an existing group\n      operationId: addMemberToGroup\n      tags:\n        - group\n      requestBody:\n        $ref: '#/components/requestBodies/AddMemberRequestBody'\n      responses:\n        '200':\n          description: Successful response. Returns the group with the new add user as a member\n          headers:\n            Etag:\n              schema:\n                type: string\n                example: e3a52e72-0854-4401-8c24-e0b17c0ca304\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReadGroup'\n        '400':\n          description: Returned if missing required parameters or wrong parameters\n          $ref: './symphony-common-definitions.yaml#/components/responses/BadRequest'\n        '401':\n          description: Returned if wrong or missing JWT token\n          $ref: './symphony-common-definitions.yaml#/components/responses/Unauthorized'\n        '403':\n          description: Returned if JWT token missing the required entitlement\n          $ref: './symphony-common-definitions.yaml#/components/responses/Forbidden'\n        '429':\n          description: Returned if the backend is overloaded\n          $ref: '#/components/responses/TooManyRequests'\n        '452':\n          description: Returned if there is a violation in info barrier rules. This error is not relevant in case of a Company group\n          $ref: '#/components/responses/InfoBarrierViolation'\n\n  /v1/groups:\n    post:\n      summary: Insert a new group\n      parameters:\n        - in: header\n          name: X-Symphony-Host\n          schema:\n            type: string\n            description: headers to indentify the originator\n            nullable: false\n            minLength: 1\n            example: localhost.symphony.com\n          required: true\n      description: Insert a new group into database\n      operationId: insertGroup\n      tags:\n        - group\n      requestBody:\n        $ref: '#/components/requestBodies/CreateGroupBody'\n      responses:\n        '201':\n          description: Successful response. Returns the group just created with the new added member\n          headers:\n            Etag:\n              schema:\n                type: string\n                example: e3a52e72-0854-4401-8c24-e0b17c0ca304\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReadGroup'\n        '400':\n          description: Returned if missing required parameters, Trying to add a member which is already existing within the group list of members,\n            or the requested user member is already a part of company group in case of a company group type\n          $ref: './symphony-common-definitions.yaml#/components/responses/BadRequest'\n        '401':\n          description: Returned if wrong or missing JWT token\n          $ref: './symphony-common-definitions.yaml#/components/responses/Unauthorized'\n        '403':\n          description: Returned if JWT token missing the required entitlement\n          $ref: './symphony-common-definitions.yaml#/components/responses/Forbidden'\n        '429':\n          description: Returned if the backend is overloaded\n          $ref: '#/components/responses/TooManyRequests'\n        '452':\n          description: Returned if there is a violation in info barrier rules. This error is not relevant in case of a Company group\n          $ref: '#/components/responses/InfoBarrierViolation'\n\n  /v1/groups/{groupId}:\n    get:\n      summary: Retrieve a group\n      parameters:\n        - in: header\n          name: X-Symphony-Host\n          schema:\n            type: string\n            description: headers to indentify the originator\n            nullable: false\n            minLength: 1\n            example: localhost.symphony.com\n          required: true\n        - in: path\n          name: groupId\n          schema:\n            type: string\n          required: true\n          description: Group id\n          example: WzEwMF1bU0RMXVtUZXN0IEdyb3VwXQ\n      description: Retrieve a group\n      operationId: getGroup\n      tags:\n        - group\n      responses:\n        '200':\n          description: Successful response. Returns the group\n          headers:\n            Etag:\n              schema:\n                type: string\n                example: e3a52e72-0854-4401-8c24-e0b17c0ca304\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReadGroup'\n        '400':\n          description: Returned if missing required parameters or wrong parameters\n          $ref: './symphony-common-definitions.yaml#/components/responses/BadRequest'\n        '401':\n          description: Returned if wrong or missing JWT token\n          $ref: './symphony-common-definitions.yaml#/components/responses/Unauthorized'\n        '403':\n          description: Returned if JWT token missing the required entitlement\n          $ref: './symphony-common-definitions.yaml#/components/responses/Forbidden'\n        '404':\n          description: Returned if groupId is not found\n          $ref: './symphony-common-definitions.yaml#/components/responses/NotFound'\n        '429':\n          description: Returned if the backend is overloaded\n          $ref: '#/components/responses/TooManyRequests'\n    put:\n      summary: Update a group\n      parameters:\n        - in: header\n          name: X-Symphony-Host\n          schema:\n            type: string\n            description: headers to indentify the originator\n            nullable: false\n            minLength: 1\n            example: localhost.symphony.com\n          required: true\n        - in: header\n          name: If-Match\n          schema:\n            type: string\n            description: ETag of group to be updated\n            example: e3a52e72-0854-4401-8c24-e0b17c0ca304\n          required: true\n        - in: path\n          name: groupId\n          schema:\n            type: string\n          required: true\n          description: Group id\n          example: 60af77fd294165466ccdf510\n      description: Update an existing group\n      operationId: updateGroup\n      tags:\n        - group\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateGroupBody'\n      responses:\n        '200':\n          description: Successful response. Returns the group just updated\n          headers:\n            Etag:\n              schema:\n                type: string\n                example: e3a52e72-0854-4401-8c24-e0b17c0ca304\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReadGroup'\n        '400':\n          description: Returned if missing required parameters or wrong parameters\n          $ref: './symphony-common-definitions.yaml#/components/responses/BadRequest'\n        '401':\n          description: Returned if wrong or missing JWT token\n          $ref: './symphony-common-definitions.yaml#/components/responses/Unauthorized'\n        '403':\n          description: Returned if JWT token missing the required entitlement\n          $ref: './symphony-common-definitions.yaml#/components/responses/Forbidden'\n        '404':\n          description: Returned if groupId is not found\n          $ref: './symphony-common-definitions.yaml#/components/responses/NotFound'\n        '412':\n          description: The update is rejected because concurrent update\n          $ref: './symphony-common-definitions.yaml#/components/responses/PreconditionFailed'\n        '429':\n          description: Returned if the backend is overloaded\n          $ref: '#/components/responses/TooManyRequests'\n        '452':\n          description: Returned if there is a violation in info barrier rules. This error is not relevant in case of a Company group\n          $ref: '#/components/responses/InfoBarrierViolation'\n\n  /v1/groups/type/{typeId}:\n    get:\n      summary: List all groups of specified type\n      parameters:\n        - in: header\n          name: X-Symphony-Host\n          schema:\n            type: string\n            description: headers to indentify the originator\n            nullable: false\n            minLength: 1\n            example: localhost.symphony.com\n          required: true\n        - in: path\n          name: typeId\n          schema:\n            type: string\n          required: true\n          description: Group type id\n          example: SDL\n        - in: query\n          name: status\n          schema:\n            $ref: '#/components/schemas/Status'\n          required: false\n          description: filter by status, active or deleted. If not specified both are returned\n          example: ACTIVE\n        - in: query\n          name: before\n          schema:\n            type: string\n          required: false\n          description: NOT SUPPORTED YET, currently ignored. Cursor that points to the start of the current page of data. If not present, the current page is the first page\n        - in: query\n          name: after\n          schema:\n            type: string\n          required: false\n          description: cursor that points to the end of the current page of data. If not present, the current page is the last page\n        - in: query\n          name: limit\n          schema:\n            type: integer\n          required: false\n          description: numbers of items to return\n          example: 100\n        - in: query\n          name: sortOrder\n          schema:\n            $ref: '#/components/schemas/SortOrder'\n          required: false\n          description: items sorting direction (ordered by createdDate)\n          example: ASC\n      operationId: listGroups\n      tags:\n        - group\n      responses:\n        '200':\n          description: Successful response. Returns the list of all groups\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupList'\n        '400':\n          description: Returned if missing required parameters or wrong parameters\n          $ref: './symphony-common-definitions.yaml#/components/responses/BadRequest'\n        '401':\n          description: Returned if wrong or missing JWT token\n          $ref: './symphony-common-definitions.yaml#/components/responses/Unauthorized'\n        '403':\n          description: Returned if JWT token missing the required entitlement\n          $ref: './symphony-common-definitions.yaml#/components/responses/Forbidden'\n        '404':\n          description: Returned if typeId is not found\n          $ref: './symphony-common-definitions.yaml#/components/responses/NotFound'\n        '429':\n          description: Returned if the backend is overloaded\n          $ref: '#/components/responses/TooManyRequests'\n\n  /v1/groups/{groupId}/avatar:\n    post:\n      summary: Update the group avatar\n      parameters:\n        - in: header\n          name: X-Symphony-Host\n          schema:\n            type: string\n            description: headers to indentify the originator\n            nullable: false\n            minLength: 1\n            example: localhost.symphony.com\n          required: true\n        - in: path\n          name: groupId\n          schema:\n            type: string\n          required: true\n          description: Group id\n          example: 60af77fd294165466ccdf510\n      description: Update the group account avatar\n      operationId: updateAvatar\n      tags:\n        - group\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateAvatar'\n      responses:\n        '200':\n          description: Successful response. Returns the group with the avatar updated\n          headers:\n            Etag:\n              schema:\n                type: string\n                example: e3a52e72-0854-4401-8c24-e0b17c0ca304\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReadGroup'\n        '400':\n          description: Returned if missing required parameters or wrong parameters\n          $ref: './symphony-common-definitions.yaml#/components/responses/BadRequest'\n        '401':\n          description: Returned if wrong or missing JWT token\n          $ref: './symphony-common-definitions.yaml#/components/responses/Unauthorized'\n        '403':\n          description: Returned if JWT token missing the required entitlement\n          $ref: './symphony-common-definitions.yaml#/components/responses/Forbidden'\n        '404':\n          description: Returned if groupId is not found\n          $ref: './symphony-common-definitions.yaml#/components/responses/NotFound'\n        '429':\n          description: Returned if the backend is overloaded\n          $ref: '#/components/responses/TooManyRequests'\n\n  /v1/groups/deleteAll:\n    delete:\n      summary: Delete all data related to the current pod (extracted from JWT). This endpoint is for maintenance/test and it is usually disabled or restricted\n      parameters:\n        - in: header\n          name: X-Symphony-Host\n          schema:\n            type: string\n            description: headers to indentify the originator\n            nullable: false\n            minLength: 1\n            example: localhost.symphony.com\n          required: true\n      operationId: deleteAllGroups\n      tags:\n        - group\n      responses:\n        '200':\n          description: Successful response. Returns the list of all groups (it should be empty)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupList'\n        '400':\n          description: Returned if missing required parameters or wrong parameters\n          $ref: './symphony-common-definitions.yaml#/components/responses/BadRequest'\n        '401':\n          description: Returned if wrong or missing JWT token\n          $ref: './symphony-common-definitions.yaml#/components/responses/Unauthorized'\n        '403':\n          description: Returned if JWT token missing the required entitlement\n          $ref: './symphony-common-definitions.yaml#/components/responses/Forbidden'\n        '429':\n          description: Returned if the backend is overloaded\n          $ref: '#/components/responses/TooManyRequests'\n\n  /v1/types:\n    get:\n      summary: List all types\n      parameters:\n        - in: header\n          name: X-Symphony-Host\n          schema:\n            type: string\n            description: headers to indentify the originator\n            nullable: false\n            minLength: 1\n            example: localhost.symphony.com\n          required: true\n        - in: query\n          name: status\n          schema:\n            $ref: '#/components/schemas/Status'\n          required: false\n          example: ACTIVE\n        - in: query\n          name: before\n          schema:\n            type: string\n          required: false\n          description: NOT SUPPORTED YET, currently ignored. Cursor that points to the start of the current page of data. If not present, the current page is the first page\n        - in: query\n          name: after\n          schema:\n            type: string\n          required: false\n          description: cursor that points to the end of the current page of data. If not present, the current page is the last page\n        - in: query\n          name: limit\n          schema:\n            type: integer\n          required: false\n          description: numbers of items to return\n          example: 100\n        - in: query\n          name: sortOrder\n          schema:\n            $ref: '#/components/schemas/SortOrder'\n          required: false\n          description: items sorting direction (ordered by createdDate)\n          example: ASC\n      operationId: listTypes\n      tags:\n        - type\n      responses:\n        '200':\n          description: Successful response. Returns the list of all types\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TypeList'\n        '401':\n          description: Returned if wrong or missing JWT token\n          $ref: './symphony-common-definitions.yaml#/components/responses/Unauthorized'\n        '403':\n          description: Returned if JWT token missing the required entitlement\n          $ref: './symphony-common-definitions.yaml#/components/responses/Forbidden'\n        '429':\n          description: Returned if the backend is overloaded\n          $ref: '#/components/responses/TooManyRequests'\n\n  /v1/types/{typeId}:\n    get:\n      summary: Retrieve a type\n      parameters:\n        - in: header\n          name: X-Symphony-Host\n          schema:\n            type: string\n            description: headers to indentify the originator\n            nullable: false\n            minLength: 1\n            example: localhost.symphony.com\n          required: true\n        - in: path\n          name: typeId\n          schema:\n            type: string\n          required: true\n          description: Type id\n          example: SDL\n      description: Retrieve a type\n      operationId: getType\n      tags:\n        - type\n      responses:\n        '200':\n          description: Successful response. Returns the type\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Type'\n        '400':\n          description: Returned if missing required parameters or wrong parameters\n          $ref: './symphony-common-definitions.yaml#/components/responses/BadRequest'\n        '401':\n          description: Returned if wrong or missing JWT token\n          $ref: './symphony-common-definitions.yaml#/components/responses/Unauthorized'\n        '403':\n          description: Returned if JWT token missing the required entitlement\n          $ref: './symphony-common-definitions.yaml#/components/responses/Forbidden'\n        '404':\n          description: Returned if type id is not found\n          $ref: './symphony-common-definitions.yaml#/components/responses/NotFound'\n        '429':\n          description: Returned if the backend is overloaded\n          $ref: '#/components/responses/TooManyRequests'\n\ncomponents:\n  schemas:\n    BaseGroup:\n      description: >-\n        A reduced set Group object, for retrieving list of group purpose\n      properties:\n        type:\n          type: string\n          nullable: false\n          minLength: 1\n          description: Group type identifier\n          example: SDL\n        ownerType:\n          $ref: '#/components/schemas/Owner'\n          nullable: false\n        ownerId:\n          type: integer\n          format: int64\n          description: Owner id if the owner type is tenant (podId) or user (userId), otherwise null\n          example: 100\n        name:\n          type: string\n          nullable: false\n          minLength: 1\n          description: Group's name\n          example: Test Group\n      required:\n        - type\n        - ownerType\n        - ownerId\n        - name\n\n    ReadGroup:\n      allOf:\n        - $ref: '#/components/schemas/BaseGroup'\n        - type: object\n          required:\n            - rootCause\n          properties:\n            id:\n              type: string\n              description: Group's unique identifier\n            # Metadata fields required by\n            # https://perzoinc.atlassian.net/wiki/spaces/SysArch/pages/408977427/API+2.0+Standards#API2.0Standards-MetadataFields\n            # eTag is on ReadGroup, to avoid allow update a group when only partial group information has been retrieved\n            createdDate:\n              type: string\n              format: date-time\n            createdBy:\n              type: string\n            updatedDate:\n              type: string\n              format: date-time\n            updatedBy:\n              type: string\n            status:\n              $ref: '#/components/schemas/Status'\n            # End metadata fields\n            eTag:\n              type: string\n              example: e3a52e72-0854-4401-8c24-e0b17c0ca304\n            subType:\n              type: string\n              enum: [ COMMUNITY, CHANNEL ]\n              description: The type of the company group, This field is mandatory in case of a company group type, but not applicable for Symphony Distribution List\n              example: COMMUNITY\n            referrer:\n              type: string\n              description: The referring company name. This field is mandatory in case of a company group type, but not applicable for Symphony Distribution List\n              example: Symphony, referring company name, referring channel partner name\n            members:\n              type: array\n              items:\n                $ref: '#/components/schemas/ReadMember'\n            profile:\n              $ref: '#/components/schemas/Profile'\n              description: The profile is not supported for company group, but only works with SDL as group type\n            visibilityRestriction:\n              $ref: '#/components/schemas/GroupVisibilityRestriction'\n            implicitConnection:\n              $ref: '#/components/schemas/GroupImplicitConnection'\n            interactionTransfer:\n              $ref: '#/components/schemas/GroupInteractionTransfer'\n\n    CreateGroup:\n      allOf:\n        - $ref: '#/components/schemas/BaseGroup'\n        - type: object\n          required:\n            - rootCause\n          properties:\n            subType:\n              type: string\n              enum: [ COMMUNITY, CHANNEL]\n              description: The type of the company group, This field is mandatory in case of a company group type, but not applicable for Symphony Distribution List\n              example: COMMUNITY\n            referrer:\n              type: string\n              description: The referring company name. This field is mandatory in case of a company group type, but not applicable for Symphony Distribution List\n              example: Symphony, referring company name, referring channel partner name\n            members:\n              type: array\n              items:\n                $ref: '#/components/schemas/Member'\n            profile:\n              $ref: '#/components/schemas/BaseProfile'\n              description: The profile is not supported for company group, but only works with SDL as group type\n              required: true\n            visibilityRestriction:\n              $ref: '#/components/schemas/GroupVisibilityRestriction'\n            implicitConnection:\n              $ref: '#/components/schemas/GroupImplicitConnection'\n            interactionTransfer:\n              $ref: '#/components/schemas/GroupInteractionTransfer'\n\n    UpdateGroup:\n      allOf:\n        - $ref: '#/components/schemas/CreateGroup'\n        - type: object\n          required:\n            - rootCause\n          properties:\n            id:\n              type: string\n              description: Group's unique identifier\n              nullable: false\n              minLength: 1\n              example: 60af77fd294165466ccdf510\n            status:\n              $ref: '#/components/schemas/Status'\n            eTag:\n              type: string\n              example: e3a52e72-0854-4401-8c24-e0b17c0ca304\n              nullable: false\n              minLength: 1\n\n    Member:\n      description: >-\n        A Group member.\n      properties:\n        memberTenant:\n          type: integer\n          description: Member's tenant id\n          nullable: false\n          example: 100\n        memberId:\n          type: integer\n          format: int64\n          description: Member's user id\n          nullable: false\n          example: 12345678900000\n\n    ReadMember:\n      allOf:\n        - $ref: '#/components/schemas/Member'\n        - type: object\n          required:\n            - rootCause\n          properties:\n            addedDate:\n              description: Date/time when the member has been added in the group in ISO-8601 format (YYYY-MM-DDThh:mm:ss.sZ)\n              type: string\n              format: 'date-time'\n            status:\n              description: Some group types (e.g. COMPANY) keep disabled users, flagging them as DISABLED. However, this attribute is not relevant for group types (e.g. SDL) that remove (instead of flag) disabled user from group\n              type: string\n              enum: [ ENABLED, DISABLED ]\n              example: ENABLED\n\n    GroupVisibilityRestriction:\n      description: >-\n        Group visibility restriction.\n      properties:\n        restrictedTenantsList:\n          type: array\n          items:\n            type: integer\n          example: [100]\n        restrictedUsersList:\n          type: array\n          items:\n            type: integer\n            format: int64\n          example: [12345678900000]\n\n    GroupImplicitConnection:\n      description: >-\n        Group implicit connections.\n      properties:\n        connectedTenantsList:\n          type: array\n          items:\n            type: integer\n          example: [100]\n        connectedUsersList:\n          type: array\n          items:\n            type: integer\n            format: int64\n          example: [12345678900000]\n\n    GroupInteractionTransfer:\n      description: >-\n        Group interaction transfer.\n      properties:\n        restrictedTenantsList:\n          type: array\n          items:\n            type: integer\n          example: [100]\n        restrictedUsersList:\n          type: array\n          items:\n            type: integer\n            format: int64\n          example: [12345678900000]\n\n    BaseProfile:\n      description: The group's profile. Please note that in case of a company group type, the profile shouldn't be provided when creating a new company and do not exist in case of an existing company group\n      properties:\n        displayName:\n          type: string\n          description: >-\n            The display name in Directory, it is expected to be the same as group name\n          nullable: false\n          minLength: 1\n          example: Test Group\n        companyName:\n          type: string\n          description: >-\n            The company name is expected to be the same as group company owner\n          example: Acme Corporation\n        email:\n          type: string\n          example: testgroup@acme.com\n        mobile:\n          type: string\n          example: +33(0)600000000\n        jobTitle:\n          type: string\n        jobRole:\n          type: string\n          example: Director\n        jobDepartment:\n          type: string\n        jobDivision:\n          type: string\n        jobPhone:\n          type: string\n        jobCity:\n          type: string\n        industryOfInterest:\n          type: array\n          items:\n            type: string\n          example: [\"Services\"]\n        assetClassesOfInterest:\n          type: array\n          items:\n            type: string\n          example: [\"Equities\"]\n        marketCoverage:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n          example: [\"EMEA\"]\n        responsibility:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n          example: [\"Escalation\"]\n        function:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n          example: [\"Collateral\"]\n        instrument:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n          example: [\"Equities\"]\n\n    Profile:\n      allOf:\n        - $ref: '#/components/schemas/BaseProfile'\n        - type: object\n          required:\n            - rootCause\n          properties:\n            id:\n              type: string\n              description: Profile unique identifier\n            avatars:\n              type: array\n              items:\n                $ref: '#/components/schemas/Avatar'\n\n    Avatar:\n      properties:\n        size:\n          type: string\n        url:\n          type: string\n\n    BaseType:\n      description: >-\n        A reduced set Type object, for retrieving list of types purpose\n      properties:\n        id:\n          type: string\n          description: Type identifier\n          example: SDL\n        ownerType:\n          $ref: '#/components/schemas/Owner'\n          example: TENANT\n        name:\n          type: string\n          description: Type's name\n          example: Symphony Distribution List\n        status:\n          $ref: '#/components/schemas/Status'\n\n    Type:\n      allOf:\n        - $ref: '#/components/schemas/BaseType'\n        - type: object\n          required:\n            - rootCause\n          properties:\n            profileControl:\n              $ref: '#/components/schemas/ProfileControl'\n            membershipControl:\n              $ref: '#/components/schemas/MembershipControl'\n            interactionControl:\n              $ref: '#/components/schemas/InteractionControl'\n\n    ProfileControl:\n      properties:\n        visibilityRestriction:\n          $ref: '#/components/schemas/VisibilityRestriction'\n        implicitConnection:\n          $ref: '#/components/schemas/ImplicitConnection'\n        wallSupport:\n          type: boolean\n          description: Not supported yet\n        profileFields:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n        searchFields:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n        canHavePublicProfile:\n          type: boolean\n          description: For the SDL groupe type this flag is true, for the company groupe type it is false\n          default: true\n\n    MembershipControl:\n      properties:\n        entitlements:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n        manualMembership:\n          type: boolean\n        ruleMembership:\n          type: boolean\n          description: Not supported yet\n        updateMembershipOnRuleUpdate:\n          type: boolean\n          description: Not supported yet\n        notifyMembersOnUpdate:\n          type: boolean\n        canBelongToMultipleGroup:\n          type: boolean\n          description: For the SDL groupe type this flag is true, for the company groupe type it is false\n          default: true\n\n    InteractionControl:\n      properties:\n        allowIMs:\n          type: boolean\n        allowRooms:\n          type: boolean\n        interactionTransfer:\n          $ref: '#/components/schemas/InteractionTransfer'\n        tagStream:\n          type: string\n        canHaveInteraction:\n          type: boolean\n          description: For the SDL groupe type this flag is true, for the company groupe type it is false\n          default: true\n\n    VisibilityRestriction:\n      properties:\n        visible:\n          type: boolean\n        restrictToTenants:\n          type: boolean\n          description: Not supported yet\n        restrictToUsers:\n          type: boolean\n          description: Not supported yet\n\n    ImplicitConnection:\n      properties:\n        all:\n          type: boolean\n        connectToTenants:\n          type: boolean\n          description: Not supported yet\n        connectToUsers:\n          type: boolean\n          description: Not supported yet\n\n    InteractionTransfer:\n      properties:\n        target:\n          type: string\n          enum: [TO_USER, TO_MEMBERS, NONE]\n          description: Only TO_MEMBERS supported now\n          example: TO_MEMBERS\n        updateInteractionOngroupUpdate:\n          type: boolean\n        systemMessageOnInteraction:\n          type: boolean\n          description: Not supported yet\n        transferView:\n          $ref: '#/components/schemas/TransferView'\n        auditTransfer:\n          type: boolean\n\n    TransferView:\n      properties:\n        visible:\n          type: boolean\n        restrictToTenants:\n          type: boolean\n        restrictToUsers:\n          type: boolean\n          description: Not supported yet\n\n    GroupList:\n      properties:\n        pagination:\n          $ref: './symphony-common-definitions.yaml#/components/schemas/Pagination'\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReadGroup'\n\n    TypeList:\n      properties:\n        pagination:\n          $ref: './symphony-common-definitions.yaml#/components/schemas/Pagination'\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/BaseType'\n\n    Owner:\n      type: string\n      enum:\n        - PLATFORM\n        - TENANT\n        - USER\n      description: Owner type. Ony TENANT supported now\n      example: TENANT\n\n    Status:\n      type: string\n      enum:\n        - ACTIVE\n        - DELETED\n      description: Status flag to distinguish between active and deleted objects\n      example: ACTIVE\n\n    SortOrder:\n      type: string\n      enum:\n        - ASC\n        - DESC\n      description: Sort query order\n      example: ASC\n\n    UploadAvatar:\n      properties:\n        image:\n          type: string\n          format: byte\n          nullable: false\n          description: >-\n            The avatar image for the user profile picture.The image must be a base64-encoded .jpg, .png, or .gif. >-\n            Image size limit: 2 MB\n    addMember:\n      properties:\n        member:\n          $ref: '#/components/schemas/Member'\n          nullable: false\n\n  requestBodies:\n    CreateGroupBody:\n      description: JSON object containing Group info\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CreateGroup'\n\n    UpdateGroupBody:\n      description: JSON object containing Group info\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UpdateGroup'\n\n    UpdateAvatar:\n      description: JSON object containing Group avatar\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UploadAvatar'\n\n    AddMemberRequestBody:\n      description: JSON object containing the user member information and the group on which he will be added to\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/addMember'\n\n  responses:\n    # FIXME: move in symphony-common-definitions.yaml\n    TooManyRequests:\n      description: Too Many Requests\n      content:\n        application/json:\n          schema:\n            $ref: './symphony-common-definitions.yaml#/components/schemas/Error'\n    InfoBarrierViolation:\n      description: Info barrier violation found between group account's members.\n      content:\n        application/json:\n          schema:\n            $ref: './symphony-common-definitions.yaml#/components/schemas/Error'\n\n  # 1) Define the security scheme type (HTTP bearer)\n  securitySchemes:\n    bearerAuth: # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\n      description: Use Common JWT\n\n# 2) Apply the security globally to all operations\nsecurity:\n  - bearerAuth: [ ]         # use the same name as above\n\n\n\n",
			"canonicalURL": "/github.com/finos/symphony-api-spec@46abc03ad7225ebc32439c06920019c9d0fb0814/-/blob/profile-manager/profile-manager-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/finos/symphony-api-spec/blob/46abc03ad7225ebc32439c06920019c9d0fb0814/profile-manager/profile-manager-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:4177: json: cannot unmarshal Go value of type ogen.Spec: spec: json: cannot unmarshal Go value of type ogen.Properties: json: cannot unmarshal JSON boolean into Go value of type []string"
}