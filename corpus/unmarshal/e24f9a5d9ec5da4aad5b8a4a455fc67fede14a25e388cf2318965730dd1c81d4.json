{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kaiheila/api-docs"
		},
		"file": {
			"name": "kaiheila-openapi-bundled.yaml",
			"size": 0,
			"path": "oas/kaiheila-openapi-bundled.yaml",
			"byteSize": 214965,
			"content": "openapi: 3.1.0\nservers:\n  - url: https://www.kaiheila.cn/api/v3\n    description: 机器人接口\ninfo:\n  title: 开黑啦机器人API v3 开发者版\n  version: 3.0.0\n  termsOfService: https://developer.kaiheila.cn/doc/privacy\n  contact:\n    email: service@kaiheila.cn\n  license:\n    name: MIT\n    url: https://github.com/kaiheila/api-docs/blob/main/LICENSE\n  description: >\n    <br>\n\n    <div style=\"background-color: #F0F0F0;padding: 12px 0px 12px\n    12px;border-left: 5px solid #F90258;\">\n\n    这不是一份官方文档，仅用于查看官方提供的OAS文件。\n\n    </div>  \n\n    <br>\n\n\n    ## 引言\n\n\n    此文档仅用于方便开发者查看、确认开黑啦机器人 API\n    接口，官方文档地址：[开黑啦开发者平台](https://developer.kaiheila.cn/doc/)\n\n\n    两份文档内容基本相同，你可以选择自己习惯的查看方式。\n\n\n    建议使用[rapidoc](https://mrin9.github.io/RapiDoc/index.html)查看此 OpenAPI\n    描述文件，示例链接：[文档查看示例](https://fi6.github.io/kaiheila-api-docs/oas/rapidoc-view.html)\n\n\n    如果发现有任何问题，请提交 Issue/Pull Request，我们将尽快进行修复与合并。\n\n\n    ## 简介\n\n\n    欢迎来到开发者酒馆，快找个位置随便坐！开发者中心的文档提供了丰富的 API\n    接口，介绍了机器人的开发语言、能力、调试等内容，帮助你快速了解机器人开发的方方面面，相信你在这里永远都不会空手而归。\n\n\n    我们将所有文档都藏在了 [GitHub](https://github.com/kaiheila/api-docs) 上，而且我们会不断添加新的功能！\n\n\n    ### Bugs\n\n\n    如果你在使用开黑啦的 API 过程中遇见了 Bug，并且希望上报给我们来纠正这个错误的话，我们提供了两种反馈方式。\n\n\n    - 你可以直接在开黑啦官方的[吐槽中心](https://kaihei.co/MqWk5H)中进行实时反馈；\n\n    - 同时我们我们也提供了在 [GitHub](https://github.com/kaiheila/api-docs) 中的 [issue\n    tracker](https://github.com/kaiheila/api-docs) 中进行反馈。\n\n\n    ### SDK\n\n\n    热心的社区开发者们已经为大家准备了多种语言的 SDK，无需重复造轮子，上手即可轻松使用！如果希望你的 SDK\n    展示在此处，请于开发者服务器内联系`小波波#9366`。\n\n\n    | 语言                  | 仓库名                          |\n    仓库地址                                        |\n    服务器邀请                             |\n\n    | --------------------- | ------------------------------- |\n    ----------------------------------------------- |\n    -------------------------------------- |\n\n    | PHP                   | kaiheila/php-bot                |\n    [仓库链接](https://github.com/kaiheila/php-bot) |\n    暂无                                   |\n\n    | JavaScript/TypeScript | fi6/KBotify & shugen002/BotRoot |\n    [仓库链接](https://github.com/fi6/kBotify)      |\n    [服务器邀请](https://kaihei.co/GO6qHj) |\n\n    | Python                | TWT233/khl.py                   |\n    [仓库链接](https://github.com/TWT233/khl.py)    |\n    [服务器邀请](https://kaihei.co/JJE0Es) |\n\n    | 易语言                | 大鑫/酷黑                       |\n    暂无                                            |\n    [服务器邀请](https://kaihei.co/GymA7P) |\n\n    | Go                    | lonelyevil/khl                  |\n    [仓库链接](https://github.com/lonelyevil/khl)   |\n    [服务器邀请](https://kaihei.co/r5s1WO) |\n\n\n    ### OpenAPI 描述文件\n\n\n    我们也提供了 OpenAPI 描述文件，你可以用来部署测试用的 Mock\n    Server，或使用生成器生成可互动文档。示例链接：[点击跳转](https://fi6.github.io/kaiheila-api-docs/oas/rapidoc-view.html)\n\n\n    ### 机器人\n\n\n    机器人是增加聊天乐趣和提升管理服务器效率的新方式。你可以通过调整机器人的[亲密度](https://developer.kaiheila.cn/bot)设置，来赋予它们独特的生命力，让它们与用户产生更为亲密的交互。当然你也可以创造一个严肃的管理机器人，或将他变成任何你想象中的样子，充分发挥你的想象力，让你的机器人变得与众不同！\n\n\n    快去创建一个属于你的[机器人](https://developer.kaiheila.cn/bot)吧！\n\n\n    ## 隐私政策\n\n\n    **更新日期：2020 年 12 月 9 日**\n\n\n    **生效日期：2020 年 12 月 9 日**\n\n\n    欢迎使用由**北京逍遥一下科技有限公司**（简称**“我们”**或**“开黑啦”**）提供服务或运营控制的“开黑啦”系列产品和服务，包括开黑啦应用程序、开黑啦移动端产品和服务（以下简称“**本平台**”）。\n\n\n    本隐私政策构成您与我们之间具法律约束力的协议，我们在此特别提醒您认真阅读、充分理解本协议各条款，特别是其中所涉及的免除、减轻我们责任的条款、对您权利限制条款、争议解决和法律适用等。**其中，限制、免责条款可能以黑体加粗或加下划线的形式提示您重点注意**。请您审慎阅读并选择接受或不接受本协议。若您不同意本隐私政策，请您停止访问或使用本平台。同时您也可以通过本隐私政策提供的联系方式与我们联系，我们将在我们的能力范围内配合您处理相关事宜。\n\n\n    ### 用户信息\n\n\n    **开黑啦 API 不得用于以下用途：**\n\n\n    - **未经开黑啦用户的明确许可**，修改开黑啦用户的账号信息。例如，未经用户允许，机器人主动将用户加入到一个新的服务器当中；\n\n    - 替代开黑啦用户**发送消息、上传文件或播放音频**；\n\n    - 无论在何种情况下，**未经开黑啦用户的明确许可**，**获取用户的密码或网页证书**。\n\n\n    ### 数据信息\n\n\n    **开黑啦 API 不得用于以下用途：**\n\n\n    - **抓取**任何开黑啦数据；\n\n    - 将开黑啦的数据用于运营机器人以外的其他用途；\n\n    - 未经用户明确许可，**分享**或**披露**任何用户的开黑啦的相关数据；\n\n    - 向任何**第三方**网络广告，数据服务商或其他**获利渠道**披露开黑啦的相关数据；\n\n    - **保留相关数据的时间**超出机器人正常运营所需要的时间；\n\n    - 违反开黑啦的**用户隐私政策**；\n\n    - 获取开黑啦**用户密码**访问开黑啦进行操作；\n\n    - **出售，许可**或以**其他方式**将开黑啦的数据商业化；\n\n    - 以违反常识或违反用户预期的方式处理开黑啦数据。\n\n\n    ### 法律规定\n\n\n    **开黑啦 API 不得用于以下用途：**\n\n\n    - 推送包含**违反法律规定的信息**（色情、赌博、毒品、政治、人身攻击、欺诈信息等）；\n\n    - **导致死亡**，**人身伤害**或**破坏环境**等任何活动；\n\n    - 鼓励或促进**非法活动**或侵犯**第三方权益**；\n\n    - **诽谤**，**骚扰**，**跟踪**，**威胁他人**或以**其他方式**违反开黑啦**用户社区准则**。\n\n\n    ### 滥用\n\n\n    **允许：**\n\n\n    - 要求您的最终用户**遵守**（非故意违反）法律、法规；\n\n    - 仅允许使用**开发者平台文档中规定的方式**访问开黑啦的 API\n\n\n    **禁止**\n\n\n    - **删除、模糊或更改**开黑啦的服务条款或这些条款中的任何**链接**、**通知**、**内容**；\n\n    - **鼓励或为用户创建**违反开黑啦服务条款的功能；\n\n    - 将 API**转授权**给第三方使用；\n\n    - 向开黑啦的产品和服务中引入**任何病毒，蠕虫，缺陷，特洛伊木马，恶意软件**或**任何具有破坏性**的内容；\n\n    - **逆向工程**或尝试从任何 API 或相关软件中**提取源代码**；\n\n    - 使用**虚假**的身份登记、登录开黑啦的开发者账户；\n\n    - 鼓励或允许第三方**违反开黑啦开发者隐私政策**；\n\n    - **干扰**或**中断**开黑啦的 API 服务器或网络。\n\n\n    ### 限制\n\n\n    开黑啦规定了对 API 的**使用限制**（例如：单位时间内发送 API 请求的数量，机器人所在服务器的数量，机器人可以服务的用户数量）。\n\n    如果您想使用超出此类限制的任何 API，必须获得开黑啦的书面授权。\n\n\n    ### 投诉与处罚规范\n\n\n    开黑啦的机器人已启用用户投诉处理机制，我们会根据用户的投诉，视违规程度予以不同程度的处罚措施。\n\n\n    我们理解你的违规行为可能基于失误、疏忽等过失，因此，若你的机器人存在不符合法律法规和平台规则等情形而被处理，开黑啦提供了邮件申诉渠道，你可以对你的机器人进行整改后，通过申诉渠道重新向开黑啦提交发布审核。\n\n\n    ### 变更\n\n\n    本隐私政策一旦发生任何重大变更，我们将尽合理努力向所有用户广而告之，例如通过在本平台上发布通知；但您应定期查看本隐私政策，以查看有关变更。我们还会更新本隐私政策顶部的“更新日期”和“生效日期”。您在本隐私政策更新之后继续访问或使用本平台，即视为您接受更新后的隐私政策。如果您不同意更新后的隐私政策，请您停止访问或使用本平台。\n\n\n    ### 联系方式\n\n\n    与本政策相关的任何疑问、意见或请求，请发送至\n\n    [service@kaiheila.cn](mailto:service@kaiheila.cn)。\n\n    一般情况下，我们会在收到您相关联系信息并核实您身份后的【15】日内回复。\n\n\n    ### 其他\n\n\n    （一）本隐私政策仅适用于您在中国大陆（仅为本条款之目的，不含香港、澳门、台湾地区）境内使用本平台服务的情形。本隐私政策可能存在多种语言版本，如各语言版本条款出现不一致或冲突，以中文版本为准。\n\n\n    （二）本隐私政策中的标题仅为方便及阅读而设，并不影响本隐私政策中任何规定的含义或解释。\n\n\n    ## 参考\n\n\n    开黑啦的 API 正常分为两个核心层：\n\n\n    - 常规的 http 接口，你可以用它来做一些常规操作。\n\n    - 消息实时通知，你可以通过（webhook/websocket）来订阅系统的实时消息及事件，然后做出相应的操作等。\n\n\n    通过上述两层的接口，我们可以在开黑啦中做出机器人，或者提供服务等。\n\n\n    ### 常规 http 接口规范\n\n\n    #### BaseUrl\n\n\n    ```\n\n    https://www.kaiheila.cn/api\n\n    ```\n\n\n    #### API 版本管理\n\n\n    开黑啦后续可能会有不同版本的 API。您可以通过像 `https://www.kaiheila.cn/api/v{version_number}`\n    这样在请求路径中明确指定所要使用的 API 版本。如果省略掉 version_number, 它会指向默认的版本。目前支持的版本列表如下所示：\n\n\n    | 版本 | 状态   | 默认 |\n\n    | ---- | ------ | ---- |\n\n    | 3    | 开发中 | 是   |\n\n\n    #### 鉴权\n\n\n    在开发者中心，在创建机器人后，我们可以得到一个 token，在请求所有的开黑啦接口时，我们需要在 http header 的\n    `Authorization` 中加入该 token 以进行鉴权,格式为 `Authorization: TOKEN_TYPE\n    TOKEN`。目前支持两种格式的鉴权：\n\n\n    - 机器人。TOKEN_TYPE = Bot。\n\n    - Oauth2。TOKEN_TYPE = Bearer。\n\n\n    如下为机器人的鉴权示例:\n\n\n    ```\n\n    Authorization: Bot BHsTZ4232tLatgV5AFyjoqZGAHHmpl9mTxYQ/u4/80=\n\n    ```\n\n\n    #### 速度限制\n\n\n    为了保护我们的系统，我们在 [RFC 6585](https://tools.ietf.org/html/rfc6585#section-4)\n    的基础上做了一些扩展，来限制用户的接口调用速度。经常达到限速阀值或者忽略速度限制的 API 用户将会被撤销 API\n    密钥，并且被限制登录。有关速度限制的问题，请参阅[速率限制](https://developer.kaiheila.cn/doc/rate-limit)一节\n\n\n    #### i18N\n\n\n    如果希望本地化，可以在 http 头中加入 `Accept-Language` 头，如下为一个示例：\n\n\n    ```\n\n    Accept-Language: en-us\n\n    ```\n\n\n    系统如果支持该语言，系统会以该语言返回错误消息等。如果系统不支持，系统会以默认的 zh-cn 来返回接口的消息，提示等。\n\n\n    #### 接口格式及返回说明\n\n\n    - 接口分为 GET 请求和 POST 请求，所有找服务器拿数据均使用 GET 请求，提交数据给服务器使用 POST 请求\n\n    - POST 请求若无特殊说明，均为 POST JSON 格式，即在 http header 中加入`Content-type:\n    application/json`，并将数据以 json 字符串传递。\n\n    - 所有的接口返回如下的格式：\n\n\n    ```javascript\n\n    {\n        \"code\" : 0, // integer, 错误码，0代表成功，非0代表失败，具体的错误码参见错误码一览\n        \"message\" : \"error info\", // string, 错误消息，具体的返回消息会根据Accept-Language来返回。\n        \"data\" : [], // mixed, 具体的数据。\n    }\n\n    ```\n\n\n    #### 接口字段说明\n\n\n    由于一些历史原因，接口中可能会有一些不在文档中的字段，请大家务必使用文档中的字段，不在文档中的字段后续可能会更改。\n\n\n    #### 请求参数\n\n\n    在开黑啦整个 API 体系中，有一些参数是一致的，会在此处统一列出，后续不会再单独详细说明。\n\n\n    正常的列表页，一般会有类似如下的参数：\n\n\n    | 参数名    | 类型   | 区域 |\n    说明                                                                                                                  \n    |\n\n    | --------- | ------ | ---- |\n    ----------------------------------------------------------------------------------------------------------------------\n    |\n\n    | page      | int    | GET  |\n    列表页中有，代表页                                                                                                    \n    |\n\n    | page_size | int    | GET  | 列表页中有，每页数据大小，默认为 50, 常规情况下 page_size 最大为\n    50                                                    |\n\n    | sort      | string | GET  | 代表排序的字段,\n    比如`-id`代表`id`按`DESC`排序，`id`代表`id`按`ASC`排序。不一定有, 如果有，接口中会声明支持的排序字段。 |\n\n\n    正常的列表页的返回参数会保持如下的格式:\n\n\n    | 参数名       | 类型  |\n    说明                                                                    |\n\n    | ------------ | ----- |\n    ----------------------------------------------------------------------- |\n\n    | items        | Array |\n    数据列表                                                                |\n\n    | meta         | Map   |\n    分页的信息                                                              |\n\n    | » page       | int   |\n    页码                                                                    |\n\n    | » page_total | int   |\n    总页数                                                                  |\n\n    | » page_size  | int   |\n    每一页的数据                                                            |\n\n    | » total      | int   |\n    总数据量                                                                |\n\n    | sort         | Map   | 分页的排序, key:+-1, 如果为 1 代表按 key 升序，如果为-1 代表按 key 降序 |\n\n\n    ### 消息通知\n\n\n    消息通知在整个开黑啦体系中比较复杂，我们目前支持两种消息通知机制：\n\n\n    - [Webhook](https://developer.kaiheila.cn/doc/webhook)\n\n    - [Websocket](https://developer.kaiheila.cn/doc/websocket)\n\n\n    不论是以何种方式来接受消息，它们都遵循着相同的规范：\n\n\n    - 消息推送时，可能会有压缩(压缩默认采用 zlib 压缩【deflate】)。\n\n    - 消息的含义，结构格式等基本保持一致。\n\n\n    ## 速率限制\n\n\n    为了防止接口滥用和超速，我们会通过速率限制来限制 API 接口请求。\n\n\n    ### http 头格式\n\n\n    在每个 API 请求中，我们会在需要速率控制的请求的 http 响应的 header 中，包含如下的速度控制的头：\n\n\n    ```\n\n    // 一段时间内允许的最大请求次数\n\n    X-Rate-Limit-Limit: 5\n\n    // 一段时间内还剩下的请求数\n\n    X-Rate-Limit-Remaining: 0\n\n    // 回复到最大请求次数需要等待的时间\n\n    X-Rate-Limit-Reset: 14\n\n    // 请求数的bucket\n\n    X-Rate-Limit-Bucket: user/info\n\n    // 触犯全局请求次数限制\n\n    X-Rate-Limit-Global\n\n    ```\n\n\n    ### 超速响应\n\n\n    当触犯速度限制时，系统会返回 http 429 响应。返回的消息格式与标准格式也是一致的。同时，上文中提到的 http 头也依旧会传。\n\n\n    ### 封禁措施\n\n\n    如果多次超速，系统会发出警告信息。bot 需要按照 rate limit 的头进行速度控制。  \n\n    如果多次警告后依然不更改，系统可能会禁用 bot。\ntags:\n  - name: 将Bot连接到开黑啦服务器\n    description: 使用Websocket或Webhook将Bot连接至服务器\n  - name: KMarkdown与卡片消息\n    description: >\n      # KMarkdown\n\n\n      在发送聊天消息时，为了支持用户的复杂的消息需求，以及有更好的用户体验，我们引入了 markdown，同时，基于 markdown\n      的标准规范，我们加入了自己的一些适配和扩展。为了与 markdown 进行区分，在本文档中，我们统一称之为 KMarkdown。\n\n\n      我们仅支持在文档中的一些语法，如果某个语法在 markdown 中，但是却没在文档中提及，那么它属于我们目前不支持的语法，建议用户不要使用。\n\n\n      我们还提供了 kmarkdown\n      消息编辑器，方便可视化编辑：[点击使用](https://kaiheila.cn/tools/message-builder.html#/kmarkdown)\n\n\n      ## 主要格式规范\n\n\n      1. 语法来源大部分来自于默认的 markdown 语法。如果无特殊说明，用户只需遵守 markdown 语法即可。\n\n      2. 自定义的语法大部分会保证这样的格式：`(tagName)value(tagName)[attributes]`, 如果这个标签没有属性，那么\n      `[attributes]` 会被省略。\n\n      3. 大部分标签都支持换行。\n\n\n      | 格式                                   | 语法来源 |\n      说明                                                                                    \n      |\n\n      | -------------------------------------- | -------- |\n      ----------------------------------------------------------------------------------------\n      |\n\n      | `**加粗文字**`                         | markdown |\n      加粗                                                                                    \n      |\n\n      | `*斜体文字*`                           | markdown |\n      斜体                                                                                    \n      |\n\n      | `***加粗斜体***`                       | markdown |\n      加粗斜体                                                                                \n      |\n\n      | `~~删除线~~`                           | markdown |\n      删除线                                                                                  \n      |\n\n      | `[链接文字](链接地址)`                 | markdown | 链接，仅允许 http, https\n      的链接                                                          |\n\n      | `---`                                  | markdown |\n      分隔线                                                                                  \n      |\n\n      | `> hello world`                        | markdown |\n      引用：换行会一直作用，直到遇见两个换行(\\n\\n),这两个换行实际不会显示换行                  |\n\n      | `(ins)下划线内容(ins)`                 | 自定义   |\n      下划线                                                                                  \n      |\n\n      | `(spl)剧透(spl)`                       | 自定义   |\n      内容默认是遮住的，只有用户点击才会显示                                                   |\n\n      | `:emoji:`                              | emoji    | 基本与 emoji 的\n      [shortcode](https://www.webfx.com/tools/emoji-cheat-sheet/) 写法保持一致 |\n\n      | `(emj)服务器表情名(emj)[服务器表情id]` | 自定义   |\n      服务器表情，需要有服务器发送服务器表情的权限                                             |\n\n      | `(chn)频道ID(chn)`                     | 自定义   |\n      频道，提及频道                                                                          \n      |\n\n      | `(met)用户id/here/all(met)`            | 自定义   | @用户，all 代表 @所有用户，here 代表\n      @所有在线用户                                       |\n\n      | `(rol)角色ID(rol)`                     | 自定义   |\n      @某角色所有用户                                                                         \n      |\n\n      | `` `行内代码` ``                       | markdown |\n      行内代码                                                                                \n      |\n\n      | ` ```语言\\n ``` `                      | markdown |\n      代码块                                                                                  \n      |\n\n\n      # 卡片消息\n\n\n      卡片消息是结构化的消息,可以提供一个易用、统一的富交互形式。\n\n\n      我们还提供了卡片消息编辑器，方便可视化编辑：[点击使用](https://kaiheila.cn/tools/message-builder.html#/card)\n\n\n      ## 整体结构说明\n\n\n      cardmessage 主要由 json 构成，在卡片消息中，有四种类别的卡片结构：\n\n\n      - 卡片，目前只有 card。\n\n      - 模块，主要有 section, header, context 等。\n\n      - 元素：主要有 plain-text, image, button 等。\n\n      - 结构：目前只有 paragraph。\n\n\n      ### 消息的主要结构\n\n\n      - 一个卡片消息最多只允许 5 个卡片\n\n      - 一个卡片可以有多个模块，但是一个卡片消息总共不允许超过 50 个模块\n\n\n      ```javascript\n\n      [\n        {\n          type: 'card',\n          //...\n          modules: [\n            // ...\n          ],\n        },\n        // 其它card\n      ];\n\n      ```\n\n\n      ### 主要结构说明\n\n\n      所有的元素都有相似的结构，大体如下：\n\n\n      ```javascript\n\n      {\n          \"type\" : \"类别\"，\n          \"foo\" : \"bar\",   //属性参数\n          \"modules|elements|fields\": [], //子元素，根据type类别有不同的值，卡片的为modules,模块的子元素为elements,结构的为fields。\n      }\n\n      ```\n\n\n      ### 一些全局字段说明\n\n\n      在很多结构中，有一些字段都是一样的，因此在此处说明，后面就不单独说明了：\n\n\n      | 字段  | 类型   |\n      说明                                                                                                          \n      |\n\n      | ----- | ------ |\n      --------------------------------------------------------------------------------------------------------------\n      |\n\n      | theme | string | 主题，可选的值为：primary,success,danger,warning,info,secondary,\n      none.默认为 primary，为 none 时不显示侧边框。 |\n\n      | size  | string | 大小，可选值为：xs,sm, md, lg, 一般默认为\n      lg                                                                   |\n\n\n      ### 卡片消息发送说明\n\n\n      在消息发送时，卡片消息的发送类型为`10`, 在发送时，content 字段为 json 的字符串。详情参见消息发送接口。发送前请调用各语言自带的\n      json 序列化方法进行序列化再进行发送，直接发送未经序列化的 json 字符串通常会产生错误。\n\n\n      ### 关于卡片中包含的媒体\n\n\n      **如果卡片中包含第三方媒体链接，我们将会自行转存媒体后再完成发送。**推荐大家优先调用 asset\n      接口上传媒体文件后再进行发送，以防由于转存失败导致卡片发送不成功。\n\n\n      ## 卡片\n\n\n      ### card\n\n\n      **主要结构**：\n\n\n      ```javascript\n\n      {\n          \"type\": \"card\",\n          \"theme\" : \"primary|warning|danger|info|none...\", // 卡片风格，默认为primay\n          \"color\":\"#aaaaaa\", //色值\n          \"size\": \"sm|lg\", //目前只支持sm与lg, 如果不填为lg。 lg仅在PC端有效, 在移动端不管填什么，均为sm。\n          \"modules\": [\n              // modules...\n          ]\n      }\n\n      ```\n\n\n      **说明：**\n\n\n      - modules 只能为模块\n\n      - 单个 card 模块数量不限制，但是总消息最多只能有 50 个模块\n\n      - theme, size 参见[全局字段说明\n        ](#一些全局字段说明),卡片中，size 只允许 lg 和 sm\n      - color 代表卡片边框具体颜色，如果填了，则使用该 color，如果未填，则使用 theme 来渲染卡片颜色。\n\n\n      ## 模块\n\n\n      ### 标题模块\n\n\n      **作用说明：** 标题模块只能支持展示标准文本（text），突出标题样式。\n\n      **主要结构：**\n\n\n      ```javascript\n\n      {\n          \"type\": \"header\",\n          \"text\" : {\n              \"type\": \"plain-text\",\n              \"content\": \"标题1\"\n          }\n      }\n\n      ```\n\n\n      **说明：**\n\n\n      - text 为文字元素且 content 不能超过 100 个字\n\n\n      ### 内容模块\n\n\n      **作用说明：** 结构化的内容，显示文本+其它元素。  \n\n      **主要结构：**\n\n\n      ```javascript\n\n      {\n          \"type\": \"section\",\n          \"mode\" : \"left|right\", //accessory在左侧还是在右侧\n          \"text\" : {\n              \"type\": \"plain-text|kmarkdown|paragraph\",\n              //...\n          },\n          \"accessory\": {\n              \"type\": \"image|button\",\n              //...\n          }\n      }\n\n      ```\n\n\n      **说明：**\n\n\n      - text 可以为 plain-text, kmarkdown 或者 paragraph\n\n      - accessory 可以为 image 或者 button\n\n      - button 不能放置在左侧\n\n      - mode 代表 accessory 是放置在左侧还是在右侧\n\n\n      ### 图片组模块\n\n\n      **作用说明：** 1 到多张图片的组合  \n\n      **主要结构:**\n\n\n      ```javascript\n\n      {\n          \"type\" : \"image-group\",\n          \"elements\": [\n              //图片元素，其它元素无效\n          ],\n      }\n\n      ```\n\n\n      **说明：**\n\n\n      - elements 只能有 image 元素，只能有 1-9 张图片\n\n\n      ### 容器模块\n\n\n      **作用说明：** 1 到多张图片的组合，与图片组模块不同，图片并不会裁切为正方形。多张图片会纵向排列。  \n\n      **主要结构:**\n\n\n      ```javascript\n\n      {\n          \"type\" : \"container\",\n          \"elements\": [\n              //图片元素，其它元素无效\n          ],\n      }\n\n      ```\n\n\n      **说明：**\n\n\n      - elements 只能有 image 元素，只能有 1-9 张图片\n\n\n      ### 交互模块\n\n\n      **作用说明：** 交互模块中包含交互控件元素，目前支持的交互控件为按钮（button）  \n\n      **主要结构:**\n\n\n      ```javascript\n\n      {\n          \"type\": \"action-group\",\n          \"elements\": [\n              // buttons\n          ],\n      }\n\n      ```\n\n\n      **说明：**\n\n\n      - elements 中只能为 button\n\n      - elements 最多只能有 4 个\n\n\n      ### 备注模块\n\n\n      **作用说明：** 展示图文混合的内容。  \n\n      **主要结构：**\n\n\n      ```javascript\n\n      {\n          \"type\": \"context\",\n          \"elements\": [],\n      }\n\n      ```\n\n\n      **说明：**\n\n\n      - elements 中可以为：plain-text, kmarkdown, image\n\n      - elements 最多可包含 10 个元素\n\n\n      ### 分割线模块\n\n\n      **作用说明：** 展示分割线。  \n\n      **主要结构：**\n\n\n      ```javascript\n\n      {\n          \"type\": \"divider\",\n      }\n\n      ```\n\n\n      ### 文件模块\n\n\n      **作用说明：** 展示文件，目前有三种，文件，视频和音频。  \n\n      **主要结构：**\n\n\n      ```javascript\n\n      {\n          \"type\": \"file|audio|video\",\n          \"src\": \"\", //文件|音频|视频地址\n          \"title\": \"标题\",\n          \"cover\": \"\" //封面图\n      }\n\n      ```\n\n\n      规则：\n\n\n      - cover 仅在音频的时候有效，是音频的封面图。\n\n\n      ### 倒计时模块\n\n\n      **作用说明：** 展示倒计时。  \n\n      **主要结构：**\n\n\n      ```javascript\n\n      {\n          \"type\": \"countdown\",\n          \"endTime\" : 1608819168000, //到期的毫秒时间戳\n          \"startTime\" : 1608819168000, //起始的毫秒时间戳，仅当mode为second才有这个字段\n          \"mode\" : \"day,hour,second\", //倒计时样式, 按天显示，按小时显示或者按秒显示\n      }\n\n      ```\n\n\n      规则：\n\n\n      - mode 主要是倒计时的样式，目前支持三种样式。\n\n      - startTime 和 endTime 为毫秒时间戳，startTime 和 endTime 不能小于服务器当前时间戳。\n\n\n      ### 邀请模块\n\n\n      **作用说明：** 提供服务器邀请/语音频道邀请\n\n      **主要结构：**\n\n\n      ```json\n\n      { \"type\": \"invite\", \"code\": \"邀请链接或者邀请码\" }\n\n      ```\n\n\n      ## 元素\n\n\n      ### 普通文本\n\n\n      **作用说明：** 显示文字。  \n\n      **主要结构：**\n\n\n      ```javascript\n\n      {\n          \"type\": \"plain-text\",\n          \"content\" : \"\",\n          \"emoji\": true|false,\n      }\n\n      ```\n\n\n      **规则：**\n\n\n      - emoji 为布尔型，默认为 true。如果为 true,会把 emoji 的 shortcut 转为 emoji\n\n      - 为了方便书写，所有 plain-text 的使用处可以简单的用字符串代替。\n\n      - 最大 2000 个字\n\n\n      ```javascript\n\n      // \"hello world\" 等价于：\n\n      {\n          \"type\" : \"plain-text\",\n          \"emoji\": true,\n          \"content\" : \"hello world\",\n      }\n\n      ```\n\n\n      ### kmarkdown\n\n\n      **作用说明：** 显示文字。  \n\n      **主要结构：**\n\n\n      ```javascript\n\n      {\n          \"type\": \"kmarkdown\",\n          \"content\" : \"**hello**\",\n      }\n\n      ```\n\n\n      **规则：**\n\n\n      - 最大 5000 个字\n\n\n      ### 图片\n\n\n      **作用说明：** 显示图片。  \n\n      **主要结构：**\n\n\n      ```javascript\n\n      {\n          \"type\": \"image\",\n          \"src\" : \"\",\n          \"alt\" : \"\",\n          \"size\" : \"sm|lg\", // size只用在图文混排  图片组大小固定\n          \"circle\" : true|false,\n      }\n\n      ```\n\n\n      **规则：**\n\n\n      - 图片类型（MimeType）限制说明：目前仅支持`image/jpeg`, `image/gif`, `image/png`这 3 种\n\n      - 图片的 size 默认为 lg\n\n\n      ### 按钮\n\n\n      **作用说明：** 提供交互的功能\n\n\n      ```javascript\n\n      {\n          \"type\": \"button\",\n          \"theme\": \"primary|warning|info|danger|...\", //按钮的主题颜色\n          \"value\": \"\", //要传递的value，为string\n          \"click\": \"\", //click时的事件类型， return-val 返回value值\n          \"text\": \"\",\n      }\n\n      ```\n\n\n      - value 只能为 string\n\n      - text 可以为 plain-text, kmarkdown\n\n      - click 代表用户点击的事件,默认为\"\"，代表无任何事件。\n        - 当为 link 时，会跳转到 value 代表的链接;\n        - 当为 return-val 时，系统会通过系统消息将消息 id,点击用户 id 和 value 发回给发送者，发送者可以根据自己的需求进行处理,消息事件参见[button 点击事件](https://developer.kaiheila.cn/doc/event/user#Card%E6%B6%88%E6%81%AF%E4%B8%AD%E7%9A%84Button%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6)。当前仅在频道中有效，私聊无法使用点击事件。\n\n      ## 结构体\n\n\n      ### 区域文本\n\n\n      **作用说明：** 支持分栏结构，将模块分为左右两栏，根据顺序自动排列，支持更自由的文字排版模式，提高可维护性  \n\n      **主要结构：**\n\n\n      ```javascript\n\n      {\n          \"type\": \"paragraph\",\n          \"cols\": 3, //移动端忽略该参数\n          \"fields\" : [\n          ],\n      }\n\n      ```\n\n\n      **规则：**\n\n\n      - cols 是 int,可以的取值为 1-3\n\n      - fields 可以的元素为 text, kmarkdown 或 context\n\n      - paragraph 最多有 50 个元素\n  - name: 服务器相关接口\n    description: 服务器相关接口\n  - name: 服务器频道相关接口\n    description: 服务器频道相关接口\n  - name: 频道消息相关接口\n    description: 频道消息相关接口\n  - name: 私聊会话\n    description: 私聊会话相关接口\n  - name: 私聊消息相关接口\n    description: 私聊消息相关接口\n  - name: 用户相关接口\n    description: 用户相关接口\n  - name: 服务器角色权限相关接口\n    description: >\n      ## 权限说明\n\n\n      权限是一个 unsigned int 值，由比特位代表是否拥有对应的权限。\n\n      权限值与对应比特位进行按位与操作，判断是否拥有该权限。\n\n\n      ```c\n\n      // 判断是否有某权限。其中: permissions代表权限值，bitValue代表某权限比特位，1 << bitValue 代表某权限值。\n\n      permissions & (1 << bitValue)  == (1 << bitValue);\n\n      ```\n\n\n      数据位的说明如下：\n\n\n      | 比特位 | 值        | 权限               |\n      说明                                                                                                      \n      |\n\n      | ------ | --------- | ------------------ |\n      ----------------------------------------------------------------------------------------------------------\n      |\n\n      | 0      | 1         | 管理员             |\n      拥有此权限会获得完整的管理权，包括绕开所有其他权限（包括频道权限）限制，属于危险权限。                     |\n\n      | 1      | 2         | 管理服务器         |\n      拥有此权限的成员可以修改服务器名称和更换区域。                                                            \n      |\n\n      | 2      | 4         | 查看管理日志       |\n      拥有此权限的成员可以查看服务器的管理日志。                                                                \n      |\n\n      | 3      | 8         | 创建服务器邀请     |\n      能否创建服务器邀请链接                                                                                    \n      |\n\n      | 4      | 16        | 管理邀请           |\n      拥有该权限可以管理服务器的邀请                                                                            \n      |\n\n      | 5      | 32        | 频道管理           |\n      拥有此权限的成员可以创建新的频道以及编辑或删除已存在的频道。                                              \n      |\n\n      | 6      | 64        | 踢出用户          \n      |                                                                                                           \n      |\n\n      | 7      | 128       | 封禁用户          \n      |                                                                                                           \n      |\n\n      | 8      | 256       | 管理自定义表情    \n      |                                                                                                           \n      |\n\n      | 9      | 512       | 修改服务器昵称     |\n      拥有此权限的用户可以更改他们的昵称。                                                                      \n      |\n\n      | 10     | 1024      | 管理角色权限       |\n      拥有此权限成员可以创建新的角色和编辑删除低于该角色的身份。                                                \n      |\n\n      | 11     | 2048      | 查看文字、语音频道\n      |                                                                                                           \n      |\n\n      | 12     | 4096      | 发布消息          \n      |                                                                                                           \n      |\n\n      | 13     | 8192      | 管理消息           |\n      拥有此权限的成员可以删除其他成员发出的消息和置顶消息。                                                    \n      |\n\n      | 14     | 16384     | 上传文件          \n      |                                                                                                           \n      |\n\n      | 15     | 32768     | 语音链接          \n      |                                                                                                           \n      |\n\n      | 16     | 65536     | 语音管理           |\n      拥有此权限的成员可以把其他成员移动和踢出频道；但此类移动仅限于在该成员和被移动成员均有权限的频道之间进行。 |\n\n      | 17     | 131072    | 提及@全体成员      |\n      拥有此权限的成员可使用@全体成员以提及该频道中所有成员。                                                   \n      |\n\n      | 18     | 262144    | 添加反应           |\n      拥有此权限的成员可以对消息添加新的反应。                                                                  \n      |\n\n      | 19     | 524288    | 跟随添加反应       |\n      拥有此权限的成员可以跟随使用已经添加的反应。                                                              \n      |\n\n      | 20     | 1048576   | 被动连接语音频道   |\n      拥有此限制的成员无法主动连接语音频道，只能在被动邀请或被人移动时，才可以进入语音频道。                     |\n\n      | 21     | 2097152   | 仅使用按键说话     |\n      拥有此限制的成员加入语音频道后，只能使用按键说话。                                                        \n      |\n\n      | 22     | 4194304   | 使用自由麦         |\n      没有此权限的成员，必须在频道内使用按键说话。                                                              \n      |\n\n      | 23     | 8388608   | 说话              \n      |                                                                                                           \n      |\n\n      | 24     | 16777216  | 服务器静音        \n      |                                                                                                           \n      |\n\n      | 25     | 33554432  | 服务器闭麦        \n      |                                                                                                           \n      |\n\n      | 26     | 67108864  | 修改他人昵称       |\n      拥有此权限的用户可以更改他人的昵称                                                                        \n      |\n\n      | 27     | 134217728 | 播放伴奏           |\n      拥有此权限的成员可在语音频道中播放音乐伴奏                                                                \n      |\n  - name: 服务器表情相关接口\n    description: 服务器表情相关接口\n  - name: 邀请相关接口\n    description: 邀请相关接口\n  - name: Gateway接口\n    description: Gateway接口\n  - name: 亲密度相关接口\n    description: 亲密度相关接口\n  - name: 附件相关接口\n    description: 附件相关接口\n  - name: 事件通知介绍\n    description: \"# 事件结构/格式说明\\r\\n\\r\\n当 websocket 或 webhook 收到 `s=0` 的消息时，代表当前收到的消息是事件(包含用户的聊天消息及系统的通知消息等)。本文会具体描述所有的事件类型，并且明确其字段的含义。开发者可以根据本文档做出相应的开发处理。\\r\\n\\r\\n## 事件基本结构及含义说明\\r\\n\\r\\n目前所有的消息都会有如下的结构：\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\\"s\\\": 0, // 信令类型\\r\\n  \\\"d\\\": {} //数据\\r\\n}\\r\\n```\\r\\n\\r\\n本文主要讲述的是当 `s=0` 时，data 的数据结构，信令的具体含义参见[websocket](https://developer.kaiheila.cn/doc/websocket).\\r\\n\\r\\n## 事件主要格式\\r\\n\\r\\n### 格式说明\\r\\n\\r\\n| 字段          | 类型   | 说明                                                                                                                 |\\r\\n| ------------- | ------ | -------------------------------------------------------------------------------------------------------------------- |\\r\\n| channel_type  | string | 消息频道类型, `GROUP` 为频道消息                                                                                     |\\r\\n| type          | int    | 1:文字消息, 2:图片消息，3:视频消息，4:文件消息， 8:音频消息，9:KMarkdown，10:card 消息，255:系统消息, 其它的暂未开放 |\\r\\n| target_id     | string | 发送目的 id，如果为是 GROUP 消息，则 target_id 代表频道 id                                                           |\\r\\n| author_id     | string | 发送者 id, 1 代表系统                                                                                                |\\r\\n| content       | string | 消息内容, 文件，图片，视频时，content 为 url                                                                         |\\r\\n| msg_id        | string | 消息的 id                                                                                                            |\\r\\n| msg_timestamp | int    | 消息发送时间的毫秒时间戳                                                                                             |\\r\\n| nonce         | string | 随机串，与用户消息发送 api 中传的 nonce 保持一致                                                                     |\\r\\n| extra         | mixed  | 不同的消息类型，结构不一致                                                                                           |\\r\\n\\r\\n### 文字频道消息 extra 说明\\r\\n\\r\\n**当 type 非系统消息(255)时**\\r\\n\\r\\n| 字段          | 类型    | 说明                                                                             |\\r\\n| ------------- | ------- | -------------------------------------------------------------------------------- |\\r\\n| type          | int     | 同上面 type                                                                      |\\r\\n| guild_id      | string  | 服务器 id                                                                        |\\r\\n| channel_name  | string  | 频道名                                                                           |\\r\\n| mention       | Array   | 提及到的用户 id 的列表                                                           |\\r\\n| mention_all   | boolean | 是否 mention 所有用户                                                            |\\r\\n| mention_roles | Array   | mention 用户角色的数组                                                           |\\r\\n| mention_here  | boolean | 是否 mention 在线用户                                                            |\\r\\n| author        | Map     | 用户信息, 见[对象-用户 User](https://developer.kaiheila.cn/doc/objects#用户User) |\\r\\n\\r\\n### 系统事件消息 extra 说明\\r\\n\\r\\n**当 type 为系统消息(255)时**\\r\\n\\r\\n| 字段 | 类型   | 说明                                         |\\r\\n| ---- | ------ | -------------------------------------------- |\\r\\n| type | string | 标识该事件的类型                             |\\r\\n| body | Map    | 该事件关联的具体数据, 详见各系统消息事件示例 |\\r\\n\"\n  - name: 消息相关事件\n    description: |\n      消息相关事件\n  - name: 频道相关事件\n    description: 频道相关事件\n  - name: 服务器相关事件\n    description: 服务器相关事件\n  - name: 用户相关事件\n    description: 用户相关事件\n  - name: 私聊相关事件\n    description: 私聊相关事件\n  - name: 服务器成员相关事件\n    description: 服务器成员相关事件\npaths:\n  /kmarkdown:\n    post:\n      tags:\n        - KMarkdown与卡片消息\n      summary: 事件中的kmarkdown消息格式\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/kmarkdown\"\n  /cardMessage:\n    post:\n      tags:\n        - KMarkdown与卡片消息\n      summary: 事件中的卡片消息格式\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/card\"\n  /event:\n    post:\n      tags:\n        - 事件通知介绍\n      summary: 事件结构示例\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/basic-2\"\n  /message-object:\n    post:\n      tags:\n        - 标准对象格式\n      summary: 消息对象\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/kmarkdown\"\n                - $ref: \"#/components/schemas/card\"\n                - $ref: \"#/components/schemas/image\"\n                - $ref: \"#/components/schemas/video\"\n                - $ref: \"#/components/schemas/file\"\n  /connect-websocket:\n    get:\n      tags:\n        - 将Bot连接到开黑啦服务器\n      summary: 使用Websocket进行连接\n      description: >\n        通过 Websocket，客户端可以与开黑啦进行实时通信，来接收事件和数据。websocket\n        的协议交互非常复杂，而且较差的实现会给服务端和客户端都带来较大困扰，因此建议你在编写自己的实现时，详细阅读本文档。\n\n\n        **重要提示：** 并不是所有的字段都有文档记录，你应该依赖文档，而不是依赖接口中的字段。我们可能随时更改不在文档中的字段。\n\n\n        **注意：** Webhook 模式与 Websocket 模式是互斥的，如果选择了 Webhook 模式，将不能再使用 Websocket\n        接收用户消息。同理，设置了 Websocket 后，平台将不会再向回调地址推送消息。\n\n\n        ## Gateway\n\n\n        Gateway 是 websocket 的网关，客户端通过连接 Gateway 可以获取到相应的推送消息等。\n\n\n        Gateway 的获取需要走 http\n        接口获取，参见[Gateway](https://developer.kaiheila.cn/doc/http/gateway)\n\n\n        ## 消息压缩\n\n\n        - 如果客户端连接中 `compress` 参数为 `1`, 所有方向为 `server->client`\n        的消息都是经过压缩后的`binary` 类型的消息.\n\n        - 与 Webhook 保持一样，默认情况下，我们的数据会进行 zlib 压缩 (deflate)，相应的数据你可能需要先进行 zlib\n        解压缩，再进行处理。如果不需要压缩，可以在获取 gateway 时加上参数`compress=0`。\n\n        - 客户端发给服务端的消息不要压缩。\n\n\n        ## 连接流程\n\n\n        常规连接流程如下：\n\n\n        1. 获取 Gateway\n\n        2. 连接 Gateway。如果连接失败，回退到第 1 步。\n\n        3. 收到 hello 包，如果成功，开始接收事件。如果失败，回退至第 1 步。\n\n        4. 在连接中，每隔 30 秒发一次心跳 ping 包，如果 6 秒内，没有收到心跳 pong 包，则超时。进入到指数回退，重试。\n\n        5. 先发两次心跳 ping(间隔为 2,4),判断连接是否成功。如果成功，则连接恢复。\n\n        6. 如果不成功，再回退到第 2 步，尝试两次 resume(间隔为 8,16)。如果成功，会按正常往下走，但有一个 resume\n        过程（同步中间的离线消息），resume 完了，会收到一个 resumeOK 包。\n\n        7. 如果失败，再回到第 1 步，尝试无数次获取 Gateway(指数倒退，最大间隔为 60),直到成功为止。\n\n        8. 任何时候，收到 reconnect 包，应该将当前消息队列，`sn`等全部清空，然后回到第 1 步，否则可能会有消息错乱等各种问题。\n\n\n        ### 关于重连\n\n\n        当 WebSocket 链接彻底中断, 尝试重新建立链接并恢复, 需要在已断开的链接 url 后继续拼接以下参数:  \n\n        resume : 固定值 1  \n\n        sn : 当前客户端处理成功的最后一条消息的 sn, 没有收到过任何消息传 0。需自行记录（可保存至文件，以实现代码升级重启后恢复会话）。  \n\n        session_id: 前一个链接中的 session_id , 参考 [信令 1 握手结果]\n\n\n        ```\n\n        wss://test.kaiheila.com:8888/gateway?{compress/token\n        parameters}&resume=1&sn=5&session_id=20****ae-1fa4-4d19-805f-6f0f****d534\n\n        ```\n\n\n        连接流程示意图：\n\n        ![image](https://developer.kaiheila.cn/img/state.png)\n\n\n        参考代码:\n        [php-bot](https://github.com/kaiheila/php-bot/blob/main/src/base/StateSession.php)\n\n\n        ## 信令格式\n\n\n        ### 信令基本格式\n\n\n        ```javascript\n\n        {\n            \"s\" : 1,  // int, 信令，详情参照信令说明\n            \"d\" : {}, // 数据字段mixed\n            \"sn\" : 0, // int, 该字段并不一定有，只在s=0时有，与webhook一致。\n        }\n\n        ```\n\n\n        具体参见[Event](#tag--事件相关)\n\n\n        ### 信令说明\n\n\n        | 信令 | 方向           | 说明                                      |\n\n        | ---- | -------------- | ----------------------------------------- |\n\n        | 0    | server->client | 消息(包含聊天和通知消息)                  |\n\n        | 1    | server->client | 客户端连接 ws 时, 服务端返回握手结果      |\n\n        | 2    | client->server | 心跳，ping                                |\n\n        | 3    | server->client | 心跳，pong                                |\n\n        | 4    | client->server | resume, 恢复会话                          |\n\n        | 5    | server->client | reconnect, 要求客户端断开当前连接重新连接 |\n\n        | 6    | server->client | resume ack                                |\n\n\n        ## 信令[1] HELLO\n\n\n        **方向：** server->client  \n\n        **说明：** 当我们成功连接 websocket 后，客户端应该在 6s 内收到该包，否则认为连接超时。  \n\n        **成功示例：**\n\n\n        ```javascript\n\n        {\n            \"s\": 1,\n            \"d\": {\n                \"code\": 0,\n                \"session_id\": \"xxxx\"\n            }\n        }\n\n        ```\n\n\n        **失败：**\n\n\n        | 状态码 | 含义           | 备注         |\n\n        | ------ | -------------- | ------------ |\n\n        | 40100  | 缺少参数       |              |\n\n        | 40101  | 无效的 token   |              |\n\n        | 40102  | token 验证失败 |              |\n\n        | 40103  | token 过期     | 需要重新连接 |\n\n\n        **示例：**\n\n\n        ```javascript\n\n        {\n            \"s\": 1,\n            \"d\": {\n                \"code\": 40103\n            }\n        }\n\n        ```\n\n\n        ## 信令[0] EVENT\n\n\n        **方向：** server->client  \n\n        **说明：** 在正常连接状态下，收到的消息事件等。  \n\n        **参数列表：**\n\n\n        具体参见[Event](#tag--事件相关)\n\n\n        **注意：** 该消息会有 `sn`, 代表消息序号, 针对当前 `session` 的消息的序号, 客户端需记录该数字,并按顺序接收消息，\n        **resume** 时需传入该参数才能完成。\n\n\n        **示例：**\n\n\n        ```javascript\n\n        {\n            \"s\": 0,\n            \"d\": {\n                // 参见event\n            },\n            \"sn\": 1000\n        }\n\n        ```\n\n\n        **注意事项：**\n\n\n        1. 收到消息时需要按照 `sn` 顺序处理, 服务端会尽可能保证 `sn` 的顺序性\n\n        2. 假设收到消息的 `sn` 出现乱序, 需要先存入暂存区 (`buffer`) 等待正确的 `sn` 消息处理后再从暂存区顺序处理\n\n        3. 假设收到了一条已处理过的 `sn` 的消息, 则直接抛弃不处理\n\n        4. 客户端需要存储当前已处理成功的最大的 `sn`, 待心跳 ping 时回传服务端, 如果服务端发现当前客户端最新处理成功的消息 `sn`\n        落后于最新消息 (丢包等异常情况), 服务端将会按照客户端指定的 `sn` 将之后所有最新的消息重传给客户端.\n\n        5. 消息内容与 webhook 保持一致\n\n\n        ## 信令[2] PING\n\n\n        **方向：** client -> server  \n\n        **说明：** 每隔 30s(随机-5，+5),将当前的最大 `sn` 传给服务端,客户端应该在 6s 内收到 PONG, 否则心跳超时。  \n\n        **参数列表：**\n\n\n        | 参数 | 描述                              | 类型 | 必传 |\n\n        | ---- | --------------------------------- | ---- | ---- |\n\n        | sn   | 客户端目前收到的最新的消息 **sn** | int  | Y    |\n\n\n        **示例：**\n\n\n        ```javascript\n\n        {\n            \"s\": 2,\n            \"sn\": 6\n        }\n\n        ```\n\n\n        **注意事项：**\n\n\n        1. 心跳间隔： 30 秒 + rand(-5,5)秒\n\n        2. 如果发了 ping, 6 秒内没有收到 pong，我们应该进入到超时状态。\n\n\n        ## 信令[3] PONG\n\n\n        **方向：** server -> client  \n\n        **说明：** 回应客户端发出的 ping  \n\n        **示例：**\n\n\n        ```javascript\n\n        {\n            \"s\": 3\n        }\n\n        ```\n\n\n        ## 信令[4] RESUME\n\n\n        当链接未断开时，客户端需传入当前收到的最后一个 sn 序号\n\n        例:\n\n\n        ```javascript\n\n        {\n            \"s\": 4,\n            \"sn\": 100\n        }\n\n        ```\n\n\n        ## 信令[5] RECONNECT\n\n\n        **方向：** server->client\n\n\n        **说明：** 服务端通知客户端, 代表该连接已失效, 请重新连接。客户端收到后应该主动断开当前连接。\n\n\n        **注意：** 客户端收到该信令代表因为某些原因导致当前连接已失效, 需要进行以下操作以避免消息丢失.\n\n\n        1. 重新获取 gateway;\n\n        2. 清空本地的 sn 计数;\n\n        3. 清空本地消息队列.\n\n\n        | 状态码 | 描述                                                             \n        |     |\n\n        | ------ |\n        ----------------------------------------------------------------- | ---\n        |\n\n        | 40106  | resume 失败, 缺少参数                                            \n        |     |\n\n        | 40107  | 当前 `session` 已过期 (resume 失败, PING 的 sn 无效)              |    \n        |\n\n        | 40108  | 无效的 `sn` , 或 `sn` 已经不存在 (resume 失败, PING 的 `sn` 无效) |     |\n\n\n        **示例：**\n\n\n        ```javascript\n\n        {\n            \"s\": 5\n            \"d\": {\n                \"code\": 41008,\n                \"err\": \"Missing params\"\n            }\n        }\n\n        ```\n\n\n        ## 信令[6] RESUME ACK\n\n\n        **方向：** server->client  \n\n        **说明：** 服务端通知客户端 resume 动作成功，中间所有离线消息已经全部发送成功  \n\n        **示例：**\n\n\n        ```javascript\n\n        {\n            \"s\": 6\n            \"d\": {\n                \"session_id\": \"xxxx-xxxxxx-xxx-xxx\"\n            }\n        }\n\n        ```\n      responses:\n        \"200\":\n          description: 连接成功\n  /connect-webhook:\n    get:\n      tags:\n        - 将Bot连接到开黑啦服务器\n      summary: 使用Webhook进行连接\n      description: >\n        通过 Webhook\n        进行消息订阅可以让你的应用或机器人能够及时响应用户的消息，在用户量较多的情况下，可以提供更好的并发性能控制。你需要的只是告诉我们该向哪里（URL）发送消息。当消息发生时，Kaiheila\n        开放平台会以 HTTP POST 请求的方式将消息内容推送到你设置的回调地址。\n\n\n        **注意：** Webhook 模式与 Websocket 模式是互斥的，如果选择了 Webhook 模式，将不能再使用 Websocket\n        接收用户消息。同理，设置了 Websocket 后，平台将不会再向回调地址推送消息。\n\n\n        ## 如何配置 Webhook\n\n\n        1. 在开发者后台，点击进入机器人详情页面，选择 Webhook。\n\n        2. 按照下面的说明，配置好接口。\n\n        3. 将接口的地址填入回调地址中，系统会 check 地址是否符合协议规范。如果符合，我们就能收到回调事件了。\n\n\n        ## 配置回调地址\n\n\n        为了能够接收推送消息，首先你必须在开发者后台配置回调地址。当收到相应的触发消息时，开放平台会向该回调地址发送相应的 `HTTP POST`\n        请求。\n\n\n        每个应用/机器人只能配置一个请求网址，该应用/机器人在所有服务器的消息都会发送到这个地址。\n\n\n        点击编辑标示，在文本框内填写你要配置的请求网址。完成请求网址编辑后，点击保存按钮时，开放平台会向你配置的网址推送一个\n        `application/json` 格式的 POST 请求, 该请求用于验证你配置的网址的合法性。请求如下：\n\n\n        ```javascript\n\n        {\n            \"s\": 0, // 信令类型\n            \"d\": {\n                \"type\": 255,\n                \"channel_type\": \"WEBHOOK_CHALLENGE\", //表示这是一个验证请求\n                \"challenge\" : \"bkes654x09XY\" , //客户端需要原样返回\n                \"verify_token\": \"xxxxxx\",   //机器人的token\n            }\n        }\n\n\n        // 设置了Encrypt Key时\n\n        {\n            \"encrypt\": \"adfw232sdssdfadfas98XX\" // 加密字符串，解密方法请看下方的消息解密模块\n        }\n\n        ```\n\n\n        当你收到开放平台 POST 验证请求时，你需要解析出 challenge 值(如果应用设置了 Encrypt\n        Key，需要做解密，解密方法[参考这里](#消息解密))，并在 1s 内原样返回该 challenge 值作为响应。响应示例如下：\n\n\n        ```javascript\n\n        {\n            \"challenge\": \"bkes654x09XY\" // 应用需要原样返回的值\n        }\n\n        ```\n\n\n        ## 接收并响应事件\n\n\n        当有消息发生时，开放平台将会通过 HTTP POST 请求发送 Json compress 格式的事件数据到你预先提供的回调地址。\n\n\n        你可能需要注意如下情况：\n\n\n        1. 为了避免同一个事件处理了多次，你可能需要使用 `sn` 对事件的唯一性进行检查。\n\n        2. 在正常配置好后，系统会给回调地址推送消息，你需要在 1s 内返回 http 200 响应。如果失败或超时，系统会按 2s, 4s, 8s,\n        16s, 32, 64s 的大致间隔，给你回调，直到 5 次都失败。\n\n        3. 默认配置为 Webhook\n        机器人且设置好回调地址后，系统会认为机器人自动上线。如果一段时间内，用户的失败次数达到警告阀值，系统会发送站内消息给相应开发者。如果失败次数过多，平台会认为机器人出现故障，平台会给开发者发送站内消息，并下线该机器人。机器人下线后，平台会停止向该机器人发送任何消息。用户在排除故障后，可以在开发者后台，重新点击上线，恢复该机器人。在恢复时，系统会再次重复之前的验证\n        Url 流程，来确保该 Url 依然属于您。\n\n        4. 在消息中，我们会带上 verify_token, 你可以检查 `verify_token` 是否与开发者后台的\n        `verify_token` 是否 相同以确保这个事件的来源确实是 Kaiheila 开放平台，而不是恶意的第三方伪造的事件。\n\n        5. 如果你需要更安全的事件回调机制，建议填写 `EncryptKey`，在进行业务逻辑处理前请先参考[这里](#消息解密)进行解密。\n\n        6. 默认情况下，我们的数据会进行 zlib 压缩 (**deflate**)，相应的数据你可能需要先进行 zlib\n        解压缩，再进行处理。如果不需要压缩，可以在传入的 callbackUrl 中加上 `compress=0`。\n\n\n        ## 消息解密\n\n\n        如果你对消息有较高的安全需求，可以通过 Encrypt Key 来加密数据, 采用了 aes-256-cbc 来加密数据。主要解密逻辑如下：\n\n\n        1. 将密文用 base64 解码\n\n        2. 截取前 16 位得到 iv, 截取 16 位之后的数据为新的密文\n\n        3. 用 base64 解码新的密文, 得到待解密数据\n\n        4. 在 encrpytKey 后面补\\0 至长度等于 32 位，得到 key\n\n        5. 利用上面的 iv, key, 待解密数据，采用 aes-256-cbc 解密数据。\n\n\n        ### python 代码示例\n\n\n        ```python\n\n        from Crypto.Cipher import AES\n\n        import base64\n\n\n        class Encrypt:\n            def __init__(self, key, bs=32):\n                pad = lambda s: s + (bs-len(s))*\"\\0\"\n                key = pad(key)\n                self.key = key.encode('utf-8')\n\n            def aes_decrypt(self, content):\n                str = base64.b64decode(content)\n                iv = str[0:16]\n                cipher = AES.new(self.key, AES.MODE_CBC, iv)\n                return cipher.decrypt(base64.b64decode(str[16:])).decode('utf-8')\n        ```\n\n\n        ### php 代码示例\n\n\n        ```php\n\n        $encryptKey = \"testKey\";\n\n        $data = \"Kaiheila's bot is awesome\";\n\n        $encrypt = encryptData($data, $encryptKey);\n\n        echo $encrypt. \"\\n\";\n\n        echo decryptData($encrypt, $encryptKey);\n\n\n        function encryptData($data, $key)\n\n        {\n            $iv = substr(md5(uniqid()), 0, 16);\n            return base64_encode($iv.openssl_encrypt($data, 'aes-256-cbc', $key, 0, $iv));\n        }\n\n\n        function decryptData($eData, $key)\n\n        {\n            $eData = base64_decode($eData);\n            $iv = substr($eData, 0, 16);\n            return openssl_decrypt(substr($eData, 16), 'aes-256-cbc', $key, 0, $iv);\n        }\n\n        ```\n\n\n        ## 消息格式及说明\n\n\n        在配置完上述回调地址之后，我们就可以接收并处理事件了，事件的详情参见[事件格式说明](https://developer.kaiheila.cn/doc/event)\n      responses:\n        \"200\":\n          description: 连接成功\n  /guild/list:\n    get:\n      tags:\n        - 服务器相关接口\n      summary: 获取当前用户加入的服务器列表\n      description: \"\"\n      operationId: getJoinedGuilds\n      parameters:\n        - $ref: \"#/components/parameters/PageNumberParam\"\n        - $ref: \"#/components/parameters/PageSizeParam\"\n        - name: sort\n          in: query\n          description: 代表排序的字段, 比如-id代表id按DESC排序，id代表id按ASC排序。不一定有, 如果有，接口中会声明支持的排序字段。\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        allOf:\n                          - $ref: \"#/components/schemas/PaginationInfo\"\n                          - type: object\n                            properties:\n                              items:\n                                type: array\n                                items:\n                                  $ref: \"#/components/schemas/_index_basic\"\n  /guild/index:\n    get:\n      deprecated: true\n      tags:\n        - 服务器相关接口\n      summary: 获取当前用户加入的服务器列表\n      description: \"\"\n      parameters: []\n      operationId: getJoinedGuildsOld\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/_index_basic\"\n  /guild/view:\n    get:\n      tags:\n        - 服务器相关接口\n      summary: 获取服务器详情\n      operationId: getGuildById\n      parameters:\n        - $ref: \"#/components/parameters/GuildIdParam\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        allOf:\n                          - $ref: \"#/components/schemas/_index_basic\"\n                        properties:\n                          roles:\n                            type: array\n                            description: 服务器的角色列表\n                            items:\n                              $ref: \"#/components/schemas/role_basic\"\n                          channels:\n                            description: 服务器的频道列表\n                            type: array\n                            items:\n                              $ref: \"#/components/schemas/_index_basic-2\"\n  /guild/user-list:\n    get:\n      tags:\n        - 服务器相关接口\n      summary: 获取服务器的用户列表\n      operationId: getUsersInGuild\n      parameters:\n        - $ref: \"#/components/parameters/GuildIdParam\"\n        - $ref: \"#/components/parameters/GuildChannelIdParam\"\n          required: false\n        - name: search\n          in: query\n          description: 搜索关键字，在用户名或昵称中搜索\n          schema:\n            type: string\n        - name: role_id\n          in: query\n          description: 角色 ID，获取特定角色的用户列表\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/MobileVerifiedParam\"\n        - name: active_time\n          in: query\n          description: 根据活跃时间排序，`0`是顺序排列，`1`是倒序排列\n          schema:\n            type: integer\n        - name: joined_at\n          in: query\n          description: 根据加入时间排序，`0`是顺序排列，`1`是倒序排列\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/PageNumberParam\"\n        - $ref: \"#/components/parameters/PageSizeParam\"\n        - name: filter_user_id\n          in: query\n          description: 获取指定id所属用户的信息\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        allOf:\n                          - $ref: \"#/components/schemas/PaginationInfo\"\n                          - type: object\n                            properties:\n                              items:\n                                type: array\n                                items:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/guild\"\n                              user_count:\n                                type: integer\n                                description: 用户数量\n                                example: 10\n                              online_count:\n                                type: integer\n                                description: 用户数量\n                                example: 3\n                              offline_count:\n                                type: integer\n                                description: 离线用户数量\n                                example: 7\n  /guild/nickname:\n    post:\n      tags:\n        - 服务器相关接口\n      summary: 修改服务器中的用户昵称\n      operationId: changeUserNickname\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - guild_id\n              properties:\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n                nickname:\n                  type: string\n                  description: 昵称，2 - 64 长度，不传则清空昵称\n                user_id:\n                  allOf:\n                    - $ref: \"#/components/schemas/properties-id\"\n                    - description: 要修改昵称的目标用户 ID，不传则修改当前登陆用户的昵称\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /guild/leave:\n    post:\n      tags:\n        - 服务器相关接口\n      summary: 离开服务器\n      operationId: leaveGuild\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - guild_id\n              properties:\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /guild/kickout:\n    post:\n      tags:\n        - 服务器相关接口\n      summary: 踢出服务器\n      operationId: kickUserById\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - guild_id\n                - target_id\n              properties:\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n                target_id:\n                  allOf:\n                    - $ref: \"#/components/schemas/properties-id\"\n                    - description: 目标用户ID\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /guild-mute/list:\n    get:\n      tags:\n        - 服务器相关接口\n      summary: 服务器静音闭麦列表\n      operationId: getGuildMuteUsers\n      parameters:\n        - $ref: \"#/components/parameters/GuildIdParam\"\n        - name: return_type\n          in: query\n          description: 返回格式，建议为\"detail\", 其他情况仅作为兼容\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        properties:\n                          mic:\n                            description: return_type为detail时返回\n                            type: object\n                            properties:\n                              type:\n                                type: integer\n                                description: 闭麦类型，1为麦克风闭麦\n                                enum:\n                                  - 1\n                              user_ids:\n                                type: array\n                                items:\n                                  $ref: \"#/components/schemas/properties-id\"\n                          headset:\n                            description: return_type为detail时返回\n                            type: object\n                            properties:\n                              type:\n                                type: integer\n                                description: 闭麦类型，2为耳机静音\n                                enum:\n                                  - 2\n                              user_ids:\n                                type: array\n                                items:\n                                  $ref: \"#/components/schemas/properties-id\"\n  /guild-mute/create:\n    post:\n      tags:\n        - 服务器相关接口\n      summary: 添加服务器闭麦或静音\n      operationId: muteUserById\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - guild_id\n                - target_id\n                - type\n              properties:\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n                target_id:\n                  allOf:\n                    - $ref: \"#/components/schemas/properties-id\"\n                    - description: 目标用户ID\n                type:\n                  type: integer\n                  description: 静音类型，`1`代表麦克风闭麦，`2`代表耳机静音\n                  enum:\n                    - 1\n                    - 2\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /guild-mute/delete:\n    post:\n      tags:\n        - 服务器相关接口\n      summary: 删除服务器闭麦或静音\n      operationId: unmuteUserById\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - guild_id\n                - target_id\n                - type\n              properties:\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n                target_id:\n                  allOf:\n                    - $ref: \"#/components/schemas/properties-id\"\n                    - description: 目标用户ID\n                type:\n                  type: integer\n                  description: 静音类型，`1`代表麦克风闭麦，`2`代表耳机静音\n                  enum:\n                    - 1\n                    - 2\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /channel/list:\n    get:\n      tags:\n        - 服务器频道相关接口\n      summary: 获取频道列表\n      operationId: getGuildChannels\n      parameters:\n        - $ref: \"#/components/parameters/PageNumberParam\"\n        - $ref: \"#/components/parameters/PageSizeParam\"\n        - $ref: \"#/components/parameters/GuildIdParam\"\n        - $ref: \"#/components/parameters/GuildChannelTypeParam\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        allOf:\n                          - $ref: \"#/components/schemas/PaginationInfo\"\n                          - type: object\n                            properties:\n                              items:\n                                type: array\n                                items:\n                                  $ref: \"#/components/schemas/_index_basic-2\"\n  /channel/view:\n    get:\n      operationId: getChannelById\n      tags:\n        - 服务器频道相关接口\n      summary: 获取频道详情\n      parameters:\n        - name: target_id\n          required: true\n          in: query\n          description: 目标频道id\n          schema:\n            $ref: \"#/components/schemas/basic-properties-id\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        $ref: \"#/components/schemas/_index_basic-2\"\n  /channel/create:\n    post:\n      tags:\n        - 服务器频道相关接口\n      summary: 创建频道\n      operationId: createChannel\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - guild_id\n                - name\n              properties:\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n                parent_id:\n                  allOf:\n                    - $ref: \"#/components/schemas/basic-properties-id\"\n                  description: 父分组id\n                name:\n                  type: string\n                  description: 频道名称\n                type:\n                  allOf:\n                    - $ref: \"#/components/schemas/properties-type\"\n                  description: 频道类型, `1`为文字，`2`为语音, 默认为`1`\n                limit_amount:\n                  type: integer\n                  maximum: 99\n                  description: 语音频道人数限制，最大99\n                voice_quality:\n                  type: integer\n                  description: 语音音质，默认为`2`。`1`流畅，`2`正常，`3`高质量\n                  enum:\n                    - 1\n                    - 2\n                    - 3\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        $ref: \"#/components/schemas/_index_basic-2\"\n  /channel/delete:\n    post:\n      tags:\n        - 服务器频道相关接口\n      summary: 删除频道\n      operationId: deleteChannelById\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - channel_id\n              properties:\n                channel_id:\n                  $ref: \"#/components/schemas/basic-properties-id\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /channel/user-list:\n    get:\n      tags:\n        - 服务器频道相关接口\n      summary: 查询语音频道内用户\n      operationId: getVoiceChannelUsers\n      description: 只能在语音频道之间移动，用户也必须在其他语音频道在线才能够移动到目标频道。\n      parameters:\n        - name: target_id\n          required: true\n          in: query\n          description: 目标频道id, 需要是语音频道\n          schema:\n            $ref: \"#/components/schemas/basic-properties-id\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        properties:\n                          user_ids:\n                            type: array\n                            description: 用户id的数组\n                            items:\n                              $ref: \"#/components/schemas/properties-id\"\n  /channel/move-user:\n    post:\n      tags:\n        - 服务器频道相关接口\n      summary: 语音频道之间移动用户\n      operationId: moveUsersInVoiceChannel\n      description: 只能在语音频道之间移动，用户也必须在其他语音频道在线才能够移动到目标频道。\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - channel_id\n                - user_ids\n              properties:\n                channel_id:\n                  allOf:\n                    - $ref: \"#/components/schemas/basic-properties-id\"\n                    - description: 目标频道id, 需要是语音频道\n                user_ids:\n                  type: array\n                  description: 用户id的数组\n                  items:\n                    $ref: \"#/components/schemas/properties-id\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        properties:\n                          user_ids:\n                            type: array\n                            description: 用户id的数组\n                            items:\n                              $ref: \"#/components/schemas/properties-id\"\n  /channel-role/index:\n    get:\n      tags:\n        - 服务器频道相关接口\n      summary: 频道角色权限详情\n      operationId: getChannelRoleById\n      parameters:\n        - $ref: \"#/components/parameters/GuildChannelIdParam\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        properties:\n                          permission_overwrites:\n                            type: array\n                            description: 频道权限覆写的角色列表, role_id为角色id, 其它字段见下表\n                            items:\n                              allOf:\n                                - type: object\n                                  properties:\n                                    role_id:\n                                      type: string\n                                      description: 角色id\n                                      example: 702\n                                - $ref: \"#/components/schemas/GuildChannelPermission\"\n                          permission_users:\n                            type: array\n                            description: 频道权限覆写的用户列表\n                            items:\n                              allOf:\n                                - type: object\n                                  properties:\n                                    user:\n                                      $ref: \"#/components/schemas/basic\"\n                                - $ref: \"#/components/schemas/GuildChannelPermission\"\n                          permission_sync:\n                            type: integer\n                            description: 是否同步分组的权限\n                            example: 0\n  /channel-role/create:\n    post:\n      tags:\n        - 服务器频道相关接口\n      operationId: createChannelRole\n      summary: 创建频道角色权限\n      requestBody:\n        $ref: \"#/components/requestBodies/create\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        example:\n                          user_id: \"2418200000\"\n                          allow: 2048\n                          deny: 0\n                        allOf:\n                          - type: object\n                            properties:\n                              user_id:\n                                $ref: \"#/components/schemas/properties-id\"\n                              role_id:\n                                $ref: \"#/components/schemas/GuildRoleId\"\n                          - $ref: \"#/components/schemas/GuildChannelPermission\"\n  /channel-role/update:\n    post:\n      tags:\n        - 服务器频道相关接口\n      summary: 更新频道角色权限\n      operationId: updateChannelRole\n      requestBody:\n        $ref: \"#/components/requestBodies/update\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        example:\n                          user_id: \"2418200000\"\n                          allow: 2048\n                          deny: 0\n                        allOf:\n                          - type: object\n                            properties:\n                              user_id:\n                                $ref: \"#/components/schemas/properties-id\"\n                              role_id:\n                                $ref: \"#/components/schemas/GuildRoleId\"\n                          - $ref: \"#/components/schemas/GuildChannelPermission\"\n  /channel-role/delete:\n    post:\n      tags:\n        - 服务器频道相关接口\n      summary: 删除频道角色权限\n      requestBody:\n        $ref: \"#/components/requestBodies/delete\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        example: {}\n  /message/list:\n    get:\n      tags:\n        - 频道消息相关接口\n      summary: 获取频道聊天消息列表\n      operationId: getChannelMessages\n      description: 此接口非标准分页，需要根据参考消息来查询相邻分页的消息\n      parameters:\n        - name: target_id\n          in: query\n          description: 频道id\n          required: true\n          schema:\n            $ref: \"#/components/schemas/basic-properties-id\"\n        - name: msg_id\n          in: query\n          description: 参考消息id，不传则查询最新消息\n          schema:\n            type: string\n        - name: pin\n          in: query\n          description: 只能为0或者1，是否查询置顶消息。 置顶消息只支持查询最新的消息\n          schema:\n            type: integer\n            format: unsigned integer\n            enum:\n              - 0\n              - 1\n        - $ref: \"#/components/parameters/MessageListFlagParam\"\n        - name: page_size\n          in: query\n          description: 当前分页消息数量, 默认50\n          schema:\n            type: integer\n            default: 50\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        properties:\n                          items:\n                            type: array\n                            items:\n                              $ref: \"#/components/schemas/_index_basic-3\"\n  /message/view:\n    get:\n      tags:\n        - 频道消息相关接口\n      summary: 获取频道聊天消息详情\n      operationId: getChannelMessage\n      description: 获取消息详情\n      parameters:\n        - name: msg_id\n          in: query\n          description: 消息id\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        $ref: \"#/components/schemas/_index_basic-3\"\n  /message/create:\n    post:\n      tags:\n        - 频道消息相关接口\n      summary: 发送频道聊天消息\n      operationId: sendChannelMessage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: \"#/components/schemas/SendMessageRequest\"\n                - type: object\n                  required:\n                    - target_id\n                  properties:\n                    target_id:\n                      allOf:\n                        - $ref: \"#/components/schemas/basic-properties-id\"\n                      description: 目标频道 id\n                    temp_target_id:\n                      type: string\n                      description: >-\n                        用户id,如果传了，代表该消息是临时消息，该消息不会存数据库，但是会在频道内只给该用户推送临时消息。用于在频道内针对用户的操作进行单独的回应通知等。\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                properties:\n                  data:\n                    properties:\n                      msg_id:\n                        allOf:\n                          - $ref: \"#/components/schemas/_fields_id\"\n                        description: 服务端生成的消息 id\n                      msg_timestamp:\n                        type: integer\n                        description: 消息发送时间(ms, 服务器时间戳)\n                        example: 1607072537177\n                      nonce:\n                        type: string\n                        description: 原样返回的字符串\n                        example: xxxx\n  /message/update:\n    post:\n      tags:\n        - 频道消息相关接口\n      summary: 更新频道聊天消息\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - target_id\n                - content\n              properties:\n                msg_id:\n                  $ref: \"#/components/schemas/_fields_id\"\n                content:\n                  type: string\n                  description: 消息内容\n                quote:\n                  allOf:\n                    - $ref: \"#/components/schemas/_fields_id\"\n                  description: 回复某条消息的`msgId`。如果为空，则代表删除回复，不传则无影响。\n                temp_target_id:\n                  type: string\n                  description: 用户id，针对特定用户临时更新消息，必须是正常消息才能更新。与发送临时消息概念不同，但同样不保存数据库。\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /message/delete:\n    post:\n      tags:\n        - 频道消息相关接口\n      summary: 删除频道聊天消息\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - target_id\n                - content\n              properties:\n                msg_id:\n                  $ref: \"#/components/schemas/_fields_id\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /message/reaction-list:\n    get:\n      tags:\n        - 频道消息相关接口\n      summary: 获取频道消息某个回应的用户列表\n      operationId: getMessageReactionUsers\n      parameters:\n        - name: msg_id\n          in: query\n          description: 频道消息的id\n          required: true\n          schema:\n            $ref: \"#/components/schemas/_fields_id\"\n        - name: emoji\n          in: query\n          description: emoji的id, 可以为GuildEmoji或者Emoji, 注意：在get中，应该进行urlencode\n          schema:\n            $ref: \"#/components/schemas/GuildEmojiId\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: array\n                        items:\n                          allOf:\n                            - $ref: \"#/components/schemas/basic\"\n                            - type: object\n                              properties:\n                                reaction_time:\n                                  type: integer\n                                  description: 用户点击reaction的毫秒时间戳\n                                  example: 1612323994414\n  /message/add-reaction:\n    post:\n      tags:\n        - 频道消息相关接口\n      summary: 为消息添加回应\n      operationId: addMessageReaction\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - msg_id\n                - emoji\n              properties:\n                msg_id:\n                  $ref: \"#/components/schemas/_fields_id\"\n                emoji:\n                  $ref: \"#/components/schemas/GuildEmojiId\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /message/delete-reaction:\n    post:\n      tags:\n        - 频道消息相关接口\n      summary: 为消息删除回应\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - msg_id\n                - emoji\n              properties:\n                msg_id:\n                  $ref: \"#/components/schemas/_fields_id\"\n                emoji:\n                  $ref: \"#/components/schemas/GuildEmojiId\"\n                user_id:\n                  allOf:\n                    - $ref: \"#/components/schemas/properties-id\"\n                    - description: 用户的id, 如果不填则为自己的id。删除别人的reaction需要有管理频道消息的权限\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /user-chat/list:\n    get:\n      tags:\n        - 私聊会话\n      summary: 获取私信频道列表\n      parameters:\n        - $ref: \"#/components/parameters/PageNumberParam\"\n        - $ref: \"#/components/parameters/PageSizeParam\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        allOf:\n                          - $ref: \"#/components/schemas/PaginationInfo\"\n                          - type: object\n                            properties:\n                              items:\n                                type: array\n                                items:\n                                  $ref: \"#/components/schemas/UserChat\"\n  /user-chat/view:\n    get:\n      tags:\n        - 私聊会话\n      summary: 获取私信频道详情\n      parameters:\n        - name: chat_code\n          in: query\n          description: 私聊会话 Code\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      items:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/UserChatDetail\"\n  /user-chat/create:\n    post:\n      tags:\n        - 私聊会话\n      summary: 创建私信频道\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                target_id:\n                  allOf:\n                    - $ref: \"#/components/schemas/properties-id\"\n                  description: 目标用户id\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      items:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/UserChatDetail\"\n  /user-chat/delete:\n    post:\n      tags:\n        - 私聊会话\n      summary: 删除私信频道\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                target_id:\n                  allOf:\n                    - $ref: \"#/components/schemas/ChatCode\"\n                  description: 私信会话Code\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /direct-message/list:\n    get:\n      tags:\n        - 私聊消息相关接口\n      summary: 获取私信消息列表\n      parameters:\n        - name: chat_code\n          in: query\n          description: 私信会话 Code。`chat_code`与`target_id`必须传一个\n          schema:\n            type: string\n        - name: target_id\n          description: 目标用户 id，后端会自动创建会话。有此参数之后可不传`chat_code`参数\n          in: query\n          schema:\n            $ref: \"#/components/schemas/properties-id\"\n        - name: msg_id\n          description: 参考消息 id，不传则查询最新消息\n          in: query\n          schema:\n            $ref: \"#/components/schemas/_fields_id\"\n        - $ref: \"#/components/parameters/MessageListFlagParam\"\n        - $ref: \"#/components/parameters/PageNumberParam\"\n        - name: page_size\n          in: query\n          description: 当前分页消息数量, 默认50\n          schema:\n            type: integer\n            default: 50\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        properties:\n                          items:\n                            type: array\n                            items:\n                              $ref: \"#/components/schemas/DirectMessage\"\n  /direct-message/create:\n    post:\n      tags:\n        - 私聊消息相关接口\n      summary: 发送私信聊天消息\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: \"#/components/schemas/SendMessageRequest\"\n              type: object\n              properties:\n                target_id:\n                  allOf:\n                    - $ref: \"#/components/schemas/properties-id\"\n                  description: 目标用户 id，后端会自动创建会话。有此参数之后可不传`chat_code`参数\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                properties:\n                  data:\n                    properties:\n                      msg_id:\n                        type: string\n                        description: 服务端生成的消息 id\n                        example: 50974c-364c983fa6cb\n                      msg_timestamp:\n                        type: integer\n                        description: 消息发送时间(ms, 服务器时间戳)\n                        example: 1607072537177\n                      nonce:\n                        type: string\n                        description: 原样返回的字符串\n                        example: xxxx\n  /direct-message/update:\n    post:\n      tags:\n        - 私聊消息相关接口\n      summary: 更新私信聊天消息\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - target_id\n                - content\n              properties:\n                msg_id:\n                  $ref: \"#/components/schemas/_fields_id\"\n                content:\n                  type: string\n                  description: 消息内容\n                quote:\n                  allOf:\n                    - $ref: \"#/components/schemas/_fields_id\"\n                  description: 回复某条消息的`msgId`。如果为空，则代表删除回复，不传则无影响。\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /direct-message/delete:\n    post:\n      tags:\n        - 私聊消息相关接口\n      summary: 删除私信聊天消息\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - target_id\n                - content\n              properties:\n                msg_id:\n                  $ref: \"#/components/schemas/_fields_id\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /direct-message/reaction-list:\n    get:\n      tags:\n        - 私聊消息相关接口\n      summary: 获取消息某个回应的用户列表\n      parameters:\n        - name: msg_id\n          in: query\n          description: 消息的id\n          required: true\n          schema:\n            $ref: \"#/components/schemas/_fields_id\"\n        - name: emoji\n          in: query\n          description: emoji的id, 可以为GuildEmoji或者Emoji, 注意：在get中，应该进行urlencode\n          schema:\n            $ref: \"#/components/schemas/GuildEmojiId\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: array\n                        items:\n                          allOf:\n                            - $ref: \"#/components/schemas/basic\"\n                            - type: object\n                              properties:\n                                reaction_time:\n                                  type: integer\n                                  description: 用户点击reaction的毫秒时间戳\n  /direct-message/add-reaction:\n    post:\n      tags:\n        - 私聊消息相关接口\n      summary: 为消息添加回应\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - msg_id\n                - emoji\n              properties:\n                msg_id:\n                  $ref: \"#/components/schemas/_fields_id\"\n                emoji:\n                  $ref: \"#/components/schemas/GuildEmojiId\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /direct-message/delete-reaction:\n    post:\n      tags:\n        - 私聊消息相关接口\n      summary: 为消息删除回应\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - msg_id\n                - emoji\n              properties:\n                msg_id:\n                  $ref: \"#/components/schemas/_fields_id\"\n                emoji:\n                  $ref: \"#/components/schemas/GuildEmojiId\"\n                user_id:\n                  allOf:\n                    - $ref: \"#/components/schemas/properties-id\"\n                    - description: 用户的id, 如果不填则为自己的id。删除别人的reaction需要有管理频道消息的权限\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\n  /gateway/index:\n    get:\n      tags:\n        - Gateway接口\n      summary: 获取网关连接地址\n      operationId: getIndex\n      parameters:\n        - name: compress\n          in: query\n          description: 下发数据是否压缩，默认为`1`,代表压缩\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      url:\n                        type: string\n                        description: 网关的连接地址\n                        example: wss://xxxx\n  /user/me:\n    get:\n      tags:\n        - 用户相关接口\n      summary: 获取当前用户信息\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        allOf:\n                          - $ref: \"#/components/schemas/basic\"\n                          - type: object\n                            properties:\n                              mobile_verified:\n                                type: boolean\n                                description: 手机号是否已验证\n                                example: true\n                              mobile_prefix:\n                                type: string\n                                description: 手机区号,如中国为86\n                                example: \"86\"\n                              mobile:\n                                type: string\n                                description: 用户手机号，带掩码\n                                example: 110****2333\n                              invited_count:\n                                type: integer\n                                description: 当前邀请注册的人数\n                                example: 3\n  /user/view:\n    get:\n      tags:\n        - 用户相关接口\n      summary: 获取目标用户信息\n      parameters:\n        - $ref: \"#/components/parameters/UserIdParam\"\n        - name: guild_id\n          in: query\n          description: 服务器id\n          schema:\n            $ref: \"#/components/schemas/id\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        allOf:\n                          - $ref: \"#/components/schemas/basic\"\n                          - type: object\n                            properties:\n                              mobile_verified:\n                                type: boolean\n                                description: 手机号是否已验证\n                                example: true\n                              roles:\n                                type: array\n                                description: 用户在当前服务器中的角色 id 组成的列表\n                                items:\n                                  $ref: \"#/components/schemas/GuildRoleId\"\n                              joined_at:\n                                type: integer\n                                description: 加入服务器时间\n                                example: 1621338425000\n                              active_time:\n                                type: integer\n                                description: 活跃时间\n                                example: 1628688607719\n  /user/offline:\n    post:\n      tags:\n        - 用户相关接口\n      summary: 机器人下线\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n  /asset/create:\n    post:\n      tags:\n        - 附件相关接口\n      summary: 上传多媒体文件\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n                  description: 目前支持 **图片**, **视频(.mp4 .mov)**, **文件**\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        properties:\n                          url:\n                            type: string\n                            description: 资源url\n                            example: >-\n                              https://img.kaiheila.cn/attachments/2021-01/18/xxxxxxxxx.txt\n  /guild-role/list:\n    get:\n      tags:\n        - 服务器角色权限相关接口\n      summary: 获取服务器角色列表\n      parameters:\n        - $ref: \"#/components/parameters/GuildIdParam\"\n        - $ref: \"#/components/parameters/PageNumberParam\"\n        - $ref: \"#/components/parameters/PageSizeParam\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        allOf:\n                          - $ref: \"#/components/schemas/PaginationInfo\"\n                          - type: object\n                            properties:\n                              items:\n                                type: array\n                                items:\n                                  type: object\n                                  $ref: \"#/components/schemas/GuildRole\"\n  /guild-role/create:\n    post:\n      tags:\n        - 服务器角色权限相关接口\n      summary: 创建服务器角色\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - guild_id\n              properties:\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n                name:\n                  type: string\n                  description: 如果不写，则为\"新角色\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        $ref: \"#/components/schemas/GuildRole\"\n  /guild-role/update:\n    post:\n      tags:\n        - 服务器角色权限相关接口\n      summary: 更新服务器角色\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - guild_id\n                - role_id\n              properties:\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n                role_id:\n                  type: integer\n                  format: unsigned integer\n                  description: 角色id\n                  example: 702\n                name:\n                  type: string\n                  description: 角色名称\n                  example: 管理员\n                color:\n                  type: integer\n                  format: unsigned integer\n                  minimum: 0\n                  maximum: 16777215\n                  description: 颜色\n                  example: 0\n                hoist:\n                  type: integer\n                  format: unsigned integer\n                  description: 只能为0或者1，是否把该角色的用户在用户列表排到前面\n                  enum:\n                    - 0\n                    - 1\n                mentionable:\n                  type: integer\n                  format: unsigned integer\n                  description: 只能为0或者1，该角色是否可以被提及\n                  enum:\n                    - 0\n                    - 1\n                permissions:\n                  type: integer\n                  format: unsigned integer\n                  description: >-\n                    权限,参见[权限说明](https://developer.kaiheila.cn/doc/http/guild-role#权限说明)\n                  example: 2048\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        $ref: \"#/components/schemas/GuildRole\"\n  /guild-role/delete:\n    post:\n      tags:\n        - 服务器角色权限相关接口\n      summary: 删除服务器角色\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - guild_id\n                - role_id\n              properties:\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n                role_id:\n                  type: integer\n                  format: unsigned integer\n                  description: 角色id\n                  example: 702\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n  /guild-role/grant:\n    post:\n      tags:\n        - 服务器角色权限相关接口\n      summary: 赋予用户角色\n      operationId: grantGuildRole\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - guild_id\n                - user_id\n                - role_id\n              properties:\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n                user_id:\n                  $ref: \"#/components/schemas/properties-id\"\n                role_id:\n                  $ref: \"#/components/schemas/GuildRoleId\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        properties:\n                          user_id:\n                            $ref: \"#/components/schemas/properties-id\"\n                          guild_id:\n                            $ref: \"#/components/schemas/id\"\n                          roles:\n                            type: array\n                            description: 角色id的列表\n                            items:\n                              $ref: \"#/components/schemas/GuildRoleId\"\n  /guild-role/revoke:\n    post:\n      tags:\n        - 服务器角色权限相关接口\n      summary: 删除用户角色\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - guild_id\n                - user_id\n                - role_id\n              properties:\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n                user_id:\n                  $ref: \"#/components/schemas/properties-id\"\n                role_id:\n                  $ref: \"#/components/schemas/GuildRoleId\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        properties:\n                          user_id:\n                            $ref: \"#/components/schemas/properties-id\"\n                          guild_id:\n                            $ref: \"#/components/schemas/id\"\n                          roles:\n                            type: array\n                            description: 角色id的列表\n                            items:\n                              $ref: \"#/components/schemas/GuildRoleId\"\n  /intimacy/index:\n    get:\n      tags:\n        - 亲密度相关接口\n      summary: 获取用户的亲密度\n      operationId: getIntimacy\n      description: 机器人可以在后台配置默认的初始亲密度和形象，当用户触发某些事件时，机器人可以根据一些逻辑来更新与该用户的亲密度以及形象展示。\n      parameters:\n        - $ref: \"#/components/parameters/UserIdParam\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        properties:\n                          img_url:\n                            type: string\n                            description: 机器人给用户显示的形象图片地址\n                          social_info:\n                            type: string\n                            description: 机器人显示给用户的社交信息\n                            example: test\n                          last_read:\n                            type: integer\n                            description: 用户上次查看的时间戳\n                            example: 0\n                          img_list:\n                            type: array\n                            description: 形象图片的总列表\n                            items:\n                              type: object\n                              properties:\n                                id:\n                                  type: string\n                                  description: 形象图片的 id\n                                  example: \"11\"\n                                url:\n                                  type: string\n                                  description: 形象图片的地址\n                                  example: \"\"\n  /intimacy/update:\n    post:\n      tags:\n        - 亲密度相关接口\n      summary: 更新用户亲密度\n      operationId: updateIntimacy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - user_id\n              properties:\n                user_id:\n                  allOf:\n                    - $ref: \"#/components/schemas/properties-id\"\n                  description: 用户的id\n                score:\n                  type: integer\n                  description: 亲密度，0-2200\n                  example: 123\n                social_info:\n                  type: string\n                  description: 机器人与用户的社交信息，500 字以内\n                  example: test\n                img_id:\n                  type: string\n                  description: 表情 ID\n                  example: \"1\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n  /guild-emoji/list:\n    get:\n      tags:\n        - 服务器表情相关接口\n      summary: 获取服务器表情列表\n      operationId: getGuildEmojis\n      parameters:\n        - $ref: \"#/components/parameters/PageNumberParam\"\n        - $ref: \"#/components/parameters/PageSizeParam\"\n        - $ref: \"#/components/parameters/GuildIdParam\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        allOf:\n                          - $ref: \"#/components/schemas/PaginationInfo\"\n                          - type: object\n                            properties:\n                              items:\n                                type: array\n                                items:\n                                  type: object\n                                  $ref: \"#/components/schemas/GuildEmoji\"\n  /guild-emoji/create:\n    post:\n      tags:\n        - 服务器表情相关接口\n      summary: 创建服务器表情\n      operationId: createGuildEmoji\n      description: Header 中 Content-Type 必须为 multipart/form-data\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              required:\n                - guild_id\n                - emoji\n              properties:\n                name:\n                  type: string\n                  description: 表情名。长度限制 2 - 32 字符，如果不写，则为随机字符串\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n                emoji:\n                  type: string\n                  format: binary\n                  description: 表情文件。必须为 PNG 类型，大小不能超过 256 KB\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        $ref: \"#/components/schemas/GuildEmoji\"\n  /guild-emoji/update:\n    post:\n      tags:\n        - 服务器表情相关接口\n      summary: 更新服务器表情\n      operationId: updateGuildEmoji\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n                - id\n              properties:\n                name:\n                  type: string\n                  description: 表情名。长度限制 2 - 32 字符，如果不写，则为随机字符串\n                id:\n                  type: string\n                  description: 表情 ID\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n  /guild-emoji/delete:\n    post:\n      tags:\n        - 服务器表情相关接口\n      operationId: deleteGuildEmoji\n      summary: 删除服务器表情\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              required:\n                - id\n              properties:\n                id:\n                  type: string\n                  description: 表情 ID\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n  /invite/list:\n    get:\n      tags:\n        - 邀请相关接口\n      summary: 获取邀请列表\n      operationId: listInvites\n      description: 服务器id或者频道id必须填一个\n      parameters:\n        - name: guild_id\n          in: query\n          description: 服务器id\n          required: false\n          schema:\n            $ref: \"#/components/schemas/id\"\n        - $ref: \"#/components/parameters/GuildChannelIdParam\"\n        - $ref: \"#/components/parameters/PageNumberParam\"\n        - $ref: \"#/components/parameters/PageSizeParam\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        allOf:\n                          - $ref: \"#/components/schemas/PaginationInfo\"\n                          - type: object\n                            properties:\n                              items:\n                                type: array\n                                items:\n                                  type: object\n                                  properties:\n                                    channel_id:\n                                      $ref: \"#/components/schemas/basic-properties-id\"\n                                    guild_id:\n                                      $ref: \"#/components/schemas/id\"\n                                    url_code:\n                                      type: string\n                                      description: 邀请码\n                                      example: XXX\n                                    url:\n                                      type: string\n                                      description: 邀请链接\n                                      example: https://kaihei.co/XXX\n                                    user:\n                                      $ref: \"#/components/schemas/basic\"\n  /invite/create:\n    post:\n      tags:\n        - 邀请相关接口\n      operationId: createInvite\n      summary: 创建邀请链接\n      description: 服务器id或者频道id必须填一个\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n                channel_id:\n                  $ref: \"#/components/schemas/basic-properties-id\"\n                duration:\n                  type: integer\n                  description: >-\n                    邀请链接有效时长（秒）（ 0 => 永不； 1800 => 0.5小时； 3600 => 1个小时； 21600 =>\n                    6个小时； 43200 => 12个小时； 86400 => 1天； 604800 => 7天）\n                  default: 604800\n                  example: 604800\n                  enum:\n                    - 0\n                    - 1800\n                    - 3600\n                    - 32600\n                    - 43200\n                    - 86400\n                    - 604800\n                setting_times:\n                  type: integer\n                  description: >-\n                    设置的次数 （ -1 => 无限制； 1 => 1次使用； 5 => 5次使用； 10 => 10次使用 ；25 =>\n                    25次使用； 50 => 50次使用； 100 => 100次使用）\n                  default: -1\n                  example: -1\n                  enum:\n                    - -1\n                    - 1\n                    - 5\n                    - 10\n                    - 25\n                    - 50\n                    - 100\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BasicResponse\"\n                  - type: object\n                    properties:\n                      data:\n                        type: object\n                        properties:\n                          url:\n                            type: string\n                            description: 邀请链接\n                            example: https://kaihei.co/xxxx\n  /invite/delete:\n    post:\n      tags:\n        - 邀请相关接口\n      summary: 删除邀请链接\n      operationId: deleteInvite\n      description: 服务器id或者频道id必须填一个\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - url_code\n              properties:\n                url_code:\n                  type: string\n                  example: XXX\n                guild_id:\n                  $ref: \"#/components/schemas/id\"\n                channel_id:\n                  $ref: \"#/components/schemas/basic-properties-id\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResponse\"\nwebhooks:\n  textMessage:\n    post:\n      tags:\n        - 消息相关事件\n      summary: 文字消息\n      requestBody:\n        $ref: \"#/components/requestBodies/text\"\n  imageMessage:\n    post:\n      tags:\n        - 消息相关事件\n      summary: 图片消息\n      requestBody:\n        $ref: \"#/components/requestBodies/image\"\n  videoMessage:\n    post:\n      tags:\n        - 消息相关事件\n      summary: 视频消息\n      requestBody:\n        $ref: \"#/components/requestBodies/video\"\n  fileMessage:\n    post:\n      tags:\n        - 消息相关事件\n      summary: 文件消息\n      requestBody:\n        $ref: \"#/components/requestBodies/file\"\n  kmarkdownMessage:\n    post:\n      tags:\n        - 消息相关事件\n      summary: KMarkDown消息\n      requestBody:\n        $ref: \"#/components/requestBodies/kmarkdown\"\n  cardMessage:\n    post:\n      tags:\n        - 消息相关事件\n      summary: 卡片消息\n      requestBody:\n        $ref: \"#/components/requestBodies/card\"\n  userAddReaction:\n    post:\n      tags:\n        - 频道相关事件\n      summary: 用户添加reaction\n      requestBody:\n        $ref: \"#/components/requestBodies/add\"\n  userDeleteReaction:\n    post:\n      tags:\n        - 频道相关事件\n      summary: 频道内用户取消reaction\n      requestBody:\n        $ref: \"#/components/requestBodies/reaction_delete\"\n  updateMessge:\n    post:\n      tags:\n        - 频道相关事件\n        - 消息相关事件\n      summary: 频道消息更新\n      requestBody:\n        $ref: \"#/components/requestBodies/message_update\"\n  deleteMessage:\n    post:\n      tags:\n        - 频道相关事件\n        - 消息相关事件\n      summary: 频道消息被删除\n      requestBody:\n        $ref: \"#/components/requestBodies/message_delete\"\n  createChannel:\n    post:\n      tags:\n        - 频道相关事件\n      summary: 新增频道\n      requestBody:\n        $ref: \"#/components/requestBodies/channel_create\"\n  updateChannel:\n    post:\n      tags:\n        - 频道相关事件\n      summary: 频道信息更新\n      requestBody:\n        $ref: \"#/components/requestBodies/channel_update\"\n  deleteChannel:\n    post:\n      tags:\n        - 频道相关事件\n      summary: 删除频道\n      requestBody:\n        $ref: \"#/components/requestBodies/channel_delete\"\n  pinMessage:\n    post:\n      tags:\n        - 频道相关事件\n      summary: 新的频道置顶消息\n      requestBody:\n        $ref: \"#/components/requestBodies/pin_add\"\n  unpinMessage:\n    post:\n      tags:\n        - 频道相关事件\n      summary: 取消频道置顶消息\n      requestBody:\n        $ref: \"#/components/requestBodies/cancel\"\n  updatePrivateMessage:\n    post:\n      tags:\n        - 私聊相关事件\n      summary: 私聊消息更新\n      requestBody:\n        $ref: \"#/components/requestBodies/message_update-2\"\n  deletePrivateMessage:\n    post:\n      tags:\n        - 私聊相关事件\n      summary: 私聊消息被删除\n      requestBody:\n        $ref: \"#/components/requestBodies/message_delete-2\"\n  privateAddReaction:\n    post:\n      tags:\n        - 私聊相关事件\n      summary: 私聊内用户添加reaction\n      requestBody:\n        $ref: \"#/components/requestBodies/reaction_add\"\n  privateDeleteReaction:\n    post:\n      tags:\n        - 私聊相关事件\n      summary: 私聊内用户删除reaction\n      requestBody:\n        $ref: \"#/components/requestBodies/reaction_delete-2\"\n  memberJoin:\n    post:\n      tags:\n        - 服务器成员相关事件\n      summary: 新成员加入服务器\n      requestBody:\n        $ref: \"#/components/requestBodies/join\"\n  memberExit:\n    post:\n      tags:\n        - 服务器成员相关事件\n      summary: 服务器成员退出\n      requestBody:\n        $ref: \"#/components/requestBodies/exit\"\n  memberUpdate:\n    post:\n      tags:\n        - 服务器成员相关事件\n      summary: 服务器成员信息更新\n      requestBody:\n        $ref: \"#/components/requestBodies/member_update\"\n  memberOnline:\n    post:\n      tags:\n        - 服务器成员相关事件\n      summary: 服务器成员信息上线\n      requestBody:\n        $ref: \"#/components/requestBodies/online\"\n  memberOffline:\n    post:\n      tags:\n        - 服务器成员相关事件\n      summary: 服务器成员信息下线\n      requestBody:\n        $ref: \"#/components/requestBodies/offline\"\n  roleAdd:\n    post:\n      tags:\n        - 服务器角色相关事件\n      summary: 服务器角色增加\n      requestBody:\n        $ref: \"#/components/requestBodies/role_add\"\n  roleUpdate:\n    post:\n      tags:\n        - 服务器角色相关事件\n      summary: 服务器角色更新\n      requestBody:\n        $ref: \"#/components/requestBodies/role_update\"\n  roleDelete:\n    post:\n      tags:\n        - 服务器角色相关事件\n      summary: 服务器角色删除\n      requestBody:\n        $ref: \"#/components/requestBodies/role_delete\"\n  guildUpdate:\n    post:\n      tags:\n        - 服务器相关事件\n      summary: 服务器信息更新\n      requestBody:\n        $ref: \"#/components/requestBodies/guild_update\"\n  guildDelete:\n    post:\n      tags:\n        - 服务器相关事件\n      summary: 服务器删除\n      requestBody:\n        $ref: \"#/components/requestBodies/guild_delete\"\n  guildBanUser:\n    post:\n      tags:\n        - 服务器相关事件\n      summary: 服务器封禁用户\n      requestBody:\n        $ref: \"#/components/requestBodies/ban\"\n  guildUnbanUser:\n    post:\n      tags:\n        - 服务器相关事件\n      summary: 服务器解除封禁用户\n      requestBody:\n        $ref: \"#/components/requestBodies/unban\"\n  userJoinChannel:\n    post:\n      tags:\n        - 用户相关事件\n        - 频道相关事件\n      summary: 用户加入语音频道\n      requestBody:\n        $ref: \"#/components/requestBodies/channel_join\"\n  userExitChannel:\n    post:\n      tags:\n        - 用户相关事件\n        - 频道相关事件\n      summary: 用户退出语音频道\n      requestBody:\n        $ref: \"#/components/requestBodies/channel_exit\"\n  userJoinGuild:\n    post:\n      tags:\n        - 用户相关事件\n        - 频道相关事件\n      summary: 自己加入服务器\n      description: |\n        当自己被邀请或主动加入新的服务器时, 产生该事件（对于机器人来说，就是机器人被邀请进入新服务器）\n      requestBody:\n        $ref: \"#/components/requestBodies/guild_join\"\n  userExitGuild:\n    post:\n      tags:\n        - 用户相关事件\n        - 频道相关事件\n      summary: 自己退出服务器\n      description: |\n        当自己被踢出服务器或被拉黑或主动退出服务器时, 产生该事件（对于机器人来说，就是机器人被踢出/拉黑/主动退出新服务器）\n      requestBody:\n        $ref: \"#/components/requestBodies/guild_exit\"\n  userUpdateInfo:\n    post:\n      tags:\n        - 用户相关事件\n        - 频道相关事件\n      summary: 用户信息更新\n      description: |\n        **该事件与服务器无关, 遵循以下条件**\n        - 仅当用户的 **用户名** 或 **头像** 变更时;\n        - 仅通知与该用户存在关联的用户或Bot: a. 存在聊天会话 b. 双方好友关系\n      requestBody:\n        $ref: \"#/components/requestBodies/info_update\"\n  userClickButton:\n    post:\n      tags:\n        - 用户相关事件\n        - 消息相关事件\n      summary: 用户点击按钮（Card Message）\n      requestBody:\n        $ref: \"#/components/requestBodies/click-button\"\ncomponents:\n  parameters:\n    PageNumberParam:\n      name: page\n      in: query\n      description: 目标页数\n      schema:\n        type: integer\n    PageSizeParam:\n      name: page_size\n      in: query\n      description: 每页数据数量\n      schema:\n        type: integer\n    GuildIdParam:\n      name: guild_id\n      in: query\n      description: 服务器id\n      required: true\n      schema:\n        $ref: \"#/components/schemas/id\"\n    GuildChannelIdParam:\n      name: channel_id\n      in: query\n      description: 频道id\n      schema:\n        $ref: \"#/components/schemas/basic-properties-id\"\n    MobileVerifiedParam:\n      name: mobile_verified\n      in: query\n      description: 只能为`0`或`1`，`0`是未认证，`1`是已认证\n      schema:\n        type: integer\n        enum:\n          - 0\n          - 1\n    GuildChannelTypeParam:\n      name: type\n      in: query\n      description: 频道类型, `1`为文字，`2`为语音, 默认为`1`\n      schema:\n        $ref: \"#/components/schemas/properties-type\"\n    MessageListFlagParam:\n      name: flag\n      in: query\n      description: |-\n        查询模式，有三种模式可以选择。不传则默认查询最新的消息。  \n        before: 查询参考消息之前的消息，不包括参考消息  \n        around: 查询以参考消息为中心，前后一定数量的消息  \n        after: 查询参考消息之后的消息，不包括参考消息\n      schema:\n        type: string\n        enum:\n          - before\n          - around\n          - after\n    UserIdParam:\n      name: user_id\n      in: query\n      required: true\n      description: 用户id\n      schema:\n        $ref: \"#/components/schemas/properties-id\"\n  schemas:\n    type:\n      type: integer\n      description: 消息类型, 1:文字消息, 2:图片消息，3:视频消息，4:文件消息， 8:音频消息，9:KMarkdown，10:card消息\n    id:\n      type: string\n      description: 服务器id\n      example: \"91686000000\"\n    mention:\n      type: array\n      description: \"`@特定用户` 的用户ID数组\"\n      items:\n        type: string\n    mention_all:\n      type: boolean\n      description: 是否含有`@全体人员`\n    mention_roles:\n      type: array\n      description: \"`@特定角色` 的角色ID数组\"\n      items:\n        type: integer\n    mention_here:\n      type: boolean\n      description: 是否含有`@在线成员`\n    basic:\n      type: object\n      description: 用户对象\n      properties:\n        id:\n          type: string\n          description: 用户id\n          example: \"2418200000\"\n        username:\n          type: string\n          description: 用户的名称\n          example: tz-un\n        identify_num:\n          type: string\n          description: 用户名的认证数字，用户名正常为：user_name#identify_num\n          example: \"5618\"\n        online:\n          type: boolean\n          description: 当前是否在线\n          example: false\n        status:\n          type: integer\n          description: 用户的状态, 0和1代表正常，10代表被封禁\n          enum:\n            - 0\n            - 1\n            - 10\n          example: 0\n        bot:\n          type: boolean\n          description: 是否为机器人\n        avatar:\n          type: string\n          description: 用户的头像的url地址\n          example: https://img.kaiheila.cn/avatars/2020-02/xxxx.jpg/icon\n        vip_avatar:\n          type: string\n          description: vip用户的头像的url地址，可能为gif动图\n          example: https://img.kaiheila.cn/avatars/2020-02/xxxx.jpg/icon\n        mobile_verified:\n          type: boolean\n          description: 手机号是否已验证\n          example: true\n    mention_part:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 28444\n        username:\n          type: string\n          example: example\n        full_name:\n          type: string\n          example: example#1111\n        avatar:\n          type: string\n          example: \"***.jpg\"\n    role_id:\n      type: integer\n      format: unsigned integer\n      description: 角色id\n      example: 702\n    mention_info:\n      type: object\n      properties:\n        mention_part:\n          description: \"`@特定用户` 的用户ID信息，与`mention`中数据对应\"\n          type: array\n          items:\n            $ref: \"#/components/schemas/mention_part\"\n        mention_role_part:\n          type: array\n          description: \"`@特定角色` 的角色ID信息，与`mention_roles`中数据对应\"\n          items:\n            $ref: \"#/components/schemas/role_id\"\n    kmarkdownElement:\n      allOf:\n        - $ref: \"#/components/schemas/mention_info\"\n        - type: object\n          properties:\n            raw_content:\n              type: string\n              description: 经过编译的纯文本，如原始文本为\"*Hello World*\", 则此处为\"Hello World\"\n    kmarkdown:\n      type: object\n      description: kmarkdown消息\n      properties:\n        type:\n          allOf:\n            - $ref: \"#/components/schemas/type\"\n          example: 9\n        guild_id:\n          $ref: \"#/components/schemas/id\"\n        channel_name:\n          type: string\n          description: 频道名\n          example: 一个频道\n        mention:\n          $ref: \"#/components/schemas/mention\"\n        mention_all:\n          $ref: \"#/components/schemas/mention_all\"\n        mention_roles:\n          $ref: \"#/components/schemas/mention_roles\"\n        mention_here:\n          $ref: \"#/components/schemas/mention_here\"\n        author:\n          $ref: \"#/components/schemas/basic\"\n        kmarkdown:\n          $ref: \"#/components/schemas/kmarkdownElement\"\n    card:\n      type: object\n      description: 卡片消息\n      properties:\n        type:\n          allOf:\n            - $ref: \"#/components/schemas/type\"\n          example: 9\n        guild_id:\n          $ref: \"#/components/schemas/id\"\n        channel_name:\n          type: string\n          description: 频道名\n          example: 一个频道\n        mention:\n          $ref: \"#/components/schemas/mention\"\n        mention_all:\n          $ref: \"#/components/schemas/mention_all\"\n        mention_roles:\n          $ref: \"#/components/schemas/mention_roles\"\n        mention_here:\n          $ref: \"#/components/schemas/mention_here\"\n        author:\n          $ref: \"#/components/schemas/basic\"\n    basic-2:\n      type: object\n      required:\n        - s\n        - d\n        - sn\n      properties:\n        s:\n          type: integer\n          description: >-\n            websocket信令，详见[开黑啦websocket说明](https://developer.kaiheila.cn/doc/websocket)\n          example: 0\n        d:\n          type: object\n          description: 具体数据\n          required:\n            - channel_type\n            - type\n            - target_id\n            - author_id\n            - content\n            - msg_id\n            - msg_timestamp\n            - extra\n          properties:\n            channel_type:\n              type: string\n              description: >-\n                消息频道类型, 群体消息为`GROUP`，个人消息为`PERSON`。例如，向频道内发送的消息为`GROUP`,\n                按钮返回事件为`PERSON`\n              example: GROUP\n              enum:\n                - GROUP\n                - PERSON\n            type:\n              type: integer\n            target_id:\n              type: string\n              description: 发送目的 id，如果为是 GROUP 消息，则 target_id 代表频道 id\n              example: \"60163899100000\"\n            author_id:\n              type: string\n              description: 发送者 id, 1 代表系统\n              example: 1\n            content:\n              type: string\n              description: 消息内容, 文件，图片，视频时，content 为 url\n            msg_id:\n              type: string\n              description: 消息的 id\n              example: 67637d4c-xxxx-xxxx-xxxx-xxxxx\n            msg_timestamp:\n              type: integer\n              description: 消息发送时间的毫秒时间戳\n              example: 1607674740160\n            nonce:\n              type: string\n              description: 随机串，与用户消息发送 api 中传的 nonce 保持一致\n              example: your nonce\n            verify_token:\n              type: string\n              description: webhook设置中的verify_token\n              example: your verify token\n            extra:\n              type: object\n              description: 不同的消息类型，结构不一致\n        sn:\n          type: integer\n          description: >-\n            消息序号，针对当前session。该字段并不一定有，只在s=0时有，与webhook一致。详见[开黑啦websocket说明](https://developer.kaiheila.cn/doc/websocket)\n          example: 1\n    image:\n      type: object\n      description: 图片消息\n      properties:\n        type:\n          allOf:\n            - $ref: \"#/components/schemas/type\"\n          example: 2\n        guild_id:\n          $ref: \"#/components/schemas/id\"\n        author:\n          $ref: \"#/components/schemas/basic\"\n        attachments:\n          type: object\n          properties:\n            type:\n              type: string\n              enum:\n                - image\n            name:\n              type: string\n              description: 多媒体名\n              example: xxx.jpg\n            url:\n              type: string\n              description: 附件链接\n              example: https://img.kaiheila.cn/assets/2020-12/IHT5xxxxxA07o03m.jpg\n    video:\n      type: object\n      description: 视频消息\n      properties:\n        type:\n          allOf:\n            - $ref: \"#/components/schemas/type\"\n          example: 3\n        guild_id:\n          $ref: \"#/components/schemas/id\"\n        author:\n          $ref: \"#/components/schemas/basic\"\n        attachments:\n          type: object\n          properties:\n            type:\n              type: string\n              enum:\n                - video\n            name:\n              type: string\n              description: 多媒体名\n              example: 002iQMhagx07Fx0S4xxxx323o0E010.mp4\n            url:\n              type: string\n              description: 附件链接\n              example: https://img.kaiheila.cn/attachments/2020-12/11/asd.mp4\n            file_type:\n              description: 文件格式\n              type: string\n              example: video/mp4\n            size:\n              type: integer\n              description: 大小 单位（B）\n              example: 722882\n            duration:\n              type: number\n              description: 视频时长（s）\n              example: 15.673\n            width:\n              type: integer\n              description: 视频宽度\n              example: 640\n            height:\n              type: integer\n              description: 视频高度\n              example: 480\n    file:\n      type: object\n      description: 文件消息\n      properties:\n        type:\n          allOf:\n            - $ref: \"#/components/schemas/type\"\n          example: 4\n        guild_id:\n          $ref: \"#/components/schemas/id\"\n        author:\n          $ref: \"#/components/schemas/basic\"\n        attachments:\n          type: object\n          properties:\n            type:\n              type: string\n              enum:\n                - file\n            url:\n              type: string\n              example: https://img.kaiheila.cn/attachments/2020-12/11/asd.txt\n            file_type:\n              description: 文件格式\n              type: string\n              example: text/plain\n            name:\n              type: string\n              description: 多媒体名\n            size:\n              type: integer\n              description: 大小 单位（B）\n              example: 2575670\n    BasicResponse:\n      type: object\n      required:\n        - message\n        - code\n      properties:\n        code:\n          type: integer\n          description: 错误码，0代表成功，非0代表失败，具体的错误码参见错误码一览\n          example: 0\n        message:\n          type: string\n          description: 错误消息，具体的返回消息会根据Accept-Language来返回。\n          example: 操作成功\n        data:\n          type: object\n          description: 返回数据\n    PaginationInfo:\n      type: object\n      properties:\n        items:\n          type: array\n          description: 数据列表\n          items:\n            type: object\n        meta:\n          type: object\n          description: 分页信息\n          properties:\n            page:\n              type: integer\n              description: 页码\n              example: 1\n            page_total:\n              type: integer\n              description: 总页数\n              example: 10\n            page_size:\n              type: integer\n              description: 每一页的数据\n              example: 50\n            total:\n              type: integer\n              description: 总数据量\n              example: 480\n        sort:\n          type: object\n          description: Map。分页的排序, key:+-1, 如果为1代表按key升序，如果为-1代表按key降序\n          example:\n            id: 1\n    properties-id:\n      type: string\n      description: 用户id\n      example: \"2418200000\"\n    _index_basic:\n      type: object\n      properties:\n        id:\n          type: string\n          description: 服务器id\n          example: \"91686000000\"\n        name:\n          type: string\n          description: 服务器名称\n          example: Hello\n        topic:\n          type: string\n          description: 服务器主题\n        master_id:\n          allOf:\n            - $ref: \"#/components/schemas/properties-id\"\n          description: 服务器主的id\n        icon:\n          type: string\n          description: 服务器icon的地址\n          example: https://xxx/icons/2020-05/YQyfHxxx.png/icon\n        notify_type:\n          type: integer\n          description: 通知类型, `0`代表默认使用服务器通知设置，`1`代表接收所有通知, `2`代表仅@被提及，`3`代表不接收通知\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n          example: 0\n        region:\n          type: string\n          description: 服务器默认使用语音区域\n          example: beijing\n        enable_open:\n          type: boolean\n          description: 是否为公开服务器\n          example: true\n        open_id:\n          type: string\n          description: 公开服务器id\n          example: \"012312413\"\n        default_channel_id:\n          type: string\n          description: 默认频道id\n          example: \"5915900001396830\"\n        welcome_channel_id:\n          type: string\n          description: 欢迎频道id\n          example: \"5789900001312330\"\n        boost_num:\n          type: integer\n          description: 服务器助力数量\n          example: 3\n        level:\n          type: integer\n          description: 服务器等级\n          example: 0\n    role_basic:\n      type: object\n      properties:\n        role_id:\n          type: integer\n          format: unsigned integer\n          description: 角色id\n          example: 702\n        name:\n          type: string\n          description: 角色名称\n          example: 管理员\n        color:\n          type: integer\n          format: unsigned integer\n          minimum: 0\n          maximum: 16777215\n          description: 颜色\n          example: 0\n        position:\n          type: integer\n          format: unsigned integer\n          description: 顺序，值越小载靠前\n          example: 1\n        hoist:\n          type: integer\n          format: unsigned integer\n          description: 只能为0或者1，是否把该角色的用户在用户列表排到前面\n          enum:\n            - 0\n            - 1\n        mentionable:\n          type: integer\n          format: unsigned integer\n          description: 只能为0或者1，该角色是否可以被提及\n          enum:\n            - 0\n            - 1\n        permissions:\n          type: integer\n          format: unsigned integer\n          description: >-\n            允许的权限，参见[权限说明](https://developer.kaiheila.cn/doc/http/guild-role#权限说明)\n          example: 2048\n    _index_basic-2:\n      type: object\n      description: 服务器频道\n      properties:\n        id:\n          type: string\n          description: 服务器频道ID\n          example: \"3321010478582000\"\n        guild_id:\n          $ref: \"#/components/schemas/id\"\n        master_id:\n          description: 频道创建者id\n          type: string\n          example: \"1700000\"\n        parent_id:\n          type: string\n          description: 父分组频道id\n          example: \"7480000000000000\"\n        name:\n          type: string\n          description: 频道名称\n          example: 示例频道\n        topic:\n          type: string\n          description: 频道简介\n          example: 这是示例频道的示例简介\n        type:\n          type: integer\n          enum:\n            - 1\n            - 2\n          description: 频道类型，`1`为文字频道，`2`为语音频道\n        level:\n          type: integer\n          description: 频道排序\n          example: 30\n        slow_mode:\n          type: integer\n          description: 慢速限制，单位秒。用户发送消息之后再次发送消息的等待时间。\n          example: 0\n        limit_amount:\n          type: integer\n          description: 人数限制（如果为语音频道）\n          example: 0\n        is_category:\n          type: boolean\n          description: 是否为分组类型。注：在事件中，is_category为int类型，值为0或1。\n          example: false\n        server_url:\n          type: string\n          description: 语音服务器地址，`HOST:PORT`的格式\n          example: HOST:PORT\n    basic-properties-id:\n      type: string\n      description: 服务器频道ID\n      example: \"3321010478582000\"\n    guild:\n      allOf:\n        - $ref: \"#/components/schemas/basic\"\n        - type: object\n          properties:\n            nickname:\n              type: string\n              description: 用户在服务器中的昵称\n              example: tz-unn\n            roles:\n              type: array\n              description: 用户在当前服务器中的角色 id 组成的列表\n              items:\n                $ref: \"#/components/schemas/role_id\"\n            joined_at:\n              type: integer\n              description: 加入服务器的时间(ms)\n              example: 1621338425026\n            active_time:\n              type: integer\n              description: 最后活跃时间(ms)\n              example: 1628688607719\n            is_master:\n              type: boolean\n              description: 是否为该服务器主\n              example: false\n    properties-type:\n      type: integer\n      enum:\n        - 1\n        - 2\n      description: 频道类型，`1`为文字频道，`2`为语音频道\n    GuildChannelPermission:\n      type: object\n      required:\n        - allow\n        - deny\n      properties:\n        allow:\n          type: integer\n          description: >-\n            允许的权限的结果集，详见[权限说明](https://developer.kaiheila.cn/doc/http/guild-role#权限说明)\n          example: 2048\n        deny:\n          type: integer\n          description: >-\n            拒绝的权限的结果集，详见[权限说明](https://developer.kaiheila.cn/doc/http/guild-role#权限说明)\n          example: 0\n    GuildRoleId:\n      type: integer\n      format: unsigned integer\n      description: 服务器角色id\n      example: 113\n    _fields_id:\n      type: string\n      description: 消息id\n      example: 1c4532f6-*********-93e9-6347f410f91c\n    author:\n      description: 消息作者\n      allOf:\n        - $ref: \"#/components/schemas/basic\"\n    content:\n      type: string\n      description: 消息内容\n    embed:\n      type: object\n      properties:\n        type:\n          type: string\n        url:\n          type: string\n      additionalProperties: true\n      example:\n        type: bili-video\n        url: \"\"\n        origin_url: https://www.bilibili.com/video/XXXXX\n        av_no: 11J411E\n        iframe_path: https://player.bilibili.com/player.html?xxx=xxx\n        duration: 97\n        title: Title\n        pic: https://**/lc01gi.jpg\n    embeds:\n      type: array\n      description: 超链接解析数据\n      items:\n        $ref: \"#/components/schemas/embed\"\n    attachments:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - image\n        name:\n          type: string\n          description: 多媒体名\n          example: xxx.jpg\n        url:\n          type: string\n          description: 附件链接\n          example: https://img.kaiheila.cn/assets/2020-12/IHT5xxxxxA07o03m.jpg\n    properties-attachments:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - video\n        name:\n          type: string\n          description: 多媒体名\n          example: 002iQMhagx07Fx0S4xxxx323o0E010.mp4\n        url:\n          type: string\n          description: 附件链接\n          example: https://img.kaiheila.cn/attachments/2020-12/11/asd.mp4\n        file_type:\n          description: 文件格式\n          type: string\n          example: video/mp4\n        size:\n          type: integer\n          description: 大小 单位（B）\n          example: 722882\n        duration:\n          type: number\n          description: 视频时长（s）\n          example: 15.673\n        width:\n          type: integer\n          description: 视频宽度\n          example: 640\n        height:\n          type: integer\n          description: 视频高度\n          example: 480\n    file-properties-attachments:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - file\n        url:\n          type: string\n          example: https://img.kaiheila.cn/attachments/2020-12/11/asd.txt\n        file_type:\n          description: 文件格式\n          type: string\n          example: text/plain\n        name:\n          type: string\n          description: 多媒体名\n        size:\n          type: integer\n          description: 大小 单位（B）\n          example: 2575670\n    _fields_attachments:\n      oneOf:\n        - $ref: \"#/components/schemas/attachments\"\n        - $ref: \"#/components/schemas/properties-attachments\"\n        - $ref: \"#/components/schemas/file-properties-attachments\"\n    reaction:\n      type: object\n      properties:\n        emoji:\n          type: object\n          properties:\n            id:\n              type: string\n              example: \"[#129315;]\"\n            name:\n              type: string\n              example: \"[#129315;]\"\n        count:\n          type: integer\n        me:\n          type: boolean\n    reactions:\n      type: array\n      items:\n        $ref: \"#/components/schemas/reaction\"\n    quote:\n      type: object\n      properties:\n        id:\n          type: string\n          description: 引用消息id\n          example: 1c4532f6-*********-93e9-6347f410f91c\n        type:\n          type: integer\n          description: 引用消息类型\n          example: 1\n        content:\n          type: string\n          description: 引用消息内容\n          example: hello world\n        create_at:\n          type: integer\n          description: 引用消息创建时间（毫秒）\n          example: 1628069285358\n        author:\n          description: 作者的用户信息\n          allOf:\n            - $ref: \"#/components/schemas/basic\"\n    _index_basic-3:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/_fields_id\"\n        type:\n          $ref: \"#/components/schemas/type\"\n        author:\n          $ref: \"#/components/schemas/author\"\n        content:\n          $ref: \"#/components/schemas/content\"\n        mention:\n          $ref: \"#/components/schemas/mention\"\n        mention_all:\n          $ref: \"#/components/schemas/mention_all\"\n        mention_roles:\n          $ref: \"#/components/schemas/mention_roles\"\n        mention_here:\n          $ref: \"#/components/schemas/mention_here\"\n        embeds:\n          $ref: \"#/components/schemas/embeds\"\n        attachments:\n          $ref: \"#/components/schemas/_fields_attachments\"\n        reactions:\n          $ref: \"#/components/schemas/reactions\"\n        quote:\n          $ref: \"#/components/schemas/quote\"\n        mention_info:\n          $ref: \"#/components/schemas/mention_info\"\n    SendMessageRequest:\n      type: object\n      required:\n        - content\n      properties:\n        type:\n          type: integer\n          description: 消息类型, 见[type], 不传默认为`1`, 代表文本类型。`9`代表 kmarkdown 消息, `10`代表卡片消息。\n          enum:\n            - 1\n            - 9\n            - 10\n          example: 9\n          default: 1\n        content:\n          type: string\n          description: 消息内容（为了保障消息正常发出，请不要超过8000字符）\n        quote:\n          allOf:\n            - $ref: \"#/components/schemas/_fields_id\"\n          description: 回复某条消息的`msg_id`\n        nonce:\n          type: string\n          description: nonce, 服务端不做处理, 原样返回\n    GuildEmojiId:\n      type: string\n      description: 表情的id, 可以为Guild Emoji Id或Emoji Id\n      example: 1333609240026275/zTpnkS****0c80ck\n    UserChat:\n      type: object\n      properties:\n        code:\n          type: string\n          description: 私信会话 Code\n          example: 5c7ec6d021216c136c9198285c15ed47\n        last_read_time:\n          type: integer\n          description: 上次阅读消息的时间 (毫秒)\n          example: 1612175653000\n        latest_msg_time:\n          type: integer\n          description: 最新消息时间 (毫秒)\n          example: 1612160693000\n        unread_count:\n          type: integer\n          description: 未读消息数\n          example: 0\n        target_info:\n          type: object\n          description: 目标用户信息\n          properties:\n            id:\n              $ref: \"#/components/schemas/properties-id\"\n            username:\n              type: string\n              description: 目标用户名\n              example: 夏天1\n            online:\n              type: boolean\n              description: 是否在线\n              example: false\n            avatar:\n              type: string\n              description: 头像图片链接\n              example: https://xxx.jpg/icon\n    UserChatDetail:\n      allOf:\n        - $ref: \"#/components/schemas/UserChat\"\n        - type: object\n          properties:\n            is_friend:\n              type: boolean\n              description: 是否是好友\n              example: true\n            is_blocked:\n              type: boolean\n              description: 是否已屏蔽对方\n              example: false\n            is_target_blocked:\n              type: boolean\n              description: 是否已被对方屏蔽\n              example: false\n    ChatCode:\n      type: string\n      description: 私聊会话 Code\n      example: 3b4aa448b8xxxxc87a1b3770792e7433\n    DirectMessage:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/_fields_id\"\n        type:\n          type: integer\n          description: 消息类型\n        author_id:\n          description: 作者的用户ID\n          allOf:\n            - $ref: \"#/components/schemas/properties-id\"\n        content:\n          type: string\n          description: 消息内容\n        embeds:\n          $ref: \"#/components/schemas/embeds\"\n        attachments:\n          type: object\n        reactions:\n          $ref: \"#/components/schemas/reactions\"\n        quote:\n          $ref: \"#/components/schemas/quote\"\n        read_status:\n          type: boolean\n          description: 是否已读\n    GuildRole:\n      type: object\n      properties:\n        role_id:\n          type: integer\n          format: unsigned integer\n          description: 角色id\n          example: 702\n        name:\n          type: string\n          description: 角色名称\n          example: 管理员\n        color:\n          type: integer\n          format: unsigned integer\n          minimum: 0\n          maximum: 16777215\n          description: 颜色\n          example: 0\n        position:\n          type: integer\n          format: unsigned integer\n          description: 顺序，值越小载靠前\n          example: 1\n        hoist:\n          type: integer\n          format: unsigned integer\n          description: 只能为0或者1，是否把该角色的用户在用户列表排到前面\n          enum:\n            - 0\n            - 1\n        mentionable:\n          type: integer\n          format: unsigned integer\n          description: 只能为0或者1，该角色是否可以被提及\n          enum:\n            - 0\n            - 1\n        permissions:\n          type: integer\n          format: unsigned integer\n          description: >-\n            允许的权限，参见[权限说明](https://developer.kaiheila.cn/doc/http/guild-role#权限说明)\n          example: 2048\n    GuildEmoji:\n      type: object\n      properties:\n        name:\n          type: string\n          description: 表情的名称\n          example: 摇滚啊\n        id:\n          $ref: \"#/components/schemas/GuildEmojiId\"\n        user_info:\n          description: 上传用户\n          allOf:\n            - $ref: \"#/components/schemas/basic\"\n    MessageEvent:\n      type: object\n      description: 当事件的type非系统消息(255)时\n      allOf:\n        - $ref: \"#/components/schemas/basic-2\"\n      properties:\n        d:\n          type: object\n          properties:\n            type:\n              type: integer\n              description: 与extra字段中的type相同，为1-10\n            author_id:\n              description: 发送者的用户id\n              example: \"2418200000\"\n            extra:\n              type: object\n              properties:\n                type:\n                  type: integer\n                  description: 1:文字消息, 2:图片消息，3:视频消息，4:文件消息， 8:音频消息，9:KMarkdown，10:card消息\n                guild_id:\n                  type: string\n                  description: 服务器id\n                channel_name:\n                  type: string\n                  description: 频道名\n                mention:\n                  type: array\n                  description: \"`@特定用户` 的用户ID数组，与`mention_info`中的数据对应\"\n                  items:\n                    type: string\n                mention_all:\n                  type: boolean\n                  description: 是否含有`@全体人员`\n                mention_roles:\n                  type: array\n                  description: \"`@特定角色` 的角色ID数组，与`mention_info`中的数据对应\"\n                  items:\n                    type: integer\n                mention_here:\n                  type: boolean\n                author:\n                  description: 消息作者\n                  allOf:\n                    - $ref: \"#/components/schemas/basic\"\n    SystemEvent:\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/basic-2\"\n        - type: object\n          properties:\n            d:\n              type: object\n              properties:\n                channel_type:\n                  example: GROUP\n                type:\n                  description: 消息类型，系统消息为255\n                  example: 255\n                author_id:\n                  description: 发送者id, 1 代表系统\n                  example: 1\n                content:\n                  example: \"[系统消息]\"\n                extra:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                    body:\n                      type: object\n                msg_id:\n                  example: 63d6a934-xxxx-a1f02c255213\n                msg_timestamp:\n                  example: 1612704007683\n                nonce:\n                  example: \"\"\n                verify_token:\n                  example: xxx\n    reaction-2:\n      type: object\n      properties:\n        d:\n          type: object\n          properties:\n            extra:\n              type: object\n              properties:\n                body:\n                  type: object\n                  properties:\n                    channel_id:\n                      allOf:\n                        - $ref: \"#/components/schemas/basic-properties-id\"\n                        - description: 消息所在的频道id\n                    emoji:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                          description: 表情的名称\n                          example: 摇滚啊\n                        id:\n                          $ref: \"#/components/schemas/GuildEmojiId\"\n                    user_id:\n                      allOf:\n                        - $ref: \"#/components/schemas/properties-id\"\n                        - description: 点击的用户\n                    msg_id:\n                      allOf:\n                        - $ref: \"#/components/schemas/_fields_id\"\n                        - description: 用户点击的消息id\n    message-update:\n      type: object\n      properties:\n        d:\n          type: object\n          properties:\n            extra:\n              type: object\n              properties:\n                body:\n                  type: object\n                  properties:\n                    msg_id:\n                      allOf:\n                        - $ref: \"#/components/schemas/_fields_id\"\n                      description: 消息id\n                    channel_id:\n                      allOf:\n                        - $ref: \"#/components/schemas/basic-properties-id\"\n                      description: 消息所在的频道id\n                    content:\n                      type: string\n                      description: 消息内容\n                    mention:\n                      type: array\n                      description: \"`@特定用户` 的用户ID数组，与`mention_info`中的数据对应\"\n                      items:\n                        type: string\n                    mention_all:\n                      type: boolean\n                      description: 是否含有`@全体人员`\n                    mention_roles:\n                      type: array\n                      description: \"`@特定角色` 的角色ID数组，与`mention_info`中的数据对应\"\n                      items:\n                        type: string\n                    mention_here:\n                      type: boolean\n    pin:\n      type: object\n      properties:\n        d:\n          type: object\n          properties:\n            extra:\n              type: object\n              properties:\n                body:\n                  type: object\n                  properties:\n                    channel_id:\n                      allOf:\n                        - $ref: \"#/components/schemas/basic-properties-id\"\n                      description: 发生操作的频道id\n                    operator_id:\n                      allOf:\n                        - $ref: \"#/components/schemas/properties-id\"\n                      description: 操作人的用户id\n                    msg_id:\n                      allOf:\n                        - $ref: \"#/components/schemas/_fields_id\"\n                      description: 被操作的消息id\n    PersonEvent:\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/SystemEvent\"\n      properties:\n        d:\n          type: object\n          properties:\n            channel_type:\n              type: string\n              description: 频道类型，私聊消息为`PERSON`\n              example: PERSON\n            extra:\n              type: object\n              properties:\n                body:\n                  type: object\n                  properties:\n                    msg_id:\n                      allOf:\n                        - $ref: \"#/components/schemas/_fields_id\"\n                      description: 被操作的消息id\n                    chat_code:\n                      $ref: \"#/components/schemas/ChatCode\"\n    member:\n      type: object\n      properties:\n        d:\n          type: object\n          properties:\n            extra:\n              type: object\n              properties:\n                body:\n                  type: object\n                  properties:\n                    user_id:\n                      allOf:\n                        - $ref: \"#/components/schemas/properties-id\"\n                      description: 用户id\n    guild-2:\n      type: object\n      properties:\n        d:\n          type: object\n          properties:\n            extra:\n              type: object\n              properties:\n                body:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      description: 服务器id\n                    name:\n                      type: string\n                      description: 服务器主id\n                    icon:\n                      type: string\n                      description: 服务器icon的地址\n                      example: https://xxx/icons/2020-05/YQyfHxxx.png/icon\n                    notify_type:\n                      type: integer\n                      description: >-\n                        通知类型, `0`代表默认使用服务器通知设置，`1`代表接收所有通知,\n                        `2`代表仅@被提及，`3`代表不接收通知\n                      enum:\n                        - 0\n                        - 1\n                        - 2\n                        - 3\n                    region:\n                      type: string\n                      description: 服务器默认使用语音区域\n                    enable_open:\n                      type: boolean\n                      description: 是否为公开服务器\n                    open_id:\n                      type: string\n                      description: 公开服务器id\n                    default_channel_id:\n                      type: string\n                      description: 默认频道id\n                    welcome_channel_id:\n                      type: string\n                      description: 欢迎频道id\n    BasicEvent:\n      $ref: \"#/components/schemas/basic-2\"\n    Guild:\n      $ref: \"#/components/schemas/_index_basic\"\n    User:\n      $ref: \"#/components/schemas/basic\"\n    GuildId:\n      $ref: \"#/components/schemas/id\"\n    UserId:\n      $ref: \"#/components/schemas/properties-id\"\n    GuildChannel:\n      $ref: \"#/components/schemas/_index_basic-2\"\n    GuildChannelId:\n      $ref: \"#/components/schemas/basic-properties-id\"\n    GuildChannelType:\n      $ref: \"#/components/schemas/properties-type\"\n    Message:\n      $ref: \"#/components/schemas/_index_basic-3\"\n  requestBodies:\n    create:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - channel_id\n            example: null\n            properties:\n              channel_id:\n                description: 频道id, 如果频道是分组的id,会同步给所有sync=1的子频道\n                allOf:\n                  - $ref: \"#/components/schemas/basic-properties-id\"\n              type:\n                type: string\n                description: value的类型，只能为\"role_id\",\"user_id\",不传则默认为\"user_id\"\n                enum:\n                  - role_id\n                  - user_id\n                default: user_id\n              value:\n                type:\n                  - string\n                  - integer\n                description: 根据type的值，为用户id或频道id\n                example: \"2418239356\"\n    update:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - channel_id\n            properties:\n              channel_id:\n                description: 频道id, 如果频道是分组的id,会同步给所有sync=1的子频道\n                allOf:\n                  - $ref: \"#/components/schemas/basic-properties-id\"\n              type:\n                type: string\n                description: value的类型，只能为\"role_id\",\"user_id\",不传则默认为\"user_id\"\n                enum:\n                  - role_id\n                  - user_id\n                default: user_id\n              value:\n                type:\n                  - string\n                  - integer\n                description: 根据type的值，为用户id或频道id\n                example: \"2418239356\"\n              allow:\n                type: integer\n                description: 默认为0,想要设置的允许的权限值\n                default: 0\n              deny:\n                type: integer\n                description: 默认为0,想要设置的拒绝的权限值\n                default: 0\n    delete:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - channel_id\n            properties:\n              channel_id:\n                description: 频道id, 如果频道是分组的id,会同步给所有sync=1的子频道\n                allOf:\n                  - $ref: \"#/components/schemas/basic-properties-id\"\n              type:\n                type: string\n                description: value的类型，只能为\"role_id\",\"user_id\",不传则默认为\"user_id\"\n                enum:\n                  - role_id\n                  - user_id\n                default: user_id\n              value:\n                type:\n                  - string\n                  - integer\n                description: 根据type的值，为用户id或频道id\n                example: \"2418239356\"\n    text:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/MessageEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      type:\n                        example: 1\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            allOf:\n                              - $ref: \"#/components/schemas/type\"\n                            example: 1\n                          guild_id:\n                            $ref: \"#/components/schemas/id\"\n                          channel_name:\n                            type: string\n                            description: 频道名\n                            example: 一个频道\n                          mention:\n                            $ref: \"#/components/schemas/mention\"\n                          mention_all:\n                            $ref: \"#/components/schemas/mention_all\"\n                          mention_roles:\n                            $ref: \"#/components/schemas/mention_roles\"\n                          mention_here:\n                            $ref: \"#/components/schemas/mention_here\"\n                          author:\n                            $ref: \"#/components/schemas/guild\"\n                          quote:\n                            $ref: \"#/components/schemas/quote\"\n    image:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/MessageEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      content:\n                        description: 文件链接，与`attachments`的`url`相同\n                        example: >-\n                          https://img.kaiheila.cn/assets/2020-12/IHT5xxxxxA07o03m.jpg\n                      type:\n                        example: 2\n                      extra:\n                        $ref: \"#/components/schemas/image\"\n    video:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/MessageEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      content:\n                        description: 文件链接，与`attachments`的`url`相同\n                        example: https://img.kaiheila.cn/attachments/2020-12/11/asd.mp4\n                      type:\n                        example: 3\n                      extra:\n                        $ref: \"#/components/schemas/video\"\n    file:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/MessageEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      content:\n                        description: 文件链接，与`attachments`的`url`相同\n                        example: https://img.kaiheila.cn/attachments/2020-12/11/asd.txt\n                      type:\n                        example: 4\n                      extra:\n                        $ref: \"#/components/schemas/file\"\n    kmarkdown:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/MessageEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      type:\n                        example: 9\n                      extra:\n                        $ref: \"#/components/schemas/kmarkdown\"\n    card:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/MessageEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      type:\n                        example: 10\n                      extra:\n                        $ref: \"#/components/schemas/card\"\n    add:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - $ref: \"#/components/schemas/reaction-2\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`added_reaction`\n                            example: added_reaction\n    reaction_delete:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - $ref: \"#/components/schemas/reaction-2\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`deleted_reaction`\n                            example: deleted_reaction\n    message_update:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - $ref: \"#/components/schemas/message-update\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`updated_message`\n                            example: updated_message\n                          body:\n                            type: object\n                            properties:\n                              udpated_at:\n                                type: integer\n                                description: 更新时间戳(毫秒)\n                                example: 1612703810779\n    message_delete:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`deleted_message`\n                            example: updated_message\n                          body:\n                            type: object\n                            properties:\n                              msg_id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/_fields_id\"\n                                description: 被删除的消息id\n                              channel_id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/basic-properties-id\"\n                                description: 消息所在频道id\n    channel_create:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`added_channel`\n                            example: added_channel\n                          body:\n                            $ref: \"#/components/schemas/_index_basic-2\"\n    channel_update:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`updated_channel`\n                            example: updated_channel\n                          body:\n                            $ref: \"#/components/schemas/_index_basic-2\"\n    channel_delete:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`deleted_channel`\n                            example: deleted_channel\n                          body:\n                            type: object\n                            properties:\n                              id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/basic-properties-id\"\n                                description: 被删除的频道id\n                              deleted_at:\n                                type: integer\n                                description: 删除操作的时间戳(毫秒)\n                                example: 1612777405595\n    pin_add:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - $ref: \"#/components/schemas/pin\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`pinned_message`\n                            example: pinned_message\n    cancel:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - $ref: \"#/components/schemas/pin\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`unpinned_message`\n                            example: unpinned_message\n    message_update-2:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/PersonEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      channel_type:\n                        type: string\n                        description: 频道类型，私聊消息为`PERSON`\n                        example: PERSON\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`updated_private_message`\n                            example: updated_private_message\n                          body:\n                            type: object\n                            properties:\n                              msg_id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/_fields_id\"\n                                description: 被更新的消息id\n                              author_id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/properties-id\"\n                                description: 被更新的消息的创建者id\n                              target_id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/properties-id\"\n                                description: 被更新的消息的目标用户id\n                              content:\n                                type: string\n                                description: 更新后的文本\n                                example: asdaaad\n                              updated_at:\n                                type: integer\n                                description: 更新时间戳(毫秒)\n                                example: 1612778254192\n    message_delete-2:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/PersonEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`deleted_private_message`\n                            example: deleted_private_message\n                          body:\n                            type: object\n                            properties:\n                              msg_id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/_fields_id\"\n                                description: 被删除的消息id\n                              author_id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/properties-id\"\n                                description: 被删除的消息的创建者id\n                              target_id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/properties-id\"\n                                description: 被删除的消息的目标用户id\n                              updated_at:\n                                type: integer\n                                description: 删除的时间戳(毫秒)\n                                example: 1612778254192\n    reaction_add:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/PersonEvent\"\n              - $ref: \"#/components/schemas/reaction-2\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`private_added_reaction`\n                            example: private_added_reaction\n    reaction_delete-2:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/PersonEvent\"\n              - $ref: \"#/components/schemas/reaction-2\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`private_deleted_reaction`\n                            example: private_deleted_reaction\n    join:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - $ref: \"#/components/schemas/member\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`joined_guild`\n                            example: joined_guild\n                          body:\n                            type: object\n                            properties:\n                              joined_at:\n                                type: integer\n                                description: 加入服务器的时间(毫秒)\n                                example: 1612774315000\n    exit:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - $ref: \"#/components/schemas/member\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`exited_guild`\n                            example: exited_guild\n                          body:\n                            type: object\n                            properties:\n                              exited_at:\n                                type: integer\n                                description: 退出服务器的时间(毫秒)\n                                example: 1612774315000\n    member_update:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - $ref: \"#/components/schemas/member\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`updated_guild_member`\n                            example: updated_guild_member\n                          body:\n                            type: object\n                            properties:\n                              nickname:\n                                type: string\n                                description: 昵称\n                                example: 新昵称\n    online:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - $ref: \"#/components/schemas/member\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`guild_member_online`\n                            example: guild_member_online\n                          body:\n                            type: object\n                            properties:\n                              event_time:\n                                type: integer\n                                description: 用户上线时间(毫秒)\n                                example: 1612774315000\n                              guilds:\n                                type: array\n                                description: 服务器id组成的数组, 代表与该用户所在的共同的服务器\n                                items:\n                                  type: string\n                                example:\n                                  - \"601638990000000\"\n    offline:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - $ref: \"#/components/schemas/member\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`guild_member_offline`\n                            example: guild_member_offline\n                          body:\n                            type: object\n                            properties:\n                              event_time:\n                                type: integer\n                                description: 用户下线时间(毫秒)\n                                example: 1612774315000\n                              guilds:\n                                type: array\n                                description: 服务器id组成的数组, 代表与该用户所在的共同的服务器\n                                items:\n                                  type: string\n                                example:\n                                  - \"601638990000000\"\n    role_add:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`added_role`\n                            example: added_role\n                          body:\n                            $ref: \"#/components/schemas/role_basic\"\n    role_update:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`updated_role`\n                            example: updated_role\n                          body:\n                            $ref: \"#/components/schemas/GuildRole\"\n    role_delete:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`deleted_role`\n                            example: deleted_role\n                          body:\n                            $ref: \"#/components/schemas/GuildRole\"\n    guild_update:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - $ref: \"#/components/schemas/guild-2\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`updated_guild`\n                            example: updated_guild\n    guild_delete:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - $ref: \"#/components/schemas/guild-2\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`deleted_guild`\n                            example: deleted_guild\n    ban:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`added_block_list`\n                            example: added_block_list\n                          body:\n                            type: object\n                            properties:\n                              operator_id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/properties-id\"\n                                description: 操作人id\n                              user_id:\n                                type: array\n                                description: 被封禁成员id列表\n                                items:\n                                  $ref: \"#/components/schemas/properties-id\"\n                              remark:\n                                type: string\n                                description: 封禁理由\n                                example: 频繁发广告\n    unban:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`deleted_block_list`\n                            example: deleted_block_list\n                          body:\n                            type: object\n                            properties:\n                              operator_id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/properties-id\"\n                                description: 操作人id\n                              user_id:\n                                type: array\n                                description: 被封禁成员id列表\n                                items:\n                                  $ref: \"#/components/schemas/properties-id\"\n    channel_join:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`joined_channel`\n                            example: joined_channel\n                          body:\n                            type: object\n                            properties:\n                              user_id:\n                                $ref: \"#/components/schemas/properties-id\"\n                              channel_id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/basic-properties-id\"\n                                description: 加入的频道id\n                              joined_at:\n                                type: integer\n                                description: 加入的时间（ms)\n                                example: 1612790368279\n    channel_exit:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`exited_channel`\n                            example: exited_channel\n                          body:\n                            type: object\n                            properties:\n                              user_id:\n                                $ref: \"#/components/schemas/properties-id\"\n                              channel_id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/basic-properties-id\"\n                                description: 加入的频道id\n                              exited_at:\n                                type: integer\n                                description: 退出的时间（ms)\n                                example: 1612790411267\n    guild_join:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      channel_type:\n                        example: PERSON\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`self_joined_guild`\n                            example: self_joined_guild\n                          body:\n                            type: object\n                            properties:\n                              guild_id:\n                                $ref: \"#/components/schemas/id\"\n    guild_exit:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      channel_type:\n                        example: PERSON\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`self_exited_guild`\n                            example: self_exited_guild\n                          body:\n                            type: object\n                            properties:\n                              guild_id:\n                                $ref: \"#/components/schemas/id\"\n    info_update:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`user_updated`\n                            example: user_updated\n                          body:\n                            type: object\n                            properties:\n                              user_id:\n                                $ref: \"#/components/schemas/properties-id\"\n                              username:\n                                type: string\n                                description: 用户名\n                                example: 一个新用户名\n                              avatar:\n                                type: string\n                                description: 头像地址\n                                example: >-\n                                  https://img.kaiheila.cn/avatars/2020-02/xxxx.jpg/icon\n    click-button:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/SystemEvent\"\n              - type: object\n                properties:\n                  d:\n                    type: object\n                    properties:\n                      extra:\n                        type: object\n                        properties:\n                          type:\n                            description: 消息类型，此处为`message_btn_click`\n                            example: message_btn_click\n                          body:\n                            type: object\n                            properties:\n                              user_id:\n                                $ref: \"#/components/schemas/properties-id\"\n                              msg_id:\n                                $ref: \"#/components/schemas/_fields_id\"\n                              value:\n                                type: string\n                                description: 按钮`return-val`的返回值\n                              target_id:\n                                allOf:\n                                  - $ref: \"#/components/schemas/basic-properties-id\"\n                                description: 消息所在频道的id\n                              guild_id:\n                                $ref: \"#/components/schemas/id\"\n                              user_info:\n                                $ref: \"#/components/schemas/guild\"\nsecurity: []\n",
			"canonicalURL": "/github.com/kaiheila/api-docs@59c4788e1e6ee659cab29e4f967d672348f4737e/-/blob/oas/kaiheila-openapi-bundled.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/kaiheila/api-docs/blob/59c4788e1e6ee659cab29e4f967d672348f4737e/oas/kaiheila-openapi-bundled.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:6910: json: cannot unmarshal Go value of type ogen.Spec: spec: json: cannot unmarshal Go value of type ogen.Properties: json: cannot unmarshal JSON array into Go value of type string"
}