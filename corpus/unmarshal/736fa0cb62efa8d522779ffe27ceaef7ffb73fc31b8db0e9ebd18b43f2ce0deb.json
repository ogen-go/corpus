{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-tools"
		},
		"file": {
			"name": "playlist.yaml",
			"size": 0,
			"path": "openapi-cli/src/test/resources/generators/client/file_provider/swagger/playlist.yaml",
			"byteSize": 72271,
			"content": "openapi: 3.0.1\nservers:\n  - url: https://api.spotify.com/v1\ninfo:\n  title: Spotify Web API\n  version: 0.1.0\n  x-ballerina-display:\n    label: \"Spotify Client\"\nexternalDocs:\n  description: Find more info on the official Spotify Web API Reference\n  url: https://developer.spotify.com/documentation/web-api/reference\ntags:\n  - description: Playlists API\n    externalDocs:\n      description: Find more info on the official Spotify Web API Reference\n      url: https://developer.spotify.com/documentation/web-api/reference/#category-playlists\n    name: category-playlists\npaths:\n  /me/playlists:\n    get:\n      description: |-\n        Get a list of the playlists owned or followed by the current Spotify\n        user.\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-list-of-current-users-playlists\n      operationId: getMyPlaylists\n      x-ballerina-display:\n        label: \"My Playlists\"\n      parameters:\n        - description: \"'The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.'\"\n          in: query\n          name: limit\n          required: false\n          schema:\n            format: int32\n            type: integer\n          x-ballerina-display:\n            label: \"Limit\"\n        - description: \"'The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.'\"\n          in: query\n          name: offset\n          required: false\n          schema:\n            format: int32\n            type: integer\n          x-ballerina-display:\n            label: \"Offset\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CurrentPlaylistDetails\"\n          description: On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Please note that the access token has to be tied to a user.\n        default:\n          $ref: \"#/components/responses/ErrorResponse\"\n      security:\n        - spotify_auth:\n            - playlist-read-private\n            - playlist-read-collaborative\n      summary: Get a List of Current User's Playlists\n      tags:\n        - category-playlists\n  /playlists/{playlist_id}:\n    get:\n      description: Get a playlist owned by a Spotify user.\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlist\n      operationId: getPlaylistById\n      x-ballerina-display:\n        label: \"Playlist By Id\"\n      parameters:\n        - description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n          in: path\n          name: playlist_id\n          required: true\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Playlist Id\"\n        - description: |-\n            An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track\n            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.\n            *Note: If neither market or user country are provided, the episode is considered unavailable for the client.*\n          in: query\n          name: market\n          required: false\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Market\"\n        - description: \"Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the playlist''s description and URI: `fields=description,uri`. A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`. Use multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`. Fields can be excluded by prefixing them with an exclamation mark, for example: `fields=tracks.items(track(name,href,album(!name,href)))`\"\n          in: query\n          name: fields\n          required: false\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Fields to Return\"\n        - description: \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\"\n          in: query\n          name: additional_types\n          required: false\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Additional Types\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PlaylistObject\"\n          description: On success, the response body contains a [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject) in JSON format and the HTTP status code in the response header is `200` OK. If an episode is unavailable in the given `market`, its information will not be included in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Requesting playlists that you do not have the user's authorization to access returns error `403` Forbidden.\n        default:\n          $ref: \"#/components/responses/ErrorResponse\"\n      security:\n        - spotify_auth: []\n      summary: Get a Playlist\n      tags:\n        - category-playlists\n    put:\n      description: |-\n        Change a playlist's name and public/private state. (The user must, of\n        course, own the playlist.)\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-change-playlist-details\n      operationId: updatePlaylist\n      x-ballerina-display:\n        label: \"Update Playlist\"\n      parameters:\n        - description: \"The content type of the request body: `application/json`\"\n          in: header\n          name: Content-Type\n          required: true\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Content Type\"\n        - description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n          in: path\n          name: playlist_id\n          required: true\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Playlist Id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: Content to update the playlist\n              $ref: \"#/components/schemas/ChangePlayListDetails\"\n              type: object\n        required: false\n      responses:\n        \"200\":\n          description: |-\n            On success the HTTP status code in the response header is `200` OK.\n\n            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to change a playlist when you do not have the user's authorization returns error `403` Forbidden.\n        default:\n          $ref: \"#/components/responses/ErrorResponse\"\n      security:\n        - spotify_auth:\n            - playlist-modify-public\n            - playlist-modify-private\n      summary: Change a Playlist's Details\n      tags:\n        - category-playlists\n  /playlists/{playlist_id}/images:\n    get:\n      description: Get the current image associated with a specific playlist.\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlist-cover\n      operationId: getPlaylistCover\n      x-ballerina-display:\n        label: \"Playlist Cover\"\n      parameters:\n        - description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n          in: path\n          name: playlist_id\n          required: true\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Playlist Id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ImageObject\"\n                type: array\n          description: |-\n            On success, the response body contains a list of [image objects](https://developer.spotify.com/documentation/web-api/reference/#object-imageobject) in JSON format and the HTTP status code in the response header is `200` OK\n            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n        default:\n          $ref: \"#/components/responses/ErrorResponse\"\n      security:\n        - spotify_auth: []\n      summary: Get a Playlist Cover Image\n      tags:\n        - category-playlists\n    put:\n      description: Replace the image used to represent a specific playlist.\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-upload-custom-playlist-cover\n      operationId: updatePlaylistCover\n      x-ballerina-display:\n        label: \"Update Playlist Cover\"\n      parameters:\n        - description: \"The content type of the request body: `image/jpeg`\"\n          in: header\n          name: Content-Type\n          required: true\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Content Type\"\n        - description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n          in: path\n          name: playlist_id\n          required: true\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Playlist Id\"\n      responses:\n        \"202\":\n          description: |-\n            If you get status code `429`, it means that you have sent too many requests.\n            If this happens, have a look in the `Retry-After` header, where you will see a number displayed.\n            This is the amount of seconds that you need to wait, before you can retry sending your requests.\n        default:\n          $ref: \"#/components/responses/ErrorResponse\"\n      security:\n        - spotify_auth:\n            - ugc-image-upload\n            - playlist-modify-public\n            - playlist-modify-private\n      summary: Upload a Custom Playlist Cover Image\n      tags:\n        - category-playlists\n  /playlists/{playlist_id}/tracks:\n    get:\n      description: Get full details of the items of a playlist owned by a Spotify user.\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlists-tracks\n      operationId: getPlaylistTracks\n      x-ballerina-display:\n        label: \"Playlist Tracks\"\n      parameters:\n        - description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n          in: path\n          name: playlist_id\n          required: true\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Playlist Id\"\n        - description: |-\n            An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track\n            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.\n            *Note: If neither market or user country are provided, the episode is considered unavailable for the client.*\n          in: query\n          name: market\n          required: true\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Market\"\n        - description: |-\n            Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the total number of items and the request limit:\n            `fields=total,limit`\n            A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder:\n            `fields=items(added_at,added_by.id)`\n            Use multiple parentheses to drill down into nested objects, for example:\n            `fields=items(track(name,href,album(name,href)))`\n            Fields can be excluded by prefixing them with an exclamation mark, for example:\n            `fields=items.track.album(!external_urls,images)`\n          in: query\n          name: fields\n          required: false\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Fields to Return\"\n        - description: \"The maximum number of items to return. Default: 100. Minimum: 1. Maximum: 100.\"\n          in: query\n          name: limit\n          required: false\n          schema:\n            format: int32\n            type: integer\n          x-ballerina-display:\n            label: \"Limit\"\n        - description: \"The index of the first item to return. Default: 0 (the first object).\"\n          in: query\n          name: offset\n          required: false\n          schema:\n            format: int32\n            type: integer\n          x-ballerina-display:\n            label: \"Offset\"\n        - description: \"A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\"\n          in: query\n          name: additional_types\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PlaylistTrackDetails\"\n          description: On success, the response body contains an array of [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject) and [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) (depends on the `additional_types` parameter), wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON format and the HTTP status code in the response header is `200` OK. If an episode is unavailable in the given `market`, its information will not be included in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Requesting playlists that you do not have the user's authorization to access returns error `403` Forbidden.\n        default:\n          $ref: \"#/components/responses/ErrorResponse\"\n      security:\n        - spotify_auth: []\n      summary: Get a Playlist's Items\n      tags:\n        - category-playlists\n    put:\n      description: |-\n        Either reorder or replace items in a playlist depending on the request's parameters.\n        To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.\n        To replace items, include `uris` as either a query parameter or in the request's body.\n        Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.\n\n\n        **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.\n        These operations can't be applied together in a single request.\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-reorder-or-replace-playlists-tracks\n      operationId: reorderOrReplacePlaylistTracks\n      x-ballerina-display:\n        label: \"Reorder or Replace Tracks\"\n      parameters:\n        - description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n          in: path\n          name: playlist_id\n          required: true\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Playlist Id\"\n        - description: |-\n            A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`\n            A maximum of 100 items can be set in one request.\n          in: query\n          name: uris\n          required: false\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"Track URIs\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: Information needed to reorder the playlist\n              $ref: \"#/components/schemas/PlayListReorderDetails\"\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SnapshotIdObject\"\n          description: |-\n            On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format\n            and the HTTP status code in the response header is `200` OK. The `snapshot_id`\n            can be used to identify your playlist version in future requests.\n\n            On a successful **replace** operation, the HTTP status code in the response header is `201`\n            Created.\n\n            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),\n            the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),\n            and the existing playlist is unmodified.\n            Trying to set an item when you do not have the user's authorization returns error `403` Forbidden.\n        \"201\":\n          description: |-\n            On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format\n            and the HTTP status code in the response header is `200` OK. The `snapshot_id`\n            can be used to identify your playlist version in future requests.\n\n            On a successful **replace** operation, the HTTP status code in the response header is `201`\n            Created.\n\n            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),\n            the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),\n            and the existing playlist is unmodified.\n            Trying to set an item when you do not have the user's authorization returns error `403` Forbidden.\n        default:\n          $ref: \"#/components/responses/ErrorResponse\"\n      security:\n        - spotify_auth:\n            - playlist-modify-public\n            - playlist-modify-private\n      summary: Reorder or Replace a Playlist's Items\n      tags:\n        - category-playlists\n  /users/{user_id}/playlists:\n    get:\n      description: Get a list of the playlists owned or followed by a Spotify user.\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-list-users-playlists\n      operationId: getPlayslistsByUserID\n      x-ballerina-display:\n        label: \"Playlist By User Id\"\n      parameters:\n        - description: The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"User Id\"\n        - description: \"The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.\"\n          in: query\n          name: limit\n          required: false\n          schema:\n            format: int32\n            type: integer\n          x-ballerina-display:\n            label: \"Limit\"\n        - description: \"The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.\"\n          in: query\n          name: offset\n          required: false\n          schema:\n            format: int32\n            type: integer\n          x-ballerina-display:\n            label: \"Offset\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserPlayListDetails\"\n          description: On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n        default:\n          $ref: \"#/components/responses/ErrorResponse\"\n      security:\n        - spotify_auth:\n            - playlist-read-private\n            - playlist-read-collaborative\n      summary: Get a List of a User's Playlists\n      tags:\n        - category-playlists\n    post:\n      description: |-\n        Create a playlist for a Spotify user. (The playlist will be empty until\n        you [add tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-tracks-to-playlist).)\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-create-playlist\n      operationId: createPlaylist\n      x-ballerina-display:\n        label: \"Create Playlist\"\n      parameters:\n        - description: The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: string\n          x-ballerina-display:\n            label: \"User Id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: Content of the playlist\n              $ref: \"#/components/schemas/PlayListDetails\"\n              type: object\n              required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PlaylistObject\"\n          description: |-\n            On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)\n            in JSON format and the HTTP status code in the response header is `200` OK or\n            `201` Created. There is also a `Location` response header giving the Web API\n            endpoint for the new playlist.\n\n            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PlaylistObject\"\n          description: |-\n            On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)\n            in JSON format and the HTTP status code in the response header is `200` OK or\n            `201` Created. There is also a `Location` response header giving the Web API\n            endpoint for the new playlist.\n\n            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.\n        default:\n          $ref: \"#/components/responses/ErrorResponse\"\n      security:\n        - spotify_auth:\n            - playlist-modify-public\n            - playlist-modify-private\n      summary: Create a Playlist\n      tags:\n        - category-playlists\ncomponents:\n  responses:\n    ErrorResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorResponseObject\"\n      description: Unexpected error\n  schemas:\n    PlayListDetails:\n      description: Playlist details\n      properties:\n        collaborative:\n          description: Defaults to `false` . If `true` the playlist will be collaborative. Note that to create a collaborative playlist you must also set `public` to `false` . To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) .\n          type: boolean\n        description:\n          description: value for playlist description as displayed in Spotify Clients and in the Web API.\n          type: string\n        name:\n          description: The name for the new playlist, for example `\"Your Coolest Playlist\"` . This name does not need to be unique; a user may have several playlists with the same name.\n          type: string\n        public:\n          description: Defaults to `true` . If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\n          type: boolean\n      required:\n        - name\n      type: object\n    UserPlayListDetails:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject\n      properties:\n        href:\n          description: A link to the Web API endpoint returning the full result of the request\n          type: string\n        items:\n          description: The requested data.\n          items:\n            $ref: \"#/components/schemas/SimplifiedPlaylistObject\"\n          type: array\n        limit:\n          description: The maximum number of items in the response (as set in the query or by default).\n          format: int32\n          type: integer\n        next:\n          description: URL to the next page of items. ( `null` if none)\n          type: string\n          nullable: true\n        offset:\n          description: The offset of the items returned (as set in the query or by default)\n          format: int32\n          type: integer\n        previous:\n          description: URL to the previous page of items. ( `null` if none)\n          type: string\n          nullable: true\n        total:\n          description: The total number of items available to return.\n          format: int32\n          type: integer\n      type: object\n    PlaylistTrackInsertionDetails:\n      properties:\n        position:\n          description: 'The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0` ; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\",\"spotify:track:1301WleyT98MSxVHPZCA6M\"], \"position\": 3}`'\n          format: int32\n          type: integer\n        uris:\n          description: |-\n            A JSON array of the [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to add. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\",\"spotify:track:1301WleyT98MSxVHPZCA6M\", \"spotify:episode:512ojhOuo1ktJprKbVcKyQ\"]}`\n            A maximum of 100 items can be added in one request. *Note: if the `uris` parameter is present in the query string, any URIs listed here in the body will be ignored.*\n          items:\n            type: string\n          type: array\n      type: object\n    PlayListReorderDetails:\n      description: Information needed to reorder the playlist\n      properties:\n        insert_before:\n          description: |-\n            The position where the items should be inserted.\n            To reorder the items to the end of the playlist, simply set *insert_before* to the position after the last item.\n            Examples:\n            To reorder the first item to the last position in a playlist with 10 items, set *range_start* to 0, and *insert_before* to 10.\n            To reorder the last item in a playlist with 10 items to the start of the playlist, set *range_start* to 9, and *insert_before* to 0.\n          format: int32\n          type: integer\n        range_length:\n          description: |-\n            The amount of items to be reordered. Defaults to 1 if not set.\n            The range of items to be reordered begins from the *range_start* position, and includes the *range_length* subsequent items.\n            Example:\n            To move the items at index 9-10 to the start of the playlist, *range_start* is set to 9, and *range_length* is set to 2.\n          format: int32\n          type: integer\n        range_start:\n          description: The position of the first item to be reordered.\n          format: int32\n          type: integer\n        snapshot_id:\n          description: The playlist's snapshot ID against which you want to make the changes.\n          type: string\n        uris:\n          description: |-\n            A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`\n            A maximum of 100 items can be set in one request.\n          items:\n            type: string\n          type: array\n      type: object\n    PlaylistTrackDetails:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject\n      properties:\n        href:\n          description: A link to the Web API endpoint returning the full result of the request\n          type: string\n        items:\n          description: The requested data.\n          items:\n            $ref: \"#/components/schemas/PlaylistTrackObject\"\n          type: array\n        limit:\n          description: The maximum number of items in the response (as set in the query or by default).\n          format: int32\n          type: integer\n        next:\n          description: URL to the next page of items. ( `null` if none)\n          type: string\n          nullable: true\n        offset:\n          description: The offset of the items returned (as set in the query or by default)\n          format: int32\n          type: integer\n        previous:\n          description: URL to the previous page of items. ( `null` if none)\n          type: string\n          nullable: true\n        total:\n          description: The total number of items available to return.\n          format: int32\n          type: integer\n      type: object\n    ChangePlayListDetails:\n      description: Content to update the playlist\n      properties:\n        collaborative:\n          description: \"If `true` , the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. *Note: You can only set `collaborative` to `true` on non-public playlists.*\"\n          type: boolean\n        description:\n          description: Value for playlist description as displayed in Spotify Clients and in the Web API.\n          type: string\n        name:\n          description: The new name for the playlist, for example `\"My New Playlist Title\"`\n          type: string\n        public:\n          description: If `true` the playlist will be public, if `false` it will be private.\n          type: boolean\n      type: object\n    CurrentPlaylistDetails:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject\n      properties:\n        href:\n          description: A link to the Web API endpoint returning the full result of the request\n          type: string\n        items:\n          description: The requested data.\n          items:\n            $ref: \"#/components/schemas/SimplifiedPlaylistObject\"\n          type: array\n        limit:\n          description: The maximum number of items in the response (as set in the query or by default).\n          format: int32\n          type: integer\n        next:\n          description: URL to the next page of items. ( `null` if none)\n          type: string\n          nullable: true\n        offset:\n          description: The offset of the items returned (as set in the query or by default)\n          format: int32\n          type: integer\n        previous:\n          description: URL to the previous page of items. ( `null` if none)\n          type: string\n          nullable: true\n        total:\n          description: The total number of items available to return.\n          format: int32\n          type: integer\n    PlaylistObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject\n      properties:\n        collaborative:\n          description: \"`true` if the owner allows other users to modify the playlist.\"\n          type: boolean\n        description:\n          description: The playlist description. *Only returned for modified, verified playlists, otherwise* `null`.\n          type: string\n        external_urls:\n          $ref: \"#/components/schemas/ExternalUrlObject\"\n        followers:\n          $ref: \"#/components/schemas/FollowersObject\"\n        href:\n          description: A link to the Web API endpoint providing full details of the playlist.\n          type: string\n        id:\n          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n          type: string\n        images:\n          description: \"Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/). *Note: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day.*\"\n          items:\n            $ref: \"#/components/schemas/ImageObject\"\n          type: array\n        name:\n          description: The name of the playlist.\n          type: string\n        owner:\n          $ref: \"#/components/schemas/PublicUserObject\"\n        public:\n          description: \"The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)\"\n          type: boolean\n        snapshot_id:\n          description: The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version\n          type: string\n        tracks:\n          description: Information about the tracks of the playlist. Note, a track object may be `null`. This can happen if a track is no longer available.\n          externalDocs:\n            description: Find more info on the official Spotify Web API Reference\n            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject\n          properties:\n            href:\n              description: A link to the Web API endpoint returning the full result of the request\n              type: string\n            items:\n              description: The requested data.\n              items:\n                $ref: \"#/components/schemas/PlaylistTrackObject\"\n              type: array\n            limit:\n              description: The maximum number of items in the response (as set in the query or by default).\n              format: int32\n              type: integer\n            next:\n              description: URL to the next page of items. ( `null` if none)\n              type: string\n              nullable: true\n            offset:\n              description: The offset of the items returned (as set in the query or by default)\n              format: int32\n              type: integer\n            previous:\n              description: URL to the previous page of items. ( `null` if none)\n              type: string\n              nullable: true\n            total:\n              description: The total number of items available to return.\n              format: int32\n              type: integer\n          type: object\n        type:\n          description: 'The object type: \"playlist\"'\n          type: string\n        uri:\n          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n          type: string\n      type: object\n    ImageObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-imageobject\n      properties:\n        height:\n          description: \"The image height in pixels. If unknown: `null` or not returned.\"\n          format: int32\n          type: integer\n        url:\n          description: The source URL of the image.\n          type: string\n        width:\n          description: \"The image width in pixels. If unknown: `null` or not returned.\"\n          format: int32\n          type: integer\n      type: object\n    SnapshotIdObject:\n      properties:\n        snapshot_id:\n          description: The snapshot_id can be used to identify your playlist version in future requests.\n          type: string\n      type: object\n    ErrorResponseObject:\n      properties:\n        error:\n          $ref: \"#/components/schemas/ErrorObject\"\n      type: object\n    SimplifiedPlaylistObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject\n      properties:\n        collaborative:\n          description: \"`true` if the owner allows other users to modify the playlist.\"\n          type: boolean\n        description:\n          description: The playlist description. *Only returned for modified, verified playlists, otherwise* `null`.\n          type: string\n        external_urls:\n          $ref: \"#/components/schemas/ExternalUrlObject\"\n        href:\n          description: A link to the Web API endpoint providing full details of the playlist.\n          type: string\n        id:\n          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n          type: string\n        images:\n          description: \"Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/). *Note: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day.*\"\n          items:\n            $ref: \"#/components/schemas/ImageObject\"\n          type: array\n        name:\n          description: The name of the playlist.\n          type: string\n        owner:\n          $ref: \"#/components/schemas/PublicUserObject\"\n        public:\n          description: \"The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)\"\n          type: boolean\n        snapshot_id:\n          description: The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version\n          type: string\n        tracks:\n          $ref: \"#/components/schemas/PlaylistTracksRefObject\"\n        type:\n          description: 'The object type: \"playlist\"'\n          type: string\n        uri:\n          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n          type: string\n      type: object\n    PlaylistTrackObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-playlisttrackobject\n      properties:\n        added_at:\n          description: The date and time the track or episode was added. *Note that some very old playlists may return `null` in this field.*\n          format: date-time\n          type: string\n        added_by:\n          $ref: \"#/components/schemas/PublicUserObject\"\n        is_local:\n          description: Whether this track or episode is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not.\n          type: boolean\n        track:\n          description: Information about the track or episode.\n          oneOf:\n            - $ref: \"#/components/schemas/TrackObject\"\n            - $ref: \"#/components/schemas/EpisodeObject\"\n      type: object\n    ExternalUrlObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject\n      properties:\n        spotify:\n          description: The [Spotify URL](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the object.\n          type: string\n      type: object\n    FollowersObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-followersobject\n      properties:\n        href:\n          description: A link to the Web API endpoint providing full details of the followers; `null` if not available. Please note that this will always be set to null, as the Web API does not support it at the moment.\n          type: string\n        total:\n          description: The total number of followers.\n          format: int32\n          type: integer\n    PublicUserObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject\n      properties:\n        display_name:\n          description: The name displayed on the user's profile. `null` if not available.\n          type: string\n        external_urls:\n          $ref: \"#/components/schemas/ExternalUrlObject\"\n        followers:\n          $ref: \"#/components/schemas/FollowersObject\"\n        href:\n          description: A link to the Web API endpoint for this user.\n          type: string\n        id:\n          description: The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user.\n          type: string\n        images:\n          description: The user's profile image.\n          items:\n            $ref: \"#/components/schemas/ImageObject\"\n          type: array\n        type:\n          description: 'The object type: \"user\"'\n          type: string\n        uri:\n          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user.\n          type: string\n      type: object\n    ErrorObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-errorobject\n      properties:\n        message:\n          description: A short description of the cause of the error.\n          type: string\n        status:\n          description: The HTTP status code (also returned in the response header; see [Response Status Codes](https://developer.spotify.com/documentation/web-api/#response-status-codes) for more information).\n          format: int32\n          type: integer\n      type: object\n    PlaylistTracksRefObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-playlisttracksrefobject\n      properties:\n        href:\n          description: A link to the Web API endpoint where full details of the playlist's tracks can be retrieved.\n          type: string\n        total:\n          description: Number of tracks in the playlist.\n          format: int32\n          type: integer\n      type: object\n    EpisodeObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject\n      properties:\n        audio_preview_url:\n          description: A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.\n          type: string\n        description:\n          description: A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n          type: string\n        duration_ms:\n          description: The episode length in milliseconds.\n          format: int32\n          type: integer\n        explicit:\n          description: Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).\n          type: boolean\n        external_urls:\n          $ref: \"#/components/schemas/ExternalUrlObject\"\n        href:\n          description: A link to the Web API endpoint providing full details of the episode.\n          type: string\n        html_description:\n          description: A description of the episode. This field may contain HTML tags.\n          type: string\n        id:\n          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the episode.\n          type: string\n        images:\n          description: The cover art for the episode in various sizes, widest first.\n          items:\n            $ref: \"#/components/schemas/ImageObject\"\n          type: array\n        is_externally_hosted:\n          description: True if the episode is hosted outside of Spotify's CDN.\n          type: boolean\n        is_playable:\n          description: True if the episode is playable in the given market. Otherwise false.\n          type: boolean\n        language:\n          description: \"**Note: This field is deprecated and might be removed in the future. Please use the `languages` field instead.** The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.\"\n          type: string\n        languages:\n          description: A list of the languages used in the episode, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.\n          items:\n            type: string\n          type: array\n        name:\n          description: The name of the episode.\n          type: string\n        release_date:\n          description: The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`.\n          type: string\n        release_date_precision:\n          description: 'The precision with which `release_date` value is known: `\"year\"`, `\"month\"`, or `\"day\"`.'\n          type: string\n        restrictions:\n          $ref: \"#/components/schemas/EpisodeRestrictionObject\"\n        resume_point:\n          $ref: \"#/components/schemas/ResumePointObject\"\n        show:\n          $ref: \"#/components/schemas/SimplifiedShowObject\"\n        type:\n          description: 'The object type: \"episode\".'\n          type: string\n        uri:\n          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the episode.\n          type: string\n      type: object\n    EpisodeRestrictionObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-episoderestrictionobject\n      properties:\n        reason:\n          description: |-\n            The reason for the restriction. Supported values:\n\n            - `market` - The content item is not available in the given market.\n            - `product` - The content item is not available for the user's subscription type.\n            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n              Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values.\n          type: string\n      type: object\n    ResumePointObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-resumepointobject\n      properties:\n        fully_played:\n          description: Whether or not the episode has been fully played by the user.\n          type: boolean\n        resume_position_ms:\n          description: The user's most recent position in the episode in milliseconds.\n          format: int32\n          type: integer\n      type: object\n    SimplifiedShowObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject\n      properties:\n        available_markets:\n          description: A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n          items:\n            type: string\n          type: array\n        copyrights:\n          description: The copyright statements of the show.\n          items:\n            $ref: \"#/components/schemas/CopyrightObject\"\n          type: array\n        description:\n          description: A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n          type: string\n        explicit:\n          description: Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).\n          type: boolean\n        external_urls:\n          $ref: \"#/components/schemas/ExternalUrlObject\"\n        href:\n          description: A link to the Web API endpoint providing full details of the show.\n          type: string\n        html_description:\n          description: A description of the show. This field may contain HTML tags.\n          type: string\n        id:\n          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the show.\n          type: string\n        images:\n          description: The cover art for the show in various sizes, widest first.\n          items:\n            $ref: \"#/components/schemas/ImageObject\"\n          type: array\n        is_externally_hosted:\n          description: True if all of the show's episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.\n          type: boolean\n        languages:\n          description: A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.\n          items:\n            type: string\n          type: array\n        media_type:\n          description: The media type of the show.\n          type: string\n        name:\n          description: The name of the episode.\n          type: string\n        publisher:\n          description: The publisher of the show.\n          type: string\n        type:\n          description: 'The object type: \"show\".'\n          type: string\n        uri:\n          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the show.\n          type: string\n      type: object\n    CopyrightObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-copyrightobject\n      properties:\n        text:\n          description: The copyright text for this content.\n          type: string\n        type:\n          description: \"The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright.\"\n          type: string\n      type: object\n    SimplifiedArtistObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedartistobject\n      properties:\n        external_urls:\n          $ref: \"#/components/schemas/ExternalUrlObject\"\n        href:\n          description: A link to the Web API endpoint providing full details of the artist.\n          type: string\n        id:\n          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.\n          type: string\n        name:\n          description: The name of the artist.\n          type: string\n        type:\n          description: 'The object type: `\"artist\"`'\n          type: string\n        uri:\n          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.\n          type: string\n      type: object\n    SimplifiedAlbumObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject\n      properties:\n        album_group:\n          description: The field is present when getting an artist's albums. Possible values are \"album\", \"single\", \"compilation\", \"appears_on\". Compare to album_type this field represents relationship between the artist and the album.\n          type: string\n        album_type:\n          description: 'The type of the album: one of \"album\", \"single\", or \"compilation\".'\n          type: string\n        artists:\n          description: The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.\n          items:\n            $ref: \"#/components/schemas/SimplifiedArtistObject\"\n          type: array\n        available_markets:\n          description: \"The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Note that an album is considered available in a market when at least 1 of its tracks is available in that market.\"\n          items:\n            type: string\n          type: array\n        external_urls:\n          $ref: \"#/components/schemas/ExternalUrlObject\"\n        href:\n          description: A link to the Web API endpoint providing full details of the album.\n          type: string\n        id:\n          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the album.\n          type: string\n        images:\n          description: The cover art for the album in various sizes, widest first.\n          items:\n            $ref: \"#/components/schemas/ImageObject\"\n          type: array\n        name:\n          description: The name of the album. In case of an album takedown, the value may be an empty string.\n          type: string\n        release_date:\n          description: The date the album was first released, for example `1981`. Depending on the precision, it might be shown as `1981-12` or `1981-12-15`.\n          type: string\n        release_date_precision:\n          description: \"The precision with which `release_date` value is known: `year` , `month` , or `day`.\"\n          type: string\n        restrictions:\n          $ref: \"#/components/schemas/AlbumRestrictionObject\"\n        total_tracks:\n          description: The total number of tracks in the album.\n          format: int32\n          type: integer\n        type:\n          description: 'The object type: \"album\"'\n          type: string\n        uri:\n          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the album.\n          type: string\n      type: object\n    AlbumRestrictionObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-albumrestrictionobject\n      properties:\n        reason:\n          description: |-\n            The reason for the restriction. Supported values:\n\n            - `market` - The content item is not available in the given market.\n            - `product` - The content item is not available for the user's subscription type.\n            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n              Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values.\n          type: string\n      type: object\n    ArtistObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-artistobject\n      properties:\n        external_urls:\n          $ref: \"#/components/schemas/ExternalUrlObject\"\n        followers:\n          $ref: \"#/components/schemas/FollowersObject\"\n        genres:\n          description: 'A list of the genres the artist is associated with. For example: `\"Prog Rock\"` , `\"Post-Grunge\"`. (If not yet classified, the array is empty.)'\n          items:\n            type: string\n          type: array\n        href:\n          description: A link to the Web API endpoint providing full details of the artist.\n          type: string\n        id:\n          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.\n          type: string\n        images:\n          description: Images of the artist in various sizes, widest first.\n          items:\n            $ref: \"#/components/schemas/ImageObject\"\n          type: array\n        name:\n          description: The name of the artist.\n          type: string\n        popularity:\n          description: The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.\n          format: int32\n          type: integer\n        type:\n          description: 'The object type: `\"artist\"`'\n          type: string\n        uri:\n          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.\n          type: string\n      type: object\n    ExternalIdObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-externalidobject\n      properties:\n        ean:\n          description: \"[International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)\"\n          type: string\n        isrc:\n          description: \"[International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)\"\n          type: string\n        upc:\n          description: \"[Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)\"\n          type: string\n      type: object\n    LinkedTrackObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-linkedtrackobject\n      properties:\n        external_urls:\n          $ref: \"#/components/schemas/ExternalUrlObject\"\n        href:\n          description: A link to the Web API endpoint providing full details of the track.\n          type: string\n        id:\n          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.\n          type: string\n        type:\n          description: 'The object type: \"track\".'\n          type: string\n        uri:\n          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.\n          type: string\n      type: object\n    TrackRemovingDetails:\n      properties:\n        snapshot_id:\n          description: The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.\n          type: string\n        tracks:\n          description: 'An array of objects containing [Spotify URIs](https://developer.spotify.com/spotify-documentation/web-api/#spotify-uris-and-ids) of the tracks or episodes to remove. For example: `{ \"tracks\": [{ \"uri\": \"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\" },{ \"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\" }] }`. A maximum of 100 objects can be sent at once.'\n          items:\n            type: string\n          type: array\n      required:\n        - tracks\n      type: object\n    TrackObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-trackobject\n      properties:\n        album:\n          $ref: \"#/components/schemas/SimplifiedAlbumObject\"\n        artists:\n          description: The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.\n          items:\n            $ref: \"#/components/schemas/ArtistObject\"\n          type: array\n        available_markets:\n          description: A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n          items:\n            type: string\n          type: array\n        disc_number:\n          description: The disc number (usually `1` unless the album consists of more than one disc).\n          format: int32\n          type: integer\n        duration_ms:\n          description: The track length in milliseconds.\n          format: int32\n          type: integer\n        explicit:\n          description: Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).\n          type: boolean\n        external_ids:\n          $ref: \"#/components/schemas/ExternalIdObject\"\n        external_urls:\n          $ref: \"#/components/schemas/ExternalUrlObject\"\n        href:\n          description: A link to the Web API endpoint providing full details of the track.\n          type: string\n        id:\n          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.\n          type: string\n        is_local:\n          description: Whether or not the track is from a local file.\n          type: boolean\n        is_playable:\n          description: Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied. If `true` , the track is playable in the given market. Otherwise `false`.\n          type: boolean\n        linked_from:\n          $ref: \"#/components/schemas/LinkedTrackObject\"\n        name:\n          description: The name of the track.\n          type: string\n        popularity:\n          description: |-\n            The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.\n            The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.\n            Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. Note that the popularity value may lag actual popularity by a few days: the value is not updated in real time.\n          format: int32\n          type: integer\n        preview_url:\n          description: A link to a 30 second preview (MP3 format) of the track. Can be `null`\n          type: string\n        restrictions:\n          $ref: \"#/components/schemas/TrackRestrictionObject\"\n        track_number:\n          description: The number of the track. If an album has several discs, the track number is the number on the specified disc.\n          format: int32\n          type: integer\n        type:\n          description: 'The object type: \"track\".'\n          type: string\n        uri:\n          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.\n          type: string\n      type: object\n    TrackRestrictionObject:\n      externalDocs:\n        description: Find more info on the official Spotify Web API Reference\n        url: https://developer.spotify.com/documentation/web-api/reference/#object-trackrestrictionobject\n      properties:\n        reason:\n          description: |-\n            The reason for the restriction. Supported values:\n\n            - `market` - The content item is not available in the given market.\n            - `product` - The content item is not available for the user's subscription type.\n            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n              Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values.\n          type: string\n      type: object\n  securitySchemes:\n    spotify_auth:\n      flows:\n        authorizationCode:\n          authorizationUrl: https://accounts.spotify.com/authorize\n          scopes:\n            app-remote-control: Remote control playback of Spotify. This scope is currently available to Spotify iOS and Android SDKs.\n            playlist-modify-private: Write access to a user's private playlists.\n            playlist-modify-public: Write access to a user's public playlists.\n            playlist-read-collaborative: Include collaborative playlists when requesting a user's playlists.\n            playlist-read-private: Read access to user's private playlists.\n            streaming: Control playback of a Spotify track. This scope is currently available to the Web Playback SDK. The user must have a Spotify Premium account.\n            ugc-image-upload: Write access to user-provided images.\n            user-follow-modify: Write/delete access to the list of artists and other users that the user follows.\n            user-follow-read: Read access to the list of artists and other users that the user follows.\n            user-library-modify: Write/delete access to a user's \"Your Music\" library.\n            user-library-read: Read access to a user's library.\n            user-modify-playback-state: Write access to a user’s playback state\n            user-read-currently-playing: Read access to a user’s currently playing content.\n            user-read-email: Read access to user’s email address.\n            user-read-playback-position: Read access to a user’s playback position in a content.\n            user-read-playback-state: Read access to a user’s player state.\n            user-read-private: Read access to user’s subscription details (type of user account).\n            user-read-recently-played: Read access to a user’s recently played tracks.\n            user-top-read: Read access to a user's top artists and tracks.\n          tokenUrl: https://accounts.spotify.com/api/token\n      type: oauth2",
			"canonicalURL": "/github.com/ballerina-platform/openapi-tools@b707e95d277db08e68a567b3189235dbe654ff0c/-/blob/openapi-cli/src/test/resources/generators/client/file_provider/swagger/playlist.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-tools/blob/b707e95d277db08e68a567b3189235dbe654ff0c/openapi-cli/src/test/resources/generators/client/file_provider/swagger/playlist.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!bool `true` into []string"
}