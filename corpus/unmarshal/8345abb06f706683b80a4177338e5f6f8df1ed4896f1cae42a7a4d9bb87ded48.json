{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mimiro-io/datahub"
		},
		"file": {
			"name": "datahub.oas3.yml",
			"size": 0,
			"path": "api/datahub.oas3.yml",
			"byteSize": 30153,
			"content": "openapi: 3.0.3\ninfo:\n  title: \"MIMIRO Data Hub API documentation\"\n  description: Semantic Entity Graph Database with Jobs Engine, Transformation and Query\n  version: \"0.5.0\"\n\nservers:\n    - url: http://localhost:8080\n      description: Local development instance server\n\ntags:\n  - name: dataset\n    description: Operations with Datasets\n  - name: jobs\n    description: Add, list and delete jobs\n  - name: operations\n    description: Job operations\n  - name: query\n    description: Query operations\n  - name: content\n    description: Operations to work with content objects\n  - name: server\n    description: Generic server information\n  - name: namespaces\n    description: Namespace operations\n  - name: providers\n    description: Datalayer security providers\n\npaths:\n  /:\n    get:\n      summary: Show ServiceInfo\n      description: The ServiceInfo object contains information about the server\n      tags:\n        - server\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: A ServiceInfo object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceInfo'\n  /health:\n    get:\n      summary: Health\n      tags:\n        - server\n      responses:\n        '200':\n          description: Just returns UP\n\n  /query:\n    post:\n      summary: Query\n      description: Run a query against a set of entities\n      tags:\n        - query\n      security:\n        - BearerAuth: []\n      requestBody:\n        description: A query to run\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Query'\n      responses:\n        '200':\n          description: Returns an object with entity refs as field names and a list of Entities pr field\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QueryResponse'\n\n  /namespaces:\n    get:\n      summary: Namespaces\n      description: Returns a map of namespaces\n      tags:\n        - namespaces\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: Map with all namespaces to their prefixes\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n\n  /jobs:\n    get:\n      summary: List Jobs\n      description: Lists all configured jobs\n      tags:\n        - jobs\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: List with all configured jobs\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Jobs\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n    post:\n      summary: Add Job\n      description: Add a job to the Job manager\n      tags:\n        - jobs\n      security:\n        - BearerAuth: []\n      requestBody:\n        description: The Job object to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Job'\n      responses:\n        '201':\n          description: Created\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '500':\n          description: Internal server error\n\n  /jobs/{jobid}:\n    get:\n      summary: Get Job\n      description: Get a job with a given jobid\n      parameters:\n        - in: path\n          name: jobid\n          schema:\n            type: string\n          required: true\n          description:\n            The id of the Job to retrieve\n      tags:\n        - jobs\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: The job in question\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Job'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not found\n    post:\n      summary: Change Job state\n      description: Start, Stop or Deactivate a job\n      parameters:\n        - in: path\n          name: jobid\n          schema:\n            type: string\n          required: true\n          description:\n            The id of the Job to retrieve\n      tags:\n        - jobs\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: The job in question\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Job'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not found\n    delete:\n      summary: Delete Job\n      description: |\n        Delete an existing job from the store. A running job will be terminated as soon as possible\n      parameters:\n        - in: path\n          name: jobid\n          schema:\n            type: string\n          required: true\n          description:\n            The id of the Job to retrieve\n      tags:\n        - jobs\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: Ok\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not found\n  /job/{jobid}/status:\n    get:\n      summary: Get Job status\n      description: Given the job id, returns the job status\n      parameters:\n        - in: path\n          name: jobid\n          schema:\n            type: string\n          required: true\n          description:\n            The id of the Job to retrieve\n      tags:\n        - operations\n      security:\n        - BearerAuth: []\n      responses:\n        '501':\n          description: Not imlemented\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n  /job/{jobid}/pause:\n    put:\n      summary: Pause job\n      description: Given the job id, pauses a job. If the job is running, it will not be stopped.\n      parameters:\n        - in: path\n          name: jobid\n          schema:\n            type: string\n          required: true\n          description:\n            The id of the Job to pause\n      tags:\n        - operations\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobResponse'\n        '500':\n          description: Internal server error\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n  /job/{jobid}/resume:\n    put:\n      summary: Resume Job\n      description: Given the job id, resumes a paused job. The job will run at next schedule.\n      parameters:\n        - in: path\n          name: jobid\n          schema:\n            type: string\n          required: true\n          description:\n            The id of the Job to pause\n      tags:\n        - operations\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobResponse'\n        '500':\n          description: Internal server error\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n\n  /job/{jobid}/kill:\n    put:\n      summary: Kill Job\n      description: Given the job id, kills a running job. If it is not running, nothing will happen.\n      parameters:\n        - in: path\n          name: jobid\n          schema:\n            type: string\n          required: true\n          description:\n            The id of the Job to kill\n      tags:\n        - operations\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobResponse'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n\n  /job/{jobid}/run:\n    put:\n      summary: Run Job\n      description: |\n        Given the job id, runs a job. This will check if the job is already running, and\n        if it is, then this will do nothing. If it is not running, it will create a temp RunOnce\n        job, and then run it without storing it. It will give it a temp job id, and return this.\n      parameters:\n        - in: path\n          name: jobid\n          schema:\n            type: string\n          required: true\n          description:\n            The id of the Job to kill\n        - in: query\n          name: jobType\n          schema:\n            type: string\n            enum: [ incremental, fullsync ]\n          required: false\n          description:\n            The jobType for this run. defaults to incremental\n      tags:\n        - operations\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobResponse'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n\n  /job/{jobid}/reset:\n    put:\n      summary: Reset Job\n      description: |\n        Given the job id, resets the job continuation token. If a since query parameter is added, then\n        the token is reset to this value instead.\n      parameters:\n        - in: path\n          name: jobid\n          schema:\n            type: string\n          required: true\n          description:\n            The id of the Job to reset\n        - in: query\n          name: since\n          schema:\n            type: string\n          required: false\n          description:\n            The continuation token to reset to.\n      tags:\n        - operations\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobResponse'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n\n  /datasets:\n    get:\n      summary: List Datasets\n      description: Returns a list of datasets the current user has access to\n      tags:\n        - dataset\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: Returns a list of Datasets\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Datasets'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n  /datasets/{dataset}/entities:\n    get:\n      summary: List Entities\n      description: Returns a list of Entities for the given dataset. Used for full sync.\n      parameters:\n        - in: path\n          name: dataset\n          schema:\n            type: string\n          required: true\n          description:\n            The name of the Dataset to recover\n        - in: query\n          name: limit\n          schema:\n            type: number\n            format: int\n          required: false\n          description:\n            The limit on how many entities to return.\n      tags:\n        - dataset\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: A list of entities\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entities'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Dataset not found, either because it does not exist, or you have no access\n        '500':\n          description: Internal server error\n    post:\n      summary: Create dataset\n      description: creates a Dataset.\n      parameters:\n        - in: path\n          name: dataset\n          schema:\n            type: string\n          required: true\n          description:\n            The name of the Dataset to recover\n        - in: query\n          name: proxy\n          schema:\n            type: boolean\n          required: false\n          description: if true, the dataset will forwand all user requests to configured proxy dataset. requires request body with proxyDatasetConfig\n      requestBody:\n        content:\n          'application/json':\n            schema:\n              properties:\n                proxyDatasetConfig:\n                  description: configuration for proxy datasets. only required when dataset is created with ?proxy=true option.\n                  type: object\n                  properties:\n                    remoteUrl:\n                      description: base url of proxied UDA dataset in the form //host/datasets/datasetname.\n                      type: string\n                    authProviderName:\n                      description: reference to an authentication provider in the datahub. if omitted or not found, proxy requests are sent without Authorization header.\n                      type: string\n                publicNamespaces:\n                  description: only expose these namespaces to users of this dataset. if omitted, all namespaces are exposed\n                  type: array\n                  items:\n                    type: string\n            examples:\n              proxyDatasetConfig:\n                remoteUrl: \"http://hostname/datasets/example\"\n                authProviderName: \"local\"\n              publicNamespaces: [\"http://example.com\", \"http://example.mimiro.io/\"]\n      tags:\n        - dataset\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '500':\n          description: Internal server error\n  /datasets/{dataset}/changes:\n    get:\n      summary: List changed Entities\n      description: Given a since parameter, returns a list of changed entities since.\n      parameters:\n        - in: path\n          name: dataset\n          schema:\n            type: string\n          required: true\n          description:\n            The name of the Dataset to return\n        - in: query\n          name: since\n          schema:\n            type: integer\n            format: int64\n          required: true\n          description:\n            A continuation token\n      tags:\n        - dataset\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: List of entities since\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entities'\n        '400':\n          description: Bad Request. Check your parameters.\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Dataset not found, either because it does not exist, or you have no access\n        '500':\n          description: Internal server error\n  /datasets/{dataset}:\n    delete:\n      summary: Delete Dataset\n      description: Deletes the given dataset\n      parameters:\n        - in: path\n          name: dataset\n          schema:\n            type: string\n          required: true\n          description:\n            The name of the Dataset to delete\n      tags:\n        - dataset\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '500':\n          description: Internal server error\n  /content:\n    get:\n      summary: List contents\n      description: Lists all stored contents in random order\n      tags:\n        - content\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: Lists of stored contents\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Contents'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '500':\n          description: Internal server error\n    post:\n      summary: Add Content\n      description: Add new or update existing content with same name\n      tags:\n        - content\n      security:\n        - BearerAuth: []\n      requestBody:\n        description: The content object to add or replace\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Content'\n      responses:\n        '201':\n          description: Created\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '500':\n          description: Internal server error\n  /content/{contentId}:\n    get:\n      summary: Show Content\n      description: Given its id, retrieves a single Content\n      tags:\n        - content\n      security:\n        - BearerAuth: []\n      parameters:\n        - in: path\n          name: contentId\n          schema:\n            type: string\n          required: true\n          description:\n            The id of the Content to show\n      responses:\n        '200':\n          description: A single content object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Content'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not found\n        '500':\n          description: Internal server error\n    put:\n      summary: Update Content\n      description: Updates a content with the given id. The id in the object will be overwritten by the one in the url, if present.\n      tags:\n        - content\n      security:\n        - BearerAuth: []\n      parameters:\n        - in: path\n          name: contentId\n          schema:\n            type: string\n          required: true\n          description:\n            The id of the Content to update\n      requestBody:\n        description: The Content object to update\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Content'\n      responses:\n        '201':\n          description: Created\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '500':\n          description: Internal server error\n\n    delete:\n      summary: Delete Content\n      description: Deletes the given content by it's id\n      tags:\n        - content\n      security:\n          - BearerAuth: []\n      parameters:\n        - in: path\n          name: contentId\n          schema:\n            type: string\n          required: true\n          description:\n            The id of the Content to delete\n      responses:\n        '200':\n          description: OK\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not found\n        '500':\n          description: Internal server error\n  /provider/logins:\n    get:\n      summary: List all providers\n      description: Returns a list of all configured providers\n      tags:\n        - providers\n      security:\n        - BearerAuth: []\n      responses:\n        '200':\n          description: A list of login providers\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoginProviders'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '500':\n          description: Internal server error\n    post:\n      summary: Add new provider\n      description: Creates a new login provider\n      tags:\n        - providers\n      security:\n        - BearerAuth: []\n      requestBody:\n        description: The Content object to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginProvider'\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '500':\n          description: Internal server error\n  /provider/login/{providerName}:\n    get:\n      summary: Get provider by name\n      description: Gets a single login provider by it's name\n      tags:\n        - providers\n      security:\n        - BearerAuth: []\n      parameters:\n        - in: path\n          name: providerName\n          schema:\n            type: string\n          required: true\n          description:\n            The name of the Login provider to get\n      responses:\n        '200':\n          description: A login provider\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoginProvider'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not found\n        '500':\n          description: Internal server error\n    post:\n      summary: Update provider\n      description: Updates a single named login provider\n      tags:\n        - providers\n      security:\n        - BearerAuth: []\n      parameters:\n        - in: path\n          name: providerName\n          schema:\n            type: string\n          required: true\n          description:\n            The name of the Login provider to update\n      requestBody:\n        description: The Content object to update. The name in the body is ignored for the one in the path.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginProvider'\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '500':\n          description: Internal server error\n    delete:\n      summary: Delete provider\n      description: Deletes a single named login provider\n      tags:\n        - providers\n      security:\n        - BearerAuth: []\n      parameters:\n        - in: path\n          name: providerName\n          schema:\n            type: string\n          required: true\n          description:\n            The name of the Login provider to delete\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '500':\n          description: Internal server error\n\n\ncomponents:\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n\n  schemas:\n    ServiceInfo:\n      properties:\n        name:\n          type: string\n          description: Name of the server\n        location:\n          type: string\n          description: Location of the server\n\n    Query:\n      properties:\n        startingEntities:\n          type: array\n          items:\n            type: string\n          description: List of uris for entities\n        predicate:\n          type: string\n        inverse:\n          type: boolean\n        datasets:\n          type: array\n          items:\n            type: string\n          description: List of dataset names. If not empty, the query will only traverse these datasets to find results. If empty, all datasets are accessed\n\n    QueryResponse:\n      type: object\n\n    LoginProviders:\n      type: array\n      items:\n        $ref: '#/components/schemas/LoginProvider'\n\n\n    LoginProvider:\n      properties:\n        name:\n          type: string\n          description: Unique identifying name for this provider\n        type:\n          type: string\n          enum:\n            - bearer\n            - basic\n          description: Must be either bearer (jwt) or basic (username+password)\n        user:\n          type: object\n          $ref: '#/components/schemas/Value'\n          description: If type is \"basic\" then this is the username and must be present\n        password:\n          type: object\n          $ref: '#/components/schemas/Value'\n          description: If type is \"basic\" then this is the password and must be present\n        key:\n          type: object\n          $ref: '#/components/schemas/Value'\n          description: If type is \"bearer\" then this is the id of the client\n        secret:\n          type: object\n          $ref: '#/components/schemas/Value'\n          description: If type is \"bearer\" then this is the secret of the client\n        audience:\n          type: object\n          $ref: '#/components/schemas/Value'\n          description: If type is \"bearer\" then this is the audience the token is requested for.\n        grantType:\n          type: object\n          $ref: '#/components/schemas/Value'\n          description: |\n            If type is \"bearer\" then this is the type of the token asked for, this is client_credential for\n            m2m tokens, app_credential for user application tokens.\n        endpoint:\n          type: object\n          $ref: '#/components/schemas/Value'\n          description: If type is \"bearer\" then this is the endpoint to request a token at.\n\n    Value:\n      properties:\n        type:\n          type: string\n          enum:\n            - env\n            - text\n            - ssm\n          description: |\n            The type is either text, env, or ssm. When set to \"text\" the value is used as is,\n            if set to \"env\", the value is attempted read from an environment variable with the\n            same name. If set to \"ssm\", AWS Secrets Manager attempts to read the value from the\n            location \"/application/datahub/VALUE\".\n        value:\n          type: string\n          description: Depending on the value of the type field above is either read as is or loaded from its location upon access\n\n    Contents:\n      type: array\n      items:\n        $ref: '#/components/schemas/Content'\n\n    Content:\n      properties:\n        id:\n          type: string\n          description: Must be a unique name for this content\n        data:\n          type: object\n          description: An object without schema constraints.\n      required:\n          - id\n          - data\n    Jobs:\n      type: array\n      items:\n        $ref: '#/components/schemas/Job'\n    JobResponse:\n      properties:\n        jobId:\n          type: string\n          description: The jobId of the current job.\n    Job:\n      properties:\n        id:\n          type: string\n          description: Job id\n          example: sync-samplesource-to-datasetsink\n        triggers:\n          type: array\n          items:\n            properties:\n              triggerType:\n                type: string\n                description: can be either 'cron' or 'onchange'\n              jobType:\n                type: string\n                description: either 'fullsync' or 'incremental'. fullsync jobs always process the whole dataset from start. incremental jobs keep track of how far they go and only process new changes in each run.\n              schedule:\n                type: string\n                description: a cron expression. used with triggerType=cron to specify when the job is run periodically.\n                example: 0 1 * * *\n              monitoredDataset:\n                type: string\n                description: used with triggerType=onchange, specify the name of an existing dataset. every change to that dataset will trigger this job.\n        paused:\n          type: boolean\n          description: If true, the job is currently paused. If a job is added with this to true, it will not start.\n          example: false\n        source:\n          type: object\n          description: An object describing the Source of the Job\n        sink:\n          type: object\n          description: An object describing the Sink of the Job\n        transform:\n          type: object\n          description: An object describing the Transform to be added to the job\n          example:\n            {\n              \"Type\" : \"HttpTransform || JavascriptTransform\",\n              \"Code\" : \"For JS transform: base64 encoded js code.\"\n            }\n\n    Datasets:\n      type: array\n      items:\n        properties:\n          name:\n            type: string\n            description: Name of dataset\n\n    Entities:\n      type: array\n      items:\n        anyOf:\n            - $ref: '#/components/schemas/Context'\n            - $ref: '#/components/schemas/Entity'\n            - $ref: '#/components/schemas/NextToken'\n\n    Context:\n      properties:\n        id:\n          type: string\n          description: Will be @context\n          example: \"@context\"\n        namespaces:\n          type: object\n          description: A map of namespaces\n          example: { \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" }\n    Entity:\n      properties:\n        id:\n          type: string\n          description: The id of the entity recovered\n        internalId:\n          type: integer\n          format: int64\n          description: Internal entity id\n        recorded:\n          type: integer\n          format: int64\n          description: Timestamp of when the entity was recorded\n          example: 1601379740\n        deleted:\n          type: boolean\n          description: Whether an entity is deleted or not.\n          example: false\n        refs:\n          type: object\n          description: Map of references to other entities\n        props:\n          type: object\n          description: Map of fields and values (aka properties)\n    NextToken:\n      properties:\n        id:\n          type: string\n          description: Always set to @continuation\n          example: \"@continuation\"\n        token:\n          type: string\n          description: |\n            Contains the continuation token. This should be a base64 encoded string. What's inside the\n            token is up to the server.\n",
			"canonicalURL": "/github.com/mimiro-io/datahub@0fc1e52e96eb0c65504a185196c92dfb349c72fd/-/blob/api/datahub.oas3.yml",
			"externalURLs": [
				{
					"url": "https://github.com/mimiro-io/datahub/blob/0fc1e52e96eb0c65504a185196c92dfb349c72fd/api/datahub.oas3.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!seq into ogen.Example"
}