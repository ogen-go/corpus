{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PaloAltoNetworks/pan.dev"
		},
		"file": {
			"name": "ManageCertificateObjects.yaml",
			"size": 0,
			"path": "static/cloudngfw/aws/spec/api/ManageCertificateObjects.yaml",
			"byteSize": 24854,
			"content": "components:\n  schemas:\n    CreateCertificateObjectRequest:\n      additionalProperties: false\n      properties:\n        AuditComment: {description: 'Audit remarks.\n\n            ', maxLength: 512, title: Auditcomment, type: string}\n        CertificateSelfSigned: {default: false, description: 'A self-signed root CA\n            certificate.\n\n            ', title: Certificateselfsigned, type: boolean}\n        CertificateSignerArn: {description: \"Certificate Signer ARN       \\n\", title: Certificatesignerarn,\n          type: string}\n        Description: {description: 'A description of the certificate object.\n\n            ', maxLength: 512, title: Description, type: string}\n        Name: {maxLength: 63, minLength: 1, pattern: '^[a-zA-Z0-9-]+$', title: Name,\n          type: string}\n      required: [Name]\n      title: CreateCertificateObjectRequest\n      type: object\n    CreateCertificateObjectResponse:\n      additionalProperties: false\n      properties:\n        Response: {$ref: '#/components/schemas/CreateCertificateObjectResponse.ResponseData',\n          description: 'The API call response.\n\n            '}\n        ResponseStatus: {$ref: '#/components/schemas/CreateCertificateObjectResponse.Result',\n          description: 'The API call response status.\n\n            '}\n      title: CreateCertificateObjectResponse\n      type: object\n    CreateCertificateObjectResponse.CertificateDetails:\n      additionalProperties: false\n      properties:\n        AuditComment: {description: 'Audit remarks.\n\n            ', title: Auditcomment, type: string}\n        CertificateSelfSigned: {description: 'A self-signed root CA certificate.\n\n            ', title: Certificateselfsigned, type: boolean}\n        CertificateSignerArn: {description: \"Certificate signer ARN. \\n\", title: Certificatesignerarn,\n          type: string}\n        Description: {description: 'A description of certificate object.\n\n            ', title: Description, type: string}\n        UpdateToken: {description: \"Refresh token.    \\n\", title: Updatetoken, type: string}\n      title: CertificateDetails\n      type: object\n    CreateCertificateObjectResponse.ResponseData:\n      additionalProperties: false\n      properties:\n        CertificateObjectEntry: {$ref: '#/components/schemas/CreateCertificateObjectResponse.CertificateDetails',\n          description: 'The certificate object entry.\n\n            '}\n        Name: {description: \"Name of the certificate object entry.    \\n\", title: Name,\n          type: string}\n        RuleStackName: {description: \"Name of the rulestack. \\n\", title: Rulestackname,\n          type: string}\n      title: ResponseData\n      type: object\n    CreateCertificateObjectResponse.Result:\n      additionalProperties: false\n      properties:\n        ErrorCode: {default: 0, description: \"Default value of a successful response\\\n            \\ is 0. Any other number indicates an error code.  \\n\\n400\\u2014HTTP bad\\\n            \\ request\\n* InvalidRequestException\\u2014Operation failed due to invalid\\\n            \\ request. For example, unsupported parameter name or value in the request.\\n\\\n            * LimitExceededException\\u2014Operation failed due to violation in limit\\\n            \\ settings.\\n* ThrottlingException\\u2014Operation failed due to throttling\\\n            \\ limitations.\\n* AccessDeniedException\\u2014You do not have sufficient\\\n            \\ access to perform this action.\\n\\n500\\u2014Bad request \\n* InternalServerError\\u2014\\\n            Your request is valid but Cloud NGFW could not perform the operation due\\\n            \\ to a system issue.\\n* InsufficientCapacityException\\u2014AWS currently\\\n            \\ does not have enough capacity to fulfill your request.\\n\", title: Errorcode,\n          type: integer}\n        Reason: {description: 'The error description.\n\n            ', title: Reason, type: string}\n      title: Result\n      type: object\n    DeleteCertificateObjectRequest:\n      additionalProperties: false\n      properties: {}\n      title: DeleteCertificateObjectRequest\n      type: object\n    DeleteCertificateObjectResponse:\n      additionalProperties: false\n      properties:\n        Response: {$ref: '#/components/schemas/DeleteCertificateObjectResponse.ResponseData',\n          description: 'The API call response.\n\n            '}\n        ResponseStatus: {$ref: '#/components/schemas/DeleteCertificateObjectResponse.Result',\n          description: 'The API call response status.\n\n            '}\n      title: DeleteCertificateObjectResponse\n      type: object\n    DeleteCertificateObjectResponse.CertificateDetails:\n      additionalProperties: false\n      properties:\n        AuditComment: {description: 'Audit remarks.\n\n            ', title: Auditcomment, type: string}\n        CertificateSelfSigned: {description: 'A self-signed root CA certificate.\n\n            ', title: Certificateselfsigned, type: boolean}\n        CertificateSignerArn: {description: 'Certificate signer ARN.\n\n            ', title: Certificatesignerarn, type: string}\n        Description: {description: 'A description of certificate object.\n\n            ', title: Description, type: string}\n        UpdateToken: {description: \"Refresh token.    \\n\", title: Updatetoken, type: string}\n      title: CertificateDetails\n      type: object\n    DeleteCertificateObjectResponse.ResponseData:\n      additionalProperties: false\n      properties:\n        CertificateObjectEntry: {$ref: '#/components/schemas/DeleteCertificateObjectResponse.CertificateDetails',\n          description: 'The certificate object entry.\n\n            '}\n        Name: {description: \"Name of the certificate object entry.    \\n\", title: Name,\n          type: string}\n        RuleStackName: {description: \"Name of the rulestack. \\n\", title: Rulestackname,\n          type: string}\n      title: ResponseData\n      type: object\n    DeleteCertificateObjectResponse.Result:\n      additionalProperties: false\n      properties:\n        ErrorCode: {default: 0, description: \"Default value of a successful response\\\n            \\ is 0. Any other number indicates an error code.  \\n\\n400\\u2014HTTP bad\\\n            \\ request\\n* InvalidRequestException\\u2014Operation failed due to invalid\\\n            \\ request. For example, unsupported parameter name or value in the request.\\n\\\n            * LimitExceededException\\u2014Operation failed due to violation in limit\\\n            \\ settings.\\n* ResourceNotFoundException\\u2014Unable to locate a resource\\\n            \\ using the parameters you provided.\\n* ThrottlingException\\u2014Operation\\\n            \\ failed due to throttling limitations.\\n* AccessDeniedException\\u2014\\\n            You do not have sufficient access to perform this action.\\n\\n500\\u2014\\\n            Bad request \\n* InternalServerError\\u2014Your request is valid but Cloud\\\n            \\ NGFW could not perform the operation due to a system issue.\\n* InsufficientCapacityException\\u2014\\\n            AWS currently does not have enough capacity to fulfill your request.\\n\",\n          title: Errorcode, type: integer}\n        Reason: {description: 'The error description.\n\n            ', title: Reason, type: string}\n      title: Result\n      type: object\n    DescribeCertificateObjectRequest:\n      additionalProperties: false\n      properties:\n        Candidate: {default: true, description: 'certificate object candidate.\n\n            ', title: Candidate, type: boolean}\n        MaxResults: {default: 100, description: \"The maximum number of certificate\\\n            \\ objects that you want NGFW to return for this request. \\n\", exclusiveMaximum: 101,\n          exclusiveMinimum: 0, title: Maxresults, type: integer}\n        NextToken: {description: 'If the number of certificate objects available for\n            retrieval exceeds the maximum you requested, NGFW returns a NextToken\n            value in response. To retrieve the next batch of certificate objects,\n            use this token in your next request.\n\n            ', maxLength: 2048, minLength: 1, pattern: '^[-0-9A-Za-z:\\/+=]+$', title: Nexttoken,\n          type: string}\n        Running: {default: false, description: 'certificate objects in run state.\n\n            ', title: Running, type: boolean}\n      title: DescribeCertificateObjectRequest\n      type: object\n    DescribeCertificateObjectResponse:\n      additionalProperties: false\n      properties:\n        Response: {$ref: '#/components/schemas/DescribeCertificateObjectResponse.ResponseData',\n          description: 'The API call response.\n\n            '}\n        ResponseStatus: {$ref: '#/components/schemas/DescribeCertificateObjectResponse.Result',\n          description: 'The API call response status.\n\n            '}\n      title: DescribeCertificateObjectResponse\n      type: object\n    DescribeCertificateObjectResponse.CertificateDetails:\n      additionalProperties: false\n      properties:\n        AuditComment: {description: 'Audit remarks.\n\n            ', title: Auditcomment, type: string}\n        CertificateSelfSigned: {description: 'A self-signed root CA certificate.\n\n            ', title: Certificateselfsigned, type: boolean}\n        CertificateSignerArn: {description: \"Certificate signer ARN. \\n\", title: Certificatesignerarn,\n          type: string}\n        Description: {description: 'A description of certificate object.\n\n            ', title: Description, type: string}\n        UpdateToken: {description: 'Refresh token.\n\n            ', title: Updatetoken, type: string}\n      title: CertificateDetails\n      type: object\n    DescribeCertificateObjectResponse.ResponseData:\n      additionalProperties: false\n      properties:\n        CertificateObjectCandidate: {$ref: '#/components/schemas/DescribeCertificateObjectResponse.CertificateDetails',\n          description: 'The certificate object candidate.\n\n            '}\n        CertificateObjectRunning: {$ref: '#/components/schemas/DescribeCertificateObjectResponse.CertificateDetails',\n          description: 'The certificate objects on run state.\n\n            '}\n        Name: {description: \"Name of the certificate object entry.    \\n\", title: Name,\n          type: string}\n        RuleStackName: {description: \"Name of the rulestack. \\n\", title: Rulestackname,\n          type: string}\n      title: ResponseData\n      type: object\n    DescribeCertificateObjectResponse.Result:\n      additionalProperties: false\n      properties:\n        ErrorCode: {default: 0, description: \"Default value of a successful response\\\n            \\ is 0. Any other number indicates an error code.  \\n\\n400\\u2014HTTP bad\\\n            \\ request\\n* InvalidRequestException\\u2014Operation failed due to invalid\\\n            \\ request. For example, unsupported parameter name or value in the request.\\n\\\n            * LimitExceededException\\u2014Operation failed due to violation in limit\\\n            \\ settings.\\n* ThrottlingException\\u2014Operation failed due to throttling\\\n            \\ limitations.\\n* AccessDeniedException\\u2014You do not have sufficient\\\n            \\ access to perform this action.\\n\\n500\\u2014Bad request \\n* InternalServerError\\u2014\\\n            Your request is valid but Cloud NGFW could not perform the operation due\\\n            \\ to a system issue.\\n* InsufficientCapacityException\\u2014AWS currently\\\n            \\ does not have enough capacity to fulfill your request.\\n\", title: Errorcode,\n          type: integer}\n        Reason: {description: 'The error description.\n\n            ', title: Reason, type: string}\n      title: Result\n      type: object\n    ListCertificateObjectResponse:\n      additionalProperties: false\n      properties:\n        Response: {$ref: '#/components/schemas/ListCertificateObjectResponse.ResponseData',\n          description: 'The API call response.\n\n            '}\n        ResponseStatus: {$ref: '#/components/schemas/ListCertificateObjectResponse.Result',\n          description: 'The API call response status.\n\n            '}\n      title: ListCertificateObjectResponse\n      type: object\n    ListCertificateObjectResponse.ResponseData:\n      additionalProperties: false\n      properties:\n        CertificateObjectCandidate:\n          description: 'certificate object candidate.\n\n            '\n          items: {type: string}\n          title: Certificateobjectcandidate\n          type: array\n        CertificateObjectRunning:\n          description: 'certificate objects on run state.\n\n            '\n          items: {type: string}\n          title: Certificateobjectrunning\n          type: array\n        CertificateObjectUncommitted:\n          description: 'Uncommitted certificate objects.\n\n            '\n          items: {$ref: '#/components/schemas/ListCertificateObjectResponse.UncommittedCertificateObjectDetails'}\n          title: Certificateobjectuncommitted\n          type: array\n        NextToken: {description: 'If the number of certificate objects available for\n            retrieval exceeds the maximum you requested, NGFW returns a NextToken\n            value in response. To retrieve the next batch of certificate objects,\n            use this token in your next request.\n\n            ', maxLength: 2048, minLength: 1, pattern: '^[-0-9A-Za-z:\\/+=]+$', title: Nexttoken,\n          type: string}\n        RuleStackName: {description: 'Name of the rulestack.\n\n            ', title: Rulestackname, type: string}\n      title: ResponseData\n      type: object\n    ListCertificateObjectResponse.Result:\n      additionalProperties: false\n      properties:\n        ErrorCode: {default: 0, description: \"Default value of a successful response\\\n            \\ is 0. Any other number indicates an error code.  \\n\\n400\\u2014HTTP bad\\\n            \\ request\\n* InvalidRequestException\\u2014Operation failed due to invalid\\\n            \\ request. For example, unsupported parameter name or value in the request.\\n\\\n            * ResourceNotFoundException\\u2014Unable to locate a resource using the\\\n            \\ parameters you provided.\\n* ThrottlingException\\u2014Operation failed\\\n            \\ due to throttling limitations.\\n\\n500\\u2014Bad request \\n* InternalServerError\\u2014\\\n            Your request is valid but Cloud NGFW could not perform the operation due\\\n            \\ to a system issue.\\n\", title: Errorcode, type: integer}\n        Reason: {description: \"The error description. \\n\", title: Reason, type: string}\n      title: Result\n      type: object\n    ListCertificateObjectResponse.UncommittedCertificateObjectDetails:\n      additionalProperties: false\n      properties:\n        Name: {description: 'Name of the certificate object.\n\n            ', maxLength: 128, minLength: 1, pattern: '^[a-zA-Z0-9-]+$', title: Name,\n          type: string}\n        Operation: {description: 'Certificate object operation.\n\n            ', title: Operation, type: string}\n      required: [Name, Operation]\n      title: UncommittedCertificateObjectDetails\n      type: object\n    UpdateCertificateObjectRequest:\n      additionalProperties: false\n      properties:\n        AuditComment: {description: 'Audit remarks.\n\n            ', maxLength: 512, title: Auditcomment, type: string}\n        CertificateSelfSigned: {default: false, description: 'A self-signed root CA\n            certificate.\n\n            ', title: Certificateselfsigned, type: boolean}\n        CertificateSignerArn: {description: \"Certificate Signer ARN \\n\", title: Certificatesignerarn,\n          type: string}\n        Description: {description: 'A description of certificate object.\n\n            ', maxLength: 512, title: Description, type: string}\n        UpdateToken: {description: 'Refresh token.\n\n            ', title: Updatetoken, type: string}\n      title: UpdateCertificateObjectRequest\n      type: object\n    UpdateCertificateObjectResponse:\n      additionalProperties: false\n      properties:\n        Response: {$ref: '#/components/schemas/UpdateCertificateObjectResponse.ResponseData',\n          description: 'The API call response.\n\n            '}\n        ResponseStatus: {$ref: '#/components/schemas/UpdateCertificateObjectResponse.Result',\n          description: 'The API call response status.\n\n            '}\n      title: UpdateCertificateObjectResponse\n      type: object\n    UpdateCertificateObjectResponse.CertificateDetails:\n      additionalProperties: false\n      properties:\n        AuditComment: {description: 'Audit remarks.\n\n            ', title: Auditcomment, type: string}\n        CertificateSelfSigned: {description: 'A self-signed root CA certificate.\n\n            ', title: Certificateselfsigned, type: boolean}\n        CertificateSignerArn: {description: 'Certificate signer ARN.\n\n            ', title: Certificatesignerarn, type: string}\n        Description: {description: 'A description of certificate object.\n\n            ', title: Description, type: string}\n        UpdateToken: {description: \"Refresh token.    \\n\", title: Updatetoken, type: string}\n      title: CertificateDetails\n      type: object\n    UpdateCertificateObjectResponse.ResponseData:\n      additionalProperties: false\n      properties:\n        CertificateObjectEntry: {$ref: '#/components/schemas/UpdateCertificateObjectResponse.CertificateDetails',\n          description: 'The certificate object entry.\n\n            '}\n        Name: {description: \"Name of the certificate object entry.    \\n\", title: Name,\n          type: string}\n        RuleStackName: {description: \"Name of the rulestack. \\n\", title: Rulestackname,\n          type: string}\n      title: ResponseData\n      type: object\n    UpdateCertificateObjectResponse.Result:\n      additionalProperties: false\n      properties:\n        ErrorCode: {default: 0, description: \"Default value of a successful response\\\n            \\ is 0. Any other number indicates an error code.  \\n\\n400\\u2014HTTP bad\\\n            \\ request\\n* InvalidRequestException\\u2014Operation failed due to invalid\\\n            \\ request. For example, unsupported parameter name or value in the request.\\n\\\n            * LimitExceededException\\u2014Operation failed due to violation in limit\\\n            \\ settings.\\n* ThrottlingException\\u2014Operation failed due to throttling\\\n            \\ limitations.\\n* AccessDeniedException\\u2014You do not have sufficient\\\n            \\ access to perform this action.\\n\\n500\\u2014Bad request \\n* InternalServerError\\u2014\\\n            Your request is valid but Cloud NGFW could not perform the operation due\\\n            \\ to a system issue.\\n* InsufficientCapacityException\\u2014AWS currently\\\n            \\ does not have enough capacity to fulfill your request.\\n\", title: Errorcode,\n          type: integer}\n        Reason: {description: 'The error description.\n\n            ', title: Reason, type: string}\n      title: Result\n      type: object\ninfo:\n  contact: {}\n  description: \"Cloud NGFW uses certificates to access an intelligent feed and to\\\n    \\ enable outbound decryption. These certificates are stored in the [AWS Secrets\\\n    \\ Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html).\\\n    \\ \\n\"\n  title: Manage Certificate Objects\n  version: 1.0.0\nopenapi: 3.0.3\npaths:\n  /v1/config/rulestacks/{rulestackname}/certificates:\n    get:\n      description: 'Returns the list of certificate objects associated with the specified\n        rulestack.\n\n        '\n      operationId: get-v1-config-rulestacks-rulestackname-certificates\n      parameters:\n      - description: 'The name of the rulestack.\n\n          '\n        in: path\n        name: rulestackname\n        required: true\n        schema: {type: string}\n      - description: 'If the number of certificate objects available for retrieval\n          exceeds the maximum you requested, NGFW returns a NextToken value in response.\n          To retrieve the next batch of certificate objects, use this token in your\n          next request.\n\n          '\n        in: query\n        name: nexttoken\n        required: false\n        schema: {maxLength: 2048, minLength: 1, pattern: '^[-0-9A-Za-z:\\/+=]+$', title: Nexttoken,\n          type: string}\n      - description: 'Certificate object candidate.\n\n          '\n        in: query\n        name: candidate\n        required: false\n        schema: {default: true, title: Candidate, type: boolean}\n      - description: 'Certificate objects in run state.\n\n          '\n        in: query\n        name: running\n        required: false\n        schema: {default: false, title: Running, type: boolean}\n      - description: 'Uncommitted certificate objects.\n\n          '\n        in: query\n        name: uncommitted\n        required: false\n        schema: {default: false, title: Uncommitted, type: boolean}\n      - description: 'The maximum number of certificate objects that you want NGFW\n          to return for this request.\n\n          '\n        in: query\n        name: maxresults\n        required: false\n        schema: {default: 1024, maximum: 1024, minimum: 1, title: Maxresults, type: integer}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/ListCertificateObjectResponse'}\n          description: OK\n      summary: List CertificateObjects\n      tags: [ManageCertificateObjects]\n    post:\n      description: 'Create a server certificate object for the specified rulestack.\n\n        '\n      operationId: post-v1-config-rulestacks-rulestackname-certificates\n      parameters:\n      - description: 'The name of the rulestack.\n\n          '\n        in: path\n        name: rulestackname\n        required: true\n        schema: {type: string}\n      requestBody:\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/CreateCertificateObjectRequest'}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/CreateCertificateObjectResponse'}\n          description: OK\n      summary: Create a CertificateObject\n      tags: [ManageCertificateObjects]\n  /v1/config/rulestacks/{rulestackname}/certificates/{name}:\n    delete:\n      description: 'Delete a certificate object associated with the specified rulestack.\n\n        '\n      operationId: delete-v1-config-rulestacks-rulestackname-certificates-name\n      parameters:\n      - description: 'The name of the rulestack.\n\n          '\n        in: path\n        name: rulestackname\n        required: true\n        schema: {type: string}\n      - description: 'The name of the certificate.\n\n          '\n        in: path\n        name: name\n        required: true\n        schema: {type: string}\n      requestBody:\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/DeleteCertificateObjectRequest'}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/DeleteCertificateObjectResponse'}\n          description: OK\n      summary: Delete a CertificateObject\n      tags: [ManageCertificateObjects]\n    get:\n      description: \"Returns the certificate object metadata associated with the specified\\\n        \\ rulestack. \\n\"\n      operationId: get-v1-config-rulestacks-rulestackname-certificates-name\n      parameters:\n      - description: 'The name of the rulestack.\n\n          '\n        in: path\n        name: rulestackname\n        required: true\n        schema: {type: string}\n      - description: 'The name of the certificate.\n\n          '\n        in: path\n        name: name\n        required: true\n        schema: {type: string}\n      requestBody:\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/DescribeCertificateObjectRequest'}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/DescribeCertificateObjectResponse'}\n          description: OK\n      summary: Describe a CertificateObject\n      tags: [ManageCertificateObjects]\n    put:\n      description: 'Update the certificate object associated with the specified rulestack.\n\n        '\n      operationId: put-v1-config-rulestacks-rulestackname-certificates-name\n      parameters:\n      - description: 'The name of the rulestack.\n\n          '\n        in: path\n        name: rulestackname\n        required: true\n        schema: {type: string}\n      - description: 'The name of the certificate.\n\n          '\n        in: path\n        name: name\n        required: true\n        schema: {type: string}\n      requestBody:\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/UpdateCertificateObjectRequest'}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/UpdateCertificateObjectResponse'}\n          description: OK\n      summary: Update a CertificateObject\n      tags: [ManageCertificateObjects]\nservers:\n- {url: 'https://api.us-east-1.aws.cloudngfw.paloaltonetworks.com'}\ntags:\n- {name: ManageCertificateObjects}\n"
		}
	},
	"Error": "unmarshal: callback: json: cannot unmarshal number into Go struct field Schema.exclusiveMaximum of type bool"
}