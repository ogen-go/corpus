{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/openapi-generator"
		},
		"file": {
			"name": "petstore-with-fake-endpoints-models-for-testing.yaml",
			"size": 0,
			"path": "modules/openapi-generator/src/test/resources/3_0/javascript/petstore-with-fake-endpoints-models-for-testing.yaml",
			"byteSize": 49113,
			"content": "openapi: 3.0.0\ninfo:\n  description: \u003e-\n    This spec is mainly for testing Petstore server and contains fake endpoints,\n    models. Please do not use this for any other purpose. Special characters: \"\n    \\\n  version: 1.0.0\n  title: OpenAPI Petstore\n  license:\n    name: Apache-2.0\n    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: pet\n    description: Everything about your Pets\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\npaths:\n  /foo:\n    get:\n      responses:\n        default:\n          description: response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  string:\n                    $ref: '#/components/schemas/Foo'\n  /pet:\n    servers:\n    - url: 'http://petstore.swagger.io/v2'\n    - url: 'http://path-server-test.petstore.local/v2'\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: ''\n      operationId: addPet\n      responses:\n        '200':\n          description: Successful operation\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: ''\n      operationId: updatePet\n      x-webclient-blocking: true\n      responses:\n        '200':\n          description: Successful operation\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      x-webclient-blocking: true\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          style: form\n          explode: false\n          deprecated: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid status value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: \u003e-\n        Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      x-webclient-blocking: true\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n            uniqueItems: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n                uniqueItems: true\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n                uniqueItems: true\n        '400':\n          description: Invalid tag value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      deprecated: true\n  '/pet/{petId}':\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      x-webclient-blocking: true\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - api_key: []\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Successful operation\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: ''\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Successful operation\n        '400':\n          description: Invalid pet value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  '/pet/{petId}/uploadImage':\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      description: ''\n      operationId: uploadFile\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                additionalMetadata:\n                  description: Additional data to pass to server\n                  type: string\n                file:\n                  description: file to upload\n                  type: string\n                  format: binary\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n      security:\n        - api_key: []\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: ''\n      operationId: placeOrder\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '400':\n          description: Invalid Order\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Order'\n        description: order placed for purchasing the pet\n        required: true\n  '/store/order/{order_id}':\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: \u003e-\n        For valid response try integer IDs with value \u003c= 5 or \u003e 10. Other values\n        will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: order_id\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 5\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: \u003e-\n        For valid response try integer IDs with value \u003c 1000. Anything above\n        1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: order_id\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Created user object\n        required: true\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithArrayInput\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        $ref: '#/components/requestBodies/UserArray'\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithListInput\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        $ref: '#/components/requestBodies/UserArray'\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: ''\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  '/user/{username}':\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: ''\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be fetched. Use user1 for testing.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Updated user object\n        required: true\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n  /fake_classname_test:\n    patch:\n      tags:\n        - 'fake_classname_tags 123#$%^'\n      summary: To test class name in snake case\n      description: To test class name in snake case\n      operationId: testClassname\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n      security:\n        - api_key_query: []\n      requestBody:\n        $ref: '#/components/requestBodies/Client'\n  /fake:\n    patch:\n      tags:\n        - fake\n      summary: To test \"client\" model\n      description: To test \"client\" model\n      operationId: testClientModel\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n      requestBody:\n        $ref: '#/components/requestBodies/Client'\n    get:\n      tags:\n        - fake\n      summary: To test enum parameters\n      description: To test enum parameters\n      operationId: testEnumParameters\n      parameters:\n        - name: enum_header_string_array\n          in: header\n          description: Header parameter enum test (string array)\n          schema:\n            type: array\n            items:\n              type: string\n              default: $\n              enum:\n                - '\u003e'\n                - $\n        - name: enum_header_string\n          in: header\n          description: Header parameter enum test (string)\n          schema:\n            type: string\n            enum:\n              - _abc\n              - '-efg'\n              - (xyz)\n            default: '-efg'\n        - name: enum_query_string_array\n          in: query\n          description: Query parameter enum test (string array)\n          schema:\n            type: array\n            items:\n              type: string\n              default: $\n              enum:\n                - '\u003e'\n                - $\n        - name: enum_query_string\n          in: query\n          description: Query parameter enum test (string)\n          schema:\n            type: string\n            enum:\n              - _abc\n              - '-efg'\n              - (xyz)\n            default: '-efg'\n        - name: enum_query_integer\n          in: query\n          description: Query parameter enum test (double)\n          schema:\n            type: integer\n            format: int32\n            enum:\n              - 1\n              - -2\n        - name: enum_query_double\n          in: query\n          description: Query parameter enum test (double)\n          schema:\n            type: number\n            format: double\n            enum:\n              - 1.1\n              - -1.2\n        - name: enum_query_model_array\n          in: query\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/EnumClass'\n      responses:\n        '400':\n          description: Invalid request\n        '404':\n          description: Not found\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                enum_form_string_array:\n                  description: Form parameter enum test (string array)\n                  type: array\n                  items:\n                    type: string\n                    default: $\n                    enum:\n                      - '\u003e'\n                      - $\n                enum_form_string:\n                  description: Form parameter enum test (string)\n                  type: string\n                  enum:\n                    - _abc\n                    - '-efg'\n                    - (xyz)\n                  default: '-efg'\n    post:\n      tags:\n        - fake\n      summary: |\n        Fake endpoint for testing various parameters\n        假端點\n        偽のエンドポイント\n        가짜 엔드 포인트\n      description: |\n        Fake endpoint for testing various parameters\n        假端點\n        偽のエンドポイント\n        가짜 엔드 포인트\n      operationId: testEndpointParameters\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n      security:\n        - http_basic_test: []\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                integer:\n                  description: None\n                  type: integer\n                  minimum: 10\n                  maximum: 100\n                int32:\n                  description: None\n                  type: integer\n                  format: int32\n                  minimum: 20\n                  maximum: 200\n                int64:\n                  description: None\n                  type: integer\n                  format: int64\n                number:\n                  description: None\n                  type: number\n                  minimum: 32.1\n                  maximum: 543.2\n                float:\n                  description: None\n                  type: number\n                  format: float\n                  maximum: 987.6\n                double:\n                  description: None\n                  type: number\n                  format: double\n                  minimum: 67.8\n                  maximum: 123.4\n                string:\n                  description: None\n                  type: string\n                  pattern: '/[a-z]/i'\n                pattern_without_delimiter:\n                  description: None\n                  type: string\n                  pattern: '^[A-Z].*'\n                byte:\n                  description: None\n                  type: string\n                  format: byte\n                binary:\n                  description: None\n                  type: string\n                  format: binary\n                date:\n                  description: None\n                  type: string\n                  format: date\n                dateTime:\n                  description: None\n                  type: string\n                  format: date-time\n                password:\n                  description: None\n                  type: string\n                  format: password\n                  minLength: 10\n                  maxLength: 64\n                callback:\n                  description: None\n                  type: string\n              required:\n                - number\n                - double\n                - pattern_without_delimiter\n                - byte\n    delete:\n      tags:\n        - fake\n      security:\n        - bearer_test: []\n      summary: Fake endpoint to test group parameters (optional)\n      description: Fake endpoint to test group parameters (optional)\n      operationId: testGroupParameters\n      x-group-parameters: true\n      parameters:\n        - name: required_string_group\n          in: query\n          description: Required String in group parameters\n          required: true\n          schema:\n            type: integer\n        - name: required_boolean_group\n          in: header\n          description: Required Boolean in group parameters\n          required: true\n          schema:\n            type: boolean\n        - name: required_int64_group\n          in: query\n          description: Required Integer in group parameters\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: string_group\n          in: query\n          description: String in group parameters\n          schema:\n            type: integer\n        - name: boolean_group\n          in: header\n          description: Boolean in group parameters\n          schema:\n            type: boolean\n        - name: int64_group\n          in: query\n          description: Integer in group parameters\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: Someting wrong\n  /fake/outer/number:\n    post:\n      tags:\n        - fake\n      description: Test serialization of outer number types\n      operationId: fakeOuterNumberSerialize\n      responses:\n        '200':\n          description: Output number\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/OuterNumber'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OuterNumber'\n        description: Input number as post body\n  /fake/property/enum-int:\n    post:\n      tags:\n        - fake\n      description: Test serialization of enum (int) properties with examples\n      operationId: fakePropertyEnumIntegerSerialize\n      responses:\n        '200':\n          description: Output enum (int)\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/OuterObjectWithEnumProperty'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OuterObjectWithEnumProperty'\n        description: Input enum (int) as post body\n  /fake/outer/string:\n    post:\n      tags:\n        - fake\n      description: Test serialization of outer string types\n      operationId: fakeOuterStringSerialize\n      responses:\n        '200':\n          description: Output string\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/OuterString'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OuterString'\n        description: Input string as post body\n  /fake/outer/boolean:\n    post:\n      tags:\n        - fake\n      description: Test serialization of outer boolean types\n      operationId: fakeOuterBooleanSerialize\n      responses:\n        '200':\n          description: Output boolean\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/OuterBoolean'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OuterBoolean'\n        description: Input boolean as post body\n  /fake/outer/composite:\n    post:\n      tags:\n        - fake\n      description: Test serialization of object with outer number type\n      operationId: fakeOuterCompositeSerialize\n      responses:\n        '200':\n          description: Output composite\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/OuterComposite'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OuterComposite'\n        description: Input composite as post body\n  /fake/jsonFormData:\n    get:\n      tags:\n        - fake\n      summary: test json serialization of form data\n      description: ''\n      operationId: testJsonFormData\n      responses:\n        '200':\n          description: successful operation\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                param:\n                  description: field1\n                  type: string\n                param2:\n                  description: field2\n                  type: string\n              required:\n                - param\n                - param2\n  /fake/inline-additionalProperties:\n    post:\n      tags:\n        - fake\n      summary: test inline additionalProperties\n      description: ''\n      operationId: testInlineAdditionalProperties\n      responses:\n        '200':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n        description: request body\n        required: true\n  /fake/body-with-query-params:\n    put:\n      tags:\n        - fake\n      operationId: testBodyWithQueryParams\n      parameters:\n        - name: query\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n  /another-fake/dummy:\n    patch:\n      tags:\n        - $another-fake?\n      summary: To test special tags\n      description: To test special tags and operation ID starting with number\n      operationId: '123_test_@#$%_special_tags'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n      requestBody:\n        $ref: '#/components/requestBodies/Client'\n  /fake/body-with-file-schema:\n    put:\n      tags:\n        - fake\n      description: \u003e-\n        For this test, the body for this request must reference a schema named\n        `File`.\n      operationId: testBodyWithFileSchema\n      responses:\n        '200':\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FileSchemaTestClass'\n        required: true\n  /fake/body-with-binary:\n    put:\n      tags:\n        - fake\n      description: \u003e-\n        For this test, the body has to be a binary file.\n      operationId: testBodyWithBinary\n      responses:\n        '200':\n          description: Success\n      requestBody:\n        content:\n          image/png:\n            schema:\n              type: string\n              nullable: true\n              format: binary\n        description: image to upload\n        required: true\n  /fake/test-query-parameters:\n    put:\n      tags:\n        - fake\n      description: To test the collection format in query parameters\n      operationId: testQueryParameterCollectionFormat\n      parameters:\n        - name: pipe\n          in: query\n          required: true\n          style: pipeDelimited\n          schema:\n            type: array\n            items:\n              type: string\n        - name: ioutil\n          in: query\n          required: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: http\n          in: query\n          required: true\n          style: spaceDelimited\n          schema:\n            type: array\n            items:\n              type: string\n        - name: url\n          in: query\n          required: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: context\n          in: query\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: language\n          in: query\n          required: false\n          schema:\n            type: object\n            additionalProperties:\n              type: string\n              format: string\n        - name: allowEmpty\n          in: query\n          required: true\n          allowEmptyValue: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n  '/fake/{petId}/uploadImageWithRequiredFile':\n    post:\n      tags:\n        - pet\n      summary: uploads an image (required)\n      description: ''\n      operationId: uploadFileWithRequiredFile\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                additionalMetadata:\n                  description: Additional data to pass to server\n                  type: string\n                requiredFile:\n                  description: file to upload\n                  type: string\n                  format: binary\n              required:\n                - requiredFile\n  /fake/health:\n    get:\n      tags:\n        - fake\n      summary: Health check endpoint\n      responses:\n        200:\n          description: The instance started successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthCheckResult'\n  /fake/http-signature-test:\n    get:\n      tags:\n        - fake\n      summary: test http signature authentication\n      operationId: fake-http-signature-test\n      parameters:\n        - name: query_1\n          in: query\n          description: query parameter\n          required: optional\n          schema:\n            type: string\n        - name: header_1\n          in: header\n          description: header parameter\n          required: optional\n          schema:\n            type: string\n      security:\n        - http_signature_test: []\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n      responses:\n        200:\n          description: The instance started successfully\nservers:\n  - url: 'http://{server}.swagger.io:{port}/v2'\n    description: petstore server\n    variables:\n      server:\n        enum:\n          - 'petstore'\n          - 'qa-petstore'\n          - 'dev-petstore'\n        default: 'petstore'\n      port:\n        enum:\n          - 80\n          - 8080\n        default: 80\n  - url: https://localhost:8080/{version}\n    description: The local server\n    variables:\n      version:\n        enum:\n          - 'v1'\n          - 'v2'\n        default: 'v2'\n  - url: https://127.0.0.1/no_varaible\n    description: The local server without variables\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/User'\n      description: List of user object\n      required: true\n    Client:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Client'\n      description: client model\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Pet'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/Pet'\n      description: Pet object that needs to be added to the store\n      required: true\n  securitySchemes:\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'\n          scopes:\n            'write:pets': modify pets in your account\n            'read:pets': read your pets\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    api_key_query:\n      type: apiKey\n      name: api_key_query\n      in: query\n    http_basic_test:\n      type: http\n      scheme: basic\n    bearer_test:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    http_signature_test:\n      type: http\n      scheme: signature\n  schemas:\n    Foo:\n      type: object\n      properties:\n        bar:\n          $ref: '#/components/schemas/Bar'\n    Bar:\n      type: string\n      default: bar\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    Category:\n      type: object\n      required:\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n          default: default-name\n      xml:\n        name: Category\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          x-is-unique: true\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n          x-is-unique: true\n        category:\n          $ref: '#/components/schemas/Category'\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n          uniqueItems: true\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Tag'\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n    Return:\n      description: Model for testing reserved words\n      properties:\n        return:\n          type: integer\n          format: int32\n      xml:\n        name: Return\n    Name:\n      description: Model for testing model name same as property name\n      required:\n        - name\n      properties:\n        name:\n          type: integer\n          format: int32\n        snake_case:\n          readOnly: true\n          type: integer\n          format: int32\n        property:\n          type: string\n        123Number:\n          type: integer\n          readOnly: true\n      xml:\n        name: Name\n    200_response:\n      description: Model for testing model name starting with number\n      properties:\n        name:\n          type: integer\n          format: int32\n        class:\n          type: string\n      xml:\n        name: Name\n    ClassModel:\n      description: Model for testing model with \"_class\" property\n      properties:\n        _class:\n          type: string\n    Dog:\n      allOf:\n        - $ref: '#/components/schemas/Animal'\n        - type: object\n          properties:\n            breed:\n              type: string\n    Cat:\n      allOf:\n        - $ref: '#/components/schemas/Animal'\n        - type: object\n          properties:\n            declawed:\n              type: boolean\n    Animal:\n      type: object\n      discriminator:\n        propertyName: className\n      required:\n        - className\n      properties:\n        className:\n          type: string\n        color:\n          type: string\n          default: red\n    AnimalFarm:\n      type: array\n      items:\n        $ref: '#/components/schemas/Animal'\n    format_test:\n      type: object\n      required:\n        - number\n        - byte\n        - date\n        - password\n      properties:\n        integer:\n          type: integer\n          maximum: 100\n          minimum: 10\n        int32:\n          type: integer\n          format: int32\n          maximum: 200\n          minimum: 20\n        int64:\n          type: integer\n          format: int64\n        number:\n          maximum: 543.2\n          minimum: 32.1\n          type: number\n        float:\n          type: number\n          format: float\n          maximum: 987.6\n          minimum: 54.3\n        double:\n          type: number\n          format: double\n          maximum: 123.4\n          minimum: 67.8\n        decimal:\n          type: string\n          format: number\n        string:\n          type: string\n          pattern: '/[a-z]/i'\n        byte:\n          type: string\n          format: byte\n        binary:\n          type: string\n          format: binary\n        date:\n          type: string\n          format: date\n        dateTime:\n          type: string\n          format: date-time\n        uuid:\n          type: string\n          format: uuid\n          example: 72f98069-206d-4f12-9f12-3d1e525a8e84\n        password:\n          type: string\n          format: password\n          maxLength: 64\n          minLength: 10\n        pattern_with_digits:\n          description: A string that is a 10 digit number. Can have leading zeros.\n          type: string\n          pattern: '^\\d{10}$'\n        pattern_with_digits_and_delimiter:\n          description: A string starting with 'image_' (case insensitive) and one to three digits following i.e. Image_01.\n          type: string\n          pattern: '/^image_\\d{1,3}$/i'\n    EnumClass:\n      type: string\n      default: '-efg'\n      enum:\n        - _abc\n        - '-efg'\n        - (xyz)\n    Enum_Test:\n      type: object\n      required:\n        - enum_string_required\n      properties:\n        enum_string:\n          type: string\n          enum:\n            - UPPER\n            - lower\n            - ''\n        enum_string_required:\n          type: string\n          enum:\n            - UPPER\n            - lower\n            - ''\n        enum_integer:\n          type: integer\n          format: int32\n          enum:\n            - 1\n            - -1\n        enum_number:\n          type: number\n          format: double\n          enum:\n            - 1.1\n            - -1.2\n        outerEnum:\n          $ref: '#/components/schemas/OuterEnum'\n        outerEnumInteger:\n          $ref: '#/components/schemas/OuterEnumInteger'\n        outerEnumDefaultValue:\n          $ref: '#/components/schemas/OuterEnumDefaultValue'\n        outerEnumIntegerDefaultValue:\n          $ref: '#/components/schemas/OuterEnumIntegerDefaultValue'\n    AdditionalPropertiesClass:\n      type: object\n      properties:\n        map_property:\n          type: object\n          additionalProperties:\n            type: string\n        map_of_map_property:\n          type: object\n          additionalProperties:\n            type: object\n            additionalProperties:\n              type: string\n    MixedPropertiesAndAdditionalPropertiesClass:\n      type: object\n      properties:\n        uuid:\n          type: string\n          format: uuid\n        dateTime:\n          type: string\n          format: date-time\n        map:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Animal'\n    List:\n      type: object\n      properties:\n        123-list:\n          type: string\n    Client:\n      type: object\n      properties:\n        client:\n          type: string\n    ReadOnlyFirst:\n      type: object\n      properties:\n        bar:\n          type: string\n          readOnly: true\n        baz:\n          type: string\n    hasOnlyReadOnly:\n      type: object\n      properties:\n        bar:\n          type: string\n          readOnly: true\n        foo:\n          type: string\n          readOnly: true\n    Capitalization:\n      type: object\n      properties:\n        smallCamel:\n          type: string\n        CapitalCamel:\n          type: string\n        small_Snake:\n          type: string\n        Capital_Snake:\n          type: string\n        SCA_ETH_Flow_Points:\n          type: string\n        ATT_NAME:\n          description: |\n            Name of the pet\n          type: string\n    MapTest:\n      type: object\n      properties:\n        map_map_of_string:\n          type: object\n          additionalProperties:\n            type: object\n            additionalProperties:\n              type: string\n        map_of_enum_string:\n          type: object\n          additionalProperties:\n            type: string\n            enum:\n              - UPPER\n              - lower\n        direct_map:\n          type: object\n          additionalProperties:\n            type: boolean\n        indirect_map:\n          $ref: '#/components/schemas/StringBooleanMap'\n    ArrayTest:\n      type: object\n      properties:\n        array_of_string:\n          type: array\n          items:\n            type: string\n          minItems: 0\n          maxItems: 3\n        array_array_of_integer:\n          type: array\n          items:\n            type: array\n            items:\n              type: integer\n              format: int64\n        array_array_of_model:\n          type: array\n          items:\n            type: array\n            items:\n              $ref: '#/components/schemas/ReadOnlyFirst'\n    NumberOnly:\n      type: object\n      properties:\n        JustNumber:\n          type: number\n    ArrayOfNumberOnly:\n      type: object\n      properties:\n        ArrayNumber:\n          type: array\n          items:\n            type: number\n    ArrayOfArrayOfNumberOnly:\n      type: object\n      properties:\n        ArrayArrayNumber:\n          type: array\n          items:\n            type: array\n            items:\n              type: number\n    EnumArrays:\n      type: object\n      properties:\n        just_symbol:\n          type: string\n          enum:\n            - '\u003e='\n            - $\n        array_enum:\n          type: array\n          items:\n            type: string\n            enum:\n              - fish\n              - crab\n    OuterEnum:\n      nullable: true\n      type: string\n      enum:\n        - placed\n        - approved\n        - delivered\n    OuterEnumInteger:\n      type: integer\n      enum:\n      - 0\n      - 1\n      - 2\n      example: 2\n    OuterEnumDefaultValue:\n      type: string\n      enum:\n      - placed\n      - approved\n      - delivered\n      default: placed\n    OuterEnumIntegerDefaultValue:\n      type: integer\n      enum:\n      - 0\n      - 1\n      - 2\n      default: 0\n    OuterComposite:\n      type: object\n      properties:\n        my_number:\n          $ref: '#/components/schemas/OuterNumber'\n        my_string:\n          $ref: '#/components/schemas/OuterString'\n        my_boolean:\n          $ref: '#/components/schemas/OuterBoolean'\n    OuterNumber:\n      type: number\n    OuterString:\n      type: string\n    OuterBoolean:\n      type: boolean\n      x-codegen-body-parameter-name: boolean_post_body\n    StringBooleanMap:\n      additionalProperties:\n        type: boolean\n    FileSchemaTestClass:\n      type: object\n      properties:\n        file:\n          $ref: '#/components/schemas/File'\n        files:\n          type: array\n          items:\n            $ref: '#/components/schemas/File'\n    File:\n      type: object\n      description: Must be named `File` for test.\n      properties:\n        sourceURI:\n          description: Test capitalization\n          type: string\n    _special_model.name_:\n      properties:\n        '$special[property.name]':\n          type: integer\n          format: int64\n      xml:\n        name: '$special[model.name]'\n    HealthCheckResult:\n      type: object\n      properties:\n        NullableMessage:\n          nullable: true\n          type: string\n      description: Just a string to inform instance is up and running. Make it nullable in hope to get it as pointer in generated model.\n    NullableClass:\n      type: object\n      properties:\n        integer_prop:\n          type: integer\n          nullable: true\n        number_prop:\n          type: number\n          nullable: true\n        boolean_prop:\n          type: boolean\n          nullable: true\n        string_prop:\n          type: string\n          nullable: true\n        date_prop:\n          type: string\n          format: date\n          nullable: true\n        datetime_prop:\n          type: string\n          format: date-time\n          nullable: true\n        array_nullable_prop:\n          type: array\n          nullable: true\n          items:\n            type: object\n        array_and_items_nullable_prop:\n          type: array\n          nullable: true\n          items:\n            type: object\n            nullable: true\n        array_items_nullable:\n          type: array\n          items:\n            type: object\n            nullable: true\n        object_nullable_prop:\n          type: object\n          nullable: true\n          additionalProperties:\n            type: object\n        object_and_items_nullable_prop:\n          type: object\n          nullable: true\n          additionalProperties:\n            type: object\n            nullable: true\n        object_items_nullable:\n          type: object\n          additionalProperties:\n            type: object\n            nullable: true\n      additionalProperties:\n        type: object\n        nullable: true\n    OuterObjectWithEnumProperty:\n      type: object\n      example:\n        value: 2\n      required:\n        - value\n      properties:\n        value:\n          $ref: '#/components/schemas/OuterEnumInteger'\n    DeprecatedObject:\n      type: object\n      deprecated: true\n      properties:\n        name:\n          type: string\n    ObjectWithDeprecatedFields:\n      type: object\n      properties:\n        uuid:\n          type: string\n        id:\n          type: number\n          deprecated: true\n        deprecatedRef:\n          $ref: '#/components/schemas/DeprecatedObject'\n        bars:\n          type: array\n          deprecated: true\n          items:\n            $ref: '#/components/schemas/Bar'\n",
			"canonicalURL": "/github.com/OpenAPITools/openapi-generator@ac7ebf67dd67e4a347fa142aa6a95ab12f0198de/-/blob/modules/openapi-generator/src/test/resources/3_0/javascript/petstore-with-fake-endpoints-models-for-testing.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenAPITools/openapi-generator/blob/ac7ebf67dd67e4a347fa142aa6a95ab12f0198de/modules/openapi-generator/src/test/resources/3_0/javascript/petstore-with-fake-endpoints-models-for-testing.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!str `optional` into bool; yaml: line 1: cannot unmarshal !!str `optional` into bool"
}