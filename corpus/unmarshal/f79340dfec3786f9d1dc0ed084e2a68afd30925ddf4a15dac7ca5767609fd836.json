{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vrchatapi/specification"
		},
		"file": {
			"name": "playermoderation.yaml",
			"size": 0,
			"path": "openapi/components/paths/playermoderation.yaml",
			"byteSize": 4759,
			"content": "openapi: 3.0.3\ninfo:\n  title: playermoderation\n  version: '1.0'\n  description: Player Moderation Docs\npaths:\n  /auth/user/playermoderations:\n    get:\n      summary: Search Player Moderations\n      tags:\n        - playermoderation\n      responses:\n        '200':\n          $ref: ../responses/playermoderation/PlayerModerationListResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n      operationId: getPlayerModerations\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: type\n          description: 'Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block.'\n        - schema:\n            type: string\n          in: query\n          name: sourceUserId\n          description: Must be valid UserID. Trying to view someone else's moderations results with \"Can't view someone else's player moderations\" error.\n          x-internal: true\n        - schema:\n            type: string\n          in: query\n          name: targetUserId\n          description: Must be valid UserID.\n      description: |-\n        Returns a list of all player moderations made by **you**.\n\n        This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.\n    post:\n      summary: Moderate User\n      operationId: moderateUser\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      responses:\n        '200':\n          $ref: ../responses/playermoderation/PlayerModerationResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../requests/ModerateUserRequest.yaml\n        description: ''\n      description: 'Moderate a user, e.g. unmute them or show their avatar.'\n      tags:\n        - playermoderation\n    delete:\n      summary: Clear All Player Moderations\n      operationId: clearAllPlayerModerations\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      responses:\n        '200':\n          $ref: ../responses/playermoderation/PlayerModerationClearAllSuccess.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n      description: ⚠️ **This will delete every single player moderation you've ever made.**\n      tags:\n        - playermoderation\n  /auth/user/unplayermoderate:\n    put:\n      summary: Unmoderate User\n      operationId: unmoderateUser\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../requests/ModerateUserRequest.yaml\n      description: 'Removes a player moderation previously added through `moderateUser`. E.g if you previously have shown their avatar, but now want to reset it to default.'\n      responses:\n        '200':\n          $ref: ../responses/playermoderation/PlayerModerationUnmoderatedSuccess.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n      tags:\n        - playermoderation\n  '/auth/user/playermoderations/{playerModerationId}':\n    get:\n      summary: Get Player Moderation\n      tags:\n        - playermoderation\n      responses:\n        '200':\n          $ref: ../responses/playermoderation/PlayerModerationResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n        '404':\n          $ref: ../responses/playermoderation/PlayerModerationNotFoundError.yaml\n      operationId: getPlayerModeration\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: Returns a single Player Moderation. This returns the exact same amount of information as the more generalised `getPlayerModerations`.\n    delete:\n      summary: Delete Player Moderation\n      operationId: deletePlayerModeration\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      responses:\n        '200':\n          $ref: ../responses/playermoderation/PlayerModerationRemovedSuccess.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n        '403':\n          $ref: ../responses/playermoderation/PlayerModerationDeleteOthersError.yaml\n      description: Deletes a specific player moderation based on it's `pmod_` ID. The website uses `unmoderateUser` instead. You can delete the same player moderation multiple times successfully.\n      tags:\n        - playermoderation\n    parameters:\n      - schema:\n          type: string\n        name: playerModerationId\n        in: path\n        required: true\ntags:\n  $ref: ../tags.yaml\ncomponents:\n  securitySchemes:\n    $ref: ../securitySchemes.yaml"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal string into Go struct field Components.components.securitySchemes of type ogen.SecuritySchema"
}