{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/livechat/livechat-public-docs"
		},
		"file": {
			"name": "spec.yml",
			"size": 0,
			"path": "src/configs/redoc/global-accounts-api/spec.yml",
			"byteSize": 68562,
			"content": "openapi: 3.0.0\ninfo:\n  title: Global Accounts API\n  description: \u003e-\n    API used to manage Organizations and Accounts for multiple products. Also\n    responsible for authorization and authentication processes.\n  version: 2.0.0\nservers:\n  - url: https://accounts.livechat.com/v2\n    description: Main production server URL\npaths:\n  /accounts:\n    get:\n      summary: List accounts\n      description: \u003e-\n        Accounts are listed by using `organization_id` obtained from the access\n        token. The `accounts.roles--all:ro` scope is required for listing\n        accounts along with their roles.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - accounts--all:ro\n            - accounts.roles--all:ro\n      tags:\n        - Accounts\n      responses:\n        '200':\n          description: 'OK: Returns the list of accounts.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - \u0026ref_2\n                      description: \u003e-\n                        An entity of the account, used across all LiveChat\n                        products\n                      type: object\n                      required:\n                        - email\n                      properties:\n                        account_id:\n                          type: string\n                          format: uuid\n                          readOnly: true\n                          description: Unique account identifier\n                          example: 496a94f2-cbbf-444e-a3cb-305b9f5f8cbb\n                        name:\n                          type: string\n                          description: Account name (nick; first, second name; or both)\n                          example: John\n                          exclusiveMaximum: false\n                          maxLength: 191\n                        email: \u0026ref_15\n                          type: string\n                          format: email\n                          description: Account's email address\n                          example: john@example.com\n                          exclusiveMaximum: false\n                          maxLength: 128\n                        email_verified:\n                          type: boolean\n                          readOnly: true\n                          description: \u003e-\n                            Specifies if an email was verified. (The account\n                            performed an email action or was validated by a\n                            third-party identity provider.)\n                          example: false\n                        default_product: \u0026ref_0\n                          type: string\n                          description: Available product name\n                          example: Accounts\n                          enum:\n                            - LiveChat\n                            - Accounts\n                        default_organization_id:\n                          type: string\n                          format: uuid\n                          description: ID of default organization the account belongs to.\n                          example: b2185556-634c-4ecf-b4c9-bcf8b65bc853\n                          default: null\n                          nullable: true\n                        avatar_url:\n                          type: string\n                          description: Account's avatar\n                          example: null\n                          default: null\n                          nullable: true\n                          exclusiveMaximum: false\n                          maxLength: 255\n                        roles:\n                          type: array\n                          items: \u0026ref_3\n                            description: \u003e-\n                              Role groups account scopes into one permission\n                              entity.\n                            type: object\n                            properties:\n                              role_id:\n                                type: string\n                                description: Unique role definition ID\n                                example: 728b99be-848c-11ea-9b91-005056a007e9\n                              product: *ref_0\n                              role:\n                                type: string\n                                description: \u003e-\n                                  Role name; one of predefined roles or a custom\n                                  name for a custom role.\n                                example: administrator\n                                enum:\n                                  - owner\n                                  - viceowner\n                                  - administrator\n                                  - normal\n                                  - member\n                              type:\n                                type: string\n                                readOnly: true\n                                description: \u003e-\n                                  There are three role types: `primary` – an\n                                  obligatory Accounts role, `secondary` – a\n                                  basic product role, and `custom` – a\n                                  customly-defined role.\n                                example: primary\n                              predefined:\n                                readOnly: true\n                                type: boolean\n                                description: \u003e-\n                                  If `true`, the role is common across all\n                                  organizations. If `false`, the role is defined\n                                  per organization.\n                                example: true\n                          description: \u003e-\n                            Array of account roles; returned only when the\n                            access token contains the `accounts.roles--all:ro`\n                            scope.\n                        updated_at:\n                          readOnly: true\n                          type: string\n                          format: date-time\n                          description: Date of the account's last update\n                          example: 2019-09-03T10:53:04.000Z\n                        created_at:\n                          readOnly: true\n                          type: string\n                          format: date-time\n                          description: Date of the account's creation\n                          example: 2019-09-03T10:53:04.000Z\n                    - type: object\n                      properties:\n                        properties:\n                          type: object\n                          description: \u003e-\n                            Nullable object that contains an account properties\n                            and statuses.\n                          properties:\n                            active:\n                              type: boolean\n                              description: \u003e-\n                                Shows if an account already logged into the\n                                organization.\n                              example: true\n                            mfa:\n                              type: boolean\n                              description: Shows if an account has MFA turned on.\n                              example: true\n                            productName:\n                              type: object\n                              description: Specific product properties.\n                              properties:\n                                suspended:\n                                  type: boolean\n                                  description: \u003e-\n                                    Shows if an account is suspended in specific\n                                    product.\n                                  example: true\n        '401':\n          description: Unauthorized, missing, or invalid authorization.\n          content:\n            application/json:\n              schema: \u0026ref_4\n                allOf:\n                  - \u0026ref_1\n                    description: Default error object\n                    type: object\n                    properties:\n                      error:\n                        type: string\n                        example: unauthorized\n                        enum:\n                          - bad_request\n                          - invalid_request\n                          - unauthorized_client\n                          - access_denied\n                          - unsupported_response_type\n                          - invalid_scope\n                          - server_error\n                          - temporarily_unavailable\n                          - unsupported_grant_type\n                          - invalid_grant\n                          - invalid_client\n                          - forbidden\n                          - conflict\n                          - resource_not_found\n                      error_description:\n                        type: string\n                        example: The account is not authorized.\n                      request_id:\n                        type: string\n                        format: uuid\n                        example: 5903c51b-89f0-41a9-a25d-4f39af100353\n                  - type: object\n                    properties:\n                      error:\n                        type: string\n                        example: unauthorized\n                      error_description:\n                        type: string\n                        example: The account is not authorized.\n        '403':\n          description: 'Forbidden: Insufficient scope.'\n          content:\n            application/json:\n              schema: \u0026ref_5\n                allOf:\n                  - *ref_1\n                  - type: object\n                    properties:\n                      error:\n                        type: string\n                        example: access_denied\n                      sub_error:\n                        type: string\n                        example: insufficient_scope\n                      error_description:\n                        type: string\n                        example: \u003e-\n                          The resource owner or authorization server denied the\n                          request.\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: \u0026ref_6\n                allOf:\n                  - *ref_1\n                  - type: object\n                    properties:\n                      error:\n                        type: string\n                        example: server_error\n                      error_description:\n                        type: string\n                        example: \u003e-\n                          The server encountered an unexpected condition that\n                          prevented it from fulfilling the request.\n    post:\n      tags:\n        - Accounts\n      summary: Create a new account\n      description: \u003e-\n        Create an account for a given `organization_id`. This endpoint is\n        idempotent. The `accounts.roles--all:rw` scope is required to create an\n        account with a role.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - accounts--all:rw\n            - accounts--all:rc\n            - accounts.roles--all:rw\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              allOf:\n                - *ref_2\n                - type: object\n                  properties:\n                    email:\n                      required: true\n                    password: \u0026ref_12\n                      type: string\n                      writeOnly: true\n                      exclusiveMaximum: false\n                      maxLength: 255\n                      exclusiveMinimum: false\n                      minLength: 8\n                      example: BG0SaleEBL\n                      description: Password for a given account\n                    roles:\n                      type: array\n                      items:\n                        description: \u003e-\n                          The list of role definitions, which will be set for\n                          the account.\n                        type: object\n                        oneOf: \u0026ref_10\n                          - allOf:\n                              - *ref_3\n                              - type: object\n                                properties:\n                                  role_id:\n                                    readOnly: true\n                                required:\n                                  - role_id\n                          - allOf:\n                              - *ref_3\n                              - type: object\n                                properties:\n                                  product:\n                                    readOnly: true\n                                  role:\n                                    readOnly: true\n                                required:\n                                  - product\n                                  - role\n      responses:\n        '200':\n          description: 'OK: Returns the already existing account.'\n          content:\n            application/json:\n              schema: *ref_2\n        '201':\n          description: 'OK: Returns the created account.'\n          content:\n            application/json:\n              schema: *ref_2\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema: \u0026ref_8\n                allOf:\n                  - *ref_1\n                  - type: object\n                    properties:\n                      error:\n                        type: string\n                        example: bad_request\n                      error_description:\n                        type: string\n                        example: \u003e-\n                          The server cannot or will not process the request due\n                          to an apparent client error (for example, malformed\n                          request syntax, size too large).\n        '401':\n          description: Unauthorized, missing, or invalid authorization.\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: 'Forbidden: Insufficient scope.'\n          content:\n            application/json:\n              schema: *ref_5\n        '409':\n          description: \u003e-\n            Conflict: The account already exists in a different organization.\n            This constraint is temporary.\n          content:\n            application/json:\n              schema: \u0026ref_13\n                allOf:\n                  - *ref_1\n                  - type: object\n                    properties:\n                      error:\n                        type: string\n                        example: conflict\n                      error_description:\n                        type: string\n                        example: \u003e-\n                          The request couldn't be processed because of conflict\n                          in the current state of the resource.\n        '422':\n          description: 'Validation error: Invalid email address, name too long, etc.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - \u0026ref_7\n                    allOf:\n                      - *ref_1\n                      - type: object\n                        properties:\n                          error:\n                            type: string\n                            example: invalid_request\n                          error_description:\n                            type: string\n                            example: \u003e-\n                              The request is missing a required parameter,\n                              includes an invalid parameter value, includes a\n                              parameter more than once, or is otherwise\n                              malformed.\n                  - type: object\n                    properties:\n                      invalid_fields:\n                        type: object\n                        properties:\n                          email:\n                            type: string\n                            example: value too long\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n  /accounts/{account_id}:\n    get:\n      summary: Get an account\n      description: \u003e-\n        Get an account for a given `account_id`. The ID can be replaced with\n        `me` to get the account that performs the request. To get an account\n        along with its role, the `accounts--my:ro` scope is required \n        when using `me` and the `accounts--all:ro` scope when using the ID.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - accounts--my:ro\n            - accounts--all:ro\n      tags:\n        - Accounts\n      parameters:\n        - in: path\n          name: account_id\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: Unique account ID or `me`.\n      responses:\n        '200':\n          description: 'OK: Returns the account.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_2\n                  - type: object\n                    properties:\n                      properties:\n                        type: object\n                        description: \u003e-\n                          Nullable object that contains account properties and\n                          statuses.\n                        properties:\n                          active:\n                            type: boolean\n                            description: \u003e-\n                              Shows if an account is already logged into the\n                              organization.\n                            example: true\n                          mfa:\n                            type: boolean\n                            description: Shows if an account has MFA turned on.\n                            example: true\n                          productName:\n                            type: object\n                            description: Specific product properties.\n                            properties:\n                              suspended:\n                                type: boolean\n                                description: \u003e-\n                                  Shows if an account is suspended in a specific\n                                  product.\n                                example: true\n        '401':\n          description: Unauthorized, missing, or invalid authorization\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: 'Forbidden: Insufficient scope'\n          content:\n            application/json:\n              schema: *ref_5\n        '404':\n          description: 'Not found: The account doesn''t exist.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - \u0026ref_9\n                    allOf:\n                      - *ref_1\n                      - type: object\n                        properties:\n                          error:\n                            type: string\n                            example: resource_not_found\n                          error_description:\n                            type: string\n                            example: The requested resource couldn't be found.\n                  - type: object\n                    properties:\n                      resource_name:\n                        type: string\n                        example: account\n                      resource_id:\n                        type: string\n                        format: uuid\n                        example: def31e95-5ca4-4817-b176-732e4544daca\n        '422':\n          description: 'Validation error: Invalid uuid'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_7\n                  - type: object\n                    properties:\n                      invalid_fields:\n                        type: object\n                        properties:\n                          account_id:\n                            type: string\n                            example: invalid uuid\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n    patch:\n      tags:\n        - Accounts\n      summary: Update an account\n      description: \u003e-\n        Update an account for a given `account_id`. The ID can be replaced with\n        `me` to update the account that performs the request. To set a role for\n        an account, you need the `accounts.roles--all:rw` scope.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - accounts--all:rw\n            - accounts.roles--all:rw\n      parameters:\n        - in: path\n          name: account_id\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: Unique account ID or `me`\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              allOf:\n                - *ref_2\n                - type: object\n                  properties:\n                    email:\n                      readOnly: true\n                    roles:\n                      readOnly: true\n      responses:\n        '200':\n          description: 'OK: Returns the updated account.'\n          content:\n            application/json:\n              schema: *ref_2\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema: *ref_8\n        '401':\n          description: Unauthorized, missing, or invalid authorization.\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: 'Forbidden: Insufficient scope.'\n          content:\n            application/json:\n              schema: *ref_5\n        '404':\n          description: 'Not found: The account doesn''t exist.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_9\n                  - type: object\n                    properties:\n                      resource_name:\n                        type: string\n                        example: account\n                      resource_id:\n                        type: string\n                        format: uuid\n                        example: def31e95-5ca4-4817-b176-732e4544daca\n        '422':\n          description: 'Validation error: Invalid email address, name too long, etc.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_7\n                  - type: object\n                    properties:\n                      invalid_fields:\n                        type: object\n                        properties:\n                          account_id:\n                            type: string\n                            example: value too long\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n    delete:\n      tags:\n        - Accounts\n      summary: Delete an account\n      description: \u003e-\n        Deletes an account for a given `account_id`. The ID can be replaced with\n        `me` to delete the account that performs the request.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - accounts--my:rw\n      parameters:\n        - in: path\n          name: account_id\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: Unique account ID or `me`.\n      responses:\n        '200':\n          description: 'OK: Returns no content.'\n        '401':\n          description: Unauthorized, missing, or invalid authorization\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: 'Forbidden: Insufficient scope.'\n          content:\n            application/json:\n              schema: *ref_5\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_9\n                  - type: object\n                    properties:\n                      resource_name:\n                        type: string\n                        example: account\n                      resource_id:\n                        type: string\n                        format: uuid\n                        example: def31e95-5ca4-4817-b176-732e4544daca\n        '422':\n          description: 'Validation error: Invalid email address, name too long, etc.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_7\n                  - type: object\n                    properties:\n                      invalid_fields:\n                        type: object\n                        properties:\n                          account_id:\n                            type: string\n                            example: value too long\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n  /accounts/{account_id}/roles:\n    put:\n      summary: Set account roles\n      description: \u003e-\n        Set or delete roles for a given `account_id`. Set overwrites a role\n        group in case of conflicts.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - accounts.roles--all:rw\n      tags:\n        - Accounts\n      parameters:\n        - in: path\n          name: account_id\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: Unique account ID or `me`.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                set_roles:\n                  type: array\n                  items: \u0026ref_11\n                    type: object\n                    oneOf: *ref_10\n                  description: \u003e-\n                    The list of role definitions that will be set for the\n                    account.\n                delete_roles:\n                  type: array\n                  items: *ref_11\n                  description: \u003e-\n                    The list of role definitions that will be deleted from the\n                    account.\n      responses:\n        '200':\n          description: 'OK: Returns the updated account.'\n          content:\n            application/json:\n              schema: *ref_2\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema: *ref_8\n        '401':\n          description: Unauthorized, missing, or invalid authorization.\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: 'Forbidden: Insufficient scope.'\n          content:\n            application/json:\n              schema: *ref_5\n        '404':\n          description: 'Not found: Account ID or role ID were not found.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_9\n                  - type: object\n                    properties:\n                      resource_name:\n                        type: string\n                        example: account\n                      resource_id:\n                        type: string\n                        format: uuid\n                        example: def31e95-5ca4-4817-b176-732e4544daca\n        '422':\n          description: 'Validation error: Invalid uuid, etc.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_7\n                  - type: object\n                    properties:\n                      invalid_fields:\n                        type: object\n                        properties:\n                          account_id:\n                            type: string\n                            example: value too long\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n  /accounts/{account_id}/password/reset:\n    post:\n      summary: Set a password\n      description: \u003e-\n        This method sets a new password. A successful call revokes all session\n        tokens. It's possible to set a password for other accounts only when\n        they belong to a single organization.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - accounts.password--my:rw\n      tags:\n        - Accounts\n      parameters:\n        - in: path\n          name: account_id\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: Unique account ID or `me`.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                password: *ref_12\n              required:\n                - password\n      responses:\n        '200':\n          description: 'OK: Returns an empty object.'\n          content:\n            application/json:\n              schema: *ref_2\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema: *ref_8\n        '401':\n          description: Unauthorized, missing, or invalid authorization.\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: 'Forbidden: Insufficient scope.'\n          content:\n            application/json:\n              schema: *ref_5\n        '404':\n          description: 'Not found: The account ID was not found.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_9\n                  - type: object\n                    properties:\n                      resource_name:\n                        type: string\n                        example: account\n                      resource_id:\n                        type: string\n                        format: uuid\n                        example: def31e95-5ca4-4817-b176-732e4544daca\n        '409':\n          description: 'Conflict: The account is assigned to more than one organization.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_13\n                  - type: object\n                    properties:\n                      resource_name:\n                        type: string\n                        example: account\n                      resource_id:\n                        type: string\n                        format: uuid\n                        example: def31e95-5ca4-4817-b176-732e4544daca\n        '422':\n          description: 'Validation error: Invalid uuid, etc.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_7\n                  - type: object\n                    properties:\n                      invalid_fields:\n                        type: object\n                        properties:\n                          account_id:\n                            type: string\n                            example: value too long\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n  /accounts/invitations:\n    get:\n      summary: Get account invitations\n      description: \u003e-\n        This method gets all invitations issued within an organization. If the\n        `email` parameter is provided, it returns only the invitations sent for\n        the account assigned with the `email` (within the requester's\n        organization).\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - accounts.invitations--all:ro\n      tags:\n        - Accounts\n      parameters:\n        - in: path\n          name: email\n          schema:\n            type: string\n            format: email\n          description: Email address of the invited account.\n      responses:\n        '200':\n          description: 'OK: Returns a list of account invitations.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  description: An entity of the account invitation.\n                  type: object\n                  required:\n                    - email\n                  properties:\n                    invitation_id:\n                      type: string\n                      format: uuid\n                      readOnly: true\n                      description: Unique account invitation identifier.\n                      example: 496a94f2-cbbf-444e-a3cb-305b9f5f8cbb\n                    name:\n                      type: string\n                      description: \u003e-\n                        Invited account's name (nick; first, second name; or\n                        both). If the invitation was issued to an existing\n                        account, this parameter will be replaced with the\n                        existing name.\n                      example: John\n                      exclusiveMaximum: false\n                      maxLength: 191\n                    email:\n                      type: string\n                      format: email\n                      description: Invited account's email address.\n                      example: john@example.com\n                      exclusiveMaximum: false\n                      maxLength: 128\n                    product:\n                      type: string\n                      readOnly: true\n                      description: Specifies to which product the account is invited.\n                      example: false\n                    creator_id:\n                      type: string\n                      format: uuid\n                      readOnly: true\n                      description: Unique account identifier which created an invitation.\n                      example: 496a94f2-cbbf-444e-a3cb-305b9f5f8cbb\n                    organization_id:\n                      type: string\n                      format: uuid\n                      description: ID of the organization to which the account is invited.\n                      example: b2185556-634c-4ecf-b4c9-bcf8b65bc853\n                      default: null\n                      nullable: true\n                    updated_at:\n                      readOnly: true\n                      type: string\n                      format: date-time\n                      description: Date of the account's invitation's last update.\n                      example: 2019-09-03T10:53:04.000Z\n                    created_at:\n                      readOnly: true\n                      type: string\n                      format: date-time\n                      description: Date of the account's invitation's creation.\n                      example: 2019-09-03T10:53:04.000Z\n        '401':\n          description: Unauthorized, missing, or invalid authorization.\n          content:\n            application/json:\n              schema: *ref_4\n        '422':\n          description: 'Validation error: Invalid email, etc.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_7\n                  - type: object\n                    properties:\n                      invalid_fields:\n                        type: object\n                        properties:\n                          email:\n                            type: string\n                            example: invalid email address\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n    post:\n      summary: Create an account invitation\n      description: \u003e-\n        Create an account invitation for the given `email`, `organization_id`,\n        and `product`. After the successful creation, it sends an email to all\n        users with the invitation approval scopes, informing them about the new\n        account awaiting the approval. `organization_id` and `creator_id` are\n        retrieved from the access token.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - accounts.invitations--my:rw\n      tags:\n        - Accounts\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  description: Email address of the invited account.\n                  example: john@example.com\n                name:\n                  type: string\n                  description: \u003e-\n                    Name of the invited account (nick; first, second name; or\n                    both). If an invitation was issued to an existing account,\n                    this field will be replaced with the name assigned to that\n                    account.\n                  example: John\n                product:\n                  type: string\n                  description: The product to which an account is invited.\n                  example: LiveChat\n      responses:\n        '200':\n          description: 'OK: Returns an existing account''s invitation ID.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  invitation_id:\n                    type: string\n                    format: uuid\n                    description: Unique account invitation identifier.\n                    example: 496a94f2-cbbf-444e-a3cb-305b9f5f8cbb\n        '201':\n          description: 'Created: Account invitation was created.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  invitation_id:\n                    type: string\n                    format: uuid\n                    description: Unique account invitation identifier.\n                    example: 496a94f2-cbbf-444e-a3cb-305b9f5f8cbb\n        '400':\n          description: \u003e-\n            Bad Request: Invalid request; the invitation name for the new\n            account is empty.\n          content:\n            application/json:\n              schema: *ref_8\n        '401':\n          description: Unauthorized, missing, or invalid authorization.\n          content:\n            application/json:\n              schema: *ref_4\n        '409':\n          description: 'Conflict: Account already added to the product.'\n          content:\n            application/json:\n              schema: *ref_13\n        '422':\n          description: 'Validation error: Invalid email, etc.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_7\n                  - type: object\n                    properties:\n                      invalid_fields:\n                        type: object\n                        properties:\n                          email:\n                            type: string\n                            example: invalid email address\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n  /accounts/invitations/{invitation_id}:\n    put:\n      summary: Approve an account invitation\n      description: Approve an account invitation.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - \u003e-\n              accounts.invitations--all:rw (allows to approve invitations for\n              all products)\n            - accounts.invitations.lc--all:rw (for LC invitations)\n            - accounts.invitations.hd--all:rw (for HD invitations)\n      tags:\n        - Accounts\n      parameters:\n        - in: path\n          name: invitation_id\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: Unique account invitation ID.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                role:\n                  type: string\n                  description: The approved account's role in a given product.\n                  example: administrator\n      responses:\n        '200':\n          description: 'OK: Returns the account ID.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  account_id:\n                    type: string\n                    format: uuid\n                    description: Unique account identifier\n                    example: 496a94f2-cbbf-444e-a3cb-305b9f5f8cbb\n        '400':\n          description: \u003e-\n            Bad Request: Invalid request; the invitation name for the new\n            account is empty.\n          content:\n            application/json:\n              schema: *ref_8\n        '401':\n          description: Unauthorized, missing, or invalid authorization.\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: \u003e-\n            Forbidden: Invalid organization; the scope is invalid, unknown, or\n            malformed.\n          content:\n            application/json:\n              schema: *ref_5\n        '404':\n          description: Requested resource (account invitation) could not be found.\n          content:\n            application/json:\n              schema: *ref_9\n        '409':\n          description: \u003e-\n            Conflict: Account is already added to the product; invalid product\n            subscription.\n          content:\n            application/json:\n              schema: *ref_13\n        '422':\n          description: 'Validation error: Invalid email, etc.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_7\n                  - type: object\n                    properties:\n                      invalid_fields:\n                        type: object\n                        properties:\n                          email:\n                            type: string\n                            example: invalid email address\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n    delete:\n      summary: Decline an account invitation\n      description: Decline and delete an account invitation.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - \u003e-\n              accounts.invitations--all:rw (allows to decline invitations for\n              all products)\n            - accounts.invitations.lc--all:rw (for LC invitations)\n            - accounts.invitations.hd--all:rw (for HD invitations)\n      tags:\n        - Accounts\n      parameters:\n        - in: path\n          name: invitation_id\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: Unique account invitation ID\n      responses:\n        '204':\n          description: 'No Content: Account invitation was deleted.'\n        '401':\n          description: Unauthorized, missing, or invalid authorization.\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: \u003e-\n            Forbidden: Invalid organization; the scope is invalid, unknown, or\n            malformed.\n          content:\n            application/json:\n              schema: *ref_5\n        '404':\n          description: Requested resource (account invitation) could not be found.\n          content:\n            application/json:\n              schema: *ref_9\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n  /roles:\n    get:\n      summary: List roles\n      description: \u003e-\n        List the roles available for an organization. The result combines\n        predefined and user-defined roles.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - accounts.roles--all:ro\n      tags:\n        - Roles\n      responses:\n        '200':\n          description: 'OK: Returns the list of roles.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items: *ref_3\n        '401':\n          description: Unauthorized, missing, or invalid authorization\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: 'Forbidden: Insufficient scope'\n          content:\n            application/json:\n              schema: *ref_5\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n  /roles/{role_id}:\n    get:\n      summary: Get a role\n      description: \u003e-\n        Get a single role for a given `role_id`. The role is returned with the\n        scopes assigned to it.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - accounts.roles--all:ro\n      tags:\n        - Roles\n      parameters:\n        - in: path\n          name: role_id\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: Unique role ID\n      responses:\n        '200':\n          description: 'OK: Returns the role.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_3\n                  - type: object\n                    properties:\n                      scope:\n                        type: string\n                        description: \u003e-\n                          Scopes assigned to the role, separated by a comma\n                          (`,`)\n                        example: accounts--all:rw,accounts.roles--all:ro\n        '401':\n          description: Unauthorized, missing, or invalid authorization\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: 'Forbidden: Insufficient scope'\n          content:\n            application/json:\n              schema: *ref_5\n        '404':\n          description: 'Not found: The role doesn''t exist.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_9\n                  - type: object\n                    properties:\n                      resource_name:\n                        type: string\n                        example: role\n                      resource_id:\n                        type: string\n                        format: uuid\n                        example: 97f365b7-5e7d-4e6d-bf48-ef7bb96580a4\n        '422':\n          description: 'Validation error: Invalid uuid'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_7\n                  - type: object\n                    properties:\n                      invalid_fields:\n                        type: object\n                        properties:\n                          role_id:\n                            type: string\n                            example: invalid uuid\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n    delete:\n      summary: Delete a role\n      description: \u003e-\n        Delete a single role for a given `role_id`. Only the `custom` role can\n        be deleted. All tokens related to a given role will be revoked.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - accounts.roles--all:rw\n      tags:\n        - Roles\n      parameters:\n        - in: path\n          name: role_id\n          schema:\n            type: string\n          required: true\n          description: Unique role ID\n      responses:\n        '200':\n          description: 'OK: Returns no content.'\n        '401':\n          description: Unauthorized, missing or invalid authorization\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: 'Forbidden: Insufficient scope'\n          content:\n            application/json:\n              schema: *ref_5\n        '404':\n          description: 'Not found: The role doesn''t exist.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_9\n                  - type: object\n                    properties:\n                      resource_name:\n                        type: string\n                        example: role\n                      resource_id:\n                        type: string\n                        format: uuid\n                        example: 97f365b7-5e7d-4e6d-bf48-ef7bb96580a4\n        '422':\n          description: 'Validation error: Invalid uuid'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_7\n                  - type: object\n                    properties:\n                      invalid_fields:\n                        type: object\n                        properties:\n                          role_id:\n                            type: string\n                            example: invalid uuid\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n  /sessions:\n    get:\n      summary: List sessions\n      description: \u003e-\n        Returns all sessions for a given account ID. The account ID is obtained\n        from an authorization grant.\n      security:\n        - OAuth2 Bearer Token:\n            - sessions--my:ro\n      tags:\n        - Sessions\n      responses:\n        '200':\n          description: 'OK: Returns the list of sessions.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  description: Scope describe user single permission\n                  type: object\n                  properties:\n                    account_id:\n                      type: string\n                      format: uuid\n                      description: Unique account identifier\n                      example: 28df1a50-84fa-490c-9615-5b77d507c393\n                      readOnly: true\n                    session_id: \u0026ref_14\n                      type: string\n                      format: uuid\n                      description: Unique session identifier\n                      example: bfeeb033-bc8e-467f-982d-22dcef274fa1\n                      readOnly: true\n                    current:\n                      type: boolean\n                      description: \u003e-\n                        Returns `true` if the access token that was used to\n                        request the data belongs to the current session.\n                      example: true\n                      readOnly: true\n                    user_agent:\n                      type: string\n                      description: \u003e-\n                        Name of the user agent (device) on which the session was\n                        established.\n                      example: \u003e-\n                        Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:69.0)\n                        Gecko/20100101 Firefox/69.0\n                      readOnly: true\n                    identity_source:\n                      type: string\n                      description: Type of identity source\n                      enum:\n                        - credentials\n                        - explicit\n                        - google\n                        - token\n                        - microsoft\n                        - apple\n                      example: credentials\n                      readOnly: true\n                    ip:\n                      type: string\n                      description: \u003e-\n                        IP address of the computer on which the session was\n                        established.\n                      example: 194.181.146.158\n                      readOnly: true\n                    applications:\n                      type: array\n                      items:\n                        description: Basic information about application\n                        properties:\n                          name:\n                            type: string\n                            readOnly: true\n                            example: LiveChat Application\n                          client_id:\n                            type: string\n                            readOnly: true\n                            example: 238ac4c3c3628880aca289c6d700d2c5\n                          session_id: *ref_14\n        '401':\n          description: Unauthorized, missing or invalid authorization\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: 'Forbidden: Insufficient scope'\n          content:\n            application/json:\n              schema: *ref_5\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n    delete:\n      summary: Remove all sessions\n      description: \u003e-\n        Removes all sessions for a given account ID. The account ID is obtained\n        from an authorization grant. It's impossible to remove a session for\n        other accounts. All access tokens related to the sessions will be\n        revoked.\n      security:\n        - OAuth2 Bearer Token:\n            - sessions-my:rw\n      tags:\n        - Sessions\n      responses:\n        '200':\n          description: 'OK: Returns no content.'\n        '401':\n          description: Unauthorized, missing or invalid authorization\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: 'Forbidden: Insufficient scope'\n          content:\n            application/json:\n              schema: *ref_5\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n  /sessions/{session_id}:\n    delete:\n      summary: Remove a session\n      description: \u003e-\n        Removes a specific session for a given account ID. The account ID is\n        obtained from an authorization grant. It's impossible to remove a\n        session for other accounts. All access tokens related to the sessions\n        will be revoked.\n      security:\n        - OAuth2 Bearer Token:\n            - sessions--my:rw\n      tags:\n        - Sessions\n      parameters:\n        - in: path\n          name: session_id\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: Unique session ID\n      responses:\n        '200':\n          description: 'OK: Returns no content.'\n        '401':\n          description: Unauthorized, missing or invalid authorization\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: 'Forbidden: Insufficient scope'\n          content:\n            application/json:\n              schema: *ref_5\n        '404':\n          description: 'Not found: The session doesn''t exist'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_9\n                  - type: object\n                    properties:\n                      resource_name:\n                        type: string\n                        example: session\n                      resource_id:\n                        type: string\n                        format: uuid\n                        example: b68698d6-fdac-4fb5-9ac1-017cf13ca221\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n  /organizations:\n    get:\n      tags:\n        - Organizations\n      summary: List organizations\n      description: \u003e-\n        Lists all organizations that an account belongs to, based on\n        authorization.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token: null\n      responses:\n        '200':\n          description: 'OK: Returns organizations.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items: \u0026ref_16\n                  description: \u003e-\n                    Organization groups accounts into a single unit. Each\n                    organization must contain at least one account and one\n                    owner. An account can be assigned to many organizations at\n                    once. The default organization is the first assigned to a\n                    given account.\n                  type: object\n                  properties:\n                    organization_id:\n                      type: string\n                      format: uuid\n                      readOnly: true\n                      description: Unique organization identifier\n                      example: 59aa5076-13c5-4ce5-b13a-07d33e838acf\n                    name:\n                      type: string\n                      description: Organization name\n                      example: Organization Name\n                      exclusiveMaximum: false\n                      maxLength: 127\n                    company:\n                      description: Basic company information\n                      type: object\n                      properties:\n                        phone:\n                          type: string\n                          description: Company phone number\n                          example: +48 123 456 789\n                          exclusiveMaximum: false\n                          maxLength: 20\n                        website:\n                          type: string\n                          description: Primary company website\n                          example: example.com\n                          exclusiveMaximum: false\n                          maxLength: 255\n        '401':\n          description: Unauthorized, missing, or invalid authorization\n          content:\n            application/json:\n              schema: *ref_4\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n    post:\n      tags:\n        - Organizations\n      summary: Create an organization\n      description: \u003e-\n        Creates an organization and an account. Calling this endpoint won't\n        result in email notifications. Alternatively, you can use Bearer/Basic\n        authorization instead of creating a new account for an organization; it\n        will create a new organization for the account associated with the\n        token.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                email: *ref_15\n                password: *ref_12\n                organization: *ref_16\n              required:\n                - email\n      responses:\n        '200':\n          description: 'OK: Returns the account and the organization.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_2\n                  - type: object\n                    properties:\n                      organization: *ref_16\n                      access_token:\n                        type: string\n                        example: dal:eDqDuTRZoK03C3rzD2dcfA==\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema: *ref_8\n        '409':\n          description: 'Conflict: The account already exists.'\n          content:\n            application/json:\n              schema: *ref_13\n        '422':\n          description: 'Validation error: Invalid email address, name too long, etc.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_7\n                  - type: object\n                    properties:\n                      invalid_fields:\n                        type: object\n                        properties:\n                          email:\n                            type: string\n                            example: invalid email format\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n  /organizations/{organization_id}:\n    get:\n      summary: Get an organization\n      description: \u003e-\n        Returns a single organization for a given organization ID. The ID can be\n        replaced with `me` to get the account that sends the request.\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token: null\n      tags:\n        - Organizations\n      parameters:\n        - in: path\n          name: organization_id\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: Unique account ID or `me`\n      responses:\n        '200':\n          description: 'OK: Returns the organization.'\n          content:\n            application/json:\n              schema: *ref_16\n        '401':\n          description: Unauthorized, missing, or invalid authorization.\n          content:\n            application/json:\n              schema: *ref_4\n        '404':\n          description: 'Not found: The organization doesn''t exist.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_9\n                  - type: object\n                    properties:\n                      resource_name:\n                        type: string\n                        example: organization\n                      resource_id:\n                        type: string\n                        format: uuid\n                        example: def31e95-5ca4-4817-b176-732e4544daca\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n    patch:\n      tags:\n        - Organizations\n      summary: Update an organization\n      description: Updates an organization\n      security:\n        - Personal Access Token: null\n        - OAuth2 Bearer Token:\n            - organization--my:rw\n      parameters:\n        - in: path\n          name: organization_id\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: Unique account ID or `me`\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: *ref_16\n      responses:\n        '200':\n          description: 'OK: Returns the updated organization.'\n          content:\n            application/json:\n              schema: *ref_16\n        '401':\n          description: Unauthorized, missing, or invalid authorization\n          content:\n            application/json:\n              schema: *ref_4\n        '403':\n          description: 'Forbidden: Insufficient scope'\n          content:\n            application/json:\n              schema: *ref_5\n        '404':\n          description: 'Not found: The organization doesn''t exist.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_9\n                  - type: object\n                    properties:\n                      resource_name:\n                        type: string\n                        example: organization\n                      resource_id:\n                        type: string\n                        format: uuid\n                        example: def31e95-5ca4-4817-b176-732e4544daca\n        '422':\n          description: 'Validation error: Name too long, etc.'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - *ref_7\n                  - type: object\n                    properties:\n                      invalid_fields:\n                        type: object\n                        properties:\n                          name:\n                            type: string\n                            example: value too long\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema: *ref_6\n  /info:\n    get:\n      summary: Get token details\n      description: \u003e-\n        Some access tokens are paired with a refresh token. The access token can\n        be provided via authorization or a query string.\n      security:\n        - OAuth2 Bearer Token: null\n      parameters:\n        - in: query\n          name: code\n          schema:\n            type: string\n            example: fra-a:vky95357S7KM1E4dXwv1DQ\n      tags:\n        - Tokens\n      responses:\n        '200':\n          description: 'OK: Returns token details.'\n          content:\n            application/json:\n              schema:\n                description: OAuth 2 `Bearer` token\n                type: object\n                properties:\n                  access_token:\n                    type: string\n                    description: Access token value\n                    example: fra-a:vky95357S7KM1E4dXwv1DQ\n                  account_id:\n                    type: string\n                    format: uuid\n                    description: Account ID for which the token was issued\n                    example: 28df1a50-84fa-490c-9615-5b77d507c393\n                  expires_in:\n                    type: integer\n                    format: uint64\n                    description: Access token lifetime (in seconds)\n                    example: 432000\n                  organization_id:\n                    type: string\n                    format: uuid\n                    description: Organization ID for which the token was issued\n                    example: 59aa5076-13c5-4ce5-b13a-07d33e838acf\n                  refresh_token:\n                    type: string\n                    description: Refresh token value\n                    example: fra-a:0SEkeLZ2Qy2Nm2cg42xIyg\n                  scope:\n                    type: string\n                    description: Scopes assigned to token, separated by a comma (`,`)\n                    example: accounts--all:rc,accounts--all:ro\n                  token_type:\n                    type: string\n                    description: Access token type\n                    example: Bearer\n        '422':\n          description: Invalid request\n          content:\n            application/json:\n              schema: *ref_7\n        '500':\n          description: Server Error\ncomponents:\n  schemas: {}\n  securitySchemes:\n    Personal Access Token:\n      description: \u003e-\n        Use your `account_id` as the username and the Personal Access Token\n        (PAT) as the password. \u003ca\n        href=\"https://developers.livechat.com/docs/authorization/authorizing-api-calls/#personal-access-tokens\"\u003eLearn\n        how to get a PAT.\u003c/a\u003e\n      type: http\n      scheme: basic\n    OAuth2 Bearer Token:\n      description: \u003e-\n        This API uses OAuth2 with the implicit grant flow. \u003ca\n        href=\"https://developers.livechat.com/docs/authorization/authorizing-api-calls/#implicit-grant\"\u003eLearn\n        about the implicit grant flow.\u003c/a\u003e\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://accounts.livechat.com\n        authorizationCode:\n          authorizationUrl: https://accounts.livechat.com\n          tokenUrl: https://accounts.livechat.com/token",
			"canonicalURL": "/github.com/livechat/livechat-public-docs@cd0011798d076aa9bc264161355ba002edcfe355/-/blob/src/configs/redoc/global-accounts-api/spec.yml",
			"externalURLs": [
				{
					"url": "https://github.com/livechat/livechat-public-docs/blob/cd0011798d076aa9bc264161355ba002edcfe355/src/configs/redoc/global-accounts-api/spec.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 282: cannot unmarshal !!bool `true` into []string"
}