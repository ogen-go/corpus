{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vrchatapi/specification"
		},
		"file": {
			"name": "permissions.yaml",
			"size": 0,
			"path": "openapi/components/paths/permissions.yaml",
			"byteSize": 4603,
			"content": "openapi: 3.0.3\ninfo:\n  title: permissions\n  version: '1.0'\n  description: 'Permissions are a way to individually grant specific access to a user, often through a license such as VRC+ subscription.'\npaths:\n  /auth/permissions:\n    get:\n      summary: Get Assigned Permissions\n      operationId: getAssignedPermissions\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      responses:\n        '200':\n          $ref: ../responses/permissions/PermissionListResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n      tags:\n        - permissions\n      description: Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.\n    parameters: []\n  /permissions:\n    get:\n      summary: Get Permissions\n      tags:\n        - permissions\n      responses:\n        '200':\n          $ref: ../responses/permissions/PermissionListResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n        '403':\n          $ref: ../responses/InvalidAdminCredentialsError.yaml\n      operationId: getPermissions\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      x-internal: true\n      description: '**REQUIRES ADMIN CREDENTIALS**. Returns a list of all existing permissions, just like `/users` with empty search would.'\n    post:\n      summary: Create Permission\n      operationId: createPermission\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      responses:\n        '200':\n          $ref: ../responses/permissions/PermissionResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n        '403':\n          $ref: ../responses/InvalidAdminCredentialsError.yaml\n      x-internal: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                ownerId:\n                  $ref: ../schemas/UserID.yaml\n              required:\n                - name\n      description: '**REQUIRES ADMIN CREDENTIALS**. Creates and returns a new Permission. The permission will by default be owned by the sender of the request unless otherwise specified.'\n      tags:\n        - permissions\n      parameters:\n        - $ref: ../parameters.yaml#/number\n        - $ref: ../parameters.yaml#/offset\n        - schema:\n            type: string\n          in: query\n          name: ownerId\n          description: 'Owner of the Permission, MUST be valid UserID.'\n  '/permissions/{permissionId}':\n    parameters:\n      - $ref: ../parameters.yaml#/permissionId\n    get:\n      summary: Get Permission\n      tags:\n        - permissions\n      responses:\n        '200':\n          $ref: ../responses/permissions/PermissionResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n      operationId: getPermission\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: 'Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as `/auth/permissions`.'\n    put:\n      summary: Update Permission\n      operationId: updatePermission\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      responses:\n        '200':\n          $ref: ../responses/permissions/PermissionResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n        '403':\n          $ref: ../responses/InvalidAdminCredentialsError.yaml\n      x-internal: true\n      description: '**REQUIRES ADMIN CREDENTIALS**. Updates the info on a permission.'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                ownerId:\n                  $ref: ../schemas/UserID.yaml\n        description: ''\n      tags:\n        - permissions\n    delete:\n      summary: Delete Permission\n      operationId: deletePermission\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      responses:\n        '200':\n          $ref: ../responses/permissions/PermissionResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n        '403':\n          $ref: ../responses/InvalidAdminCredentialsError.yaml\n      description: '**REQUIRES ADMIN CREDENTIALS**. Deletes a permission.'\n      x-internal: true\n      tags:\n        - permissions\ntags:\n  $ref: ../tags.yaml\ncomponents:\n  securitySchemes:\n    $ref: ../securitySchemes.yaml\n"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal object into Go struct field Spec.tags of type []ogen.Tag"
}