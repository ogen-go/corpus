{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vrchatapi/specification"
		},
		"file": {
			"name": "playermoderation.yaml",
			"size": 0,
			"path": "openapi/components/paths/playermoderation.yaml",
			"byteSize": 7129,
			"content": "openapi: 3.0.3\ninfo:\n  title: playermoderation\n  version: '1.0'\n  description: |-\n    There are two different moderation API's, \"moderation\" for Staff actions, and \"playermoderation\" for players. PlayerModerations are user-generated actions towards others, such as muting them, blocking, or hiding their avatar.\n\n    Player moderations are also used for other things, such as in the Avatar Dynamics Interaction system.\n    Permissions which affect globally are stored in a Registry key locally on your computer, but player-specific moderations (when you target a player, and allow them specifically to interact with you) is stored in the API.\n\n    There are three different user-targetted permission options:\n\n    - Force On\n    - Force Off\n    - User Current Setting\n\n    Force On a.k.a `interactOn` and Force Off `interactOff` always or never allow that person to interact with you. These are stored as PlayerModerations. When you select a player and select \"Force On\", it creates a playerModeration of type `interactOn`.\n\n    ## Two important implementation details:\n\n    1. When switching between \"Force On\" and \"Force Off\", **the previous playerModeration MUST first be deleted before creating the second one.** The game sends these in sequence, first delete the old, then create the new. Attempting to create both `interactOn` and `interactOff` is UNDOCUMENTED behavior.\n    2. \"Use Current Setting\" **does not have it's own type**. It simply removes the previous playerModeration. No playerModeration of either type means fallback to the global setting.\npaths:\n  /auth/user/playermoderations:\n    get:\n      summary: Search Player Moderations\n      tags:\n        - playermoderation\n      x-codeSamples:\n        $ref: \"../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations/get\"\n      responses:\n        '200':\n          $ref: ../responses/playermoderation/PlayerModerationListResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n      operationId: getPlayerModerations\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: type\n          description: 'Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block.'\n        - schema:\n            type: string\n          in: query\n          name: sourceUserId\n          description: Must be valid UserID. Trying to view someone else's moderations results with \"Can't view someone else's player moderations\" error.\n          x-internal: true\n        - schema:\n            type: string\n          in: query\n          name: targetUserId\n          description: Must be valid UserID.\n      description: |-\n        Returns a list of all player moderations made by **you**.\n\n        This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.\n    post:\n      summary: Moderate User\n      operationId: moderateUser\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      x-codeSamples:\n        $ref: \"../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations/post\"\n      responses:\n        '200':\n          $ref: ../responses/playermoderation/PlayerModerationResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../requests/ModerateUserRequest.yaml\n        description: ''\n      description: |-\n        Moderate a user, e.g. unmute them or show their avatar.\n\n        Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag--playermoderation) on what playerModerations are, and how they differ from staff moderations.\n      tags:\n        - playermoderation\n    delete:\n      summary: Clear All Player Moderations\n      operationId: clearAllPlayerModerations\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      x-codeSamples:\n        $ref: \"../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations/delete\"\n      responses:\n        '200':\n          $ref: ../responses/playermoderation/PlayerModerationClearAllSuccess.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n      description: ⚠️ **This will delete every single player moderation you've ever made.**\n      tags:\n        - playermoderation\n  /auth/user/unplayermoderate:\n    put:\n      summary: Unmoderate User\n      operationId: unmoderateUser\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../requests/ModerateUserRequest.yaml\n      description: 'Removes a player moderation previously added through `moderateUser`. E.g if you previously have shown their avatar, but now want to reset it to default.'\n      x-codeSamples:\n        $ref: \"../codeSamples/playermoderation.yaml#/~1auth~1user~1unplayermoderate/put\"\n      responses:\n        '200':\n          $ref: ../responses/playermoderation/PlayerModerationUnmoderatedSuccess.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n      tags:\n        - playermoderation\n  '/auth/user/playermoderations/{playerModerationId}':\n    get:\n      summary: Get Player Moderation\n      tags:\n        - playermoderation\n      x-codeSamples:\n        $ref: \"../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations~1{playerModerationId}/get\"\n      responses:\n        '200':\n          $ref: ../responses/playermoderation/PlayerModerationResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n        '404':\n          $ref: ../responses/playermoderation/PlayerModerationNotFoundError.yaml\n      operationId: getPlayerModeration\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: Returns a single Player Moderation. This returns the exact same amount of information as the more generalised `getPlayerModerations`.\n    delete:\n      summary: Delete Player Moderation\n      operationId: deletePlayerModeration\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      x-codeSamples:\n        $ref: \"../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations~1{playerModerationId}/delete\"\n      responses:\n        '200':\n          $ref: ../responses/playermoderation/PlayerModerationRemovedSuccess.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n        '403':\n          $ref: ../responses/playermoderation/PlayerModerationDeleteOthersError.yaml\n      description: Deletes a specific player moderation based on it's `pmod_` ID. The website uses `unmoderateUser` instead. You can delete the same player moderation multiple times successfully.\n      tags:\n        - playermoderation\n    parameters:\n      - schema:\n          type: string\n        name: playerModerationId\n        in: path\n        required: true\ntags:\n  $ref: ../tags.yaml\ncomponents:\n  securitySchemes:\n    $ref: ../securitySchemes.yaml\n",
			"canonicalURL": "/github.com/vrchatapi/specification@5f9fb51e30c637dcf7d41a78aef1c46e8263b81d/-/blob/openapi/components/paths/playermoderation.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/vrchatapi/specification/blob/5f9fb51e30c637dcf7d41a78aef1c46e8263b81d/openapi/components/paths/playermoderation.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!str `../secu...` into ogen.SecurityScheme; yaml: line 1: cannot unmarshal !!map into []ogen.Tag"
}