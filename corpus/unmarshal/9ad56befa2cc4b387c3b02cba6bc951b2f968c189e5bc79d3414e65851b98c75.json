{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/swagger-api/swagger-parser"
		},
		"file": {
			"name": "oas.yaml",
			"size": 0,
			"path": "modules/swagger-parser-v3/src/test/resources/oas.yaml",
			"byteSize": 4875,
			"content": "openapi: 3.0.1\n\"security\": [\n  {},\n  {\"oauth\": [â€¦]},\n  {\"token-1\": []},\n  {\"token-2\": []}\n]\npaths:\n  /pet:\n    summary: \"summary\"\n    description: \"description\"\n    post:\n      tags:\n        - pet\n      summary: \"Add a new pet to the store\"\n      description: \"\"\n      operationId: addPet\n      parameters:\n      responses:\n        405:\n          description: \"Invalid input\"\n      security:\n        - petstore_auth:\n          - \"write:pets\"\n          - \"read:pets\"\n      requestBody:\n        \"$ref\": \"#/components/requestBodies/requestBody1\"\n      externalDocs:\n    put:\n      tags:\n      - pet\n      summary: \"Update an existing pet\"\n      description: \"\"\n      operationId: updatePet\n      parameters:\n      responses:\n        400:\n          description: \"Invalid ID supplied\"\n        404:\n          description: \"Pet not found\"\n        405:\n          description: \"Validation exception\"\n        security:\n          - petstore_auth:\n            - \"write:pets\"\n            - \"read:pets\"\n        requestBody:\n          \"$ref\": \"#/components/requestBodies/requestBody1\"\ncomponents:\n  schemas:\n    Order:\n      type: object\n      not:\n        type: integer\n        format: int32\n      additionalProperties:\n        type: integer\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n          - placed\n          - approved\n          - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n      - name\n      - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          \"$ref\": \"#/components/schemas/Category\"\n        user:\n          type: string\n          example: doggie\n          \"$ref\": \"http://localhost:${dynamicPort}/remote/schema#/components/schemas/User\"\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            \"$ref\": \"http://localhost:${dynamicPort}/remote/schema#/components/schemas/ExampleSchema\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n          - available\n          - pending\n          - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      required:\n      - name\n      - photoUrls\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n  parameters:\n    contentParameter:\n      in: query\n      name: coordinates\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ExtendedErrorModel'\n      examples:\n        cat:\n          summary: An example of a cat\n          value:\n            name: Fluffy\n            petType: Cat\n            color: White\n            gender: male\n            breed: Persian\n    refParam:\n      \"$ref\": \"#/components/parameters/limitParam\"\n    remoteParameter:\n      \"$ref\": \"http://localhost:${dynamicPort}/remote/parameter\"\n    newParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n        \"$ref\": \"#/components/schemas/Tag\"\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32"
		}
	},
	"Error": "unmarshal: json: line 1:3523: json: cannot unmarshal array into Go struct field Operation.paths.put.responses of type ogen.Response"
}