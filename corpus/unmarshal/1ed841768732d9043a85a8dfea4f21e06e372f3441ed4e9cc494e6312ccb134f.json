{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rapi-doc/RapiDoc"
		},
		"file": {
			"name": "data-types-simple.yaml",
			"size": 0,
			"path": "docs/specs/data-types-simple.yaml",
			"byteSize": 5987,
			"content": "openapi: 3.0.0\ninfo:\n  description: Contains all data types\n  version: 1.0.0\n  title: Testing different data-types\npaths:\n  /person:\n    post:\n      summary: Demonstrates data-types and constraints\n      description: Request-Parameters and Response-Schema contains various data types and constrains. Check out how is it desplayed below\n      parameters:\n        - in: query\n          name: search\n          examples:\n            example1:\n              summary: s1\n              value: v1\n            example2:\n              summary: s2\n              value: v2\n          x-fill-example: no\n          schema:\n            type: string\n          description: term to search (use \"*\" to show all)\n        - in: query\n          name: id\n          example: my-id\n          schema:\n            type: string\n        - name: height\n          in: query\n          description: height (in inches)\n          required: true\n          example: 70\n          schema:\n            type: integer\n            format: int32\n            minimum: 12\n            maximum: 120\n        - name: full-name\n          in: query\n          description: Name of a person\n          required: true\n          examples:\n            empty: ## just an empty value ## fixes auto filling example\n              value:\n              summary: No Name\n            male-name:\n              value: James\n              summary: Male name\n            female-name:\n              value: Ria\n              summary: Female Name\n            gender-nutral-name:\n              value: Charlie\n              summary: Gender Neutral Name\n          schema:\n            type: string\n            minimum: 3\n        - name: social-connection\n          in: query\n          description: facebook, linkedin, github, instagram, twitter etc \n          schema:\n            type: string\n            format: url\n        - name: email\n          in: query\n          required: true\n          example: iron_man@example.com\n          schema:\n            type: string\n            format: email\n        - name: email-password\n          in: query\n          required: true\n          schema:\n            type: string\n            format: password\n        - name: date-of-birth\n          in: query\n          required: true\n          example: 01-09-2021\n          schema:\n            type: string\n            format: date\n        - name: interests\n          in: query\n          required: true\n          x-fill-example: yes\n          examples:\n            - computers\n            - movies\n          schema:\n            type: array\n            minItems: 1\n            maxItems: 3\n            items:\n              type: string\n              enum:\n                - computers\n                - hiking\n                - swiming\n                - movies\n                - music\n                - dancing\n                - reading\n                - painting\n              default: hiking   \n        - name: tags\n          in: query\n          description: Add tags to the person (not-exploded)\n          style: form\n          explode: false\n          examples:\n            - robot\n            - not-real\n          schema:\n            type: array\n            items:\n              type: string\n        - name: maritalStatus\n          in: query\n          description: marital status\n          example: unmarried\n          schema:\n            type: string\n            enum:\n              - married\n              - unmarried\n              - widowed              \n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Person'\ntags:\n  - name: Person\n    description: Person Datatype\ncomponents:\n  schemas:\n    Person:\n      type: object\n      required:\n        - name\n        - photoUrls\n      example:\n        name: 'account-name'\n        type: StandardBankAccount\n        url: 'https://api.freeagent.com/v2/bank_accounts/4093'\n        current_balance: 28742\n      properties:\n        id:\n          description: Pet ID\n          allOf:\n            - $ref: '#/components/schemas/Id'\n        category:\n          description: Categories this person belongs to\n          allOf:\n            - $ref: '#/components/schemas/Category'\n        DependentIds:\n          type: array\n          description: IDs of Dependents .\n          items:\n            type: integer\n          example:\n            - 278\n            - 279\n            - 280\n            - 281\n        name:\n          description: Name of the person\n          type: string\n          minLength: 4\n          example: Guru\n        photoUrls:\n          description: The list of URL to a cute photos featuring pet\n          type: array\n          maxItems: 20\n          items:\n            type: string\n            format: url\n        tags:\n          description: Tags attached to the pet\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/Tag'\n        maritalStatus:\n          type: string\n          description: Pet status in the store\n          enum:\n            - married\n            - unmarried\n            - widowed\n        phone:\n          description: phone number in international format\n          type: string\n          pattern: '/^\\+(?:[0-9]-?){6,14}[0-9]$/'\n          example: +1-202-555-0192\n          nullable: true\n\n    Category:\n      type: object\n      properties:\n        id:\n          description: Category ID\n          allOf:\n            - $ref: '#/components/schemas/Id'\n        name:\n          description: Category name\n          type: string\n          minLength: 1\n    Id:\n      type: integer\n      format: int64\n      readOnly: true\n    Tag:\n      type: object\n      properties:\n        id:\n          description: Tag ID\n          allOf:\n            - $ref: '#/components/schemas/Id'\n        name:\n          description: Tag name\n          type: string\n          minLength: 1",
			"canonicalURL": "/github.com/rapi-doc/RapiDoc@17e6cd163d7d7868df9e7cfd6b84cd912dc963a9/-/blob/docs/specs/data-types-simple.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/rapi-doc/RapiDoc/blob/17e6cd163d7d7868df9e7cfd6b84cd912dc963a9/docs/specs/data-types-simple.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!seq into map[string]*ogen.Example; yaml: line 1: cannot unmarshal !!seq into map[string]*ogen.Example"
}