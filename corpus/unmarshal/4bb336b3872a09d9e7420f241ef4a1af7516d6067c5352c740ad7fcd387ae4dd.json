{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/so1n/pait"
		},
		"file": {
			"name": "starlette_openapi.yaml",
			"size": 0,
			"path": "example/api_doc/example_doc/starlette_openapi.yaml",
			"byteSize": 60239,
			"content": "openapi: 3.0.0\ninfo:\n  title: Pait Doc\n  version: 0.0.1\nservers:\n- url: http://127.0.0.1\ntags:\n- name: test\n  description: test api\n- name: user\n  description: user api\n- name: check resp\n  description: check route response\n- name: check param\n  description: check route request param\n- name: links\n  description: openapi links route\n- name: plugin\n  description: test pait plugin route\n- name: raise\n  description: raise route\n- name: user\n  description: user data route\n- name: post\n  description: post method route\n- name: depend\n  description: depend route\n- name: same alias\n  description: have same alias field route\n- name: field\n  description: field route\n- name: mock\n  description: mock response route\n- name: cbv\n  description: cbv route\n- name: pait_doc\n  description: pait default doc route\npaths:\n  /api/login:\n    post:\n      group: links\n      tags:\n      - links\n      summary: ''\n      description: ''\n      operationId: POST.login_route\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: LoginRouteDynamicModel\n              type: object\n              properties:\n                uid:\n                  title: Uid\n                  description: user id\n                  type: string\n                password:\n                  title: Password\n                  description: password\n                  type: string\n              required:\n              - uid\n              - password\n      responses:\n        200:\n          description: login response\n          headers: \u0026id001 {}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/example__param_verify__model__LoginRespModel__ResponseModel'\n          links: \u0026id002\n            GET.get_user_route/header/token:\n              description: test links model\n              operationId: GET.get_user_route\n              parameters:\n                token: $response.body#/data/token\n            HEAD.get_user_route/header/token:\n              description: test links model\n              operationId: HEAD.get_user_route\n              parameters:\n                token: $response.body#/data/token\n  /api/user:\n    get:\n      group: links\n      tags:\n      - links\n      summary: ''\n      description: ''\n      operationId: GET.get_user_route\n      parameters:\n      - name: token\n        in: header\n        required: false\n        description: token\n        schema:\n          title: Token\n          description: token\n          default: ''\n          type: string\n      responses:\n        200:\n          description: success response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/example__param_verify__model__ResponseModel'\n          links: *id002\n    head:\n      group: links\n      tags:\n      - links\n      summary: ''\n      description: ''\n      operationId: HEAD.get_user_route\n      parameters:\n      - name: token\n        in: header\n        required: false\n        description: token\n        schema:\n          title: Token\n          description: token\n          default: ''\n          type: string\n      responses:\n        200:\n          description: success response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/example__param_verify__model__ResponseModel'\n          links: *id002\n  /api/raise-tip:\n    post:\n      group: other\n      tags:\n      - raise\n      deprecated: true\n      summary: ''\n      description: test pait raise tip\n      operationId: POST.raise_tip_route\n      parameters:\n      - name: content__type\n        in: header\n        required: true\n        description: Content-Type\n        schema:\n          title: Content  Type\n          description: Content-Type\n          type: string\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/post:\n    post:\n      group: other\n      tags:\n      - user\n      - post\n      summary: ''\n      description: Test Method:Post Pydantic Model\n      operationId: POST.post_route\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: PostRouteDynamicModel\n              type: object\n              properties:\n                uid:\n                  title: Uid\n                  description: user id\n                  exclusiveMinimum: 10\n                  exclusiveMaximum: 1000\n                  example: '123'\n                  type: integer\n                user_name:\n                  title: User Name\n                  description: user name\n                  maxLength: 4\n                  minLength: 2\n                  example: so1n\n                  type: string\n                age:\n                  title: Age\n                  description: age\n                  exclusiveMinimum: 1\n                  exclusiveMaximum: 100\n                  example: 25\n                  type: integer\n                sex:\n                  description: sex\n                  allOf:\n                  - $ref: '#/definitions/example__param_verify__model__SexEnum'\n              required:\n              - uid\n              - user_name\n              - age\n              - sex\n      parameters:\n      - name: Content-Type\n        in: header\n        required: true\n        description: Content-Type\n        schema:\n          title: Content-Type\n          description: Content-Type\n          type: string\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/pait-model:\n    post:\n      group: other\n      tags:\n      - field\n      summary: ''\n      description: Test pait model\n      operationId: POST.pait_model_route\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: PaitModelRouteDynamicModel\n              type: object\n              properties:\n                user_info:\n                  $ref: '#/definitions/example__param_verify__model__TestPaitModel__UserInfo'\n              required:\n              - user_info\n      parameters:\n      - name: user-agent\n        in: header\n        required: true\n        description: user agent\n        schema:\n          title: User-Agent\n          description: user agent\n          type: string\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/check_depend_contextmanager:\n    get:\n      group: other\n      tags:\n      - depend\n      summary: ''\n      description: ''\n      operationId: GET.depend_contextmanager_route\n      parameters:\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: is_raise\n        in: query\n        required: false\n        description: ''\n        schema:\n          title: Is Raise\n          default: false\n          type: boolean\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n    head:\n      group: other\n      tags:\n      - depend\n      summary: ''\n      description: ''\n      operationId: HEAD.depend_contextmanager_route\n      parameters:\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: is_raise\n        in: query\n        required: false\n        description: ''\n        schema:\n          title: Is Raise\n          default: false\n          type: boolean\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/check_depend_async_contextmanager:\n    get:\n      group: other\n      tags:\n      - depend\n      summary: ''\n      description: ''\n      operationId: GET.depend_async_contextmanager_route\n      parameters:\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: is_raise\n        in: query\n        required: false\n        description: ''\n        schema:\n          title: Is Raise\n          default: false\n          type: boolean\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n    head:\n      group: other\n      tags:\n      - depend\n      summary: ''\n      description: ''\n      operationId: HEAD.depend_async_contextmanager_route\n      parameters:\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: is_raise\n        in: query\n        required: false\n        description: ''\n        schema:\n          title: Is Raise\n          default: false\n          type: boolean\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/check_pre_depend_contextmanager:\n    get:\n      group: other\n      tags:\n      - depend\n      summary: ''\n      description: ''\n      operationId: GET.pre_depend_contextmanager_route\n      parameters:\n      - name: is_raise\n        in: query\n        required: false\n        description: ''\n        schema:\n          title: Is Raise\n          default: false\n          type: boolean\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n    head:\n      group: other\n      tags:\n      - depend\n      summary: ''\n      description: ''\n      operationId: HEAD.pre_depend_contextmanager_route\n      parameters:\n      - name: is_raise\n        in: query\n        required: false\n        description: ''\n        schema:\n          title: Is Raise\n          default: false\n          type: boolean\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/check_pre_depend_async_contextmanager:\n    get:\n      group: other\n      tags:\n      - depend\n      summary: ''\n      description: ''\n      operationId: GET.pre_depend_async_contextmanager_route\n      parameters:\n      - name: is_raise\n        in: query\n        required: false\n        description: ''\n        schema:\n          title: Is Raise\n          default: false\n          type: boolean\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n    head:\n      group: other\n      tags:\n      - depend\n      summary: ''\n      description: ''\n      operationId: HEAD.pre_depend_async_contextmanager_route\n      parameters:\n      - name: is_raise\n        in: query\n        required: false\n        description: ''\n        schema:\n          title: Is Raise\n          default: false\n          type: boolean\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/depend:\n    post:\n      group: user\n      tags:\n      - user\n      - depend\n      summary: ''\n      description: Test Method:Post request, Pydantic Model\n      operationId: POST.depend_route\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: DependRouteDynamicModel\n              type: object\n              properties:\n                age:\n                  title: Age\n                  description: age\n                  exclusiveMinimum: 1\n                  exclusiveMaximum: 100\n                  type: integer\n              required:\n              - age\n      parameters:\n      - name: user-agent\n        in: header\n        required: true\n        description: user agent\n        schema:\n          title: User-Agent\n          description: user agent\n          type: string\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/field-default-factory:\n    post:\n      group: user\n      tags:\n      - field\n      summary: ''\n      description: ''\n      operationId: POST.field_default_factory_route\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: FieldDefaultFactoryRouteDynamicModel\n              type: object\n              properties:\n                demo_value:\n                  title: Demo Value\n                  description: Json body value not empty\n                  type: integer\n                data_list:\n                  title: Data List\n                  description: test default factory\n                  type: array\n                  items:\n                    type: string\n                data_dict:\n                  title: Data Dict\n                  description: test default factory\n                  type: object\n              required:\n              - demo_value\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/pait-base-field/{age}:\n    get:\n      group: user\n      tags:\n      - field\n      summary: ''\n      description: Test the use of all BaseField-based\n      operationId: GET.pait_base_field_route\n      parameters:\n      - name: cookie\n        in: cookie\n        required: true\n        description: \"cookie \\n\u003eNote for Swagger UI and Swagger Editor users:  \\n\\\n          \u003eCookie authentication iscurrently not supported for \\\"try it out\\\" requests\\\n          \\ due to browser securityrestrictions. See [this issue](https://github.com/swagger-api/swagger-js/issues/1163)for\\\n          \\ more information. [SwaggerHub](https://swagger.io/tools/swaggerhub/)does\\\n          \\ not have this limitation. \"\n        schema:\n          title: Cookie\n          description: cookie\n          type: string\n      - name: multi_user_name\n        in: multiquery\n        required: true\n        description: user name\n        schema:\n          title: Multi User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: array\n          items:\n            type: string\n            minLength: 2\n            maxLength: 4\n      - name: age\n        in: path\n        required: true\n        description: age\n        schema:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: user_name\n        in: query\n        required: true\n        description: user name\n        schema:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: email\n        in: query\n        required: false\n        description: user email\n        schema:\n          title: Email\n          description: user email\n          default: example@xxx.com\n          type: string\n      - name: sex\n        in: query\n        required: false\n        description: sex\n        schema:\n          title: SexEnum\n          description: An enumeration.\n          enum:\n          - man\n          - woman\n          type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                upload_file:\n                  title: Upload_file\n                  type: string\n                  format: binary\n              required:\n              - upload_file\n          application/x-www-form-urlencoded:\n            schema:\n              title: PaitBaseFieldRouteDynamicModel\n              type: object\n              properties:\n                a:\n                  title: A\n                  description: form data\n                  type: string\n                b:\n                  title: B\n                  description: form data\n                  type: string\n                c:\n                  title: C\n                  description: \"form data  \\n\u003eSwagger UI could not support, when media_type\\\n                    \\ is multipart/form-data\"\n                  type: array\n                  items:\n                    type: string\n              required:\n              - a\n              - b\n              - c\n            encoding:\n              c: \u0026id003\n                style: form\n                explode: true\n        required: true\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n    head:\n      group: user\n      tags:\n      - field\n      summary: ''\n      description: Test the use of all BaseField-based\n      operationId: HEAD.pait_base_field_route\n      parameters:\n      - name: cookie\n        in: cookie\n        required: true\n        description: \"cookie \\n\u003eNote for Swagger UI and Swagger Editor users:  \\n\\\n          \u003eCookie authentication iscurrently not supported for \\\"try it out\\\" requests\\\n          \\ due to browser securityrestrictions. See [this issue](https://github.com/swagger-api/swagger-js/issues/1163)for\\\n          \\ more information. [SwaggerHub](https://swagger.io/tools/swaggerhub/)does\\\n          \\ not have this limitation. \"\n        schema:\n          title: Cookie\n          description: cookie\n          type: string\n      - name: multi_user_name\n        in: multiquery\n        required: true\n        description: user name\n        schema:\n          title: Multi User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: array\n          items:\n            type: string\n            minLength: 2\n            maxLength: 4\n      - name: age\n        in: path\n        required: true\n        description: age\n        schema:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: user_name\n        in: query\n        required: true\n        description: user name\n        schema:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: email\n        in: query\n        required: false\n        description: user email\n        schema:\n          title: Email\n          description: user email\n          default: example@xxx.com\n          type: string\n      - name: sex\n        in: query\n        required: false\n        description: sex\n        schema:\n          title: SexEnum\n          description: An enumeration.\n          enum:\n          - man\n          - woman\n          type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                upload_file:\n                  title: Upload_file\n                  type: string\n                  format: binary\n              required:\n              - upload_file\n          application/x-www-form-urlencoded:\n            schema:\n              title: PaitBaseFieldRouteDynamicModel\n              type: object\n              properties:\n                a:\n                  title: A\n                  description: form data\n                  type: string\n                b:\n                  title: B\n                  description: form data\n                  type: string\n                c:\n                  title: C\n                  description: \"form data  \\n\u003eSwagger UI could not support, when media_type\\\n                    \\ is multipart/form-data\"\n                  type: array\n                  items:\n                    type: string\n              required:\n              - a\n              - b\n              - c\n            encoding:\n              c: *id003\n        required: true\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/same-alias:\n    get:\n      group: user\n      tags:\n      - same alias\n      summary: ''\n      description: ''\n      operationId: GET.same_alias_route\n      parameters:\n      - name: token\n        in: header\n        required: false\n        description: ''\n        schema:\n          title: Token\n          default: ''\n          type: string\n      - name: token\n        in: query\n        required: false\n        description: ''\n        schema:\n          title: Token\n          default: ''\n          type: string\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n    head:\n      group: user\n      tags:\n      - same alias\n      summary: ''\n      description: ''\n      operationId: HEAD.same_alias_route\n      parameters:\n      - name: token\n        in: header\n        required: false\n        description: ''\n        schema:\n          title: Token\n          default: ''\n          type: string\n      - name: token\n        in: query\n        required: false\n        description: ''\n        schema:\n          title: Token\n          default: ''\n          type: string\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__SimpleRespModel__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/mock/{age}:\n    get:\n      group: user\n      tags:\n      - mock\n      summary: ''\n      description: Test gen mock response\n      operationId: GET.mock_route\n      parameters:\n      - name: multi_user_name\n        in: multiquery\n        required: true\n        description: user name\n        schema:\n          title: Multi User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: array\n          items:\n            type: string\n            minLength: 2\n            maxLength: 4\n      - name: age\n        in: path\n        required: true\n        description: age\n        schema:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: user_name\n        in: query\n        required: true\n        description: user name\n        schema:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: email\n        in: query\n        required: false\n        description: user email\n        schema:\n          title: Email\n          description: user email\n          default: example@xxx.com\n          type: string\n      - name: sex\n        in: query\n        required: false\n        description: sex\n        schema:\n          title: SexEnum\n          description: An enumeration.\n          enum:\n          - man\n          - woman\n          type: string\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel2__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n    head:\n      group: user\n      tags:\n      - mock\n      summary: ''\n      description: Test gen mock response\n      operationId: HEAD.mock_route\n      parameters:\n      - name: multi_user_name\n        in: multiquery\n        required: true\n        description: user name\n        schema:\n          title: Multi User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: array\n          items:\n            type: string\n            minLength: 2\n            maxLength: 4\n      - name: age\n        in: path\n        required: true\n        description: age\n        schema:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: user_name\n        in: query\n        required: true\n        description: user name\n        schema:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: email\n        in: query\n        required: false\n        description: user email\n        schema:\n          title: Email\n          description: user email\n          default: example@xxx.com\n          type: string\n      - name: sex\n        in: query\n        required: false\n        description: sex\n        schema:\n          title: SexEnum\n          description: An enumeration.\n          enum:\n          - man\n          - woman\n          type: string\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel2__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/cbv:\n    get:\n      group: user\n      tags:\n      - cbv\n      summary: ''\n      description: Text cbv route get\n      operationId: get.CbvRoute.get\n      parameters:\n      - name: Content-Type\n        in: header\n        required: true\n        description: ''\n        schema:\n          title: Content-Type\n          type: string\n      - name: age\n        in: query\n        required: true\n        description: age\n        schema:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          example: 25\n          type: integer\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: user_name\n        in: query\n        required: true\n        description: user name\n        schema:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: sex\n        in: query\n        required: false\n        description: sex\n        schema:\n          title: SexEnum\n          description: An enumeration.\n          enum:\n          - man\n          - woman\n          type: string\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n    post:\n      group: user\n      tags:\n      - cbv\n      summary: ''\n      description: test cbv post method\n      operationId: post.CbvRoute.post\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Cbvroute.postDynamicModel\n              type: object\n              properties:\n                age:\n                  title: Age\n                  description: age\n                  exclusiveMinimum: 1\n                  exclusiveMaximum: 100\n                  example: 25\n                  type: integer\n                uid:\n                  title: Uid\n                  description: user id\n                  exclusiveMinimum: 10\n                  exclusiveMaximum: 1000\n                  type: integer\n                user_name:\n                  title: User Name\n                  description: user name\n                  maxLength: 4\n                  minLength: 2\n                  type: string\n                sex:\n                  description: sex\n                  allOf:\n                  - $ref: '#/definitions/example__param_verify__model__SexEnum'\n              required:\n              - age\n              - uid\n              - user_name\n              - sex\n      parameters:\n      - name: Content-Type\n        in: header\n        required: true\n        description: ''\n        schema:\n          title: Content-Type\n          type: string\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/check-param:\n    get:\n      group: user\n      tags:\n      - check param\n      summary: ''\n      description: Test check param\n      operationId: GET.check_param_route\n      parameters:\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: email\n        in: query\n        required: false\n        description: user email\n        schema:\n          title: Email\n          description: user email\n          default: example@xxx.com\n          type: string\n      - name: user_name\n        in: query\n        required: false\n        description: user name\n        schema:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: alias_user_name\n        in: query\n        required: false\n        description: user name\n        schema:\n          title: Alias User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: age\n        in: query\n        required: true\n        description: age\n        schema:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n      - name: birthday\n        in: query\n        required: false\n        description: birthday\n        schema:\n          title: Birthday\n          description: birthday\n          type: string\n      - name: sex\n        in: query\n        required: false\n        description: sex\n        schema:\n          title: SexEnum\n          description: An enumeration.\n          enum:\n          - man\n          - woman\n          type: string\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel2__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n    head:\n      group: user\n      tags:\n      - check param\n      summary: ''\n      description: Test check param\n      operationId: HEAD.check_param_route\n      parameters:\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: email\n        in: query\n        required: false\n        description: user email\n        schema:\n          title: Email\n          description: user email\n          default: example@xxx.com\n          type: string\n      - name: user_name\n        in: query\n        required: false\n        description: user name\n        schema:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: alias_user_name\n        in: query\n        required: false\n        description: user name\n        schema:\n          title: Alias User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: age\n        in: query\n        required: true\n        description: age\n        schema:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n      - name: birthday\n        in: query\n        required: false\n        description: birthday\n        schema:\n          title: Birthday\n          description: birthday\n          type: string\n      - name: sex\n        in: query\n        required: false\n        description: sex\n        schema:\n          title: SexEnum\n          description: An enumeration.\n          enum:\n          - man\n          - woman\n          type: string\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel2__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/check-resp:\n    get:\n      group: user\n      tags:\n      - check resp\n      summary: ''\n      description: Test test-helper check response\n      operationId: GET.check_response_route\n      parameters:\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: email\n        in: query\n        required: false\n        description: user email\n        schema:\n          title: Email\n          description: user email\n          default: example@xxx.com\n          type: string\n      - name: user_name\n        in: query\n        required: true\n        description: user name\n        schema:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: age\n        in: query\n        required: true\n        description: age\n        schema:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n      - name: display_age\n        in: query\n        required: false\n        description: display_age\n        schema:\n          title: Display Age\n          description: display_age\n          default: 0\n          type: integer\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel3__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n    head:\n      group: user\n      tags:\n      - check resp\n      summary: ''\n      description: Test test-helper check response\n      operationId: HEAD.check_response_route\n      parameters:\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: email\n        in: query\n        required: false\n        description: user email\n        schema:\n          title: Email\n          description: user email\n          default: example@xxx.com\n          type: string\n      - name: user_name\n        in: query\n        required: true\n        description: user name\n        schema:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: age\n        in: query\n        required: true\n        description: age\n        schema:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n      - name: display_age\n        in: query\n        required: false\n        description: display_age\n        schema:\n          title: Display Age\n          description: display_age\n          default: 0\n          type: integer\n      responses:\n        200:\n          description: success response|fail response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel3__ResponseModel'\n                - $ref: '#/components/schemas/example__param_verify__model__ResponseFailModel'\n          links: *id002\n  /api/text-resp:\n    get:\n      group: check_resp\n      tags:\n      - check resp\n      summary: ''\n      description: ''\n      operationId: GET.async_text_response_route\n      responses:\n        200:\n          description: text response\n          headers: \u0026id004\n            X-Example-Type: text\n          content:\n            text/plain: \u0026id005\n              type: string\n              example: pait example data\n          links: *id002\n    head:\n      group: check_resp\n      tags:\n      - check resp\n      summary: ''\n      description: ''\n      operationId: HEAD.async_text_response_route\n      responses:\n        200:\n          description: text response\n          headers: *id004\n          content:\n            text/plain: *id005\n          links: *id002\n  /api/html-resp:\n    get:\n      group: check_resp\n      tags:\n      - check resp\n      summary: ''\n      description: ''\n      operationId: GET.html_response_route\n      responses:\n        200:\n          description: html response\n          headers: \u0026id006\n            X-Example-Type: html\n          content:\n            text/html: \u0026id007\n              type: string\n              example: \u003ch1\u003ePait example html\u003c/h1\u003e\n          links: *id002\n    head:\n      group: check_resp\n      tags:\n      - check resp\n      summary: ''\n      description: ''\n      operationId: HEAD.html_response_route\n      responses:\n        200:\n          description: html response\n          headers: *id006\n          content:\n            text/html: *id007\n          links: *id002\n  /api/file-resp:\n    get:\n      group: check_resp\n      tags:\n      - check resp\n      summary: ''\n      description: ''\n      operationId: GET.file_response_route\n      responses:\n        200:\n          description: file response\n          headers: \u0026id008\n            X-Example-Type: file\n          content:\n            application/octet-stream: \u0026id009\n              type: string\n              format: binary\n          links: *id002\n    head:\n      group: check_resp\n      tags:\n      - check resp\n      summary: ''\n      description: ''\n      operationId: HEAD.file_response_route\n      responses:\n        200:\n          description: file response\n          headers: *id008\n          content:\n            application/octet-stream: *id009\n          links: *id002\n  /api/check-json-plugin:\n    get:\n      group: plugin\n      tags:\n      - plugin\n      summary: ''\n      description: Test json plugin by resp type is dict\n      operationId: GET.check_json_plugin_route\n      parameters:\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: email\n        in: query\n        required: false\n        description: user email\n        schema:\n          title: Email\n          description: user email\n          default: example@xxx.com\n          type: string\n      - name: user_name\n        in: query\n        required: true\n        description: user name\n        schema:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: age\n        in: query\n        required: true\n        description: age\n        schema:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n      - name: display_age\n        in: query\n        required: false\n        description: display_age\n        schema:\n          title: Display Age\n          description: display_age\n          default: 0\n          type: integer\n      responses:\n        200:\n          description: success response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel3__ResponseModel'\n          links: *id002\n    head:\n      group: plugin\n      tags:\n      - plugin\n      summary: ''\n      description: Test json plugin by resp type is dict\n      operationId: HEAD.check_json_plugin_route\n      parameters:\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: email\n        in: query\n        required: false\n        description: user email\n        schema:\n          title: Email\n          description: user email\n          default: example@xxx.com\n          type: string\n      - name: user_name\n        in: query\n        required: true\n        description: user name\n        schema:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: age\n        in: query\n        required: true\n        description: age\n        schema:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n      - name: display_age\n        in: query\n        required: false\n        description: display_age\n        schema:\n          title: Display Age\n          description: display_age\n          default: 0\n          type: integer\n      responses:\n        200:\n          description: success response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel3__ResponseModel'\n          links: *id002\n  /api/check-json-plugin-1:\n    get:\n      group: plugin\n      tags:\n      - plugin\n      summary: ''\n      description: Test json plugin by resp type is typed dict\n      operationId: GET.check_json_plugin_route1\n      parameters:\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: email\n        in: query\n        required: false\n        description: user email\n        schema:\n          title: Email\n          description: user email\n          default: example@xxx.com\n          type: string\n      - name: user_name\n        in: query\n        required: true\n        description: user name\n        schema:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: age\n        in: query\n        required: true\n        description: age\n        schema:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n      - name: display_age\n        in: query\n        required: false\n        description: display_age\n        schema:\n          title: Display Age\n          description: display_age\n          default: 0\n          type: integer\n      responses:\n        200:\n          description: success response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel3__ResponseModel'\n          links: *id002\n    head:\n      group: plugin\n      tags:\n      - plugin\n      summary: ''\n      description: Test json plugin by resp type is typed dict\n      operationId: HEAD.check_json_plugin_route1\n      parameters:\n      - name: uid\n        in: query\n        required: true\n        description: user id\n        schema:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n      - name: email\n        in: query\n        required: false\n        description: user email\n        schema:\n          title: Email\n          description: user email\n          default: example@xxx.com\n          type: string\n      - name: user_name\n        in: query\n        required: true\n        description: user name\n        schema:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n      - name: age\n        in: query\n        required: true\n        description: age\n        schema:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n      - name: display_age\n        in: query\n        required: false\n        description: display_age\n        schema:\n          title: Display Age\n          description: display_age\n          default: 0\n          type: integer\n      responses:\n        200:\n          description: success response\n          headers: *id001\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel3__ResponseModel'\n          links: *id002\ncomponents:\n  schemas:\n    example__param_verify__model__LoginRespModel__ResponseModel__DataModel:\n      title: DataModel\n      type: object\n      properties:\n        token:\n          title: Token\n          type: string\n      required:\n      - token\n    example__param_verify__model__LoginRespModel__ResponseModel:\n      title: ResponseModel\n      type: object\n      properties:\n        code:\n          title: Code\n          description: api code\n          default: 0\n          type: integer\n        msg:\n          title: Msg\n          description: api status msg\n          default: success\n          type: string\n        data:\n          $ref: '#/components/schemas/example__param_verify__model__LoginRespModel__ResponseModel__DataModel'\n      required:\n      - data\n    example__param_verify__model__ResponseModel:\n      title: ResponseModel\n      type: object\n      properties:\n        code:\n          title: Code\n          description: api code\n          default: 0\n          type: integer\n        msg:\n          title: Msg\n          description: api status msg\n          default: success\n          type: string\n    example__param_verify__model__SimpleRespModel__ResponseModel:\n      title: ResponseModel\n      type: object\n      properties:\n        code:\n          title: Code\n          description: api code\n          default: 0\n          type: integer\n        msg:\n          title: Msg\n          description: api status msg\n          default: success\n          type: string\n        data:\n          title: Data\n          description: success result\n          type: object\n      required:\n      - data\n    example__param_verify__model__ResponseFailModel:\n      title: ResponseFailModel\n      type: object\n      properties:\n        code:\n          title: Code\n          description: api code\n          default: 1\n          type: integer\n        msg:\n          title: Msg\n          description: api status msg\n          default: fail\n          type: string\n    example__param_verify__model__UserSuccessRespModel__ResponseModel__DataModel:\n      title: DataModel\n      type: object\n      properties:\n        uid:\n          title: Uid\n          description: user id\n          default: 666\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n        user_name:\n          title: User Name\n          description: user name\n          default: mock_name\n          maxLength: 10\n          minLength: 2\n          type: string\n        age:\n          title: Age\n          description: age\n          default: 99\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n        sex:\n          description: sex\n          default: !!python/object/apply:example.param_verify.model.SexEnum\n          - man\n          allOf:\n          - $ref: '#/components/schemas/example__param_verify__model__SexEnum'\n        content_type:\n          title: Content Type\n          description: content-type\n          type: string\n      required:\n      - content_type\n    example__param_verify__model__SexEnum:\n      title: SexEnum\n      description: An enumeration.\n      enum:\n      - man\n      - woman\n      type: string\n    example__param_verify__model__UserSuccessRespModel__ResponseModel:\n      title: ResponseModel\n      type: object\n      properties:\n        code:\n          title: Code\n          description: api code\n          default: 0\n          type: integer\n        msg:\n          title: Msg\n          description: api status msg\n          default: success\n          type: string\n        data:\n          $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel__ResponseModel__DataModel'\n      required:\n      - data\n    example__param_verify__model__UserSuccessRespModel2__ResponseModel__DataModel:\n      title: DataModel\n      type: object\n      properties:\n        uid:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          example: 666\n          type: integer\n        user_name:\n          title: User Name\n          description: user name\n          maxLength: 10\n          minLength: 2\n          example: mock_name\n          type: string\n        multi_user_name:\n          title: Multi User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          example: !!python/tuple\n          - mock_name\n          type: array\n          items:\n            type: string\n            minLength: 2\n            maxLength: 4\n        sex:\n          description: sex\n          example: !!python/object/apply:example.param_verify.model.SexEnum\n          - man\n          allOf:\n          - $ref: '#/components/schemas/example__param_verify__model__SexEnum'\n        age:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          example: 99\n          type: integer\n        email:\n          title: Email\n          description: user email\n          example: example@so1n.me\n          type: string\n      required:\n      - uid\n      - user_name\n      - multi_user_name\n      - sex\n      - age\n      - email\n    example__param_verify__model__UserSuccessRespModel2__ResponseModel:\n      title: ResponseModel\n      type: object\n      properties:\n        code:\n          title: Code\n          description: api code\n          default: 0\n          type: integer\n        msg:\n          title: Msg\n          description: api status msg\n          default: success\n          type: string\n        data:\n          $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel2__ResponseModel__DataModel'\n      required:\n      - data\n    example__param_verify__model__UserSuccessRespModel3__ResponseModel__DataModel:\n      title: DataModel\n      type: object\n      properties:\n        uid:\n          title: Uid\n          description: user id\n          exclusiveMinimum: 10\n          exclusiveMaximum: 1000\n          type: integer\n        user_name:\n          title: User Name\n          description: user name\n          maxLength: 4\n          minLength: 2\n          type: string\n        age:\n          title: Age\n          description: age\n          exclusiveMinimum: 1\n          exclusiveMaximum: 100\n          type: integer\n        email:\n          title: Email\n          description: user email\n          type: string\n      required:\n      - uid\n      - user_name\n      - age\n      - email\n    example__param_verify__model__UserSuccessRespModel3__ResponseModel:\n      title: ResponseModel\n      type: object\n      properties:\n        code:\n          title: Code\n          description: api code\n          default: 0\n          type: integer\n        msg:\n          title: Msg\n          description: api status msg\n          default: success\n          type: string\n        data:\n          $ref: '#/components/schemas/example__param_verify__model__UserSuccessRespModel3__ResponseModel__DataModel'\n      required:\n      - data\n"
		}
	},
	"Error": "unmarshal: callback: json: cannot unmarshal number into Go struct field Schema.exclusiveMaximum of type bool"
}