{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SemanticComputing/sampo-ui"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "src/server/openapi.yaml",
			"byteSize": 16740,
			"content": "openapi: 3.0.3\ninfo:\n  title: Sampo-UI API\n  description: |\n    This API provides routes for the following search paradigms:\n    *faceted search*, *full text search*, and *federated full text or spatial search*. \n    In general the purpose of the API is to\n    \n    1. convert a request into a SPARQL query using a set of query templates and configurations, \n    2. run the query against a preconfigured SPARQL endpoint,\n    3. process the SPARQL results with a preconfigured result mapper, and  \n    4. return them in JSON or CSV format.\n\n    The routes related to faceted search accept only POST requests, because the\n    facet selection arrays may become so large that they need to be delived in the body of the request. \n    See the schemas for each route for more info about the parameters.\n  version: 1.0.0\nservers:\n  - url: /api/v1\npaths:\n  /faceted-search/{resultClass}/paginated:\n    post:\n      summary: Return faceted search results with pagination\n      parameters:\n      - in: path\n        name: resultClass\n        schema: \n          type: string\n          example: perspective1\n        required: true\n        description: The class of the results\n      requestBody:\n        required: true\n        content: \n          application/json:\n            schema:\n              type: object\n              properties:\n                page:\n                  type: integer\n                  default: 0\n                  example: 0 \n                pagesize:\n                  type: integer\n                  default: 10\n                  example: 10\n                sortBy:\n                 type: string\n                 nullable: true\n                 default: null\n                 example: null\n                sortDirection:\n                  type: string \n                  nullable: true\n                  default: null\n                  example: null\n                constraints:\n                  type: array\n                  items: \n                    type: object\n                  nullable: true\n                  default: null\n                  example: null  \n      responses:\n        '200':   \n          description: Paginated search results\n          content:\n            application/json:\n              schema: \n                type: object\n                properties: \n                  data: \n                    type: array\n                    items: \n                      type: object\n                    description: Results as an array of objects\n                  page:\n                    type: integer\n                    description: The current page\n                  pagesize:\n                    type: integer\n                    description: Items per page\n                  resultClass:\n                    type: string\n                    description: The class of the results    \n                  sparqlQuery:\n                    type: string\n                    description: The SPARQL query that was used for the results\n  /faceted-search/{resultClass}/all:\n    post:\n      summary: Return all search results\n      parameters:\n      - in: path\n        name: resultClass\n        schema: \n          type: string\n          example: placesMsProduced\n        required: true\n        description: The class of the results\n      requestBody:\n        required: true\n        content: \n          application/json:\n            schema:\n              type: object\n              properties:\n                constraints:\n                  type: array\n                  items: \n                    type: object\n                  nullable: true\n                  default: null\n                  example: null  \n      responses:\n        '200':   \n          description: All search results\n          content:\n            application/json:\n              schema: \n                type: object\n    get:\n        summary: Return all search results as a CSV file\n        parameters:\n        - in: path\n          name: resultClass\n          schema: \n            type: string\n            example: perspective1\n          required: true\n          description: The class of the results\n        - in: query\n          name: facetClass\n          schema: \n            type: string\n            example: perspective1\n          required: true\n          description: The class for facet configs\n        - in: query\n          name: constraints\n          required: false\n          content: \n            application/json:\n              schema:\n                type: array\n        - in: query\n          name: resultFormat\n          schema: \n            type: string\n            example: csv\n          required: true\n          description: Result format, only support for CSV for now.\n        responses:\n          '200':   \n            description: All search results as a CSV file\n            content:\n              text/plain:\n                schema:\n                  type: string\n                  format: binary                  \n  /faceted-search/{resultClass}/count:\n    post:\n      summary: Return the total count of the faceted search results\n      parameters:\n      - in: path\n        name: resultClass\n        schema: \n          type: string\n          example: perspective1\n        required: true\n        description: The class of the results\n      requestBody:\n        required: true\n        content: \n          application/json:\n            schema:\n               type: object  \n               properties: \n                   constraints:\n                      type: array\n                      items: \n                        type: object\n                      nullable: true\n                      default: null  \n                      example: null\n      responses:\n        '200':   \n          description: The total count of the faceted search results\n          content:\n            application/json:\n              schema: \n                type: object\n                properties: \n                  data: \n                    type: string\n                  sparqlQuery:\n                    type: string\n                  resultClass: \n                    type: string  \n                  constraints:\n                    type: array\n                    nullable: true\n                    items: \n                      type: object\n                    default: null          \n  /faceted-search/{facetClass}/facet/{id}:\n    post:\n      summary: Return values for a single facet\n      parameters:\n        - in: path\n          name: facetClass\n          schema: \n            type: string\n            example: perspective1\n          required: true\n          description: The class of the facet\n        - in: path\n          name: id\n          schema: \n            type: string\n            example: language\n          required: true\n          description: The id of the facet\n      requestBody:\n        required: true\n        content: \n          application/json:\n            schema:\n              type: object\n              properties:\n                sortBy:\n                 type: string\n                 example: instanceCount\n                sortDirection:\n                  type: string \n                  example: desc\n                constraints:\n                    type: array\n                    items: \n                      type: object\n                    nullable: true\n                    default: null\n                constrainSelf:\n                  type: boolean\n                  default: false           \n      responses:\n        '200':   \n          description: Facet values\n          content:\n            application/json:\n              schema: \n                type: object\n                properties: \n                  data:\n                    oneOf:\n                      - type: array\n                        items: \n                          type: object\n                      - type: object \n                    description: Facet values as an array of objects (checkbox facets) \n                      or as a single object (timespan facets).              \n                  flatData: \n                    type: array\n                    items: \n                      type: object\n                    description: Facet values as an array of objects with no hierarchy  \n                  id:\n                    type: string\n                    description: The id of facet\n                  sparqlQuery:\n                    type: string\n                    description: The SPARQL query that was used for the values of the facet                 \n  /{resultClass}/page/{uri}:\n    post: \n      summary: Return information about a single resource, optionally applying facet filters\n      parameters:\n        - in: path\n          name: resultClass\n          schema: \n            type: string\n            example: perspective1\n          required: true\n          description: The class of the resource\n        - in: path\n          name: uri\n          schema: \n            type: string\n            example: http://ldf.fi/mmm/manifestation_singleton/bibale_10003\n          required: true\n          description: The URI of the resource\n      requestBody:\n        required: true\n        content: \n          application/json:\n            schema:\n              type: object\n              properties:\n                facetClass:\n                 type: string\n                constraints:\n                    type: array\n                    items: \n                      type: object\n                    nullable: true\n                    default: null\n      responses:\n        '200':\n          description: Information about a single resource\n          content:\n            application/json:\n              schema: \n                type: object\n                properties: \n                  data: \n                    type: array\n                    items: \n                      type: object\n                    description: An array containing one object describing the resource\n                  sparqlQuery:\n                    type: string\n                    description: The SPARQL query that was used for retrieving the metadata\n  /full-text-search:\n    get:\n      summary: Full text search\n      parameters:\n        - in: query\n          name: q\n          schema: \n            type: string\n          required: true\n          allowReserved: true \n          description: The query string\n      responses:\n        '200':\n          description: Full text search results\n          content:\n            application/json:\n              schema: \n                type: object\n                properties: \n                  data: \n                    type: array\n                    items: \n                      type: object\n                    description: An array of objects\n                  sparqlQuery:\n                    type: string\n                    description: The SPARQL query that was used for retrieving the results    \n  /federated-search:\n    get:\n      summary: Federated search can be used for retrieving the initial result set from multiple SPARQL \n        endpoints for client-side faceted search.\n      parameters:\n        - in: query\n          name: perspectiveID\n          schema: \n            type: string\n          required: true  \n        - in: query\n          name: dataset\n          schema:\n            type: array\n            items: \n              type: string\n          explode: true\n          required: true\n        - in: query\n          name: q\n          schema: \n            type: string \n          allowReserved: true  \n          description: The query string\n        - in: query\n          name: latMin\n          schema: \n            type: number\n        - in: query\n          name: longMin\n          schema: \n            type: number\n        - in: query\n          name: latMax\n          schema: \n            type: number\n        - in: query\n          name: longMax\n          schema: \n            type: number\n      responses:\n        '200':\n          description: Federated search results\n          content:\n            application/json:\n              schema: \n                type: array\n                items:\n                  type: object\n                description: Search results from multiple SPARQL endpoints\n                      merged into a single array\n  /wfs:\n    get:\n      summary: Make preconfigured Web Feature Service (WFS) API calls via the backend. \n      parameters:\n        - in: query\n          name: layerID\n          schema: \n            type: array\n            items: \n              type: string\n          explode: true\n          required: true\n      responses:\n        '200':\n          description: An array of GeoJSON layers.\n          content:\n            application/json:\n              schema:\n                type: array\n  /fha-wms:\n    get:\n      summary: Route for password protected WMS layers.\n      parameters:\n        - in: query\n          name: service\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: request\n          schema:\n            type: string\n          required: true \n        - in: query\n          name: layers\n          schema:\n            type: string\n          required: true  \n        - in: query\n          name: styles\n          schema:\n            type: string\n          allowEmptyValue : true\n          required: true  \n        - in: query\n          name: format\n          schema:\n            type: string\n          required: true    \n        - in: query\n          name: transparent\n          schema:\n            type: boolean\n          required: true\n        - in: query\n          name: version\n          schema:\n            type: string\n          required: true   \n        - in: query\n          name: width\n          schema:\n            type: number\n          required: true\n        - in: query\n          name: height\n          schema:\n            type: number\n          required: true\n        - in: query\n          name: crs\n          schema:\n            type: string\n          required: true \n        - in: query\n          name: bbox\n          schema:\n            type: string\n          allowReserved: true  \n          required: true       \n      responses:\n        '200':\n          description: Image\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary     \n  /nls-wmts:\n    get:\n      summary: Route for NLS WMTS API. Only for contract customers. \n      parameters:\n        - in: query\n          name: layerID\n          schema: \n            type: string\n          required: true\n        - in: query\n          name: x\n          schema: \n            type: string\n          required: true\n        - in: query\n          name: y \n          schema: \n            type: string\n          required: true\n        - in: query\n          name: z\n          schema: \n            type: string\n          required: true  \n      responses:\n        '200':\n          description: An array of GeoJSON layers.\n          content:\n            application/json:\n              schema:\n                type: array    \n  /nls-wmts-open:\n    get:\n      summary: Route for NLS WMTS API, free but requires an API key.\n      parameters:\n        - in: query\n          name: layerID\n          schema: \n            type: string\n          required: true\n        - in: query\n          name: x\n          schema: \n            type: string\n          required: true\n        - in: query\n          name: y \n          schema: \n            type: string\n          required: true\n        - in: query\n          name: z\n          schema: \n            type: string\n          required: true  \n      responses:\n        '200':\n          description: An array of GeoJSON layers.\n          content:\n            application/json:\n              schema:\n                type: array                    \n  /nls-vectortiles-open:\n    get:\n      summary: Route for NLS vectortiles API, free but requires an API key. \n      responses:\n        '200':\n          description: Styles for vector tiles as JSON\n          content:\n            application/json:\n              schema:\n                type: object\n  /void/{perspectiveID}/{resultClass}:\n    get:\n      summary: Retrieve a VoID description\n      parameters:\n        - in: path\n          name: perspectiveID\n          schema: \n            type: string\n            example: perspective1\n          required: true\n        - in: path\n          name: resultClass\n          schema: \n            type: string\n            example: perspective1KnowledgeGraphMetadata\n          required: true\n      responses:\n        '200':\n          description: VoID description as JSON.\n          content:\n            application/json:\n              schema:\n                type: object              \n\n\n        \n\n\n",
			"canonicalURL": "/github.com/SemanticComputing/sampo-ui@a388d753b8e9e435a2807710e131795d10423c98/-/blob/src/server/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/SemanticComputing/sampo-ui/blob/a388d753b8e9e435a2807710e131795d10423c98/src/server/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:8557: json: cannot unmarshal Go value of type ogen.Spec: spec: json: cannot unmarshal JSON boolean into Go value of type string"
}