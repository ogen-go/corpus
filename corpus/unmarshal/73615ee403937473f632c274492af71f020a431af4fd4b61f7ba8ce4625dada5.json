{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/WendellAdriel/larapi"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "public/swagger/openapi.yaml",
			"byteSize": 12676,
			"content": "openapi: 3.0.0\ninfo:\n  title: LarAPI\n  version: '1.0'\npaths:\n  /:\n    get:\n      tags:\n        - 'Health Check'\n      summary: 'Health check route'\n      description: 'Returns the application name, environment and status of the API'\n      responses:\n        '200':\n          description: 'API info'\n          content:\n            application/json:\n              schema:\n                properties:\n                  data: { properties: { application: { type: string }, environment: { type: string }, status: { type: integer } }, type: object }\n                type: object\n  /v1/auth/login:\n    post:\n      tags:\n        - Auth\n      summary: 'Gets a JWT via given credentials'\n      description: 'Logs in a user and gets the JWT token'\n      operationId: 34d0b1a967eb330a2bbd525c81a39e09\n      requestBody:\n        description: 'User credentials'\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: 'The JWT Token'\n          content:\n            application/json:\n              schema:\n                properties:\n                  access_token: { description: 'The JWT Token', type: string }\n                  token_type: { description: 'The Token type', type: string }\n                  expires_in: { description: 'The value in seconds for the token to expire', type: integer }\n                type: object\n        '401':\n          description: Unauthorized\n  /v1/auth/logout:\n    post:\n      tags:\n        - Auth\n      summary: 'Invalidates the token'\n      description: 'Logs out a user and invalidates the JWT token'\n      operationId: d0d7d8d2137a2c33c9c669ea1a811f65\n      responses:\n        '200':\n          description: 'Logout message'\n          content:\n            application/json:\n              schema:\n                properties:\n                  message: { type: string }\n                type: object\n        '401':\n          description: Unauthorized\n      security:\n        jwt: {  }\n  /v1/auth/refresh:\n    post:\n      tags:\n        - Auth\n      summary: 'Refreshes a token'\n      description: 'Refresh the JWT Token, invalidating the old one and generating a new one'\n      operationId: 77dd359a393b3d4fc328bd2b78c35153\n      responses:\n        '200':\n          description: 'The new JWT Token'\n          content:\n            application/json:\n              schema:\n                properties:\n                  access_token: { description: 'The JWT Token', type: string }\n                  token_type: { description: 'The Token type', type: string }\n                  expires_in: { description: 'The value in seconds for the token to expire', type: integer }\n                type: object\n        '401':\n          description: Unauthorized\n      security:\n        jwt: {  }\n  /v1/auth/me:\n    get:\n      tags:\n        - 'Logged User Info'\n      summary: 'Gets the authenticated user'\n      description: 'Gets the logged User'\n      operationId: b5e78dc6c5e7de4ffe51ec1b4a19153b\n      responses:\n        '200':\n          description: 'The logged user info'\n          content:\n            application/json:\n              schema:\n                properties:\n                  user: { properties: { id: { type: integer }, uuid: { type: string }, name: { type: string }, email: { type: string }, active: { type: boolean }, role_id: { type: integer }, settings: { type: object }, last_login: { type: string }, created_at: { type: string }, updated_at: { type: string }, is_admin: { type: boolean }, is_manager: { type: boolean }, is_user: { type: boolean }, is_viewer: { type: boolean }, role_label: { type: string }, role: { properties: { id: { type: integer }, name: { type: string }, created_at: { type: string }, updated_at: { type: string } }, type: object } }, type: object }\n                type: object\n        '401':\n          description: Unauthorized\n      security:\n        jwt: {  }\n  /v1/auth/me/roles:\n    get:\n      tags:\n        - 'Logged User Info'\n      summary: 'Gets the authenticated user allowed roles'\n      description: 'Gets the logged User allowed roles'\n      operationId: fb387edeacbb76c9719ca8e454784995\n      responses:\n        '200':\n          description: 'The logged user allowed roles'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  properties: { id: { type: integer }, name: { type: string }, created_at: { type: string }, updated_at: { type: string } }\n                  type: object\n        '401':\n          description: Unauthorized\n      security:\n        jwt: {  }\n  /v1/users:\n    get:\n      tags:\n        - 'Users Management'\n      summary: 'Gets the list of users'\n      description: 'Gets the list of users'\n      operationId: 5645cb972ce7339b915a65f7d7c09dde\n      parameters:\n        -\n          name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n            default: 1\n        -\n          name: per_page\n          in: query\n          required: false\n          schema:\n            type: integer\n            default: 20\n        -\n          name: sort\n          in: query\n          required: false\n          schema:\n            properties:\n              field:\n                description: 'Field name to use in sort'\n                type: string\n              order:\n                description: 'Order: ''asc'' or ''desc'''\n                type: string\n            type: object\n        -\n          name: search\n          in: query\n          description: 'Term to search'\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'The list of users'\n          content:\n            application/json:\n              schema:\n                properties:\n                  data: { type: array, items: { properties: { id: { type: integer }, uuid: { type: string }, name: { type: string }, email: { type: string }, active: { type: boolean }, role_id: { type: integer }, settings: { type: object }, last_login: { type: string }, created_at: { type: string }, updated_at: { type: string }, is_admin: { type: boolean }, is_manager: { type: boolean }, is_user: { type: boolean }, is_viewer: { type: boolean }, role_label: { type: string }, role: { properties: { id: { type: integer }, name: { type: string }, created_at: { type: string }, updated_at: { type: string } }, type: object } }, type: object } }\n                  pagination: { properties: { page_count: { type: integer }, total: { description: 'The filtered total count', type: integer }, total_all: { description: 'The unfiltered total count', type: integer } }, type: object }\n                type: object\n        '400':\n          description: 'Invalid Request'\n        '401':\n          description: Unauthorized\n        '403':\n          description: 'Access Denied'\n        '404':\n          description: 'Resource not found'\n      security:\n        jwt: {  }\n    post:\n      tags:\n        - 'Users Management'\n      summary: 'Creates a new user'\n      description: 'Creates a new user'\n      operationId: af74cf6a83b5fd3f8504dfab32c67fcb\n      requestBody:\n        description: 'Info needed to create a new user'\n        content:\n          application/json:\n            schema:\n              required:\n                - name\n                - email\n                - password\n                - password_confirmation\n              properties:\n                name:\n                  type: string\n                email:\n                  type: string\n                password:\n                  description: 'Must contain at least one lowercase letter, one uppercase letter, one number and one special character'\n                  type: string\n                password_confirmation:\n                  type: string\n                active:\n                  type: boolean\n                  default: true\n                role_id:\n                  type: integer\n                  default: 3\n              type: object\n      responses:\n        '201':\n          description: 'The success response'\n          content:\n            application/json:\n              schema:\n                properties:\n                  success: { type: boolean }\n                type: object\n        '400':\n          description: 'Invalid Request'\n        '401':\n          description: Unauthorized\n        '403':\n          description: 'Access Denied'\n        '422':\n          description: 'Data is invalid'\n      security:\n        jwt: {  }\n  '/v1/users/{uuid}':\n    get:\n      tags:\n        - 'Users Management'\n      summary: 'Gets the info of a specific user'\n      description: 'Gets the info of a specific user'\n      operationId: 03eb3f42821714d8aec3558719009b42\n      parameters:\n        -\n          name: uuid\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'The user info'\n          content:\n            application/json:\n              schema:\n                properties:\n                  id: { type: integer }\n                  uuid: { type: string }\n                  name: { type: string }\n                  email: { type: string }\n                  active: { type: boolean }\n                  role_id: { type: integer }\n                  settings: { type: object }\n                  last_login: { type: string }\n                  created_at: { type: string }\n                  updated_at: { type: string }\n                  is_admin: { type: boolean }\n                  is_manager: { type: boolean }\n                  is_user: { type: boolean }\n                  is_viewer: { type: boolean }\n                  role_label: { type: string }\n                  role: { properties: { id: { type: integer }, name: { type: string }, created_at: { type: string }, updated_at: { type: string } }, type: object }\n                type: object\n        '400':\n          description: 'Invalid Request'\n        '401':\n          description: Unauthorized\n        '403':\n          description: 'Access Denied'\n        '404':\n          description: 'Resource not found'\n      security:\n        jwt: {  }\n    put:\n      tags:\n        - 'Users Management'\n      summary: 'Updates the info of a specific user'\n      description: 'Updates the info of a specific user'\n      operationId: 5caf79b05a6aa475e8e2939066866b05\n      requestBody:\n        description: 'Info needed to update the user info'\n        content:\n          application/json:\n            schema:\n              required:\n                - name\n              properties:\n                name:\n                  type: string\n                password:\n                  description: 'Must contain at least one lowercase letter, one uppercase letter, one number and one special character'\n                  type: string\n                password_confirmation:\n                  type: string\n                active:\n                  type: boolean\n                role_id:\n                  type: integer\n              type: object\n      responses:\n        '200':\n          description: 'The success response'\n          content:\n            application/json:\n              schema:\n                properties:\n                  success: { type: boolean }\n                type: object\n        '400':\n          description: 'Invalid Request'\n        '401':\n          description: Unauthorized\n        '403':\n          description: 'Access Denied'\n        '422':\n          description: 'Data is invalid'\n      security:\n        jwt: {  }\n    delete:\n      tags:\n        - 'Users Management'\n      summary: 'Deletes a specific user'\n      description: 'Deletes a specific user'\n      operationId: 1a55ef8162ba4820b0cd5bff160f79f0\n      parameters:\n        -\n          name: uuid\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'The success response'\n          content:\n            application/json:\n              schema:\n                properties:\n                  success: { type: boolean }\n                type: object\n        '400':\n          description: 'Invalid Request'\n        '401':\n          description: Unauthorized\n        '403':\n          description: 'Access Denied'\n        '404':\n          description: 'Resource not found'\n      security:\n        jwt: {  }\ncomponents:\n  securitySchemes:\n    jwt:\n      type: http\n      name: jwt\n      in: header\n      bearerFormat: JWT\n      scheme: bearer\n"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal object into Go struct field Operation.paths.post.security of type ogen.SecurityRequirements"
}