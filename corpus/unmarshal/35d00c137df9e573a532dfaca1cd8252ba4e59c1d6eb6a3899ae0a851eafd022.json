{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Digitaler-Impfnachweis/certification-apis"
		},
		"file": {
			"name": "dcc-reissue-api.yaml",
			"size": 0,
			"path": "dcc-reissue-api.yaml",
			"byteSize": 7543,
			"content": "openapi: 3.0.1\nservers:\n  - url: https://api.reissue.demo.ubirch.com/\n    description: STAGING re-issue api server\n  - url: https://api.reissue.ubirch.com/\n    description: PRODUCTION re-issue api server\ninfo:\n  title: Re-issue Service API\n  description: |\n    The re-issue service API generates signed\n    [Digital Green Certificate (DGC)](https://github.com/ehn-digital-green-development/ehn-dgc-schema)\n    conforming certificates with the short validity and based on current regulations. It is mainly used by Apps\n    to re-issue validation certificates.\n\n    ```\n    Copyright (C) 2021 IBM Deutschland GmbH\n    Copyright (C) 2021 ubirch GmbH\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n    ```\n\n  version: 2.0.0\n  license:\n    name: 'Apache License, Version 2.0'\n    url: 'https://www.apache.org/licenses/LICENSE-2.0'\n  contact:\n    name: UBIRCH GmbH\n    url: https://ubirch.com\n    email: mailto:support@ubirch.com\npaths:\n  # ===========================================================\n  # Available API endpoints\n  # ===========================================================\n  /api/certify/v2/reissue:\n    post:\n      tags:\n        - Re-issuing\n      summary: Re-issue a new certificate based on an existing valid certificate.\n      description: |\n        # Description\n\n        Re-issue a new certificate based on an existing valid certificate. This operation verifies the authenticity and\n        the integrity of the certificate, checks some formal rules of the content of the certificate and re-issues\n        a new certificate with a different validity and/or re-encoded specifics (i.e. series encoding) than the original\n        certificate.\n\n        *Applications:* mobile applications, wallet apps\n      requestBody:\n        description: |\n          A list of valid Digital Green Certificate(s) (DGC) signed in Germany (DE) that are needed for re-issue.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                action:\n                  description: |\n                    The operation to execute on the input certificate(s). All certificates in a single request\n                    must adhere to same-person rule. Each request operates on certificates of one person.\n                  type: string\n                  required: true\n                  enum:\n                    - renew\n                    - combine\n                certificates:\n                  description: One or more certificates required for the operation.\n                  type: array\n                  required: true\n                  minItems: 1\n                  items:\n                    '$ref': 'dcc-certify-api.yaml#/components/schemas/CertificateEncoded'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                description: |\n                  The result of the operation, which may be one or more certificates. For each certificate the \n                  executed operation is indicated.\n                type: array\n                items:\n                  '$ref': '#/components/schemas/CertificateReissueResponse'\n        '400':\n          description: Invalid Request\n          content:\n            text/plain:\n              schema:\n                type: string\n              examples:\n                size:\n                  summary: request too large\n                  description: A maximum size for the request body is enforced.\n                  value: body too large\n                invalid:\n                  summary: invalid request\n                  description: The request body could not be parsed or contains invalid fields.\n                  value: invalid request\n        '401':\n          description: Authentication Failure (Invalid Signature)\n          content:\n            text/plain:\n              schema:\n                type: string\n              examples:\n                notallowed:\n                  summary: invalid key id\n                  description: A certificate contains a wrong KID.\n                  value: a certificate could not be verified\n                verification:\n                  summary: signature failed\n                  description: A certificate did not pass the signature verification test.\n                  value: signature verification failed\n        '403':\n          description: Forbidden (Valid Signature, Forbidden DCC)\n          content:\n            text/plain:\n              schema:\n                type: string\n              examples:\n                combination:\n                  summary: unknown action\n                  description: The action is now allowed for this combination of certificates.\n                  value: certificates not acceptable for action\n        '406':\n          description: Incorrect CBOR data or invalid content\n          content:\n            text/plain:\n              schema:\n                type: string\n              examples:\n                action:\n                  summary: unknown action\n                  description: The action field contains an unknown value.\n                  value: action not acceptable\n                format:\n                  summary: format error\n                  description: A certificate does not conform to the COSE standard.\n                  value: invalid certificate format\n                encoding:\n                  summary: encoding error\n                  description: A certificate failes to decode or decompress.\n                  value: invalid certificate encoding\n        '411':\n          description: Length Required\n          content:\n            text/plain:\n              schema:\n                type: string\n              examples:\n                length:\n                  description: The request must have a fixed length.\n                  value: length required\n        '500':\n          description: Internal Server Error\n#      security:\n#        - AppBearerToken: [ ]\n\n#components:\n#  securitySchemes:\n#    AppBearerToken:\n#      type: http\n#      description: \u003e-\n#        Authentication is based on a bearer token\n#      scheme: bearer\n#      bearerFormat: JWT\n\ncomponents:\n  schemas:\n    CertificateReissueResponse:\n      type: object\n      properties:\n        certificate:\n          '$ref': 'dcc-certify-api.yaml#/components/schemas/CertificateEncoded'\n        relations:\n          description: Array of certificates related to this new certificate indicating the action.\n          type: array\n          items:\n            '$ref': '#/components/schemas/CertificateReissueRelation'\n\n    CertificateReissueRelation:\n      type: object\n      properties:\n        index:\n          description: The index of the related certificate from the request.\n          type: number\n        action:\n          description: |\n            The operational relation to the new certificate.\n            (The nop action will be removed on production.)\n          type: string\n          enum:\n            - replace\n            - nop\n"
		}
	},
	"Error": "unmarshal: callback: json: cannot unmarshal bool into Go struct field Schema.required of type []string"
}