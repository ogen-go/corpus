{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/isel-leic-ipw/IPW-2022i-LEIC31N"
		},
		"file": {
			"name": "jokes-api.yaml",
			"size": 0,
			"path": "lesson24/docs/jokes-api.yaml",
			"byteSize": 6449,
			"content": "openapi: 3.0.1\ninfo:\n  title: Jokes API\n  description: This is a simple Jokes API\n  contact:\n    email: you@your-company.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\nservers:\n  - description: Localhost server for testing API\n    url: http://localhost:1904/api\n\ntags:\n- name: jokes\n- name: users\n\npaths:\n  /users:\n    post:\n      tags:\n      - users\n      summary: adds a user\n      description: Adds a user to the system\n      operationId: addUser\n      requestBody:\n        description: User to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewUser'\n        required: false\n      responses:\n        201:\n          description: user created\n          content:\n            application/json:\n              schema:\n                required:\n                - token\n                type: object\n                properties:\n                  token:\n                    type: string\n                    format: uuid\n        400:\n          description: Invalid input, object invalid\n          content: {}\n      x-codegen-request-body-name: user\n  /jokes:\n    get:\n      tags:\n      - jokes\n      summary: get jokes\n      description: By passing in the appropriate options, you can search for available\n        jokes\n      operationId: getJokes\n      security:\n        - bearerAuth: []\n      parameters:\n      - name: Authorization\n        in: header\n        required: false\n        schema:\n          type: string\n          format: uuid\n      - name: searchString\n        in: query\n        description: pass an optional search string for looking up jokes with that  text\n        schema:\n          type: string\n      - name: skip\n        in: query\n        description: number of records to skip for pagination\n        schema:\n          minimum: 0\n          type: integer\n      - name: limit\n        in: query\n        description: maximum number of records to return\n        schema:\n          maximum: 50\n          minimum: 0\n          type: integer\n      responses:\n        200:\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Joke'\n        400:\n          description: bad input parameter\n          content: {}\n    post:\n      tags:\n      - jokes\n      summary: adds a joke\n      description: Adds a joke to the system\n      operationId: addJoke\n      security:\n        - bearerAuth: []\n      parameters:\n      - name: Authorization\n        in: header\n        required: true\n        schema:\n          type: string\n          format: uuid\n      requestBody:\n        description: Joke to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewJoke'\n        required: false\n      responses:\n        201:\n          description: Joke created\n          content: {}\n        400:\n          description: Invalid input, object invalid\n          content: {}\n      x-codegen-request-body-name: joke\n  /jokes/{jokeId}:\n    get:\n      tags:\n      - jokes\n      summary: Get a joke given its id\n      description: Get a joke given its id\n      operationId: getJokeById\n      security:\n        - bearerAuth: []\n      parameters:\n      - name: Authorization\n        in: header\n        schema:\n          type: string\n          format: uuid\n      - name: jokeId\n        in: path\n        description: ID of joke that to be fetched\n        required: true\n        schema:\n          type: integer\n          minimum: 1\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Joke'\n        400:\n          description: Invalid ID supplied\n          content: \n            application/json:\n              schema: \n                type: string\n                example: Invalid ID supplied\n        404:\n          description: Joke not found\n          content: \n            application/json:\n              schema: \n                type: string\n                example: Joke Not found\n    put:\n      tags:\n      - jokes\n      summary: updates a joke\n      description: Updates a Joke in the system\n      operationId: updateJoke\n      security:\n        - bearerAuth: []\n      parameters:\n      - name: Authorization\n        in: header\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: jokeId\n        in: path\n        description: ID of the joke to be deleted\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        description: Joke to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Joke'\n        required: false\n      responses:\n        201:\n          description: joke updated\n          content: {}\n        404:\n          description: Joke not found\n          content: {}\n      x-codegen-request-body-name: joke\n    delete:\n      tags:\n      - jokes\n      summary: Delete a joke by ID\n      description: Delete a joke by ID\n      operationId: deleteJoke\n      security:\n        - bearerAuth: []\n      parameters:\n      - name: jokeId\n        in: path\n        description: ID of the joke to be deleted\n        required: true\n        schema:\n          type: integer\n      responses:\n        200: \n          description: Joke deleted\n          content: { status: \"joke with id 123 deleted\" } \n        400:\n          description: Invalid ID supplied\n          content: {}\n        404:\n          description: Joke not found\n          content: {}\ncomponents:\n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n  schemas:\n    Joke:\n      required:\n      - id\n      - text\n      - userId\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n        text:\n          type: string\n          example: study PI\n        userId:\n          type: integer\n    NewJoke:\n      required:\n      - text\n      type: object\n      properties:\n        text:\n          type: string\n          example: study PI\n    NewUser:\n      required:\n      - userName\n      type: object\n      properties:\n        userName:\n          type: string\n          example: joao\n",
			"canonicalURL": "/github.com/isel-leic-ipw/IPW-2022i-LEIC31N@511a8f167693300e82973fbe78377db13f382fd5/-/blob/lesson24/docs/jokes-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/isel-leic-ipw/IPW-2022i-LEIC31N/blob/511a8f167693300e82973fbe78377db13f382fd5/lesson24/docs/jokes-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:2546: json: cannot unmarshal Go value of type ogen.Spec: spec: json: cannot unmarshal JSON string into Go value of type ogen.Media"
}