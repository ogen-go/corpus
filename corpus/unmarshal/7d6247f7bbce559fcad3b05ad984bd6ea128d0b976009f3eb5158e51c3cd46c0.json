{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/teamhanko/hanko"
		},
		"file": {
			"name": "public.yaml",
			"size": 0,
			"path": "docs/static/spec/public.yaml",
			"byteSize": 34495,
			"content": "\nopenapi: 3.0.0\ninfo:\n  version: '0.2.0'\n  title: 'Hanko Public API'\n  description: |\n    ## Introduction\n\n    This is the OpenAPI specification for the [Hanko Public API](https://github.com/teamhanko/hanko/blob/main/backend/README.md#basic-usage).\n\n    ## Authentication\n\n    The API uses [JSON Web Tokens](https://www.rfc-editor.org/rfc/rfc7519.html) (JWTs) for authentication.\n    JWTs are verified using [JSON Web Keys](https://www.rfc-editor.org/rfc/rfc7517) (JWK).\n    JWKs can be [configured](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#all-available-config-options)\n    through the `secrets.keys` options. The API also publishes public cryptographic keys as a\n    [JWK set](https://www.rfc-editor.org/rfc/rfc7517#section-2) through the `.well-known/jwks.json` endpoint\n    to enable clients to verify token signatures.\n    JWTs must be provided on requests to protected endpoints using one of the following schemes:\n\n    ### CookieAuth\n\n    **Security Scheme Type**: `API Key`\n\n    **Cookie parameter name**: `hanko`\n\n    The JWT must be provided in a Cookie with the name `hanko`.\n\n    ### BearerTokenAuth\n\n    **Security Scheme Type**: `http`\n\n    **HTTP Authorization Scheme**: `Bearer`\n\n    **Bearer format**: `JWT`\n\n    The JWT must be provided in an HTTP Authorization header with bearer type: `Authorization: Bearer \u003cJWT\u003e`.\n\n    ## Cross-Origin Resource Sharing\n\n    Cross-Origin Resource Sharing (CORS) can be currently\n    [configured](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#all-available-config-options)\n    for public endpoints via the `server.public.cors` options.\n\n    ---\n\n  contact:\n    email: developers@hanko.io\n  license:\n    name: AGPL-3.0-or-later\n    url: https://www.gnu.org/licenses/agpl-3.0.txt\nexternalDocs:\n  description: More about Hanko\n  url: https://github.com/teamhanko/hanko\nservers:\n  - url: 'localhost:3000'\npaths:\n  /passcode/login/initialize:\n    post:\n      summary: 'Initialize passcode login'\n      description: |\n        Initialize a passcode login for the user identified by `user_id`. Sends an email\n        containing the actual passcode to the user. Returns a representation of the passcode.\n      operationId: passcodeInit\n      tags:\n        - Passcode\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  description: The ID of the user\n                  allOf:\n                    - $ref: '#/components/schemas/UUID4'\n      responses:\n        '200':\n          description: 'Successful passcode login initialization'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Passcode'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /passcode/login/finalize:\n    post:\n      summary: 'Finalize passcode login'\n      description: |\n        Finalize a passcode login given the `id` of the passcode and the actual `code` provided in the the email sent\n        to the user during initialization.\n\n        On success, sets the User's `verified` status to `true`.\n      operationId: passcodeFinal\n      tags:\n        - Passcode\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  description: The ID of the passcode\n                  allOf:\n                    - $ref: '#/components/schemas/UUID4'\n                code:\n                  type: string\n                  minLength: 6\n                  maxLength: 6\n                  description: |\n                    The actual passcode from the email sent to the user during initialization,\n                    a string of 6 decimal digits\n                  example: \"897481\"\n      responses:\n        '200':\n          description: 'Successful passcode login finalization'\n          headers:\n            X-Auth-Token:\n              description: |\n                Present only when enabled via [configuration](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#hanko-backend-config) option `session.enable_auth_token_header`\n                for purposes of cross-domain communication between client and Hanko API.\n              schema:\n                $ref: '#/components/schemas/X-Auth-Token'\n            Set-Cookie:\n              description: |\n                Contains the JSON Web Token (JWT) that must be provided to protected endpoints.\n                Cookie attributes (e.g. domain) can be set via [configuration](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#hanko-backend-config) option `session.cookie`.\n              schema:\n                $ref: '#/components/schemas/CookieSession'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Passcode'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '410':\n          $ref: '#/components/responses/Gone'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /password/login:\n    post:\n      summary: 'Do password login'\n      description: |\n        Perform a password login for the user identified by `user_id` and a given `password`.\n\n        This endpoint is only available if passwords have been enabled via [configuration](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#hanko-backend-config) option `passwords.enabled`.\n      operationId: passwordLogin\n      tags:\n        - Password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  description: The ID of the user to perform a password login for\n                  allOf:\n                    - $ref: '#/components/schemas/UUID4'\n                password:\n                  $ref: '#/components/schemas/Password'\n              required:\n                - user_id\n                - password\n      responses:\n        '200':\n          description: 'Successful password login'\n          headers:\n            X-Auth-Token:\n              description: |\n                Present only when enabled via [configuration](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#hanko-backend-config) option `session.enable_auth_token_header`\n                for purposes of cross-domain communication between client and Hanko API.\n              schema:\n                $ref: '#/components/schemas/X-Auth-Token'\n            Set-Cookie:\n              description: |\n                Contains the JSON Web Token (JWT) that must be provided to protected endpoints.\n                Cookie attributes (e.g. domain) can be set via [configuration](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#hanko-backend-config) option `session.cookie`.\n              schema:\n                $ref: '#/components/schemas/CookieSession'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Passcode'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /password:\n    put:\n      summary: 'Create/Set a password'\n      description: |\n        Create a or update an existing `password` for the user identified by `user_id`.\n\n        This endpoint is only available if passwords have been enabled via [configuration](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#hanko-backend-config) option `passwords.enabled`.\n      operationId: password\n      tags:\n        - Password\n      security:\n        - CookieAuth: [ ]\n        - BearerTokenAuth: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  description: The ID of the user to create/set a password for\n                  allOf:\n                    - $ref: '#/components/schemas/UUID4'\n                password:\n                  $ref: '#/components/schemas/Password'\n              required:\n                - user_id\n                - password\n      responses:\n        '200':\n          description: 'Successful password update'\n        '201':\n          description: 'Successful password creation'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /webauthn/login/initialize:\n    post:\n      summary: 'Initialize WebAuthn login'\n      description: |\n        Initialize a login with Webauthn. Returns a JSON representation of CredentialRequestOptions for use\n        with the Webauthn API's `navigator.credentials.get()`.\n\n        Omitting the optional request body results in generation of request options for a login using a\n        [discoverable credential](https://www.w3.org/TR/webauthn-2/#client-side-discoverable-public-key-credential-source)\n        (i.e. they will not contain\n        [allowCredentials](https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialrequestoptions-allowcredentials)).\n\n        *Note*: The Webauthn API uses binary data represented by ArrayBuffers for certain input/output values.\n        The Hanko API returns these values as base64url-encoded, so they must be converted to ArrayBuffers\n        when passed to the Webauthn API. Similarly, Webauthn API output must be converted to base64url-encoded values\n        when passed to the Hanko API (e.g. using the [webauthn-json](https://github.com/github/webauthn-json) library).\n      operationId: webauthnLoginInit\n      tags:\n        - WebAuthn\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  description: The ID of the user on whose behalf WebAuthn login should be performed\n                  allOf:\n                    - $ref: '#/components/schemas/UUID4'\n      responses:\n        '200':\n          description: 'Successful initialization'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialRequestOptions'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /webauthn/login/finalize:\n    post:\n      summary: 'Finalize WebAuthn login'\n      description: |\n        Finalize a login with Webauthn using the WebAuthn API response to a `navigator.credentials.get()` call.\n\n        *Note*: The Webauthn API uses binary data represented by ArrayBuffers for certain input/output values.\n        The Hanko API returns these values as base64url-encoded, so they must be converted to ArrayBuffers\n        when passed to the Webauthn API. Similarly, Webauthn API output must be converted to base64url-encoded values\n        when passed to the Hanko API (e.g. using the [webauthn-json](https://github.com/github/webauthn-json) library).\n      operationId: webauthnLoginFinal\n      tags:\n        - WebAuthn\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PublicKeyCredentialAssertionResponse'\n      responses:\n        '204':\n          description: 'Successful login'\n          headers:\n            X-Auth-Token:\n              description: |\n                Present only when enabled via [configuration](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#hanko-backend-config) option `session.enable_auth_token_header`\n                for purposes of cross-domain communication between client and Hanko API.\n              schema:\n                $ref: '#/components/schemas/X-Auth-Token'\n            Set-Cookie:\n              description: |\n                Contains the JSON Web Token (JWT) that must be provided to protected endpoints.\n                Cookie attributes (e.g. domain) can be set via [configuration](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#hanko-backend-config) option `session.cookie`.\n              schema:\n                $ref: '#/components/schemas/CookieSession'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebauthnLoginResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /webauthn/registration/initialize:\n    post:\n      summary: 'Initialize WebAuthn registration'\n      description: |\n        Initialize a registration with Webauthn. Returns a JSON representation of CredentialCreationOptions for use\n        with the Webauthn API's `navigator.credentials.create()`.\n\n        *Note*: The Webauthn API uses binary data represented by ArrayBuffers for certain input/output values.\n        The Hanko API returns these values as base64url-encoded, so they must be converted to ArrayBuffers\n        when passed to the Webauthn API. Similarly, Webauthn API output must be converted to base64url-encoded values\n        when passed to the Hanko API (e.g. using the [webauthn-json](https://github.com/github/webauthn-json) library).\n      operationId: webauthnRegInit\n      tags:\n        - WebAuthn\n      security:\n        - CookieAuth: [ ]\n        - BearerTokenAuth: [ ]\n      responses:\n        '200':\n          description: 'Challenge'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialCreationOptions'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /webauthn/registration/finalize:\n    post:\n      summary: 'Finalize WebAuthn registration'\n      description: |\n        Finalize a registration with Webauthn using the WebAuthn API response to a `navigator.credentials.create()` call.\n\n        *Note*: The Webauthn API uses binary data represented by ArrayBuffers for certain input/output values.\n        The Hanko API returns these values as base64url-encoded, so they must be converted to ArrayBuffers\n        when passed to the Webauthn API. Similarly, Webauthn API output must be converted to base64url-encoded values\n        when passed to the Hanko API (e.g. using the [webauthn-json](https://github.com/github/webauthn-json) library).\n      operationId: webauthnRegFinal\n      tags:\n        - WebAuthn\n      security:\n        - CookieAuth: [ ]\n        - BearerTokenAuth: [ ]\n      requestBody:\n        description: \"Challenge response\"\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PublicKeyCredentialAttestationResponse'\n      responses:\n        '200':\n          description: 'Successful registration'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  credential_id:\n                    description: The ID of the created credential\n                    type: string\n                    format: base64\n                  user_id:\n                    description: The ID of the user on whose behalf a credential was created\n                    allOf:\n                      - $ref: '#/components/schemas/UUID4'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /.well-known/jwks.json:\n    get:\n      summary: 'Get JSON Web Key Set'\n      description: |\n        Retrieve a [JSON Web Key Set](https://www.rfc-editor.org/rfc/rfc7517#section-5) (JWKS) object containing the public `keys` used to verify\n        JSON Web Tokens (JWT) issued by the Hanko API and signed using the RS256 signing algorithm.\n      operationId: getJwks\n      tags:\n        - .well-known\n      responses:\n        '200':\n          description: 'JSON Web Key Set'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONWebKeySet'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /.well-known/config:\n    get:\n      summary: 'Get public Hanko configuration'\n      description: |\n        Retrieve public backend configuration options.\n\n        Useful for example for conditionally constructing a UI based on the options (e.g. don't show password\n        inputs when they are disabled).\n      operationId: getConfig\n      tags:\n        - .well-known\n      responses:\n        '200':\n          description: 'Hanko configuration'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HankoConfiguration'\n  /user:\n    post:\n      summary: 'Get user details by email'\n      description: Retrieve details for user corresponding to the given `email`.\n      operationId: getUserId\n      tags:\n        - User Management\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n      responses:\n        '200':\n          description: 'User'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    $ref:  '#/components/schemas/UUID4'\n                  verified:\n                    type: boolean\n                  has_webauthn_credential:\n                    type: boolean\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /me:\n    get:\n      summary: 'Get the current user ID'\n      description: Retrieve the user ID for the current user (i.e. the subject of the JWT).\n      operationId: IsUserAuthorized\n      tags:\n        - User Management\n      security:\n        - CookieAuth: [ ]\n        - BearerTokenAuth: [ ]\n      responses:\n        '200':\n          description: 'User'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    description: The id of the current user\n                    allOf:\n                      - $ref: '#/components/schemas/UUID4'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /users:\n    post:\n      summary: 'Create a user'\n      operationId: createUser\n      tags:\n        - User Management\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n              required:\n                - email\n      responses:\n        '200':\n          description: 'Details about the created user'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /users/{id}:\n    get:\n      summary: 'Get a user by ID'\n      operationId: listUser\n      tags:\n        - User Management\n      parameters:\n        - name: id\n          in: path\n          description: ID of the user\n          required: true\n          schema:\n            $ref: '#/components/schemas/UUID4'\n      responses:\n        '200':\n          description: 'Details about the user'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\ncomponents:\n  responses:\n    BadRequest:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 400\n            message: Bad Request\n    Conflict:\n      description: Conflict\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 409\n            message: Conflict\n    Forbidden:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 403\n            message: Forbidden\n    Gone:\n      description: Gone\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 410\n            message: Gone\n    InternalServerError:\n      description: Internal server error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 500\n            message: Internal Server Error\n    NotFound:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 404\n            message: Not found\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 401\n            message: Not found\n  schemas:\n    HankoConfiguration:\n      description: Public backend configuration options\n      type: object\n      externalDocs:\n        description: Hanko Configuration\n        url: https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md\n      properties:\n        password:\n          description: Configuration options concerning passwords\n          type: object\n          properties:\n            enabled:\n              description: Indicates whether passwords are enabled or not\n              type: boolean\n            min_password_length:\n              description: Describes the minimum password length\n              type: number\n              example: 8\n    CookieSession:\n      type: string\n      description: Value `\u003cJWT\u003e` is a [JSON Web Token](https://www.rfc-editor.org/rfc/rfc7519.html)\n      example: hanko=\u003cJWT\u003e; Path=/; HttpOnly\n    CredentialCreationOptions:\n      description: \"Options for credential creation with the WebAuthn API\"\n      externalDocs:\n        url: https://www.w3.org/TR/webauthn-2/#dictionary-makecredentialoptions\n      type: object\n      properties:\n        publicKey:\n          type: object\n          properties:\n            rp:\n              type: object\n              properties:\n                name:\n                  type: string\n                  example: Hanko Authentication Service\n                id:\n                  type: string\n                  example: localhost\n            user:\n              type: object\n              properties:\n                id:\n                  type: string\n                  example: pPQT9rwJRD7gVncsnCDNyN\n                name:\n                  type: string\n                  example: user@example.com\n                displayName:\n                  type: string\n                  example: user@example.com\n            challenge:\n              type: string\n              format: base64url\n              example: 7qmkJUXR0dOFnsW48evX3qKdCzlGjvvqAAvMDN+KTN0=\n            pubKeyCredParams:\n              type: array\n              items:\n                type: object\n                properties:\n                  type:\n                    type: string\n                    enum:\n                      - public-key\n                  alg:\n                    type: number\n              example:\n                - type: public-key\n                  alg: -7\n            timeout:\n              type: number\n              format: int64\n              example: 60000\n            authenticatorSelection:\n              type: object\n              properties:\n                authenticatorAttachment:\n                  type: string\n                  enum:\n                    - platform\n                    - cross-platform\n                  example: platform\n                requireResidentKey:\n                  type: boolean\n                  example: true\n                residentKey:\n                  type: string\n                  enum:\n                    - discouraged\n                    - preferred\n                    - required\n                  example: preferred\n                userVerification:\n                  type: string\n                  enum:\n                    - discouraged\n                    - preferred\n                    - required\n                  example: required\n            attestation:\n              type: string\n              enum:\n                - none\n                - indirect\n                - direct\n                - enterprise\n              example: none\n    CredentialRequestOptions:\n      description: \"Options for assertion generation with the WebAuthn API\"\n      externalDocs:\n        url: https://www.w3.org/TR/webauthn-2/#dictionary-assertion-options\n      type: object\n      properties:\n        publicKey:\n          type: object\n          properties:\n            challenge:\n              type: string\n              format: base64url\n              example: qgOI+0KpGnl9NOqaT6dfsYvi96R87LgpErnvePeOgSU=\n            timeout:\n              type: number\n              format: int64\n              example: 60000\n            rpId:\n              type: string\n              example: localhost\n            allowCredentials:\n              type: array\n              items:\n                type: object\n                properties:\n                  type:\n                    type: string\n                    enum:\n                      - public-key\n                    example: public-key\n                  id:\n                    type: string\n                    format: base64url\n                    example: Mepptysj5ZZrTlg0qiLbsZ068OtQMeGVAikVy2n1hvvG...\n            userVerification:\n              type: string\n              enum:\n                - required\n                - preferred\n                - discouraged\n              example: required\n    JSONWebKey:\n      type: object\n      externalDocs:\n        description: RFC7517 - JSON Web Key (JWK)\n        url: https://datatracker.ietf.org/doc/html/rfc7517\n      properties:\n        alg:\n          type: string\n          example: RS256\n          externalDocs:\n            description: RFC7517 - JSON Web Key (JWK) - Section 4.4\n            url: https://www.rfc-editor.org/rfc/rfc7517#section-4.4\n        e:\n          type: string\n          format: base64url\n          example: AQAB\n          externalDocs:\n            description: RFC7518 - JSON Web Algorithms (JWA) - Section 6.3.1.2\n            url: https://www.rfc-editor.org/rfc/rfc7518#section-6.3.1.2\n        kid:\n          type: string\n          example: d6ff37d7-e3d1-4432-ab80-b64faf55ae36\n          externalDocs:\n            description: RFC7517 - JSON Web Key (JWK) - Section 4.5\n            url: https://www.rfc-editor.org/rfc/rfc7517#section-4.5\n        kty:\n          type: string\n          example: RSA\n          externalDocs:\n            description: RFC7517 - JSON Web Key (JWK) - Section 4.1\n            url: https://www.rfc-editor.org/rfc/rfc7517#section-4.1\n        'n':\n          type: string\n          format: base64url\n          example: vPFRUCRoxN3RygdJHR3S5BV-DDLw6n-7oUXtX0nr7Twl...\n          externalDocs:\n            description: RFC7518 - JSON Web Algorithms (JWA) - Section 6.3.1.1\n            url: https://www.rfc-editor.org/rfc/rfc7518#section-6.3.1.1\n        use:\n          type: string\n          example: sig\n          externalDocs:\n            description: RFC7517 - JSON Web Key (JWK) - Section 4.2\n            url: https://www.rfc-editor.org/rfc/rfc7517#section-4.2\n    JSONWebKeySet:\n      type: object\n      properties:\n        keys:\n          type: array\n          items:\n            $ref: '#/components/schemas/JSONWebKey'\n          externalDocs:\n            description: RFC7517 - JSON Web Key (JWK) - Section 5.1\n            url: https://www.rfc-editor.org/rfc/rfc7517#section-5.1\n      externalDocs:\n        description: RFC7517 - JSON Web Key (JWK) - Section 5\n        url: https://www.rfc-editor.org/rfc/rfc7517#section-5\n    Passcode:\n      description: Representation of a passcode\n      type: object\n      properties:\n        id:\n          description: The ID of the passcode\n          allOf:\n            - $ref: '#/components/schemas/UUID4'\n        ttl:\n          type: integer\n          description: Lifespan of a passcode in seconds\n          example: 300\n        created_at:\n          description: Time of creation of the passcode\n          type: string\n          format: date-time\n    Password:\n      description: |\n        The actual password, its `minLength` is determined by [configuration](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#hanko-backend-config) option `password.min_password_length`.\n      type: string\n      minLength: determined by configuration\n      maxLength: 72\n      example: 9UnCBEx924a45P7p\n    PublicKeyCredentialAssertionResponse:\n      description: 'WebAuthn API response to a navigator.credentials.get() call'\n      type: object\n      properties:\n        id:\n          type: string\n          example: _18q6IjW09tiM4NSbsZjocUtGx00Muv5mN6LZCelCMDD...\n        rawId:\n          type: string\n          example: _18q6IjW09tiM4NSbsZjocUtGx00Muv5mN6LZCelCMDD...\n        type:\n          type: string\n          enum:\n            - public-key\n          example: public-key\n        response:\n          type: object\n          properties:\n            clientDataJson:\n              type: string\n              format: base64url\n              example: eyJ0eXBlIjoid2ViYXV0aG4uZ2V0IiwiY2hhbGxlbmdl...\n            authenticatorData:\n              type: string\n              format: base64url\n              example: SZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2MF...\n            signature:\n              type: string\n              format: base64url\n              example: MEQCIHe2RXqh6dyZw1LNXgeTTxljCV_qK2ydQjp02CiF...\n            userHandle:\n              type: string\n              format: base64url\n              example: rpe_EkgaSEeZG0TwzZyZJw\n    PublicKeyCredentialAttestationResponse:\n      description: 'WebAuthn API response to a navigator.credentials.create() call'\n      type: object\n      properties:\n        id:\n          type: string\n          example: _18q6IjW09tiM4NSbsZjocUtGx00Muv5mN6LZCelCMDD...\n        rawId:\n          type: string\n          example: _18q6IjW09tiM4NSbsZjocUtGx00Muv5mN6LZCelCMDD...\n        type:\n          type: string\n          enum:\n            - public-key\n          example: public-key\n        response:\n          type: object\n          properties:\n            clientDataJson:\n              type: string\n              format: base64url\n              example: eyJ0eXBlIjoid2ViYXV0aG4uZ2V0IiwiY2hhbGxlbmdl...\n            attestationObject:\n              type: string\n              format: base64url\n              example: o2NmbXRkbm9uZWdhdHRTdG10oGhhdXRoRGF0YVjfSZYN...\n            transports:\n              type: string\n              enum:\n                - usb\n                - nfc\n                - ble\n                - internal\n              example: internal\n    User:\n      type: object\n      properties:\n        id:\n          description: The ID of the user\n          allOf:\n            - $ref: '#/components/schemas/UUID4'\n        email:\n          description: The email address of the user\n          type: string\n          format: email\n        created_at:\n          description: Time of creation of the the user\n          type: string\n          format: date-time\n        updated_at:\n          description: Time of last update of the user\n          type: string\n          format: date-time\n        verified:\n          description: Indicates whether the user's email address was verified\n          type: boolean\n        webauthn_credentials:\n          description: List of registered Webauthn credentials\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                description: The ID of the Webauthn credential\n                type: string\n                format: base64url\n                example: Meprtysj5ZZrTlg0qiLbsZ168OtQMeGVAikVy2n1hvvG...\n    WebauthnLoginResponse:\n      description: 'Response after a successful login with webauthn'\n      type: object\n      properties:\n        credential_id:\n          type: string\n          format: base64url\n        user_id:\n          type: string\n          format: uuid4\n    UUID4:\n      type: string\n      format: uuid4\n      example: c339547d-e17d-4ba7-8a1d-b3d5a4d17c1c\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    X-Auth-Token:\n      description: |\n        Enable via [configuration](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#hanko-backend-config) option `session.enable_auth_token_header`\n        for purposes of cross-domain communication between client and Hanko API.\n      type: string\n      format: JWT\n      externalDocs:\n        url: https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#hanko-backend-config\n  securitySchemes:\n    CookieAuth:\n      type: apiKey\n      in: cookie\n      name: hanko\n    BearerTokenAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n",
			"canonicalURL": "/github.com/teamhanko/hanko@66f44d914383fd67a8c091ee9e7413b7c226737c/-/blob/docs/static/spec/public.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/teamhanko/hanko/blob/66f44d914383fd67a8c091ee9e7413b7c226737c/docs/static/spec/public.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!str `determi...` into uint64"
}