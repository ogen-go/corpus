{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/shellhub-io/shellhub-io.github.io"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/api/openapi.yaml",
			"byteSize": 50619,
			"content": "openapi: 3.0.2\npaths:\n  /api/login:\n    post:\n      summary: Login\n      description: Retrieve JWT token what's need to access protected API's routes.\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/login'\n      responses:\n        '200':\n          description: Success login\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_auth'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/auth/user:\n    post:\n      summary: Login\n      description: Retrieve JWT token what's need to access protected API's routes.\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/login'\n      responses:\n        '200':\n          description: Success login\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_auth'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/devices/auth:\n    post:\n      summary: Auth device\n      description: \u003e\n        Authentic a device.\n\n        `X-Real-IP` header is used to set a geolocation position to device when\n        `geoip` feature is enable.\n\n        Every 30 seconds, this route is hit by internal ShellHub to check device\n        availability.\n      tags:\n        - device\n      security:\n        - Auth: []\n      parameters:\n        - name: X-Real-IP\n          schema:\n            description: Device IP\n            type: string\n          in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                uid:\n                  description: Device UID\n                  type: string\n                token:\n                  description: Device token\n                  type: string\n                name:\n                  description: Device name\n                  type: string\n                namespace:\n                  description: Device owner namespace\n                  type: string\n      responses:\n        '200':\n          description: Success get device\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  UID:\n                    description: Device UID\n                    type: string\n                  Token:\n                    description: Device token\n                    type: string\n                  Name:\n                    description: Device name\n                    type: string\n                  Namespace:\n                    description: Device owner namespace\n                    type: string\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/auth/device:\n    post:\n      summary: Auth device v2\n      description: \u003e\n        Authentic a device.\n\n        `X-Real-IP` header is used to set a geolocation position to device when\n        `geoip` feature is enable.\n\n        Every 30 seconds, this route is hit by internal ShellHub to check if a \n        device is online.\n      tags:\n        - device\n      security:\n        - Auth: []\n      parameters:\n        - name: X-Real-IP\n          schema:\n            description: Device IP\n            type: string\n          in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                uid:\n                  description: Device UID\n                  type: string\n                token:\n                  description: Device token\n                  type: string\n                name:\n                  description: Device name\n                  type: string\n                namespace:\n                  description: Device owner namespace\n                  type: string\n      responses:\n        '200':\n          description: Success get auth device\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  UID:\n                    description: Device UID\n                    type: string\n                  Token:\n                    description: Device token\n                    type: string\n                  Name:\n                    description: Device name\n                    type: string\n                  Namespace:\n                    description: Device owner namespace\n                    type: string\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/auth/ssh:\n    post:\n      summary: Set SSH key\n      description: Set a SSH public key.\n      tags:\n        - ssh\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                fingerprint:\n                  description: Device fingerprint\n                  type: string\n                data:\n                  description: Device SSH public key\n                  type: string\n      responses:\n        '200':\n          description: Success set SSH key\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  signature:\n                    description: Device signature\n                    type: string\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/auth/token/{tenant}:\n    get:\n      summary: Get a new namespace's token\n      description: \u003e\n        This route works like a login's one; returns a JWT token and extra\n        information about namespace.\n\n        You can use this route to swap between namespaces.\n      tags:\n        - namespace\n      security:\n        - Auth: []\n      parameters:\n        - name: tenant\n          description: Namespace Tenant\n          schema:\n            type: string\n          in: path\n      responses:\n        '200':\n          description: Success to get namespace's token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_auth'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/token/{tenant}:\n    get:\n      summary: Get token\n      description: Get a token from its tenant.\n      tags:\n        - user\n      security:\n        - Auth: []\n      parameters:\n        - name: tenant\n          description: Tenant\n          schema:\n            type: string\n          in: path\n      responses:\n        '200':\n          description: Success get token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_auth'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/devices/{uid}/accept:\n    put:\n      summary: Accept device\n      description: Change device status to `accept`.\n      tags:\n        - device\n      security:\n        - Auth: []\n      parameters:\n        - name: uid\n          schema:\n            description: Device UID\n            type: string\n          in: path\n      responses:\n        '200':\n          description: Success accept device\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Device accepted status\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/users/{id}/data:\n    patch:\n      summary: Update user data\n      description: Update all user information.\n      tags:\n        - user\n      security:\n        - Auth: []\n      parameters:\n        - name: id\n          description: User ID\n          schema:\n            type: string\n          in: path\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  description: User ID\n                  type: string\n                name:\n                  description: User name\n                  type: string\n                email:\n                  description: User e-mail\n                  type: string\n                username:\n                  description: User\n                  type: string\n                password:\n                  description: User password\n                  type: string\n                namespaces:\n                  description: User namespace\n                  type: integer\n                authenticated:\n                  description: User authentication state\n                  type: boolean\n                created_at:\n                  description: User creation date\n                  type: string\n                last_login:\n                  description: User last login date\n                  type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '400':\n          $ref: '#/components/responses/invalid_fields'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '409':\n          $ref: '#/components/responses/conflict_fields'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/users/{id}/password:\n    patch:\n      summary: Update user password\n      description: Update only the user password.\n      tags:\n        - user\n      security:\n        - Auth: []\n      parameters:\n        - name: id\n          description: User ID\n          schema:\n            type: string\n          in: path\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                current_password:\n                  description: User current password\n                  type: string\n                new_password:\n                  description: User new password\n                  type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '400':\n          $ref: '#/components/responses/bad_request'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/users/security/{id}:\n    put:\n      summary: Set session record\n      description: Define if sessions will be recorded.\n      tags:\n        - user\n        - session\n      security:\n        - Auth: []\n      parameters:\n        - name: id\n          description: User security ID\n          schema:\n            type: string\n          in: path\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                session_record:\n                  description: Session record\n                  type: boolean\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/users/security:\n    get:\n      summary: Get session record\n      description: Get status from if `session record` feature is enable.\n      tags:\n        - user\n        - session\n      security:\n        - Auth: []\n      responses:\n        '200':\n          description: Success get session record status\n          content:\n            application/json:\n              schema:\n                description: Session record status\n                type: boolean\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/devices:\n    get:\n      summary: Get device list\n      description: Get a list from all devices.\n      tags:\n        - device\n      security:\n        - Auth: []\n      parameters:\n        - name: X-Total-Count\n          description: Device max returned number\n          schema:\n            type: string\n          in: header\n        - name: filter\n          description: Device filter\n          schema:\n            type: string\n          in: query\n        - name: page\n          description: Device page\n          schema:\n            type: integer\n          in: query\n        - name: per_page\n          description: Device number by page\n          schema:\n            type: integer\n          in: query\n        - name: status\n          description: Device status\n          schema:\n            type: string\n          in: query\n        - name: sort_by\n          description: Device sort\n          schema:\n            type: string\n          in: query\n        - name: order_by\n          schema:\n            description: Device list order\n            type: string\n          in: query\n      responses:\n        '200':\n          description: Success get device list\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/device'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/devices/{uid}:\n    parameters:\n      - name: uid\n        schema:\n          description: Device UID\n          type: string\n        in: path\n    get:\n      summary: Get a device\n      description: Get a device from `UID`.\n      tags:\n        - device\n      security:\n        - Auth: []\n      responses:\n        '200':\n          description: Success get a device\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/device'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n    delete:\n      summary: Delete a device\n      description: Delete a device from its `UID`.\n      tags:\n        - device\n      security:\n        - Auth: []\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n    patch:\n      summary: Update device name\n      description: Update a device name from its `UID` to `name` in request body.\n      tags:\n        - device\n      security:\n        - Auth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Device new name\n                  type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/devices/{uid}/{status}:\n    patch:\n      summary: Update device status\n      description: |\n        Update a device status from its allowed list.\n        The allowed status are:\n          - accept\n          - reject\n          - pending\n          - unused\n      tags:\n        - device\n      security:\n        - Auth: []\n      parameters:\n        - name: uid\n          description: Device UID\n          schema:\n            type: string\n          in: path\n        - name: status\n          schema:\n            type: string\n            enum:\n              - accept\n              - reject\n              - pending\n              - unused\n          in: path\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '400':\n          $ref: '#/components/responses/bad_request'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '402':\n          description: Payment required\n          content:\n            application/json:\n              schema:\n                type: null\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/sessions:\n    get:\n      summary: Get sessions list\n      description: Get a list from all opened session.\n      tags:\n        - session\n      security:\n        - Auth: []\n      parameters:\n        - name: X-Total-Count\n          description: Session max returned number\n          schema:\n            type: integer\n          in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                page:\n                  description: Device list page\n                  type: string\n                per_page:\n                  description: Device number per page\n                  type: string\n      responses:\n        '200':\n          description: Success got session list\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/session'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/sessions/{uid}:\n    parameters:\n      - name: uid\n        schema:\n          description: Session UID\n          type: string\n        in: path\n    get:\n      summary: Get session\n      description: \u003e\n        Get session information from its `UID`.\n\n        `X-Real-IP` header is used to set a geolocation position to device when\n        `geoip` feature is enable.\n      tags:\n        - session\n      security:\n        - Auth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/query'\n      responses:\n        '200':\n          description: Success get session\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/session'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n    post:\n      summary: Set session authentication status\n      description: Set session authentication status.\n      tags:\n        - session\n      security:\n        - Auth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                authenticated:\n                  description: Session authentication status\n                  type: boolean\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/sshkeys/public-keys:\n    get:\n      summary: Get public keys list\n      description: Get a list from all public keys.\n      tags:\n        - ssh\n      security:\n        - Auth: []\n      parameters:\n        - name: X-Total-Count\n          description: Public key max returned number\n          schema:\n            type: integer\n          in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/query'\n      responses:\n        '200':\n          description: Success get public key\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/public_key_hostname'\n                  - $ref: '#/components/schemas/public_key_tags'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n    post:\n      summary: Create public key\n      description: Create a new public key.\n      tags:\n        - ssh\n      security:\n        - Auth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/public_key_hostname'\n                - $ref: '#/components/schemas/public_key_tags'\n      responses:\n        '200':\n          description: Success create public key\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/public_key_hostname'\n                  - $ref: '#/components/schemas/public_key_tags'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '422':\n          description: UnprocessableEntity\n          content:\n            application/json:\n              schema:\n                description: Invalid format\n                type: null\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/sshkeys/public-keys/{fingerprint}:\n    parameters:\n      - name: fingerprint\n        description: Public key fingerprint\n        schema:\n          type: string\n        in: path\n    patch:\n      summary: Update public key\n      description: Update public key.\n      tags:\n        - ssh\n      security:\n        - Auth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Public key name\n                  type: string\n                username:\n                  description: Public key username\n                  type: string\n      responses:\n        '200':\n          description: Success update public key\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/public_key_hostname'\n                  - $ref: '#/components/schemas/public_key_tags'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n    delete:\n      summary: Delete public key\n      description: Delete public key.\n      tags:\n        - ssh\n      security:\n        - Auth: []\n      responses:\n        '200':\n          description: Success delete public key\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/sshkeys/public-keys/{fingerprint}/tags:\n    parameters:\n      - name: fingerprint\n        description: Public key fingerprint\n        schema:\n          type: string\n        in: path\n        example: '00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00'\n    post:\n      summary: Add a tag to public key\n      tags:\n        - ssh\n      security:\n        - Auth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tag:\n                  description: Tag's name\n                  type: string\n              example:\n                tag: tag1\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n    put:\n      summary: Update all tags in a public key\n      tags:\n        - ssh\n      security:\n        - Auth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tags:\n                  description: List of tags\n                  type: array\n                  items:\n                    type: string\n                  example:\n                    - tag1\n                    - tag2\n                    - tag3\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/sshkeys/public-keys/{fingerprint}/tags/{name}:\n    parameters:\n      - name: fingerprint\n        description: Public key fingerprint\n        schema:\n          type: string\n        in: path\n        example: '00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00'\n      - name: name\n        description: Tag's name\n        schema:\n          type: string\n        in: path\n        example: tag1\n    delete:\n      summary: Remove a tag from public key\n      description: Remove a tag from public key.\n      tags:\n        - ssh\n      security:\n        - Auth: []\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/stats:\n    get:\n      summary: Get status from devices\n      description: \u003e\n        Get states about active, pending, rejected, online and registered\n        devices\"\n      tags:\n        - device\n      security:\n        - Auth: []\n      responses:\n        '200':\n          description: Success get stats from device\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  registered_devices:\n                    description: Registered devices\n                    type: integer\n                  online_devices:\n                    description: Online devices\n                    type: integer\n                  active_sessions:\n                    description: Active sessions\n                    type: integer\n                  pending_devices:\n                    description: Pending devices\n                    type: integer\n                  rejected_devices:\n                    description: Rejected devices\n                    type: integer\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/namespaces:\n    get:\n      summary: Get namespace list\n      description: Get a list from all namespaces.\n      tags:\n        - namespace\n      security:\n        - Auth: []\n      parameters:\n        - name: X-Total-Count\n          schema:\n            description: Namespace max returned number\n            type: integer\n          in: header\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/query'\n      responses:\n        '200':\n          description: Success get namespace list\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/namespace'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n    post:\n      summary: Create namespace\n      description: Create a namespace.\n      tags:\n        - namespace\n      security:\n        - Auth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/namespace'\n      responses:\n        '200':\n          description: Success create namespace\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/namespace'\n        '400':\n          $ref: '#/components/responses/bad_request'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/namespaces/{tenant}:\n    parameters:\n      - name: tenant\n        description: Namespace Tenant\n        schema:\n          type: integer\n        in: path\n    get:\n      summary: Get namespace\n      description: Get a namespace from its `tenant`.\n      tags:\n        - namespace\n      security:\n        - Auth: []\n      responses:\n        '200':\n          description: Success get namespace\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/namespace'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n    post:\n      summary: Create namespace\n      description: Create a namespace from its `tenant`.\n      tags:\n        - namespace\n      security:\n        - Auth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Namespace name\n                  type: string\n      responses:\n        '200':\n          description: Success create namespace\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/namespace'\n        '400':\n          $ref: '#/components/responses/bad_request'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n    put:\n      summary: Edit namespace\n      description: Edit a namespace from its `tenant`.\n      tags:\n        - namespace\n      security:\n        - Auth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Namespace name\n                  type: string\n      responses:\n        '200':\n          description: Success edit namespace\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/namespace'\n        '400':\n          $ref: '#/components/responses/bad_request'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n    delete:\n      summary: Delete namespace\n      description: Delete a namespace from its `tenant`.\n      tags:\n        - namespace\n      security:\n        - Auth: []\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/namespaces/{tenant}/members:\n    post:\n      summary: Add a user to a namespace\n      description: Add a user to a namespace\n      tags:\n        - namespace\n      security:\n        - Auth: []\n      parameters:\n        - name: tenant\n          description: Namespace Tenant\n          schema:\n            type: string\n          in: path\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  description: User name\n                  type: string\n                type:\n                  description: User type\n                  enum:\n                    - observer\n                    - operator\n                    - admin\n      responses:\n        '200':\n          description: Success add namespace to user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/namespace'\n        '400':\n          $ref: '#/components/responses/bad_request'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/namespaces/{tenant}/members/{uid}:\n    delete:\n      summary: Delete a user from a namespace\n      description: Delete a user from a namespace\n      tags:\n        - namespace\n      security:\n        - Auth: []\n      parameters:\n        - name: tenant\n          description: Namespace Tenant\n          schema:\n            type: string\n          in: path\n        - name: uid\n          description: User ID\n          schema:\n            type: string\n          in: path\n      requestBody:\n        content:\n          application/json: null\n      responses:\n        '200':\n          description: Success delete user from namespace\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/namespace'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n    patch:\n      summary: Update a user from a namespace\n      description: Update a user type from a namespace\n      tags:\n        - namespace\n      security:\n        - Auth: []\n      parameters:\n        - name: tenant\n          description: Namespace Tenant\n          schema:\n            type: string\n          in: path\n        - name: uid\n          description: User ID\n          schema:\n            type: string\n          in: path\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                type:\n                  description: User type\n                  enum:\n                    - observer\n                    - operator\n                    - admin\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/devices/{uid}/tags:\n    parameters:\n      - name: uid\n        description: Device UID\n        schema:\n          type: string\n        in: header\n    post:\n      summary: Create a tag\n      description: Create a tag to a device\n      tags:\n        - device\n      security:\n        - Auth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Tag name\n                  type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '400':\n          $ref: '#/components/responses/bad_request'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '406':\n          $ref: '#/components/responses/not_acceptable'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n    put:\n      summary: Update all tags\n      description: Update all tags from a device\n      tags:\n        - device\n      security:\n        - Auth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tags:\n                  description: List of tags\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '400':\n          $ref: '#/components/responses/bad_request'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '406':\n          $ref: '#/components/responses/not_acceptable'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/devices/{uid}/tags/{name}:\n    parameters:\n      - name: uid\n        description: Device UID\n        schema:\n          type: string\n        in: header\n      - name: name\n        description: Tag name\n        schema:\n          type: string\n        in: header\n    delete:\n      summary: Delete a tag\n      description: Delete a tag from a device\n      tags:\n        - device\n      security:\n        - Auth: []\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/tags:\n    get:\n      summary: Get tags\n      tags:\n        - tags\n      security:\n        - Auth: []\n      parameters:\n        - name: X-Total-Count\n          schema:\n            description: tags max returned number\n            type: string\n          in: header\n      responses:\n        '200':\n          description: Success get tags\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                example:\n                  - tag1\n                  - tag2\n                  - tag3\n                  - tag4\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n  /api/tags/{name}:\n    parameters:\n      - name: name\n        description: Tag name\n        schema:\n          type: string\n        in: path\n        example: tag1\n    put:\n      summary: Rename a tag name\n      tags:\n        - tags\n      security:\n        - Auth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: New tag name\n                  type: string\n                  example: tag2\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '400':\n          $ref: '#/components/responses/bad_request'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\n    delete:\n      summary: Delete a tag name\n      tags:\n        - tags\n      security:\n        - Auth: []\n      responses:\n        '200':\n          $ref: '#/components/responses/ok'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '500':\n          $ref: '#/components/responses/any_internal_error'\ninfo:\n  title: ShellHub\n  description: Shellhub's API documentation\n  contact:\n    email: contato@ossystems.com.br\n  license:\n    name: Apache License 2.0\n    url: https://github.com/shellhub-io/shellhub/blob/master/LICENSE.md\n  version: 1.0.0\nservers:\n  - url: http://localhost:80\ncomponents:\n  securitySchemes:\n    Auth:\n      name: JWT\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    login:\n      type: object\n      properties:\n        username:\n          description: Login username\n          type: string\n        password:\n          description: Login password\n          type: string\n    user_auth:\n      type: object\n      properties:\n        token:\n          description: JWT's Token\n          type: string\n        user:\n          description: User\n          type: string\n        name:\n          description: Name\n          type: string\n        id:\n          description: User's ID\n          type: string\n        tenant:\n          description: Namespace's Tenant\n          type: string\n        type:\n          description: User's Type\n          type: string\n        email:\n          description: User's E-mail\n          type: string\n    device:\n      type: object\n      properties:\n        uid:\n          description: Device UID\n          type: string\n        name:\n          description: Device name\n          type: string\n        identity:\n          description: Device identity\n          type: object\n          properties:\n            mac:\n              description: Device MAC\n              type: string\n        info:\n          description: Device info\n          type: object\n          properties:\n            id:\n              description: Device ID\n              type: string\n            pretty_name:\n              description: Device OS pretty name\n              type: string\n            version:\n              description: Device OS version\n              type: string\n            arch:\n              description: Device OS arch\n              type: string\n            platform:\n              description: Device OS platform\n              type: string\n        public_key:\n          description: Device public key\n          type: string\n        tenant_id:\n          description: Device tenant\n          type: string\n        last_seen:\n          description: Device last seen\n          type: string\n        online:\n          description: Device availability status\n          type: boolean\n        namespace:\n          description: Device namespace\n          type: string\n        status:\n          description: Device status\n          type: string\n        created_at:\n          description: Device creation date\n          type: string\n        remote_addr:\n          description: Device remote address\n          type: string\n        position:\n          description: Device geolocation position\n          type: object\n          properties:\n            longitude:\n              description: Device longitude position\n              type: integer\n            latitude:\n              description: Device latitude position\n              type: integer\n    session:\n      type: object\n      properties:\n        uid:\n          description: Session UID\n          type: string\n        device_uid:\n          description: Session device UID\n          type: object\n          properties:\n            claims:\n              type: string\n        device:\n          $ref: '#/components/schemas/device'\n        tenant_id:\n          description: Session tenant ID\n          type: string\n        username:\n          description: Session username\n          type: string\n        ip_address:\n          description: Session IP address\n          type: string\n        started_at:\n          description: Session started date\n          type: string\n        last_seen:\n          description: Session last seen date\n          type: string\n        active:\n          description: Session active status\n          type: boolean\n        '-':\n          description: Session closed status\n          type: boolean\n        authenticated:\n          description: Session authenticated status\n          type: boolean\n        recorded:\n          description: Session record status\n          type: boolean\n    query:\n      type: object\n      properties:\n        page:\n          description: Device list page\n          type: integer\n        per_page:\n          description: Device number per page\n          type: integer\n    public_key_hostname:\n      type: object\n      properties:\n        data:\n          description: Public key  data\n          type: string\n        fingerprint:\n          description: Public key  fingerprint\n          type: string\n        created_at:\n          description: Public key creation date\n          type: string\n        tenant_id:\n          description: Public key tenant\n          type: string\n        name:\n          description: Public key name\n          type: string\n        filter:\n          description: Public key filter rule\n          type: object\n          properties:\n            hostname:\n              description: Public key hostname\n              type: string\n        username:\n          description: Public key username\n          type: string\n      example:\n        data: \u003e-\n          AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n        fingerprint: '00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00'\n        tenant_id: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n        name: name\n        filter:\n          hostname: .*\n        username: .*\n    public_key_tags:\n      type: object\n      properties:\n        data:\n          description: Public key  data\n          type: string\n        fingerprint:\n          description: Public key  fingerprint\n          type: string\n        created_at:\n          description: Public key creation date\n          type: string\n        tenant_id:\n          description: Public key tenant\n          type: string\n        name:\n          description: Public key name\n          type: string\n        filter:\n          description: Public key filter rule\n          type: object\n          properties:\n            tags:\n              description: Public key tags\n              type: array\n              items:\n                type: string\n        username:\n          description: Public key username\n          type: string\n      example:\n        data: \u003e-\n          AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n        fingerprint: '00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00'\n        tenant_id: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n        name: name\n        filter:\n          tags:\n            - tag1\n            - tag2\n            - tag3\n        username: .*\n    namespace:\n      type: object\n      properties:\n        name:\n          description: Namespace name\n          type: string\n        owner:\n          description: Namespace owner\n          type: string\n        tenant_id:\n          description: Namespace tenant ID\n          type: string\n        members:\n          description: Namespace members\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                required: true\n                description: User ID\n                type: string\n              username:\n                description: User name\n                type: string\n              type:\n                required: true\n                description: User Type\n                enum:\n                  - observer\n                  - operator\n                  - admin\n                  - owner\n        settings:\n          description: Namespace settings\n          type: object\n          properties:\n            session_record:\n              description: Namespace session record\n              type: boolean\n        devices:\n          description: Namespace device number\n          type: integer\n        session:\n          description: Namespace opened session\n          type: integer\n        max_devices:\n          description: Namespace max device numbers\n          type: integer\n        device_count:\n          description: Namespace device count number\n          type: integer\n        created_at:\n          description: Namespace creation date\n          type: string\n        billing:\n          description: Namespace  billing\n          type: string\n  responses:\n    unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: Unauthorized\n                example: missing or malformated jwt\n    forbidden:\n      description: Forbidden\n    any_internal_error:\n      description: Internal error\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: Internal error\n    ok:\n      description: Success Empty body\n    invalid_fields:\n      description: Invalid Fields\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              type: string\n    conflict_fields:\n      description: Conflict Fields\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              type: string\n    bad_request:\n      description: Bad request\n    conflict:\n      description: Conflict\n    not_found:\n      description: Not found\n    not_acceptable:\n      description: Not Acceptable\n",
			"canonicalURL": "/github.com/shellhub-io/shellhub-io.github.io@fe39a2faa7a92b1b6630e487a640f91b8f864779/-/blob/docs/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/shellhub-io/shellhub-io.github.io/blob/fe39a2faa7a92b1b6630e487a640f91b8f864779/docs/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!bool `true` into []string"
}