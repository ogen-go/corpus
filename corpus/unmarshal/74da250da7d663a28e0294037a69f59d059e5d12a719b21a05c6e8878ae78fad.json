{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dnsimple/dnsimple-developer"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "content/v2/openapi.yml",
			"byteSize": 166596,
			"content": "openapi: 3.0.3\ninfo:\n  title: DNSimple API\n  version: 2.0.0\n  contact:\n    name: DNSimple Support\n    email: support@dnsimple.com\n    url: 'https://dnsimple.com/contact'\n  description: '[DNSimple](https://dnsimple.com) provides DNS hosting and domain registration that is simple and friendly. We provide an extensive API and an easy-to-use web interface so you can get your domain registered and set up with a minimal amount of effort.'\n  termsOfService: 'https://dnsimple.com/terms'\nexternalDocs:\n  url: 'https://developer.dnsimple.com'\nsecurity:\n  - basicAuth: []\n  - bearerAuth: []\nservers:\n  - url: 'https://api.dnsimple.com/v2'\n    description: DNSimple Production API\n    variables: {}\n  - url: 'https://api.sandbox.dnsimple.com/v2'\n    description: 'DNSimple Sandbox API. For more information on the purpose and use of the Sandbox API, see our [testing documentation](https://developer.dnsimple.com/v2/#testing)'\ntags:\n  - name: accounts\n  - name: contacts\n  - name: domains\n  - name: domain certificates\n  - name: domain collaborators\n  - name: domain dnssec\n  - name: domain emailforwards\n  - name: domain pushes\n  - name: domain services\n  - name: registrar\n  - name: registrar delegation\n  - name: registrar transfer\n  - name: registrar renewal\n  - name: registrar privacy\n  - name: identity\n  - name: tlds\n  - name: vanity name servers\n  - name: templates\n  - name: webhooks\n  - name: zones\npaths:\n  /accounts:\n    get:\n      description: Lists the accounts the current authenticated entity has access to.\n      parameters: []\n      operationId: listAccounts\n      tags:\n        - accounts\n      responses:\n        '200':\n          description: Depending on how you are authenticated you will see all the accounts you have access to or the account you used to authenticate.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Account'\n      summary: List accounts\n  /whoami:\n    get:\n      description: Retrieves the details about the current authenticated entity used to access the API.\n      parameters: []\n      operationId: whoami\n      tags:\n        - identity\n      responses:\n        '200':\n          description: Successful response with user or account.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      account:\n                        $ref: '#/components/schemas/Account'\n                      user:\n                        $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/401'\n        '429':\n          $ref: '#/components/responses/429'\n        default:\n          $ref: '#/components/responses/Error'\n      summary: Whoami\n  '/{account}/domains':\n    get:\n      description: Lists the domains in the account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/FilterNameLike'\n        - $ref: '#/components/parameters/FilterRegistrantId'\n        - $ref: '#/components/parameters/SortDomains'\n      operationId: listDomains\n      tags:\n        - domains\n      summary: List domains\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Domain'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n                type: object\n          description: Domain listing.\n    post:\n      summary: Create a domain\n      description: Creates a domain and the corresponding zone into the account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n      operationId: createDomain\n      tags:\n        - domains\n      requestBody:\n        $ref: '#/components/requestBodies/DomainCreate'\n      responses:\n        '201':\n          description: Domain created.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Domain'\n        '400':\n          $ref: '#/components/responses/400'\n  '/{account}/domains/{domain}':\n    get:\n      description: Retrieves the details of an existing domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: getDomain\n      tags:\n        - domains\n      responses:\n        '200':\n          description: Domain retrieved.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Domain'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Retrieve a domain\n    delete:\n      description: Permanently deletes a domain from the account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: deleteDomain\n      tags:\n        - domains\n      responses:\n        '204':\n          description: Domain deleted.\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Delete a domain\n  '/{account}/domains/{domain}/collaborators':\n    get:\n      description: Lists collaborators for the domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: listDomainCollaborators\n      tags:\n        - domain collaborators\n      responses:\n        '200':\n          description: Successfully retrieved the collaborator list.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Collaborator'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: List collaborators\n    post:\n      description: |-\n        Adds a collaborator to the domain.\n\n        At the time of the add, a collaborator may or may not have a DNSimple account. In case the collaborator doesn't have a DNSimple account, the system will invite them to register to DNSimple first and then to accept the collaboration invitation. In the other case, they are automatically added to the domain as collaborator. They can decide to reject the invitation later.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: addDomainCollaborator\n      tags:\n        - domain collaborators\n      requestBody:\n        $ref: '#/components/requestBodies/CollaboratorCreate'\n      responses:\n        '201':\n          description: Successfully added collaborator\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collaborator'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Add a collaborator\n  '/{account}/domains/{domain}/collaborators/{collaborator}':\n    delete:\n      description: Removes a collaborator from the domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/Collaborator'\n      operationId: removeDomainCollaborator\n      tags:\n        - domain collaborators\n      responses:\n        '204':\n          description: Successfully removed collaborator\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Remove a collaborator\n  '/{account}/domains/{domain}/dnssec':\n    get:\n      description: Gets the DNSSEC status for an existing domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: getDomainDnssec\n      tags:\n        - domain dnssec\n      responses:\n        '200':\n          description: Successfully retrieved DNSSEC\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DNSSEC'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: DNSSEC status\n    post:\n      description: |-\n        Enables DNSSEC for the domain.\n\n        It will enable signing of the zone. If the domain is registered with DNSimple, it will also add the DS record to the corresponding registry.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: enableDomainDnssec\n      tags:\n        - domain dnssec\n      responses:\n        '201':\n          description: Successfully enabled DNSSEC\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DNSSEC'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Enable DNSSEC\n    delete:\n      description: |-\n        Disables DNSSEC for the domain.\n\n        It will disable signing of the zone. If the domain is registered with DNSimple, it will also remove the DS record at the registry corresponding to the disabled DNSSEC signing.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: disableDomainDnssec\n      tags:\n        - domain dnssec\n      responses:\n        '204':\n          description: Successfully disabled DNSSEC\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n        '428':\n          description: If DNSSEC is not enabled\n      summary: Disable DNSSEC\n  '/{account}/domains/{domain}/ds_records':\n    get:\n      description: Lists the DS records for the domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/SortDelegationSignerRecords'\n      operationId: listDomainDelegationSignerRecords\n      tags:\n        - domain dnssec\n      responses:\n        '200':\n          description: Successfully retrieved delegation signer list\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DelegationSigner'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: List delegation signer records\n    post:\n      description: Adds a DS record to the domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: createDomainDelegationSignerRecord\n      tags:\n        - domain dnssec\n      requestBody:\n        $ref: '#/components/requestBodies/DelegationSignerCreate'\n      responses:\n        '201':\n          description: Successfully added delegation signer record\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DelegationSigner'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Create a delegation signer record\n  '/{account}/domains/{domain}/ds_records/{ds}':\n    get:\n      description: Retrieves the details of an existing DS record.\n      operationId: getDomainDelegationSignerRecord\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/DelegationSigner'\n      tags:\n        - domain dnssec\n      responses:\n        '200':\n          description: Successfully retrieved Delegation Signer record\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DelegationSigner'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Retrieve a delegation signer record\n    delete:\n      description: Removes a DS record from the domain.\n      operationId: deleteDomainDelegationSignerRecord\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/DelegationSigner'\n      tags:\n        - domain dnssec\n      responses:\n        '204':\n          description: Successfully removed the delegation signer record.\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Delete a delegation signer record\n  '/{account}/domains/{domain}/email_forwards':\n    get:\n      description: Lists email forwards for the domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/SortEmailForwards'\n      operationId: listEmailForwards\n      tags:\n        - domain emailforwards\n      responses:\n        '200':\n          description: Successfully retrieved email forward list.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/EmailForward'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: List email forwards\n    post:\n      description: Creates a new email forward for the domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: createEmailForward\n      tags:\n        - domain emailforwards\n      requestBody:\n        $ref: '#/components/requestBodies/EmailForwardCreate'\n      responses:\n        '201':\n          description: Successfully created new email forward.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/EmailForward'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Create an email forward\n  '/{account}/domains/{domain}/email_forwards/{emailforward}':\n    get:\n      description: Retrieves the details of an existing email forward.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/EmailForward'\n      operationId: getEmailForward\n      tags:\n        - domain emailforwards\n      responses:\n        '200':\n          description: Successfully retrieved email forward.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/EmailForward'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Retrieve an email forward\n    delete:\n      description: Permanently deletes an email forward.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/EmailForward'\n      operationId: deleteEmailForward\n      tags:\n        - domain emailforwards\n      responses:\n        '204':\n          description: Successfully deleted email forward.\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Delete an email forward\n  '/{account}/domains/{domain}/pushes':\n    post:\n      description: Initiates a pust of a domain to another DNSimple account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: initiateDomainPush\n      tags:\n        - domain pushes\n      requestBody:\n        $ref: '#/components/requestBodies/PushInitiate'\n      responses:\n        '201':\n          description: Successfully initiated the push.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Push'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Initiate a push\n  '/{account}/pushes':\n    get:\n      description: List pending pushes for the target account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n      operationId: listPushes\n      tags:\n        - domain pushes\n      responses:\n        '200':\n          description: Successfully retrieved pushes for the account.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Push'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n      summary: List pushes\n  '/{account}/pushes/{push}':\n    post:\n      description: Accepts a push to the target account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Push'\n      operationId: acceptPush\n      tags:\n        - domain pushes\n      requestBody:\n        $ref: '#/components/requestBodies/PushAccept'\n      responses:\n        '204':\n          description: Successfully accept a push.\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Accept a push\n    delete:\n      description: Rejects a push to the target account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Push'\n      operationId: rejectPush\n      tags:\n        - domain pushes\n      responses:\n        '204':\n          description: Successfully reject a push.\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Reject a push\n  '/{account}/domains/{domain}/certificates':\n    get:\n      description: Lists the certificates for a domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/SortCertificates'\n      operationId: listCertificates\n      tags:\n        - domain certificates\n      responses:\n        '200':\n          description: Successfully retrieved certificates for a domain.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Certificate'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: List certificates\n  '/{account}/domains/{domain}/certificates/{certificate}':\n    get:\n      description: Retrieves the details of an existing certificate.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/Certificate'\n      operationId: getCertificate\n      tags:\n        - domain certificates\n      responses:\n        '200':\n          description: Successfully retrieved a certificate for a domain.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Certificate'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Retrieve a certificate\n  '/{account}/domains/{domain}/certificates/{certificate}/download':\n    get:\n      description: 'Gets the PEM-encoded certificate, along with the root certificate and intermediate chain.'\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/Certificate'\n      operationId: downloadCertificate\n      tags:\n        - domain certificates\n      responses:\n        '200':\n          description: Successfully retrieved the certificate.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/CertificateDownload'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Download a certificate\n  '/{account}/domains/{domain}/certificates/{certificate}/private_key':\n    get:\n      description: Gets the PEM-encoded certificate private key.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/Certificate'\n      operationId: getCertificatePrivateKey\n      tags:\n        - domain certificates\n      responses:\n        '200':\n          description: Successfully retrieved the private key for an issued certificate.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/CertificatePrivateKey'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Retrieve a certificate private key\n  '/{account}/domains/{domain}/certificates/certificates/letsencrypt':\n    post:\n      description: 'Orders a [Let''s Encrypt](https://dnsimple.com/letsencrypt) certificate with DNSimple.'\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: purchaseLetsencryptCertificate\n      tags:\n        - domain certificates\n      responses:\n        '201':\n          description: Successfully created the certificate purchase order.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/LetsencryptCertificatePurchase'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: \"Let's Encrypt: Order a certificate\"\n  '/{account}/domains/{domain}/certificates/certificates/letsencrypt/{purchaseId}/issue':\n    post:\n      description: \"Issues a [Let's Encrypt](https://dnsimple.com/letsencrypt) certificate ordered with DNSimple.\"\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - name: purchaseId\n          in: path\n          required: true\n          description: The certificate purchase order id received by `purchaseLetsencryptCertificate`.\n          schema:\n            type: integer\n      operationId: issueLetsencryptCertificate\n      tags:\n        - domain certificates\n      responses:\n        '202':\n          description: Successfully requested the issuance of the certificate.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Certificate'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: \"Let's Encrypt: Issue a certificate\"\n  '/{account}/domains/{domain}/certificates/certificates/letsencrypt/{certificate}/renewals':\n    post:\n      description: \"Renews a [Let's Encrypt](https://dnsimple.com/letsencrypt) certificate ordered with DNSimple.\"\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/Certificate'\n      operationId: purchaseRenewalLetsencryptCertificate\n      tags:\n        - domain certificates\n      responses:\n        '201':\n          description: Successfully created the certificate renewal order.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/LetsencryptCertificateRenewal'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: \"Let's Encrypt: Order a certificate renewal\"\n  '/{account}/domains/{domain}/certificates/certificates/letsencrypt/{certificate}/renewals/{renewalId}/issue':\n    post:\n      description: \"Issues a [Let's Encrypt](https://dnsimple.com/letsencrypt) certificate renewal ordered with DNSimple.\"\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/Certificate'\n        - name: renewalId\n          in: path\n          required: true\n          description: The certificate renewal order id received by `purchaseRenewalLetsencryptCertificate`.\n          schema:\n            type: integer\n      operationId: issueRenewalLetsencryptCertificate\n      tags:\n        - domain certificates\n      responses:\n        '202':\n          description: Successfully requested the issuance of the certificate renewal.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Certificate'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: \"Let's Encrypt: Issue a certificate renewal\"\n  /tlds:\n    get:\n      description: ListsTLDs supported for registration or transfer.\n      parameters:\n        - $ref: '#/components/parameters/SortTLDs'\n      operationId: listTlds\n      tags:\n        - tlds\n      responses:\n        '200':\n          description: Successfully retrieved the TLDs.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TLD'\n      summary: List TLDs\n  '/tlds/{tld}':\n    get:\n      description: Retrieves the details of a TLD.\n      parameters:\n        - $ref: '#/components/parameters/TLD'\n      operationId: getTld\n      tags:\n        - tlds\n      responses:\n        '200':\n          description: Successfully retrieved the TLD details.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/TLD'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Retrieve the TLD\n  '/tlds/{tld}/extended_attributes':\n    get:\n      description: |-\n        Lists a TLD extended attributes.\n\n        Some TLDs require extended attributes when registering or transferring a domain. This API interface provides information on the extended attributes for any particular TLD. Extended attributes are extra TLD-specific attributes, required by the TLD registry to collect extra information about the registrant or legal agreements.\n      parameters:\n        - $ref: '#/components/parameters/TLD'\n      operationId: getTldExtendedAttributes\n      tags:\n        - tlds\n      responses:\n        '200':\n          description: Successfully retrieved the extended attributes for the TLD.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ExtendedAttribute'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: List TLD extended attributes\n  '/{account}/registrar/domains/{domain}/check':\n    get:\n      description: Checks a domain name for availability.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: checkDomain\n      tags:\n        - registrar\n      responses:\n        '200':\n          description: 'The check was successfully executed. Check the result data to determine if it is available for registration. If the domain is premium, please check the premium price before trying to register, renew, transfer.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DomainCheckResult'\n      summary: Check domain\n  '/{account}/registrar/domains/{domain}/premium_price':\n    get:\n      deprecated: true\n      description: |-\n        Deprecated in favor of getDomainPrices.\n\n        Retrieves the premium price for a premium domain.\n\n        Please note that a premium price can be different for registration, renewal, transfer. By default this endpoint returns the premium price for registration. If you need to check a different price, you should specify it with the action param.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/DomainPremiumPriceAction'\n      operationId: getDomainPremiumPrice\n      tags:\n        - registrar\n      responses:\n        '200':\n          description: Successfully retrieved the premium price\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DomainPremiumPrice'\n        '400':\n          $ref: '#/components/responses/400'\n      summary: Get domain premium price\n  '/{account}/registrar/domains/{domain}/prices':\n    get:\n      description: Retrieve domain prices.\n      summary: Get prices for a domain\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: getDomainPrices\n      tags:\n        - registrar\n      responses:\n        '200':\n          description: Successfully retrieved the domain pricing data\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DomainPrices'\n        '400':\n          $ref: '#/components/responses/400'\n  '/{account}/registrar/domains/{domain}/registrations':\n    post:\n      description: |-\n        Registers a domain name.\n\n        Your account must be active for this command to complete successfully. You will be automatically charged the registration fee upon successful registration, so please be careful with this command.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: registerDomain\n      tags:\n        - registrar\n      requestBody:\n        $ref: '#/components/requestBodies/DomainRegister'\n      responses:\n        '201':\n          description: Domain successfully registered\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DomainRegistration'\n        '400':\n          $ref: '#/components/responses/400'\n      summary: Register a domain\n  '/{account}/registrar/domains/{domain}/transfers':\n    post:\n      description: |-\n        Transfers a domain name from another registrar.\n\n        Your account must be active for this command to complete successfully. You will be automatically charged the 1-year transfer fee upon successful transfer, so please be careful with this command. The transfer may take anywhere from a few minutes up to 7 days.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: transferDomain\n      tags:\n        - registrar\n      requestBody:\n        $ref: '#/components/requestBodies/DomainTransfer'\n      responses:\n        '201':\n          description: Domain transfer created.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DomainTransfer'\n        '400':\n          $ref: '#/components/responses/400'\n      summary: Transfer a domain\n  '/{account}/registrar/domains/{domain}/transfers/{domaintransfer}':\n    get:\n      description: Retrieves the details of an existing domain transfer.\n      summary: Retrieve a domain transfer\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/DomainTransfer'\n      operationId: getDomainTransfer\n      tags:\n        - registrar\n        - registrar transfer\n      responses:\n        '200':\n          description: Domain transfer details.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DomainTransfer'\n        '404':\n          $ref: '#/components/responses/404'\n    delete:\n      description: Cancels an in progress domain transfer.\n      summary: Cancel a domain transfer\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/DomainTransfer'\n      operationId: cancelDomainTransfer\n      tags:\n        - registrar\n        - registrar transfer\n      responses:\n        '202':\n          description: Domain transfer cancellation accepted and queued for processing.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DomainTransfer'\n        '404':\n          $ref: '#/components/responses/404'\n  '/{account}/registrar/domains/{domain}/renewals':\n    post:\n      description: |-\n        Explicitly renews a domain, if the registry supports this function.\n\n        Your account must be active for this command to complete successfully. You will be automatically charged the renewal fee upon successful renewal, so please be careful with this command.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: domainRenew\n      tags:\n        - registrar\n        - registrar renewal\n      requestBody:\n        $ref: '#/components/requestBodies/DomainRenew'\n      responses:\n        '201':\n          description: Domain renewal created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DomainRenewal'\n        '400':\n          $ref: '#/components/responses/400'\n      summary: Renew a domain\n  '/{account}/registrar/domains/{domain}/authorize_transfer_out':\n    post:\n      description: |-\n        Prepares a domain for transferring out.\n\n        This will unlock a domain and send the authorization code to the domain's administrative contact.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: authorizeDomainTransferOut\n      tags:\n        - registrar\n      responses:\n        '204':\n          description: Domain prepared for transfer out.\n        '400':\n          $ref: '#/components/responses/400'\n      summary: Authorize a domain transfer out\n  '/{account}/registrar/domains/{domain}/delegation':\n    get:\n      description: Lists the name servers for the domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: getDomainDelegation\n      tags:\n        - registrar delegation\n      responses:\n        '200':\n          description: Successfully retrieved the domain name servers.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DomainNameServer'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: List domain name servers\n    put:\n      description: Changes the domain name servers.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: changeDomainDelegation\n      tags:\n        - registrar delegation\n      requestBody:\n        $ref: '#/components/requestBodies/DomainNameServers'\n      responses:\n        '200':\n          description: Successfully updated the domain name servers.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DomainNameServer'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Change domain name servers\n  '/{account}/registrar/domains/{domain}/delegation/vanity':\n    put:\n      description: Delegate a domain to vanity name servers.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: changeDomainDelegationToVanity\n      tags:\n        - registrar delegation\n      requestBody:\n        $ref: '#/components/requestBodies/VanityNameServers'\n      responses:\n        '200':\n          description: Successfully delegated to vanity name servers.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/NameServer'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n        '412':\n          $ref: '#/components/responses/412-feature'\n      summary: Delegate to vanity name servers\n    delete:\n      description: De-delegate a domain from vanity name servers.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: changeDomainDelegationFromVanity\n      tags:\n        - registrar delegation\n      responses:\n        '204':\n          description: Successfully de-delegated from vanity name servers.\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n        '412':\n          $ref: '#/components/responses/412-feature'\n      summary: De-delegate from vanity name servers\n  '/{account}/registrar/domains/{domain}/auto_renewal':\n    put:\n      description: Enables auto renewal for the domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: enableDomainAutoRenewal\n      tags:\n        - registrar\n        - registrar renewal\n      responses:\n        '204':\n          description: Successfully enabled auto-renewal.\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Enable domain auto-renewal\n    delete:\n      description: Disables auto renewal for the domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: disableDomainAutoRenewal\n      tags:\n        - registrar\n        - registrar renewal\n      responses:\n        '204':\n          description: Successfully disabled auto-renewal.\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Disable domain auto-renewal\n  '/{account}/registrar/domains/{domain}/whois_privacy':\n    get:\n      description: Gets the whois privacy status for an existing domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: getWhoisPrivacy\n      tags:\n        - registrar\n        - registrar privacy\n      responses:\n        '200':\n          description: Successfully retrieved whois privacy details.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/WhoisPrivacy'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: WHOIS privacy status\n    put:\n      description: |-\n        Enables the WHOIS privacy for the domain.\n\n        Note that if the WHOIS privacy is not purchased for the domain, enabling WHOIS privacy will cause the service to be purchased for a period of 1 year. If WHOIS privacy was previously purchased and disabled, then calling this will enable the WHOIS privacy.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: enableWhoisPrivacy\n      tags:\n        - registrar privacy\n      responses:\n        '200':\n          description: Successfully enabled whois privacy.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/WhoisPrivacy'\n        '201':\n          description: Successfully purchased and enabled whois privacy.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/WhoisPrivacy'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Enable WHOIS privacy\n    delete:\n      description: Disables the WHOIS privacy for the domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: disableWhoisPrivacy\n      tags:\n        - registrar privacy\n      responses:\n        '200':\n          description: Successfully disabled whois privacy.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/WhoisPrivacy'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Disable WHOIS privacy\n  '/{account}/registrar/domains/{domain}/whois_privacy/renewals':\n    post:\n      description: |-\n        Renews the WHOIS privacy for the domain.\n\n        Note that if the WHOIS privacy was never purchased for the domain or if there is another renewal order in progress, renewing WHOIS privacy will return an error.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: renewWhoisPrivacy\n      tags:\n        - registrar privacy\n      responses:\n        '201':\n          description: Successfully renew whois privacy.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/WhoisPrivacyRenewal'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Renew WHOIS privacy\n  '/{account}/secondary_dns/primaries':\n    get:\n      summary: List primary servers\n      description: List the primary servers in the account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/SortPrimaryServers'\n      operationId: listPrimaryServers\n      tags:\n        - secondary dns\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PrimaryServer'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n                type: object\n          description: Primary Server listing.\n    post:\n      summary: Create a primary server\n      description: Creates a primary server into the account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n      operationId: createPrimaryServer\n      tags:\n        - secondary dns\n      requestBody:\n        $ref: '#/components/requestBodies/PrimaryServerCreate'\n      responses:\n        '201':\n          description: Primary Server created.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/PrimaryServer'\n        '400':\n          $ref: '#/components/responses/400'\n  '/{account}/secondary_dns/primaries/{primaryserver}':\n    get:\n      description: Retrieves the details of an existing primary server.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/PrimaryServer'\n      operationId: getPrimaryServer\n      tags:\n        - secondary dns\n      responses:\n        '200':\n          description: Primary Server retrieved.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/PrimaryServer'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Retrieve a primary server\n    delete:\n      description: Permanently deletes a primary server.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/PrimaryServer'\n      operationId: removePrimaryServer\n      tags:\n        - secondary dns\n      responses:\n        '204':\n          description: Successfully deleted primary server.\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Delete a primary server\n\n  '/{account}/secondary_dns/primaries/{primaryserver}/link':\n    put:\n      description: Link the primary server to a secondary zone.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/PrimaryServer'\n      operationId: linkPrimaryServer\n      tags:\n        - secondary dns\n      responses:\n        '200':\n          description: Primary Server linked.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/PrimaryServer'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Link a primary server to a secondary zone\n\n  '/{account}/secondary_dns/primaries/{primaryserver}/unlink':\n    put:\n      description: Unlink the primary server from a secondary zone.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/PrimaryServer'\n      operationId: unlinkPrimaryServer\n      tags:\n        - secondary dns\n      responses:\n        '200':\n          description: Primary Server unlinked.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/PrimaryServer'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Unlink a primary server from a secondary zone\n  '/{account}/secondary_dns/zones':\n    post:\n      summary: Create a secondary zone\n      description: Creates a secondary zone into the account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n      operationId: createSecondaryZone\n      tags:\n        - secondary dns\n      requestBody:\n        $ref: '#/components/requestBodies/SecondaryZoneCreate'\n      responses:\n        '201':\n          description: Secondary Zone created.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Zone'\n        '400':\n          $ref: '#/components/responses/400'\n  '/{account}/zones':\n    get:\n      description: Lists the zones in the account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/FilterNameLike'\n        - $ref: '#/components/parameters/SortZones'\n      operationId: listZones\n      tags:\n        - zones\n      responses:\n        '200':\n          description: Successfully retrieved account zone list.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Zone'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n      summary: List zones\n  '/{account}/zones/{zone}':\n    get:\n      description: Retrieves the details of an existing zone.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Zone'\n      operationId: getZone\n      tags:\n        - zones\n      responses:\n        '200':\n          description: Successfully retrieved zone.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Zone'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Retrieve a zone\n  '/{account}/zones/{zone}/file':\n    get:\n      description: Download the zonefile for an existing zone.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Zone'\n      operationId: getZoneFile\n      tags:\n        - zones\n      responses:\n        '200':\n          description: Successfully retrieved zone file.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/ZoneFile'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Download a zone file\n  '/{account}/zones/{zone}/distribution':\n    get:\n      description: Checks if a zone is fully distributed to all our name servers across the globe.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Zone'\n      operationId: checkZoneDistribution\n      tags:\n        - zones\n      responses:\n        '200':\n          description: Successfully checked zone distribution.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/ZoneDistribution'\n        '404':\n          $ref: '#/components/responses/404'\n        '504':\n          description: The server failed to perform the check.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      summary: Check zone distribution\n  '/{account}/zones/{zone}/records':\n    get:\n      description: Lists the records for a zone.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Zone'\n        - $ref: '#/components/parameters/FilterNameLike'\n        - $ref: '#/components/parameters/FilterName'\n        - $ref: '#/components/parameters/FilterType'\n        - $ref: '#/components/parameters/SortZoneRecords'\n      operationId: listZoneRecords\n      tags:\n        - zones\n      responses:\n        '200':\n          description: Successfully retrieved zone records list.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ZoneRecord'\n      summary: List zone records\n    post:\n      description: Creates a new zone record.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Zone'\n      operationId: createZoneRecord\n      tags:\n        - zones\n      requestBody:\n        $ref: '#/components/requestBodies/ZoneRecordCreate'\n      responses:\n        '201':\n          description: Successfully created zone record.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/ZoneRecord'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Create a zone record\n  '/{account}/zones/{zone}/records/{zonerecord}':\n    get:\n      description: Retrieves the details of an existing zone record.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Zone'\n        - $ref: '#/components/parameters/ZoneRecord'\n      operationId: getZoneRecord\n      tags:\n        - zones\n      responses:\n        '200':\n          description: Successfully get zone record.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/ZoneRecord'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Retrieve a zone record\n    patch:\n      description: Updates the zone record details.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Zone'\n        - $ref: '#/components/parameters/ZoneRecord'\n      operationId: updateZoneRecord\n      tags:\n        - zones\n      requestBody:\n        $ref: '#/components/requestBodies/ZoneRecordUpdate'\n      responses:\n        '200':\n          description: Successfully updated zone record.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/ZoneRecord'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Update a zone record\n    delete:\n      description: Permanently deletes a zone record.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Zone'\n        - $ref: '#/components/parameters/ZoneRecord'\n      operationId: deleteZoneRecord\n      tags:\n        - zones\n      responses:\n        '204':\n          description: Successfully deleted zone record.\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Delete a zone record\n  '/{account}/zones/{zone}/records/{zonerecord}/distribution':\n    get:\n      description: Checks if a zone record is fully distributed to all our name servers across the globe.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Zone'\n        - $ref: '#/components/parameters/ZoneRecord'\n      operationId: checkZoneRecordDistribution\n      tags:\n        - zones\n      responses:\n        '200':\n          description: Successfully checked zone record distribution.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/ZoneDistribution'\n        '404':\n          $ref: '#/components/responses/404'\n        '504':\n          description: The server failed to perform the check.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      summary: Check zone record distribution\n  '/{account}/contacts':\n    get:\n      description: List contacts in the account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/SortContacts'\n      operationId: listContacts\n      tags:\n        - contacts\n      responses:\n        '200':\n          description: Successfully retrieved account contact list.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Contact'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n      summary: List contacts\n    post:\n      description: Creates a contact.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n      operationId: createContact\n      tags:\n        - contacts\n      requestBody:\n        $ref: '#/components/requestBodies/ContactCreateOrUpdate'\n      responses:\n        '201':\n          description: Successfully created contact.\n        '400':\n          $ref: '#/components/responses/400'\n      summary: Create a contact\n  '/{account}/contacts/{contact}':\n    get:\n      description: Retrieves the details of an existing contact.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Contact'\n      operationId: getContact\n      tags:\n        - contacts\n      responses:\n        '200':\n          description: Successfully retrieved the contact.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Contact'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Retrieve a contact\n    patch:\n      description: Updates the contact details.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Contact'\n      operationId: updateContact\n      tags:\n        - contacts\n      requestBody:\n        $ref: '#/components/requestBodies/ContactCreateOrUpdate'\n      responses:\n        '200':\n          description: Successfully updated contact.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Contact'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Update a contact\n    delete:\n      description: Permanently deletes a contact from the account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Contact'\n      operationId: deleteContact\n      tags:\n        - contacts\n      responses:\n        '204':\n          description: Successfully deleted contact.\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Delete a contact\n  /services:\n    get:\n      description: List all available one-click services.\n      parameters:\n        - $ref: '#/components/parameters/SortServices'\n      operationId: listServices\n      tags:\n        - domain services\n      responses:\n        '200':\n          description: Successfully retrieved service list.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Service'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n      summary: List services\n  '/services/{service}':\n    get:\n      description: Retrieves the details of a one-click service.\n      parameters:\n        - $ref: '#/components/parameters/Service'\n      operationId: getService\n      tags:\n        - domain services\n      responses:\n        '200':\n          description: Successfully retrieved service.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Service'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Retrieve a service\n  '/{account}/domains/{domain}/services':\n    get:\n      description: List services applied to a domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: listDomainAppliedServices\n      tags:\n        - domain services\n      responses:\n        '200':\n          description: Successfully retrieved list of applied services.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Service'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: List applied services\n  '/{account}/domains/{domain}/services/{service}':\n    post:\n      description: Applies a service to a domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/Service'\n      operationId: applyServiceToDomain\n      tags:\n        - domain services\n      requestBody:\n        $ref: '#/components/requestBodies/ServiceApply'\n      responses:\n        '204':\n          description: Successfully applied a service to a domain.\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Apply a service\n    delete:\n      description: Unapplies a service from a domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/Service'\n      operationId: unapplyServiceFromDomain\n      tags:\n        - domain services\n      responses:\n        '204':\n          description: Successfully unapplied a service to a domain.\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Unapply a service\n  '/{account}/templates':\n    get:\n      description: Lists the templates in the account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/SortTemplates'\n      operationId: listTemplates\n      tags:\n        - templates\n      responses:\n        '200':\n          description: Successfully retrieved account template list.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Template'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n      summary: List templates\n    post:\n      description: Creates a template.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n      operationId: createTemplate\n      tags:\n        - templates\n      requestBody:\n        $ref: '#/components/requestBodies/TemplateCreateOrUpdate'\n      responses:\n        '201':\n          description: Successfully created a template.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Template'\n        '400':\n          $ref: '#/components/responses/400'\n      summary: Create a template\n  '/{account}/templates/{template}':\n    get:\n      description: Retrieves the details of an existing template.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Template'\n      operationId: getTemplate\n      tags:\n        - templates\n      responses:\n        '200':\n          description: Successfully retrieved a template.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Template'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Retrieve a template\n    patch:\n      description: Updates the template details.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Template'\n      operationId: updateTemplate\n      tags:\n        - templates\n      requestBody:\n        $ref: '#/components/requestBodies/TemplateCreateOrUpdate'\n      responses:\n        '200':\n          description: Successfully updated a template.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Template'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Update a template\n    delete:\n      description: Permanently deletes a template.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Template'\n      operationId: deleteTemplate\n      tags:\n        - templates\n      responses:\n        '204':\n          description: Successfully deleted a template\n      summary: Delete a template\n  '/{account}/templates/{template}/records':\n    get:\n      description: Lists the records for a template.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Template'\n        - $ref: '#/components/parameters/SortTemplateRecords'\n      operationId: listTemplateRecords\n      tags:\n        - templates\n      responses:\n        '200':\n          description: Successfully retrieved the template records list.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TemplateRecord'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n      summary: List template records\n    post:\n      description: Creates a new template record.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Template'\n      operationId: createTemplateRecord\n      tags:\n        - templates\n      requestBody:\n        $ref: '#/components/requestBodies/TemplateRecordCreateOrUpdate'\n      responses:\n        '201':\n          description: Successfully create a template record.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/TemplateRecord'\n      summary: Create a template record\n  '/{account}/templates/{template}/records/{templaterecord}':\n    get:\n      description: Retrieves the details of an existing template record.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Template'\n        - $ref: '#/components/parameters/TemplateRecord'\n      operationId: getTemplateRecord\n      tags:\n        - templates\n      responses:\n        '200':\n          description: Successfully retrieved a template record.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/TemplateRecord'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Retrieve a template record\n    delete:\n      description: Permanently deletes a template record.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Template'\n        - $ref: '#/components/parameters/TemplateRecord'\n      operationId: deleteTemplateRecord\n      tags:\n        - templates\n      responses:\n        '204':\n          description: Successfully deleted a template record.\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Delete a template record\n  '/{account}/domains/{domain}/templates/{template}':\n    post:\n      description: Applies a template to a domain.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n        - $ref: '#/components/parameters/Template'\n      operationId: applyTemplateToDomain\n      tags:\n        - templates\n      responses:\n        '204':\n          description: Successfully applied a template to the domain.\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Apply a template\n  '/{account}/vanity/{domain}':\n    put:\n      description: |-\n        Enables Vanity Name Servers for the domain.\n\n        This method sets up the appropriate A and AAAA records for the domain to provide vanity name servers, but it does not change the delegation for the domain. To change the delegation for domains to vanity name servers use the endpoints to Delegate to Vanity Name Servers or Dedelegate from Vanity Name Servers.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: enableVanityNameServers\n      tags:\n        - vanity name servers\n      responses:\n        '200':\n          description: Successfully enabled vanity name servers on the domain.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/VanityNameServer'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Enable vanity name servers\n    delete:\n      description: |-\n        Disables Vanity Name Servers for the domain.\n\n        This method removes the A and AAAA records required for the domain to provide vanity name servers, but it does not change the delegation for the domain. To change the delegation for domains to vanity name servers use the endpoints to Delegate to Vanity Name Servers or Dedelegate from Vanity Name Servers.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Domain'\n      operationId: disableVanityNameServers\n      tags:\n        - vanity name servers\n      responses:\n        '204':\n          description: Successfully disabled vanity name servers on the domain.\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n      summary: Disable vanity name servers\n  '/{account}/webhooks':\n    get:\n      description: List the webhooks in the account.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/SortWebhooks'\n      operationId: listWebhooks\n      tags:\n        - webhooks\n      responses:\n        '200':\n          description: Successfully retrieved account webhooks list.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Webhook'\n      summary: List webhooks\n    post:\n      description: Registers a webhook endpoint.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n      operationId: createWebhook\n      tags:\n        - webhooks\n      responses:\n        '201':\n          description: Successfully created a webhook.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Webhook'\n        '400':\n          $ref: '#/components/responses/400'\n      callbacks:\n        webhook:\n          '{$request.body#/url}':\n            post:\n              operationId: receiveWebhook\n              summary: Receive webhook notification\n              requestBody:\n                required: true\n                description: Webhook payload\n                content:\n                  application/json:\n                    schema:\n                      $ref: '#/components/schemas/WebhookPayload'\n              responses:\n                '200':\n                  description: Webhook successfully processed\n      summary: Create a webhook\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                url:\n                  type: string\n                  format: uri\n              required:\n                - url\n  '/{account}/webhooks/{webhook}':\n    get:\n      description: Retrieves the details of a registered webhook.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Webhook'\n      operationId: getWebhook\n      tags:\n        - webhooks\n      responses:\n        '200':\n          description: Successfully retrieved a webhook.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Webhook'\n      summary: Retrieve a webhook\n    delete:\n      description: De-registers a webhook endpoint.\n      parameters:\n        - $ref: '#/components/parameters/Account'\n        - $ref: '#/components/parameters/Webhook'\n      operationId: deleteWebhook\n      tags:\n        - webhooks\n      responses:\n        '204':\n          description: Successfully deleted a webhook.\n      summary: Delete a webhook\ncomponents:\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n    bearerAuth:\n      type: http\n      scheme: bearer\n  parameters:\n    Account:\n      name: account\n      in: path\n      required: true\n      description: The account id\n      schema:\n        type: integer\n    Certificate:\n      name: certificate\n      in: path\n      required: true\n      description: The certificate id\n      schema:\n        type: integer\n    Collaborator:\n      name: collaborator\n      in: path\n      required: true\n      description: The collaborator id\n      schema:\n        type: integer\n    Contact:\n      name: contact\n      in: path\n      required: true\n      description: The contact id\n      schema:\n        type: integer\n    DelegationSigner:\n      name: ds\n      in: path\n      required: true\n      description: The delegation signer record id\n      schema:\n        type: integer\n    Domain:\n      name: domain\n      in: path\n      required: true\n      description: The domain name or id\n      schema:\n        type: string\n    DomainTransfer:\n      name: domaintransfer\n      in: path\n      required: true\n      description: The domain transfer id\n      schema:\n        type: integer\n    EmailForward:\n      name: emailforward\n      in: path\n      required: true\n      description: The email forward id\n      schema:\n        type: integer\n    PrimaryServer:\n      name: primaryserver\n      in: path\n      required: true\n      description: The primary server id\n      schema:\n        type: integer\n    Push:\n      name: push\n      in: path\n      required: true\n      description: The push id\n      schema:\n        type: integer\n    Service:\n      name: service\n      in: path\n      required: true\n      description: The service sid or id\n      schema:\n        type: string\n    Template:\n      name: template\n      in: path\n      required: true\n      description: The template id\n      schema:\n        type: integer\n    TemplateRecord:\n      name: templaterecord\n      in: path\n      required: true\n      description: The template record id\n      schema:\n        type: integer\n    TLD:\n      name: tld\n      in: path\n      required: true\n      description: The TLD string\n      schema:\n        type: string\n    Webhook:\n      name: webhook\n      in: path\n      required: true\n      description: The webhoook id\n      schema:\n        type: integer\n    Zone:\n      name: zone\n      in: path\n      required: true\n      description: The zone name\n      schema:\n        type: string\n    ZoneRecord:\n      name: zonerecord\n      in: path\n      required: true\n      description: The zone record id\n      schema:\n        type: integer\n    DomainPremiumPriceAction:\n      name: action\n      in: query\n      required: false\n      description: 'Optional action between \"registration\", \"renewal\", and \"transfer\". If omitted, it defaults to \"registration\".'\n      schema:\n        type: string\n    FilterName:\n      name: name\n      in: query\n      required: false\n      description: Only include results with a name field exactly matching the given string\n      schema:\n        type: string\n    FilterNameLike:\n      name: name_like\n      in: query\n      required: false\n      description: Only include results with a name field containing the given string\n      schema:\n        type: string\n    FilterRegistrantId:\n      name: registrant_id\n      in: query\n      required: false\n      description: Only include results with the registrant_id field matching the given value\n      schema:\n        type: integer\n    FilterType:\n      name: type\n      in: query\n      required: false\n      description: Only include results with a type field exactly matching the given string\n      schema:\n        type: string\n    SortCertificates:\n      description: Sort results. Default sorting is by id.\n      name: sort\n      style: form\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - 'id:asc'\n          - 'id:desc'\n          - 'common_name:asc'\n          - 'common_name:desc'\n          - 'expiration:asc'\n          - 'expiration:desc'\n    SortContacts:\n      description: Sort results. Default sorting is by id ascending.\n      name: sort\n      style: form\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - 'id:asc'\n          - 'id:desc'\n          - 'label:asc'\n          - 'label:desc'\n          - 'email:asc'\n          - 'email:desc'\n    SortDomains:\n      description: Sort results. Default sorting is ascending by name.\n      name: sort\n      style: form\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - 'id:asc'\n          - 'id:desc'\n          - 'name:asc'\n          - 'name:desc'\n          - 'expiration:asc'\n          - 'expiration:desc'\n    SortDelegationSignerRecords:\n      description: Sort results. Default sorting is by id.\n      name: sort\n      style: form\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - 'id:asc'\n          - 'id:desc'\n          - 'created_at:asc'\n          - 'created_at:desc'\n    SortEmailForwards:\n      description: Sort results. Default sorting is by id.\n      name: sort\n      style: form\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - 'id:asc'\n          - 'id:desc'\n          - 'from:asc'\n          - 'from:desc'\n          - 'to:asc'\n          - 'to:desc'\n    SortPrimaryServers:\n      description: Sort results. Default sorting is ascending by id.\n      name: sort\n      style: form\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - 'id:asc'\n          - 'id:desc'\n          - 'name:asc'\n          - 'name:desc'\n    SortServices:\n      description: Sort results. Default sorting is by id ascending.\n      name: sort\n      style: form\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - 'id:asc'\n          - 'id:desc'\n          - 'sid:asc'\n          - 'sid:desc'\n    SortTemplates:\n      description: Sort results. Default sorting is by id ascending.\n      name: sort\n      style: form\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - 'id:asc'\n          - 'id:desc'\n          - 'name:asc'\n          - 'name:desc'\n          - 'sid:asc'\n          - 'sid:desc'\n    SortTemplateRecords:\n      description: Sort results. Default sorting is by id ascending.\n      name: sort\n      style: form\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - 'id:asc'\n          - 'id:desc'\n          - 'name:asc'\n          - 'name:desc'\n          - 'content:asc'\n          - 'content:desc'\n          - 'type:asc'\n          - 'type:desc'\n    SortTLDs:\n      description: Sort results. Default sorting is by tld ascending.\n      name: sort\n      style: form\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - 'tld:asc'\n          - 'tld:desc'\n    SortWebhooks:\n      description: Sort results. Default sorting is by name ascending.\n      name: sort\n      style: form\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - 'id:asc'\n          - 'id:desc'\n    SortZones:\n      description: Sort results. Default sorting is by name ascending.\n      name: sort\n      style: form\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - 'id:asc'\n          - 'id:desc'\n          - 'name:asc'\n          - 'name:desc'\n    SortZoneRecords:\n      description: Sort results. Default sorting is by name ascending.\n      name: sort\n      style: form\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - 'id:asc'\n          - 'id:desc'\n          - 'name:asc'\n          - 'name:desc'\n          - 'content:asc'\n          - 'content:desc'\n          - 'type:asc'\n          - 'type:desc'\n  schemas:\n    Date:\n      type: string\n      format: date\n      example: '2010-01-01'\n      description: A date value formatted as ISO 8601.\n    DateTime:\n      type: string\n      format: date-time\n      example: '2010-01-01T01:00:00Z'\n      description: A date-time value formatted as ISO 8601.\n    NullableDate:\n      type:\n        - string\n        - 'null'\n      format: date\n      description: 'A nullable date-time value. The value can be null, when present the value is formatted according to the ISO 8601 specification.'\n    NullableDateTime:\n      type:\n        - string\n        - 'null'\n      format: date-time\n      description: 'A nullable date-time value. The value can be null, when present the value is formatted according to the ISO 8601 specification.'\n    Error:\n      type: object\n      properties:\n        message:\n          type: string\n    Pagination:\n      type: object\n      properties:\n        current_page:\n          type: integer\n        per_page:\n          type: integer\n        total_entries:\n          type: integer\n        total_pages:\n          type: integer\n      example:\n        current_page: 1\n        per_page: 30\n        total_entries: 2\n        total_pages: 1\n    Account:\n      type: object\n      properties:\n        id:\n          type: integer\n        email:\n          type: string\n        plan_identifier:\n          type: string\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        email: example-account@example.com\n        plan_identifier: dnsimple-professional\n        created_at: '2015-09-18T23:04:37Z'\n        updated_at: '2016-06-09T20:03:39Z'\n    WebhookAccount:\n      type: object\n      properties:\n        id:\n          type: integer\n        display:\n          type: string\n        identifier:\n          type: string\n      example:\n        id: 1\n        display: Personal\n        identifier: example@example.com\n    AccountInvitation:\n      type: object\n      properties:\n        id:\n          type: integer\n        account_id:\n          type: integer\n        email:\n          type: string\n        token:\n          type: string\n        invitation_sent_at:\n          $ref: '#/components/schemas/DateTime'\n        invitation_accepted_at:\n          nullable: true\n          anyOf:\n            - $ref: '#/components/schemas/DateTime'\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n    Actor:\n      type: object\n      properties:\n        id:\n          type: integer\n        identifier:\n          type: string\n        pretty:\n          type: string\n    BillingSettings:\n      type: object\n    Certificate:\n      type: object\n      properties:\n        id:\n          type: integer\n        domain_id:\n          type: integer\n        contact_id:\n          type: integer\n          deprecated: true\n        name:\n          type: string\n        common_name:\n          type: string\n        years:\n          type: integer\n        csr:\n          type: string\n        state:\n          type: string\n          enum:\n            - new\n            - purchased\n            - configured\n            - submitted\n            - issued\n            - rejected\n            - refunded\n            - cancelled\n            - requesting\n            - failed\n        auto_renew:\n          type: boolean\n        alternate_names:\n          type: array\n          items:\n            type: string\n        authority_identifier:\n          type: string\n          enum:\n            - comodo\n            - rapidssl\n            - letsencrypt\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n        expires_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        domain_id: 2\n        name: www\n        common_name: www.weppos.net\n        years: 1\n        csr: |\n          -----BEGIN CERTIFICATE REQUEST-----\n          MIICljCCAX4CAQAwGTEXMBUGA1UEAwwOd3d3LndlcHBvcy5uZXQwggEiMA0GCSqG\n          SIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3MJwx9ahBG3kAwRjQdRvYZqtovUaxY6jp\n          hd09975gO+2eYPDbc1yhNftVJ4KBT0zdEqzX0CwIlxE1MsnZ2YOsC7IJO531hMBp\n          dBxM4tSG07xPz70AVUi9rY6YCUoJHmxoFbclpHFbtXZocR393WyzUK8047uM2mlz\n          03AZKcMdyfeuo2/9TcxpTSCkklGqwqS9wtTogckaDHJDoBunAkMioGfOSMe7Yi6E\n          YRtG4yPJYsDaq2yPJWV8+i0PFR1Wi5RCnPt0YdQWstHuZrxABi45+XVkzKtz3TUc\n          YxrvPBucVa6uzd953u8CixNFkiOefvb/dajsv1GIwH6/Cvc1ftz1AgMBAAGgODA2\n          BgkqhkiG9w0BCQ4xKTAnMCUGA1UdEQQeMByCDnd3dy53ZXBwb3MubmV0ggp3ZXBw\n          b3MubmV0MA0GCSqGSIb3DQEBCwUAA4IBAQCDnVBO9RdJX0eFeZzlv5c8yG8duhKP\n          l0Vl+V88fJylb/cbNj9qFPkKTK0vTXmS2XUFBChKPtLucp8+Z754UswX+QCsdc7U\n          TTSG0CkyilcSubdZUERGej1XfrVQhrokk7Fu0Jh3BdT6REP0SIDTpA8ku/aRQiAp\n          p+h19M37S7+w/DMGDAq2LSX8jOpJ1yIokRDyLZpmwyLxutC21DXMGoJ3xZeUFrUT\n          qRNwzkn2dJzgTrPkzhaXalUBqv+nfXHqHaWljZa/O0NVCFrHCdTdd53/6EE2Yabv\n          q5SFTkRCpaxrvM/7a8Tr4ixD1/VKD6rw3+WC00000000000000000000\n          -----END CERTIFICATE REQUEST-----\n        state: issued\n        authority_identifier: letsencrypt\n        created_at: '2016-06-11T18:47:08Z'\n        updated_at: '2016-06-11T18:47:37Z'\n        expires_at: '2016-09-09T18:47:37Z'\n    CertificateDownload:\n      type: object\n      properties:\n        server:\n          type: string\n        root:\n          nullable: true\n          type: string\n        chain:\n          type: array\n          items:\n            type: string\n      example:\n        server: |\n          -----BEGIN CERTIFICATE-----\n          MIIE7TCCA9WgAwIBAgITAPpTe4O3vjuQ9L4gLsogi/ukujANBgkqhkiG9w0BAQsF\n          ADAiMSAwHgYDVQQDDBdGYWtlIExFIEludGVybWVkaWF0ZSBYMTAeFw0xNjA2MTEx\n          NzQ4MDBaFw0xNjA5MDkxNzQ4MDBaMBkxFzAVBgNVBAMTDnd3dy53ZXBwb3MubmV0\n          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtzCcMfWoQRt5AMEY0HUb\n          2GaraL1GsWOo6YXdPfe+YDvtnmDw23NcoTX7VSeCgU9M3RKs19AsCJcRNTLJ2dmD\n          rAuyCTud9YTAaXQcTOLUhtO8T8+9AFVIva2OmAlKCR5saBW3JaRxW7V2aHEd/d1s\n          s1CvNOO7jNppc9NwGSnDHcn3rqNv/U3MaU0gpJJRqsKkvcLU6IHJGgxyQ6AbpwJD\n          IqBnzkjHu2IuhGEbRuMjyWLA2qtsjyVlfPotDxUdVouUQpz7dGHUFrLR7ma8QAYu\n          Ofl1ZMyrc901HGMa7zwbnFWurs3fed7vAosTRZIjnn72/3Wo7L9RiMB+vwr3NX7c\n          9QIDAQABo4ICIzCCAh8wDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUF\n          BwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBRh9q/3Zxbk4yA/\n          t7j+8xA+rkiZBTAfBgNVHSMEGDAWgBTAzANGuVggzFxycPPhLssgpvVoOjB4Bggr\n          BgEFBQcBAQRsMGowMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwLnN0Zy1pbnQteDEu\n          bGV0c2VuY3J5cHQub3JnLzAzBggrBgEFBQcwAoYnaHR0cDovL2NlcnQuc3RnLWlu\n          dC14MS5sZXRzZW5jcnlwdC5vcmcvMCUGA1UdEQQeMByCCndlcHBvcy5uZXSCDnd3\n          dy53ZXBwb3MubmV0MIH+BgNVHSAEgfYwgfMwCAYGZ4EMAQIBMIHmBgsrBgEEAYLf\n          EwEBATCB1jAmBggrBgEFBQcCARYaaHR0cDovL2Nwcy5sZXRzZW5jcnlwdC5vcmcw\n          gasGCCsGAQUFBwICMIGeDIGbVGhpcyBDZXJ0aWZpY2F0ZSBtYXkgb25seSBiZSBy\n          ZWxpZWQgdXBvbiBieSBSZWx5aW5nIFBhcnRpZXMgYW5kIG9ubHkgaW4gYWNjb3Jk\n          YW5jZSB3aXRoIHRoZSBDZXJ0aWZpY2F0ZSBQb2xpY3kgZm91bmQgYXQgaHR0cHM6\n          Ly9sZXRzZW5jcnlwdC5vcmcvcmVwb3NpdG9yeS8wDQYJKoZIhvcNAQELBQADggEB\n          AEqMdWrmdIyQxthWsX3iHmM2h/wXwEesD0VIaA+Pq4mjwmKBkoPSmHGQ/O4v8RaK\n          B6gl8v+qmvCwwqC1SkBmm+9C2yt/P6WhAiA/DD+WppYgJWfcz2lEKrgufFlHPukB\n          DzE0mJDuXm09QTApWlaTZWYfWKY50T5uOT/rs+OwGFFCO/8o7v5AZRAHos6uzjvq\n          AtFZj/FEnXXMjSSlQ7YKTXToVpnAYH4e3/UMsi6/O4orkVz82ZfhKwMWHV8dXlRw\n          tQaemFWTjGPgSLXJAtQO30DgNJBHX/fJEaHv6Wy8TF3J0wOGpzGbOwaTX8YAmEzC\n          lzzjs+clg5MN5rd1g4POJtU=\n          -----END CERTIFICATE-----\n        root: null\n        chain:\n          - |-\n            -----BEGIN CERTIFICATE-----\n            MIIEqzCCApOgAwIBAgIRAIvhKg5ZRO08VGQx8JdhT+UwDQYJKoZIhvcNAQELBQAw\n            GjEYMBYGA1UEAwwPRmFrZSBMRSBSb290IFgxMB4XDTE2MDUyMzIyMDc1OVoXDTM2\n            MDUyMzIyMDc1OVowIjEgMB4GA1UEAwwXRmFrZSBMRSBJbnRlcm1lZGlhdGUgWDEw\n            ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDtWKySDn7rWZc5ggjz3ZB0\n            8jO4xti3uzINfD5sQ7Lj7hzetUT+wQob+iXSZkhnvx+IvdbXF5/yt8aWPpUKnPym\n            oLxsYiI5gQBLxNDzIec0OIaflWqAr29m7J8+NNtApEN8nZFnf3bhehZW7AxmS1m0\n            ZnSsdHw0Fw+bgixPg2MQ9k9oefFeqa+7Kqdlz5bbrUYV2volxhDFtnI4Mh8BiWCN\n            xDH1Hizq+GKCcHsinDZWurCqder/afJBnQs+SBSL6MVApHt+d35zjBD92fO2Je56\n            dhMfzCgOKXeJ340WhW3TjD1zqLZXeaCyUNRnfOmWZV8nEhtHOFbUCU7r/KkjMZO9\n            AgMBAAGjgeMwgeAwDgYDVR0PAQH/BAQDAgGGMBIGA1UdEwEB/wQIMAYBAf8CAQAw\n            HQYDVR0OBBYEFMDMA0a5WCDMXHJw8+EuyyCm9Wg6MHoGCCsGAQUFBwEBBG4wbDA0\n            BggrBgEFBQcwAYYoaHR0cDovL29jc3Auc3RnLXJvb3QteDEubGV0c2VuY3J5cHQu\n            b3JnLzA0BggrBgEFBQcwAoYoaHR0cDovL2NlcnQuc3RnLXJvb3QteDEubGV0c2Vu\n            Y3J5cHQub3JnLzAfBgNVHSMEGDAWgBTBJnSkikSg5vogKNhcI5pFiBh54DANBgkq\n            hkiG9w0BAQsFAAOCAgEABYSu4Il+fI0MYU42OTmEj+1HqQ5DvyAeyCA6sGuZdwjF\n            UGeVOv3NnLyfofuUOjEbY5irFCDtnv+0ckukUZN9lz4Q2YjWGUpW4TTu3ieTsaC9\n            AFvCSgNHJyWSVtWvB5XDxsqawl1KzHzzwr132bF2rtGtazSqVqK9E07sGHMCf+zp\n            DQVDVVGtqZPHwX3KqUtefE621b8RI6VCl4oD30Olf8pjuzG4JKBFRFclzLRjo/h7\n            IkkfjZ8wDa7faOjVXx6n+eUQ29cIMCzr8/rNWHS9pYGGQKJiY2xmVC9h12H99Xyf\n            zWE9vb5zKP3MVG6neX1hSdo7PEAb9fqRhHkqVsqUvJlIRmvXvVKTwNCP3eCjRCCI\n            PTAvjV+4ni786iXwwFYNz8l3PmPLCyQXWGohnJ8iBm+5nk7O2ynaPVW0U2W+pt2w\n            SVuvdDM5zGv2f9ltNWUiYZHJ1mmO97jSY/6YfdOUH66iRtQtDkHBRdkNBsMbD+Em\n            2TgBldtHNSJBfB3pm9FblgOcJ0FSWcUDWJ7vO0+NTXlgrRofRT6pVywzxVo6dND0\n            WzYlTWeUVsO40xJqhgUQRER9YLOLxJ0O6C8i0xFxAMKOtSdodMB3RIwt7RFQ0uyt\n            n5Z5MqkYhlMI3J1tPRTp1nEt9fyGspBOO05gi148Qasp+3N+svqKomoQglNoAxU=\n            -----END CERTIFICATE-----\n    CertificatePrivateKey:\n      type: object\n      properties:\n        private_key:\n          type: string\n      example:\n        private_key: |\n          -----BEGIN RSA PRIVATE KEY-----\n          MIIEowIBAAKCAQEAtzCcMfWoQRt5AMEY0HUb2GaraL1GsWOo6YXdPfe+YDvtnmDw\n          23NcoTX7VSeCgU9M3RKs19AsCJcRNTLJ2dmDrAuyCTud9YTAaXQcTOLUhtO8T8+9\n          AFVIva2OmAlKCR5saBW3JaRxW7V2aHEd/d1ss1CvNOO7jNppc9NwGSnDHcn3rqNv\n          /U3MaU0gpJJRqsKkvcLU6IHJGgxyQ6AbpwJDIqBnzkjHu2IuhGEbRuMjyWLA2qts\n          jyVlfPotDxUdVouUQpz7dGHUFrLR7ma8QAYuOfl1ZMyrc901HGMa7zwbnFWurs3f\n          ed7vAosTRZIjnn72/3Wo7L9RiMB+vwr3NX7c9QIDAQABAoIBAEQx32OlzK34GTKT\n          r7Yicmw7xEGofIGa1Q2h3Lut13whsxKLif5X0rrcyqRnoeibacS+qXXrJolIG4rP\n          Tl8/3wmUDQHs5J+6fJqFM+fXZUCP4AFiFzzhgsPBsVyd0KbWYYrZ0qU7s0ttoRe+\n          TGjuHgIe3ip1QKNtx2Xr50YmytDydknmro79J5Gfrub1l2iA8SDm1eBrQ4SFaNQ2\n          U709pHeSwX8pTihUX2Zy0ifpr0O1wYQjGLneMoG4rrNQJG/z6iUdhYczwwt1kDRQ\n          4WkM2sovFOyxbBfoCQ3Gy/eem7OXfjNKUe47DAVLnPkKbqL/3Lo9FD7kcB8K87Ap\n          r/vYrl0CgYEA413RAk7571w5dM+VftrdbFZ+Yi1OPhUshlPSehavro8kMGDEG5Ts\n          74wEz2X3cfMxauMpMrBk/XnUCZ20AnWQClK73RB5fzPw5XNv473Tt/AFmt7eLOzl\n          OcYrhpEHegtsD/ZaljlGtPqsjQAL9Ijhao03m1cGB1+uxI7FgacdckcCgYEAzkKP\n          6xu9+WqOol73cnlYPS3sSZssyUF+eqWSzq2YJGRmfr1fbdtHqAS1ZbyC5fZVNZYV\n          ml1vfXi2LDcU0qS04JazurVyQr2rJZMTlCWVET1vhik7Y87wgCkLwKpbwamPDmlI\n          9GY+fLNEa4yfAOOpvpTJpenUScxyKWH2cdYFOOMCgYBhrJnvffINC/d64Pp+BpP8\n          yKN+lav5K6t3AWd4H2rVeJS5W7ijiLTIq8QdPNayUyE1o+S8695WrhGTF/aO3+ZD\n          KQufikZHiQ7B43d7xL7BVBF0WK3lateGnEVyh7dIjMOdj92Wj4B6mv2pjQ2VvX/p\n          AEWVLCtg24/+zL64VgxmXQKBgGosyXj1Zu2ldJcQ28AJxup3YVLilkNje4AXC2No\n          6RCSvlAvm5gpcNGE2vvr9lX6YBKdl7FGt8WXBe/sysNEFfgmm45ZKOBCUn+dHk78\n          qaeeQHKHdxMBy7utZWdgSqt+ZS299NgaacA3Z9kVIiSLDS4V2VeW7riujXXP/9TJ\n          nxaRAoGBAMWXOfNVzfTyrKff6gvDWH+hqNICLyzvkEn2utNY9Q6WwqGuY9fvP/4Z\n          Xzc48AOBzUr8OeA4sHKJ79sJirOiWHNfD1swtvyVzsFZb6moiNwD3Ce/FzYCa3lQ\n          U8blTH/uqpR2pSC6whzJ/lnSdqHUqhyp00000000000000000000\n          -----END RSA PRIVATE KEY-----\n    Collaborator:\n      type: object\n      properties:\n        id:\n          type: integer\n        domain_id:\n          type: integer\n        domain_name:\n          type: string\n        user_id:\n          type: integer\n        user_email:\n          type: string\n        invitation:\n          type: boolean\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n        accepted_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 100\n        domain_id: 1\n        domain_name: example.com\n        user_id: 999\n        user_email: existing-user@example.com\n        invitation: false\n        created_at: '2016-10-07T08:53:41Z'\n        updated_at: '2016-10-07T08:53:41Z'\n        accepted_at: '2016-10-07T08:53:41Z'\n    Contact:\n      type: object\n      properties:\n        id:\n          type: integer\n        account_id:\n          type: integer\n        label:\n          type: string\n        first_name:\n          type: string\n        last_name:\n          type: string\n        organization_name:\n          type: string\n        job_title:\n          type: string\n        address1:\n          type: string\n        address2:\n          type: string\n        city:\n          type: string\n        state_province:\n          type: string\n        postal_code:\n          type: string\n          description: The ISO 3166-1 alpha-2 country code, upper case (eg. DE).\n        country:\n          type: string\n        phone:\n          type: string\n        fax:\n          type: string\n        email:\n          type: string\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        account_id: 1010\n        label: Default\n        first_name: First\n        last_name: User\n        organization_name: Awesome Company\n        job_title: CEO\n        address1: 'Italian Street, 10'\n        address2: ''\n        city: Roma\n        state_province: RM\n        postal_code: '00100'\n        country: IT\n        phone: '+1.8001234567'\n        fax: '+1.8011234567'\n        email: first@example.com\n        created_at: '2013-11-08T17:23:15Z'\n        updated_at: '2015-01-08T21:30:50Z'\n    DelegationSigner:\n      type: object\n      example:\n        id: 24\n        domain_id: 1010\n        algorithm: '8'\n        digest: C1F6E04A5A61FBF65BF9DC8294C363CF11C89E802D926BDAB79C55D27BEFA94F\n        digest_type: '2'\n        keytag: '44620'\n        public_key: null\n        created_at: '2017-03-03T13:49:58.000Z'\n        updated_at: '2017-03-03T13:49:58.000Z'\n      properties:\n        id:\n          type: integer\n        domain_id:\n          type: integer\n        algorithm:\n          type: string\n        digest:\n          type: string\n        digest_type:\n          type: string\n        keytag:\n          type: string\n        public_key:\n          type: string\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n    Domain:\n      type: object\n      example:\n        id: 1\n        account_id: 1010\n        registrant_id: null\n        name: example-alpha.com\n        unicode_name: example-alpha.com\n        state: hosted\n        auto_renew: false\n        private_whois: false\n        expires_at: null\n        created_at: '2014-12-06T15:56:55Z'\n        updated_at: '2015-12-09T00:20:56Z'\n      properties:\n        id:\n          type: integer\n        account_id:\n          type: integer\n        registrant_id:\n          nullable: true\n          type: integer\n        name:\n          type: string\n        unicode_name:\n          type: string\n        state:\n          type: string\n          enum:\n            - hosted\n            - registered\n            - expired\n        auto_renew:\n          type: boolean\n        private_whois:\n          type: boolean\n        expires_at:\n          nullable: true\n          anyOf:\n            - $ref: '#/components/schemas/NullableDateTime'\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n    DomainCheckResult:\n      type: object\n      properties:\n        domain:\n          type: string\n          description: The domain name that was checked\n        available:\n          type: boolean\n          description: True if the domain is available to register\n        premium:\n          type: boolean\n          description: 'True if the domain is a premium domain and thus will have a non-standard registration, renewal, and/or transfer fee.'\n      example:\n        domain: ruby.codes\n        available: true\n        premium: true\n    DomainNameServer:\n      type: string\n    DomainPremiumPrice:\n      type: object\n      properties:\n        premium_price:\n          type: string\n          description: The price represented as a USD amount with dollars and cents.\n        action:\n          type: string\n          description: 'The action (registration, transfer, renewal) that the price is applied to.'\n      example:\n        premium_price: '109.00'\n        action: registration\n    DomainPrices:\n      type: object\n      properties:\n        domain:\n          type: string\n          description: The domain name that was checked.\n        premium:\n          type: boolean\n          description: 'True if the domain is a premium domain and thus will have a non-standard registration, renewal, and/or transfer fee.'\n        registration_price:\n          type: number\n          format: float\n          description: The domain registration price represented as a USD amount with dollars and cents.\n        renewal_price:\n          type: number\n          format: float\n          description: The domain renewal price represented as a USD amount with dollars and cents.\n        transfer_price:\n          type: number\n          format: float\n          description: The domain transfer price represented as a USD amount with dollars and cents.\n      example:\n        domain: ruby.codes\n        premium: false\n        registration_price: 12.0\n        renewal_price: 15.0\n        transfer_price: 15.0\n    DomainRegistration:\n      type: object\n      properties:\n        id:\n          type: integer\n        domain_id:\n          type: integer\n        registrant_id:\n          type: integer\n        period:\n          type: integer\n          minimum: 1\n          maximum: 10\n        state:\n          type: string\n          enum:\n            - cancelled\n            - new\n            - registering\n            - registered\n            - failed\n        auto_renew:\n          type: boolean\n        whois_privacy:\n          type: boolean\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        domain_id: 999\n        registrant_id: 2\n        period: 1\n        state: new\n        auto_renew: false\n        whois_privacy: false\n        created_at: '2016-12-09T19:35:31Z'\n        updated_at: '2016-12-09T19:35:31Z'\n    DomainRenewal:\n      type: object\n      properties:\n        id:\n          type: integer\n        domain_id:\n          type: integer\n        period:\n          type: integer\n          minimum: 1\n          maximum: 9\n        state:\n          type: string\n          enum:\n            - cancelled\n            - new\n            - renewing\n            - renewed\n            - failed\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        domain_id: 999\n        period: 1\n        state: new\n        created_at: '2016-12-09T19:46:45Z'\n        updated_at: '2016-12-09T19:46:45Z'\n    DomainTransfer:\n      type: object\n      properties:\n        id:\n          type: integer\n        domain_id:\n          type: integer\n        registrant_id:\n          type: integer\n        state:\n          type: string\n          enum:\n            - cancelled\n            - new\n            - transferring\n            - transferred\n            - failed\n        auto_renew:\n          type: boolean\n        whois_privacy:\n          type: boolean\n        status_description:\n          type: string\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        domain_id: 999\n        registrant_id: 2\n        state: transferring\n        auto_renew: false\n        whois_privacy: false\n        created_at: '2016-12-09T19:43:41Z'\n        updated_at: '2016-12-09T19:43:43Z'\n    DNSSEC:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        enabled: true\n        created_at: '2017-02-03T17:43:22.000Z'\n        updated_at: '2017-02-03T17:43:22.000Z'\n    EmailForward:\n      type: object\n      example:\n        id: 1\n        domain_id: 2\n        alias_email: john.doe@a-domain.com\n        destination_email: john@example.com\n        created_at: '2016-02-04T14:26:50Z'\n        updated_at: '2016-02-04T14:26:50Z'\n      properties:\n        id:\n          type: integer\n        domain_id:\n          type: integer\n        alias_email:\n          type: string\n          format: email\n          description: The receiving email recipient.\n        destination_email:\n          type: string\n          format: email\n          description: The email recipient the messages are delivered to.\n        from:\n          type: string\n          deprecated: true\n          description: Deprecated in favor of alias_email.\n        to:\n          type: string\n          deprecated: true\n          description: Deprecated in favor of destination_email.\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n    EventAccountAddUser:\n      type: object\n      description: Payload for account.add_user event.\n      properties:\n        account:\n          $ref: '#/components/schemas/Account'\n        user:\n          $ref: '#/components/schemas/User'\n    EventAccountBillingSettingsUpdate:\n      type: object\n      description: Payload for account.billing_settings_update event.\n      properties:\n        account:\n          $ref: '#/components/schemas/Account'\n        billing_settings:\n          $ref: '#/components/schemas/BillingSettings'\n    EventAccountPaymentDetailsUpdate:\n      type: object\n      description: Payload for account.payment_details_update event.\n      properties:\n        account:\n          $ref: '#/components/schemas/Account'\n    EventAccountRemoveUser:\n      type: object\n      description: Payload for account.remove_user event.\n      properties:\n        account:\n          $ref: '#/components/schemas/Account'\n        user:\n          $ref: '#/components/schemas/User'\n    EventAccountUpdate:\n      type: object\n      description: Payload for account.update event.\n      properties:\n        account:\n          $ref: '#/components/schemas/Account'\n    EventAccountInvitationAccept:\n      type: object\n      description: Payload for account_invitation.accept event.\n      properties:\n        account:\n          $ref: '#/components/schemas/Account'\n        account_invitation:\n          $ref: '#/components/schemas/AccountInvitation'\n    EventAccountInvitationCreate:\n      type: object\n      description: Payload for account_invitation.create event.\n      properties:\n        account:\n          $ref: '#/components/schemas/Account'\n        account_invitation:\n          $ref: '#/components/schemas/AccountInvitation'\n    EventAccountInvitationRemove:\n      type: object\n      description: Payload for account_invitation.remove event.\n      properties:\n        account:\n          $ref: '#/components/schemas/Account'\n        account_invitation:\n          $ref: '#/components/schemas/AccountInvitation'\n    EventAccountInvitationResend:\n      type: object\n      description: Payload for account_invitation.resend event.\n      properties:\n        account:\n          $ref: '#/components/schemas/Account'\n        account_invitation:\n          $ref: '#/components/schemas/AccountInvitation'\n    EventCertificateAutoRenewalDisable:\n      type: object\n      description: Payload for certificate.auto_renewal_disable\n      properties:\n        certificate:\n          $ref: '#/components/schemas/Certificate'\n    EventCertificateAutoRenewalEnable:\n      type: object\n      description: Payload for certificate.auto_renewal_enable\n      properties:\n        certificate:\n          $ref: '#/components/schemas/Certificate'\n    EventCertificateAutoRenewalFailed:\n      type: object\n      description: Payload for certificate.auto_renewal_failed\n      properties:\n        certificate:\n          $ref: '#/components/schemas/Certificate'\n    EventCertificateIssue:\n      type: object\n      description: Payload for certificate.issue\n      properties:\n        certificate:\n          $ref: '#/components/schemas/Certificate'\n    EventCertificateReissue:\n      type: object\n      description: Payload for certificate.reissue\n      properties:\n        certificate:\n          $ref: '#/components/schemas/Certificate'\n    EventCertificateRemovePrivateKey:\n      type: object\n      description: Payload for certificate.remove_private_key\n      properties:\n        certificate:\n          $ref: '#/components/schemas/Certificate'\n    EventContactCreate:\n      type: object\n      description: Payload for contact.create\n      properties:\n        contact:\n          $ref: '#/components/schemas/Contact'\n    EventContactDelete:\n      type: object\n      description: Payload for contact.delete\n      properties:\n        contact:\n          $ref: '#/components/schemas/Contact'\n    EventContactUpdate:\n      type: object\n      description: Payload for contact.udpate\n      properties:\n        contact:\n          $ref: '#/components/schemas/Contact'\n    EventDNSSECCreate:\n      type: object\n      description: Payload for dnssec.create\n      properties:\n        dnssec:\n          $ref: '#/components/schemas/DNSSEC'\n    EventDNSSECDelete:\n      type: object\n      description: Payload for dnssec.delete\n      properties:\n        dnssec:\n          $ref: '#/components/schemas/DNSSEC'\n    EventDNSSECRotationStart:\n      type: object\n      description: Payload for dnssec.rotation_start\n      properties:\n        delegation_signer_record:\n          $ref: '#/components/schemas/DelegationSigner'\n        dnssec:\n          $ref: '#/components/schemas/DNSSEC'\n    EventDNSSECRotationComplete:\n      type: object\n      description: Payload for dnssec.rotation_complete\n      properties:\n        delegation_signer_record:\n          $ref: '#/components/schemas/DelegationSigner'\n        dnssec:\n          $ref: '#/components/schemas/DNSSEC'\n    EventDomainAutoRenewalDisable:\n      type: object\n      description: Payload for domain.auto_renewal_disable\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n    EventDomainAutoRenewalEnable:\n      type: object\n      description: Payload for domain.auto_renewal_enable\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n    EventDomainCreate:\n      type: object\n      description: Payload for domain.create\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n    EventDomainDelete:\n      type: object\n      description: Payload for domain.delete\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n    EventDomainRegister:\n      type: object\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n    EventDomainRenew:\n      type: object\n      description: Payload for domain.renew\n      properties:\n        auto:\n          type: boolean\n        domain:\n          $ref: '#/components/schemas/Domain'\n    EventDomainDelegationChange:\n      type: object\n      description: Payload for domain.delegation_change\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n        name_servers:\n          type: array\n          items:\n            $ref: '#/components/schemas/NameServer'\n    EventDomainRegistrantChange:\n      type: object\n      description: Payload for domain.registrant_change\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n        registrant:\n          $ref: '#/components/schemas/Contact'\n    EventDomainResolutionDisable:\n      type: object\n      description: Payload for domain.resolution_disable\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n    EventDomainResolutionEnable:\n      type: object\n      description: Payload for domain.resolution_enable\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n    EventDomainTransfer:\n      type: object\n      description: Payload for domain.transfer\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n    EventEmailForwardCreate:\n      type: object\n      description: Payload for email_forward.create\n      properties:\n        email_forward:\n          $ref: '#/components/schemas/EmailForward'\n    EventEmailForwardDelete:\n      type: object\n      description: Payload for email_forward.delete\n      properties:\n        email_forward:\n          $ref: '#/components/schemas/EmailForward'\n    EventEmailForwardUpdate:\n      type: object\n      description: Payload for email_forward.update\n      properties:\n        email_forward:\n          $ref: '#/components/schemas/EmailForward'\n    EventInvoiceCollect:\n      type: object\n      description: Payload for invoice.collect\n      properties:\n        invoice:\n          $ref: '#/components/schemas/Invoice'\n    EventNameServerDeregister:\n      type: object\n      description: Payload for name_server.deregister\n      properties:\n        name_server:\n          type: object\n          properties:\n            name:\n              type: string\n    EventNameServerRegister:\n      type: object\n      description: Payload for name_server.register\n      properties:\n        name_server:\n          type: object\n          properties:\n            name:\n              type: string\n    EventOauthApplicationCreate:\n      type: object\n      description: Payload for oauth_application.create\n      properties:\n        oauth_application:\n          $ref: '#/components/schemas/OauthApplication'\n    EventOauthApplicationDelete:\n      type: object\n      description: Payload for oauth_application.delete\n      properties:\n        oauth_application:\n          $ref: '#/components/schemas/OauthApplication'\n    EventOauthApplicationResetClientSecret:\n      type: object\n      description: Payload for oauth_application.reset_client_secret\n      properties:\n        oauth_application:\n          $ref: '#/components/schemas/OauthApplication'\n    EventOauthApplicationRevokeAccessTokens:\n      type: object\n      description: Payload for oauth_application.revoke_access_tokens\n      properties:\n        oauth_application:\n          $ref: '#/components/schemas/OauthApplication'\n    EventOauthApplicationUpdate:\n      type: object\n      description: Payload for oauth_application.update\n      properties:\n        oauth_application:\n          $ref: '#/components/schemas/OauthApplication'\n    EventPushAccept:\n      type: object\n      description: Payload for push.accept\n      properties:\n        push:\n          $ref: '#/components/schemas/Push'\n    EventPushInitiate:\n      type: object\n      description: Payload for push.initiate\n      properties:\n        push:\n          $ref: '#/components/schemas/Push'\n    EventPushReject:\n      type: object\n      description: Payload for push.reject\n      properties:\n        push:\n          $ref: '#/components/schemas/Push'\n    EventRecordCreate:\n      type: object\n      description: Payload for record.create\n      properties:\n        zone_record:\n          $ref: '#/components/schemas/ZoneRecord'\n    EventRecordDelete:\n      type: object\n      description: Payload for record.delete\n      properties:\n        zone_record:\n          $ref: '#/components/schemas/ZoneRecord'\n    EventRecordUpdate:\n      type: object\n      description: Payload for record.update\n      properties:\n        zone_record:\n          $ref: '#/components/schemas/ZoneRecord'\n    EventSecondaryDNSCreate:\n      type: object\n      description: Payload for secondary_dns.create\n      properties:\n        configuration:\n          $ref: '#/components/schemas/SecondaryDNS'\n    EventSecondaryDNSDelete:\n      type: object\n      description: Payload for secondary_dns.delete\n      properties:\n        configuration:\n          $ref: '#/components/schemas/SecondaryDNS'\n    EventSecondaryDNSUpdate:\n      type: object\n      description: Payload for secondary_dns.update\n      properties:\n        configuration:\n          $ref: '#/components/schemas/SecondaryDNS'\n    EventSubscriptionMigrate:\n      type: object\n      description: Payload for subscription.migrate\n      properties:\n        subscription:\n          $ref: '#/components/schemas/Subscription'\n    EventSubscriptionRenew:\n      type: object\n      description: Payload for subscription.renew\n      properties:\n        subscription:\n          $ref: '#/components/schemas/Subscription'\n    EventSubscriptionSubscribe:\n      type: object\n      description: Payload for subscription.subscribe\n      properties:\n        subscription:\n          $ref: '#/components/schemas/Subscription'\n    EventSubscriptionUnsubscribe:\n      type: object\n      description: Payload for subscription.unsubscribe\n      properties:\n        subscription:\n          $ref: '#/components/schemas/Subscription'\n    EventTemplateApply:\n      type: object\n      description: Payload for template.apply\n      properties:\n        template:\n          $ref: '#/components/schemas/Template'\n        zone:\n          $ref: '#/components/schemas/Zone'\n    EventTemplateCreate:\n      type: object\n      description: Payload for template.create\n      properties:\n        template:\n          $ref: '#/components/schemas/Template'\n    EventTemplateDelete:\n      type: object\n      description: Payload for template.delete\n      properties:\n        template:\n          $ref: '#/components/schemas/Template'\n    EventTemplateUpdate:\n      type: object\n      description: Payload for template.update\n      properties:\n        template:\n          $ref: '#/components/schemas/Template'\n    EventTemplateRecordCreate:\n      type: object\n      description: Payload for template_record.create\n      properties:\n        template_record:\n          $ref: '#/components/schemas/TemplateRecord'\n    EventTemplateRecordDelete:\n      type: object\n      description: Payload for template_record.delete\n      properties:\n        template_record:\n          $ref: '#/components/schemas/TemplateRecord'\n    EventVanityDisable:\n      type: object\n      description: Payload for vanity.disable\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n    EventVanityEnable:\n      type: object\n      description: Payload for vanity.enable\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n    EventWebhookCreate:\n      type: object\n      description: Payload for webhook.create\n      properties:\n        webhook:\n          $ref: '#/components/schemas/Webhook'\n    EventWebhookDelete:\n      type: object\n      description: Payload for webhook.delete\n      properties:\n        webhook:\n          $ref: '#/components/schemas/Webhook'\n    EventWhoisPrivacyDisable:\n      type: object\n      description: Payload for whois_privacy.disable\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n        whois_privacy:\n          $ref: '#/components/schemas/WhoisPrivacy'\n    EventWhoisPrivacyEnable:\n      type: object\n      description: Payload for whois_privacy.enable\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n        whois_privacy:\n          $ref: '#/components/schemas/WhoisPrivacy'\n    EventWhoisPrivacyPurchase:\n      type: object\n      description: Payload for whois_privacy.purchase\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n        whois_privacy:\n          $ref: '#/components/schemas/WhoisPrivacy'\n    EventWhoisPrivacyRenew:\n      type: object\n      description: Payload for whois_privacy.renew\n      properties:\n        domain:\n          $ref: '#/components/schemas/Domain'\n        whois_privacy:\n          $ref: '#/components/schemas/WhoisPrivacy'\n    EventZoneCreate:\n      type: object\n      description: Payload for zone.create\n      properties:\n        zone:\n          $ref: '#/components/schemas/Zone'\n    EventZoneDelete:\n      type: object\n      description: Payload for zone.delete\n      properties:\n        zone:\n          $ref: '#/components/schemas/Zone'\n    ExtendedAttribute:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        required:\n          type: boolean\n        options:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExtendedAttributeOption'\n      example:\n        name: uk_legal_type\n        description: Legal type of registrant contact\n        required: true\n        options:\n          - title: UK Individual\n            value: IND\n            description: UK Individual (our default value)\n          - title: Non-UK Individual (representing self)\n            value: FIND\n            description: Non-UK Individual (representing self)\n    ExtendedAttributeOption:\n      type: object\n      properties:\n        title:\n          type: string\n        value:\n          type: string\n        description:\n          type: string\n      example:\n        title: UK Individual\n        value: IND\n        description: UK Individual (our default value)\n    Invoice:\n      type: object\n      properties:\n        id:\n          type: integer\n        invoice_number:\n          type: string\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n    LetsencryptCertificatePurchase:\n      type: object\n      properties:\n        id:\n          type: integer\n        certificate_id:\n          type: integer\n        state:\n          type: string\n          enum:\n            - new\n            - purchased\n            - configured\n            - submitted\n            - issued\n            - rejected\n            - refunded\n            - cancelled\n            - requesting\n            - failed\n        auto_renew:\n          type: boolean\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        certificate_id: 1\n        state: new\n        auto_renewal: true\n        created_at: '2016-06-11T18:47:08Z'\n        updated_at: '2016-06-11T18:47:37Z'\n    LetsencryptCertificateRenewal:\n      type: object\n      properties:\n        id:\n          type: integer\n        old_certificate_id:\n          type: integer\n        new_certificate_id:\n          type: integer\n        state:\n          type: string\n          enum:\n            - cancelled\n            - new\n            - renewing\n            - renewed\n            - failed\n        auto_renew:\n          type: boolean\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 999\n        old_certificate_id: 200\n        new_certificate_id: 300\n        state: new\n        auto_renewal: true\n        created_at: '2017-10-19T08:18:53Z'\n        updated_at: '2017-10-19T08:18:53Z'\n    NameServer:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        ipv4:\n          type: string\n        ipv6:\n          type: string\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        name: ns1.example.com\n        ipv4: 127.0.0.1\n        ipv6: '::1'\n        created_at: '2016-07-11T09:40:19Z'\n        updated_at: '2016-07-11T09:40:19Z'\n    OauthApplication:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        description:\n          type: string\n        homepage_url:\n          type: string\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n    PrimaryServer:\n      type: object\n      properties:\n        id:\n          type: integer\n        account_id:\n          type: integer\n        name:\n          type: string\n        ip:\n          type: string\n        port:\n          type: integer\n        linked_secondary_zones:\n          type: array\n          items:\n            type: string\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        account_id: 2020\n        name: 'Primary Server'\n        ip: '1.1.1.1'\n        port: 4567\n        linked_secondary_zones: ['example.com']\n        created_at: '2016-08-11T10:16:03Z'\n        updated_at: '2016-08-11T10:16:03Z'\n    Push:\n      type: object\n      properties:\n        id:\n          type: integer\n        domain_id:\n          type: integer\n        contact_id:\n          type: integer\n        account_id:\n          type: integer\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n        accepted_at:\n          nullable: true\n          anyOf:\n            - $ref: '#/components/schemas/NullableDateTime'\n      example:\n        id: 1\n        domain_id: 100\n        contact_id: 2\n        account_id: 2020\n        created_at: '2016-08-11T10:16:03Z'\n        updated_at: '2016-08-11T10:16:03Z'\n        accepted_at: null\n    SecondaryDNS:\n      type: object\n      properties:\n        id:\n          type: integer\n        zone_id:\n          type: string\n        name_servers:\n          type: array\n          items:\n            type: string\n        whitelisted_ips:\n          type: array\n          items:\n            type: string\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n    Service:\n      type: object\n      example:\n        id: 2\n        name: Service 2\n        sid: service2\n        description: Second service example.\n        setup_description: null\n        requires_setup: true\n        default_subdomain: null\n        created_at: '2014-02-14T19:15:19Z'\n        updated_at: '2016-03-04T09:23:27Z'\n        settings:\n          - name: username\n            label: Service 2 Account Username\n            append: .service2.com\n            description: Your Service2 username is used to connect services to your account.\n            example: username\n            password: false\n      properties:\n        id:\n          type: integer\n          description: A unique identifier\n        name:\n          type: string\n          description: A human-readable name\n        sid:\n          type: string\n          description: A string identifier that can be used in URLs (always lowercase)\n        description:\n          type: string\n          description: A human-readable description of the one-click service\n        setup_description:\n          type:\n            - string\n            - 'null'\n          description: Describes setup requirements\n        requires_setup:\n          type: boolean\n          description: Flag indicating whether setup is required\n        default_subdomain:\n          type:\n            - string\n            - 'null'\n          description: The default subdomain used when creating DNS records\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n        settings:\n          type: array\n          items:\n            $ref: '#/components/schemas/ServiceSetting'\n    ServiceSetting:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The form name for the setting\n        label:\n          type: string\n          description: The human-readable label value\n        append:\n          type: string\n          description: Additional text to append to the input field\n        description:\n          type: string\n          description: Description of the setting\n        example:\n          type: string\n          description: An example value\n        password:\n          type: boolean\n          description: true if the value is a password (and thus should not be visible in the field)\n          default: false\n      example:\n        name: username\n        label: Service 2 Account Username\n        append: .service2.com\n        description: Your Service2 username is used to connect services to your account.\n        example: username\n        password: false\n    Subscription:\n      type: object\n      properties:\n        id:\n          type: integer\n        plan_name:\n          type: string\n          enum:\n            - Silver\n            - Gold\n            - Silver v1 Yearly\n            - Bronze Yearly\n            - Gold v1 Yearly\n            - No DNS\n            - Professional Yearly\n            - Platinum Yearly\n            - Personal Yearly\n            - Silver Yearly\n            - Business\n            - Bronze Yearly v1\n            - Bronze\n            - Business Yearly\n            - Personal\n            - Basic Reseller Yearly\n            - Expert Reseller\n            - Expert Reseller Yearly\n            - Silver v1\n            - Master Reseller Yearly\n            - Basic Reseller\n            - Gold Yearly\n            - Bronze v1\n            - Professional\n            - Master Reseller\n            - Gold v1\n            - Platinum\n        state:\n          type: string\n          enum:\n            - new\n            - subscribing\n            - subscribed\n            - unsubscribed\n            - not_subscribed\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n    Template:\n      type: object\n      properties:\n        id:\n          type: integer\n        account_id:\n          type: integer\n        name:\n          type: string\n        sid:\n          type: string\n        description:\n          type: string\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        account_id: 1010\n        name: Alpha\n        sid: alpha\n        description: An alpha template.\n        created_at: '2016-03-22T11:08:58Z'\n        updated_at: '2016-03-22T11:08:58Z'\n    TemplateRecord:\n      type: object\n      properties:\n        id:\n          type: integer\n        template_id:\n          type: integer\n        name:\n          type: string\n        content:\n          type: string\n        ttl:\n          $ref: '#/components/schemas/TTL'\n        priority:\n          type: integer\n          nullable: true\n        type:\n          $ref: '#/components/schemas/TemplateRecordType'\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 296\n        template_id: 268\n        name: ''\n        content: 192.168.1.1\n        ttl: 3600\n        priority: null\n        type: A\n        created_at: '2016-04-26T08:23:54Z'\n        updated_at: '2016-04-26T08:23:54Z'\n    TemplateRecordType:\n      type: string\n      description: Supported DNS record types for templates.\n      enum:\n        - A\n        - AAAA\n        - ALIAS\n        - CAA\n        - CNAME\n        - DNSKEY\n        - DS\n        - HINFO\n        - MX\n        - NAPTR\n        - NS\n        - POOL\n        - PTR\n        - SOA\n        - SPF\n        - SRV\n        - SSHFP\n        - TXT\n        - URL\n    TLD:\n      type: object\n      properties:\n        tld:\n          type: string\n          description: 'The registerable suffix. In most cases the suffix matches a TLD, but there are some cases where the suffix is a subzone of the TLD (e.g. com.au).'\n        tld_type:\n          $ref: '#/components/schemas/TLDType'\n        whois_privacy:\n          type: boolean\n          description: true if the suffix allows WHOIS privacy as a separate component. Some registries may provide WHOIS privacy at registry level by limiting the visibility of certain attributes in the WHOIS response.\n        auto_renew_only:\n          type: boolean\n          description: true if the suffix requires auto-renewal and can't be renewed manually\n        idn:\n          type: boolean\n          description: true if the suffix supports Internationalized Domain Names (IDN)\n        registration_enabled:\n          type: boolean\n          description: true if DNSimple supports registrations for this TLD\n        renewal_enabled:\n          type: boolean\n          description: true if DNSimple supports renewals for this TLD\n        transfer_enabled:\n          type: boolean\n          description: true if DNSimple supports inbound transfers for this TLD\n        dnssec_interface_type:\n          type: string\n          description: type of data interface required for DNSSEC\n          enum:\n            - ds\n            - key\n      example:\n        tld: ac\n        tld_type: 2\n        whois_privacy: false\n        auto_renew_only: true\n        idn: false\n        minimum_registration: 1\n        registration_enabled: true\n        renewal_enabled: true\n        transfer_enabled: false\n        dnssec_interface_type: 'ds'\n    TLDType:\n      type: integer\n      description: 'TLD types are: * 1 - gTLD (global TLD) * 2 - ccTLD (country-code TLD) * 3 - newTLD (new global TLD)'\n      enum:\n        - 1\n        - 2\n        - 3\n    TTL:\n      type: integer\n      minimum: 0\n      default: 3600\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n        email:\n          type: string\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        email: example-user@example.com\n        created_at: '2015-09-18T23:04:37Z'\n        updated_at: '2016-06-09T20:03:39Z'\n    VanityNameServer:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        ipv4:\n          type: string\n        ipv6:\n          type: string\n    Webhook:\n      type: object\n      properties:\n        id:\n          type: integer\n        url:\n          type: string\n          format: uri\n        suppressed_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        url: 'https://webhook.test'\n        suppressed_at: '2022-06-07T17:45:13Z'\n    WebhookPayload:\n      type: object\n      properties:\n        name:\n          type: string\n          description: 'The name attribute contains a string representing the name of event that occurred. It will always have an object and action separated by a period. It may optionally include a state for objects that go through state changes, for example `domain.registration:started`.'\n          enum:\n            - account.add_user\n            - account.billing_settings_update\n            - account.payment_details_update\n            - account.remove_user\n            - account.update\n            - account_invitation.accept\n            - account_invitation.create\n            - account_invitation.remove\n            - account_invitation.resend\n            - certificate.auto_renewal_disable\n            - certificate.auto_renewal_enable\n            - certificate.auto_renewal_failed\n            - certificate.issue\n            - certificate.reissue\n            - certificate.remove_private_key\n            - contact.create\n            - contact.update\n            - contact.delete\n            - dnssec.create\n            - dnssec.delete\n            - dnssec.rotation_start\n            - dnssec.rotation_complete\n            - domain.auto_renewal_disable\n            - domain.auto_renewal_enable\n            - domain.create\n            - domain.delete\n            - 'domain.register:started'\n            - domain.register\n            - domain.renew\n            - domain.delegation_change\n            - domain.registrant_change\n            - domain.resolution_disable\n            - domain.resolution_enable\n            - 'domain.transfer:started'\n            - domain.transfer\n            - email_forward.create\n            - email_forward.update\n            - email_forward.delete\n            - name_server.deregister\n            - name_server.register\n            - oauth_application.create\n            - oauth_application.delete\n            - oauth_application.reset_client_secret\n            - oauth_application.revoke_access_tokens\n            - push.accept\n            - push.initiate\n            - push.reject\n            - secondary_dns.create\n            - secondary_dns.delete\n            - secondary_dns.update\n            - subscription.migrate\n            - subscription.subscribe\n            - subscription.unsubscribe\n            - template.create\n            - template.delete\n            - template.update\n            - template_record.create\n            - template_record.delete\n            - vanity.disable\n            - vanity.enable\n            - webhook.create\n            - webhook.delete\n            - whois_privacy.disable\n            - whois_privacy.enable\n            - whois_privacy.purchase\n            - whois_privacy.renew\n            - zone.create\n            - zone.delete\n            - zone_record.create\n            - zone_record.delete\n            - zone_record.update\n        api_version:\n          type: string\n          description: 'The api_version is the API version used to serialize the data in the payload. For version 2 of the API, this is the string v2. For example, you can expect a domain object to be serialized using the same domain attributes described in the corresponding API page.'\n          enum:\n            - v2\n        request_identifier:\n          type: string\n          description: The request_identifier attribute is a UUID that provides a way to identify this request. You may use this UUID to ensure a webhook is processed once and only once by keeping a persistent history of the identifiers sent and never handling a webhook which was already processed.\n        data:\n          anyOf:\n            - $ref: '#/components/schemas/EventAccountAddUser'\n            - $ref: '#/components/schemas/EventAccountBillingSettingsUpdate'\n            - $ref: '#/components/schemas/EventAccountPaymentDetailsUpdate'\n            - $ref: '#/components/schemas/EventAccountRemoveUser'\n            - $ref: '#/components/schemas/EventAccountUpdate'\n            - $ref: '#/components/schemas/EventAccountInvitationAccept'\n            - $ref: '#/components/schemas/EventAccountInvitationCreate'\n            - $ref: '#/components/schemas/EventAccountInvitationRemove'\n            - $ref: '#/components/schemas/EventAccountInvitationResend'\n            - $ref: '#/components/schemas/EventCertificateAutoRenewalDisable'\n            - $ref: '#/components/schemas/EventCertificateAutoRenewalEnable'\n            - $ref: '#/components/schemas/EventCertificateAutoRenewalFailed'\n            - $ref: '#/components/schemas/EventCertificateIssue'\n            - $ref: '#/components/schemas/EventCertificateReissue'\n            - $ref: '#/components/schemas/EventCertificateRemovePrivateKey'\n            - $ref: '#/components/schemas/EventContactCreate'\n            - $ref: '#/components/schemas/EventContactDelete'\n            - $ref: '#/components/schemas/EventContactUpdate'\n            - $ref: '#/components/schemas/EventDNSSECCreate'\n            - $ref: '#/components/schemas/EventDNSSECDelete'\n            - $ref: '#/components/schemas/EventDNSSECRotationStart'\n            - $ref: '#/components/schemas/EventDNSSECRotationComplete'\n            - $ref: '#/components/schemas/EventDomainAutoRenewalDisable'\n            - $ref: '#/components/schemas/EventDomainAutoRenewalEnable'\n            - $ref: '#/components/schemas/EventDomainCreate'\n            - $ref: '#/components/schemas/EventDomainDelete'\n            - $ref: '#/components/schemas/EventDomainRegister'\n            - $ref: '#/components/schemas/EventDomainRenew'\n            - $ref: '#/components/schemas/EventDomainDelegationChange'\n            - $ref: '#/components/schemas/EventDomainRegistrantChange'\n            - $ref: '#/components/schemas/EventDomainResolutionDisable'\n            - $ref: '#/components/schemas/EventDomainResolutionEnable'\n            - $ref: '#/components/schemas/EventDomainTransfer'\n            - $ref: '#/components/schemas/EventEmailForwardCreate'\n            - $ref: '#/components/schemas/EventEmailForwardDelete'\n            - $ref: '#/components/schemas/EventEmailForwardUpdate'\n            - $ref: '#/components/schemas/EventInvoiceCollect'\n            - $ref: '#/components/schemas/EventNameServerDeregister'\n            - $ref: '#/components/schemas/EventNameServerRegister'\n            - $ref: '#/components/schemas/EventOauthApplicationCreate'\n            - $ref: '#/components/schemas/EventOauthApplicationDelete'\n            - $ref: '#/components/schemas/EventOauthApplicationUpdate'\n            - $ref: '#/components/schemas/EventOauthApplicationResetClientSecret'\n            - $ref: '#/components/schemas/EventOauthApplicationRevokeAccessTokens'\n            - $ref: '#/components/schemas/EventPushAccept'\n            - $ref: '#/components/schemas/EventPushInitiate'\n            - $ref: '#/components/schemas/EventPushReject'\n            - $ref: '#/components/schemas/EventRecordCreate'\n            - $ref: '#/components/schemas/EventRecordDelete'\n            - $ref: '#/components/schemas/EventRecordUpdate'\n            - $ref: '#/components/schemas/EventSecondaryDNSCreate'\n            - $ref: '#/components/schemas/EventSecondaryDNSDelete'\n            - $ref: '#/components/schemas/EventSecondaryDNSUpdate'\n            - $ref: '#/components/schemas/EventSubscriptionMigrate'\n            - $ref: '#/components/schemas/EventSubscriptionRenew'\n            - $ref: '#/components/schemas/EventSubscriptionSubscribe'\n            - $ref: '#/components/schemas/EventSubscriptionUnsubscribe'\n            - $ref: '#/components/schemas/EventTemplateApply'\n            - $ref: '#/components/schemas/EventTemplateCreate'\n            - $ref: '#/components/schemas/EventTemplateDelete'\n            - $ref: '#/components/schemas/EventTemplateUpdate'\n            - $ref: '#/components/schemas/EventTemplateRecordCreate'\n            - $ref: '#/components/schemas/EventTemplateRecordDelete'\n            - $ref: '#/components/schemas/EventVanityDisable'\n            - $ref: '#/components/schemas/EventVanityEnable'\n            - $ref: '#/components/schemas/EventWebhookCreate'\n            - $ref: '#/components/schemas/EventWebhookDelete'\n            - $ref: '#/components/schemas/EventWhoisPrivacyDisable'\n            - $ref: '#/components/schemas/EventWhoisPrivacyEnable'\n            - $ref: '#/components/schemas/EventWhoisPrivacyPurchase'\n            - $ref: '#/components/schemas/EventWhoisPrivacyRenew'\n            - $ref: '#/components/schemas/EventZoneCreate'\n            - $ref: '#/components/schemas/EventZoneDelete'\n          description: The data attribute contains any data for the object or objects related to the event. Each object in the data object will be keyed on an object type name.\n        account:\n          description: 'The account is an object describing which account the event occurred in. It is a lightweight representation of the account and includes the id, a unique identifier and a display text representation.'\n          allOf:\n            - $ref: '#/components/schemas/WebhookAccount'\n        actor:\n          description: 'The actor is an object describing the entity that triggered the event. This may be a user if the event was triggered due to activity via the UI or API, or it may be a system entity if the activity occurred as part of an asynchronous process. The actor object has three attributes: id, which is a unique identifier for the actor, entity which describes what type the actor is, and pretty, which is a printable representation of the actor for use in display.'\n          allOf:\n            - $ref: '#/components/schemas/Actor'\n      example:\n        name: domain.create\n        api_version: v2\n        request_identifier: fca1f30a-4219-4278-9272-c00e5cc2eb5c\n        data:\n          domain:\n            id: 1\n            account_id: 1010\n            registrant_id: null\n            name: example-alpha.com\n            unicode_name: example-alpha.com\n            state: hosted\n            auto_renew: false\n            private_whois: false\n            expires_at: null\n            created_at: '2014-12-06T15:56:55Z'\n            updated_at: '2015-12-09T00:20:56Z'\n        account:\n          id: 123\n          display: Personal\n          identifier: example@example.com\n        actor:\n          id: 1120\n          entity: user\n          pretty: example@example.com\n    WhoisPrivacy:\n      type: object\n      properties:\n        id:\n          type: integer\n        domain_id:\n          type: integer\n        expires_on:\n          $ref: '#/components/schemas/Date'\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        domain_id: 2\n        expires_on: '2017-02-13'\n        enabled: true\n        created_at: '2016-02-13T14:34:50Z'\n        updated_at: '2016-02-13T14:34:52Z'\n    WhoisPrivacyRenewal:\n      type: object\n      properties:\n        id:\n          type: integer\n        domain_id:\n          type: integer\n        whois_privacy_id:\n          type: integer\n        state:\n          type: string\n        enabled:\n          type: boolean\n        expires_on:\n          $ref: '#/components/schemas/Date'\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        domain_id: 100\n        whois_privacy_id: 999\n        state: new\n        enabled: true\n        expires_on: '2020-01-10'\n        created_at: '2019-01-10T12:12:48Z'\n        updated_at: '2019-01-10T12:12:48Z'\n    Zone:\n      type: object\n      description: Represents a DNS zone.\n      properties:\n        id:\n          type: integer\n        account_id:\n          type: integer\n        name:\n          type: string\n        reverse:\n          type: boolean\n          description: 'Returns true for a reverse zone, false for a forward zone.'\n        secondary:\n          type: boolean\n          description: 'Returns true for a secondary zone, false for a primary zone.'\n        last_transferred_at:\n          $ref: '#/components/schemas/DateTime'\n          description: 'Returns the date the zone was last transferred. Used if it is a secondary zone.'\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n      example:\n        id: 1\n        account_id: 1010\n        name: example-alpha.com\n        reverse: false\n        secondary: false\n        last_transfferd_at: null\n        created_at: '2015-04-23T07:40:03Z'\n        updated_at: '2015-04-23T07:40:03Z'\n    ZoneFile:\n      type: object\n      description: A DNS zone file.\n      properties:\n        zone:\n          type: string\n      example:\n        zone: |\n          $ORIGIN example.com.\n          $TTL 1h\n          example.com. 3600 IN SOA ns1.dnsimple.com. admin.dnsimple.com. 1453132552 86400 7200 604800 300\n          example.com. 3600 IN NS ns1.dnsimple.com.\n          example.com. 3600 IN NS ns2.dnsimple.com.\n          example.com. 3600 IN NS ns3.dnsimple.com.\n          example.com. 3600 IN NS ns4.dnsimple.com.\n    ZoneDistribution:\n      type: object\n      description: Zone distribution check\n      properties:\n        distributed:\n          type: boolean\n          description: 'Returns true if the zone is fully distributed, false if not.'\n      example:\n        distributed: true\n    ZoneRecord:\n      type: object\n      description: A single DNS record in a zone.\n      example:\n        id: 1\n        zone_id: example.com\n        parent_id: null\n        name: ''\n        content: ns1.dnsimple.com admin.dnsimple.com 1458642070 86400 7200 604800 300\n        ttl: 3600\n        priority: null\n        type: SOA\n        regions:\n          - global\n        system_record: true\n        created_at: '2016-03-22T10:20:53Z'\n        updated_at: '2016-10-05T09:26:38Z'\n      properties:\n        id:\n          type: integer\n        zone_id:\n          type: string\n        parent_id:\n          type:\n            - integer\n            - 'null'\n          description: 'If present represents the zone record this record relates to. The parent record is the master record, when the parent is updated or deleted the related record is also updated or deleted. An examle of child record is the TXT descriptive record created for an ALIAS record.'\n        name:\n          type: string\n        content:\n          type: string\n        ttl:\n          $ref: '#/components/schemas/TTL'\n        priority:\n          type:\n            - integer\n            - 'null'\n          default: 0\n        type:\n          $ref: '#/components/schemas/ZoneRecordType'\n        regions:\n          type: array\n          items:\n            $ref: '#/components/schemas/ZoneRecordRegion'\n        system_record:\n          type: boolean\n          description: Returns true if a record is a system generated record and thus is not modifiable.\n        created_at:\n          $ref: '#/components/schemas/DateTime'\n        updated_at:\n          $ref: '#/components/schemas/DateTime'\n    ZoneRecordRegion:\n      type: string\n      enum:\n        - global\n        - SV1\n        - ORD\n        - IAD\n        - AMS\n        - TKO\n        - SYD\n        - CDG\n        - FRA\n    ZoneRecordType:\n      type: string\n      description: Supported DNS record types at DNSimple. Note that some record types may only be available on specific plans.\n      enum:\n        - A\n        - AAAA\n        - ALIAS\n        - CAA\n        - CNAME\n        - DNSKEY\n        - DS\n        - HINFO\n        - MX\n        - NAPTR\n        - NS\n        - POOL\n        - PTR\n        - SOA\n        - SPF\n        - SRV\n        - SSHFP\n        - TXT\n        - URL\n  responses:\n    '400':\n      description: A required parameter is missing or the request is invalid.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n              errors:\n                type: object\n                additionalProperties:\n                  type: object\n                  properties:\n                    field:\n                      type: integer\n                    errors:\n                      type: array\n                      items:\n                        type: string\n          examples:\n            example-1:\n              value:\n                message: string\n                errors:\n                  property1:\n                    field: string\n                    errors:\n                      - string\n                  property2:\n                    field: string\n                    errors:\n                      - string\n            example-2:\n              value:\n                message: Validation failed\n                errors:\n                  address1:\n                    - can't be blank\n                  city:\n                    - can't be blank\n                  country:\n                    - can't be blank\n                  email:\n                    - can't be blank\n                    - is an invalid email address\n                  first_name:\n                    - can't be blank\n                  last_name:\n                    - can't be blank\n                  phone:\n                    - can't be blank\n                    - is probably not a phone number\n                  postal_code:\n                    - can't be blank\n                  state_province:\n                    - can't be blank\n    '401':\n      description: The authentication credentials are invalid.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n          examples:\n            example-1:\n              value:\n                message: Authentication failed\n    '402':\n      description: Your account is not subscribed or not in good standing.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n          examples:\n            example-1:\n              value:\n                message: 'This action cannot be completed because you have purchase invoices that need to be paid for: 12345-1010. Please retry the payment following these instructions https://support.dnsimple.com/articles/account-invoice-history/#retrying.'\n    '404':\n      description: The requested resource doesn't exist.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n          examples:\n            example-1:\n              value:\n                message: Not Found\n    '412':\n      description: A precondition failed while trying to access a resource.\n    '429':\n      description: You exceeded the allowed number of requests per hour and your request has temporarily been throttled.\n      headers:\n        X-RateLimit-Limit:\n          $ref: '#/components/headers/X-RateLimit-Limit'\n        X-RateLimit-Remaining:\n          $ref: '#/components/headers/X-RateLimit-Remaining'\n        X-RateLimit-Reset:\n          $ref: '#/components/headers/X-RateLimit-Reset'\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n          examples:\n            example-1:\n              value:\n                message: quota exceeded\n    412-feature:\n      description: Feature is not available on your plan.\n    Error:\n      description: An error occurred\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  requestBodies:\n    CollaboratorCreate:\n      description: Collaborator attributes\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              email:\n                type: string\n          example:\n            email: john.doe@example.com\n    ContactCreateOrUpdate:\n      description: Contact create attributes\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              label:\n                type: string\n                default: ''\n              first_name:\n                type: string\n              last_name:\n                type: string\n              address1:\n                type: string\n              address2:\n                type: string\n                nullable: true\n              city:\n                type: string\n              state_province:\n                type: string\n              postal_code:\n                type: string\n              country:\n                type: string\n              email:\n                type: string\n              phone:\n                type: string\n              fax:\n                type: string\n                nullable: true\n              organization_name:\n                type: string\n                description: 'The company name. If the organization_name is specified, then you must also include job_title.'\n              job_title:\n                type: string\n                description: The contact's job title. Required if the organization_name is specified.\n            example:\n              label: Default\n              first_name: First\n              last_name: User\n              job_title: CEO\n              organization_name: Awesome Company\n              email: first@example.com\n              phone: '+18001234567'\n              fax: '+18011234567'\n              address1: 'Italian Street, 10'\n              city: Roma\n              state_province: RM\n              postal_code: '00100'\n              country: IT\n    DelegationSignerCreate:\n      description: Delegation signer attributes\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              digest:\n                type: string\n    DomainCreate:\n      description: Domain attributes\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n          example:\n            name: example.com\n    DomainNameServers:\n      description: A collection of domain name servers\n      required: true\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              type: string\n            example:\n              - ns1.dnsimple.com\n              - ns2.dnsimple.com\n              - ns3.dnsimple.com\n              - ns4.dnsimple.com\n    DomainRegister:\n      description: Domain registration attributes\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              registrant_id:\n                type: integer\n                description: The ID of an existing contact in your account.\n              whois_privacy:\n                type: boolean\n                description: 'Set to true will attempt to purchase/enable the whois privacy as part of the registration. An extra cost may apply. Default: false.'\n              auto_renew:\n                type: boolean\n                description: 'Set to true to enable the auto-renewal of the domain. Default: false.'\n              extended_attributes:\n                type: object\n                description: Required for TLDs that require extended attributes.\n              premium_price:\n                type: string\n                description: 'Required as confirmation of the price, only if the domain is premium.'\n            example:\n              registrant_id: 1\n    DomainRenew:\n      description: Domain renewal attributes\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              period:\n                type: integer\n              premium_price:\n                type: string\n                description: 'Required as confirmation of the price, only if the domain is premium.'\n            example:\n              period: 2\n    DomainTransfer:\n      description: Domain transfer attributes\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              registrant_id:\n                type: integer\n                description: The ID of an existing contact in your account.\n              auth_code:\n                type: string\n                description: Required for TLDS that require authorization-based transfer (the vast majority of TLDs).\n              whois_privacy:\n                type: boolean\n                description: 'Set to true will attempt to purchase/enable the whois privacy as part of the transfer. An extra cost may apply. Default: false.'\n              auto_renew:\n                type: boolean\n                description: 'Set to true to enable the auto-renewal of the domain. Default: false.'\n              extended_attributes:\n                type: object\n                description: Required for TLDs that require extended attributes.\n              premium_price:\n                type: string\n                description: 'Required as confirmation of the price, only if the domain is premium.'\n    EmailForwardCreate:\n      description: Email forward attributes\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              alias_name:\n                type: string\n                description: The receiving email recipient, the name part only without the domain. The domain is automatically appended.\n              destination_email:\n                type: string\n                format: email\n                description: The email recipient the messages are delivered to.\n            example:\n              from: john.doe\n              to: john@example.com\n    PushInitiate:\n      description: Push attributes\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              new_account_email:\n                type: string\n            example:\n              new_account_email: admin@example.com\n    PushAccept:\n      description: Attributes required to accept a push\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              contact_id:\n                type: integer\n            example:\n              contact_id: 2\n    PrimaryServerCreate:\n      description: Primary Server attributes\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              ip:\n                type: string\n              port:\n                type: string\n            required:\n              - name\n              - ip\n    SecondaryZoneCreate:\n      description: Secondary Zone attributes\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n            required:\n              - name\n    ServiceApply:\n      description: 'Optional hash of settings for some specific services, corresponding to the service fields. For instance, Heroku requires a settings[app] setting.'\n      required: false\n      content:\n        application/json:\n          schema:\n            type: object\n            example:\n              app: my-app-name\n    TemplateCreateOrUpdate:\n      description: Attributes for creating a template.\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              sid:\n                type: string\n              name:\n                type: string\n              description:\n                type: string\n            required:\n              - sid\n              - name\n            example:\n              name: Alpha\n              sid: alpha\n              description: This is an Alpha template.\n    TemplateRecordCreateOrUpdate:\n      description: Attributes for creating a template record\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            example:\n              name: ''\n              type: MX\n              content: mx.example.com\n              ttl: 600\n              priority: 10\n    VanityNameServers:\n      description: A collection of vanity name servers\n      required: true\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              type: string\n            example:\n              - ns1.example.com\n              - ns2.example.com\n              - ns3.example.com\n              - ns4.example.com\n    ZoneRecordCreate:\n      description: Zone record attributes\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              type:\n                $ref: '#/components/schemas/ZoneRecordType'\n              content:\n                type: string\n              ttl:\n                $ref: '#/components/schemas/TTL'\n              priority:\n                type: integer\n              regions:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ZoneRecordRegion'\n            example:\n              name: ''\n              type: MX\n              content: mxa.example.com\n              ttl: 600\n              priority: 10\n              regions:\n                - SV1\n                - IAD\n    ZoneRecordUpdate:\n      description: Zone record update attributes\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              content:\n                type: string\n              ttl:\n                $ref: '#/components/schemas/TTL'\n              priority:\n                type: integer\n              regions:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ZoneRecordRegion'\n            example:\n              content: mxb.example.com\n              ttl: 3600\n              priority: 20\n              regions:\n                - global\n  headers:\n    X-RateLimit-Limit:\n      description: The maximum number of requests you can perform per hour.\n      schema:\n        type: integer\n    X-RateLimit-Remaining:\n      description: The number of requests remaining in the current rate limit window.\n      schema:\n        type: integer\n    X-RateLimit-Reset:\n      description: The time at which the current rate limit window in Unix time format.\n      schema:\n        type: integer\n",
			"canonicalURL": "/github.com/dnsimple/dnsimple-developer@606abbd98667d4f10a22f43f965897a794293935/-/blob/content/v2/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/dnsimple/dnsimple-developer/blob/606abbd98667d4f10a22f43f965897a794293935/content/v2/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!seq into string; yaml: line 1: cannot unmarshal !!seq into string; yaml: line 1: cannot unmarshal !!seq into string; yaml: line 1: cannot unmarshal !!seq into string"
}