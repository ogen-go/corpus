{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/YetiForceCompany/UpdatePackages"
		},
		"file": {
			"name": "ManageConsents.yaml",
			"size": 0,
			"path": "YetiForce CRM 5.x.x/5.3.0_to_6.0.0/updates/files/public_html/api/ManageConsents.yaml",
			"byteSize": 13374,
			"content": "openapi: 3.0.0\ninfo:\n  title: 'YetiForce API for Webservice App. Type: Manage consents'\n  termsOfService: 'https://yetiforce.com/'\n  contact:\n    name: 'Devs API Team'\n    url: 'https://yetiforce.com/'\n    email: devs@yetiforce.com\n  license:\n    name: 'YetiForce Public License v3'\n    url: 'https://yetiforce.com/en/yetiforce/license'\n  version: '0.1'\npaths:\n  /webservice/ApprovalsRegister/Record:\n    post:\n      tags:\n        - Consents\n      summary: 'Adds an consent entry'\n      operationId: 'Api\\ManageConsents\\ApprovalsRegister\\Record::post'\n      requestBody:\n        description: 'Required data for communication'\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/ApprovalsRegisterRequestBody'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/ApprovalsRegisterRequestBody'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ApprovalsRegisterRequestBody'\n      responses:\n        '200':\n          description: 'Result of adding entry'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApprovalsRegisterResponseBody'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ApprovalsRegisterResponseBody'\n        '401':\n          description: 'No sent token OR Invalid token'\n        '403':\n          description: 'No permissions for module'\n        '405':\n          description: 'Method Not Allowed'\n      security:\n        -\n          basicAuth: ''\n          ApiKeyAuth: ''\n          token: ''\n  /webservice/Approvals/RecordsList:\n    get:\n      tags:\n        - Consents\n      summary: 'Gets the list of consents'\n      operationId: 'Api\\ManageConsents\\Approvals\\RecordsList::get'\n      parameters:\n        -\n          name: x-row-limit\n          in: header\n          description: Limit\n          required: false\n          schema:\n            type: integer\n            format: int64\n          example: '0'\n        -\n          name: x-row-offset\n          in: header\n          description: Offset\n          required: false\n          schema:\n            type: integer\n            format: int64\n          example: '0'\n        -\n          name: x-raw-data\n          in: header\n          description: 'Gets raw data'\n          required: false\n          schema:\n            type: integer\n            format: int64\n          example: '1'\n        -\n          name: x-condition\n          in: header\n          description: 'Add conditions [Json format]'\n          required: false\n          content:\n            application/json:\n              mediaType: application/json\n              schema:\n                $ref: '#/components/schemas/ApprovalsConditionsRequest'\n      requestBody:\n        description: 'The content of the request is empty'\n        required: false\n      responses:\n        '200':\n          description: 'List of consents'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsentsResponseBody'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ConsentsResponseBody'\n        '401':\n          description: 'No sent token OR Invalid token'\n        '403':\n          description: 'No permissions for module'\n        '405':\n          description: 'Method Not Allowed'\n      security:\n        -\n          basicAuth: ''\n          ApiKeyAuth: ''\n          token: ''\n  '/webservice/{moduleName}/GetConsentsForEntry':\n    post:\n      tags:\n        - Consents\n      summary: 'Gets the list of consents for specific entry'\n      operationId: 'Api\\ManageConsents\\BaseModule\\GetConsentsForEntry::post'\n      parameters:\n        -\n          name: moduleName\n          in: path\n          description: 'Module name'\n          required: true\n          schema:\n            type: string\n          example: Contacts\n      requestBody:\n        description: 'Required data for communication'\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/ConsentsForEntryRequestBody'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/ConsentsForEntryRequestBody'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsentsForEntryRequestBody'\n      responses:\n        '200':\n          description: 'List of consents for specific entry'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsentsForEntryResponseBody'\n        '401':\n          description: 'No sent token OR Invalid token'\n        '403':\n          description: 'No permissions for module'\n        '404':\n          description: 'Not Found'\n        '405':\n          description: 'Method Not Allowed'\n      security:\n        -\n          basicAuth: ''\n          ApiKeyAuth: ''\n          token: ''\n  '/webservice/{moduleName}/SendEmail':\n    post:\n      tags:\n        - Consents\n      summary: 'Send e-mail'\n      operationId: 'Api\\ManageConsents\\BaseModule\\SendEmail::post'\n      parameters:\n        -\n          name: moduleName\n          in: path\n          description: 'Module name'\n          required: true\n          schema:\n            type: string\n          example: Contacts\n      requestBody:\n        description: 'Required data for communication'\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/SendEmailRequestBody'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/SendEmailRequestBody'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SendEmailRequestBody'\n      responses:\n        '200':\n          description: 'List of consents for specific entry'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SendEmailResponseBody'\n        '401':\n          description: 'No sent token OR Invalid token'\n        '403':\n          description: 'No permissions for module'\n        '404':\n          description: 'Not Found'\n        '405':\n          description: 'Method Not Allowed'\n      security:\n        -\n          basicAuth: ''\n          ApiKeyAuth: ''\n          token: ''\ncomponents:\n  schemas:\n    ApprovalsRegisterRequestBody:\n      title: 'A list of fields required while creating an entry'\n      description: 'The list is based on fields in the Consent register module. Accepting or declining consent takes place based on the value in the approvals_register_status field.'\n      type: object\n      example:\n        subject: Text\n        approvalsid: '123'\n        contactid: '321'\n        approvals_register_type: PLL_ACCEPTANCE\n        approvals_register_status: PLL_FOR_VERIFICATION\n        registration_date: '2019-11-12 12:00'\n    ApprovalsRegisterResponseBody:\n      title: 'Adding an entry'\n      description: 'Result of adding entry'\n      properties:\n        status:\n          description: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'\n          type: integer\n          enum:\n            - 0\n            - 1\n          example: 1\n        result:\n          description: 'Result of adding entry'\n          properties:\n            id:\n              description: 'New entry ID. Empty value means that the operation was unsuccessful.'\n              type: integer\n              example: 24842\n            error:\n              description: 'Error message. The variable exists when some of the provided data is incomplete and the entry could not be added.'\n              type: string\n              example: ''\n          type: object\n      type: object\n    ApprovalsConditionsRequest:\n      title: Conditions\n      description: 'The list is based on fields in the Consent register module. fieldName - Field name, value - Value, operator - Specific operator, group - true/false. '\n      type: text\n      example:\n        fieldName: approvals_status\n        value: PLL_ACTIVE\n        operator: e\n    ConsentsResponseBody:\n      title: 'List of consents'\n      description: 'List of obtained consents'\n      properties:\n        status:\n          description: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'\n          type: integer\n          enum:\n            - 0\n            - 1\n          example: 1\n        result:\n          description: 'Specific response'\n          properties:\n            records:\n              description: 'Gets consents.'\n              properties:\n                '24862':\n                  description: 'Gets consents.'\n                  properties: { id: { description: 'Consent ID', type: integer, example: 24862 }, name: { description: Text, type: string, example: 'Consent for email' }, approvals_status: { description: Status, type: string, example: Active }, number: { description: Text, type: string, example: N12 }, assigned_user_id: { description: 'Assigned user name', type: string, example: 'Kowalski Adam' }, createdtime: { description: 'Gets consents.', type: string, format: date-time, example: '2019-10-07 08:32:38' }, modifiedtime: { description: 'Gets consents.', type: string, format: date-time, example: '2019-10-07 08:32:38' }, created_user_id: { description: 'Assigned user name', type: string, example: 'Kowalski Adam' }, shownerid: { description: 'Assigned user name', type: string, example: 'Kowalski Adam' }, description: { description: Description, type: string, example: 'I confirm to have read..' } }\n                  type: object\n              type: object\n            rawData:\n              description: 'Gets consents.'\n              properties:\n                '24862':\n                  description: 'Gets consents.'\n                  properties: { id: { description: 'Consent ID', type: integer, example: 24862 }, name: { description: Text, type: string, example: 'Consent for email' }, approvals_status: { description: Status, type: string, example: PLL_ACTIVE }, number: { description: Text, type: string, example: N12 }, assigned_user_id: { description: 'Assigned user ID', type: integer, example: 245 }, createdtime: { description: 'Gets consents.', type: string, format: date-time, example: '2019-10-07 08:32:38' }, modifiedtime: { description: 'Gets consents.', type: string, format: date-time, example: '2019-10-07 08:32:38' }, created_user_id: { description: 'Assigned user ID', type: integer, example: 245 }, shownerid: { description: 'Assigned user name', type: string, example: 'Kowalski Adam' }, description: { description: Description, type: string, example: 'I confirm to have read..' } }\n                  type: object\n              type: object\n            isMorePages:\n              description: 'There are more entries'\n              type: boolean\n              example: 'true'\n          type: object\n      type: object\n    ConsentsForEntryRequestBody:\n      title: 'Request body for GetConsentsForEntry'\n      properties:\n        token:\n          description: 'Entry unique ID (Token type field in the module is required)'\n          type: string\n      type: object\n    ConsentsForEntryResponseBody:\n      title: 'Response body for GetConsentsForEntry'\n      properties:\n        status:\n          description: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'\n          type: integer\n          enum:\n            - 0\n            - 1\n          example: 1\n        result:\n          description: 'Specific response'\n          properties:\n            id:\n              description: 'Record ID'\n              type: integer\n              example: 24842\n            consents:\n              description: 'Get the edit value in display view'\n              type: object\n              additionalProperties:\n                description: 'Data from the associated module'\n                type: integer\n                example: 24862\n          type: object\n      type: object\n    SendEmailRequestBody:\n      title: 'Request body for SendEmail'\n      properties:\n        e-mail:\n          description: 'E-mail address (Token type field in the module is required)'\n          type: string\n        templateId:\n          description: 'Specific ID of the email template'\n          type: integer\n      type: object\n    SendEmailResponseBody:\n      title: 'Response body for SendEmail'\n      properties:\n        status:\n          description: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'\n          type: integer\n          enum:\n            - 0\n            - 1\n          example: 1\n        result:\n          description: 'Added mail to quote for send: true - success , false - fail'\n          type: bool\n          example: true\n      type: object\n  securitySchemes:\n    basicAuth:\n      type: http\n      in: header\n      scheme: basic\n    ApiKeyAuth:\n      type: apiKey\n      description: 'Webservice api key'\n      name: X-API-KEY\n      in: header\n    token:\n      type: apiKey\n      description: 'Webservice api token by user'\n      name: X-TOKEN\n      in: header\n"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal string into Go struct field Operation.paths.get.security of type []string"
}