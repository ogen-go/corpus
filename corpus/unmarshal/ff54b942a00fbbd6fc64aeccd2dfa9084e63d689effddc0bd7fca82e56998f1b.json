{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vmware-tanzu/cartographer-conventions"
		},
		"file": {
			"name": "conventions-server.yaml",
			"size": 0,
			"path": "api/openapi-spec/conventions-server.yaml",
			"byteSize": 4951,
			"content": "openapi: 3.0.0\ninfo:\n  title: Pod convention webhook\n  description: |\n    This API defines the expected request and response format from the conventions server. \n  version: 1.0.0-alpha.1   \n  license:\n    name: Apache-2.0\n    url: \"https://www.apache.org/licenses/LICENSE-2.0.html\"\npaths:\n  /webhook:\n    post:  \n      description: |\n        The path defined above is arbitrary and can be overridden to any value by the ClusterPodConvention resource. \n        The webhook path can be configured in the ClusterPodConvention on either .spec.webhook.clientConfig.url or \n        .spec.webhook.clientConfig.service.path with the later preferred if the convention server is to run on the same cluster as workoads. \n        The webhook request and response both use the PodConventionContext with the request defining \n        the .spec and the response defining the status.\n        status \n      requestBody:\n        content:\n           \"application/json\":\n              schema: \n               $ref: \"#/components/schemas/PodConventionContext\"\n      responses:\n        200:\n          description: expected response once all conventions are applied successfully. \n          content: \n            \"application/json\":\n              schema:\n               $ref: \"#/components/schemas/PodConventionContext\"\n        400:\n          description: | \n            return code 400 if the request body is nil or if unable to to decode request body into a PodConventionContext. \n        500:\n          description: |\n           return code 500 if unable to apply conventions at all. \n\ncomponents:\n  schemas:\n    PodConventionContext:\n      description: | \n        A wrapper for the PodConventionContextSpec and the PodConventionContextStatus which is the structure used for both requests \n        and responses from the convention server.\n      type: object\n      properties:\n        apiVersion: \n          type: string\n        kind: \n          type: string\n        metadata:\n          type: object \n          additionalProperties: true \n          properties:\n            name: \n              type: string\n        spec:\n          $ref: \"#/components/schemas/PodConventionContextSpec\"\n        status:\n          $ref: \"#/components/schemas/PodConventionContextStatus\"\n    PodConventionContextSpec:\n      type: object\n      description: a wrapper of the PodTemplateSpec and list of ImageConfigs provided in the request body of the server.\n      properties:\n        template:\n          $ref: \"#/components/schemas/PodTemplateSpec\"\n        imageConfig:\n          description: |\n            an array of imageConfig objects with each image configuration object holding the name of the image, the BOM, and the OCI image\n            configuration with image metadata from the repository. Each of the image config array entries have a 1:1 mapping to \n            images referenced in the PodTemplateSpec. \n          type: array \n          items:\n            $ref: \"#/components/schemas/ImageConfig\"\n    PodTemplateSpec:\n      type: object \n      properties:\n        spec: \n          type: object\n          additionalProperties: true\n          description: defines the PodTemplateSpec to be enriched by conventions.\n        metadata:\n          type: object\n          additionalProperties: true\n          properties:\n            name:\n              type: string \n            additionalProperties: true \n    ImageConfig:\n      type: object \n      properties: \n        image: \n          type: string \n          description: a string reference to the image name and tag or associated digest.\n          example: \"example.com/repository/nginx:alpine\"\n        boms:\n          type: array\n          description: | \n            an array of Bills of Materials (BOMs) describing the software components and their dependencies and may be zero or more per image.\n          items:\n            $ref: \"#/components/schemas/BOM\"\n        config: \n          type: object \n          description: OCI image metadata\n          additionalProperties: true\n    BOM: \n      type: object \n      properties:\n        name: \n          description: bom-name\n          type: string \n        raw: \n          description: base64 encoded bytes with the encoded content of the BOM.\n          type: string\n      example: | \n        {\n          \"name\": \"bom-name\",\n          \"raw\": \"c29tZSBieXRlIGFycmF5\"\n        }\n    PodConventionContextStatus:\n      description: status type used to represent the current status of the context retrieved by the request.\n      type: object \n      properties:\n        template: \n          $ref: \"#/components/schemas/PodTemplateSpec\"\n        appliedConventions:\n          description: a list of string with names of conventions to be applied\n          type: array \n          items:\n            type: string \n          example: |\n              \"appliedConventions\": [ \n                \"convention-1\", \n                \"convention-2\",\n                \"convention-4\" \n              ] \n   ",
			"canonicalURL": "/github.com/vmware-tanzu/cartographer-conventions@2ba5314dc8ea3393573e73fefee6dbbff51161d8/-/blob/api/openapi-spec/conventions-server.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/vmware-tanzu/cartographer-conventions/blob/2ba5314dc8ea3393573e73fefee6dbbff51161d8/api/openapi-spec/conventions-server.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!bool `true` into ogen.Schema"
}