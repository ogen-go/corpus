{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mercadopago/devsite-docs"
		},
		"file": {
			"name": "wallet_connect.yaml",
			"size": 0,
			"path": "reference/api/wallet_connect.yaml",
			"byteSize": 9859,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://api.mercadopago.com\ninfo:\n  title: Mercado Pago API Reference\n  version: '1.0'\npaths:\n  /v2/wallet_connect/agreements:\n    post:\n      tags:\n        - $ref: '#/tags/checkout-api'\n      summary: Create Agreement\n      description: An agreement is an authorization link that the buyer receives to allow the seller to access their Mercado Pago wallet to debit the payment\n      parameters:\n        - name: client.id\n          in: query\n          description: Unique ID that identifies a specific Client\n          schema:\n            type: number\n            example: 2451675580092619\n      requestBody:\n        description: Here are the fields needed to complete a request for create an Agreement\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                return_url:\n                  type: string\n                  description: URL that redirects the user back to the sellers site\n                  example: https://www.mercadopago.com/\n                external_flow_id:\n                  type: string\n                  description: Identifies the Seller side flow current state\n                  example: EXTERNAL_FLOW_ID\n                external_user:\n                  type: object\n                  description: The external_user contains the data that the Seller will need to use to indentify a User, so then it can continue with their own flow.\n                  properties:\n                    id:\n                      required: true\n                      type: string\n                      description: Unique ID that is going to be used by the Seller to identify the external_user\n                      example: usertest\n                    description:\n                      required: true\n                      type: string\n                      description: A brief description with information of the user. It can contains for example the name of the user\n                      example: Test account\n                agreement_data:\n                  type: object\n                  description: Contains information about actions the user must do and the amount to be paid\n                  properties:\n                    validation_amount:\n                      required: false\n                      type: number\n                      description: Amount that the user is going to pay\n                      example: 3.14\n                    description:\n                      type: string\n                      required: false\n                      description: Description of the actions that the user is trying to perform\n                      example: Test agreement\n      responses:\n        '200':\n          description: Agreement created\n          content:\n            application/json:\n              schema:\n                description: Agreement that contains an unique identifier and a success URL.\n                type: object\n                properties:\n                  agreement_id:\n                    type: string\n                    description: Unique ID that identifies an Agreement\n                    example: b1234e5678b91c23a456e78912345b67\n                  agreement_uri:\n                    type: string\n                    description: This is the uri to redirect the user to the wallet linking in the frontend\n                    example: https://beta.mercadopago.com.ar/v1/wallet_agreement/b1234e5678b91c23a456e78912345b67\n        '400':\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  errorKey:\n                    type: string\n                    enum:\n                      - 400--Bad-Request--Field return_uri is required\n                      - 400--Bad-Request--Field external_flow_id is required\n                      - 400--Bad-Request--Field return_uri must not be grater than 300 characters\n                      - 400--Bad-Request--Field external_flow_id must not be grater than 300 characters\n                      - 400--Bad-Request--Field external_user must not be blank\n                      - 400--Bad-Request--Field id must not be blank\n  /v2/wallet_connect/agreements/{agreement_id}/payer_token:\n    post:\n      tags:\n        - $ref: '#/tags/checkout-api'\n      summary: Create payer token\n      description: A payer token is an ID that represents the authorization the user gave to the seller\n      parameters:\n        - name: agreement_id\n          in: path\n          description: Unique ID that identifies an Agreement\n          required: true\n          schema:\n            type: string\n            example: b1234e5678b91c23a456e78912345b67\n        - name: client.id\n          in: query\n          description: Unique ID that identifies a specific Client\n          required: true\n          schema:\n            type: number\n            example: 1451895580758649\n        - name: caller.id\n          in: query\n          description: Unique ID that identifies a specific Caller\n          required: true\n          schema:\n            type: number\n            example: 832564722\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: It's a reference of the authorization that the user gave to the seller\n              type: object\n              properties:\n                code:\n                  type: string\n                  description: This is the payer token. It is a reference to the Id that represents the authorization of the user\n                  required: true\n                  example: aeecea3e11f2545d1e7790eb6591ff68df74c57930551ed980239f4538a7e530\n      responses:\n        '200':\n          description: Payer token created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  payer_token:\n                    type: string\n                    description: This is the token of the payer.\n                    example: abcdef1e23f4567d8e9123eb6591ff68df74c57930551ed980239f4538a7e530\n        '400':\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  errorKey:\n                    type: string\n                    enum:\n                      - 400--Bad-Request--Parameter agreement_id is required\n                      - 400--Bad-Request--Parameter agreementId has more than 32 characters\n                      - 400--Bad-Request--Parameter agreement_id must be an alfanumeric value\n                      - 400--Bad-Request--Invalid value for back_url. Must be a valid URL\n                      - 400--Bad-Request--Parameter client.id must be a valid id\n                      - 400--Bad-Request--Parameter caller.id must be a valid id\n        '404':\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  errorKey:\n                    type: string\n                    enum:\n                      - 404--Not-Found--The agreement_id does not exist\n                      - 404--Not-Found--The client.id does not exist\n                      - 404--Not-Found--The caller.id does not exist\n        '500':\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  errorKey:\n                    type: string\n                    enum:\n                      - 500--Error--Internal server error\n  /v2/wallet_connect/agreements/{agreement_id}:\n    delete:\n      tags:\n        - $ref: '#/tags/checkout-api'\n      summary: Cancel agreement\n      description: Endpoint to cancel an agreement by id. An agreement is an authorization link that the buyer receives to allow the seller to access their Mercado Pago wallet to debit the payment. You will need to cancel an agreement when the vinculation flow has ended\n      operationId: \"cancelAgreement_DELETE\"\n      parameters:\n        - name: agreementId\n          in: path\n          description: Unique ID that identifies an Agreement\n          required: true\n          schema:\n            type: string\n            example: b1234e5678b91c23a456e78912345b67\n        - name: client.id\n          in: query\n          description: Unique ID that identifies a Client\n          required: false\n          schema:\n            type: number\n            example: 1451895580758649\n      responses: \n        '200':\n          description: Success\n          name: Agreement cancelled\n        '400':\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  errorKey:\n                    type: string\n                    enum:\n                      - 400--Bad-Request--Parameter agreement_id is required\n                      - 400--Bad-Request--Parameter agreementId has more than 32 characters\n                      - 400--Bad-Request--Parameter agreement_id must be an alfanumeric value\n        '404':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  errorKey:\n                    type: string\n                    enum:\n                      - 404--Not-Found--The Agreement with that id\n        '500':\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  errorKey:\n                    type: string\n                    enum:\n                      - 500--Error--Internal server error"
		}
	},
	"Error": "unmarshal: callback: callback: json: cannot unmarshal bool into Go struct field Schema.required of type []string"
}