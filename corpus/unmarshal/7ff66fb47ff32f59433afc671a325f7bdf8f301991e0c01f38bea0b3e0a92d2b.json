{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/IPDSnelting/velcom"
		},
		"file": {
			"name": "public_api.yaml",
			"size": 0,
			"path": "docs/public_api.yaml",
			"byteSize": 54343,
			"content": "openapi: 3.0.0\ninfo:\n  title: public api\n  version: '2.0'\n  description: Velcom's public api. This api is also used by the frontend.\n  contact:\n    name: velcom\n    url: 'https://github.com/IPDSnelting/velcom'\nservers:\n  - url: 'http://localhost:3000'\npaths:\n  '/queue/{taskid}':\n    parameters:\n      - schema:\n          type: string\n        name: taskid\n        in: path\n        required: true\n    delete:\n      summary: delete task\n      tags:\n        - queue\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: Not Found\n      operationId: delete-queue-taskid\n      security:\n        - admin_credentials: []\n      description: 'Delete a task from the queue. If the task is currently being benchmarked, this also tries to abort the task.'\n    patch:\n      summary: prioritize task\n      operationId: patch-queue-taskid\n      responses:\n        '204':\n          description: No Content\n        '404':\n          description: Not Found\n      description: Prioritize a task such that it moves to (or near) the top of the queue.\n      security:\n        - admin_credentials: []\n      tags:\n        - queue\n  /queue:\n    get:\n      summary: get tasks in queue\n      tags:\n        - queue\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tasks:\n                    type: array\n                    description: The tasks in the order they are/will be executed. Tasks which are currently being executed appear first.\n                    items:\n                      $ref: '#/components/schemas/Task'\n                  runners:\n                    type: array\n                    description: A list of the currently connected runners\n                    items:\n                      type: object\n                      description: A single runner\n                      properties:\n                        name:\n                          type: string\n                          description: The runner's unique name\n                        info:\n                          type: string\n                          description: Additional information sent by the runner\n                        working_on:\n                          $ref: '#/components/schemas/RunId'\n                        working_since:\n                          $ref: '#/components/schemas/Time'\n                        lost_connection:\n                          type: boolean\n                          description: The backend holds on to disconnected runners for a while. This field indicates the backend currently lost connection to the runner.\n                      required:\n                        - name\n                        - info\n                        - lost_connection\n                required:\n                  - tasks\n                  - runners\n      operationId: get-queue\n      description: Query the queue's current status\n    delete:\n      summary: empty queue\n      operationId: delete-queue\n      responses:\n        '204':\n          description: No Content\n      security:\n        - admin_credentials: []\n      description: |-\n        Deletes *all tasks* in the Queue the user has access to.\n\n        If a repo admin executes this, only tasks in *their repo* will be cancelled.\n        If the website admin executes this, *all* tasks in the queue will be cancelled.\n  /queue/upload/tar:\n    post:\n      summary: benchmark tar file\n      operationId: post-queue-upload\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  task:\n                    $ref: '#/components/schemas/Task'\n                required:\n                  - task\n      security:\n        - admin_credentials: []\n      parameters: []\n      description: |-\n        This endpoint allows users to upload a tar file that the server should benchmark. The tar file is added to the queue with a relatively high priority.\n\n        If the filename specified in the form-data body ends with `.tar.gz`, the tar file will be automatically uncompressed. If it doesn't it is treated as a normal, uncompressed tar file.\n      tags:\n        - queue\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                description:\n                  type: string\n                repo_id:\n                  type: string\n                  format: uuid\n                  description: The task can optionally be attached to a repo\n                file:\n                  type: string\n                  format: binary\n                  description: 'Only `.tar` or `.tar.gz` files, no other formats supported'\n              required:\n                - description\n                - file\n    parameters: []\n  '/commit/{repoid}/{hash}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: repoid\n        in: path\n        required: true\n      - schema:\n          type: string\n          pattern: '^[a-fA-F0-9]{40}$'\n        name: hash\n        in: path\n        required: true\n    get:\n      summary: get commit\n      tags:\n        - commit\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  commit:\n                    $ref: '#/components/schemas/Commit'\n                required:\n                  - commit\n        '404':\n          description: Not Found\n      operationId: get-commit-repoid-hash\n      description: Retrieve a commit by its repo id and hash.\n  '/run/{runid}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: runid\n        in: path\n        description: Interpreted as repo id if hash is set\n        required: true\n    get:\n      summary: get run\n      tags:\n        - run\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  run:\n                    $ref: '#/components/schemas/Run'\n                  differences:\n                    type: array\n                    description: Only present if the `diff_prev` parameter is set to `true` and there is an unambiguous previous commit with a run\n                    items:\n                      $ref: '#/components/schemas/DimensionDifference'\n                  significant_differences:\n                    type: array\n                    description: The runs significant differences to all direct parent runs. Only present if the `diff_prev` parameter is set to `true`.\n                    items:\n                      $ref: '#/components/schemas/DimensionDifference'\n                  significant_failed_dimensions:\n                    description: Only present if the `diff_prev` parameter is set to `true`.\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Dimension'\n                required:\n                  - run\n        '404':\n          description: Not Found\n      operationId: get-run-runid\n      description: |-\n        Retrieve a run by its id.\n\n        If a commit hash is specified, it instead interprets the run id as repo id and uses that commit's latest run, if one exists.\n      parameters:\n        - schema:\n            type: boolean\n            default: 'false'\n          in: query\n          name: all_values\n          description: Whether the measurements should contain all values\n        - schema:\n            type: string\n            pattern: '^[a-fA-F0-9]{40}$'\n          in: query\n          name: hash\n          description: Commit hash\n        - schema:\n            type: boolean\n            default: 'false'\n          in: query\n          name: diff_prev\n          description: Whether to include the differences to the run of the previous commit (if available)\n  '/compare/{runid1}/to/{runid2}':\n    get:\n      summary: compare runs\n      tags:\n        - run\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  run1:\n                    $ref: '#/components/schemas/Run'\n                  run2:\n                    $ref: '#/components/schemas/Run'\n                  differences:\n                    type: array\n                    description: A list of differences between the runs (`run2` - `run1`)\n                    items:\n                      $ref: '#/components/schemas/DimensionDifference'\n                  significant_differences:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DimensionDifference'\n                  significant_failed_dimensions:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Dimension'\n                required:\n                  - run1\n                  - run2\n                  - differences\n                  - significant_differences\n                  - significant_failed_dimensions\n        '404':\n          description: Either one or both runs could not be found\n      operationId: get-compare-runid1-to-runid2\n      description: |-\n        Compare two runs.\n\n        If a commit hash is specified, it instead interprets the corresponding run id as repo id and uses that commit's latest run, if one exists.\n      parameters:\n        - schema:\n            type: boolean\n          in: query\n          name: all_values\n          description: Whether the measurements should contain all values\n        - schema:\n            type: string\n            pattern: '^[a-fA-F0-9]{40}$'\n          in: query\n          name: hash1\n          description: Commit hash\n        - schema:\n            type: string\n            pattern: '^[a-fA-F0-9]{40}$'\n          in: query\n          name: hash2\n          description: Commit hash\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: runid1\n        in: path\n        required: true\n        description: Interpreted as repo id if hash1 is set\n      - schema:\n          type: string\n          format: uuid\n        name: runid2\n        in: path\n        required: true\n        description: Interpreted as repo id if hash2 is set\n  '/queue/commit/{repoid}/{hash}':\n    post:\n      summary: benchmark commit\n      operationId: post-queue-commit-repoid-hash\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  task:\n                    $ref: '#/components/schemas/Task'\n                required:\n                  - task\n        '404':\n          description: The repo or commit could not be found\n        '409':\n          description: There is already a task for this commit in the queue\n      description: 'This endpoint allows users to add a specific commit to the queue. If there is already a task for this commit in the queue, this endpoint fails.'\n      tags:\n        - queue\n      security:\n        - admin_credentials: []\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: repoid\n        in: path\n        required: true\n      - schema:\n          type: string\n          pattern: '^[a-fA-F0-9]{40}$'\n        name: hash\n        in: path\n        required: true\n  '/repo/{repoid}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: repoid\n        in: path\n        required: true\n    get:\n      summary: get repo\n      tags:\n        - repo\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  repo:\n                    $ref: '#/components/schemas/Repo'\n                  github_commands:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        pr_number:\n                          type: integer\n                        comment_id:\n                          type: integer\n                        status:\n                          type: string\n                          enum:\n                            - NEW\n                            - MARKED_SEEN\n                            - QUEUED\n                            - ERROR\n                      required:\n                        - pr_number\n                        - comment_id\n                        - status\n                required:\n                  - repo\n                  - github_commands\n        '404':\n          description: Not Found\n      operationId: get-repo-repoid\n      description: Retrieve a repo by its id.\n    delete:\n      summary: delete repo\n      operationId: delete-repo-repoid\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: Not Found\n      security:\n        - admin_credentials: []\n      description: Delete an entire repository and its associated measurements.\n      tags:\n        - repo\n    patch:\n      summary: modify repo\n      operationId: patch-repo-repoid\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: Not Found\n      security:\n        - admin_credentials: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  minLength: 1\n                  description: 'Set a new name for the repo. The name must not be unique, but it should still be unique so the UI does not look too confusing.'\n                remote_url:\n                  $ref: '#/components/schemas/RemoteUrl'\n                tracked_branches:\n                  type: array\n                  description: Set the branches to be tracked\n                  uniqueItems: true\n                  minItems: 1\n                  items:\n                    type: string\n                    minLength: 1\n                github_token:\n                  type: string\n                  description: Set a GitHub auth token to enable GitHub bot functionality. Set this to the empty string to delete the token and disable GitHub bot functionality.\n      tags:\n        - repo\n      description: Modify some parts of an existing repo.\n  /repo:\n    post:\n      summary: add new repo\n      operationId: post-repo\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  repo:\n                    $ref: '#/components/schemas/Repo'\n                required:\n                  - repo\n        '400':\n          description: The repo could not be cloned from the given remote url\n      description: Add a new repo.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: A human-readable name. This name must not be unique.\n                remote_url:\n                  $ref: '#/components/schemas/RemoteUrl'\n              required:\n                - name\n                - remote_url\n      security:\n        - admin_credentials: []\n      tags:\n        - repo\n  /all-repos:\n    get:\n      summary: get all repos\n      tags:\n        - repo\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  repos:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Repo'\n                required:\n                  - repos\n      operationId: get-all-repos\n      description: Retrieve a list of all available repos.\n  /test-token:\n    get:\n      summary: test auth token\n      tags: []\n      responses:\n        '204':\n          description: OK\n        '401':\n          description: Unauthorized\n      operationId: get-test-token\n      description: Test whether an auth token is valid as admin auth token.\n      security:\n        - admin_credentials: []\n      parameters: []\n  '/graph/detail/{repoid}':\n    parameters:\n      - schema:\n          type: string\n        name: repoid\n        in: path\n        required: true\n    get:\n      summary: detail graph\n      tags:\n        - graph\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  dimensions:\n                    type: array\n                    description: 'The dimensions, in the order they appear in the commits'\n                    items:\n                      $ref: '#/components/schemas/Dimension'\n                  commits:\n                    type: array\n                    description: 'Ordered from old to new. If multiple commits have the same committer time (e. g. because of a rebase), they are ordered topologically from parent to child.'\n                    items:\n                      type: object\n                      properties:\n                        hash:\n                          $ref: '#/components/schemas/CommitHash'\n                        parents:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/CommitHash'\n                        author:\n                          type: string\n                        committer_date:\n                          $ref: '#/components/schemas/Time'\n                        summary:\n                          type: string\n                        values:\n                          type: array\n                          description: |-\n                            One value for each dimension. For the order, see the `dimensions` field.\n\n                            If there is no value for any reason, the array contains a string as placeholder describing why there is no value. `\"N\"` means that the commit has no corresponding run. `\"O\"` means that the run has no corresponding measurement. `\"R\"` means that the entire run has failed. `\"M\"` means that only the measurement itself has failed.\n                          items:\n                            type:\n                              - number\n                              - string\n                            pattern: '^[NORM]$'\n                            minLength: 1\n                            maxLength: 1\n                      required:\n                        - hash\n                        - parents\n                        - author\n                        - committer_date\n                        - summary\n                        - values\n                required:\n                  - dimensions\n                  - commits\n        '400':\n          description: 'The `start_time`, `end_time`, `duration` and/or `dimensions` parameters are invalid'\n        '404':\n          description: Repo doesn't exist\n      operationId: get-graph-detail-repoid\n      description: |-\n        The `dimensions` query parameter consists of multiple sections separated by double colons (`::`).\n        Each section contains a benchmark name and a list of metric names, separated by a single colon (`:`).\n\n        For example, to select the `time` and `lines` metrics for the `parser` benchmark, as well as the `time` metric for the `compile` benchmark, use this string as your `dimensions` query parameter:\n        ```\n        parser:time:lines::compile:time\n        ```\n\n        If some of the dimensions don't exist, they may be omitted from the response.\n\n        In ambiguous situations, `start_time` defaults to the earliest commit's time and `end_time` defaults to the present time.\n        If only `duration` is set, `end_time` takes precedence over `start_time`.\n        `end_time` must be more recent than `start_time`.\n        `start_time`, `end_time` and `duration` must not all be set, otherwise the request is rejected.\n      parameters:\n        - schema:\n            type: integer\n            format: int64\n          in: query\n          name: start_time\n          description: Start time (epoch time in seconds)\n        - schema:\n            type: integer\n            format: int64\n          in: query\n          name: end_time\n          description: End time (epoch time in seconds)\n        - schema:\n            type: integer\n            minimum: 0\n          in: query\n          name: duration\n          description: Duration in seconds\n        - schema:\n            type: string\n            example: 'parser:time:lines::compile:time'\n          in: query\n          name: dimensions\n          description: Which benchmarks and metrics to return\n          required: true\n  /recent/runs:\n    get:\n      summary: get recent runs\n      tags:\n        - run\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  runs:\n                    type: array\n                    description: 'The most recent runs, ordered from new to old'\n                    items:\n                      type: object\n                      properties:\n                        run:\n                          $ref: '#/components/schemas/RunDescription'\n                        significant_differences:\n                          type: array\n                          description: Present only when significant runs were requested\n                          items:\n                            $ref: '#/components/schemas/DimensionDifference'\n                        significant_failed_dimensions:\n                          description: Present only when significant runs were requested\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/Dimension'\n                      required:\n                        - run\n                required:\n                  - runs\n      operationId: get-recent-runs\n      description: Get a list of the most recent runs across all repositories.\n      parameters:\n        - schema:\n            type: integer\n            default: 10\n            minimum: 1\n            maximum: 100\n          in: query\n          name: 'n'\n          description: Maximum number of runs to return\n        - schema:\n            type: boolean\n            default: 'false'\n          in: query\n          name: significant\n          description: Whether to only return significant runs\n  /graph/comparison:\n    get:\n      summary: repo comparison graph\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  dimension:\n                    $ref: '#/components/schemas/Dimension'\n                  repos:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        repo_id:\n                          $ref: '#/components/schemas/RepoId'\n                        commits:\n                          type: array\n                          description: 'Ordered from old to new. If multiple commits have the same committer time (e. g. because of a rebase), they are ordered topologically from parent to child.'\n                          items:\n                            type: object\n                            properties:\n                              hash:\n                                $ref: '#/components/schemas/CommitHash'\n                              parents:\n                                type: array\n                                items:\n                                  $ref: '#/components/schemas/CommitHash'\n                              author:\n                                type: string\n                              committer_date:\n                                $ref: '#/components/schemas/Time'\n                              summary:\n                                type: string\n                              value:\n                                type:\n                                  - number\n                                  - string\n                                description: |-\n                                  One value for each dimension. For the order, see the `dimensions` field.\n\n                                  If there is no value for any reason, the array contains a string as placeholder describing why there is no value. `\"N\"` means that the commit has no corresponding run. `\"O\"` means that the run has no corresponding measurement. `\"R\"` means that the entire run has failed. `\"M\"` means that only the measurement itself has failed.\n                                pattern: '^[NORM]$'\n                                minLength: 1\n                                maxLength: 1\n                            required:\n                              - hash\n                              - parents\n                              - author\n                              - committer_date\n                              - summary\n                              - value\n                      required:\n                        - repo_id\n                        - commits\n                required:\n                  - dimension\n                  - repos\n        '400':\n          description: 'The `start_time`, `end_time`, `duration` and/or `dimension` parameters are invalid'\n        '404':\n          description: The dimension doesn't exist\n      operationId: get-graph-comparison\n      parameters:\n        - schema:\n            type: string\n            example: '123e4567-e89b-12d3-a456-426614174000:master:foo/bar::00112233-4455-6677-8899-aabbccddeeff:master:develop'\n          in: query\n          name: repos\n          description: The repositories and corresponding branches that should be compared\n          required: true\n        - schema:\n            type: integer\n            format: int64\n          in: query\n          name: start_time\n          description: Start time (epoch time in seconds)\n        - schema:\n            type: integer\n            format: int64\n          in: query\n          name: end_time\n          description: End time (epoch time in seconds)\n        - schema:\n            type: integer\n            minimum: 0\n          in: query\n          name: duration\n          description: Duration in seconds\n        - schema:\n            type: string\n            example: 'parser:time'\n          in: query\n          name: dimension\n          description: Which benchmarks and metrics to return\n          required: true\n      description: |-\n        The `repos` query parameter consists of multiple sections separated by double colons (`::`).\n        Each section contains a repo id and a list of branch names, separated by a single colon (`:`).\n\n        For example, to select the repo `123e4567-e89b-12d3-a456-426614174000` with branches `master` and `foo/bar`, as well as the repo `00112233-4455-6677-8899-aabbccddeeff` with branches `master` and `develop`, use this string as your `repos` query parameter:\n        ```\n        123e4567-e89b-12d3-a456-426614174000:master:foo/bar::00112233-4455-6677-8899-aabbccddeeff:master:develop\n        ```\n\n        See also `man git-check-ref-format`.\n\n        The `dimension` query parameter has the format `benchmark:metric`.\n        In contrast to the `dimensions` parameter of the `/graph/detail/{repoid}` endpoint, this parameter only allows exactly one benchmark and exactly one metric.\n\n        For example, to select the `time` metric for the `parser` benchmark, use this string as your `dimension` query parameter:\n        ```\n        parser:time\n        ```\n\n        The `start_time`, `end_time` and `duration` parameters work the same as for the `/graph/detail/{repoid}` endpoint.\n        If some of the repos don't exist, they may be omitted from the response.\n  '/queue/task/{taskid}/progress':\n    parameters:\n      - schema:\n          type: string\n        name: taskid\n        in: path\n        required: true\n    get:\n      summary: task runner output\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  index_of_first_line:\n                    type: number\n                    description: 'The absolute index of the first line. If the benchmark script already printed 3 lines, but only the last two are returned, the index of the first line would be 1. The absolute index of any returned line is therefore \u003crelative index\u003e + \u003cindex_of_first_line\u003e'\n                  output:\n                    type: array\n                    description: 'The stderr output of the benchmark script, split at the line separator.'\n                    items:\n                      type: string\n                required:\n                  - index_of_first_line\n                  - output\n        '404':\n          description: If the given task is not in the queue or not currently worked on by a runner.\n      operationId: get-queue-task-taskid-progress\n      description: Returns the last 100 lines the benchmark script working on the given task reported on its standard error stream.\n  /listener/fetch-all:\n    post:\n      summary: ''\n      operationId: post-listener-fetch-all\n      responses:\n        '200':\n          description: OK\n      description: 'Check all repos (including the benchmark repo) for new commits and perform necessary internal updates. After fetching is complete, the runners will automatically use the newest version of the benchmark repo.'\n      security:\n        - admin_credentials: []\n  '/queue/task/{taskId}':\n    parameters:\n      - schema:\n          type: string\n        name: taskId\n        in: path\n        required: true\n    get:\n      summary: Get task info\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  task:\n                    $ref: '#/components/schemas/Task'\n                  position:\n                    type: number\n                    description: The position of this task in the queue. Zero based.\n                  running_since:\n                    $ref: '#/components/schemas/Time'\n                required:\n                  - task\n                  - position\n        '404':\n          description: Not Found\n      operationId: get-queue-task-taskId\n      description: Return the task and its position in the queue.\n  '/queue/commit/{repoid}/{hash}/one-up':\n    parameters:\n      - schema:\n          type: string\n        name: repoid\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: hash\n        in: path\n        required: true\n    post:\n      summary: One-up benchmark\n      operationId: post-queue-commit-repoid-hash-one-up\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tasks:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Task'\n        '404':\n          description: Commit Not Found\n      description: Benchmarks the given commit and all tracked descendants.\n      security:\n        - admin_credentials: []\n  /search:\n    get:\n      summary: search runs and commits\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  commits:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        repo_id:\n                          $ref: '#/components/schemas/RepoId'\n                        hash:\n                          $ref: '#/components/schemas/CommitHash'\n                        author:\n                          type: string\n                        author_date:\n                          $ref: '#/components/schemas/Time'\n                        committer:\n                          type: string\n                        committer_date:\n                          $ref: '#/components/schemas/Time'\n                        summary:\n                          type: string\n                        has_run:\n                          type: boolean\n                      required:\n                        - repo_id\n                        - hash\n                        - author\n                        - author_date\n                        - committer\n                        - committer_date\n                        - summary\n                        - has_run\n                  runs:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          $ref: '#/components/schemas/RunId'\n                        repo_id:\n                          $ref: '#/components/schemas/RepoId'\n                        commit_summary:\n                          type: string\n                        tar_description:\n                          type: string\n                        start_time:\n                          $ref: '#/components/schemas/Time'\n                        stop_time:\n                          $ref: '#/components/schemas/Time'\n                      required:\n                        - id\n                        - start_time\n                        - stop_time\n                  branches:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        repo_id:\n                          $ref: '#/components/schemas/RepoId'\n                        name:\n                          type: string\n                        commit_hash:\n                          $ref: '#/components/schemas/CommitHash'\n                        commit_summary:\n                          type: string\n                        has_run:\n                          type: boolean\n                      required:\n                        - repo_id\n                        - name\n                        - commit_hash\n                        - commit_summary\n                        - has_run\n                required:\n                  - commits\n                  - runs\n                  - branches\n      operationId: get-search\n      parameters:\n        - schema:\n            type: integer\n          in: query\n          name: limit\n          description: Maximum number of commits and runs to return in total\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: repo_id\n          description: Only include commits and runs from this repo\n        - schema:\n            type: string\n          in: query\n          name: query\n          description: The search query\n          required: true\n      description: Search through runs and commits using different criteria.\n  '/run/{runid}/short':\n    parameters:\n      - schema:\n          type: string\n        name: runid\n        in: path\n        required: true\n    get:\n      summary: get short run description\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  run:\n                    $ref: '#/components/schemas/ShortRunDescription'\n                required:\n                  - run\n        '404':\n          description: Not Found\n      operationId: get-run-runid-short\n      description: |-\n        Retrieve a run by its id.\n\n        If a commit hash is specified, it instead interprets the run id as repo id and uses that commit's latest run, if one exists.\n      parameters: []\n  '/commit/{repoid}/{hash}/short':\n    parameters:\n      - schema:\n          type: string\n        name: repoid\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: hash\n        in: path\n        required: true\n    get:\n      summary: get short commit description\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  summary:\n                    type: string\n                required:\n                  - summary\n        '404':\n          description: Not Found\n      operationId: get-commit-repoid-hash-short\n      description: ''\n  /graph/status-comparison:\n    get:\n      summary: repo status comparison graph\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  runs:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        repo_id:\n                          $ref: '#/components/schemas/RepoId'\n                        commit_hash:\n                          $ref: '#/components/schemas/CommitHash'\n                        run:\n                          $ref: '#/components/schemas/Run'\n                      required:\n                        - repo_id\n                        - commit_hash\n                required:\n                  - runs\n      operationId: get-graph-status-comparison\n      description: |-\n        The `repos` query parameter consists of multiple sections separated by double colons (`::`).\n        Each section contains a repo id and a list of branch names, separated by a single colon (`:`).\n\n        For example, to select the repo `123e4567-e89b-12d3-a456-426614174000` with branches `master` and `foo/bar`, as well as the repo `00112233-4455-6677-8899-aabbccddeeff` with branches `master` and `develop`, use this string as your `repos` query parameter:\n        ```\n        123e4567-e89b-12d3-a456-426614174000:master:foo/bar::00112233-4455-6677-8899-aabbccddeeff:master:develop\n        ```\n\n        See also `man git-check-ref-format`.\n      parameters:\n        - schema:\n            type: string\n            example: '123e4567-e89b-12d3-a456-426614174000:master:foo/bar::00112233-4455-6677-8899-aabbccddeeff:master:develop'\n          in: query\n          description: The repositories and corresponding branches that should be compared\n          name: repos\n          required: true\n  /all-dimensions:\n    get:\n      summary: get all dimensions\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  dimensions:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        dimension:\n                          $ref: '#/components/schemas/Dimension'\n                        runs:\n                          type: integer\n                        untracked_runs:\n                          type: integer\n                        unreachable_runs:\n                          type: integer\n                      required:\n                        - dimension\n                        - runs\n                        - untracked_runs\n                        - unreachable_runs\n                required:\n                  - dimensions\n      operationId: get-dimensions\n    parameters: []\n  /dimensions:\n    parameters: []\n    delete:\n      summary: delete dimension\n      operationId: delete-dimensions-benchmark-metric\n      responses:\n        '204':\n          description: No Content\n        '404':\n          description: 'If any dimension could not be found. If this is returned, *no data* was deleted.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: A message describing the error\n                  benchmark:\n                    type: string\n                    description: The benchmark part of the dimension that could not be found\n                  metric:\n                    type: string\n                    description: The metric part of the dimension that could not be found\n      description: |-\n        Deletes all given dimension and all their benchmarks. Does *not* remove empty runs afterwards.\n\n        If any dimension in the request could not be found, the deletion is aborted atomically and *nothing* is deleted.\n      security:\n        - admin_credentials: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/DimensionId'\ncomponents:\n  schemas:\n    CommitHash:\n      type: string\n      title: CommitHash\n      example: e148703fe729db437f178a68dca4f79cb785974a\n      pattern: '^[a-fA-F0-9]{40}$'\n      description: A git commit hash\n    RepoId:\n      type: string\n      title: RepoId\n      description: An id for a git repository known to velcom\n      format: uuid\n    RunId:\n      type: string\n      title: RunId\n      description: A run's id (also used for tasks)\n      format: uuid\n    Time:\n      type: integer\n      title: Time\n      format: int64\n      description: Unix/epoch time (seconds since 1970-01-01)\n    Task:\n      title: Task\n      type: object\n      description: 'A task is an entry in the queue that is yet to be benchmarked. When the benchmark process is complete, it is turned into a run with the same id.'\n      properties:\n        id:\n          $ref: '#/components/schemas/RunId'\n        author:\n          type: string\n          description: Who (or what) the task was created by\n        since:\n          $ref: '#/components/schemas/Time'\n        source:\n          $ref: '#/components/schemas/Source'\n      required:\n        - id\n        - author\n        - since\n        - source\n    Commit:\n      title: Commit\n      type: object\n      description: A full commit\n      properties:\n        repo_id:\n          $ref: '#/components/schemas/RepoId'\n        hash:\n          $ref: '#/components/schemas/RepoId'\n        tracked:\n          type: boolean\n          description: Whether this commit can be reached from at least one tracked branch\n        tracked_parents:\n          type: array\n          description: Parent commits that can be reached from at least one tracked branch\n          items:\n            $ref: '#/components/schemas/CommitDescription'\n        untracked_parents:\n          type: array\n          description: 'Parent commits that can''t be reached from any tracked branch. If the commit is tracked, this list should always be empty.'\n          items:\n            $ref: '#/components/schemas/CommitDescription'\n        tracked_children:\n          type: array\n          description: Child commits that can be reached from at least one tracked branch\n          items:\n            $ref: '#/components/schemas/CommitDescription'\n        untracked_children:\n          type: array\n          description: 'Child commits that can''t be reached from any tracked branch, but from at least one untracked branch'\n          items:\n            $ref: '#/components/schemas/CommitDescription'\n        author:\n          type: string\n        author_date:\n          $ref: '#/components/schemas/Time'\n        committer:\n          type: string\n        committer_date:\n          $ref: '#/components/schemas/Time'\n        summary:\n          type: string\n          description: The first section of the commit message\n        message:\n          type: string\n          description: The rest of the commit message without the summary\n        runs:\n          type: array\n          description: All the runs belonging to this commit\n          items:\n            $ref: '#/components/schemas/RunDescription'\n      required:\n        - repo_id\n        - hash\n        - tracked\n        - tracked_parents\n        - untracked_parents\n        - tracked_children\n        - untracked_children\n        - author\n        - author_date\n        - committer\n        - committer_date\n        - summary\n        - runs\n    RunDescription:\n      title: RunDescription\n      type: object\n      description: A short description of a run\n      properties:\n        id:\n          $ref: '#/components/schemas/RunId'\n        start_time:\n          $ref: '#/components/schemas/Time'\n        success:\n          type: string\n          description: 'If all measurements succeeded, the run is a success. If some measurements failed but others succeeded, the run is only a partial success. If all measurements failed or other errors occurred, the run is a failure.'\n          enum:\n            - SUCCESS\n            - PARTIAL_SUCCESS\n            - FAILURE\n        source:\n          $ref: '#/components/schemas/Source'\n      required:\n        - id\n        - start_time\n        - success\n        - source\n    CommitDescription:\n      title: CommitDescription\n      type: object\n      properties:\n        repo_id:\n          $ref: '#/components/schemas/RepoId'\n        hash:\n          $ref: '#/components/schemas/CommitHash'\n        author:\n          type: string\n        author_date:\n          $ref: '#/components/schemas/Time'\n        summary:\n          type: string\n      required:\n        - repo_id\n        - hash\n        - author\n        - author_date\n        - summary\n      description: A short description of a commit\n    Run:\n      title: Run\n      type: object\n      description: A full run\n      properties:\n        id:\n          $ref: '#/components/schemas/RunId'\n        author:\n          type: string\n          description: Who (or what) this run's task was created by\n        runner_name:\n          type: string\n          description: The runner's unique name\n        runner_info:\n          type: string\n          description: Additional information sent by the runner (at the time the run was executed)\n        start_time:\n          $ref: '#/components/schemas/Time'\n        stop_time:\n          $ref: '#/components/schemas/Time'\n        source:\n          $ref: '#/components/schemas/Source'\n        result:\n          oneOf:\n            - properties:\n                measurements:\n                  type: array\n                  description: The measurements returned by the benchmark script\n                  items:\n                    $ref: '#/components/schemas/Measurement'\n              description: The run executed successfully\n              required:\n                - measurements\n            - properties:\n                bench_error:\n                  type: string\n                  description: The error message returned by the benchmark script\n              description: The benchmark script returned a global error\n              required:\n                - bench_error\n            - properties:\n                velcom_error:\n                  type: string\n                  description: An error message describing what went wrong\n              description: Velcom encountered issues while trying to execute the run\n              required:\n                - velcom_error\n          description: How the run ended\n          type: object\n      required:\n        - id\n        - author\n        - runner_name\n        - runner_info\n        - start_time\n        - stop_time\n        - source\n        - result\n    Source:\n      title: Source\n      type: object\n      description: The source for a task or run\n      properties:\n        type:\n          type: string\n          enum:\n            - COMMIT\n            - UPLOADED_TAR\n          description: Determines whether the source field contains a commit or an uploaded file\n        source:\n          oneOf:\n            - $ref: '#/components/schemas/CommitDescription'\n            - type: object\n              description: An uploaded tar file\n              properties:\n                description:\n                  type: string\n                  description: The description given when the file was uploaded\n                repo_id:\n                  $ref: '#/components/schemas/RepoId'\n              required:\n                - description\n          description: The actual source\n      required:\n        - type\n        - source\n    Measurement:\n      title: Measurement\n      oneOf:\n        - description: The measurement was successful\n          properties:\n            dimension:\n              $ref: '#/components/schemas/Dimension'\n            value:\n              type: number\n              description: The average of all measured values\n            values:\n              type: array\n              description: All measured values\n              items:\n                type: number\n            stddev:\n              description: The standard deviation of the run the new value is from. Only present if the amount of values in the sample is above the minimum stddev amount.\n              type: number\n            stddev_percent:\n              type: number\n              description: stddev / value. Only present if the amount of values in the sample is above the minimum stddev amount.\n          required:\n            - dimension\n            - value\n        - description: The measurement was not successful\n          properties:\n            dimension:\n              $ref: '#/components/schemas/Dimension'\n            error:\n              type: string\n              description: The error message returned by the benchmark script for this metric\n          required:\n            - dimension\n            - error\n      description: A full measurement\n      type: object\n    Repo:\n      title: Repo\n      type: object\n      description: A full repo\n      properties:\n        id:\n          $ref: '#/components/schemas/RepoId'\n        name:\n          type: string\n          description: The name given to the repo when it was created\n        remote_url:\n          $ref: '#/components/schemas/RemoteUrl'\n        branches:\n          type: array\n          description: All of the repo's untracked branches\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/Branch'\n        dimensions:\n          type: array\n          description: All types of measurements where at least one value exists for this repo\n          items:\n            $ref: '#/components/schemas/Dimension'\n        last_github_update:\n          $ref: '#/components/schemas/Time'\n      required:\n        - id\n        - name\n        - remote_url\n        - branches\n        - dimensions\n    RemoteUrl:\n      type: string\n      title: RemoteUrl\n      format: uri\n      description: The URL of a remote repository\n    Dimension:\n      title: Dimension\n      type: object\n      properties:\n        benchmark:\n          type: string\n          pattern: ^\\w+$\n          minLength: 1\n          example: parser\n        metric:\n          type: string\n          minLength: 1\n          pattern: ^\\w+$\n          example: time\n        unit:\n          type: string\n          description: The unit the measured values are in\n        interpretation:\n          type: string\n          description: How to interpret values for this dimension\n          enum:\n            - LESS_IS_BETTER\n            - MORE_IS_BETTER\n            - NEUTRAL\n      required:\n        - benchmark\n        - metric\n        - unit\n        - interpretation\n    DimensionId:\n      title: DimensionId\n      type: object\n      properties:\n        benchmark:\n          type: string\n        metric:\n          type: string\n    DimensionDifference:\n      title: DimensionDifference\n      type: object\n      description: The difference between an old and a new value in the same dimension\n      properties:\n        dimension:\n          $ref: '#/components/schemas/Dimension'\n        diff:\n          type: number\n          description: new value - old value\n        reldiff:\n          type: number\n          description: |-\n            (new value - old value) / old value\n\n            Only present if the old value is non-zero.\n        stddev_diff:\n          type: string\n          description: |-\n            (new value - old value) / stddev of new values\n\n            Only present if the old value is non-zero and the amount of new values is above the min stddev limit.\n        old_run_id:\n          $ref: '#/components/schemas/RunId'\n      required:\n        - dimension\n        - diff\n        - old_run_id\n    ShortRunDescription:\n      title: ShortRunDescription\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/RunId'\n        commit_hash:\n          $ref: '#/components/schemas/CommitHash'\n        commit_summary:\n          type: string\n          description: 'If the run is attached to a commit, the commit''s summary'\n        tar_description:\n          type: string\n          description: 'If the run is attached to a tar, the tar''s description'\n      required:\n        - id\n    Branch:\n      title: Branch\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the branch\n        tracked:\n          type: boolean\n          description: Whether the branch is tracked\n        latest_commit:\n          $ref: '#/components/schemas/CommitHash'\n      required:\n        - name\n        - tracked\n        - latest_commit\n  securitySchemes:\n    admin_credentials:\n      type: http\n      scheme: basic\n"
		}
	},
	"Error": "unmarshal: json: line 1:487: callback: callback: callback: json: cannot unmarshal array into Go struct field Schema.type of type string"
}