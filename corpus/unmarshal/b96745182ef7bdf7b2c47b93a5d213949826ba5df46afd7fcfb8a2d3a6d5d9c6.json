{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/apache/sling-whiteboard"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "json-store/src/main/resources/openapi/openapi.yaml",
			"byteSize": 7257,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Apache Sling JSON Store\n  version: 0.0.1-SNAPSHOT\n  description: \"Apache Sling JSON store prototype, source code on [GitHub:json-store](https://github.com/apache/sling-whiteboard/tree/master/json-store). This API allows for storing JSON schema and documents, and a command is provided to push content to read-only branches for publishing.\"\ncomponents:\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n  schemas:\n    anyJSON:\n      properties:\n        - \"$schema\":\n            type: string\n      additionalProperties: true\nsecurity:\n  - BasicAuth : []\npaths:\n  /content/sites/{site}/schema/{name}:\n    parameters: \n        - in: path\n          name: site\n          schema: \n            type: string\n          required: true\n          description: Site name\n          example: \"example.com\"\n        - in: path\n          name: name\n          schema: \n            type: string\n          required: true\n          description: Schema name\n          example: \"test/minimal\"\n    post:\n      operationId: postSchema\n      summary: Store or update a JSON schema\n      requestBody:\n        description: \"Schema content\"\n        required: true\n        content:\n          application/json:\n            example: {\n              \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\n              \"$id\": \"https://example.com/minimal\",\n              \"title\": \"Minimal\",\n              \"description\": \"A minimal(ish) valid schema\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"$schema\": {\n                  \"description\": \"The schema reference\",\n                  \"type\": \"string\"\n                },\n                \"tags\": {\n                  \"description\": \"Tags that categorize the product\",\n                  \"type\": \"array\"\n                }\n              },\n              \"additionalProperties\":false,\n              \"required\": [ \"$schema\", \"tags\" ]\n            }\n            schema:\n              $ref: '#/components/schemas/anyJSON'\n      responses:\n        '200':\n          description: |-\n            200 response\n          content:\n            application/json: {}\n    get:\n      operationId: getSchema\n      summary: Get a JSON schema\n      responses:\n        '200':\n          description: |-\n            200 response\n          content:\n            application/json: {}\n  /content/sites/{site}/branches/authoring/{contentType}/{path}:\n    parameters: \n        - in: path\n          name: site\n          schema: \n            type: string\n          required: true\n          description: Site name\n          example: \"example.com\"\n        - in: path\n          name: contentType\n          schema: \n            type: string\n          required: true\n          description: The type of content to store or retrieve\n          example: \"content\"\n        - in: path\n          name: path\n          schema: \n            type: string\n          required: true\n          description: The document path\n          example: \"minimal\"\n    get:\n      operationId: getDocument\n      summary: Get a JSON document from the authoring branch\n      responses:\n        '200':\n          description: |-\n            200 response\n          content:\n            application/json: {}\n    post:\n      operationId: postDocument\n      summary: Store or update a JSON document\n      requestBody:\n        description: \"Document content\"\n        required: true\n        content:\n          application/json:\n            example: {\n              \"$schema\":\"test/minimal\",\n              \"tags\": [ \"home\", \"green\" ]\n            }\n            schema:\n              $ref: '#/components/schemas/anyJSON'\n      parameters: \n        - in: path\n          name: site\n          schema: \n            type: string\n          required: true\n          description: Site name\n          example: \"example.com\"\n        - in: path\n          name: contentType\n          schema: \n            type: string\n          required: true\n          description: The type of content to store or retrieve\n          example: \"content\"\n        - in: path\n          name: path\n          schema: \n            type: string\n          required: true\n          description: The document path\n          example: \"minimal\"\n      responses:\n        '200':\n          description: |-\n            200 response\n          content:\n            application/json: {}\n  /content/sites/{site}/commands/cmd/list:\n    parameters: \n        - in: path\n          name: site\n          schema: \n            type: string\n          required: true\n          description: Site name\n          example: \"example.com\"\n    post:\n      operationId: listCommands\n      summary: List available commands\n      requestBody:\n        description: \"Empty content\"\n        required: true\n        example: {}\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/anyJSON'\n      responses:\n        '200':\n          description: |-\n            200 response\n          content:\n            application/json: {}\n  /content/sites/{site}/commands/{namespace}/{command}:\n    parameters: \n        - in: path\n          name: site\n          schema: \n            type: string\n          required: true\n          description: Site name\n          example: \"example.com\"\n        - in: path\n          name: namespace\n          schema: \n            type: string\n          required: true\n          description: Command namespace\n          example: branch\n        - in: path\n          name: command\n          schema: \n            type: string\n          required: true\n          description: Command name\n          example: push\n    post:\n      operationId: executeCommand\n      summary: Execute a command\n      requestBody:\n        description: \"Command input\"\n        required: true\n        content:\n          application/json:\n            example: {\n                \"branch\":\"testing\",\n                \"path\":\"/content/sites/example.com/branches/authoring/content/minimal\"\n            }\n            schema:\n              $ref: '#/components/schemas/anyJSON'\n      responses:\n        '200':\n          description: |-\n            200 response\n          content:\n            application/json: {}\n  /content/sites/{site}/branches/{branch}/{contentType}/{path}:\n    parameters: \n        - in: path\n          name: site\n          schema: \n            type: string\n          required: true\n          description: Site name\n          example: \"example.com\"\n        - in: path\n          name: branch\n          schema: \n            type: string\n          required: true\n          description: The branch name\n          example: \"testing\"\n        - in: path\n          name: contentType\n          schema: \n            type: string\n          required: true\n          description: The type of content to store or retrieve\n          example: \"content\"\n        - in: path\n          name: path\n          schema: \n            type: string\n          required: true\n          description: The document path\n          example: \"minimal\"\n    get:\n      operationId: getBranchDocument\n      summary: Get a JSON document from a readonly branch\n      responses:\n        '200':\n          description: |-\n            200 response\n          content:\n            application/json: {}\n"
		}
	},
	"Error": "unmarshal: json: start: unexpected byte 91 '['"
}