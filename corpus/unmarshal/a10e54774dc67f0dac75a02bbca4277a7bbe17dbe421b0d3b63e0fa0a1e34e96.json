{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/DataBiosphere/jade-data-repo"
		},
		"file": {
			"name": "data-repository-openapi.yaml",
			"size": 0,
			"path": "src/main/resources/api/data-repository-openapi.yaml",
			"byteSize": 175387,
			"content": "openapi: 3.0.1\ninfo:\n  title: Data Repository API\n  description: \u003e\n    \u003cdetails\u003e\u003csummary\u003eThis document defines the REST API for the Terra Data Repository.\u003c/summary\u003e\n    \u003cp\u003e\n    **Status: design in progress**\n\n    There are a few top-level endpoints (besides some used by swagger):\n     * / - generated by swagger: swagger API page that provides this\n    documentation and a live UI for submitting REST requests\n     * /status - provides the operational status of the service\n     * /configuration - provides the basic configuration and information about the service\n     * /api - is the authenticated and authorized Data Repository API\n     * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API\n\n    The API endpoints are organized by interface. Each interface is separately versioned.\n    \u003cp\u003e\n    **Notes on Naming**\n    \u003cp\u003e\n    All of the reference items are suffixed with \\\"Model\\\".\n    Those names are used as the class names in the generated Java code.\n    It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes.\n    \u003c/details\u003e\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  termsOfService: https://app.terra.bio/#terms-of-service\n  version: 0.1.0\nservers:\n  - url: /\nsecurity:\n  - googleoauth:\n      - openid\n      - email\n      - profile\n  - oidc:\n      - openid\n      - email\n      - profile\npaths:\n  /status:\n    get:\n      tags:\n        - unauthenticated\n      description: \u003e\n        Returns the operational status of the service\n      operationId: serviceStatus\n      responses:\n        200:\n          description: Service is functional\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RepositoryStatusModel'\n        500:\n          description: Service is broken\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RepositoryStatusModel'\n  /configuration:\n    get:\n      tags:\n        - unauthenticated\n      description: Retrieve the repository configuration information\n      operationId: retrieveRepositoryConfig\n      responses:\n        200:\n          description: Repository Config\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RepositoryConfigurationModel'\n        500:\n          description: Config is unavailable\n          content: {}\n  /shutdown:\n    get:\n      tags:\n        - unauthenticated\n      description: \u003e\n        Requests that this instance of DR Manager shut down. In production, this must be configured to\n        only be callable by Kubernetes.\n      operationId: shutdownRequest\n      responses:\n        204:\n          description: DR Manager was shutdown successfully\n          content: {}\n  /api/resources/v1/profiles:\n    get:\n      tags:\n        - profiles\n        - resources\n      description: \u003e\n        Returns a list of all of the billing profiles\n      operationId: enumerateProfiles\n      parameters:\n        - name: offset\n          in: query\n          description: The number of items to skip before starting to collect the result\n            set.\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The numbers of items to return.\n          schema:\n            type: integer\n            default: 10\n      responses:\n        200:\n          description: List of billing profiles\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnumerateBillingProfileModel'\n    post:\n      tags:\n        - profiles\n        - resources\n      description: \u003e\n        Creates a new profile associated with a billing account. This is asynchronous.\n        The final return is of type definitions/BillingProfileModel.\n      operationId: createProfile\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BillingProfileRequestModel'\n        required: false\n      responses:\n        200:\n          description: Redirect for profile successful creation\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of profile creation job \u0026 url for polling in the\n            response header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - see error message\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to create profiles\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: billingProfileRequest\n    put:\n      tags:\n        - profiles\n        - resources\n      description: \u003e\n        Update a billing profile by id. This is asynchronous.\n        The final return is of type definitions/BillingProfileModel.\n      operationId: updateProfile\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BillingProfileUpdateModel'\n        required: true\n      responses:\n        200:\n          description: Redirect for profile update result\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of profile update job \u0026 url for polling in the response\n            header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to update profile\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - profile does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/resources/v1/profiles/{id}:\n    get:\n      tags:\n        - profiles\n        - resources\n      description: Retrieve a billing profile by id\n      operationId: retrieveProfile\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      responses:\n        200:\n          description: Billing profile\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BillingProfileModel'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to see billing profile\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - billing profile id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    delete:\n      tags:\n        - profiles\n        - resources\n      description: \u003e\n        Delete a billing profile by id. This is asynchronous.\n        The final return is of type definitions/DeleteResponseModel.\n      operationId: deleteProfile\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      responses:\n        200:\n          description: Redirect for profile delete result\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of profile delete job \u0026 url for polling in the response\n            header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to delete profile\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - profile does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        409:\n          description: Profile in use by at least one dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /api/resources/v1/profiles/{id}/policies:\n    get:\n      tags:\n        - profiles\n        - resources\n      description: Retrieve the read and discover policies for the profile\n      operationId: retrieveProfilePolicies\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      responses:\n        200:\n          description: Policy\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyResponse'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to see policies\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - snapshot id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /api/resources/v1/profiles/{id}/policies/{policyName}/members:\n    post:\n      tags:\n        - profiles\n        - resources\n      description: Adds a member to the specified policy for the snapshot\n      operationId: addProfilePolicyMember\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PolicyMemberRequest'\n        required: true\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - $ref: '#/components/parameters/ProfilePolicyName'\n      responses:\n        201:\n          description: Policy\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyResponse'\n        400:\n          description: Bad request - invalid id, badly formed, or email not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to update policies\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - profile id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /api/resources/v1/profiles/{id}/policies/{policyName}/members/{memberEmail}:\n    delete:\n      tags:\n        - profiles\n        - resources\n      description: Removes a member from the specified policy for the profile\n      operationId: deleteProfilePolicyMember\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: policyName\n          in: path\n          description: The relevant policy\n          required: true\n          schema:\n            type: string\n            enum:\n              - owner\n              - user\n        - name: memberEmail\n          in: path\n          description: The email of the user to remove\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: PolicyResponse\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyResponse'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to update policies\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - snapshot id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /api/repository/v1/snapshots:\n    get:\n      tags:\n        - snapshots\n        - repository\n      description: \u003e\n        Returns a list of all of the snapshots the caller has access to\n      operationId: enumerateSnapshots\n      parameters:\n        - name: offset\n          in: query\n          description: The number of items to skip before starting to collect the result\n            set.\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The numbers of items to return.\n          schema:\n            type: integer\n            default: 10\n        - name: sort\n          in: query\n          description: The field to use for sorting.\n          schema:\n            default: created_date\n            $ref: '#/components/schemas/EnumerateSortByParam'\n        - name: direction\n          in: query\n          description: The direction to sort.\n          schema:\n            default: asc\n            $ref: '#/components/schemas/SqlSortDirection'\n        - name: filter\n          in: query\n          description: Filter the results where this string is a case insensitive match\n            in the name or description.\n          schema:\n            type: string\n        - name: region\n          in: query\n          description: Filter the results where this string is a case insensitive match\n            in any of the cloud storage regions used by the source datasets.\n          schema:\n            type: string\n        - name: datasetIds\n          in: query\n          description: Filter the results where these datasetIds are source datasets.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: List of snapshots\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnumerateSnapshotModel'\n    post:\n      tags:\n        - snapshots\n        - repository\n      description: Create a new snapshot\n      operationId: createSnapshot\n      requestBody:\n        description: Snapshot to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SnapshotRequestModel'\n        required: false\n      responses:\n        200:\n          description: Redirect for snapshot successful creation\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of snapshot creation job \u0026 url for polling in the\n            response header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid name, badly formed or user email not\n            found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to create snapshots\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        409:\n          description: Snapshot with this name already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: snapshot\n  /api/repository/v1/snapshots/{id}:\n    get:\n      tags:\n        - snapshots\n        - repository\n      description: Retrieve a snapshot by id\n      operationId: retrieveSnapshot\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: include\n          in: query\n          description: A list of what to include with the snapshot object\n          required: false\n          schema:\n            type: array\n            default: \"SOURCES,TABLES,RELATIONSHIPS,PROFILE,DATA_PROJECT\"\n            items:\n              $ref: '#/components/schemas/SnapshotRetrieveIncludeModel'\n      responses:\n        200:\n          description: Snapshot\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SnapshotModel'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to see snapshot\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - snapshot id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    delete:\n      tags:\n        - snapshots\n        - repository\n      description: Delete a snapshot by id\n      operationId: deleteSnapshot\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      responses:\n        200:\n          description: Redirect for snapshot successful deletion\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of snapshot deletion job \u0026 url for polling in the\n            response header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to delete snapshot\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - snapshot id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        409:\n          description: Snapshot in use?\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/snapshots/{id}/data/{table}:\n    get:\n      tags:\n        - snapshots\n        - search\n        - repository\n      description: Retrieve data for a table in a snapshot\n      operationId: lookupSnapshotPreviewById\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: table\n          in: path\n          description: Name of table to get data from\n          required: true\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: The number of rows to skip when retrieving the next page\n          schema:\n            type: integer\n            default: 0\n            minimum: 0\n        - name: limit\n          in: query\n          description: The number of rows to return for the data\n          schema:\n            type: integer\n            default: 30\n            minimum: 1\n            maximum: 1000\n        - name: sort\n          in: query\n          description: The table column to sort by\n          schema:\n            type: string\n            default: \"datarepo_row_id\"\n        - name: direction\n          in: query\n          description: The direction to sort.\n          schema:\n            default: asc\n            $ref: '#/components/schemas/SqlSortDirection'\n      responses:\n        200:\n          description: Returns the table data from a snapshot\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SnapshotPreviewModel'\n  /api/repository/v1/snapshots/{id}/export:\n    get:\n      tags:\n        - snapshots\n        - repository\n      description: Export a snapshot by id\n      operationId: exportSnapshot\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - in: query\n          name: exportGsPaths\n          schema:\n            type: boolean\n            default: false\n            required: true\n          description: Convert DRS urls to GS paths in the output parquet file. Note, GS paths could change over time.\n        - in: query\n          name: validatePrimaryKeyUniqueness\n          schema:\n            type: boolean\n            default: true\n            required: false\n          description: Verify that primary keys are unique in all exported tables.\n            Required for proper Terra workspace integration\n      responses:\n        202:\n          description: Job status of snapshot export job \u0026 url for polling in the\n            response header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to export snapshot\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - snapshot id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/snapshots/{id}/files/{fileid}:\n    get:\n      tags:\n        - snapshots\n        - repository\n      description: Lookup metadata for one file\n      operationId: lookupSnapshotFileById\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: fileid\n          in: path\n          description: A file id\n          required: true\n          schema:\n            type: string\n        - name: depth\n          in: query\n          description: Enumeration depth; -1 means fully expand; 0 means no expansion;\n            1..N expands that many subdirectories\n          schema:\n            type: integer\n            default: 0\n      responses:\n        200:\n          description: File exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileModel'\n        400:\n          description: Bad request - not sure this will ever happen\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - file id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        409:\n          description: No idea if we will generate this error code\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/snapshots/{id}/filesystem/objects:\n    get:\n      tags:\n        - snapshots\n        - repository\n      description: Lookup metadata for one file\n      operationId: lookupSnapshotFileByPath\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: path\n          in: query\n          description: URL-encoded full path to a file or directory\n          required: true\n          schema:\n            type: string\n        - name: depth\n          in: query\n          description: Enumeration depth; -1 means fully expand; 0 means no expansion;\n            1..N expands that many subdirectories\n          schema:\n            type: integer\n            default: 0\n      responses:\n        200:\n          description: File exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileModel'\n        400:\n          description: Bad request - not sure this will ever happen\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - file id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        409:\n          description: No idea if we will generate this error code\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/snapshots/{id}/policies:\n    get:\n      tags:\n        - snapshots\n        - repository\n      description: Retrieve the read and discover policies for the snapshot\n      operationId: retrieveSnapshotPolicies\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      responses:\n        200:\n          description: Policy\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyResponse'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to see policies\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - snapshot id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/snapshots/{id}/policies/{policyName}/members:\n    post:\n      tags:\n        - snapshots\n        - repository\n      description: Adds a member to the specified policy for the snapshot\n      operationId: addSnapshotPolicyMember\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: policyName\n          in: path\n          description: The relevant policy\n          required: true\n          schema:\n            type: string\n            enum:\n              - steward\n              - reader\n              - discoverer\n      requestBody:\n        description: Snapshot to change the policy of\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PolicyMemberRequest'\n        required: false\n      responses:\n        201:\n          description: PolicyResponse\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyResponse'\n        400:\n          description: Bad request - invalid id, badly formed, or email not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to update policies\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - snapshot id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: policyMember\n  /api/repository/v1/snapshots/{id}/policies/{policyName}/members/{memberEmail}:\n    delete:\n      tags:\n        - snapshots\n        - repository\n      description: Removes a member from the specified policy for the snapshot\n      operationId: deleteSnapshotPolicyMember\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: policyName\n          in: path\n          description: The relevant policy\n          required: true\n          schema:\n            type: string\n            enum:\n              - steward\n              - reader\n              - discoverer\n        - name: memberEmail\n          in: path\n          description: The email of the user to remove\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: PolicyResponse\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyResponse'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to update policies\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - snapshot id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/snapshots/{id}/roles:\n    get:\n      tags:\n        - snapshots\n        - repository\n      description: Retrieve the roles the calling user has on the snapshot\n      operationId: retrieveUserSnapshotRoles\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      responses:\n        200:\n          description: Policy\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        404:\n          description: Not found - snapshot id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/datasets:\n    get:\n      tags:\n        - datasets\n        - repository\n      description: \u003e\n        Returns a list of all of the datasets the caller has access to\n      operationId: enumerateDatasets\n      parameters:\n        - name: offset\n          in: query\n          description: The number of datasets to skip before when retrieving the next\n            page\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The numbers datasets to retrieve and return.\n          schema:\n            type: integer\n            default: 10\n        - name: sort\n          in: query\n          description: The field to use for sorting.\n          schema:\n            default: created_date\n            $ref: '#/components/schemas/EnumerateSortByParam'\n        - name: direction\n          in: query\n          description: The direction to sort.\n          schema:\n            default: asc\n            $ref: '#/components/schemas/SqlSortDirection'\n        - name: filter\n          in: query\n          description: Filter the results where this string is a case insensitive match\n            in the name or description.\n          schema:\n            type: string\n        - name: region\n          in: query\n          description: Filter the results where this string is a case insensitive match\n            in any of the cloud storage regions used by the dataset.\n          schema:\n            type: string\n      responses:\n        200:\n          description: List of datasets\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnumerateDatasetModel'\n    post:\n      tags:\n        - datasets\n        - repository\n      description: Create a new dataset asynchronously. The async result is DatasetSummaryModel.\n      operationId: createDataset\n      requestBody:\n        description: Dataset to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DatasetRequestModel'\n        required: false\n      responses:\n        200:\n          description: Redirect for ingest complete\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of ingest job \u0026 url for polling in the response\n            header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - duplicate name, invalid name, badly formed schema\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to create datasets\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: dataset\n  /api/repository/v1/datasets/{id}:\n    get:\n      tags:\n        - datasets\n        - repository\n      description: Retrieve a dataset by id\n      operationId: retrieveDataset\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: include\n          in: query\n          description: A list of what to include with the dataset object\n          required: false\n          schema:\n            type: array\n            default: \"SCHEMA,PROFILE,DATA_PROJECT,STORAGE\"\n            items:\n              $ref: '#/components/schemas/DatasetRequestAccessIncludeModel'\n      responses:\n        200:\n          description: Dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetModel'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to see dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - dataset id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    delete:\n      tags:\n        - datasets\n        - repository\n      description: Delete a dataset by id\n      operationId: deleteDataset\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      responses:\n        200:\n          description: Redirect for dataset successful deletion\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of dataset deletion job \u0026 url for polling in the\n            response header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to delete dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - dataset id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        409:\n          description: Dataset in use by at least one snapshot\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/datasets/{id}/policies:\n    get:\n      tags:\n        - datasets\n        - repository\n      description: Retrieve the read and discover policies for the dataset\n      operationId: retrieveDatasetPolicies\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      responses:\n        200:\n          description: Policy\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyResponse'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to see policies\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - dataset id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/datasets/{id}/policies/{policyName}/members:\n    post:\n      tags:\n        - datasets\n        - repository\n      description: Adds a member to the specified policy for the dataset\n      operationId: addDatasetPolicyMember\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: policyName\n          in: path\n          description: The relevant policy\n          required: true\n          schema:\n            type: string\n            enum:\n              - steward\n              - custodian\n              - snapshot_creator\n      requestBody:\n        description: Dataset to change the policy of\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PolicyMemberRequest'\n        required: false\n      responses:\n        201:\n          description: PolicyResponse\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyResponse'\n        400:\n          description: Bad request - invalid id, badly formed, or email not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to update policies\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - dataset id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: policyMember\n  /api/repository/v1/datasets/{id}/policies/{policyName}/members/{memberEmail}:\n    delete:\n      tags:\n        - datasets\n        - repository\n      description: Removes the member from the specified policy for the dataset\n      operationId: deleteDatasetPolicyMember\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: policyName\n          in: path\n          description: The relevant policy\n          required: true\n          schema:\n            type: string\n            enum:\n              - steward\n              - custodian\n              - snapshot_creator\n        - name: memberEmail\n          in: path\n          description: The email of the user to remove\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: PolicyResponse\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyResponse'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to update policies\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - snapshot id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/datasets/{id}/roles:\n    get:\n      tags:\n        - datasets\n        - repository\n      description: Retrieve the policies the calling user has on the dataset\n      operationId: retrieveUserDatasetRoles\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      responses:\n        200:\n          description: Policy\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        404:\n          description: Not found - dataset id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/datasets/{id}/ingest:\n    post:\n      tags:\n        - datasets\n        - repository\n      description: Ingest data into a dataset table\n      operationId: ingestDataset\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      requestBody:\n        description: Ingest request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IngestRequestModel'\n        required: false\n      responses:\n        200:\n          description: Redirect for ingest complete\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of ingest job \u0026 url for polling in the response\n            header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid ingest request, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to ingest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        409:\n          description: No idea if we will generate this error code\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: ingest\n  /api/repository/v1/datasets/{id}/transactions:\n    post:\n      tags:\n        - datasets\n        - repository\n      description: Create a transaction to be used for ingesting if you are chaining ingests together\n      operationId: openTransaction\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      requestBody:\n        description: Open transaction request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TransactionCreateModel'\n        required: true\n      responses:\n        200:\n          description: Redirect for transaction open complete\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of transaction open job \u0026 url for polling in the response\n            header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid transaction creation request, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to create transaction\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - dataset id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: transaction\n    get:\n      tags:\n        - datasets\n        - repository\n      description: Lists transactions on the dataset\n      operationId: enumerateTransactions\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: offset\n          in: query\n          description: The number of items to skip before starting to collect the result\n            set.\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The numbers of items to return.\n          schema:\n            type: integer\n            default: 10\n      responses:\n        200:\n          description: List of transactions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TransactionModel'\n        400:\n          description: Bad request - invalid parameters\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to list transactions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - dataset id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/datasets/{id}/transactions/{transactionId}:\n    get:\n      tags:\n        - datasets\n        - repository\n      description: Retrieve a given transaction\n      operationId: retrieveTransaction\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - $ref: '#/components/parameters/TransactionId'\n      responses:\n        200:\n          description: Information on a given transaction\n            header\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionModel'\n        400:\n          description: Bad request - invalid query pameters\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to read transaction from this datasset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - dataset id or transaction id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    post:\n      tags:\n        - datasets\n        - repository\n      description: Close a given transaction\n      operationId: closeTransaction\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - $ref: '#/components/parameters/TransactionId'\n      requestBody:\n        description: Close transaction request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TransactionCloseModel'\n      responses:\n        200:\n          description: Redirect for transaction terminate complete\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of transaction commit job \u0026 url for polling in the response\n            header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid transaction terminat request, badly formed or unrecognized state\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to terminate the transaction for this datasset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - dataset id or transaction id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/datasets/{id}/assets:\n    post:\n      tags:\n        - datasets\n        - repository\n      description: Add an asset definiion to a dataset\n      operationId: addDatasetAssetSpecifications\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      requestBody:\n        description: Asset definition to add to the dataset\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssetModel'\n        required: false\n      responses:\n        200:\n          description: Redirect for ingest complete\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of ingest job \u0026 url for polling in the response\n            header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid ingest request, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to add an asset to a dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: assetModel\n  /api/repository/v1/datasets/{id}/assets/{assetid}:\n    delete:\n      tags:\n        - datasets\n        - repository\n      description: Remove an asset definition from a dataset\n      operationId: removeDatasetAssetSpecifications\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: assetid\n          in: path\n          description: An asset id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Redirect for ingest complete\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Add new assets to a dataset\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid ingest request, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to remove an asset from a dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/datasets/{id}/deletes:\n    post:\n      tags:\n        - datasets\n        - repository\n      description: Applies deletes to primary tabular data in a dataset\n      operationId: applyDatasetDataDeletion\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      requestBody:\n        description: Description of the data in the dataset to delete\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataDeletionRequest'\n        required: false\n      responses:\n        201:\n          description: Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid tableName, bad row ids, badly formed,\n            etc.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to delete data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - dataset id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: dataDeletionRequest\n  /api/repository/v1/register/user:\n    get:\n      tags:\n        - register\n        - repository\n      description: \u003e\n        Returns whether the user is registered with terra\n      operationId: user\n      responses:\n        200:\n          description: User Info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatusInfo'\n  /api/repository/v1/datasets/{id}/files:\n    post:\n      tags:\n        - datasets\n        - repository\n      description: Ingest one file into the dataset file system; async returns a FileModel\n      operationId: ingestFile\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      requestBody:\n        description: Ingest file request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FileLoadModel'\n        required: false\n      responses:\n        200:\n          description: Redirect for ingest complete\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of ingest job \u0026 url for polling in the response\n            header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid ingest request, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to ingest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        409:\n          description: No idea if we will generate this error code\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: ingestFile\n  /api/repository/v1/datasets/{id}/files/bulk:\n    post:\n      tags:\n        - datasets\n        - repository\n      description: \u003e-\n        Load many files into the dataset file system; async returns a BulkLoadResultModel\n        Note that this endpoint is not a single transaction. Some files may be loaded and\n        others may fail. Each file load is atomic; the file will either be loaded into the\n        dataset file system or it will not exist.\n      operationId: bulkFileLoad\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      requestBody:\n        description: \u003e-\n          Bulk file load request with file list in an external file. Load summary results\n          are returned in the async response.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BulkLoadRequestModel'\n        required: false\n      responses:\n        200:\n          description: Redirect for bulk load complete\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of bulk load job \u0026 url for polling in the response\n            header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid ingest request, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to ingest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        409:\n          description: Someone else is using the load tag\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: bulkFileLoad\n  /api/repository/v1/datasets/{id}/files/bulk/{loadTag}:\n    get:\n      tags:\n        - datasets\n        - repository\n      description: \u003e-\n        Retrieve the results of a bulk file load. The results of each bulk load are stored\n        in the dataset. They can be queried directly or retrieved with this paginated\n        interface.\n      operationId: getLoadHistoryForLoadTag\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: loadTag\n          in: path\n          description: a load tag\n          required: true\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: The number of items to skip before starting to collect the result\n            set.\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The numbers of items to return.\n          schema:\n            type: integer\n            default: 10\n      responses:\n        200:\n          description: Redirect for bulk load result retrieval complete\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BulkLoadHistoryModelList'\n        202:\n          description: Job status of bulk load result retrieval\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to access bulk file results\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    delete:\n      tags:\n        - datasets\n        - repository\n      description: \u003e-\n        Delete results from the bulk file load table of the dataset.\n        If jobId is specified, then only the results for the loadTag plus that jobId are\n        deleted. Otherwise, all results associated with the loadTag are deleted.\n      operationId: bulkFileResultsDelete\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: loadtag\n          in: path\n          description: a load tag\n          required: true\n          schema:\n            type: string\n        - name: jobId\n          in: query\n          description: The job id associated with the load\n          schema:\n            type: string\n      responses:\n        200:\n          description: Redirect for bulk load result deletion complete\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of bulk load result deletion\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to access bulk file results\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/datasets/{id}/files/bulk/array:\n    post:\n      tags:\n        - datasets\n        - repository\n      description: \u003e-\n        Load many files into the dataset file system; async returns a BulkLoadArrayResultModel\n        Note that this endpoint is not a single transaction. Some files may be loaded and\n        others may fail. Each file load is atomic; the file will either be loaded into the\n        dataset file system or it will not exist.\n      operationId: bulkFileLoadArray\n      parameters:\n        - $ref: '#/components/parameters/Id'\n      requestBody:\n        description: \u003e-\n          Bulk file load request with file list in the body of the request and load\n          results returned in the async response.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BulkLoadArrayRequestModel'\n        required: false\n      responses:\n        200:\n          description: Redirect for bulk load complete\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of bulk load job \u0026 url for polling in the response\n            header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid ingest request, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to ingest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        409:\n          description: Someone else is using the load tag\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: bulkFileLoadArray\n  /api/repository/v1/datasets/{id}/files/{fileid}:\n    get:\n      tags:\n        - datasets\n        - repository\n      description: Lookup metadata for one file\n      operationId: lookupFileById\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: fileid\n          in: path\n          description: A file id\n          required: true\n          schema:\n            type: string\n        - name: depth\n          in: query\n          description: Enumeration depth; -1 means fully expand; 0 means no expansion;\n            1..N expands that many subdirectories\n          schema:\n            type: integer\n            default: 0\n      responses:\n        200:\n          description: File exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileModel'\n        400:\n          description: Bad request - not sure this will ever happen\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - file id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        409:\n          description: No idea if we will generate this error code\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    delete:\n      tags:\n        - datasets\n        - repository\n      description: \u003e\n        Hard delete of a file by id. The file is deleted even if it is in use by\n        a dataset. Subsequent lookups will give not found errors.\n      operationId: deleteFile\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: fileid\n          in: path\n          description: A file id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Redirect for snapshot successful creation\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of snapshot creation job \u0026 url for polling in the\n            response header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to delete file\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - dataset id or file id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/datasets/{id}/filesystem/objects:\n    get:\n      tags:\n        - datasets\n        - repository\n      description: Lookup metadata for one file\n      operationId: lookupFileByPath\n      parameters:\n        - $ref: '#/components/parameters/Id'\n        - name: path\n          in: query\n          description: URL-encoded full path to a file or directory\n          required: true\n          schema:\n            type: string\n        - name: depth\n          in: query\n          description: Enumeration depth; -1 means fully expand; 0 means no expansion;\n            1..N expands that many subdirectories\n          schema:\n            type: integer\n            default: 0\n      responses:\n        200:\n          description: File exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileModel'\n        400:\n          description: Bad request - not sure this will ever happen\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - file id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        409:\n          description: No idea if we will generate this error code\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/jobs:\n    get:\n      tags:\n        - jobs\n        - repository\n      description: \u003e\n        Returns a list of all of the jobs the caller has access to\n      operationId: enumerateJobs\n      parameters:\n        - name: offset\n          in: query\n          description: The number of items to skip before starting to collect the result\n            set.\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The numbers of items to return.\n          schema:\n            type: integer\n            default: 10\n        - name: direction\n          in: query\n          description: The direction to sort based on job creation time (default is descending).\n          schema:\n            $ref: '#/components/schemas/SqlSortDirection'\n        - name: className\n          in: query\n          description: Filter by the flight's class\n          schema:\n            type: string\n      responses:\n        200:\n          description: List of jobs\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/JobModel'\n  /api/repository/v1/jobs/{id}:\n    get:\n      tags:\n        - jobs\n        - repository\n      description: Retrieve a job's status by id\n      operationId: retrieveJob\n      parameters:\n        - name: id\n          in: path\n          description: A UUID to used to identify an object in the repository\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Redirect for object successful creation\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to see job\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - job id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  /api/repository/v1/jobs/{id}/result:\n    get:\n      tags:\n        - jobs\n        - repository\n      description: Retrieve a job's result by id\n      operationId: retrieveJobResult\n      parameters:\n        - name: id\n          in: path\n          description: A UUID to used to identify an object in the repository\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: Successful responses return the type of model specified by\n            the job; otherwise, ErrorModel\n          content:\n            application/json:\n              schema:\n                type: object\n        202:\n          description: The job is currently running\n          content:\n            application/json:\n              schema:\n                type: object\n  /api/repository/v1/configs/{name}:\n    get:\n      tags:\n        - configs\n        - repository\n      description: Get one configuration\n      operationId: getConfig\n      parameters:\n        - name: name\n          in: path\n          description: name of the configuration to get\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: current configuration\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigModel'\n        404:\n          description: unknown configuration name\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    put:\n      tags:\n        - configs\n        - repository\n      description: \u003e\n        Enable or disable the named fault. Performing the put on a config that\n        is not a fault is an error.\n      operationId: setFault\n      parameters:\n        - name: name\n          in: path\n          description: name of the configuration to\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigEnableModel'\n        required: false\n      responses:\n        204:\n          description: fault was en/dis-abled successfully - no content\n          content: {}\n        400:\n          description: configuration name is not a fault\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: unknown configuration name\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: configEnable\n  /api/repository/v1/configs:\n    get:\n      tags:\n        - configs\n        - repository\n      description: Get all configurations\n      operationId: getConfigList\n      responses:\n        200:\n          description: all configurations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigListModel'\n    put:\n      tags:\n        - configs\n        - repository\n      description: Set the a group of configurations\n      operationId: setConfigList\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigGroupModel'\n        required: false\n      responses:\n        200:\n          description: previous settings\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigListModel'\n        400:\n          description: invalid configuration model\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: unknown configuration name(s) - see errorDetails\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: configModel\n  /api/repository/v1/configs/reset:\n    put:\n      tags:\n        - configs\n        - repository\n      description: Reset the configuration to original settings\n      operationId: resetConfig\n      responses:\n        204:\n          description: configuration reset\n          content: {}\n\n  /api/repository/v1/upgrade:\n    post:\n      tags:\n        - upgrade\n        - repository\n      description: \u003e-\n        Extensible endpoint for triggering upgrade tasks in the data repository.\n        The asynchronous result is UpgradeResponseModel\n      operationId: upgrade\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpgradeModel'\n        required: true\n      responses:\n        200:\n          description: Redirect for upgrade complete\n          headers:\n            location:\n              description: url for the job result\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        202:\n          description: Job status of upgrade job \u0026 url for polling in the response\n            header\n          headers:\n            location:\n              description: url for the job polling\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobModel'\n        400:\n          description: Bad request - invalid upgrade request, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to upgrade\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: upgrade\n\n##############################################################################\n## SEARCH API STANDARD ENDPOINTS\n##############################################################################\n\n  /api/repository/v1/search/{id}/index:\n    post:\n      tags:\n        - search\n        - snapshots\n        - repository\n      description: Create a new search index for a snapshot\n      operationId: createSearchIndex\n      parameters:\n        - name: id\n          in: path\n          description: A UUID to used to identify an object in the repository\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Index to create from SQL\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchIndexRequest'\n        required: true\n      responses:\n        200:\n          description: Return index result\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchIndexModel'\n        400:\n          description: Bad request - invalid id, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to see snapshot\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - snapshot id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /api/repository/v1/search/query:\n    post:\n      tags:\n        - search\n        - snapshots\n        - repository\n      description: Run a query on the metadata of one or more snapshots\n      operationId: querySearchIndices\n      parameters:\n        - name: offset\n          in: query\n          description: The number of results to skip before retrieving the next\n            page\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The number of search results to return\n          schema:\n            type: integer\n            default: 1000\n      requestBody:\n        description: Search query to run against one or more snapshots\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchQueryRequest'\n        required: true\n      responses:\n        200:\n          description: List of search results\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchQueryResultModel'\n        400:\n          description: Bad request - one or more invalid ids, badly formed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        403:\n          description: No permission to see one or more snapshots\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n        404:\n          description: Not found - one or more snapshot ids do not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n##############################################################################\n## DRS STANDARD ENDPOINTS\n##############################################################################\n  /ga4gh/drs/v1/service-info:\n    get:\n      tags:\n        - DataRepositoryService\n      summary: Get information about this implementation.\n      description: 'May return service version and other information. [dd]NOTE: technically,\n        this has been removed from DRS V1.0. It will be added back when there is a\n        common service_info across ga4gh. I don''t expect it to be too different,\n        so just leaving this info call in place.'\n      operationId: GetServiceInfo\n      responses:\n        200:\n          description: Service information returned successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSServiceInfo'\n  /ga4gh/drs/v1/objects/{object_id}:\n    options:\n      tags:\n        - DataRepositoryService\n      summary: Get Authorization info about a DRS Object.\n      description: \u003e-\n        Returns `DRSAuthorizations` that can be used to determine\n        how to authorize requests to GET or POST a `DRSObject`.\n      operationId: OptionsObject\n      parameters:\n        - name: object_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"`DRSAuthorizations` were found successfully\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSAuthorizations'\n        204:\n          description: \"`DRSAuthorizations` are not supported for this object. Default to `None`.\"\n        400:\n          description: The request is malformed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        404:\n          description: The requested `Object` wasn't found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        405:\n          description: \"`DRSAuthorizations` are not supported for this object. Default to `None`.\"\n        500:\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n    get:\n      tags:\n        - DataRepositoryService\n      summary: Get info about an `Object`.\n      description: Returns object metadata, and a list of access methods that can\n        be used to fetch object bytes.\n      operationId: GetObject\n      parameters:\n        - name: object_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: expand\n          in: query\n          description: \u003e-\n            If false and the object_id refers to a bundle, then the ContentsObject array contains only those objects directly contained in the bundle. That is, if the bundle contains other bundles, those other bundles are not recursively included in the result.\n            If true and the object_id refers to a bundle, then the entire set of objects in the bundle is expanded. That is, if the bundle contains another bundles, then those other bundles are recursively expanded and included in the result. Recursion continues through the entire sub-tree of the bundle.\n            If the object_id refers to a blob, then the query parameter is ignored.\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: The `Object` was found successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSObject'\n        202:\n          description: \u003e\n            The operation is delayed and will continue asynchronously. The client should retry this same request after the delay specified by Retry-After header.\n          headers:\n            Retry-After:\n              description: \u003e\n                Delay in seconds. The client should retry this same request after waiting for this duration. To simplify client response processing, this must be an integral relative time in seconds. This value SHOULD represent the minimum duration the client should wait before attempting the operation again with a reasonable expectation of success. When it is not feasible for the server to determine the actual expected delay, the server may return a brief, fixed value instead.\n              schema:\n                type: integer\n                format: int64\n          content: {}\n        400:\n          description: The request is malformed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        401:\n          description: The request is unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        403:\n          description: The requester is not authorized to perform this action.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        404:\n          description: The requested `Object` wasn't found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        500:\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n    post:\n      tags:\n        - DataRepositoryService\n      summary:  Get info about a DrsObject through POST'ing a Passport.\n      description:  Returns object metadata, and a list of access methods that can be used to fetch object bytes.  Method is a POST to accomodate a JWT GA4GH Passport sent in the formData in order to authorize access.\n      operationId: PostObject\n      parameters:\n        - name: object_id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DRSPassportRequestModel'\n        required: true\n      responses:\n        200:\n          description: The `Object` was found successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSObject'\n        202:\n          description: \u003e\n            The operation is delayed and will continue asynchronously. The client should retry this same request after the delay specified by Retry-After header.\n          headers:\n            Retry-After:\n              description: \u003e\n                Delay in seconds. The client should retry this same request after waiting for this duration. To simplify client response processing, this must be an integral relative time in seconds. This value SHOULD represent the minimum duration the client should wait before attempting the operation again with a reasonable expectation of success. When it is not feasible for the server to determine the actual expected delay, the server may return a brief, fixed value instead.\n              schema:\n                type: integer\n                format: int64\n          content: { }\n        400:\n          description: The request is malformed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        401:\n          description: The request is unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        403:\n          description: The requester is not authorized to perform this action.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        404:\n          description: The requested `Object` wasn't found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        500:\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n\n  /ga4gh/drs/v1/objects/{object_id}/access/{access_id}:\n    get:\n      tags:\n        - DataRepositoryService\n      summary: Get a URL for fetching bytes.\n      description: Returns a URL that can be used to fetch the object bytes. This\n        method only needs to be called when using an `AccessMethod` that contains\n        an `access_id` (e.g., for servers that use signed URLs for fetching object\n        bytes).\n      operationId: GetAccessURL\n      parameters:\n        - name: object_id\n          in: path\n          description: An `id` of a Data Object\n          required: true\n          schema:\n            type: string\n        - name: access_id\n          in: path\n          description: An `access_id` from the `access_methods` list of a Data Object\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The access URL was found successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSAccessURL'\n        202:\n          description: \u003e\n            The operation is delayed and will continue asynchronously. The client should retry this same request after the delay specified by Retry-After header.\n          headers:\n            Retry-After:\n              description: \u003e\n                Delay in seconds. The client should retry this same request after waiting for this duration. To simplify client response processing, this must be an integral relative time in seconds. This value SHOULD represent the minimum duration the client should wait before attempting the operation again with a reasonable expectation of success. When it is not feasible for the server to determine the actual expected delay, the server may return a brief, fixed value instead.\n              schema:\n                type: integer\n                format: int64\n          content: {}\n        400:\n          description: The request is malformed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        401:\n          description: The request is unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        403:\n          description: The requester is not authorized to perform this action.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        404:\n          description: The requested access URL wasn't found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        500:\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n    post:\n      tags:\n        - DataRepositoryService\n      summary: Get a URL for fetching bytes through POST'ing a Passport\n      description: \u003e-\n        Returns a URL that can be used to fetch the bytes of a `DrsObject`.\n\n        This method only needs to be called when using an `AccessMethod` that contains an `access_id`\n        (e.g., for servers that use signed URLs for fetching object bytes).\n\n        Method is a POST to accomodate a JWT GA4GH Passport sent in the formData in order to authorize access.\n      operationId: PostAccessURL\n      parameters:\n        - name: object_id\n          in: path\n          description: An `id` of a Data Object\n          required: true\n          schema:\n            type: string\n        - name: access_id\n          in: path\n          description: An `access_id` from the `access_methods` list of a Data Object\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DRSPassportRequestModel'\n        required: true\n      responses:\n        200:\n          description: The access URL was found successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSAccessURL'\n        202:\n          description: \u003e\n            The operation is delayed and will continue asynchronously. The client should retry this same request after the delay specified by Retry-After header.\n          headers:\n            Retry-After:\n              description: \u003e\n                Delay in seconds. The client should retry this same request after waiting for this duration. To simplify client response processing, this must be an integral relative time in seconds. This value SHOULD represent the minimum duration the client should wait before attempting the operation again with a reasonable expectation of success. When it is not feasible for the server to determine the actual expected delay, the server may return a brief, fixed value instead.\n              schema:\n                type: integer\n                format: int64\n          content: {}\n        400:\n          description: The request is malformed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        401:\n          description: The request is unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        403:\n          description: The requester is not authorized to perform this action.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        404:\n          description: The requested access URL wasn't found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\n        500:\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DRSError'\ncomponents:\n  schemas:\n    TableDataType:\n      type: string\n      enum: [ string, boolean, bytes, date, datetime, dirref, fileref, float, float64, integer, int64, numeric, record, text, time, timestamp ]\n      description: \u003e\n        The type of a column in a table.\n    SqlSortDirection:\n      type: string\n      enum: [ asc, desc ]\n      description: \u003e\n        The sort direction of a query result\n    EnumerateSortByParam:\n      type: string\n      enum: [ name, description, created_date ]\n      description: \u003e\n        Fields datasets and snapshots can be sorted by.\n    ObjectNameProperty:\n      maxLength: 63\n      minLength: 1\n      pattern: ^[a-zA-Z0-9][_a-zA-Z0-9]*$\n      type: string\n      description: \u003e\n        Table and column names follow this pattern. This should be used for the name of any object in the\n        system. It enforces BigQuery naming rules except it disallows a leading underscore so we avoid collisions with\n        any extra columns the DR adds. For table and column names, this is shorter than what BigQuery allows.\n    DatasetSnapshotNameProperty:\n      maxLength: 511\n      minLength: 1\n      pattern: ^[a-zA-Z0-9][_a-zA-Z0-9]*$\n      type: string\n      description: \u003e\n        Dataset and snapshot names follow this pattern. It is the same as ObjectNameProperty, but has\n        a greater maxLength.\n    UniqueIdProperty:\n      type: string\n      format: uuid\n      description: \u003e\n        Unique identifier for a dataset, snapshot, etc.\n    ShortIdProperty:\n      pattern: '[A-za-z0-9_\\\\-]{22}'\n      type: string\n      description: \u003e\n        Unique identifier for a flights, jobs, etc.\n    BillingProfileRequestModel:\n      required:\n        - biller\n        - profileName\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        billingAccountId:\n          type: string\n          description: unique identifier of the billing account from Google\n        profileName:\n          type: string\n          description: display name to be used for the profile;\n        biller:\n          type: string\n          description: either “direct” or the reseller of the sub-account that sends\n            the bill (like “on_spend”)\n        description:\n          type: string\n          description: Free text that describes the profile\n        cloudPlatform:\n          $ref: '#/components/schemas/CloudPlatform'\n        tenantId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        subscriptionId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        resourceGroupName:\n          type: string\n          description: an optional resource group name for Azure\n        applicationDeploymentName:\n          type: string\n          description: an optional name for an application deployment for Azure\n    BillingProfileUpdateModel:\n      required:\n        - id\n        - billingAccountId\n        - description\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        billingAccountId:\n          type: string\n          description: Unique identifier of the billing account from Google\n        description:\n          type: string\n          description: Free text that describes the profile\n    BillingProfileModel:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        billingAccountId:\n          type: string\n          description: unique identifier of the billing account from Google\n        profileName:\n          type: string\n          description: display name to be used for the profile;\n        biller:\n          type: string\n          description: either “direct” or the reseller of the sub-account that sends\n            the bill (like “on_spend”)\n        description:\n          type: string\n          description: Free text that describes the profile\n        cloudPlatform:\n          $ref: '#/components/schemas/CloudPlatform'\n        tenantId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        subscriptionId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        resourceGroupName:\n          type: string\n          description: an optional resource group name for Azure\n        applicationDeploymentName:\n          type: string\n          description: an optional name for an application deployment for Azure\n        createdDate:\n          type: string\n          description: Date the profile was created\n        createdBy:\n          type: string\n          description: Identity of the user who originally created the profile\n    EnumerateBillingProfileModel:\n      type: object\n      properties:\n        total:\n          type: integer\n          description: Total number of billing profiles\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/BillingProfileModel'\n      description: \u003e\n        The total number of billing profiles available and a page of profiles\n    DatasetModel:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        name:\n          $ref: '#/components/schemas/DatasetSnapshotNameProperty'\n        description:\n          type: string\n          description: Description of the dataset\n        defaultProfileId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        dataProject:\n          type: string\n          description: Project id of the project where tabular data in BigQuery lives\n        defaultSnapshotId:\n          type: string\n          description: Id of the auto-generated default passthru snapshot\n        schema:\n          $ref: '#/components/schemas/DatasetSpecificationModel'\n        createdDate:\n          type: string\n          description: Date the dataset was created\n        storage:\n          type: array\n          items:\n            $ref: '#/components/schemas/StorageResourceModel'\n        secureMonitoringEnabled:\n          type: boolean\n          default: false\n        phsId:\n          type: string\n          description: PHS ID (DbGap Phenotype Study Identifer) associated with dataset\n        accessInformation:\n          $ref: '#/components/schemas/AccessInfoModel'\n        selfHosted:\n          type: boolean\n          default: false\n          description: denotes whether data files in the dataset are self-hosted or not\n      description: \u003e\n        Complete definition of a dataset.\n    DatasetSummaryModel:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        name:\n          $ref: '#/components/schemas/DatasetSnapshotNameProperty'\n        description:\n          type: string\n          description: Description of the dataset\n        defaultProfileId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        createdDate:\n          type: string\n          description: Date the dataset was created\n        storage:\n          type: array\n          items:\n            $ref: '#/components/schemas/StorageResourceModel'\n        secureMonitoringEnabled:\n          type: boolean\n          default: false\n        cloudPlatform:\n          $ref: '#/components/schemas/CloudPlatform'\n        dataProject:\n          type: string\n          description: The google project of this dataset\n        storageAccount:\n          type: string\n          description: The azure storage account of this dataset\n        phsId:\n          type: string\n          description: PHS ID (DbGap Phenotype Study Identifer) associated with dataset\n        selfHosted:\n          type: boolean\n          default: false\n          description: denotes whether data files in the dataset are self-hosted or not\n      description: \u003e\n        Summary of a dataset.\n    DatasetRequestModel:\n      required:\n        - defaultProfileId\n        - name\n        - schema\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/DatasetSnapshotNameProperty'\n        description:\n          type: string\n          description: Description of the dataset\n        defaultProfileId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        schema:\n          $ref: '#/components/schemas/DatasetSpecificationModel'\n        region:\n          type: string\n        cloudPlatform:\n          $ref: '#/components/schemas/CloudPlatform'\n        enableSecureMonitoring:\n          type: boolean\n          default: false\n        phsId:\n          type: string\n          description: PHS ID (DbGap Phenotype Study Identifer) associated with dataset\n        experimentalSelfHosted:\n          type: boolean\n          default: false\n          description: Create the dataset in self-hosted mode, where TDR does not ingest files, but rather points to\n            files in their original location.\n      description: \u003e\n        Complete definition of a dataset without the id (used to create a dataset)\n    DatasetRequestAccessIncludeModel:\n      type: string\n      description: \u003e\n        Type of information to include in the response\n      enum: [ NONE, SCHEMA, ACCESS_INFORMATION, PROFILE, DATA_PROJECT, STORAGE ]\n    EnumerateDatasetModel:\n      type: object\n      properties:\n        total:\n          type: integer\n          description: Total number of datasets\n        filteredTotal:\n          type: integer\n          description: The number of datasets included in this enumeration\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/DatasetSummaryModel'\n        roleMap:\n          type: object\n          description: \u003e\n            Map of datasets to the calling user's roles.\n            The key is the dataset ID and the value is a list of role names.\n          additionalProperties:\n            type: array\n            items:\n             type: string\n      description: \u003e\n        The total number of datasets available that match the filter criteria and a page of summaries\n    ColumnModel:\n      required:\n        - datatype\n        - name\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/ObjectNameProperty'\n        datatype:\n          $ref: '#/components/schemas/TableDataType'\n        array_of:\n          type: boolean\n          description: if true, make this column an array of type datatype.\n          default: false\n        required:\n          type: boolean\n          description: if true, mark this column as required\n      description: one column of a table\n    TableModel:\n      required:\n        - columns\n        - name\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/ObjectNameProperty'\n        columns:\n          type: array\n          items:\n            $ref: '#/components/schemas/ColumnModel'\n        primaryKey:\n          type: array\n          items:\n            $ref: '#/components/schemas/ObjectNameProperty'\n          description: \u003e\n            Primary key columns names. Any columns listed as a primary key will be marked as required by default.\n        partitionMode:\n          type: string\n          default: none\n          enum:\n            - none\n            - date\n            - int\n        datePartitionOptions:\n          $ref: '#/components/schemas/DatePartitionOptionsModel'\n        intPartitionOptions:\n          $ref: '#/components/schemas/IntPartitionOptionsModel'\n        rowCount:\n          type: integer\n      description: one table in a schema\n    DatePartitionOptionsModel:\n      required:\n        - column\n      type: object\n      properties:\n        column:\n          $ref: '#/components/schemas/ObjectNameProperty'\n      description: Describes how a date partition should be configured.\n    IntPartitionOptionsModel:\n      required:\n        - column\n        - interval\n        - max\n        - min\n      type: object\n      properties:\n        column:\n          $ref: '#/components/schemas/ObjectNameProperty'\n        min:\n          type: integer\n          description: \u003e\n            The smallest value to partition within the target column. Any rows with a value smaller than this will be unpartitioned.\n          format: int64\n        max:\n          type: integer\n          description: \u003e\n            The largest value to partition within the target column. Any rows with a value larger than this will be unpartitioned.\n          format: int64\n        interval:\n          type: integer\n          description: \u003e\n            The size to use when dividing the partitioning range into \"buckets\". (max - min) / (this value) cannot be larger than 4,000.\n          format: int64\n      description: Describes how an int partition should be configured.\n    RelationshipTermModel:\n      required:\n        - column\n        - table\n      type: object\n      properties:\n        table:\n          $ref: '#/components/schemas/ObjectNameProperty'\n        column:\n          $ref: '#/components/schemas/ObjectNameProperty'\n      description: Describes a table and columns for a relationship\n    RelationshipModel:\n      required:\n        - from\n        - name\n        - to\n      type: object\n      properties:\n        name:\n          minLength: 1\n          type: string\n        from:\n          $ref: '#/components/schemas/RelationshipTermModel'\n        to:\n          $ref: '#/components/schemas/RelationshipTermModel'\n      description: \u003e\n        One relationship between two tables. Captures a specific relationship between two tables. By naming the\n        relationships, we can define assets.\n    AssetTableModel:\n      required:\n        - columns\n        - name\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/ObjectNameProperty'\n        columns:\n          type: array\n          items:\n            $ref: '#/components/schemas/ObjectNameProperty'\n      description: \u003e\n        Used in the asset definition to describe a table that is included in the asset. This is used to define\n        the view of the asset table in the snapshot. Columns can be an empty array indicating that all columns\n        should be included.\n    AssetModel:\n      required:\n        - name\n        - rootColumn\n        - rootTable\n        - tables\n      type: object\n      properties:\n        name:\n          minLength: 1\n          type: string\n        tables:\n          type: array\n          items:\n            $ref: '#/components/schemas/AssetTableModel'\n        rootTable:\n          $ref: '#/components/schemas/ObjectNameProperty'\n        rootColumn:\n          $ref: '#/components/schemas/ObjectNameProperty'\n        follow:\n          type: array\n          items:\n            $ref: '#/components/schemas/ObjectNameProperty'\n      description: One asset in the data model. The table list identifies the tables\n        in the asset. The rootTable and rootColumn indicate which value will be used\n        as the unique identifier. The list of relationships provides the instructions\n        for how to connect the tables. Asset tables have to be connected in a relationship\n        hierarchy. So there cannot be two paths to the same table from the root.\n    StorageResourceModel:\n      type: object\n      properties:\n        region:\n          type: string\n        cloudResource:\n          type: string\n        cloudPlatform:\n          $ref: '#/components/schemas/CloudPlatform'\n      description: A model representing the cloud platform, region, and resource of a dataset's\n        infrastructure asset. This is only ever returned to the user, and at this point, is not\n        parsed or pased in as a post body.\n    DatasetSpecificationModel:\n      required:\n        - tables\n      type: object\n      properties:\n        tables:\n          type: array\n          items:\n            $ref: '#/components/schemas/TableModel'\n        relationships:\n          type: array\n          items:\n            $ref: '#/components/schemas/RelationshipModel'\n        assets:\n          type: array\n          items:\n            $ref: '#/components/schemas/AssetModel'\n      description: data model definition\n    DatasetSchemaUpdateModel:\n      type: object\n      properties:\n        description:\n          type: string\n        changes:\n          type: object\n          properties:\n            addTables:\n              type: array\n              items:\n                $ref: '#/components/schemas/TableModel'\n    IngestRequestModel:\n      required:\n        - format\n        - table\n      type: object\n      properties:\n        table:\n          $ref: '#/components/schemas/ObjectNameProperty'\n        path:\n          type: string\n          description: \u003e\n            cloud path to a file in a bucket accessible to data repo (e.g. gs path for GCP\n            datasets or https path for Azure datasets).  Required if the format is `csv` or `json`.\n            Do not specify if the ingest format is `array`\n        records:\n          type: array\n          items:\n            type: object\n            description: \u003e\n              a representation of a record to ingest in the form of `{\"sColumn\":\"string value\", \"nColumn\":123, \"lValue\":[\"a\",\"b\"]...}`\n          description: \u003e\n            an array of json metadata records to ingest\n        format:\n          type: string\n          enum:\n            - csv\n            - json\n            - array\n        load_tag:\n          $ref: '#/components/schemas/LoadTagModel'\n        profile_id:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        max_bad_records:\n          type: integer\n          default: 0\n          description: max number of bad records to skip; applies to all ingest formats\n        max_failed_file_loads:\n          type: integer\n          default: 0\n          description: max number of failed file loads before stopping; if -1, allow any number of errors\n        ignore_unknown_values:\n          type: boolean\n          description: skip extra data; applies to all ingest formats\n          default: true\n        csv_field_delimiter:\n          type: string\n          description: field separator\n          default: ','\n        csv_quote:\n          type: string\n          description: quoting character\n          default: '\"'\n        csv_skip_leading_rows:\n          type: integer\n          description: number of header rows to skip\n        csv_allow_quoted_newlines:\n          type: boolean\n          default: true\n        csv_null_marker:\n          type: string\n          default: \"\"\n        csv_generate_row_ids:\n          type: boolean\n          description: Whether the data repo should generate datarepo_row_ids on CSV ingest. Defaults to true.\n          default: true\n        resolve_existing_files:\n          type: boolean\n          default: false\n          description: \u003e\n            When true, the combined ingest will look for files that already exist and substitute their\n            fileIds in instead of ingesting duplicate files.\n        transactionId:\n          type: string\n          format: uuid\n          description: \u003e\n            If specified, the ingested data will remain invisible to users and snapshot creation until\n            the transaction in question is committed. If the transaction is rolled back, then the changes\n            from this ingest and any other operations using this transaction will be undone.\n        updateStrategy:\n          type: string\n          enum:\n            - append\n            - replace\n          description: \u003e\n            Approach for how to treat updates to the target table:\n             * `append` - Default: only ever insert rows, regardless of whether or not the primary key value exists\n             * `replace` - If a primary key is present on the table, treat rows with matching primary keys\n                         as updates. If duplicates IDs are found in your ingest, the ingest job\n                         will fail. Note: the full new record must be specified.\n      description: \u003e\n        Request to ingest data from a file in GCS into a table in a dataset.\n        The ingest source must be readable by the DR manager.\n        TODO: other input forms\n    IngestResponseModel:\n      required:\n        - path\n        - row_count\n        - table\n      type: object\n      properties:\n        dataset_id:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        dataset:\n          $ref: '#/components/schemas/DatasetSnapshotNameProperty'\n        table:\n          $ref: '#/components/schemas/ObjectNameProperty'\n        path:\n          type: string\n        load_tag:\n          $ref: '#/components/schemas/LoadTagModel'\n        row_count:\n          type: integer\n          description: number of rows successfully ingested\n          format: int64\n        bad_row_count:\n          type: integer\n          description: number of bad rows skipped\n          format: int64\n        load_result:\n          $ref: '#/components/schemas/BulkLoadArrayResultModel'\n      description: \u003e\n        Response from performing an ingest.\n    TransactionCreateModel:\n      type: object\n      properties:\n        description:\n          type: string\n          description: optional description to give your transaction\n    TransactionModel:\n      required:\n        - id\n        - created_at\n        - created_by\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        status:\n          type: string\n          enum:\n            - active\n            - committed\n            - rolled_back\n        lock:\n          type: string\n          description: the id of the flight that is locking the transaction or empty if the transaction is not locked\n        description:\n          type: string\n          description: the transaction's description, if one was specified\n        created_at:\n          type: string\n          description: timestamp of transaction creation in RFC3339\n        created_by:\n          type: string\n          description: the creator of the transaction\n        terminated_at:\n          type: string\n          description: timestamp of transaction creation in RFC3339\n        terminated_by:\n          type: string\n          description: the creator of the transaction\n    TransactionCloseModel:\n      type: object\n      properties:\n        mode:\n          type: string\n          enum:\n            - commit\n            - rollback\n    FileLoadModel:\n      required:\n        - source_path\n        - target_path\n      type: object\n      properties:\n        source_path:\n          type: string\n          description: gs URL of the source file to load\n        target_path:\n          type: string\n          description: \u003e\n            Full path within the dataset where the file should be placed.\n            The path must start with /.\n        mime_type:\n          type: string\n          description: \u003e-\n            A string providing the mime-type of the Data Object.\n            For example, \"application/json\".\n        profileId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        loadTag:\n          $ref: '#/components/schemas/LoadTagModel'\n        description:\n          type: string\n          description: A human readable description of the contents of the Data Object.\n      description: \u003e\n        Information needed to copy a file from a source bucket into the\n        dataset bucket.\n        Eventually, this will include attributes of the storage including\n        billing, temperature, geography, etc. But for now...\n    SnapshotPreviewModel:\n      type: object\n      properties:\n        result:\n          type: array\n          items:\n            type: object\n          description: Preview data of a snapshot table\n      description: \u003e\n        A preview of a snapshot table\n    FileModel:\n      type: object\n      properties:\n        fileId:\n          type: string\n          description: Unique id of the filesystem object within the dataset\n        collectionId:\n          type: string\n          description: Id of the dataset or snapshot directory describing the object\n        path:\n          type: string\n          description: full path of the file in the dataset\n        size:\n          type: integer\n          description: \u003e\n            Always present for files - the file size in bytes\n            Present for directories in snapshots - sum of sizes of objects in a directory\n          format: int64\n        checksums:\n          type: array\n          description: \u003e\n            Always present for files - checksums; always includes crc32c. May include md5.\n            Present for directories in snapshots - see DRS spec for algorithm for combining checksums of\n            underlying directory contents.\n          items:\n            $ref: '#/components/schemas/DRSChecksum'\n        created:\n          type: string\n          description: timestamp of object creation in RFC3339\n        description:\n          type: string\n          description: Human readable description of the file\n        fileType:\n          $ref: '#/components/schemas/FileModelType'\n        fileDetail:\n          $ref: '#/components/schemas/FileDetailModel'\n        directoryDetail:\n          $ref: '#/components/schemas/DirectoryDetailModel'\n      description: A file or directory in the data repository\n    FileModelType:\n      type: string\n      enum:\n        - file\n        - directory\n    FileDetailModel:\n      type: object\n      properties:\n        datasetId:\n          type: string\n          description: Id of the dataset that holds the file\n        mimeType:\n          type: string\n        accessUrl:\n          type: string\n          description: URL of the file in cloud storage\n        loadTag:\n          $ref: '#/components/schemas/LoadTagModel'\n      description: File in the data repository\n    DirectoryDetailModel:\n      type: object\n      properties:\n        enumerated:\n          type: boolean\n          description: \u003e\n            Indicates whether or not the directory has been enumerated. True means the directory has been enumerated.\n            The contents property describes the contents. An empty array indicates and empty directory. False means\n            the directory has not been enumerated. If the contents property is present, it should be ignored.\n        contents:\n          type: array\n          description: Array of directory contents\n          items:\n            $ref: '#/components/schemas/FileModel'\n      description: Directory in the data repository\n    LoadTagModel:\n      type: string\n      description: \u003e\n        client-specified tag for a data or file load. If no id is specified, we use the\n        string form of the job create time as the tag.\n    BulkLoadRequestModel:\n      required:\n        - loadControlFile\n        - loadTag\n        - profileId\n      type: object\n      properties:\n        profileId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        loadTag:\n          $ref: '#/components/schemas/LoadTagModel'\n        maxFailedFileLoads:\n          type: integer\n          default: 0\n          description: max number of failed file loads before stopping; if -1, allow any number of errors\n        loadControlFile:\n          type: string\n          description: \u003e-\n            gs:// path to a text file in a bucket. The file must be accessible to the DR\n            Manager. Each line of the file is interpreted as the JSON form of one\n            BulkLoadFileModel. For example, one line might look like\n              '{ \"sourcePath\":\"gs:/bucket/path/file\", \"targetPath\":\"/target/path/file\" }'\n      description: \u003e-\n        Body of a bulk file load request. This variant of a bulk load provides the set of\n        files to be loaded in a file containing the JSON form of a BulkLoadFileModel.\n        A summary of the load results is returned in the async response (BulkLoadResponseModel)\n        Per-file details of a bulk load are always stored into the dataset tabular data store\n        and can be retrieved directly from there, or via the GET .../bulk/{loadTag}\n        They can be cleaned up with the DELETE .../bulk/{loadTag}\n    BulkLoadArrayRequestModel:\n      required:\n        - loadArray\n        - loadTag\n        - profileId\n      type: object\n      properties:\n        profileId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        loadTag:\n          $ref: '#/components/schemas/LoadTagModel'\n        maxFailedFileLoads:\n          type: integer\n          default: 0\n          description: max number of failed file loads before stopping; if -1, allow any number of errors\n        loadArray:\n          type: array\n          description: Array files to load\n          items:\n            $ref: '#/components/schemas/BulkLoadFileModel'\n      description: \u003e-\n        Body of a bulk file load request. This variant of a bulk load provides the set of\n        files to be loaded in the body of the request. Both the summary of the load and the\n        per-file details of the bulk load returned in the async response (BulkLoadArrayResponseModel)\n        Per-file details of a bulk load are also stored into the dataset tabular data store\n        and can be retrieved directly from there, or via the GET .../bulk/{loadTag}\n        They can be cleaned up with the DELETE .../bulk/{loadTag}\n    BulkLoadFileModel:\n      required:\n        - sourcePath\n        - targetPath\n      type: object\n      properties:\n        sourcePath:\n          type: string\n          description: gs URL of the source file to load\n        targetPath:\n          type: string\n          description: \u003e\n            Full path within the dataset where the file should be placed.\n            The path must start with /.\n        mimeType:\n          type: string\n          description: \u003e-\n            A string providing the mime-type of the Data Object.\n            For example, \"application/json\".\n        description:\n          type: string\n          description: A human readable description of the contents of the Data Object.\n      description: Describes one file within a bulk file load\n    BulkLoadResultModel:\n      type: object\n      properties:\n        loadTag:\n          $ref: '#/components/schemas/LoadTagModel'\n        jobId:\n          type: string\n        totalFiles:\n          type: integer\n        succeededFiles:\n          type: integer\n        failedFiles:\n          type: integer\n        notTriedFiles:\n          type: integer\n      description: Returned when the bulk file load job finishes.\n    BulkLoadArrayResultModel:\n      type: object\n      properties:\n        loadSummary:\n          $ref: '#/components/schemas/BulkLoadResultModel'\n        loadFileResults:\n          type: array\n          items:\n            $ref: '#/components/schemas/BulkLoadFileResultModel'\n      description: Returned when the bulk file load job finishes.\n    BulkLoadFileResultModel:\n      required:\n        - sourcePath\n        - targetPath\n      type: object\n      properties:\n        sourcePath:\n          type: string\n          description: gs URL of the source file to load\n        targetPath:\n          type: string\n          description: \u003e\n            Full path within the dataset where the file should be placed.\n            The path must start with /.\n        state:\n          $ref: '#/components/schemas/BulkLoadFileState'\n        fileId:\n          type: string\n          description: The fileId of the loaded file; non-null if state is SUCCEEDED\n        error:\n          type: string\n          description: The error message if state is FAILED\n      description: Describes the status result of one file within a bulk file load\n    BulkLoadHistoryModel:\n      required:\n        - sourcePath\n        - targetPath\n      type: object\n      properties:\n        sourcePath:\n          type: string\n          description: gs URL of the source file to load\n        targetPath:\n          type: string\n          description: \u003e\n            Full path within the dataset where the file should be placed.\n            The path must start with /.\n        state:\n          $ref: '#/components/schemas/BulkLoadFileState'\n        fileId:\n          type: string\n          description: The fileId of the loaded file; non-null if state is SUCCEEDED\n        checksumCRC:\n          type: string\n          description: The checksum crc of the loaded file; non-null if state is SUCCEEDED\n        checksumMD5:\n          type: string\n          description: The checksum mD5 of the loaded file; non-null if state is SUCCEEDED\n        error:\n          type: string\n          description: The error message if state is FAILED\n      description: Describes metadata about a file during a bulk load\n    BulkLoadHistoryModelList:\n      type: object\n      properties:\n        total:\n          type: integer\n          description: Total number of results\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/BulkLoadHistoryModel'\n    BulkLoadFileState:\n      type: string\n      enum:\n        - succeeded\n        - failed\n        - not_tried\n        - running\n    SnapshotRequestModel:\n      required:\n        - contents\n        - name\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/DatasetSnapshotNameProperty'\n        description:\n          type: string\n          description: Description of the snapshot\n        consentCode:\n          type: string\n          description: Consent code together with PHS Id that will determine user access\n        contents:\n          type: array\n          items:\n            $ref: '#/components/schemas/SnapshotRequestContentsModel'\n        readers:\n          type: array\n          items:\n            type: string\n        profileId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n      description: \u003e\n        Request for creating a snapshot.\n        For now, the API only supports snapshots defined as a single dataset asset and\n        row ids for the root table of that asset. The snapshot has exactly the tables\n        and columns of the asset. An optional list of users can be provided to set as\n        readers on the snapshot.\n        In the future, we will need to extend this to handle cross-dataset snapshots\n        from disparate assets, so we will need to support column and datatype\n        mapping from asset tables to the target snapshot tables.\n    SnapshotRequestContentsModel:\n      required:\n        - datasetName\n        - mode\n      type: object\n      properties:\n        datasetName:\n          $ref: '#/components/schemas/DatasetSnapshotNameProperty'\n        mode:\n          type: string\n          enum:\n            - byAsset\n            - byFullView\n            - byQuery\n            - byRowId\n        assetSpec:\n          $ref: '#/components/schemas/SnapshotRequestAssetModel'\n        querySpec:\n          $ref: '#/components/schemas/SnapshotRequestQueryModel'\n        rowIdSpec:\n          $ref: '#/components/schemas/SnapshotRequestRowIdModel'\n      description: \u003e\n        The contents specifies the source of the data (dataset and asset)\n        and the rows to include (field and rootValues).\n        TODO: field will move the asset object; it is here as a stepping stone\n    SnapshotRequestAssetModel:\n      required:\n        - assetName\n        - rootValues\n      type: object\n      properties:\n        assetName:\n          $ref: '#/components/schemas/ObjectNameProperty'\n        rootValues:\n          type: array\n          items:\n            type: string\n      description: \u003e\n        The datasource identifies the dataset and asset from which to source the data.\n    SnapshotRequestQueryModel:\n      required:\n        - assetName\n        - query\n      type: object\n      properties:\n        assetName:\n          $ref: '#/components/schemas/ObjectNameProperty'\n        query:\n          type: string\n      description: \u003e\n        A specification of the query to go into a snapshot.\n    SnapshotRequestRowIdModel:\n      required:\n        - tables\n      type: object\n      properties:\n        tables:\n          type: array\n          items:\n            $ref: '#/components/schemas/SnapshotRequestRowIdTableModel'\n      description: \u003e\n        Identifies the list of tables + columns along with the row ids to be included in the snapshot\n    SnapshotRequestRowIdTableModel:\n      required:\n        - columns\n        - rowIds\n        - tableName\n      type: object\n      properties:\n        tableName:\n          $ref: '#/components/schemas/ObjectNameProperty'\n        columns:\n          type: array\n          items:\n            $ref: '#/components/schemas/ObjectNameProperty'\n        rowIds:\n          type: array\n          items:\n            $ref: '#/components/schemas/UniqueIdProperty'\n      description: \u003e\n        A specification of a table, columns, and row ids to go into a snapshot.\n    SnapshotRetrieveIncludeModel:\n      type: string\n      description: \u003e\n        Type of information to include in the response\n      enum: [ NONE, SOURCES, TABLES, RELATIONSHIPS, ACCESS_INFORMATION, PROFILE, DATA_PROJECT, CREATION_INFORMATION ]\n    SnapshotSummaryModel:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        name:\n          $ref: '#/components/schemas/DatasetSnapshotNameProperty'\n        description:\n          type: string\n          description: Description of the snapshot\n        createdDate:\n          type: string\n          description: Date the snapshot was created\n        profileId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        storage:\n          type: array\n          items:\n            $ref: '#/components/schemas/StorageResourceModel'\n        secureMonitoringEnabled:\n          type: boolean\n          default: false\n        consentCode:\n          type: string\n          description: Consent code together with PHS Id that will determine user access\n        phsId:\n          type: string\n          description: PHS ID (DbGap Phenotype Study Identifer) associated with dataset\n        cloudPlatform:\n          $ref: '#/components/schemas/CloudPlatform'\n        dataProject:\n          type: string\n          description: The google project of this snapshot\n        storageAccount:\n          type: string\n          description: The azure storage account of this snapshot\n        selfHosted:\n          type: boolean\n          description: Denotes whether the data files in this snapshot are self hosted or not\n      description: \u003e\n        summary of snapshot\n    EnumerateSnapshotModel:\n      type: object\n      properties:\n        total:\n          type: integer\n          description: Total number of snapshots\n        filteredTotal:\n          type: integer\n          description: The number of snapshots included in this enumeration\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/SnapshotSummaryModel'\n        roleMap:\n          type: object\n          description: \u003e\n            Map of snapshots to the calling user's roles.\n            The key is the snapshot ID and the value is a list of role names.\n          additionalProperties:\n            type: array\n            items:\n              type: string\n      description: \u003e\n        The total number of snapshots available that match the criteria and a page of summaries\n    SnapshotModel:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        name:\n          $ref: '#/components/schemas/DatasetSnapshotNameProperty'\n        description:\n          type: string\n          description: Description of the snapshot\n        createdDate:\n          type: string\n          description: Date the snapshot was created\n        consentCode:\n          type: string\n          description: Consent code together with PHS Id that will determine user access\n        source:\n          type: array\n          items:\n            $ref: '#/components/schemas/SnapshotSourceModel'\n        tables:\n          type: array\n          items:\n            $ref: '#/components/schemas/TableModel'\n        relationships:\n          type: array\n          items:\n            $ref: '#/components/schemas/RelationshipModel'\n        profileId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        dataProject:\n          type: string\n          description: Project id of the snapshot data project\n        accessInformation:\n          $ref: '#/components/schemas/AccessInfoModel'\n        creationInformation:\n          $ref: '#/components/schemas/SnapshotRequestContentsModel'\n      description: \u003e\n        SnapshotModel returns detailed data about an existing snapshot.\n    SnapshotExportResponseModel:\n      type: object\n      properties:\n        snapshot:\n          $ref: '#/components/schemas/SnapshotModel'\n        validatedPrimaryKeys:\n          type: boolean\n        format:\n          type: object\n          properties:\n            parquet:\n              type: object\n              properties:\n                location:\n                  type: object\n                  properties:\n                    tables:\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          name:\n                            type: string\n                            description: \"Name of the table exported\"\n                          paths:\n                            type: array\n                            items:\n                              type: string\n                              description: \"path to a parquet file for a table\"\n                manifest:\n                  type: string\n                  description: \"path to manifest file detailing paths to parquet files\"\n            workspace:\n              type: object\n              properties:\n                namespace:\n                  type: string\n                  description: \"Workspace namespace the snapshot was exported to\"\n                name:\n                  type: string\n                  description: \"Workspace name the snapshot was exported to\"\n                link:\n                  type: string\n                  description: \"Link to the workspace the snapshot was exported to\"\n    AccessInfoModel:\n      type: object\n      description: \u003e\n        How to access the metadata for a snapshot or dataset\n      properties:\n        bigQuery:\n          $ref: '#/components/schemas/AccessInfoBigQueryModel'\n        parquet:\n          $ref: '#/components/schemas/AccessInfoParquetModel'\n    AccessInfoBigQueryModel:\n      description: \u003e\n        General information on where snapshot or dataset tabular data lives in BigQuery\n      type: object\n      required:\n        - datasetName\n        - datasetId\n        - projectId\n        - link\n        - tables\n      properties:\n        datasetName:\n          type: string\n          description: \u003e\n            Name of the BigQuery dataset where snapshot or dataset tabular data lives\n        datasetId:\n          type: string\n          description: \u003e\n            Unique ID of the BigQuery dataset where snapshot or dataset tabular data lives\n        projectId:\n          type: string\n          description: \u003e\n            Project id of the project where tabular data in BigQuery lives\n        link:\n          type: string\n          description: \u003e\n            The link to access the BigQuery dataset UI in Google Cloud console\n        tables:\n          type: array\n          description: \u003e\n            Information on each table in the BigQuery dataset\n          items:\n            $ref: '#/components/schemas/AccessInfoBigQueryModelTable'\n    AccessInfoBigQueryModelTable:\n      type: object\n      description: \u003e\n        Information on a snapshot or dataset table in a BigQuery dataset\n      required:\n        - name\n        - id\n        - sampleQuery\n        - qualifiedName\n      properties:\n        name:\n          type: string\n          description: \u003e\n            The name of the BigQuery table\n        id:\n          type: string\n          description: \u003e\n            The unique id of the BigQuery table\n        qualifiedName:\n          type: string\n          description: \u003e\n            The fully qualified name of the BigQuery table\n        link:\n          type: string\n          description: \u003e\n            The link to access the BigQuery table UI in Google Cloud console\n        sampleQuery:\n          type: string\n          description: \u003e\n            An example query that can be used to select data from this table\n    AccessInfoParquetModel:\n      description: \u003e\n        General information on where snapshot or dataset tabular data lives in Azure\n      type: object\n      required:\n        - datasetName\n        - datasetId\n        - storageAccountId\n        - url\n        - sasToken\n        - tables\n      properties:\n        datasetName:\n          type: string\n          description: \u003e\n            Name of the Azure dataset where snapshot or dataset tabular data lives\n        datasetId:\n          type: string\n          description: \u003e\n            Unique ID of the Azure dataset where snapshot or dataset tabular data lives\n        storageAccountId:\n          type: string\n          description: \u003e\n            Project id of the project where tabular data in Azure lives\n        url:\n          type: string\n          description: \u003e\n            The link to access all of the tabular data for this dataset or snapshot\n        sasToken:\n          type: string\n          description: \u003e\n            A short lived SAS token to access all of the tabular data for this dataset\n        tables:\n          type: array\n          description: \u003e\n            Information on each table in the Azure dataset\n          items:\n            $ref: '#/components/schemas/AccessInfoParquetModelTable'\n    AccessInfoParquetModelTable:\n      type: object\n      description: \u003e\n        Information on a snapshot or dataset table in a Azure dataset\n      required:\n        - name\n        - url\n        - sasToken\n      properties:\n        name:\n          type: string\n          description: \u003e\n            The name of the dataset table\n        url:\n          type: string\n          description: \u003e\n            The link to access the container that stores parquet files for this table\n        sasToken:\n          type: string\n          description: \u003e\n            A short lived SAS token to access the parquet files for this table\n    SnapshotSourceModel:\n      required:\n        - dataset\n      type: object\n      properties:\n        dataset:\n          $ref: '#/components/schemas/DatasetSummaryModel'\n        asset:\n          $ref: '#/components/schemas/ObjectNameProperty'\n      description: \u003e\n        SnapshotSourceModel returns data about the source for an existing snapshot\n    JobModel:\n      required:\n        - id\n        - job_status\n        - status_code\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/ShortIdProperty'\n        description:\n          type: string\n          description: Description of the job's flight from description flight input\n            parameter\n        job_status:\n          type: string\n          description: Status of job\n          enum:\n            - running\n            - succeeded\n            - failed\n        status_code:\n          type: integer\n          description: HTTP code\n        submitted:\n          type: string\n          description: Timestamp when the flight was created\n        completed:\n          type: string\n          description: Timestamp when the flight was completed; not present if not\n            complete\n        class_name:\n          type: string\n          description: Class name of the flight\n      description: \u003e\n        Status of job\n    ErrorModel:\n      required:\n        - message\n      type: object\n      properties:\n        message:\n          type: string\n        errorDetail:\n          type: array\n          items:\n            type: string\n      description: \u003e\n        Representation of an error that occurred while processing a request.\n        Some errors provide error details. For example, validation of input may report several problems.\n        Each of those are reported in a separate error detail.\n    DeleteResponseModel:\n      type: object\n      properties:\n        objectState:\n          type: string\n          enum:\n            - deleted\n            - not_found\n      description: \u003e\n        Returns the state of the object of the deletion\n    PolicyMemberRequest:\n      required:\n        - email\n      type: object\n      properties:\n        email:\n          type: string\n      description: \u003e\n        email of user or group to add to policy\n    SamPolicyModel:\n      type: object\n      properties:\n        name:\n          type: string\n        members:\n          type: array\n          items:\n            type: string\n        memberPolicies:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourcePolicyModel'\n      description: \u003e\n        Describes a policy from Sam, with member policies\n    PolicyModel:\n      type: object\n      properties:\n        name:\n          type: string\n        members:\n          type: array\n          items:\n            type: string\n      description: \u003e\n        Describes a policy\n    ResourcePolicyModel:\n      type: object\n      properties:\n        policyEmail:\n          type: string\n        policyName:\n          type: string\n        resourceId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        resourceTypeName:\n          type: string\n    WorkspacePolicyModel:\n      type: object\n      properties:\n        workspaceId:\n          $ref: '#/components/schemas/UniqueIdProperty'\n        workspaceName:\n          type: string\n        workspaceNamespace:\n          type: string\n        workspaceLink:\n          type: string\n        workspacePolicies:\n          type: array\n          items:\n            $ref: '#/components/schemas/PolicyModel'\n    PolicyResponse:\n      type: object\n      properties:\n        policies:\n          type: array\n          items:\n            $ref: '#/components/schemas/PolicyModel'\n        workspaces:\n          type: array\n          items:\n            $ref: '#/components/schemas/WorkspacePolicyModel'\n      description: \u003e\n        email of user or group to add to policy\n    DataDeletionRequest:\n      required:\n        - deleteType\n        - specType\n      type: object\n      properties:\n        deleteType:\n          type: string\n          enum:\n            - soft\n        transactionId:\n          type: string\n          format: uuid\n          description: \u003e\n            If specified, the deleted data will remain visible to users and snapshot creation until\n            the transaction in question is committed. If the transaction is rolled back, then the changes\n            from this delete and any other operations using this transaction will be undone.\n        specType:\n          type: string\n          enum:\n            - gcsFile\n            - jsonArray\n        tables:\n          type: array\n          items:\n            $ref: '#/components/schemas/DataDeletionTableModel'\n      description: \u003e\n        a container holding a specification for how to delete tabular data in one or more tables\n    DataDeletionTableModel:\n      required:\n        - tableName\n      type: object\n      properties:\n        tableName:\n          type: string\n          description: the name of a table in the dataset\n        gcsFileSpec:\n          $ref: '#/components/schemas/DataDeletionGcsFileModel'\n        jsonArraySpec:\n          $ref: '#/components/schemas/DataDeletionJsonArrayModel'\n      description: \u003e\n        a specification for how to delete tabular data in one table\n    DataDeletionGcsFileModel:\n      required:\n        - fileType\n        - path\n      type: object\n      properties:\n        fileType:\n          type: string\n          enum:\n            - csv\n        path:\n          type: string\n          description: a gs://path/to/a/file that can include a wildcard (*)\n      description: \u003e\n        a specification of a gcs file containing row ids to delete\n    DataDeletionJsonArrayModel:\n      required:\n        - rowIds\n      type: object\n      properties:\n        rowIds:\n          type: array\n          items:\n            type: string\n            format: uuid\n      description: \u003e\n        a specification of row ids to delete\n    UserStatusInfo:\n      required:\n        - enabled\n        - userEmail\n        - userSubjectId\n      type: object\n      properties:\n        userSubjectId:\n          type: string\n          description: user id\n        userEmail:\n          type: string\n          description: user email\n        enabled:\n          type: boolean\n          description: true if the user is enabled in ldap\n      description: \"\"\n    RepositoryStatusModel:\n      required:\n        - ok\n        - systems\n      type: object\n      properties:\n        ok:\n          type: boolean\n          description: status of this service\n        systems:\n          type: object\n          additionalProperties:\n            type: object\n            properties:\n              ok:\n                type: boolean\n              critical:\n                type: boolean\n              message:\n                type: string\n      description: Returns the status of monitored subsystems.\n    RepositoryConfigurationModel:\n      type: object\n      properties:\n        clientId:\n          type: string\n          description: the Oauth client id for the repository\n        oidcClientId:\n          type: string\n          description: the Oauth client id for the OpenID Connect config for the repository\n        activeProfiles:\n          type: array\n          description: the active profiles for this instance\n          items:\n            type: string\n        semVer:\n          type: string\n          description: the semantic version of the data repository\n        gitHash:\n          type: string\n          description: the git hash of the data repository\n        terraUrl:\n          type: string\n          description: the url to the corresponding terra environment\n        samUrl:\n          type: string\n          format: uri\n          description: the URI of SAM this instance uses\n        authorityEndpoint:\n          type: string\n          format: uri\n          description: the URI of oauth authority for the UI to use (e.g. .well-known/openid-configuration gets appended to it)\n    ConfigModel:\n      type: object\n      properties:\n        name:\n          type: string\n          description: name of the configuration\n        configType:\n          type: string\n          enum:\n            - fault\n            - parameter\n            - logging\n        fault:\n          $ref: '#/components/schemas/ConfigFaultModel'\n        parameter:\n          $ref: '#/components/schemas/ConfigParameterModel'\n      description: \u003e\n        There are three types of configurations: faults, parameters, and logging.\n        Due to the way swagger works, we make a property for each type, but only\n        the property that matches the type enumeration will be processed.\n    ConfigFaultModel:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n          description: \u003e\n            If the fault is enabled, then is in effect. Fault points cause insert\n            faults. Typical usage is that faults are disabled on system start and explicitly\n            enabled by test code or via the setFault endpoint.\n        faultType:\n          type: string\n          description: \u003e\n            A simple fault has no parameters. It is just enabled or disabled. This type of\n            fault is typically used when the desired behavior of the fault is too complex\n            for expression in the fault types and custom code is needed to get the right\n            failure behavior.\n\n            A counted fault is used to insert some number of faults in a pattern. See the\n            ConfigFaultCountedModel for details.\n          enum:\n            - simple\n            - counted\n        counted:\n          $ref: '#/components/schemas/ConfigFaultCountedModel'\n      description: Fault control parameters\n    ConfigFaultCountedModel:\n      type: object\n      properties:\n        skipFor:\n          type: integer\n          description: number of fault tests to skip before beginning fault insertion\n        insert:\n          type: integer\n          description: total number of times to insert the fault; -1 means insert\n            forever\n        rate:\n          type: integer\n          description: \u003e\n            insert a fault rate percent of the time. If rate is 100, the\n            fault will always be inserted regardless of rate.\n        rateStyle:\n          type: string\n          description: \u003e\n            fixed style means insert the fault; skip for rate-1; ...\n            random style means randomly insert the fault with probability of 1:\u003crate\u003e\n          enum:\n            - fixed\n            - random\n      description: \u003e\n        Counted fault is used to insert a fixed number of faults. A \"fault test\" is one\n        call to the fault manager for a named fault. The skipFor lets you get the system to\n        a certain stable point where you want to begin inserting faults. Insert gives the\n        total number of faults to trigger. The rate gives the percentage of the time to\n        insert the fault. A value of 50 would insert the fault half\n        the time. A value of 20 would insert the fault 20% of the time . The rateStyle\n        describes whether the fault will be fixed or random. In our 20 example, if the rate style\n        is fixed, the fault would be skipped 4 times, inserted once, skipped 4 times, inserted once, etc.\n        It uses integer math - you've been warned. If the rate style is random, a random number\n        is generated to determine whether the fault is inserted with a probability of 0.2.\n    ConfigParameterModel:\n      type: object\n      properties:\n        value:\n          type: string\n          description: \u003e\n            Configuration parameters are always passed as strings and converted within\n            the service. That keeps the JSON simple. Sending in specific types doesn't\n            help much, because there still might be a mismatch between the type passed in\n            and the type required.\n      description: The value of the parameter\n    ConfigGroupModel:\n      type: object\n      properties:\n        label:\n          type: string\n          description: string to be logged with the settings to identify this set\n        group:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigModel'\n      description: A group of ConfigModel with a label for logging\n    ConfigListModel:\n      type: object\n      properties:\n        total:\n          type: integer\n          description: Total number of configs\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigModel'\n      description: Result list of configuration settings\n    ConfigEnableModel:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n          description: whether to enable (default) or disable the fault\n          default: true\n      description: Control whether a fault is enabled\n\n    UpgradeModel:\n      required:\n        - upgradeName\n        - upgradeType\n      type: object\n      properties:\n        upgradeName:\n          type: string\n          description: Unique name for the upgrade\n        upgradeType:\n          type: string\n          description: Enumeration to allow different kinds upgrades\n          enum:\n            - custom\n        customName:\n          type: string\n          description: \u003e-\n            Name of custom upgrade to launch. Only used when upgradeType is custom.\n        customArgs:\n          description: \u003e-\n            Array of string arguments to the custom upgrade. Only used when upgradeType is custom.\n          type: array\n          items:\n            type: string\n\n    UpgradeResponseModel:\n      type: object\n      properties:\n        upgradeName:\n          type: string\n          description: Unique name for the upgrade\n        startTime:\n          type: string\n          description: Timestamp the upgrade was started\n        endTime:\n          type: string\n          description: Timestamp the upgrade completed\n\n    CloudPlatform:\n      type: string\n      enum: [ gcp, azure ]\n      default: gcp\n      description: Cloud platforms supported by TDR.\n\n    ##############################################################################\n    ## SEARCH API STANDARD MODELS\n    ##############################################################################\n    SearchIndexRequest:\n      required:\n        - sql\n      type: object\n      properties:\n        sql:\n          type: string\n          description: \u003e\n            SQL to index BigQuery columns for searching\n    SearchIndexModel:\n      type: object\n      properties:\n        indexSummary:\n          type: string\n          description: Summary of this index for searching\n    SearchMetadataModel:\n      type: object\n      properties:\n        metadataSummary:\n          type: string\n          description: Summary of this metadata for searching\n    SearchQueryRequest:\n      required:\n        - query\n      type: object\n      properties:\n        snapshotIds:\n          type: array\n          items:\n            $ref: '#/components/schemas/UniqueIdProperty'\n        query:\n          type: string\n          description: \u003e\n            Query to search against snapshot indices\n    SearchQueryResultModel:\n      type: object\n      properties:\n        result:\n          type: array\n          items:\n            type: object\n            additionalProperties:\n              type: string\n          description: Results that match the search criteria\n      description: \u003e\n        The available search results that match the filter criteria\n    SearchMetadataResponse:\n      type: object\n      properties:\n        result:\n          type: array\n          items:\n            type: object\n      description: List of snapshot metadata\n\n    ##############################################################################\n    ## DRS STANDARD MODELS\n    ##############################################################################\n    DRSChecksum:\n      required:\n        - checksum\n      type: object\n      properties:\n        checksum:\n          type: string\n          description: The hex-string encoded checksum for the data\n        type:\n          type: string\n          description: \u003e-\n            The digest method used to create the checksum. If left unspecified md5\n            will be assumed.\n\n            possible values:\n            md5                # most blob stores provide a checksum using this\n            etag               # multipart uploads to blob stores\n            sha256\n            sha512\n    DRSObject:\n      required:\n        - checksums\n        - id\n        - self_uri\n        - size\n      type: object\n      properties:\n        id:\n          type: string\n          description: An identifier unique to this `Object`.\n        name:\n          type: string\n          description: \u003e-\n            A string that can be used to name an `Object`.\n            This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_].\n            See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].\n        self_uri:\n          type: string\n          description: \u003e-\n            A drs:// URI, as defined in the DRS documentation, that tells clients how to access this object.\n            The intent of this field is to make DRS objects self-contained, and therefore easier for clients to store and pass around.\n          example: drs://drs.example.org/314159\n        size:\n          type: integer\n          description: \u003e-\n            For blobs, the blob size in bytes.\n            For bundles, the cumulative size, in bytes, of items in the `contents` field.\n          format: int64\n        created_time:\n          type: string\n          description: Timestamp of object creation in RFC3339.\n        updated_time:\n          type: string\n          description: Timestamp of `Object` update in RFC3339, identical to create\n            timestamp in systems that do not support updates.\n        version:\n          type: string\n          description: \u003e-\n            A string representing a version.\n            (Some systems may use checksum, a RFC3339 timestamp, or an incrementing version number.)\n        mime_type:\n          type: string\n          description: A string providing the mime-type of the `Object`.\n          example: application/json\n        checksums:\n          minItems: 1\n          type: array\n          description: \u003e-\n            The checksum of the `Object`. At least one checksum must be provided.\n            For blobs, the checksum is computed over the bytes in the blob.\n\n            For bundles, the checksum is computed over a sorted concatenation of the checksums of its top-level contained objects (not recursive, names not included). The list of checksums is sorted alphabetically (hex-code) before concatenation and a further checksum is performed on the concatenated checksum value.\n\n            For example, if a bundle contains blobs with the following checksums:\n            md5(blob1) = 72794b6d\n            md5(blob2) = 5e089d29\n\n            Then the checksum of the bundle is:\n            md5( concat( sort( md5(blob1), md5(blob2) ) ) )\n            = md5( concat( sort( 72794b6d, 5e089d29 ) ) )\n            = md5( concat( 5e089d29, 72794b6d ) )\n            = md5( 5e089d2972794b6d )\n            = f7a29a04\n          items:\n            $ref: '#/components/schemas/DRSChecksum'\n        access_methods:\n          minItems: 1\n          type: array\n          description: \u003e-\n            The list of access methods that can be used to fetch the `Object`.\n            Required for single blobs; optional for bundles.\n          items:\n            $ref: '#/components/schemas/DRSAccessMethod'\n        contents:\n          type: array\n          description: \u003e-\n            If not set, this `Object` is a single blob.\n            If set, this `Object` is a bundle containing the listed `ContentsObject` s (some of which may be further nested).\n          items:\n            $ref: '#/components/schemas/DRSContentsObject'\n        description:\n          type: string\n          description: A human readable description of the `Object`.\n        aliases:\n          type: array\n          description: A list of strings that can be used to find other metadata about\n            this `Object` from external metadata sources. These aliases can be used\n            to represent secondary accession numbers or external GUIDs.\n          items:\n            type: string\n    DRSAccessURL:\n      required:\n        - url\n      type: object\n      properties:\n        url:\n          type: string\n          description: A fully resolvable URL that can be used to fetch the actual\n            object bytes.\n        headers:\n          type: array\n          description: An optional list of headers to include in the HTTP request\n            to `url`. These headers can be used to provide auth tokens required to\n            fetch the object bytes.\n          example:\n            Authorization: Basic Z2E0Z2g6ZHJz\n          items:\n            type: string\n    DRSAccessMethod:\n      required:\n        - type\n      type: object\n      properties:\n        type:\n          type: string\n          description: Type of the access method.\n          enum:\n            - s3\n            - gs\n            - ftp\n            - gsiftp\n            - globus\n            - htsget\n            - https\n            - file\n        access_url:\n          $ref: '#/components/schemas/DRSAccessURL'\n        access_id:\n          type: string\n          description: \u003e-\n            An arbitrary string to be passed to the `/access` path to get an `AccessURL`.\n            This must be unique per object. Note that at least one of `access_url` and `access_id` must be provided.\n        region:\n          type: string\n          description: Name of the region in the cloud service provider that the object\n            belongs to.\n          example: us-east-1\n        authorizations:\n          $ref: '#/components/schemas/DRSAuthorizations'\n    DRSError:\n      type: object\n      properties:\n        msg:\n          type: string\n          description: A detailed error message.\n        status_code:\n          type: integer\n          description: The integer representing the HTTP status code (e.g. 200, 404).\n      description: An object that can optionally include information about the error.\n    DRSServiceInfo:\n      required:\n        - version\n      type: object\n      properties:\n        version:\n          type: string\n          description: Service version\n        title:\n          type: string\n          description: Service name\n        description:\n          type: string\n          description: Service description\n        contact:\n          type: object\n          properties: {}\n          description: Maintainer contact info\n        license:\n          type: object\n          properties: {}\n          description: License information for the exposed API\n      description: Useful information about the running service.\n    DRSContentsObject:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n          description: A name declared by the bundle author that must be used when\n            materialising this object, overriding any name directly associated with\n            the object itself. The name must be unique with the containing bundle.\n            This string is made up of uppercase and lowercase letters, decimal digits,\n            hypen, period, and underscore [A-Za-z0-9.-_]. See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable\n            filenames].\n        id:\n          type: string\n          description: A DRS identifier of an `Object` (either a single blob or a\n            nested bundle). If this ContentsObject is an object within a nested bundle,\n            then the id is optional. Otherwise, the id is required.\n        drs_uri:\n          type: array\n          description: A list of full DRS identifier URI paths that may be used to\n            obtain the object. These URIs may be external to this DRS instance.\n          example: drs://example.com/ga4gh/drs/v1/objects/{object_id}\n          items:\n            type: string\n        contents:\n          type: array\n          description: If this ContentsObject describes a nested bundle and the caller\n            specified \"?expand=true\" on the request, then this contents array must\n            be present and describe the objects within the nested bundle.\n          items:\n            $ref: '#/components/schemas/DRSContentsObject'\n    DRSPassportRequestModel:\n      required:\n        - passports\n      type: object\n      properties:\n        expand:\n          type: boolean\n          example: false\n          description: \u003e-\n            If false and the object_id refers to a bundle, then the ContentsObject array\n            contains only those objects directly contained in the bundle. That is, if the\n            bundle contains other bundles, those other bundles are not recursively\n            included in the result.\n\n            If true and the object_id refers to a bundle, then the entire set of objects\n            in the bundle is expanded. That is, if the bundle contains aother bundles,\n            then those other bundles are recursively expanded and included in the result.\n            Recursion continues through the entire sub-tree of the bundle.\n\n            If the object_id refers to a blob, then the query parameter is ignored.\n        passports:\n          type: array\n          items:\n            type: string\n            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJnYTRnaF9wYXNzcG9ydF92MSI6W119.JJ5rN0ktP0qwyZmIPpxmF_p7JsxAZH6L6brUxtad3CM\n          description: the encoded JWT GA4GH Passport that contains embedded Visas.  The overall JWT is signed as are the individual Passport Visas.\n    DRSAuthorizations:\n      type: object\n      properties:\n        supported_types:\n          type: array\n          items:\n            type: string\n            enum:\n              - None\n              - BasicAuth\n              - BearerAuth\n              - PassportAuth\n          description: \u003e-\n            An Optional list of supported authorization types. More than one can be supported and tried in sequence.\n            Defaults to `None` if empty or missing.\n        passport_auth_issuers:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            If authorizations contain `PassportAuth`, this is a required list of visa issuers\n            (as found in a visa's `iss` claim) that may authorize access to this object. The caller must\n            only provide passports that contain visas from this list. It is strongly recommended that the caller\n            validate that it is appropriate to send the requested passport/visa to the DRS server to mitigate attacks\n            by malicious DRS servers requesting credentials they should not have.\n        bearer_auth_issuers:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            If authorizations contain `BearerAuth`, this is an optional list of issuers that may authorize access to this object.\n            The caller must provide a token from one of these issuers. If this is empty or missing it is assumed that the caller knows\n            which token to send via other means. It is strongly recommended that the caller\n            validate that it is appropriate to send the requested token to the DRS server to mitigate attacks\n            by malicious DRS servers requesting credentials they should not have.\n  parameters:\n    Id:\n      name: id\n      in: path\n      description: A UUID to used to identify an object in the repository\n      required: true\n      schema:\n        type: string\n        format: uuid\n    SnapshotPolicyName:\n      name: policyName\n      in: path\n      description: The relevant policy\n      required: true\n      schema:\n        type: string\n        enum:\n          - steward\n          - reader\n          - discoverer\n    DatasetPolicyName:\n      name: policyName\n      in: path\n      description: The relevant policy\n      required: true\n      schema:\n        type: string\n        enum:\n          - steward\n          - custodian\n          - snapshot_creator\n    ProfilePolicyName:\n      name: policyName\n      in: path\n      description: The relevant policy\n      required: true\n      schema:\n        type: string\n        enum:\n          - owner\n          - user\n    FileId:\n      name: fileid\n      in: path\n      description: A file id\n      required: true\n      schema:\n        type: string\n    Path:\n      name: path\n      in: query\n      description: URL-encoded full path to a file or directory\n      required: true\n      schema:\n        type: string\n    Depth:\n      name: depth\n      in: query\n      description: Enumeration depth; -1 means fully expand; 0 means no expansion;\n        1..N expands that many subdirectories\n      schema:\n        type: integer\n        default: 0\n    LoadTag:\n      name: loadtag\n      in: path\n      description: a load tag\n      required: true\n      schema:\n        type: string\n    AssetId:\n      name: assetid\n      in: path\n      description: An asset id\n      required: true\n      schema:\n        type: string\n    TransactionId:\n      name: transactionId\n      in: path\n      description: A UUID to used to identify a transaction in a dataset\n      required: true\n      schema:\n        type: string\n        format: uuid\n  securitySchemes:\n    googleoauth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            openid: open id authorization\n            email: email authorization\n            profile: profile authorization\n            https://www.googleapis.com/auth/cloud-billing.readonly: cloud billing authorization\n    oidc:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: /oauth2/authorize\n          tokenUrl: /oauth2/token\n          scopes:\n            openid: open id authorization\n            email: email authorization\n            profile: profile authorization\n"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal bool into Go struct field Schema.paths.get.parameters.schema.required of type []string"
}