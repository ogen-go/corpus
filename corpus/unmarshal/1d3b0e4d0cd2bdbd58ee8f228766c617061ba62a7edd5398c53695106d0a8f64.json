{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/marykarakida/projeto19-drivenpass-back"
		},
		"file": {
			"name": "swagger.json",
			"size": 0,
			"path": "src/swagger.json",
			"byteSize": 24163,
			"content": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n        \"title\": \"Driven Pass\",\n        \"description\": \"This API can be used to manage user data and passwords\",\n        \"version\": \"1.0.0\"\n    },\n    \"servers\": [{ \"url\": \"https://projeto-driven-pass.herokuapp.com\" }],\n    \"tags\": [\n        { \"name\": \"auth\", \"description\": \"User authentication\" },\n        { \"name\": \"credentials\", \"description\": \"Everything about credentials\" },\n        { \"name\": \"notes\", \"description\": \"Everything about notes\" },\n        { \"name\": \"cards\", \"description\": \"Everything about cards\" },\n        { \"name\": \"wifis\", \"description\": \"Everything about wifis\" }\n    ],\n    \"paths\": {\n        \"/auth/register\": {\n            \"post\": {\n                \"tags\": [\"auth\"],\n                \"summary\": \"Account creation\",\n                \"description\": \"This route is responsible for registering a new account\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/User\"\n                            },\n                            \"examples\": {\n                                \"visitor\": {\n                                    \"value\": {\n                                        \"email\": \"visitor@com.br\",\n                                        \"password\": \"Password@123\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Created\"\n                    },\n                    \"422\": {\n                        \"description\": \"Unprocessable entity\"\n                    },\n                    \"409\": {\n                        \"description\": \"Conflict\"\n                    }\n                }\n            }\n        },\n        \"/auth/login\": {\n            \"post\": {\n                \"tags\": [\"auth\"],\n                \"summary\": \"Account access\",\n                \"description\": \"This route is responsible for logging into app\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/User\"\n                            },\n                            \"examples\": {\n                                \"visitor\": {\n                                    \"value\": {\n                                        \"email\": \"visitor@com.br\",\n                                        \"password\": \"Password@123\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    }\n                }\n            }\n        },\n        \"/auth/refresh\": {\n            \"get\": {\n                \"tags\": [\"auth\"],\n                \"summary\": \"Refresh access token\",\n                \"description\": \"This route is responsible for getting new access token. Send refresh token generated at login or previous refresh as authorization headers\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"403\": {\n                        \"description\": \"Forbidden\"\n                    }\n                }\n            }\n        },\n        \"/auth/logout\": {\n            \"get\": {\n                \"tags\": [\"auth\"],\n                \"summary\": \"Logout account\",\n                \"description\": \"This route is responsible for logging out of account. Send refresh token generated at login or previous refresh as authorization headers\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"No content\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    }\n                }\n            }\n        },\n        \"/credentials\": {\n            \"post\": {\n                \"tags\": [\"credentials\"],\n                \"summary\": \"Save new credential\",\n                \"description\": \"This route is responsible for saving new credential\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/Credential\"\n                            },\n                            \"examples\": {\n                                \"credential\": {\n                                    \"value\": {\n                                        \"title\": \"new credential\",\n                                        \"url\": \"https://florimond.dev/en/posts/2018/08/restful-api-design-13-best-practices-to-make-your-users-happy/\",\n                                        \"username\": \"visitor\",\n                                        \"password\": \"senha-generica\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Created\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"409\": {\n                        \"description\": \"Credential with same title already exists\"\n                    },\n                    \"422\": {\n                        \"description\": \"Unprocessable entity\"\n                    }\n                }\n            },\n            \"get\": {\n                \"tags\": [\"credentials\"],\n                \"summary\": \"Get all user credentials\",\n                \"description\": \"This route is responsible for getting all user's credential\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    }\n                }\n            }\n        },\n        \"/credentials/{credentialId}\": {\n            \"get\": {\n                \"tags\": [\"credentials\"],\n                \"summary\": \"Get specific credential\",\n                \"description\": \"This route is responsible for getting a specific user's credential by id\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"parameters\": [\n                    {\n                        \"name\": \"credentialId\",\n                        \"in\": \"path\",\n                        \"description\": \"Id of saved credential\",\n                        \"required\": \"true\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"403\": {\n                        \"description\": \"Forbidden\"\n                    },\n                    \"404\": {\n                        \"description\": \"Credential not found\"\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"credentials\"],\n                \"summary\": \"Delete specific credential\",\n                \"description\": \"This route is responsible for deletting a specific user's credential by id\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"parameters\": [\n                    {\n                        \"name\": \"credentialId\",\n                        \"in\": \"path\",\n                        \"description\": \"Id of saved credential\",\n                        \"required\": \"true\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"403\": {\n                        \"description\": \"Forbidden\"\n                    },\n                    \"404\": {\n                        \"description\": \"Credential not found\"\n                    }\n                }\n            }\n        },\n        \"/notes\": {\n            \"post\": {\n                \"tags\": [\"notes\"],\n                \"summary\": \"Save new note\",\n                \"description\": \"This route is responsible for saving new note\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/Note\"\n                            },\n                            \"examples\": {\n                                \"note\": {\n                                    \"value\": {\n                                        \"title\": \"new note\",\n                                        \"note\": \"this is a new note\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Created\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"409\": {\n                        \"description\": \"Note with same title already exists\"\n                    },\n                    \"422\": {\n                        \"description\": \"Unprocessable entity\"\n                    }\n                }\n            },\n            \"get\": {\n                \"tags\": [\"notes\"],\n                \"summary\": \"Get all user notes\",\n                \"description\": \"This route is responsible for getting all user's note\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    }\n                }\n            }\n        },\n        \"/notes/{noteId}\": {\n            \"get\": {\n                \"tags\": [\"notes\"],\n                \"summary\": \"Get specific note\",\n                \"description\": \"This route is responsible for getting a specific user's note by id\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"parameters\": [\n                    {\n                        \"name\": \"noteId\",\n                        \"in\": \"path\",\n                        \"description\": \"Id of saved note\",\n                        \"required\": \"true\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"403\": {\n                        \"description\": \"Forbidden\"\n                    },\n                    \"404\": {\n                        \"description\": \"Note not found\"\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"notes\"],\n                \"summary\": \"Delete specific note\",\n                \"description\": \"This route is responsible for deletting a specific user's note by id\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"parameters\": [\n                    {\n                        \"name\": \"noteId\",\n                        \"in\": \"path\",\n                        \"description\": \"Id of saved note\",\n                        \"required\": \"true\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"403\": {\n                        \"description\": \"Forbidden\"\n                    },\n                    \"404\": {\n                        \"description\": \"Note not found\"\n                    }\n                }\n            }\n        },\n        \"/cards\": {\n            \"post\": {\n                \"tags\": [\"cards\"],\n                \"summary\": \"Save new card\",\n                \"description\": \"This route is responsible for saving new card\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/Card\"\n                            },\n                            \"examples\": {\n                                \"cards\": {\n                                    \"value\": {\n                                        \"title\": \"new card\",\n                                        \"number\": \"12345678912\",\n                                        \"cardHolderName\": \"USUARIO\",\n                                        \"expirationDate\": \"09/27\",\n                                        \"securityCode\": \"345\",\n                                        \"password\": \"2892\",\n                                        \"isVirtual\": false,\n                                        \"type\": \"credit\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Created\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"409\": {\n                        \"description\": \"Card with same title already exists\"\n                    },\n                    \"422\": {\n                        \"description\": \"Unprocessable entity\"\n                    }\n                }\n            },\n            \"get\": {\n                \"tags\": [\"cards\"],\n                \"summary\": \"Get all user cards\",\n                \"description\": \"This route is responsible for getting all user's card\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    }\n                }\n            }\n        },\n        \"/cards/{cardId}\": {\n            \"get\": {\n                \"tags\": [\"cards\"],\n                \"summary\": \"Get specific card\",\n                \"description\": \"This route is responsible for getting a specific user's card by id\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"parameters\": [\n                    {\n                        \"name\": \"cardId\",\n                        \"in\": \"path\",\n                        \"description\": \"Id of saved card\",\n                        \"required\": \"true\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"403\": {\n                        \"description\": \"Forbidden\"\n                    },\n                    \"404\": {\n                        \"description\": \"Card not found\"\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"cards\"],\n                \"summary\": \"Delete specific card\",\n                \"description\": \"This route is responsible for deletting a specific user's card by id\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"parameters\": [\n                    {\n                        \"name\": \"cardId\",\n                        \"in\": \"path\",\n                        \"description\": \"Id of saved card\",\n                        \"required\": \"true\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"403\": {\n                        \"description\": \"Forbidden\"\n                    },\n                    \"404\": {\n                        \"description\": \"Card not found\"\n                    }\n                }\n            }\n        },\n        \"/wifis\": {\n            \"post\": {\n                \"tags\": [\"wifis\"],\n                \"summary\": \"Save new wifi\",\n                \"description\": \"This route is responsible for saving new wifi\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/Wifi\"\n                            },\n                            \"examples\": {\n                                \"wifis\": {\n                                    \"value\": {\n                                        \"title\": \"new wifi\",\n                                        \"networkName\": \"Rede\",\n                                        \"password\": \"senha-generica\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Created\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"409\": {\n                        \"description\": \"Wifi with same title already exists\"\n                    },\n                    \"422\": {\n                        \"description\": \"Unprocessable entity\"\n                    }\n                }\n            },\n            \"get\": {\n                \"tags\": [\"wifis\"],\n                \"summary\": \"Get all user wifis\",\n                \"description\": \"This route is responsible for getting all user's wifi\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    }\n                }\n            }\n        },\n        \"/wifis/{wifiId}\": {\n            \"get\": {\n                \"tags\": [\"wifis\"],\n                \"summary\": \"Get specific wifi\",\n                \"description\": \"This route is responsible for getting a specific user's wifi by id\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"parameters\": [\n                    {\n                        \"name\": \"wifiId\",\n                        \"in\": \"path\",\n                        \"description\": \"Id of saved wifi\",\n                        \"required\": \"true\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"403\": {\n                        \"description\": \"Forbidden\"\n                    },\n                    \"404\": {\n                        \"description\": \"Wifi not found\"\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"wifis\"],\n                \"summary\": \"Delete specific wifi\",\n                \"description\": \"This route is responsible for deletting a specific user's wifi by id\",\n                \"security\": [{ \"bearerAuth\": [] }],\n                \"parameters\": [\n                    {\n                        \"name\": \"wifiId\",\n                        \"in\": \"path\",\n                        \"description\": \"Id of saved wifi\",\n                        \"required\": \"true\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"403\": {\n                        \"description\": \"Forbidden\"\n                    },\n                    \"404\": {\n                        \"description\": \"Wifi not found\"\n                    }\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"User\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": { \"type\": \"string\" },\n                    \"email\": { \"type\": \"string\" },\n                    \"password\": {\n                        \"type\": \"string\",\n                        \"description\": \"8 to 24 characters. Must include uppercase and lowercase letters, a number and a special character. Allowed special characters: ! @ # $ % W\"\n                    }\n                }\n            },\n            \"Credential\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": { \"type\": \"string\" },\n                    \"title\": { \"type\": \"string\", \"description\": \"Must be unique\" },\n                    \"url\": { \"type\": \"string\" },\n                    \"username\": { \"type\": \"string\" },\n                    \"password\": { \"type\": \"string\" }\n                }\n            },\n            \"Note\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": { \"type\": \"string\" },\n                    \"title\": { \"type\": \"string\", \"description\": \"Max 50 character. Must be unique\" },\n                    \"note\": { \"type\": \"string\", \"description\": \"Max 1000 character\" }\n                }\n            },\n            \"Card\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": { \"type\": \"string\" },\n                    \"title\": { \"type\": \"string\", \"description\": \"Must be unique\" },\n                    \"number\": { \"type\": \"string\", \"description\": \"Must be a numeric string with or without hyphens/white spaces\" },\n                    \"cardHolderName\": { \"type\": \"string\", \"description\": \"Must be all capital case\" },\n                    \"expirationDate\": { \"type\": \"string\", \"description\": \"Must be a valida date with MM/YY pattern\" },\n                    \"securityCode\": { \"type\": \"string\" },\n                    \"password\": { \"type\": \"string\" },\n                    \"isVirtual\": { \"type\": \"boolean\" },\n                    \"type\": { \"type\": \"string\", \"description\": \"Valid values: 'credit', 'debit', 'both'\" }\n                }\n            },\n            \"Wifi\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": { \"type\": \"string\" },\n                    \"title\": { \"type\": \"string\" },\n                    \"networkName\": { \"type\": \"string\" },\n                    \"password\": { \"type\": \"string\" }\n                }\n            }\n        },\n        \"securitySchemes\": {\n            \"bearerAuth\": {\n                \"type\": \"http\",\n                \"scheme\": \"bearer\",\n                \"bearerFormat\": \"JWT\"\n            }\n        }\n    }\n}\n",
			"canonicalURL": "/github.com/marykarakida/projeto19-drivenpass-back@4a7639adaf82a723fe3e270c02fe243e9d3dc1a6/-/blob/src/swagger.json",
			"externalURLs": [
				{
					"url": "https://github.com/marykarakida/projeto19-drivenpass-back/blob/4a7639adaf82a723fe3e270c02fe243e9d3dc1a6/src/swagger.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 185: cannot unmarshal !!str `true` into bool; yaml: line 213: cannot unmarshal !!str `true` into bool; yaml: line 296: cannot unmarshal !!str `true` into bool; yaml: line 324: cannot unmarshal !!str `true` into bool; yaml: line 413: cannot unmarshal !!str `true` into bool; yaml: line 441: cannot unmarshal !!str `true` into bool; yaml: line 525: cannot unmarshal !!str `true` into bool; yaml: line 553: cannot unmarshal !!str `true` into bool"
}