{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zijianhuang/openapiclientgen"
		},
		"file": {
			"name": "redocOpenApi200501.json",
			"size": 0,
			"path": "Tests/SwagTests/SwagMock/redocOpenApi200501.json",
			"byteSize": 67441,
			"content": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n        \"title\": \"Swagger Petstore\",\n        \"description\": \"This is a sample server Petstore server.\\nYou can find out more about Swagger at\\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\\nFor this sample, you can use the api key `special-key` to test the authorization filters.\\n\\n# Introduction\\nThis API is documented in **OpenAPI format** and is based on\\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\\n\\n# OpenAPI Specification\\nThis API is documented in **OpenAPI format** and is based on\\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\\n\\n# Cross-Origin Resource Sharing\\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\\nAnd that allows cross-domain communication from the browser.\\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\\n\\n# Authentication\\n\\nPetstore offers two forms of authentication:\\n  - API Key\\n  - OAuth2\\nOAuth2 - an open protocol to allow secure authorization in a simple\\nand standard method from web, mobile and desktop applications.\\n\\n\u003cSecurityDefinitions /\u003e\\n\",\n        \"termsOfService\": \"http://swagger.io/terms/\",\n        \"contact\": {\n            \"name\": \"API Support\",\n            \"url\": \"https://github.com/Redocly/redoc\",\n            \"email\": \"apiteam@swagger.io\"\n        },\n        \"license\": {\n            \"name\": \"Apache 2.0\",\n            \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n        },\n        \"version\": \"1.0.0\",\n        \"x-logo\": {\n            \"url\": \"https://redocly.github.io/redoc/petstore-logo.png\",\n            \"altText\": \"Petstore logo\"\n        }\n    },\n    \"servers\": [\n        {\n            \"url\": \"//petstore.swagger.io/v2\",\n            \"description\": \"Default server\"\n        },\n        {\n            \"url\": \"//petstore.swagger.io/sandbox\",\n            \"description\": \"Sandbox server\"\n        }\n    ],\n    \"paths\": {\n        \"/pet\": {\n            \"parameters\": [\n                {\n                    \"name\": \"Accept-Language\",\n                    \"in\": \"header\",\n                    \"description\": \"The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US\",\n                    \"schema\": {\n                        \"type\": \"string\",\n                        \"default\": \"en-AU\"\n                    },\n                    \"example\": \"en-US\"\n                },\n                {\n                    \"name\": \"cookieParam\",\n                    \"in\": \"cookie\",\n                    \"required\": true,\n                    \"description\": \"Some cookie\",\n                    \"schema\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                    }\n                }\n            ],\n            \"post\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Add a new pet to the store\",\n                \"description\": \"Add new pet to the store inventory.\",\n                \"operationId\": \"addPet\",\n                \"requestBody\": {},\n                \"responses\": {\n                    \"405\": {\n                        \"description\": \"Invalid input\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ],\n                \"x-code-samples\": [\n                    {\n                        \"lang\": \"C#\",\n                        \"source\": \"PetStore.v1.Pet pet = new PetStore.v1.Pet();\\npet.setApiKey(\\\"your api key\\\");\\npet.petType = PetStore.v1.Pet.TYPE_DOG;\\npet.name = \\\"Rex\\\";\\n// set other fields\\nPetStoreResponse response = pet.create();\\nif (response.statusCode == HttpStatusCode.Created)\\n{\\n  // Successfully created\\n}\\nelse\\n{\\n  // Something wrong -- check response for errors\\n  Console.WriteLine(response.getRawResponse());\\n}\\n\"\n                    },\n                    {\n                        \"lang\": \"PHP\",\n                        \"source\": \"$form = new \\\\PetStore\\\\Entities\\\\Pet();\\n$form-\u003esetPetType(\\\"Dog\\\");\\n$form-\u003esetName(\\\"Rex\\\");\\n// set other fields\\ntry {\\n    $pet = $client-\u003epets()-\u003ecreate($form);\\n} catch (UnprocessableEntityException $e) {\\n    var_dump($e-\u003egetErrors());\\n}\\n\"\n                    }\n                ]\n            },\n            \"put\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Update an existing pet\",\n                \"description\": \"\",\n                \"operationId\": \"updatePet\",\n                \"requestBody\": {},\n                \"responses\": {\n                    \"400\": {\n                        \"description\": \"Invalid ID supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"Pet not found\"\n                    },\n                    \"405\": {\n                        \"description\": \"Validation exception\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ],\n                \"x-code-samples\": [\n                    {\n                        \"lang\": \"PHP\",\n                        \"source\": \"$form = new \\\\PetStore\\\\Entities\\\\Pet();\\n$form-\u003esetPetId(1);\\n$form-\u003esetPetType(\\\"Dog\\\");\\n$form-\u003esetName(\\\"Rex\\\");\\n// set other fields\\ntry {\\n    $pet = $client-\u003epets()-\u003eupdate($form);\\n} catch (UnprocessableEntityException $e) {\\n    var_dump($e-\u003egetErrors());\\n}\\n\"\n                    }\n                ]\n            }\n        },\n        \"/pet/{petId}\": {\n            \"get\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Find pet by ID\",\n                \"description\": \"Returns a single pet\",\n                \"operationId\": \"getPetById\",\n                \"parameters\": [\n                    {\n                        \"name\": \"petId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"ID of pet to return\",\n                        \"schema\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                        },\n                        \"deprecated\": \"true\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Pet\"\n                                }\n                            },\n                            \"application/xml\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Pet\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid ID supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"Pet not found\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"api_key\": []\n                    }\n                ]\n            },\n            \"post\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Updates a pet in the store with form data\",\n                \"description\": \"\",\n                \"operationId\": \"updatePetWithForm\",\n                \"parameters\": [\n                    {\n                        \"name\": \"petId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"ID of pet that needs to be updated\",\n                        \"schema\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/x-www-form-urlencoded\": {\n                            \"schema\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"name\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"Updated name of the pet\"\n                                    },\n                                    \"status\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"Updated status of the pet\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"405\": {\n                        \"description\": \"Invalid input\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ]\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Deletes a pet\",\n                \"description\": \"\",\n                \"operationId\": \"deletePet\",\n                \"parameters\": [\n                    {\n                        \"name\": \"api_key\",\n                        \"in\": \"header\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"Bearer \u003cTOKEN\u003e\"\n                    },\n                    {\n                        \"name\": \"petId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"Pet id to delete\",\n                        \"schema\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"400\": {\n                        \"description\": \"Invalid pet value\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ]\n            }\n        },\n        \"/pet/{petId}/uploadImage\": {\n            \"post\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"uploads an image\",\n                \"description\": \"\",\n                \"operationId\": \"uploadFile\",\n                \"parameters\": [\n                    {\n                        \"name\": \"petId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"ID of pet to update\",\n                        \"schema\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/octet-stream\": {\n                            \"schema\": {\n                                \"type\": \"string\",\n                                \"format\": \"binary\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ApiResponse\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ]\n            }\n        },\n        \"/pet/findByStatus\": {\n            \"get\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Finds Pets by status\",\n                \"description\": \"Multiple status values can be provided with comma separated strings\",\n                \"operationId\": \"findPetsByStatus\",\n                \"parameters\": [\n                    {\n                        \"name\": \"status\",\n                        \"in\": \"query\",\n                        \"style\": \"form\",\n                        \"required\": true,\n                        \"description\": \"Status values that need to be considered for filter\",\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"maxItems\": 3,\n                            \"minItems\": 1,\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"default\": \"available\",\n                                \"enum\": [\n                                    \"available\",\n                                    \"pending\",\n                                    \"sold\"\n                                ]\n                            }\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Pet\"\n                                    }\n                                }\n                            },\n                            \"application/xml\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Pet\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid status value\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ]\n            }\n        },\n        \"/pet/findByTags\": {\n            \"get\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Finds Pets by tags\",\n                \"description\": \"Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\",\n                \"operationId\": \"findPetsByTags\",\n                \"parameters\": [\n                    {\n                        \"name\": \"tags\",\n                        \"in\": \"query\",\n                        \"style\": \"form\",\n                        \"required\": true,\n                        \"description\": \"Tags to filter by\",\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Pet\"\n                                    }\n                                }\n                            },\n                            \"application/xml\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Pet\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid tag value\"\n                    }\n                },\n                \"deprecated\": true,\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ]\n            }\n        },\n        \"/store/inventory\": {\n            \"get\": {\n                \"tags\": [\n                    \"store\"\n                ],\n                \"summary\": \"Returns pet inventories by status\",\n                \"description\": \"Returns a map of status codes to quantities\",\n                \"operationId\": \"getInventory\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"additionalProperties\": {\n                                        \"type\": \"integer\",\n                                        \"format\": \"int32\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"api_key\": []\n                    }\n                ]\n            }\n        },\n        \"/store/order\": {\n            \"post\": {\n                \"tags\": [\n                    \"store\"\n                ],\n                \"summary\": \"Place an order for a pet\",\n                \"description\": \"\",\n                \"operationId\": \"placeOrder\",\n                \"requestBody\": {\n                    \"description\": \"order placed for purchasing the pet\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/Order\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Order\"\n                                }\n                            },\n                            \"application/xml\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Order\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid Order\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"example\": {\n                                    \"status\": \"400\",\n                                    \"message\": \"Invalid Order\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/store/order/{orderId}\": {\n            \"get\": {\n                \"tags\": [\n                    \"store\"\n                ],\n                \"summary\": \"Find purchase order by ID\",\n                \"description\": \"For valid response try integer IDs with value \u003c= 5 or \u003e 10. Other values will generated exceptions\",\n                \"operationId\": \"getOrderById\",\n                \"parameters\": [\n                    {\n                        \"name\": \"orderId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"ID of pet that needs to be fetched\",\n                        \"schema\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\",\n                            \"maximum\": 5.0,\n                            \"minimum\": 1.0\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Order\"\n                                }\n                            },\n                            \"application/xml\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Order\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid ID supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"Order not found\"\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"store\"\n                ],\n                \"summary\": \"Delete purchase order by ID\",\n                \"description\": \"For valid response try integer IDs with value \u003c 1000. Anything above 1000 or nonintegers will generate API errors\",\n                \"operationId\": \"deleteOrder\",\n                \"parameters\": [\n                    {\n                        \"name\": \"orderId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"ID of the order that needs to be deleted\",\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"minimum\": 1.0\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"400\": {\n                        \"description\": \"Invalid ID supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"Order not found\"\n                    }\n                }\n            }\n        },\n        \"/store/subscribe\": {\n            \"post\": {\n                \"tags\": [\n                    \"store\"\n                ],\n                \"summary\": \"Subscribe to the Store events\",\n                \"description\": \"Add subscription for a store events\",\n                \"operationId\": \"subscribe\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"object\",\n                                \"required\": [\n                                    \"callbackUrl\",\n                                    \"eventName\"\n                                ],\n                                \"properties\": {\n                                    \"callbackUrl\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"This URL will be called by the server when the desired event will occur\",\n                                        \"format\": \"uri\",\n                                        \"example\": \"https://myserver.com/send/callback/here\"\n                                    },\n                                    \"eventName\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"Event name for the subscription\",\n                                        \"example\": \"orderInProgress\",\n                                        \"enum\": [\n                                            \"orderInProgress\",\n                                            \"orderShipped\",\n                                            \"orderDelivered\"\n                                        ]\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Subscription added\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"subscriptionId\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"AAA-123-BBB-456\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"callbacks\": {\n                    \"orderInProgress\": {\n                        \"{$request.body#/callbackUrl}?event={$request.body#/eventName}\": {\n                            \"servers\": [\n                                {\n                                    \"url\": \"//callback-url.path-level/v1\",\n                                    \"description\": \"Path level server 1\"\n                                },\n                                {\n                                    \"url\": \"//callback-url.path-level/v2\",\n                                    \"description\": \"Path level server 2\"\n                                }\n                            ],\n                            \"post\": {\n                                \"summary\": \"Order in Progress (Summary)\",\n                                \"description\": \"A callback triggered every time an Order is updated status to \\\"inProgress\\\" (Description)\",\n                                \"externalDocs\": {\n                                    \"description\": \"Find out more\",\n                                    \"url\": \"https://more-details.com/demo\"\n                                },\n                                \"requestBody\": {\n                                    \"content\": {\n                                        \"application/json\": {\n                                            \"schema\": {\n                                                \"type\": \"object\",\n                                                \"properties\": {\n                                                    \"orderId\": {\n                                                        \"type\": \"string\",\n                                                        \"example\": \"123\"\n                                                    },\n                                                    \"timestamp\": {\n                                                        \"type\": \"string\",\n                                                        \"format\": \"date-time\",\n                                                        \"example\": \"2018-10-19T16:46:45Z\"\n                                                    },\n                                                    \"status\": {\n                                                        \"type\": \"string\",\n                                                        \"example\": \"inProgress\"\n                                                    }\n                                                }\n                                            }\n                                        },\n                                        \"application/xml\": {\n                                            \"schema\": {\n                                                \"type\": \"object\",\n                                                \"properties\": {\n                                                    \"orderId\": {\n                                                        \"type\": \"string\",\n                                                        \"example\": \"123\"\n                                                    }\n                                                }\n                                            },\n                                            \"example\": \"\u003c?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?\u003e\\n\u003croot\u003e\\n  \u003corderId\u003e123\u003c/orderId\u003e\\n  \u003cstatus\u003einProgress\u003c/status\u003e\\n  \u003ctimestamp\u003e2018-10-19T16:46:45Z\u003c/timestamp\u003e\\n\u003c/root\u003e\\n\"\n                                        }\n                                    }\n                                },\n                                \"responses\": {\n                                    \"200\": {\n                                        \"description\": \"Callback successfully processed and no retries will be performed\",\n                                        \"content\": {\n                                            \"application/json\": {\n                                                \"schema\": {\n                                                    \"type\": \"object\",\n                                                    \"properties\": {\n                                                        \"someProp\": {\n                                                            \"type\": \"string\",\n                                                            \"example\": \"123\"\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    },\n                                    \"299\": {\n                                        \"description\": \"Response for cancelling subscription\"\n                                    },\n                                    \"500\": {\n                                        \"description\": \"Callback processing failed and retries will be performed\"\n                                    }\n                                },\n                                \"x-code-samples\": [\n                                    {\n                                        \"lang\": \"C#\",\n                                        \"source\": \"PetStore.v1.Pet pet = new PetStore.v1.Pet();\\npet.setApiKey(\\\"your api key\\\");\\npet.petType = PetStore.v1.Pet.TYPE_DOG;\\npet.name = \\\"Rex\\\";\\n// set other fields\\nPetStoreResponse response = pet.create();\\nif (response.statusCode == HttpStatusCode.Created)\\n{\\n  // Successfully created\\n}\\nelse\\n{\\n  // Something wrong -- check response for errors\\n  Console.WriteLine(response.getRawResponse());\\n}\\n\"\n                                    },\n                                    {\n                                        \"lang\": \"PHP\",\n                                        \"source\": \"$form = new \\\\PetStore\\\\Entities\\\\Pet();\\n$form-\u003esetPetType(\\\"Dog\\\");\\n$form-\u003esetName(\\\"Rex\\\");\\n// set other fields\\ntry {\\n    $pet = $client-\u003epets()-\u003ecreate($form);\\n} catch (UnprocessableEntityException $e) {\\n    var_dump($e-\u003egetErrors());\\n}\\n\"\n                                    }\n                                ]\n                            },\n                            \"put\": {\n                                \"description\": \"Order in Progress (Only Description)\",\n                                \"requestBody\": {\n                                    \"content\": {\n                                        \"application/json\": {\n                                            \"schema\": {\n                                                \"type\": \"object\",\n                                                \"properties\": {\n                                                    \"orderId\": {\n                                                        \"type\": \"string\",\n                                                        \"example\": \"123\"\n                                                    },\n                                                    \"timestamp\": {\n                                                        \"type\": \"string\",\n                                                        \"format\": \"date-time\",\n                                                        \"example\": \"2018-10-19T16:46:45Z\"\n                                                    },\n                                                    \"status\": {\n                                                        \"type\": \"string\",\n                                                        \"example\": \"inProgress\"\n                                                    }\n                                                }\n                                            }\n                                        },\n                                        \"application/xml\": {\n                                            \"schema\": {\n                                                \"type\": \"object\",\n                                                \"properties\": {\n                                                    \"orderId\": {\n                                                        \"type\": \"string\",\n                                                        \"example\": \"123\"\n                                                    }\n                                                }\n                                            },\n                                            \"example\": \"\u003c?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?\u003e\\n\u003croot\u003e\\n  \u003corderId\u003e123\u003c/orderId\u003e\\n  \u003cstatus\u003einProgress\u003c/status\u003e\\n  \u003ctimestamp\u003e2018-10-19T16:46:45Z\u003c/timestamp\u003e\\n\u003c/root\u003e\\n\"\n                                        }\n                                    }\n                                },\n                                \"responses\": {\n                                    \"200\": {\n                                        \"description\": \"Callback successfully processed and no retries will be performed\",\n                                        \"content\": {\n                                            \"application/json\": {\n                                                \"schema\": {\n                                                    \"type\": \"object\",\n                                                    \"properties\": {\n                                                        \"someProp\": {\n                                                            \"type\": \"string\",\n                                                            \"example\": \"123\"\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                },\n                                \"servers\": [\n                                    {\n                                        \"url\": \"//callback-url.operation-level/v1\",\n                                        \"description\": \"Operation level server 1 (Operation override)\"\n                                    },\n                                    {\n                                        \"url\": \"//callback-url.operation-level/v2\",\n                                        \"description\": \"Operation level server 2 (Operation override)\"\n                                    }\n                                ]\n                            }\n                        }\n                    },\n                    \"orderShipped\": {\n                        \"{$request.body#/callbackUrl}?event={$request.body#/eventName}\": {\n                            \"post\": {\n                                \"description\": \"Very long description\\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\\nincididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\\nnostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\\nfugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\\nculpa qui officia deserunt mollit anim id est laborum.\\n\",\n                                \"requestBody\": {\n                                    \"content\": {\n                                        \"application/json\": {\n                                            \"schema\": {\n                                                \"type\": \"object\",\n                                                \"properties\": {\n                                                    \"orderId\": {\n                                                        \"type\": \"string\",\n                                                        \"example\": \"123\"\n                                                    },\n                                                    \"timestamp\": {\n                                                        \"type\": \"string\",\n                                                        \"format\": \"date-time\",\n                                                        \"example\": \"2018-10-19T16:46:45Z\"\n                                                    },\n                                                    \"estimatedDeliveryDate\": {\n                                                        \"type\": \"string\",\n                                                        \"format\": \"date-time\",\n                                                        \"example\": \"2018-11-11T16:00:00Z\"\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                },\n                                \"responses\": {\n                                    \"200\": {\n                                        \"description\": \"Callback successfully processed and no retries will be performed\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"orderDelivered\": {\n                        \"http://notificationServer.com?url={$request.body#/callbackUrl}\u0026event={$request.body#/eventName}\": {\n                            \"post\": {\n                                \"summary\": \"Order delivered\",\n                                \"description\": \"A callback triggered every time an Order is delivered to the recipient\",\n                                \"requestBody\": {\n                                    \"content\": {\n                                        \"application/json\": {\n                                            \"schema\": {\n                                                \"type\": \"object\",\n                                                \"properties\": {\n                                                    \"orderId\": {\n                                                        \"type\": \"string\",\n                                                        \"example\": \"123\"\n                                                    },\n                                                    \"timestamp\": {\n                                                        \"type\": \"string\",\n                                                        \"format\": \"date-time\",\n                                                        \"example\": \"2018-10-19T16:46:45Z\"\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                },\n                                \"responses\": {\n                                    \"200\": {\n                                        \"description\": \"Callback successfully processed and no retries will be performed\"\n                                    }\n                                },\n                                \"deprecated\": true\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/user\": {\n            \"post\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Create user\",\n                \"description\": \"This can only be done by the logged in user.\",\n                \"operationId\": \"createUser\",\n                \"requestBody\": {\n                    \"description\": \"Created user object\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/User\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"default\": {\n                        \"description\": \"successful operation\"\n                    }\n                }\n            }\n        },\n        \"/user/{username}\": {\n            \"get\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Get user by user name\",\n                \"description\": \"\",\n                \"operationId\": \"getUserByName\",\n                \"parameters\": [\n                    {\n                        \"name\": \"username\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"The name that needs to be fetched. Use user1 for testing. \",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/User\"\n                                }\n                            },\n                            \"application/xml\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/User\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid username supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"User not found\"\n                    }\n                }\n            },\n            \"put\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Updated user\",\n                \"description\": \"This can only be done by the logged in user.\",\n                \"operationId\": \"updateUser\",\n                \"parameters\": [\n                    {\n                        \"name\": \"username\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"name that need to be deleted\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"description\": \"Updated user object\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/User\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"400\": {\n                        \"description\": \"Invalid user supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"User not found\"\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Delete user\",\n                \"description\": \"This can only be done by the logged in user.\",\n                \"operationId\": \"deleteUser\",\n                \"parameters\": [\n                    {\n                        \"name\": \"username\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"description\": \"The name that needs to be deleted\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"400\": {\n                        \"description\": \"Invalid username supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"User not found\"\n                    }\n                }\n            }\n        },\n        \"/user/createWithArray\": {\n            \"post\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Creates list of users with given input array\",\n                \"description\": \"\",\n                \"operationId\": \"createUsersWithArrayInput\",\n                \"requestBody\": {},\n                \"responses\": {\n                    \"default\": {\n                        \"description\": \"successful operation\"\n                    }\n                }\n            }\n        },\n        \"/user/createWithList\": {\n            \"post\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Creates list of users with given input array\",\n                \"description\": \"\",\n                \"operationId\": \"createUsersWithListInput\",\n                \"requestBody\": {},\n                \"responses\": {\n                    \"default\": {\n                        \"description\": \"successful operation\"\n                    }\n                }\n            }\n        },\n        \"/user/login\": {\n            \"get\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Logs user into the system\",\n                \"description\": \"\",\n                \"operationId\": \"loginUser\",\n                \"parameters\": [\n                    {\n                        \"name\": \"username\",\n                        \"in\": \"query\",\n                        \"required\": true,\n                        \"description\": \"The user name for login\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"password\",\n                        \"in\": \"query\",\n                        \"required\": true,\n                        \"description\": \"The password for login in clear text\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"headers\": {\n                            \"X-Rate-Limit\": {\n                                \"description\": \"calls per hour allowed by the user\",\n                                \"schema\": {\n                                    \"type\": \"integer\",\n                                    \"format\": \"int32\"\n                                }\n                            },\n                            \"X-Expires-After\": {\n                                \"description\": \"date in UTC when token expires\",\n                                \"schema\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"date-time\"\n                                }\n                            }\n                        },\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"string\"\n                                },\n                                \"examples\": {\n                                    \"response\": {\n                                        \"value\": \"OK\"\n                                    }\n                                }\n                            },\n                            \"application/xml\": {\n                                \"schema\": {\n                                    \"type\": \"string\"\n                                },\n                                \"examples\": {\n                                    \"response\": {\n                                        \"value\": \"\u003cMessage\u003e OK \u003c/Message\u003e\"\n                                    }\n                                }\n                            },\n                            \"text/plain\": {\n                                \"examples\": {\n                                    \"response\": {\n                                        \"value\": \"OK\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid username/password supplied\"\n                    }\n                }\n            }\n        },\n        \"/user/logout\": {\n            \"get\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Logs out current logged in user session\",\n                \"description\": \"\",\n                \"operationId\": \"logoutUser\",\n                \"responses\": {\n                    \"default\": {\n                        \"description\": \"successful operation\"\n                    }\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"ApiResponse\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"code\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int32\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\"\n                    },\n                    \"message\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"Cat\": {\n                \"description\": \"A representation of a cat\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/Pet\"\n                    },\n                    {\n                        \"type\": \"object\",\n                        \"required\": [\n                            \"huntingSkill\"\n                        ],\n                        \"properties\": {\n                            \"huntingSkill\": {\n                                \"type\": \"string\",\n                                \"description\": \"The measured skill for hunting\",\n                                \"default\": \"lazy\",\n                                \"example\": \"adventurous\",\n                                \"enum\": [\n                                    \"clueless\",\n                                    \"lazy\",\n                                    \"adventurous\",\n                                    \"aggressive\"\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"Category\": {\n                \"type\": \"object\",\n                \"xml\": {\n                    \"name\": \"Category\"\n                },\n                \"properties\": {\n                    \"id\": {\n                        \"description\": \"Category ID\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/Id\"\n                            }\n                        ]\n                    },\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Category name\",\n                        \"minLength\": 1\n                    },\n                    \"sub\": {\n                        \"type\": \"object\",\n                        \"description\": \"Test Sub Category\",\n                        \"properties\": {\n                            \"prop1\": {\n                                \"type\": \"string\",\n                                \"description\": \"Dumb Property\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"Dog\": {\n                \"description\": \"A representation of a dog\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/Pet\"\n                    },\n                    {\n                        \"type\": \"object\",\n                        \"required\": [\n                            \"packSize\"\n                        ],\n                        \"properties\": {\n                            \"packSize\": {\n                                \"type\": \"integer\",\n                                \"description\": \"The size of the pack the dog is from\",\n                                \"format\": \"int32\",\n                                \"default\": \"1\",\n                                \"minimum\": 1.0\n                            }\n                        }\n                    }\n                ]\n            },\n            \"HoneyBee\": {\n                \"description\": \"A representation of a honey bee\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/Pet\"\n                    },\n                    {\n                        \"type\": \"object\",\n                        \"required\": [\n                            \"honeyPerDay\"\n                        ],\n                        \"properties\": {\n                            \"honeyPerDay\": {\n                                \"type\": \"number\",\n                                \"description\": \"Average amount of honey produced per day in ounces\",\n                                \"multipleOf\": 0.01,\n                                \"example\": \"3.14\"\n                            }\n                        }\n                    }\n                ]\n            },\n            \"Id\": {\n                \"type\": \"integer\",\n                \"format\": \"int64\",\n                \"readOnly\": \"true\"\n            },\n            \"Order\": {\n                \"type\": \"object\",\n                \"xml\": {\n                    \"name\": \"Order\"\n                },\n                \"properties\": {\n                    \"id\": {\n                        \"description\": \"Order ID\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/Id\"\n                            }\n                        ]\n                    },\n                    \"petId\": {\n                        \"description\": \"Pet ID\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/Id\"\n                            }\n                        ]\n                    },\n                    \"quantity\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int32\",\n                        \"default\": \"1\",\n                        \"minimum\": 1.0\n                    },\n                    \"shipDate\": {\n                        \"type\": \"string\",\n                        \"description\": \"Estimated ship date\",\n                        \"format\": \"date-time\"\n                    },\n                    \"status\": {\n                        \"type\": \"string\",\n                        \"description\": \"Order Status\",\n                        \"enum\": [\n                            \"placed\",\n                            \"approved\",\n                            \"delivered\"\n                        ]\n                    },\n                    \"complete\": {\n                        \"type\": \"boolean\",\n                        \"readOnly\": true,\n                        \"description\": \"Indicates whenever order was completed or not\",\n                        \"default\": \"false\"\n                    },\n                    \"requestId\": {\n                        \"type\": \"string\",\n                        \"writeOnly\": true,\n                        \"description\": \"Unique Request Id\"\n                    }\n                }\n            },\n            \"Pet\": {\n                \"type\": \"object\",\n                \"discriminator\": {\n                    \"propertyName\": \"petType\",\n                    \"mapping\": {\n                        \"cat\": \"#/components/schemas/Cat\",\n                        \"dog\": \"#/components/schemas/Dog\",\n                        \"bee\": \"#/components/schemas/HoneyBee\"\n                    }\n                },\n                \"xml\": {\n                    \"name\": \"Pet\"\n                },\n                \"required\": [\n                    \"name\",\n                    \"photoUrls\"\n                ],\n                \"properties\": {\n                    \"id\": {\n                        \"description\": \"Pet ID\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/Id\"\n                            }\n                        ],\n                        \"externalDocs\": {\n                            \"description\": \"Find more info here\",\n                            \"url\": \"https://example.com\"\n                        }\n                    },\n                    \"category\": {\n                        \"description\": \"Categories this pet belongs to\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/Category\"\n                            }\n                        ]\n                    },\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"The name given to a pet\",\n                        \"example\": \"Guru\"\n                    },\n                    \"photoUrls\": {\n                        \"type\": \"array\",\n                        \"description\": \"The list of URL to a cute photos featuring pet\",\n                        \"maxItems\": 20,\n                        \"xml\": {\n                            \"name\": \"photoUrl\",\n                            \"wrapped\": true\n                        },\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"format\": \"url\"\n                        }\n                    },\n                    \"friend\": {\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/Pet\"\n                            }\n                        ]\n                    },\n                    \"tags\": {\n                        \"type\": \"array\",\n                        \"description\": \"Tags attached to the pet\",\n                        \"minItems\": 1,\n                        \"xml\": {\n                            \"name\": \"tag\",\n                            \"wrapped\": true\n                        },\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/Tag\"\n                        }\n                    },\n                    \"status\": {\n                        \"type\": \"string\",\n                        \"description\": \"Pet status in the store\",\n                        \"enum\": [\n                            \"available\",\n                            \"pending\",\n                            \"sold\"\n                        ]\n                    },\n                    \"petType\": {\n                        \"type\": \"string\",\n                        \"description\": \"Type of a pet\"\n                    }\n                }\n            },\n            \"Tag\": {\n                \"type\": \"object\",\n                \"xml\": {\n                    \"name\": \"Tag\"\n                },\n                \"properties\": {\n                    \"id\": {\n                        \"description\": \"Tag ID\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/Id\"\n                            }\n                        ]\n                    },\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Tag name\",\n                        \"minLength\": 1\n                    }\n                }\n            },\n            \"User\": {\n                \"type\": \"object\",\n                \"xml\": {\n                    \"name\": \"User\"\n                },\n                \"properties\": {\n                    \"id\": {\n                        \"$ref\": \"#/components/schemas/Id\"\n                    },\n                    \"pet\": {\n                        \"oneOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/Pet\"\n                            },\n                            {\n                                \"$ref\": \"#/components/schemas/Tag\"\n                            }\n                        ]\n                    },\n                    \"username\": {\n                        \"type\": \"string\",\n                        \"description\": \"User supplied username\",\n                        \"minLength\": 4,\n                        \"example\": \"John78\"\n                    },\n                    \"firstName\": {\n                        \"type\": \"string\",\n                        \"description\": \"User first name\",\n                        \"minLength\": 1,\n                        \"example\": \"John\"\n                    },\n                    \"lastName\": {\n                        \"type\": \"string\",\n                        \"description\": \"User last name\",\n                        \"minLength\": 1,\n                        \"example\": \"Smith\"\n                    },\n                    \"email\": {\n                        \"type\": \"string\",\n                        \"description\": \"User email address\",\n                        \"format\": \"email\",\n                        \"example\": \"john.smith@example.com\"\n                    },\n                    \"password\": {\n                        \"type\": \"string\",\n                        \"description\": \"User password, MUST contain a mix of upper and lower case letters, as well as digits\",\n                        \"format\": \"password\",\n                        \"minLength\": 8,\n                        \"pattern\": \"/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/\",\n                        \"example\": \"drowssaP123\"\n                    },\n                    \"phone\": {\n                        \"type\": \"string\",\n                        \"description\": \"User phone number in international format\",\n                        \"pattern\": \"/^\\\\+(?:[0-9]-?){6,14}[0-9]$/\",\n                        \"example\": \"+1-202-555-0192\"\n                    },\n                    \"userStatus\": {\n                        \"type\": \"integer\",\n                        \"description\": \"User status\",\n                        \"format\": \"int32\"\n                    }\n                }\n            }\n        },\n        \"examples\": {\n            \"Order\": {\n                \"value\": {\n                    \"quantity\": \"1\",\n                    \"shipDate\": \"2018-10-19T16:46:45Z\",\n                    \"status\": \"placed\",\n                    \"complete\": \"false\"\n                }\n            }\n        },\n        \"securitySchemes\": {\n            \"petstore_auth\": {\n                \"type\": \"oauth2\",\n                \"description\": \"Get access to data while protecting your account credentials.\\nOAuth2 is also a safer and more secure way to give you access.\\n\",\n                \"flows\": {\n                    \"implicit\": {\n                        \"authorizationUrl\": \"http://petstore.swagger.io/api/oauth/dialog\",\n                        \"scopes\": {\n                            \"write:pets\": \"modify pets in your account\",\n                            \"read:pets\": \"read your pets\"\n                        }\n                    }\n                }\n            },\n            \"api_key\": {\n                \"type\": \"apiKey\",\n                \"description\": \"For this sample, you can use the api key `special-key` to test the authorization filters.\\n\",\n                \"name\": \"api_key\",\n                \"in\": \"header\"\n            }\n        }\n    },\n    \"tags\": [\n        {\n            \"name\": \"pet\",\n            \"description\": \"Everything about your Pets\"\n        },\n        {\n            \"name\": \"store\",\n            \"description\": \"Access to Petstore orders\"\n        },\n        {\n            \"name\": \"user\",\n            \"description\": \"Operations about user\"\n        },\n        {\n            \"name\": \"pet_model\",\n            \"description\": \"\u003cSchemaDefinition schemaRef=\\\"#/components/schemas/Pet\\\" /\u003e\\n\",\n            \"x-displayName\": \"The Pet Model\"\n        },\n        {\n            \"name\": \"store_model\",\n            \"description\": \"\u003cSchemaDefinition schemaRef=\\\"#/components/schemas/Order\\\" exampleRef=\\\"#/components/examples/Order\\\" showReadOnly={true} showWriteOnly={true} /\u003e\\n\",\n            \"x-displayName\": \"The Order Model\"\n        }\n    ],\n    \"externalDocs\": {\n        \"description\": \"Find out how to create Github repo for your OpenAPI spec.\",\n        \"url\": \"https://github.com/Rebilly/generator-openapi-repo\"\n    },\n    \"x-tagGroups\": [\n        {\n            \"name\": \"General\",\n            \"tags\": [\n                \"pet\",\n                \"store\"\n            ]\n        },\n        {\n            \"name\": \"User Management\",\n            \"tags\": [\n                \"user\"\n            ]\n        },\n        {\n            \"name\": \"Models\",\n            \"tags\": [\n                \"pet_model\",\n                \"store_model\"\n            ]\n        }\n    ]\n}"
		}
	},
	"Error": "unmarshal: json: line 141:45: json: cannot unmarshal string into Go struct field Parameter.paths.get.parameters.deprecated of type bool"
}