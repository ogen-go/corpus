{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Redocly/redocly-cli"
		},
		"file": {
			"name": "petstore-with-errors.yaml",
			"size": 0,
			"path": "resources/petstore-with-errors.yaml",
			"byteSize": 3659,
			"content": "\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  description:\n    $ref: ./description.md\n  license:\n    name: MIT\nservers:\n  - url: http://petstore.swagger.io/v1\ntags:\n  - name: aaa\n  - name: pets\npaths:\n  /pets?id:\n    get:\n      summary: List all pets\n      operationId: listPets\n      requestBody:\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                summary:\n                  type: string\n                externalValue:\n                  type: number\n            example:\n              summary: A foo example\n              value: {\"foo\": \"bar\"}\n              externalValue: 'http://example.org/foo.json'\n            examples:\n              foo:\n                summary: A foo example\n                value: {\"foo\": \"bar\"}\n                externalValue: 'http://example.org/foo.json'\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: quer\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: test\n          in: path\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: A paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a pet\n      description: afasf\n      operationId: test\n      tags:\n        - pets\n      responses:\n        '201':\n          description: Null response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /pets/{petId}/TesSt:\n    get:\n      summary: Info for a specific pet\n      description: aaa\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  parameters:\n    anotherParam:\n      nname: anotherParam\n      schema:\n        type: intege\n      in: query\n  schemas:\n    Some:\n      type: integer\n      enum:\n        - 1\n        - 'adsad'\n        - 2\n    Pet:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n    Pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string",
			"canonicalURL": "/github.com/Redocly/redocly-cli@70c4d952f5585c17d667dbe53b0ab146fd9156a7/-/blob/resources/petstore-with-errors.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Redocly/redocly-cli/blob/70c4d952f5585c17d667dbe53b0ab146fd9156a7/resources/petstore-with-errors.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!map into string"
}