{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hiteshchoudhary/pro-backend-developer"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "tshirtstore/lcotshirtstore/swagger.yaml",
			"byteSize": 17006,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Tshirt store API\n  description: LCO - a course to create API for ecomm store\n  version: 1.1.0\n  contact:\n    email: hitesh@lco.dev\n    url: \"https://lco.dev\"\n\n# servers:\n#   - url: \"https://localhost:4000/api/v1\"\n#     description: for local host - secure\n#   - url: \"http://localhost:4000/api/v1\"\n#     description: for local host - regular\n\nservers:\n  - url: \"{protocol}://localhost:4000/api/{version}\"\n    description: for local host \n    variables:\n      version:\n        enum:\n          - v1\n          - v2\n        default: v1\n      protocol:\n        enum:\n          - http\n          - https\n        default: http\n\ncomponents:\n  securitySchemes:\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: token\n    BearerAuth:\n      type: http\n      scheme: bearer\n\n\npaths:\n  /dummy:\n    get:\n      tags:\n        - Home\n      summary: returns a greet message from LCO\n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                type: string\n                example: \"mystring\"\n        400:\n          description: Bad request\n        500:\n          description: internal server error\n  /signup:\n    post:\n      tags:\n        - User\n      summary: signup a new user. required files are - name, email, password and photo\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              required:\n                - name\n                - email\n                - password\n                - photo\n              properties:\n                name:\n                  type: string\n                  required: true\n                email:\n                  type: string\n                password:\n                  type: string\n                photo:\n                  in: formData\n                  description: The uploaded file data\n                  type: file\n                  format: binary\n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                  token:\n                    type: string\n                  user:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      email:\n                        type: string\n                      role:\n                        type: string\n                      photo:\n                        type: object\n                        properties:\n                          id:\n                            type: string\n                          secure_url:\n                            type: string\n                      _id:\n                        type: string\n                      createdAt:\n                        type: string\n        400:\n          description: Bad request\n        500:\n          description: internal server error\n  /login:\n    post:\n      tags:\n        - User\n      summary: login a new user. required files are -  email and password. Also add httpOnly cookie\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - email\n                - password\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                  token:\n                    type: string\n                  user:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      email:\n                        type: string\n                      role:\n                        type: string\n                      photo:\n                        type: object\n                        properties:\n                          id:\n                            type: string\n                          secure_url:\n                            type: string\n                      _id:\n                        type: string\n                      createdAt:\n                        type: string\n        400:\n          description: Bad request\n        500:\n          description: internal server error\n  /logout:\n    get:\n      tags:\n        - User\n      summary: get request to logout the user. Also removes httpOnly cookies \n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                  message:\n                    type: string\n                  \n        400:\n          description: Bad request\n        500:\n          description: internal server error\n\n  /forgotPassword:\n    post:\n      tags:\n        - User\n      summary: sends an email with link to forgot password. Contains the token for user validation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - email\n              properties:\n                email:\n                  type: string\n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                  message:\n                    type: string\n        400:\n          description: Bad request\n        500:\n          description: internal server error\n\n  /password/reset/{token}:\n    post:\n      tags:\n        - User\n      summary: Allows user to reset password, validated based on token. send password and confirm password fields\n      parameters:\n        - name: token\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - password\n                - confirmPassword\n              properties:\n                password:\n                  type: string\n                confirmPassword:\n                  type: string\n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                  token:\n                    type: string\n                  user:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      email:\n                        type: string\n                      role:\n                        type: string\n                      photo:\n                        type: object\n                        properties:\n                          id:\n                            type: string\n                          secure_url:\n                            type: string\n                      _id:\n                        type: string\n                      createdAt:\n                        type: string\n        400:\n          description: Bad request\n        500:\n          description: internal server error\n\n  /userdashboard:\n    get:\n      tags:\n        - User\n      summary: Gets all details about logged in user. Send token in cookies as named token or send Bearer Auth\n      requestBody:\n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                  user:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      email:\n                        type: string\n                      role:\n                        type: string\n                      photo:\n                        type: object\n                        properties:\n                          id:\n                            type: string\n                          secure_url:\n                            type: string\n                      _id:\n                        type: string\n                      createdAt:\n                        type: string\n        400:\n          description: Bad request\n        500:\n          description: internal server error\n\n  /password/update:\n    post:\n      tags:\n        - User\n      summary: User can update the password if he is logged in. Send oldPassword and password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - oldPassword\n                - password\n              properties:\n                oldPassword:\n                  type: string\n                password:\n                  type: string\n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                  user:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      email:\n                        type: string\n                      role:\n                        type: string\n                      photo:\n                        type: object\n                        properties:\n                          id:\n                            type: string\n                          secure_url:\n                            type: string\n                      _id:\n                        type: string\n                      createdAt:\n                        type: string\n        400:\n          description: Bad request\n        500:\n          description: internal server error\n\n  /userdashboard/update:\n    post:\n      tags:\n        - User\n      summary: User can update the name, emails and photo. Photo is optional\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              required:\n                - name\n                - email\n              properties:\n                name:\n                  type: string\n                email:\n                  type: string\n                photo:\n                  in: formData\n                  description: The uploaded file data\n                  type: file\n                  format: binary\n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                  \n        400:\n          description: Bad request\n        500:\n          description: internal server error\n\n  /admin/users:\n    get:\n      tags:\n        - Admin\n      summary: If user is admin, response will get array of all users\n      requestBody:\n        \n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    user:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                        email:\n                          type: string\n                        role:\n                          type: string\n                        photo:\n                          type: object\n                          properties:\n                            id:\n                              type: string\n                            secure_url:\n                              type: string\n                        _id:\n                          type: string\n                        createdAt:\n                          type: string\n                  \n        400:\n          description: Bad request\n        500:\n          description: internal server error\n\n  /admin/user/{id}:\n    get:\n      tags:\n        - Admin\n      summary: If user is admin, response will get details of 1 user\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        \n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                  type: object\n                  properties:\n                    user:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                        email:\n                          type: string\n                        role:\n                          type: string\n                        photo:\n                          type: object\n                          properties:\n                            id:\n                              type: string\n                            secure_url:\n                              type: string\n                        _id:\n                          type: string\n                        createdAt:\n                          type: string\n                  \n        400:\n          description: Bad request\n        500:\n          description: internal server error\n    put:\n      tags:\n        - Admin\n      summary: If user is admin, response will get details of 1 user\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: formData\n          required: true\n          schema:\n            type: string\n        - name: email\n          in: formData\n          required: true\n          schema:\n            type: string\n        - name: role\n          in: formData\n          required: true\n          schema:\n            type: string\n            enum: [user, admin, manager]\n      requestBody: \n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                  type: object\n                  properties:\n                    success:\n                      type: boolean\n                  \n        400:\n          description: Bad request\n        500:\n          description: internal server error\n    delete:\n      tags:\n        - Admin\n      summary: If user is admin, delete the user with given id\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody: \n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                  type: object\n                  properties:\n                    success:\n                      type: boolean\n                  \n        400:\n          description: Bad request\n        500:\n          description: internal server error\n\n  /manager/users:\n    get:\n      tags:\n        - Manager\n      summary: If manager, response will get array of all users whose role is user\n      requestBody:\n        \n      responses:\n        200:\n          description: All good success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    user:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                        email:\n                          type: string\n                        role:\n                          type: string\n                        photo:\n                          type: object\n                          properties:\n                            id:\n                              type: string\n                            secure_url:\n                              type: string\n                        _id:\n                          type: string\n                        createdAt:\n                          type: string\n                  \n        400:\n          description: Bad request\n        500:\n          description: internal server error\n\n\n",
			"canonicalURL": "/github.com/hiteshchoudhary/pro-backend-developer@d876ccc661b599c343890e82228a073002479aa6/-/blob/tshirtstore/lcotshirtstore/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/hiteshchoudhary/pro-backend-developer/blob/d876ccc661b599c343890e82228a073002479aa6/tshirtstore/lcotshirtstore/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!bool `true` into []string"
}