{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/microcks/microcks"
		},
		"file": {
			"name": "boba-openapi.json",
			"size": 0,
			"path": "commons/util/src/test/resources/io/github/microcks/util/openapi/boba-openapi.json",
			"byteSize": 45474,
			"content": "{\n  \"openapi\": \"3.1.0\",\n  \"info\": {\n    \"title\": \"BobaBoard's API documentation. Woho!\",\n    \"version\": \"0.0.1\",\n    \"description\": \"\\n# Intro\\nWelcome to the BobaBoard's backend API. This is still a WIP.\\n\\n# Example Section\\nThis is just to test that sections work. It will be written better later.\\n        \",\n    \"contact\": {\n      \"name\": \"Ms. Boba\",\n      \"url\": \"url\",\n      \"email\": \"email\"\n    }\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:4200/\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"tags\": [\n    {\n      \"name\": \"/posts/\",\n      \"description\": \"APIs related to the /posts/ endpoints.\"\n    },\n    {\n      \"name\": \"/threads/\",\n      \"description\": \"APIs related to the /threads/ endpoints.\"\n    },\n    {\n      \"name\": \"/boards/\",\n      \"description\": \"APIs related to the /boards/ endpoints.\"\n    },\n    {\n      \"name\": \"/realms/\",\n      \"description\": \"APIs related to the /realms/ endpoints.\"\n    },\n    {\n      \"name\": \"/users/\",\n      \"description\": \"APIs related to the /users/ endpoints.\"\n    },\n    {\n      \"name\": \"todo\",\n      \"description\": \"APIs whose documentation still needs work.\"\n    },\n    {\n      \"name\": \"models\",\n      \"x-displayName\": \"Models\",\n      \"description\": \"\\n## Contribution\\n\u003cSchemaDefinition schemaRef=\\\"#/components/schemas/Contribution\\\" /\u003e\\n\\n## Tags\\n\u003cSchemaDefinition schemaRef=\\\"#/components/schemas/Tags\\\" /\u003e\\n\\n## Comment\\n\u003cSchemaDefinition schemaRef=\\\"#/components/schemas/Comment\\\" /\u003e\\n\\n## Board Summary (logged in)\\n\u003cSchemaDefinition schemaRef=\\\"#/components/schemas/LoggedInBoardSummary\\\" /\u003e\\n\\n## Descriptions\\n\u003cSchemaDefinition schemaRef=\\\"#/components/schemas/Description\\\" /\u003e\\n\"\n    }\n  ],\n  \"x-tagGroups\": [\n    {\n      \"name\": \"general\",\n      \"tags\": [\"/realms/\", \"/boards/\", \"/threads/\", \"/posts/\", \"/users/\"]\n    },\n    {\n      \"name\": \"models\",\n      \"tags\": [\"models\"]\n    }\n  ],\n  \"paths\": {\n    \"/boards/{slug}\": {\n      \"get\": {\n        \"summary\": \"Fetches board metadata.\",\n        \"tags\": [\"/boards/\"],\n        \"security\": [\n          {\n            \"firebase\": []\n          },\n          []\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"slug\",\n            \"in\": \"path\",\n            \"description\": \"The slug of the board to update.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"examples\": {\n              \"existing\": {\n                \"summary\": \"An existing board\",\n                \"value\": \"gore\"\n              },\n              \"locked\": {\n                \"summary\": \"A board for logged in users only\",\n                \"value\": \"restricted\"\n              },\n              \"not-found\": {\n                \"summary\": \"A board that does not exists\",\n                \"value\": \"this_does_not_exist\"\n              }\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The board metadata.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/BoardMetadata\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/LoggedInBoardMetadata\"\n                    }\n                  ]\n                },\n                \"examples\": {\n                  \"existing\": {\n                    \"$ref\": \"#/components/examples/BoardsGore\"\n                  }\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"User was not found and board requires authentication.\"\n          },\n          \"403\": {\n            \"description\": \"User is not authorized to fetch the metadata of this board.\"\n          },\n          \"404\": {\n            \"description\": \"The board was not found.\"\n          }\n        }\n      }\n    },\n    \"boards/{slug}/metadata/update\": {\n      \"post\": {\n        \"summary\": \"Update boards metadata\",\n        \"tags\": [\"/boards/\", \"todo\"]\n      }\n    },\n    \"boards/{slug}/visits\": {\n      \"get\": {\n        \"summary\": \"Sets last visited time for board\",\n        \"tags\": [\"/boards/\"],\n        \"security\": [\n          {\n            \"firebase\": []\n          },\n          []\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"slug\",\n            \"in\": \"path\",\n            \"description\": \"The slug of the board to update.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The visit was successfully registered.\"\n          },\n          \"401\": {\n            \"description\": \"User was not found.\"\n          }\n        }\n      }\n    },\n    \"boards/{slug}/mute\": {\n      \"post\": {\n        \"summary\": \"Mutes a board.\",\n        \"description\": \"Mutes the specified board for the current user.\",\n        \"tags\": [\"/boards/\"],\n        \"security\": [\n          {\n            \"firebase\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"slug\",\n            \"in\": \"path\",\n            \"description\": \"The name of the board to mute.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The board was successfully muted.\"\n          },\n          \"401\": {\n            \"description\": \"User was not found in request that requires authentication.\"\n          },\n          \"403\": {\n            \"description\": \"User is not authorized to perform the action.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Unmutes a board.\",\n        \"description\": \"Unmutes the specified board for the current user.\",\n        \"tags\": [\"/boards/\"],\n        \"security\": [\n          {\n            \"firebase\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"slug\",\n            \"in\": \"path\",\n            \"description\": \"The name of the board to unmute.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The board was successfully unmuted.\"\n          },\n          \"401\": {\n            \"description\": \"User was not found in request that requires authentication.\"\n          },\n          \"403\": {\n            \"description\": \"User is not authorized to perform the action.\"\n          }\n        }\n      }\n    },\n    \"boards/{slug}/pin\": {\n      \"post\": {\n        \"summary\": \"Pins a board.\",\n        \"description\": \"Pins the specified board for the current user.\",\n        \"tags\": [\"/boards/\"],\n        \"security\": [\n          {\n            \"firebase\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"slug\",\n            \"in\": \"path\",\n            \"description\": \"The name of the board to pin.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The board was successfully pinned.\"\n          },\n          \"401\": {\n            \"description\": \"User was not found in request that requires authentication.\"\n          },\n          \"403\": {\n            \"description\": \"User is not authorized to perform the action.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Unpins a board.\",\n        \"description\": \"Unpins the specified board for the current user.\",\n        \"tags\": [\"/boards/\"],\n        \"security\": [\n          {\n            \"firebase\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"slug\",\n            \"in\": \"path\",\n            \"description\": \"The name of the board to unpin.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The board was successfully unpinned.\"\n          },\n          \"401\": {\n            \"description\": \"User was not found in request that requires authentication.\"\n          },\n          \"403\": {\n            \"description\": \"User is not authorized to perform the action.\"\n          }\n        }\n      }\n    },\n    \"boards/{slug}/notifications/dismiss\": {\n      \"post\": {\n        \"summary\": \"Dismiss all notifications for board {slug}\",\n        \"tags\": [\"/boards/\", \"todo\"]\n      }\n    },\n    \"boards/{slug}/activity/latest\": {\n      \"get\": {\n        \"summary\": \"Get latest board activity (TODO).\",\n        \"tags\": [\"/boards/\", \"todo\"],\n        \"parameters\": [\n          {\n            \"name\": \"slug\",\n            \"in\": \"path\",\n            \"description\": \"The slug of the board to fetch the activity of.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The board activity.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/BoardActivity\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"The board was not found.\"\n          }\n        }\n      }\n    },\n    \"posts/{post_id}/contribution\": {\n      \"post\": {\n        \"summary\": \"Replies to a contribution.\",\n        \"description\": \"Posts a contribution replying to the one with id {postId}.\",\n        \"tags\": [\"/posts/\"],\n        \"security\": [\n          {\n            \"firebase\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"post_id\",\n            \"in\": \"path\",\n            \"description\": \"The uuid of the contribution to reply to.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"The details of the contribution to post.\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"allOf\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"content\": {\n                        \"required\": true,\n                        \"type\": \"string\",\n                        \"format\": \"quill-delta\"\n                      }\n                    }\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/Tags\"\n                  },\n                  {\n                    \"$ref\": \"#/components/params/Identity\"\n                  }\n                ]\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The contribution was successfully created.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"contribution\": {\n                      \"$ref\": \"#/components/schemas/Contribution\",\n                      \"description\": \"Finalized details of the contributions just posted.\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"User was not found in request that requires authentication.\"\n          },\n          \"403\": {\n            \"description\": \"User is not authorized to perform the action.\"\n          }\n        }\n      },\n      \"patch\": {\n        \"summary\": \"Edits a contribution.\",\n        \"description\": \"Edits a contribution (for now just its tags).\",\n        \"tags\": [\"/posts/\"],\n        \"security\": [\n          {\n            \"firebase\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"post_id\",\n            \"in\": \"path\",\n            \"description\": \"The uuid of the contribution to edit.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"The details of the contribution to edit.\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Tags\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The contribution was successfully edited.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"contribution\": {\n                      \"$ref\": \"#/components/schemas/Contribution\",\n                      \"description\": \"Finalized details of the contributions just edited.\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"User was not found in request that requires authentication.\"\n          },\n          \"403\": {\n            \"description\": \"User is not authorized to perform the action.\"\n          }\n        }\n      }\n    },\n    \"posts/{post_id}/comment\": {\n      \"post\": {\n        \"summary\": \"Add comments to a contribution, optionally nested under another comment.\",\n        \"description\": \"Creates a comment nested under the contribution with id {post_id}.\",\n        \"tags\": [\"/posts/\"],\n        \"security\": [\n          {\n            \"firebase\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"post_id\",\n            \"in\": \"path\",\n            \"description\": \"The uuid of the contribution to reply to.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"The details of the comment to post.\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"allOf\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"contents\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                          \"$ref\": \"#/components/schemas/Comment\"\n                        }\n                      },\n                      \"reply_to_comment_id\": {\n                        \"nullable\": true,\n                        \"type\": \"string\",\n                        \"format\": \"uuid\"\n                      }\n                    }\n                  },\n                  {\n                    \"$ref\": \"#/components/params/Identity\"\n                  }\n                ]\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The comments were successfully created.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"comments\": {\n                      \"description\": \"Finalized details of the comments just posted.\",\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"$ref\": \"#/components/schemas/Comment\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"User was not found in request that requires authentication.\"\n          },\n          \"403\": {\n            \"description\": \"User is not authorized to perform the action.\"\n          }\n        }\n      }\n    },\n    \"realms/slug/{realm_slug}/\": {\n      \"get\": {\n        \"summary\": \"Fetches the top-level realm metadata by slug.\",\n        \"tags\": [\"/realms/\"],\n        \"parameters\": [\n          {\n            \"name\": \"realm_slug\",\n            \"in\": \"path\",\n            \"description\": \"The slug of the realm.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The realm metadata.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Realm\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"realms/{realm_id}/activity\": {\n      \"get\": {\n        \"summary\": \"Fetches latest activity summary for the realm.\",\n        \"tags\": [\"/realms/\"],\n        \"security\": [\n          [],\n          {\n            \"firebase\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"realm_id\",\n            \"in\": \"path\",\n            \"description\": \"The id of the realm.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The realm activity summary.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RealmActivity\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"threads/{thread_id}\": {\n      \"get\": {\n        \"summary\": \"Fetches thread data.\",\n        \"tags\": [\"/threads/\"],\n        \"security\": [\n          {\n            \"firebase\": []\n          },\n          []\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"thread_id\",\n            \"in\": \"path\",\n            \"description\": \"The id of the thread to fetch.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The thread data.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Thread\"\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"User was not found and thread requires authentication.\"\n          },\n          \"403\": {\n            \"description\": \"User is not authorized to fetch this thread.\"\n          },\n          \"404\": {\n            \"description\": \"The thread was not found.\"\n          }\n        }\n      }\n    },\n    \"users/@me\": {\n      \"get\": {\n        \"summary\": \"Gets data for the current user.\",\n        \"tags\": [\"/users/\"],\n        \"security\": [\n          {\n            \"firebase\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The user data.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"username\": {\n                      \"type\": \"string\"\n                    },\n                    \"avatar_url\": {\n                      \"type\": \"string\",\n                      \"format\": \"uri\"\n                    },\n                    \"pinned_boards\": {\n                      \"description\": \"A map from board id to its LoggedInSummary for each pinned board.\\n\",\n                      \"type\": \"object\",\n                      \"additionalProperties\": {\n                        \"allOf\": [\n                          {\n                            \"$ref\": \"#/components/schemas/LoggedInBoardSummary\"\n                          },\n                          {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"index\": {\n                                \"type\": \"number\"\n                              }\n                            },\n                            \"required\": [\"index\"]\n                          }\n                        ]\n                      }\n                    }\n                  },\n                  \"required\": [\"pinned_boards\"]\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"User was not found in request that requires authentication.\"\n          },\n          \"403\": {\n            \"description\": \"User is not authorized to perform the action.\"\n          }\n        }\n      }\n    },\n    \"users/@me/notifications\": {\n      \"get\": {\n        \"summary\": \"Gets notifications data for the current user.\",\n        \"description\": \"Gets notifications data for the current user, including pinned boards.\\nIf `realm_id` is present, also fetch notification data for the current realm.\\n\",\n        \"tags\": [\"/users/\"],\n        \"security\": [\n          {\n            \"firebase\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The notifications data.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"has_notifications\": {\n                      \"type\": \"boolean\"\n                    },\n                    \"is_outdated_notifications\": {\n                      \"type\": \"boolean\"\n                    },\n                    \"realm_boards\": {\n                      \"description\": \"A map from board id to its NotificationsStatus for each realm board.\\nIf `realm_id` is not present in the params, it will be empty.\\n\",\n                      \"type\": \"object\",\n                      \"additionalProperties\": {\n                        \"$ref\": \"#/components/schemas/BoardNotifications\"\n                      }\n                    },\n                    \"pinned_boards\": {\n                      \"description\": \"A map from board id to its NotificationsStatus for each pinned board.\\n\",\n                      \"type\": \"object\",\n                      \"additionalProperties\": {\n                        \"$ref\": \"#/components/schemas/BoardNotifications\"\n                      }\n                    }\n                  },\n                  \"required\": [\n                    \"has_notifications\",\n                    \"is_outdated_notifications\",\n                    \"pinned_boards\",\n                    \"realm_boards\"\n                  ]\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"User was not found in request that requires authentication.\"\n          },\n          \"403\": {\n            \"description\": \"User is not authorized to perform the action.\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"BoardActivity\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"cursor\": {\n            \"$ref\": \"#/components/schemas/Cursor\"\n          },\n          \"activity\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ThreadSummary\"\n            }\n          }\n        }\n      },\n      \"BoardActivitySummary\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"last_post_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"nullable\": true\n          },\n          \"last_comment_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"nullable\": true\n          },\n          \"last_activity_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"nullable\": true\n          },\n          \"last_activity_from_others_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"nullable\": true\n          },\n          \"last_visit_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"nullable\": true\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"last_post_at\",\n          \"last_comment_at\",\n          \"last_activity_at\",\n          \"last_activity_from_others_at\",\n          \"last_visit_at\"\n        ]\n      },\n      \"BoardSummary\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"realm_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"slug\": {\n            \"type\": \"string\"\n          },\n          \"avatar_url\": {\n            \"type\": \"string\",\n            \"format\": \"uri\"\n          },\n          \"tagline\": {\n            \"type\": \"string\"\n          },\n          \"accent_color\": {\n            \"type\": \"string\",\n            \"format\": \"color\"\n          },\n          \"logged_in_only\": {\n            \"type\": \"boolean\"\n          },\n          \"delisted\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"realm_id\",\n          \"slug\",\n          \"avatar_url\",\n          \"tagline\",\n          \"accent_color\",\n          \"logged_in_only\",\n          \"delisted\"\n        ]\n      },\n      \"LoggedInBoardSummary\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/BoardSummary\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"muted\": {\n                \"type\": \"boolean\"\n              },\n              \"pinned\": {\n                \"type\": \"boolean\"\n              }\n            }\n          }\n        ],\n        \"required\": [\"muted\", \"pinned\"]\n      },\n      \"BoardMetadata\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/BoardSummary\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"id\": {\n                \"type\": \"string\",\n                \"format\": \"uuid\"\n              },\n              \"slug\": {\n                \"type\": \"string\"\n              },\n              \"descriptions\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/Description\"\n                }\n              }\n            }\n          }\n        ]\n      },\n      \"LoggedInBoardMetadata\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/LoggedInBoardSummary\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/BoardMetadata\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"accessories\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/Accessory\"\n                }\n              },\n              \"permissions\": {\n                \"$ref\": \"#/components/schemas/Permissions\"\n              },\n              \"posting_identities\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/PostingIdentity\"\n                }\n              }\n            }\n          }\n        ]\n      },\n      \"Comment\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"parent_post_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"parent_comment_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"chain_parent_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"content\": {\n            \"type\": \"string\",\n            \"format\": \"quill-delta\"\n          },\n          \"secret_identity\": {\n            \"description\": \"The public-facing identity associated with the comment.\",\n            \"$ref\": \"#/components/schemas/SecretIdentity\"\n          },\n          \"user_identity\": {\n            \"description\": \"The identity of the original poster, if visible to the requester.\",\n            \"$ref\": \"#/components/schemas/Identity\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"own\": {\n            \"type\": \"boolean\"\n          },\n          \"new\": {\n            \"type\": \"boolean\"\n          },\n          \"friend\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"parent_post_id\",\n          \"content\",\n          \"created_at\",\n          \"secret_identity\",\n          \"new\",\n          \"own\",\n          \"friend\"\n        ]\n      },\n      \"Contribution\": {\n        \"description\": \"A contribution to a thread.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"parent_thread_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"parent_post_id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"parent_board_slug\": {\n            \"type\": \"string\",\n            \"format\": \"string\"\n          },\n          \"content\": {\n            \"type\": \"string\",\n            \"format\": \"quill-delta\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"secret_identity\": {\n            \"description\": \"The public-facing identity associated with the contribution.\",\n            \"$ref\": \"#/components/schemas/SecretIdentity\"\n          },\n          \"user_identity\": {\n            \"description\": \"The identity of the original poster, if visible to the requester.\",\n            \"$ref\": \"#/components/schemas/Identity\"\n          },\n          \"new\": {\n            \"type\": \"boolean\"\n          },\n          \"own\": {\n            \"type\": \"boolean\"\n          },\n          \"friend\": {\n            \"type\": \"boolean\"\n          },\n          \"total_comments_amount\": {\n            \"type\": \"number\"\n          },\n          \"new_comments_amount\": {\n            \"type\": \"number\"\n          },\n          \"comments\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Comment\"\n            }\n          },\n          \"tags\": {\n            \"type\": \"object\",\n            \"$ref\": \"#/components/schemas/Tags\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"enum\": [\"text\"],\n            \"deprecated\": true\n          },\n          \"anonymity_type\": {\n            \"type\": \"string\",\n            \"enum\": [\"everyone\", \"friends_only\"],\n            \"deprecated\": true\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"parent_post_id\",\n          \"parent_thread_id\",\n          \"parent_board_slug\",\n          \"content\",\n          \"created_at\",\n          \"secret_identity\",\n          \"friend\",\n          \"own\",\n          \"new\",\n          \"total_comments_amount\",\n          \"new_comments_amount\",\n          \"comments\",\n          \"tags\"\n        ]\n      },\n      \"Cursor\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"next\": {\n            \"description\": \"Pagination link pointing to the next page.\",\n            \"type\": \"string\",\n            \"format\": \"uri\"\n          }\n        },\n        \"required\": [\"next\"]\n      },\n      \"Description\": {\n        \"oneOf\": [\n          {\n            \"$ref\": \"#/components/schemas/TextDescription\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/CategoryFilterDescription\"\n          }\n        ],\n        \"discriminator\": {\n          \"propertyName\": \"type\",\n          \"mapping\": {\n            \"text\": \"#/components/schemas/TextDescription\",\n            \"category_filter\": \"#/components/schemas/CategoryFilterDescription\"\n          }\n        }\n      },\n      \"BaseDescription\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"index\": {\n            \"type\": \"number\"\n          },\n          \"title\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\"id\", \"index\", \"title\"]\n      },\n      \"TextDescription\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/BaseDescription\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"type\": {\n                \"type\": \"string\",\n                \"enum\": [\"text\"]\n              },\n              \"description\": {\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\"type\", \"description\"]\n          }\n        ]\n      },\n      \"CategoryFilterDescription\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/BaseDescription\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"type\": {\n                \"type\": \"string\",\n                \"enum\": [\"category_filter\"]\n              },\n              \"categories\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            },\n            \"required\": [\"type\", \"categories\"]\n          }\n        ]\n      },\n      \"Feed\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"cursor\": {\n            \"$ref\": \"#/components/schemas/Cursor\"\n          },\n          \"activity\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ThreadSummary\"\n            }\n          }\n        }\n      },\n      \"Identity\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"avatar\": {\n            \"type\": \"string\",\n            \"format\": \"url\"\n          }\n        },\n        \"required\": [\"name\", \"avatar\"]\n      },\n      \"SecretIdentity\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"avatar\": {\n            \"type\": \"string\",\n            \"format\": \"url\"\n          },\n          \"color\": {\n            \"type\": \"string\"\n          },\n          \"accessory\": {\n            \"type\": \"string\",\n            \"format\": \"url\"\n          }\n        },\n        \"required\": [\"name\", \"avatar\"]\n      },\n      \"Accessory\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"accessory\": {\n            \"type\": \"string\",\n            \"format\": \"uri\"\n          }\n        },\n        \"required\": [\"id\", \"name\", \"accessory\"]\n      },\n      \"PostingIdentity\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"avatar\": {\n            \"type\": \"string\",\n            \"format\": \"uri\"\n          },\n          \"color\": {\n            \"type\": \"string\",\n            \"format\": \"color\"\n          },\n          \"accessory\": {\n            \"type\": \"string\",\n            \"format\": \"uri\"\n          }\n        },\n        \"required\": [\"id\", \"name\", \"avatar\"]\n      },\n      \"BoardNotifications\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"has_updates\": {\n            \"description\": \"Whether the board has a notification.\",\n            \"type\": \"boolean\"\n          },\n          \"is_outdated\": {\n            \"description\": \"Whether the board's notifications are older than the user's last visit.\",\n            \"type\": \"boolean\"\n          },\n          \"last_activity_at\": {\n            \"description\": \"When the board was last updated.\",\n            \"type\": \"date-time\",\n            \"nullable\": true\n          },\n          \"last_activity_from_others_at\": {\n            \"description\": \"When the board was last updated by someone other than the current user.\",\n            \"type\": \"date-time\",\n            \"nullable\": true\n          },\n          \"last_visited at\": {\n            \"description\": \"When the board was last visited by the current user.\",\n            \"type\": \"date-time\",\n            \"nullable\": true\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"realm_id\",\n          \"slug\",\n          \"avatar_url\",\n          \"accent_color\",\n          \"logged_in_only\",\n          \"delisted\"\n        ]\n      },\n      \"Permissions\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"board_permissions\": {\n            \"$ref\": \"#/components/schemas/BoardPermissions\"\n          },\n          \"post_permissions\": {\n            \"$ref\": \"#/components/schemas/PostPermissions\"\n          },\n          \"thread_permissions\": {\n            \"$ref\": \"#/components/schemas/ThreadPermission\"\n          }\n        },\n        \"required\": [\n          \"board_permissions\",\n          \"post_permissions\",\n          \"thread_permissions\"\n        ]\n      },\n      \"BoardPermissions\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\",\n          \"enum\": [\"edit_metadata\"]\n        }\n      },\n      \"PostPermissions\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"edit_content\",\n            \"edit_whisper_tags\",\n            \"edit_category_tags\",\n            \"edit_index_tags\",\n            \"edit_content_notices\"\n          ]\n        }\n      },\n      \"ThreadPermission\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\",\n          \"enum\": [\"move_thread\"]\n        }\n      },\n      \"RealmSettings\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"root\": {\n            \"type\": \"obect\",\n            \"properties\": {\n              \"cursor\": {\n                \"type\": \"object\"\n              }\n            }\n          },\n          \"index_page\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Setting\"\n            }\n          },\n          \"board_page\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Setting\"\n            }\n          },\n          \"thread_page\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Setting\"\n            }\n          }\n        },\n        \"required\": [\"root\", \"index_page\", \"board_page\", \"thread_page\"]\n      },\n      \"Realm\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"slug\": {\n            \"type\": \"string\"\n          },\n          \"settings\": {\n            \"$ref\": \"#/components/schemas/RealmSettings\"\n          },\n          \"boards\": {\n            \"$ref\": \"#/components/schemas/BoardSummary\"\n          }\n        },\n        \"required\": [\"id\", \"slug\", \"settings\"]\n      },\n      \"RealmActivity\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"description\": \"The Realm id.\",\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"boards\": {\n            \"description\": \"The activity summary for each board in the realm. |\\nKeys are the uuid of each board.\\n\",\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"allOf\": [\n                {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"string\",\n                      \"format\": \"uuid\"\n                    }\n                  }\n                },\n                {\n                  \"$ref\": \"#/components/schemas/BoardActivitySummary\"\n                }\n              ]\n            }\n          }\n        }\n      },\n      \"Setting\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"todo\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"Tags\": {\n        \"description\": \"Types of tags associated to a contribution.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"whisper_tags\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"index_tags\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"category_tags\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"content_warnings\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"ThreadActivitySummary\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"new_posts_amount\": {\n            \"type\": \"number\"\n          },\n          \"new_comments_amount\": {\n            \"type\": \"number\"\n          },\n          \"total_comments_amount\": {\n            \"type\": \"number\"\n          },\n          \"total_posts_amount\": {\n            \"type\": \"number\"\n          },\n          \"direct_threads_amount\": {\n            \"type\": \"number\"\n          },\n          \"last_activity_at\": {\n            \"type\": \"number\"\n          }\n        },\n        \"required\": [\n          \"new_posts_amount\",\n          \"new_comments_amount\",\n          \"total_comments_amount\",\n          \"total_posts_amount\",\n          \"direct_threads_amount\",\n          \"last_activity\"\n        ]\n      },\n      \"ThreadSummary\": {\n        \"allOf\": [\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"id\": {\n                \"type\": \"string\",\n                \"format\": \"uuid\"\n              },\n              \"parent_board_slug\": {\n                \"type\": \"string\"\n              },\n              \"starter\": {\n                \"description\": \"The contribution that starts the thread.\",\n                \"$ref\": \"#/components/schemas/Contribution\"\n              },\n              \"default_view\": {\n                \"type\": \"string\",\n                \"enum\": [\"thread\", \"gallery\", \"timeline\"]\n              },\n              \"muted\": {\n                \"description\": \"Whether the contribution is muted. False when the user is logged out.\",\n                \"type\": \"boolean\"\n              },\n              \"hidden\": {\n                \"description\": \"Whether the contribution is hidden. False when the user is logged out.\",\n                \"type\": \"boolean\"\n              }\n            },\n            \"required\": [\n              \"id\",\n              \"parent_board_slug\",\n              \"starter\",\n              \"default_view\",\n              \"muted\",\n              \"hidden\"\n            ]\n          },\n          {\n            \"$ref\": \"#/components/schemas/ThreadActivitySummary\"\n          }\n        ]\n      },\n      \"Thread\": {\n        \"allOf\": [\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"posts\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/Contribution\"\n                }\n              },\n              \"comments\": {\n                \"description\": \"A map from post_id to its comments.\",\n                \"type\": \"object\",\n                \"additionalProperties\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Comment\"\n                  }\n                }\n              }\n            },\n            \"required\": [\"posts\", \"comments\"]\n          },\n          {\n            \"$ref\": \"#/components/schemas/ThreadSummary\"\n          }\n        ]\n      }\n    },\n    \"securitySchemes\": {\n      \"firebase\": {\n        \"description\": \"Default bobaserver authentication, powered by firebase.\",\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"in\": \"header\",\n        \"bearerFormat\": \"JWT\",\n        \"x-google-issuer\": \"https://securetoken.google.com/bobaboard-fb\",\n        \"x-google-jwks_uri\": \"https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com\",\n        \"x-google-audiences\": \"bobaboard-fb\"\n      }\n    },\n    \"params\": {\n      \"Identity\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"accessory_id\": {\n            \"description\": \"The accessory to associate with the attached entity.\",\n            \"nullable\": true,\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"identity_id\": {\n            \"description\": \"The identity to associate with the attached entity, if fixed.\",\n            \"nullable\": true,\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          }\n        }\n      }\n    },\n    \"examples\": {\n      \"BoardsParam\": [\n        {\n          \"existing\": {\n            \"summary\": \"An existing board\",\n            \"value\": \"gore\"\n          }\n        },\n        {\n          \"locked\": {\n            \"summary\": \"A board for logged in users only\",\n            \"value\": \"restricted\"\n          }\n        },\n        {\n          \"not-found\": {\n            \"summary\": \"A board that does not exists\",\n            \"value\": \"this_does_not_exist\"\n          }\n        }\n      ],\n      \"BoardsGore\": {\n        \"summary\": \"An existing board\",\n        \"value\": {\n          \"id\": \"396be545-e2d4-4497-a5b5-700e89ab99c0\",\n          \"realm_id\": \"f377afb3-5c62-40cc-8f07-1f4749a780eb\",\n          \"slug\": \"gore\",\n          \"tagline\": \"Blood! Blood! Blood!\",\n          \"avatar_url\": \"/gore.png\",\n          \"accent_color\": \"#f96680\",\n          \"delisted\": false,\n          \"logged_in_only\": false,\n          \"descriptions\": []\n        }\n      }\n    }\n  }\n}",
			"canonicalURL": "/github.com/microcks/microcks@221798eec41519ec42dc7ab91801c5a3ca2b627d/-/blob/commons/util/src/test/resources/io/github/microcks/util/openapi/boba-openapi.json",
			"externalURLs": [
				{
					"url": "https://github.com/microcks/microcks/blob/221798eec41519ec42dc7ab91801c5a3ca2b627d/commons/util/src/test/resources/io/github/microcks/util/openapi/boba-openapi.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 69: cannot unmarshal !!seq into map[string][]string; yaml: line 146: cannot unmarshal !!seq into map[string][]string; yaml: line 374: cannot unmarshal !!bool `true` into []string; yaml: line 590: cannot unmarshal !!seq into map[string][]string; yaml: line 629: cannot unmarshal !!seq into map[string][]string; yaml: line 1618: cannot unmarshal !!seq into ogen.Example"
}