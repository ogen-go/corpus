{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/eiko-team/eiko"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "swagger.yml",
			"byteSize": 20186,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.1\n  title: Eiko's API\n  description: Aiko's API\nsecurity:\n  - accessCode:\n      - read\n      - write\nservers:\n  - url: 'https://eiko-app.com/api'\ncomponents:\n  responses:\n    Error: # $ref: '#/components/responses/Error'\n      description: An error occured, please check response body's code\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  schemas:\n    Token: # $ref: '#/components/schemas/Token'\n      type: object\n      properties:\n        token:\n          type: string\n    Error: # $ref: '#/components/schemas/Error'\n      type: object\n      properties:\n        error:\n          type: string\n    Query: # $ref: '#/components/schemas/Query'\n      type: object\n      properties:\n        Query:\n          type: string\n        Limit:\n          type: integer\n        Size:\n          type: integer\n          format: uint64\n        Latitude:\n          type: number\n          format: double\n        Longitude:\n          type: number\n          format: double\n    List: # $ref: '#/components/schemas/List'\n      type: object\n      properties:\n        ID:\n          type: integer\n          format: uint64\n        Name:\n          type: string\n    ConsumableID: # $ref: '#/components/schemas/ConsumableID'\n      type: object\n      properties:\n        ConsumableID:\n          type: integer\n          format: uint64\n        StoreID:\n          type: integer\n          format: uint64\n        StockID:\n          type: integer\n          format: uint64\n    ListContent: # $ref: '#/components/schemas/ListContent'\n      type: object\n      properties:\n        ID:\n          type: integer\n          format: uint64\n        ListID:\n          type: integer\n          format: uint64\n        Consumable:\n          $ref: '#/components/schemas/ConsumableID'\n        Name:\n          type: string\n        Done:\n          type: boolean\n        Erased:\n          type: boolean\n        Mode:\n          type: string\n          pattern: '^(sample|consumable|personnal)$'\n    Consumable: # $ref: '#/components/schemas/Consumable'\n      type: object\n      properties:\n        ID:\n          type: integer\n          format: int64\n        Name:\n          type: string\n        Compagny:\n          type: string\n        Manufacturing:\n          type: string\n        Created:\n          type: date-time\n        Creator:\n          type: integer\n          format: int64\n        NewVersion:\n          type: integer\n          format: int64\n        Source:\n          type: string\n        Code:\n          type: array\n          items:\n            type: string\n        Categories:\n          type: array\n          items:\n            type: string\n        Tags:\n          type: array\n          items:\n            type: string\n        Packaging:\n          type: array\n          items:\n            type: string\n        Fat:\n          type: number\n          format: double\n        Fiber:\n          type: number\n          format: double\n        Glucides:\n          type: number\n          format: double\n        Proteins:\n          type: number\n          format: double\n        Sodium:\n          type: number\n          format: double\n        SaturatedFat:\n          type: number\n          format: double\n        SugarGlucides:\n          type: number\n          format: double\n        Energy:\n          type: number\n          format: double\n        Alcool:\n          type: number\n          format: double\n        Additive:\n          type: array\n          items:\n            type: string\n        Ingredient:\n          type: array\n          items:\n            type: string\n        Vitamins:\n          type: array\n          items:\n            type: string\n        Allergen:\n          type: array\n          items:\n            type: string\n        Nutriscore:\n          type: string\n        Back:\n          type: string\n        Composition:\n          type: string\n        Front:\n          type: string\n        Grammes:\n          type: integer\n        MLitre:\n          type: integer\n        Label:\n          type: array\n          items:\n            type: string\n\npaths:\n  /register:\n    post:\n      summary: User registration\n      description: Provide a token and create a user with the given credentials\n      responses:\n        '200':\n          description: Here is your token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_email:\n                  type: string\n                user_password:\n                  type: string\n  /login:\n    post:\n      summary: User login\n      description: Provide a token with the given credentials\n      responses:\n        '200':\n          description: Here is your token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_email:\n                  type: string\n                user_password:\n                  type: string\n  /delete:\n    post:\n      summary: User detetion\n      description: Completely removes a user\n      responses:\n        '200':\n          description: OK\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - user\n      parameters:\n        - in: cookie\n          name: token\n          schema:\n            type: string\n  /updatetoken:\n    post:\n      summary: Update a token\n      description: Update a token\n      responses:\n        '200':\n          description: Token updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - user\n      parameters:\n        - in: cookie\n          name: token\n          description: The user's token\n          required: true\n          schema:\n            type: string\n  /verify/email:\n    post:\n      summary: Checks if the email is available\n      description: \u003e\n        Checks if the email is available to use as a email for the\n        account to be created\n      responses:\n        '200':\n          description: Available\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  available:\n                    type: string\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - verify\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_email:\n                  type: string\n  /verify/password:\n    post:\n      summary: Checks the password strength\n      description: \u003e\n        Return the strength of the provided password, from 0 to 4.\n        Checks the length of the password, and it's content:\n        if it contains [a-z], it is a start.\n        if it contains [A-Z], it is a greater start.\n        if it contains ([\\x21-\\x2F]|[\\x3A-\\x40]) (!\"#$%\u0026'()*+,-./ || :;\u003c=\u003e?@), it is a good.\n        if it contains ([\\x5B-\\x60]|[\\x7B-\\x7E]) ([\\]^_` || {|}~), it is a strong password.\n      responses:\n        '200':\n          description: Available\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  strength:\n                    type: integer\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - verify\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                password:\n                  type: string\n  /log:\n    post:\n      summary: Do some logs\n      description: \u003e\n        Add a new log if the storage solution\n      responses:\n        '200':\n          description: The logging was successfull\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  done:\n                    type: string\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - global\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                message:\n                  type: string\n      parameters:\n        - in: cookie\n          required: false\n          name: token\n          schema:\n            type: string\n  /store/add:\n    post:\n      summary: Create a new store\n      description: \u003e\n        Create a new store on call\n      responses:\n        '200':\n          description: The creation was successfull\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  done:\n                    type: string\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - store\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                address:\n                  type: string\n                country:\n                  type: string\n                zip:\n                  type: string\n                user_rating:\n                  type: integer\n      parameters:\n        - in: cookie\n          name: token\n          description: The user's token\n          required: true\n          schema:\n            type: string\n  /store/get:\n    post:\n      summary: Get a store\n      description: \u003e\n        Get a store informations with given informations\n      responses:\n        '200':\n          description: Informations on the store\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  name:\n                    type: string\n                  address:\n                    type: string\n                  country:\n                    type: string\n                  zip:\n                    type: string\n                  user_rating:\n                    type: integer\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - store\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                address:\n                  type: string\n                country:\n                  type: string\n                zip:\n                  type: string\n                user_rating:\n                  type: integer\n      parameters:\n        - in: cookie\n          name: token\n          description: The user's token\n          required: true\n          schema:\n            type: string\n  /store/update:\n    post:\n      summary: Update a store value\n      description: \u003e\n        Update store value, like renaming or adresss changes.\n      responses:\n        '200':\n          description: Informations on the store\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  done:\n                    type: boolean\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - store\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                address:\n                  type: string\n                country:\n                  type: string\n                zip:\n                  type: string\n                user_rating:\n                  type: integer\n                ID:\n                  type: integer\n      parameters:\n        - in: cookie\n          name: token\n          description: The user's token\n          required: true\n          schema:\n            type: string\n  /store/delete:\n    post:\n      summary: Delete store\n      description: \u003e\n        Delete a Store and all related values.\n      responses:\n        '200':\n          description: Informations on the store\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  done:\n                    type: boolean\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - store\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ID:\n                  type: integer\n      parameters:\n        - in: cookie\n          name: token\n          description: The user's token\n          required: true\n          schema:\n            type: string\n  /store/score:\n    post:\n      summary: Add A score to a store\n      description: \u003e\n        Add a new score to the store\n      responses:\n        '200':\n          description: Informations on the store\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  done:\n                    type: boolean\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - store\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_rating:\n                  type: integer\n                ID:\n                  type: integer\n      parameters:\n        - in: cookie\n          name: token\n          description: The user's token\n          required: true\n          schema:\n            type: string\n  /consumable/add:\n    post:\n      summary: Create a new consumable\n      description: \u003e\n        Create and store a new consumable and return the id of this consumable\n      responses:\n        '200':\n          description: The ID of the consumable\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  done:\n                    type: boolean\n                  id:\n                    type: integer\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - consumable\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Consumable'\n      parameters:\n        - in: cookie\n          name: token\n          description: The user's token\n          required: true\n          schema:\n            type: string\n  /consumable/get:\n    post:\n      summary: Fetch some consumable\n      description: \u003e\n        Fetch information about some consumable\n      responses:\n        '200':\n          description: Consumables\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/Consumable'\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - consumable\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Query'\n      parameters:\n        - in: cookie\n          name: token\n          description: The user's token\n          required: true\n          schema:\n            type: string\n  /list/create:\n    post:\n      summary: Create a new list\n      description: \u003e\n        Create a new list and return it's ID\n      responses:\n        '200':\n          description: The ID of the list\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/List'\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - list\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/List'\n      parameters:\n        - in: cookie\n          name: token\n          description: The user's token\n          required: true\n          schema:\n            type: string\n  /list/getall:\n    post:\n      summary: Fetch all user's list\n      description: \u003e\n        Fetch the user's list\n      responses:\n        '200':\n          description: Consumables\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/List'\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - list\n      requestBody:\n        required: false\n      parameters:\n        - in: cookie\n          name: token\n          description: The user's token\n          required: true\n          schema:\n            type: string\n  /list/getcontent:\n    post:\n      summary: Fetch the content of a list\n      description: \u003e\n        Fetch the content of a list\n      responses:\n        '200':\n          description: Consumables\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/ListContent'\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - list\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/List'\n      parameters:\n        - in: cookie\n          name: token\n          description: The user's token\n          required: true\n          schema:\n            type: string\n  /list/add/personnal:\n    post:\n      summary: Add a personnal content to a list\n      description: \u003e\n        Add a personnal content to a list\n      responses:\n        '200':\n          description: Consumables\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  done:\n                    type: boolean\n                  id:\n                    type: integer\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - list\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ListContent'\n      parameters:\n        - in: cookie\n          name: token\n          description: The user's token\n          required: true\n          schema:\n            type: string\n  /list/add/consumable:\n      summary: Add a personnal content to a list\n      description: \u003e\n        Add a personnal content to a list\n      responses:\n        '200':\n          description: Consumables\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  done:\n                    type: boolean\n                  id:\n                    type: integer\n        '500':\n          $ref: '#/components/responses/Error'\n      tags:\n        - list\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ListContent'\n      parameters:\n        - in: cookie\n          name: token\n          description: The user's token\n          required: true\n          schema:\n            type: string\n"
		}
	},
	"Error": "unmarshal: json: line 1:8: callback: json: cannot unmarshal string into Go value of type ogen.Schema"
}