{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Bandwidth/api-docs"
		},
		"file": {
			"name": "messaging.yml",
			"size": 0,
			"path": "site/specs/messaging.yml",
			"byteSize": 81323,
			"content": "openapi: 3.0.3\ninfo:\n  title: Messaging\n  version: 4.3.0\n  contact:\n    name: Bandwidth\n    url: https://support.bandwidth.com\n    email: support@bandwidth.com\n  description: |-\n    The API Specification for Bandwidth's Messaging Platform\n\n    ## Base URL\n\n    `https://messaging.bandwidth.com/api/v2`\nservers:\n  - url: https://messaging.bandwidth.com/api/v2\n    description: Production\npaths:\n  /users/{accountId}/media:\n    get:\n      summary: List Media\n      description: Gets a list of your media files. No query parameters are supported.\n      operationId: listMedia\n      tags:\n        - Media\n      parameters:\n        - $ref: '#/components/parameters/accountId'\n        - $ref: '#/components/parameters/continuationToken'\n      responses:\n        '200':\n          $ref: '#/components/responses/listMediaResponse'\n        '400':\n          $ref: '#/components/responses/messagingBadRequestError'\n        '401':\n          $ref: '#/components/responses/messagingUnauthorizedError'\n        '403':\n          $ref: '#/components/responses/messagingForbiddenError'\n        '404':\n          $ref: '#/components/responses/messagingNotFoundError'\n        '415':\n          $ref: '#/components/responses/messagingInvalidMediaTypeError'\n        '429':\n          $ref: '#/components/responses/messagingTooManyRequestsError'\n        '500':\n          $ref: '#/components/responses/messagingInternalServerError'\n      x-codeSamples:\n        - lang: cURL\n          source: |\n            curl 'https://messaging.bandwidth.com/api/v2/users/12345/media' \\\n                -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\n        - lang: C#\n          source: |\n            using System;\n            using System.Threading.Tasks;\n            using Bandwidth.Standard;\n            using Bandwidth.Standard.Exceptions;\n            using Bandwidth.Standard.Messaging.Models;\n\n            class Program\n            {\n                static async Task Main(string[] args)\n                {\n                    var username = \"api-username\";\n                    var password = \"api-pasword\";\n                    var accountId = \"12345\";\n\n                    var client = new BandwidthClient.Builder()\n                        .MessagingBasicAuthCredentials(username, password)\n                        .Build();\n\n                    try\n                    {\n                        var response = await client.Messaging.APIController.ListMediaAsync(accountId);\n                        Console.WriteLine(response.Data);\n                    }\n                    catch (ApiException e)\n                    {\n                        Console.WriteLine(e.Message);\n                    }\n                }\n            }\n        - lang: Java\n          source: |\n            import com.bandwidth.BandwidthClient;\n            import com.bandwidth.http.response.ApiResponse;\n            import com.bandwidth.messaging.models.Media;\n\n            import java.util.concurrent.CompletableFuture;\n            import java.util.concurrent.ExecutionException;\n            import java.util.List;\n\n            public class Sample {\n                public static final String USERNAME = \"api-username\";\n                public static final String PASSWORD = \"api-password\";\n                public static final String ACCOUNT_ID = \"12345\";\n\n                public static void main(String[] args) {\n                    BandwidthClient client = new BandwidthClient.Builder()\n                            .messagingBasicAuthCredentials(USERNAME, PASSWORD)\n                            .build();\n\n                    try {\n                        CompletableFuture\u003cApiResponse\u003cList\u003cMedia\u003e\u003e\u003e completableFuture = client.getMessagingClient().getAPIController().listMediaAsync(ACCOUNT_ID, null);\n                        System.out.println(completableFuture.get().getResult());\n                    } catch (InterruptedException | ExecutionException e) {\n                        System.out.println(e.getMessage());\n                    }\n                }\n            }\n        - lang: Node.js\n          source: |\n            import { Client, ApiController } from '@bandwidth/messaging';\n            import * as fs from 'fs';\n\n            const BW_USERNAME = \"api-username\";\n            const BW_PASSWORD = \"api-password\";\n            const BW_ACCOUNT_ID = \"12345\";\n\n            const client = new Client({\n              basicAuthUserName: BW_USERNAME,\n              basicAuthPassword: BW_PASSWORD\n            });\n\n            const controller = new ApiController(client);\n\n            const listMedia = async function() {\n              try {\n                const response = await controller.listMedia(BW_ACCOUNT_ID);\n                console.log(response.result)\n              } catch (error) {\n              console.error(error);\n            }};\n\n            listMedia();\n        - lang: PHP\n          source: |\n            \u003c?php\n\n            require \"vendor/autoload.php\";\n\n            api-username = \"api-username\";\n            api-password = \"api-pasword\";\n            12345 = \"12345\";\n\n            $config = new BandwidthLib\\Configuration(\n                array(\n                    'messagingBasicAuthUserName' =\u003e $BW_USERNAME,\n                    'messagingBasicAuthPassword' =\u003e $BW_PASSWORD,\n                )\n            );\n            $client = new BandwidthLib\\BandwidthClient($config);\n\n            $messagingClient = $client-\u003egetMessaging()-\u003egetClient();\n\n            try {\n                $response = $messagingClient-\u003elistMedia($BW_ACCOUNT_ID);\n                if (count($response-\u003egetResult()) \u003e 0) {\n                    print_r($response-\u003egetResult()[0]-\u003emediaName);\n                }\n            } catch (BandwidthLib\\APIException $e) {\n                print_r($e-\u003egetResponseCode());\n            }\n        - lang: Python\n          source: |\n            from bandwidth.bandwidth_client import BandwidthClient\n            from bandwidth.exceptions.api_exception import APIException\n\n            import os\n\n            BW_USERNAME = \"api-username\"\n            BW_PASSWORD = \"api-password\"\n            BW_ACCOUNT_ID = \"12345\"\n\n            bandwidth_client = BandwidthClient(\n                messaging_basic_auth_user_name=BW_USERNAME,\n                messaging_basic_auth_password=BW_PASSWORD\n            )\n            messaging_client = bandwidth_client.messaging_client.client\n\n            try:\n                response = messaging_client.list_media(BW_ACCOUNT_ID)\n                print(response.body)\n            except APIException as e:\n                print(e.response_code)\n        - lang: Ruby\n          source: |\n            require 'bandwidth'\n\n            include Bandwidth\n            include Bandwidth::Messaging\n\n            bandwidth_client = Bandwidth::Client.new(\n                messaging_basic_auth_user_name: \"api-username\",\n                messaging_basic_auth_password: \"api-password\"\n            )\n            messaging_client = bandwidth_client.messaging_client.client\n\n            begin\n              media = messaging_client.list_media(\"12345\")\n              media.data.each { |item|\n                puts item.media_name\n              }\n            rescue APIException =\u003e e\n              puts e.response_code\n            end\n  /users/{accountId}/media/{mediaId}:\n    get:\n      summary: Get Media\n      description: Downloads a media file you previously uploaded.\n      operationId: getMedia\n      tags:\n        - Media\n      parameters:\n        - $ref: '#/components/parameters/accountId'\n        - $ref: '#/components/parameters/mediaId'\n      responses:\n        '200':\n          $ref: '#/components/responses/getMediaResponse'\n        '400':\n          $ref: '#/components/responses/messagingBadRequestError'\n        '401':\n          $ref: '#/components/responses/messagingUnauthorizedError'\n        '403':\n          $ref: '#/components/responses/messagingForbiddenError'\n        '404':\n          $ref: '#/components/responses/messagingNotFoundError'\n        '415':\n          $ref: '#/components/responses/messagingInvalidMediaTypeError'\n        '429':\n          $ref: '#/components/responses/messagingTooManyRequestsError'\n        '500':\n          $ref: '#/components/responses/messagingInternalServerError'\n      x-codeSamples:\n        - lang: cURL\n          source: \u003e\n            curl\n            'https://messaging.bandwidth.com/api/v2/users/12345/media/media-id-123'\n            \\\n                -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\n        - lang: C#\n          source: |\n            using System;\n            using System.Threading.Tasks;\n            using Bandwidth.Standard;\n            using Bandwidth.Standard.Exceptions;\n            using Bandwidth.Standard.Messaging.Models;\n\n            class Program\n            {\n                static async Task Main(string[] args)\n                {\n                    var username = \"api-username\";\n                    var password = \"api-pasword\";\n                    var accountId = \"12345\";\n\n                    var client = new BandwidthClient.Builder()\n                        .MessagingBasicAuthCredentials(username, password)\n                        .Build();\n\n                    var mediaId = \"media-id-123\";\n\n                    try\n                    {\n                        var response = await client.Messaging.APIController.GetMediaAsync(accountId, mediaId);\n                        Console.WriteLine(response.Data);\n                    }\n                    catch (ApiException e)\n                    {\n                        Console.WriteLine(e.Message);\n                    }\n                }\n            }\n        - lang: Java\n          source: |\n            import com.bandwidth.BandwidthClient;\n            import com.bandwidth.http.response.ApiResponse;\n\n            import java.util.concurrent.CompletableFuture;\n            import java.util.concurrent.ExecutionException;\n            import java.io.InputStream;\n\n            public class Sample {\n                public static final String USERNAME = \"api-username\";\n                public static final String PASSWORD = \"api-password\";\n                public static final String ACCOUNT_ID = \"12345\";\n\n                public static void main(String[] args) {\n                    String mediaId = \"media-id-123\";\n\n                    BandwidthClient client = new BandwidthClient.Builder()\n                            .messagingBasicAuthCredentials(USERNAME, PASSWORD)\n                            .build();\n\n                    try {\n                        CompletableFuture\u003cApiResponse\u003cInputStream\u003e\u003e completableFuture = client.getMessagingClient().getAPIController().getMediaAsync(ACCOUNT_ID, mediaId);\n                        System.out.println(completableFuture.get().getResult());\n                    } catch (InterruptedException | ExecutionException e) {\n                        System.out.println(e.getMessage());\n                    }\n                }\n            }\n        - lang: Node.js\n          source: |\n            import { Client, ApiController } from '@bandwidth/messaging';\n            import * as fs from 'fs';\n\n            const BW_USERNAME = \"api-username\";\n            const BW_PASSWORD = \"api-password\";\n            const BW_ACCOUNT_ID = \"12345\";\n            const mediaId = \"media-id-123.pdf\";\n\n            const client = new Client({\n              basicAuthUserName: BW_USERNAME,\n              basicAuthPassword: BW_PASSWORD\n            });\n\n            const controller = new ApiController(client);\n\n            const getMedia = async function() {\n              try {\n                const response = await controller.getMedia(BW_ACCOUNT_ID, mediaId);\n                const chunks = [];\n                for await (let chunk of response.result) {\n                    chunks.push(chunk);\n                }\n                fs.writeFileSync('file-to-write.pdf', chunks[0], 'binary');\n              } catch (error) {\n              console.error(error);\n            }};\n\n            getMedia();\n        - lang: PHP\n          source: |\n            \u003c?php\n\n            require \"vendor/autoload.php\";\n\n            api-username = \"api-username\";\n            api-password = \"api-pasword\";\n            12345 = \"12345\";\n\n            $config = new BandwidthLib\\Configuration(\n                array(\n                    'messagingBasicAuthUserName' =\u003e $BW_USERNAME,\n                    'messagingBasicAuthPassword' =\u003e $BW_PASSWORD,\n                )\n            );\n            $client = new BandwidthLib\\BandwidthClient($config);\n\n            $messagingClient = $client-\u003egetMessaging()-\u003egetClient();\n\n            $mediaFileName = \"media-id-123\";\n\n            try {\n                $response = $messagingClient-\u003egetMedia($BW_ACCOUNT_ID, $mediaFileName);\n                $downloadedMediaFile = $response-\u003egetResult();\n            } catch (BandwidthLib\\APIException $e) {\n                print_r($e-\u003egetResponseCode());\n            }\n        - lang: Python\n          source: |\n            from bandwidth.bandwidth_client import BandwidthClient\n            from bandwidth.exceptions.api_exception import APIException\n              \n            import os\n\n            BW_USERNAME = \"api-username\"\n            BW_PASSWORD = \"api-password\"\n            BW_ACCOUNT_ID = \"12345\"\n\n            bandwidth_client = BandwidthClient(\n                messaging_basic_auth_user_name=BW_USERNAME,\n                messaging_basic_auth_password=BW_PASSWORD\n            )\n            messaging_client = bandwidth_client.messaging_client.client\n\n            media_file_name = 'media-id-123'\n\n            try:\n                response = messaging_client.get_media(BW_ACCOUNT_ID, media_file_name)\n                downloaded_media_file = response.body\n            except APIException as e:\n                print(e.response_code)\n        - lang: Ruby\n          source: |\n            require 'bandwidth'\n\n            include Bandwidth\n            include Bandwidth::Messaging\n\n            bandwidth_client = Bandwidth::Client.new(\n                messaging_basic_auth_user_name: \"api-username\",\n                messaging_basic_auth_password: \"api-password\"\n            )\n            messaging_client = bandwidth_client.messaging_client.client\n\n            begin\n              downloaded_media = messaging_client.get_media(\"12345\", ENV['MEDIA_ID'])\n              f = File.open(\"file_to_write\", \"wb\")\n              f.puts(downloaded_media.data)\n              f.close()\n            rescue APIException =\u003e e\n              puts e.response_code\n            end\n    put:\n      summary: Upload Media\n      description: \u003e-\n        Upload a file. You may add headers to the request in order to provide\n        some control to your media file.\n\n\n        If a file is uploaded with the same name as a file that already exists\n        under this account, the previous file will be overwritten.\n\n\n        A list of supported media types can be found\n        [here](https://support.bandwidth.com/hc/en-us/articles/360014128994-What-MMS-file-types-are-supported-).\n      operationId: uploadMedia\n      tags:\n        - Media\n      parameters:\n        - $ref: '#/components/parameters/accountId'\n        - $ref: '#/components/parameters/mediaId'\n        - $ref: '#/components/parameters/contentType'\n        - $ref: '#/components/parameters/cacheControl'\n      requestBody:\n        $ref: '#/components/requestBodies/uploadMediaRequest'\n      responses:\n        '204':\n          description: No Content\n        '400':\n          $ref: '#/components/responses/messagingBadRequestError'\n        '401':\n          $ref: '#/components/responses/messagingUnauthorizedError'\n        '403':\n          $ref: '#/components/responses/messagingForbiddenError'\n        '404':\n          $ref: '#/components/responses/messagingNotFoundError'\n        '415':\n          $ref: '#/components/responses/messagingInvalidMediaTypeError'\n        '429':\n          $ref: '#/components/responses/messagingTooManyRequestsError'\n        '500':\n          $ref: '#/components/responses/messagingInternalServerError'\n      x-codeSamples:\n        - lang: cURL\n          source: \u003e\n            curl\n            'https://messaging.bandwidth.com/api/v2/users/12345/media/media-id-123'\n            \\\n                -X PUT \\\n                -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\n        - lang: C#\n          source: |\n            using System;\n            using System.IO;\n            using System.Text;\n            using System.Threading.Tasks;\n            using Bandwidth.Standard;\n            using Bandwidth.Standard.Exceptions;\n            using Bandwidth.Standard.Http.Client;\n\n            class Program\n            {\n                static async Task Main(string[] args)\n                {\n                    var username = \"api-username\";\n                    var password = \"api-pasword\";\n                    var accountId = \"12345\";\n\n                    var client = new BandwidthClient.Builder()\n                        .MessagingBasicAuthCredentials(username, password)\n                        .Build();\n\n                    var mediaId = \"media-id-123\";\n                                \n                    var content = \"Hello world\";\n                    var contentType = \"text/plain\";\n\n                    var memoryStream = new MemoryStream(Encoding.UTF8.GetBytes(content));\n                    var fileStreamInfo = new FileStreamInfo(memoryStream);\n\n                    try\n                    {\n                        await client.Messaging.APIController.UploadMediaAsync(accountId, mediaId, fileStreamInfo, contentType);\n                    }\n                    catch (ApiException e)\n                    {\n                        Console.WriteLine(e.Message);\n                    }\n                }\n            }\n        - lang: Java\n          source: |\n            import com.bandwidth.BandwidthClient;\n            import com.bandwidth.http.response.ApiResponse;\n            import com.bandwidth.utilities.FileWrapper;\n\n            import java.io.File;\n            import java.util.concurrent.CompletableFuture;\n            import java.util.concurrent.ExecutionException;\n\n            public class Sample {\n                public static final String USERNAME = \"api-username\";\n                public static final String PASSWORD = \"api-password\";\n                public static final String ACCOUNT_ID = \"12345\";\n\n                public static void main(String[] args) {\n                    BandwidthClient client = new BandwidthClient.Builder()\n                            .messagingBasicAuthCredentials(USERNAME, PASSWORD)\n                            .build();\n\n                    String mediaId = \"media-id-123\";\n                    FileWrapper fileWrapper = new FileWrapper(new File(\"/path/to/file\"));\n\n                    try {\n                        CompletableFuture\u003cApiResponse\u003cVoid\u003e\u003e completableFuture = client.getMessagingClient().getAPIController().uploadMediaAsync(ACCOUNT_ID, mediaId, fileWrapper, \"content/type\", \"no-cache\");\n                        System.out.println(completableFuture.get().getResult());\n                    } catch (InterruptedException | ExecutionException e) {\n                        System.out.println(e.getMessage());\n                    }\n                }\n            }\n        - lang: Node.js\n          source: \u003e\n            import { Client, ApiController, Environment } from\n            '@bandwidth/messaging';\n\n            import * as fs from 'fs';\n\n\n            const BW_USERNAME = \"api-username\";\n\n            const BW_PASSWORD = \"api-password\";\n\n            const BW_ACCOUNT_ID = \"12345\";\n\n            const mediaId = \"abc123.pdf\";\n\n            const contentType = \"application/octet-stream\";\n\n            const cacheControl = \"no-cache\";\n\n            const contents = Buffer.alloc(8); // Any binary string will work for\n            the upload. This includes file contents\n\n\n            const client = new Client({\n              basicAuthUserName: BW_USERNAME,\n              basicAuthPassword: BW_PASSWORD,\n            });\n\n\n            const controller = new ApiController(client);\n\n\n            const uploadMedia = async function() {\n              try {\n                const response = await controller.uploadMedia(BW_ACCOUNT_ID, mediaId, contents, contentType, cacheControl);\n                console.log(response.statusCode)\n              } catch (error) {\n              console.error(error);\n            }};\n\n\n            uploadMedia();\n        - lang: PHP\n          source: \u003e\n            \u003c?php\n\n\n            require \"vendor/autoload.php\";\n\n\n            api-username = \"api-username\";\n\n            api-password = \"api-pasword\";\n\n            12345 = \"12345\";\n\n\n            $config = new BandwidthLib\\Configuration(\n                array(\n                    'messagingBasicAuthUserName' =\u003e $BW_USERNAME,\n                    'messagingBasicAuthPassword' =\u003e $BW_PASSWORD,\n                )\n            );\n\n            $client = new BandwidthLib\\BandwidthClient($config);\n\n\n            $messagingClient = $client-\u003egetMessaging()-\u003egetClient();\n\n\n            $mediaFileName = \"sample_file_name\";\n\n            $mediaFile = \"12345\"; //Any binary string will work for the upload.\n            This includes file contents\n\n\n            try {\n                $messagingClient-\u003euploadMedia($BW_ACCOUNT_ID, $mediaFileName, $mediaFile);\n            } catch (BandwidthLib\\APIException $e) {\n                print_r($e-\u003egetResponseCode());\n            }\n        - lang: Python\n          source: \u003e\n            from bandwidth.bandwidth_client import BandwidthClient\n\n            from bandwidth.exceptions.api_exception import APIException\n\n\n            import os\n\n\n            BW_USERNAME = \"api-username\"\n\n            BW_PASSWORD = \"api-password\"\n\n            BW_ACCOUNT_ID = \"12345\"\n\n\n            bandwidth_client = BandwidthClient(\n                messaging_basic_auth_user_name=BW_USERNAME,\n                messaging_basic_auth_password=BW_PASSWORD\n            )\n\n            messaging_client = bandwidth_client.messaging_client.client\n\n\n            media_file_name = 'sample_file_name'\n\n            media_file = b'12345' #Any binary string will work for the upload.\n            This includes file contents\n\n\n            try:\n                messaging_client.upload_media(BW_ACCOUNT_ID, media_file_name, media_file)\n            except APIException as e:\n                print(e.response_code)\n        - lang: Ruby\n          source: |\n            require 'bandwidth'\n\n            include Bandwidth\n            include Bandwidth::Messaging\n\n            bandwidth_client = Bandwidth::Client.new(\n                messaging_basic_auth_user_name: \"api-username\",\n                messaging_basic_auth_password: \"api-password\"\n            )\n            messaging_client = bandwidth_client.messaging_client.client\n\n            begin\n              #f = File.open(\"some_file\", \"rb\")\n              #file_content = f.read\n              file_content = \"12345\"\n              messaging_client.upload_media(\n                \"12345\",\n                ENV['MEDIA_ID'],\n                file_content,\n                :content_type =\u003e \"application/octet-stream\",\n                :cache_control =\u003e \"no-cache\"\n              )\n              f.close()\n            rescue APIException =\u003e e\n              puts e.response_code\n            end\n    delete:\n      summary: Delete Media\n      description: |-\n        Deletes a media file from Bandwidth API server. Make sure you don't have\n        any application scripts still using the media before you delete.\n\n        If you accidentally delete a media file you can immediately upload a new\n        file with the same name.\n      operationId: deleteMedia\n      tags:\n        - Media\n      parameters:\n        - $ref: '#/components/parameters/accountId'\n        - $ref: '#/components/parameters/mediaId'\n      responses:\n        '204':\n          description: No Content\n        '400':\n          $ref: '#/components/responses/messagingBadRequestError'\n        '401':\n          $ref: '#/components/responses/messagingUnauthorizedError'\n        '403':\n          $ref: '#/components/responses/messagingForbiddenError'\n        '404':\n          $ref: '#/components/responses/messagingNotFoundError'\n        '415':\n          $ref: '#/components/responses/messagingInvalidMediaTypeError'\n        '429':\n          $ref: '#/components/responses/messagingTooManyRequestsError'\n        '500':\n          $ref: '#/components/responses/messagingInternalServerError'\n      x-codeSamples:\n        - lang: cURL\n          source: \u003e\n            curl\n            'https://messaging.bandwidth.com/api/v2/users/12345/media/media-id-123'\n            \\\n                -X DELETE \\\n                -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\n        - lang: C#\n          source: |\n            using System;\n            using System.Threading.Tasks;\n            using Bandwidth.Standard;\n            using Bandwidth.Standard.Exceptions;\n            using Bandwidth.Standard.Messaging.Models;\n\n            class Program\n            {\n                static async Task Main(string[] args)\n                {\n                    var username = \"api-username\";\n                    var password = \"api-pasword\";\n                    var accountId = \"12345\";\n\n                    var client = new BandwidthClient.Builder()\n                        .MessagingBasicAuthCredentials(username, password)\n                        .Build();\n\n                    var mediaId = \"media-id-123\";\n\n                    try\n                    {\n                        await client.Messaging.APIController.DeleteMediaAsync(accountId, mediaId);\n                    }\n                    catch (ApiException e)\n                    {\n                        Console.WriteLine(e.Message);\n                    }\n                }\n            }\n        - lang: Java\n          source: |\n            import com.bandwidth.BandwidthClient;\n            import com.bandwidth.http.response.ApiResponse;\n            import com.bandwidth.messaging.models.BandwidthMessage;\n            import com.bandwidth.messaging.models.MessageRequest;\n\n            import java.util.concurrent.CompletableFuture;\n            import java.util.concurrent.ExecutionException;\n            import java.util.Collections;\n\n            public class Sample {\n                public static final String USERNAME = \"api-username\";\n                public static final String PASSWORD = \"api-password\";\n                public static final String ACCOUNT_ID = \"12345\";\n\n                public static void main(String[] args) {\n                    String mediaId = \"media-id-123\";\n\n                    BandwidthClient client = new BandwidthClient.Builder()\n                            .messagingBasicAuthCredentials(USERNAME, PASSWORD)\n                            .build();\n\n                    try {\n                        CompletableFuture\u003cApiResponse\u003cVoid\u003e\u003e completableFuture = client.getMessagingClient().getAPIController().deleteMediaAsync(ACCOUNT_ID, mediaId);\n                        System.out.println(completableFuture.get().getResult());\n                    } catch (InterruptedException | ExecutionException e) {\n                        System.out.println(e.getMessage());\n                    }\n                }\n            }\n        - lang: Node.js\n          source: |\n            import { Client, ApiController } from '@bandwidth/messaging';\n\n            const BW_USERNAME = \"api-username\";\n            const BW_PASSWORD = \"api-password\";\n            const BW_ACCOUNT_ID = \"12345\";\n            const mediaId = 'abc12345-6def-abc1-2345-6defabc123451.mp3';\n\n            const client = new Client({\n              basicAuthUserName: BW_USERNAME,\n              basicAuthPassword: BW_PASSWORD\n            });\n\n            const controller = new ApiController(client);\n\n            const deleteMedia = async function() {\n              try {\n                const response = await controller.deleteMedia(BW_ACCOUNT_ID, mediaId);\n                console.log(response.statusCode);\n              } catch (error) {\n              console.error(error);\n            }};\n\n            deleteMedia();\n        - lang: PHP\n          source: |\n            \u003c?php\n              \n            require \"vendor/autoload.php\";\n\n            api-username = \"api-username\";\n            api-password = \"api-pasword\";\n            12345 = \"12345\";\n            1234-asdf = \"1234-asdf\";\n            +15554443333 = \"+15554443333\";\n            +15553334444 = \"+15553334444\";\n\n            $config = new BandwidthLib\\Configuration(\n                array(\n                    'messagingBasicAuthUserName' =\u003e $BW_USERNAME,\n                    'messagingBasicAuthPassword' =\u003e $BW_PASSWORD,\n                )\n            );\n            $client = new BandwidthLib\\BandwidthClient($config);\n\n            $messagingClient = $client-\u003egetMessaging()-\u003egetClient();\n\n            $mediaId = \"m-1234\";\n\n            try {\n                $messagingClient-\u003edeleteMedia($BW_ACCOUNT_ID, $mediaId);\n            } catch (BandwidthLib\\APIException $e) {\n                print_r($e-\u003egetResponseCode());\n            }\n        - lang: Python\n          source: |\n            from bandwidth.bandwidth_client import BandwidthClient\n            from bandwidth.exceptions.api_exception import APIException\n\n            import os\n\n            BW_USERNAME = \"api-username\"\n            BW_PASSWORD = \"api-password\"\n            BW_ACCOUNT_ID = \"12345\"\n\n            bandwidth_client = BandwidthClient(\n                messaging_basic_auth_user_name=BW_USERNAME,\n                messaging_basic_auth_password=BW_PASSWORD\n            )\n            messaging_client = bandwidth_client.messaging_client.client\n\n            media_id = \"m-1234\"\n\n            try:\n                messaging_client.delete_media(BW_ACCOUNT_ID, media_id)\n            except APIException as e:\n                print(e.response_code)\n        - lang: Ruby\n          source: |\n            require 'bandwidth'\n\n            include Bandwidth\n            include Bandwidth::Messaging\n\n            bandwidth_client = Bandwidth::Client.new(\n                messaging_basic_auth_user_name: \"api-username\",\n                messaging_basic_auth_password: \"api-password\"\n            )\n            messaging_client = bandwidth_client.messaging_client.client\n\n            begin\n              messaging_client.delete_media(\"12345\", ENV['MEDIA_ID'])\n            rescue APIException =\u003e e\n              puts e.response_code\n            end\n  /users/{accountId}/messages:\n    get:\n      summary: List Messages\n      description: Returns a list of messages based on query parameters.\n      operationId: listMessages\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/accountId'\n        - $ref: '#/components/parameters/messageId'\n        - $ref: '#/components/parameters/sourceTn'\n        - $ref: '#/components/parameters/destinationTn'\n        - $ref: '#/components/parameters/messageStatus'\n        - $ref: '#/components/parameters/messageDirection'\n        - $ref: '#/components/parameters/carrierName'\n        - $ref: '#/components/parameters/messageType'\n        - $ref: '#/components/parameters/errorCode'\n        - $ref: '#/components/parameters/fromDateTime'\n        - $ref: '#/components/parameters/toDateTime'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/pageToken'\n        - $ref: '#/components/parameters/limit'\n      responses:\n        '200':\n          $ref: '#/components/responses/listMessagesResponse'\n        '400':\n          $ref: '#/components/responses/messagingBadRequestError'\n        '401':\n          $ref: '#/components/responses/messagingUnauthorizedError'\n        '403':\n          $ref: '#/components/responses/messagingForbiddenError'\n        '404':\n          $ref: '#/components/responses/messagingNotFoundError'\n        '415':\n          $ref: '#/components/responses/messagingInvalidMediaTypeError'\n        '429':\n          $ref: '#/components/responses/messagingTooManyRequestsError'\n        '500':\n          $ref: '#/components/responses/messagingInternalServerError'\n      x-codeSamples:\n        - lang: cURL\n          source: \u003e\n            curl\n            'https://messaging.bandwidth.com/api/v2/users/12345/messages?sourceTn=+15554443333'\n            \\\n                -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\n        - lang: C#\n          source: |\n            using System;\n            using System.Threading.Tasks;\n            using Bandwidth.Standard;\n            using Bandwidth.Standard.Exceptions;\n            using Bandwidth.Standard.Messaging.Models;\n\n            class Program\n            {\n                static async Task Main(string[] args)\n                {\n                    var username = \"api-username\";\n                    var password = \"api-pasword\";\n                    var accountId = \"12345\";\n                    var bandwidthNumber = \"+15554443333\";\n\n                    var client = new BandwidthClient.Builder()\n                        .MessagingBasicAuthCredentials(username, password)\n                        .Build();\n\n                    try\n                    {\n                        var response = await client.Messaging.APIController.GetMessagesAsync(accountId, sourceTn: bandwidthNumber);\n                        Console.WriteLine(response.Data);\n                    }\n                    catch (ApiException e)\n                    {\n                        Console.WriteLine(e.Message);\n                    }\n                }\n            }\n        - lang: Java\n          source: |\n            import com.bandwidth.BandwidthClient;\n            import com.bandwidth.http.response.ApiResponse;\n            import com.bandwidth.messaging.models.BandwidthMessagesList;\n\n            import java.util.concurrent.CompletableFuture;\n            import java.util.concurrent.ExecutionException;\n\n            public class Sample {\n                public static final String USERNAME = \"api-username\";\n                public static final String PASSWORD = \"api-password\";\n                public static final String ACCOUNT_ID = \"12345\";\n\n                public static void main(String[] args) {\n                    String bandwidthNumber = \"+15554443333\";\n\n                    BandwidthClient client = new BandwidthClient.Builder()\n                            .messagingBasicAuthCredentials(USERNAME, PASSWORD)\n                            .build();\n\n                    try {\n                        CompletableFuture\u003cApiResponse\u003cBandwidthMessagesList\u003e\u003e completableFuture = client.getMessagingClient().getAPIController().getMessagesAsync(ACCOUNT_ID, null, bandwidthNumber, null, null, null, null, null, null, null);\n                        System.out.println(completableFuture.get().getResult());\n                    } catch (InterruptedException | ExecutionException e) {\n                        System.out.println(e.getMessage());\n                    }\n                }\n            }\n        - lang: Node.js\n          source: |\n            import { Client, ApiController } from '@bandwidth/messaging';\n\n            const BW_USERNAME = \"api-username\";\n            const BW_PASSWORD = \"api-password\";\n            const BW_ACCOUNT_ID = \"12345\";\n            const messageId = \"1589228074636lm4k2je7j7jklbn2\";\n\n            const client = new Client({\n              basicAuthUserName: BW_USERNAME,\n              basicAuthPassword: BW_PASSWORD\n            });\n\n            const controller = new ApiController(client);\n\n            const getMessage = async function() {\n              try {\n                const response = await controller.getMessages(BW_ACCOUNT_ID, messageId);\n                console.log(response.body)\n              } catch (error) {\n              console.error(error);\n            }};\n\n            getMessage();\n        - lang: PHP\n          source: |\n            \u003c?php\n\n            require \"vendor/autoload.php\";\n\n            api-username = \"api-username\";\n            api-password = \"api-pasword\";\n            12345 = \"12345\";\n            +15554443333 = \"+15554443333\";\n\n            $config = new BandwidthLib\\Configuration(\n                array(\n                    'messagingBasicAuthUserName' =\u003e $BW_USERNAME,\n                    'messagingBasicAuthPassword' =\u003e $BW_PASSWORD,\n                )\n            );\n            $client = new BandwidthLib\\BandwidthClient($config);\n\n            $messagingClient = $client-\u003egetMessaging()-\u003egetClient();\n\n            try {\n                $response = $messagingClient-\u003egetMessages($BW_ACCOUNT_ID, $sourceTn = $BW_NUMBER);\n                print_r($response-\u003egetResult()-\u003etotalCount);\n            } catch (BandwidthLib\\APIException $e) {\n                print_r($e-\u003egetResponseCode());\n            }\n        - lang: Python\n          source: |\n            from bandwidth.bandwidth_client import BandwidthClient\n            from bandwidth.exceptions.api_exception import APIException\n\n            import os\n\n            BW_USERNAME = \"api-username\"\n            BW_PASSWORD = \"api-password\"\n            BW_ACCOUNT_ID = \"12345\"\n\n            bandwidth_client = BandwidthClient(\n                messaging_basic_auth_user_name=BW_USERNAME,\n                messaging_basic_auth_password=BW_PASSWORD\n            )\n            messaging_client = bandwidth_client.messaging_client.client\n\n            source_tn = \"+15554443333\"\n\n            try:\n                response = messaging_client.get_messages(BW_ACCOUNT_ID, source_tn=source_tn)\n                print(response.body.total_count)\n            except APIException as e:\n                print(e.response_code)\n        - lang: Ruby\n          source: |\n            require 'bandwidth'\n\n            include Bandwidth\n            include Bandwidth::Messaging\n\n            bandwidth_client = Bandwidth::Client.new(\n                messaging_basic_auth_user_name: \"api-username\",\n                messaging_basic_auth_password: \"api-password\"\n            )\n            messaging_client = bandwidth_client.messaging_client.client\n\n            begin\n              result = messaging_client.get_messages(\"12345\", :source_tn =\u003e \"+15554443333\")\n              puts result.data.total_count\n            rescue APIException =\u003e e\n              puts e.response_code\n            end\n    post:\n      summary: Create Message\n      description: \u003e-\n        Endpoint for sending text messages and picture messages using V2\n        messaging.\n      operationId: createMessage\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/accountId'\n      requestBody:\n        $ref: '#/components/requestBodies/createMessageRequest'\n      responses:\n        '202':\n          $ref: '#/components/responses/createMessageResponse'\n        '400':\n          $ref: '#/components/responses/createMessageBadRequestError'\n        '401':\n          $ref: '#/components/responses/messagingUnauthorizedError'\n        '403':\n          $ref: '#/components/responses/messagingForbiddenError'\n        '404':\n          $ref: '#/components/responses/messagingNotFoundError'\n        '415':\n          $ref: '#/components/responses/messagingInvalidMediaTypeError'\n        '429':\n          $ref: '#/components/responses/messagingTooManyRequestsError'\n        '500':\n          $ref: '#/components/responses/messagingInternalServerError'\n      callbacks:\n        inboundCallback:\n          $ref: '#/components/callbacks/inboundCallback'\n        statusCallback:\n          $ref: '#/components/callbacks/statusCallback'\n      x-codeSamples:\n        - lang: cURL\n          source: |\n            curl 'https://messaging.bandwidth.com/api/v2/users/12345/messages' \\\n                -X POST \\\n                -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=' \\\n                -H 'Content-Type: application/json' \\\n                -d '{\n                    \"applicationId\": \"$BW_ACCOUNT_ID\",\n                    \"to\": [\n                        \"+15553334444\",\n                        \"+15552223333\"\n                    ],\n                    \"from\": \"+15554443333\",\n                    \"text\": \"Hello World!\",\n                    \"media\": [\n                        \"https://dev.bandwidth.com/images/bandwidth-logo.png\",\n                        \"https://dev.bandwidth.com/images/github_logo.png\"\n                    ],\n                    \"tag\": \"custom string\",\n                    \"priority\": \"default\"\n                }'\n        - lang: C#\n          source: |\n            using System;\n            using System.Collections.Generic;\n            using System.Threading.Tasks;\n            using Bandwidth.Standard;\n            using Bandwidth.Standard.Exceptions;\n            using Bandwidth.Standard.Messaging.Models;\n\n            class Program\n            {\n                static async Task Main(string[] args)\n                {\n                    var username = \"api-username\";\n                    var password = \"api-pasword\";\n                    var accountId = \"12345\";\n                    var applicationId = \"1234-asdf\";\n                    var bandwidthNumber = \"+15554443333\";\n                    var userNumber = \"+15553334444\";\n\n                    var client = new BandwidthClient.Builder()\n                        .MessagingBasicAuthCredentials(username, password)\n                        .Build();\n\n                    var request = new MessageRequest()\n                    {\n                        ApplicationId = applicationId,\n                        To = new List\u003cstring\u003e { userNumber },\n                        From = bandwidthNumber,\n                        Text = \"Hello world\"\n                    };\n\n                    try\n                    {\n                        var response = await client.Messaging.APIController.CreateMessageAsync(accountId, request);\n                        Console.WriteLine(response.Data);\n                    }\n                    catch (ApiException e)\n                    {\n                        Console.WriteLine(e.Message);\n                    }\n                }\n            }\n        - lang: Java\n          source: |\n            import com.bandwidth.BandwidthClient;\n            import com.bandwidth.http.response.ApiResponse;\n            import com.bandwidth.messaging.models.BandwidthMessage;\n            import com.bandwidth.messaging.models.MessageRequest;\n\n            import java.util.concurrent.CompletableFuture;\n            import java.util.concurrent.ExecutionException;\n            import java.util.Collections;\n\n            public class Sample {\n                public static final String USERNAME = \"api-username\";\n                public static final String PASSWORD = \"api-password\";\n                public static final String ACCOUNT_ID = \"12345\";\n\n                public static void main(String[] args) {\n                    String messagingApplicationId = \"1234-asdf\";\n                    String to = \"+15553334444\";\n                    String from = \"+15554443333\";\n\n                    BandwidthClient client = new BandwidthClient.Builder()\n                            .messagingBasicAuthCredentials(USERNAME, PASSWORD)\n                            .build();\n\n                    MessageRequest request = new MessageRequest();\n                    request.setApplicationId(messagingApplicationId);\n                    request.setTo(Collections.singletonList(to));\n                    request.setFrom(from);\n                    request.setText(\"Hello world\");\n\n                    try {\n                        CompletableFuture\u003cApiResponse\u003cBandwidthMessage\u003e\u003e completableFuture = client.getMessagingClient().getAPIController().createMessageAsync(ACCOUNT_ID, request);\n                        System.out.println(completableFuture.get().getResult());\n                    } catch (InterruptedException | ExecutionException e) {\n                        System.out.println(e.getMessage());\n                    }\n                }\n            }\n        - lang: Node.js\n          source: |\n            import { Client, ApiController } from '@bandwidth/messaging';\n\n            const BW_USERNAME = \"api-username\";\n            const BW_PASSWORD = \"api-password\";\n            const BW_ACCOUNT_ID = \"12345\";\n            const BW_MESSAGING_APPLICATION_ID = \"1234-asdf\";\n            const BW_NUMBER = \"+15554443333\";\n            const USER_NUMBER = \"+15553334444\";\n\n            const client = new Client({\n              basicAuthUserName: BW_USERNAME,\n              basicAuthPassword: BW_PASSWORD\n            });\n\n            const controller = new ApiController(client);\n\n            const accountId = BW_ACCOUNT_ID;\n\n            const sendMessage = async function() {\n              try {\n                const response = await controller.createMessage(accountId, {\n                    applicationId: BW_MESSAGING_APPLICATION_ID,\n                    to: [USER_NUMBER],\n                    from: BW_NUMBER,\n                    text: 'The quick brown fox jumps over the lazy dog.'\n                });\n                console.log(response.body);\n              } catch (error) {\n              console.error(error);\n            }};\n\n            sendMessage();\n        - lang: PHP\n          source: |\n            \u003c?php\n\n            require \"vendor/autoload.php\";\n\n            api-username = \"api-username\";\n            api-password = \"api-pasword\";\n            12345 = \"12345\";\n            1234-asdf = \"1234-asdf\";\n            +15554443333 = \"+15554443333\";\n            +15553334444 = \"+15553334444\";\n\n            $config = new BandwidthLib\\Configuration(\n                array(\n                    'messagingBasicAuthUserName' =\u003e $BW_USERNAME,\n                    'messagingBasicAuthPassword' =\u003e $BW_PASSWORD,\n                )\n            );\n            $client = new BandwidthLib\\BandwidthClient($config);\n\n            $messagingClient = $client-\u003egetMessaging()-\u003egetClient();\n\n            $body = new BandwidthLib\\Messaging\\Models\\MessageRequest();\n            $body-\u003efrom = $BW_NUMBER;\n            $body-\u003eto = array($USER_NUMBER);\n            $body-\u003eapplicationId = $BW_MESSAGING_APPLICATION_ID;\n            $body-\u003etext = \"Hello world\";\n\n            try {\n                $response = $messagingClient-\u003ecreateMessage($BW_ACCOUNT_ID, $body);\n                print_r($response-\u003egetResult()-\u003eid);\n            } catch (BandwidthLib\\APIException $e) {\n                print_r($e-\u003egetResponseCode());\n            }\n        - lang: Python\n          source: \u003e\n            from bandwidth.bandwidth_client import BandwidthClient\n\n            from bandwidth.messaging.models.message_request import\n            MessageRequest\n\n            from bandwidth.exceptions.api_exception import APIException\n\n\n            import os\n\n\n            BW_USERNAME = \"api-username\"\n\n            BW_PASSWORD = \"api-password\"\n\n            BW_ACCOUNT_ID = \"12345\"\n\n            BW_MESSAGING_APPLICATION_ID = \"1234-asdf\"\n\n            BW_NUMBER = \"+15554443333\"\n\n            USER_NUMBER = \"+15553334444\"\n\n\n            bandwidth_client = BandwidthClient(\n                messaging_basic_auth_user_name=BW_USERNAME,\n                messaging_basic_auth_password=BW_PASSWORD\n            )\n\n            messaging_client = bandwidth_client.messaging_client.client\n\n\n            body = MessageRequest()\n\n            body.application_id = BW_MESSAGING_APPLICATION_ID\n\n            body.to = [USER_NUMBER]\n\n            body.mfrom = BW_NUMBER\n\n            body.text = \"Hello world\"\n\n            try:\n                response = messaging_client.create_message(BW_ACCOUNT_ID, body)\n                print(response.body.id)\n            except APIException as e:\n                print(e.response_code)\n        - lang: Ruby\n          source: |\n            require 'bandwidth'\n\n            include Bandwidth\n            include Bandwidth::Messaging\n\n            bandwidth_client = Bandwidth::Client.new(\n                messaging_basic_auth_user_name: \"api-username\",\n                messaging_basic_auth_password: \"api-password\"\n            )\n            messaging_client = bandwidth_client.messaging_client.client\n\n            body = MessageRequest.new\n            body.application_id = \"1234-asdf\"\n            body.to = [\"+15553334444\"]\n            body.from = \"+15554443333\"\n            body.text = 'Hey, check this out!'\n            body.tag = '{\"test\": \"message\"}'\n            begin\n                result = messaging_client.create_message(\"12345\", body)\n                puts 'messageId: ' + result.data.id\n            rescue APIException =\u003e e\n                puts e.response_code\n            end\ncomponents:\n  parameters:\n    accountId:\n      in: path\n      name: accountId\n      required: true\n      schema:\n        type: string\n      description: Your Bandwidth Account ID.\n      example: '9900000'\n    mediaId:\n      in: path\n      name: mediaId\n      required: true\n      description: Media ID to retrieve.\n      example: 14762070468292kw2fuqty55yp2b2/0/bw.png\n      schema:\n        type: string\n    contentType:\n      in: header\n      name: Content-Type\n      style: simple\n      explode: false\n      description: The media type of the entity-body.\n      example: audio/wav\n      schema:\n        type: string\n    cacheControl:\n      in: header\n      name: Cache-Control\n      style: simple\n      explode: false\n      description: \u003e-\n        General-header field is used to specify directives that MUST be obeyed\n        by all caching mechanisms along the request/response chain.\n      example: no-cache\n      schema:\n        type: string\n    continuationToken:\n      in: header\n      name: Continuation-Token\n      description: Continuation token used to retrieve subsequent media.\n      example: \u003e-\n        1XEi2tsFtLo1JbtLwETnM1ZJ+PqAa8w6ENvC5QKvwyrCDYII663Gy5M4s40owR1tjkuWUif6qbWvFtQJR5/ipqbUnfAqL254LKNlPy6tATCzioKSuHuOqgzloDkSwRtX0LtcL2otHS69hK343m+SjdL+vlj71tT39\n      schema:\n        type: string\n    messageId:\n      in: query\n      name: messageId\n      required: false\n      description: \u003e-\n        The ID of the message to search for. Special characters need to be\n        encoded using URL encoding. Message IDs could come in different formats,\n        e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and\n        1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that\n        you must include at least one query parameter.\n      example: 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6\n      schema:\n        type: string\n    sourceTn:\n      in: query\n      name: sourceTn\n      required: false\n      description: \u003e-\n        The phone number that sent the message. Accepted values are: a single\n        full phone number a comma separated list of full phone numbers (maximum\n        of 10) or a single partial phone number (minimum of 5 characters e.g.\n        '%2B1919').\n      example: '%2B15554443333'\n      schema:\n        type: string\n    destinationTn:\n      in: query\n      name: destinationTn\n      required: false\n      description: \u003e-\n        The phone number that received the message. Accepted values are: a\n        single full phone number a comma separated list of full phone numbers\n        (maximum of 10) or a single partial phone number (minimum of 5\n        characters e.g. '%2B1919').\n      example: '%2B15554443333'\n      schema:\n        type: string\n    messageStatus:\n      in: query\n      name: messageStatus\n      required: false\n      description: \u003e-\n        The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED\n        DELIVERED ACCEPTED UNDELIVERED.\n      schema:\n        $ref: '#/components/schemas/messageStatusEnum'\n    messageDirection:\n      in: query\n      name: messageDirection\n      required: false\n      description: The direction of the message. One of INBOUND OUTBOUND.\n      schema:\n        $ref: '#/components/schemas/listMessageDirectionEnum'\n    carrierName:\n      in: query\n      name: carrierName\n      required: false\n      description: \u003e-\n        The name of the carrier used for this message. Possible values include\n        but are not limited to Verizon and TMobile. Special characters need to\n        be encoded using URL encoding (i.e. AT\u0026T should be passed as AT%26T).\n      example: Verizon\n      schema:\n        type: string\n    messageType:\n      in: query\n      name: messageType\n      required: false\n      description: The type of message. Either sms or mms.\n      schema:\n        $ref: '#/components/schemas/messageTypeEnum'\n    errorCode:\n      in: query\n      name: errorCode\n      required: false\n      description: The error code of the message.\n      example: 9902\n      schema:\n        type: integer\n    fromDateTime:\n      in: query\n      name: fromDateTime\n      required: false\n      description: \u003e-\n        The start of the date range to search in ISO 8601 format. Uses the\n        message receive time. The date range to search in is currently 14 days.\n      example: 2022-09-14T18:20:16.000Z\n      schema:\n        type: string\n    toDateTime:\n      in: query\n      name: toDateTime\n      required: false\n      description: \u003e-\n        The end of the date range to search in ISO 8601 format. Uses the message\n        receive time. The date range to search in is currently 14 days.\n      example: 2022-09-14T18:20:16.000Z\n      schema:\n        type: string\n    sort:\n      in: query\n      name: sort\n      required: false\n      description: \u003e-\n        The field and direction to sort by combined with a colon. Direction is\n        either asc or desc.\n      example: sourceTn:desc\n      schema:\n        type: string\n    pageToken:\n      in: query\n      name: pageToken\n      required: false\n      description: A base64 encoded value used for pagination of results.\n      example: gdEewhcJLQRB5\n      schema:\n        type: string\n    limit:\n      in: query\n      name: limit\n      required: false\n      description: \u003e-\n        The maximum records requested in search result. Default 100. The sum of\n        limit and after cannot be more than 10000.\n      schema:\n        type: integer\n      example: 50\n  schemas:\n    priorityEnum:\n      type: string\n      description: The priority specified by the user.\n      enum:\n        - default\n        - high\n      example: default\n    messageStatusEnum:\n      type: string\n      description: \u003e-\n        The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED\n        DELIVERED ACCEPTED UNDELIVERED.\n      enum:\n        - RECEIVED\n        - QUEUED\n        - SENDING\n        - SENT\n        - FAILED\n        - DELIVERED\n        - ACCEPTED\n        - UNDELIVERED\n      example: RECEIVED\n    listMessageDirectionEnum:\n      type: string\n      description: The direction of the message. One of INBOUND OUTBOUND.\n      enum:\n        - INBOUND\n        - OUTBOUND\n    messageDirectionEnum:\n      type: string\n      description: The direction of the message. One of in out.\n      enum:\n        - in\n        - out\n    messageTypeEnum:\n      type: string\n      description: The type of message. Either SMS or MMS.\n      enum:\n        - sms\n        - mms\n      example: sms\n    fieldError:\n      type: object\n      properties:\n        fieldName:\n          type: string\n          description: The name of the field that contains the error\n          example: from\n        description:\n          type: string\n          description: The error associated with the field\n          example: \u003e-\n            '+invalid' must be replaced with a valid E164 formatted telephone\n            number\n    messagesList:\n      title: MessagesList\n      type: object\n      properties:\n        totalCount:\n          type: integer\n          description: Total number of messages matched by the search.\n          example: 100\n        pageInfo:\n          $ref: '#/components/schemas/pageInfo'\n        messages:\n          type: array\n          items:\n            $ref: '#/components/schemas/listMessageItem'\n    listMessageItem:\n      title: listMessageItem\n      type: object\n      properties:\n        messageId:\n          type: string\n          description: The message id\n          example: 1589228074636lm4k2je7j7jklbn2\n        accountId:\n          type: string\n          description: The account id associated with this message.\n          example: '9900000'\n        sourceTn:\n          type: string\n          description: The source phone number of the message.\n          example: '+15554443333'\n        destinationTn:\n          type: string\n          description: The recipient phone number of the message.\n          example: '+15554442222'\n        messageStatus:\n          $ref: '#/components/schemas/messageStatusEnum'\n        messageDirection:\n          $ref: '#/components/schemas/listMessageDirectionEnum'\n        messageType:\n          $ref: '#/components/schemas/messageTypeEnum'\n        segmentCount:\n          type: integer\n          description: The number of segments the message was sent as.\n          example: 1\n        errorCode:\n          type: integer\n          description: The numeric error code of the message.\n          example: 9902\n        receiveTime:\n          type: string\n          description: The ISO 8601 datetime of the message.\n          example: 2020-04-07T14:03:07.000Z\n        carrierName:\n          type: string\n          nullable: true\n          description: \u003e-\n            The name of the carrier. Not currently supported for MMS coming\n            soon.\n          example: other\n        messageSize:\n          type: integer\n          description: The size of the message including message content and headers.\n          nullable: true\n          example: 27\n        messageLength:\n          type: integer\n          description: The length of the message content.\n          example: 18\n        attachmentCount:\n          type: integer\n          description: The number of attachments the message has.\n          nullable: true\n          example: 1\n        recipientCount:\n          type: integer\n          description: The number of recipients the message has.\n          nullable: true\n          example: 1\n        campaignClass:\n          type: string\n          description: The campaign class of the message if it has one.\n          nullable: true\n          example: T\n    pageInfo:\n      title: PageInfo\n      type: object\n      properties:\n        prevPage:\n          type: string\n          description: The link to the previous page for pagination.\n          example: \u003e-\n            https://messaging.bandwidth.com/api/v2/users/accountId/messages?messageStatus=DLR_EXPIRED\u0026nextPage=DLAPE902\n        nextPage:\n          type: string\n          description: The link to the next page for pagination.\n          example: \u003e-\n            https://messaging.bandwidth.com/api/v2/users/accountId/messages?messageStatus=DLR_EXPIRED\u0026prevPage=GL83PD3C\n        prevPageToken:\n          type: string\n          description: The isolated pagination token for the previous page.\n          example: DLAPE902\n        nextPageToken:\n          type: string\n          description: The isolated pagination token for the next page.\n          example: GL83PD3C\n    messagingRequestError:\n      title: MessagingRequestError\n      type: object\n      properties:\n        type:\n          type: string\n        description:\n          type: string\n      required:\n        - type\n        - description\n    createMessageRequestError:\n      title: CreateMessageRequestError\n      type: object\n      properties:\n        type:\n          type: string\n        description:\n          type: string\n        fieldErrors:\n          type: array\n          items:\n            $ref: '#/components/schemas/fieldError'\n      required:\n        - type\n        - description\n    media:\n      title: Media\n      type: object\n      properties:\n        content:\n          type: string\n        contentLength:\n          type: integer\n        mediaName:\n          type: string\n    tag:\n      title: Tag\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n    deferredResult:\n      title: DeferredResult\n      type: object\n      properties:\n        result:\n          type: object\n        setOrExpired:\n          type: boolean\n    message:\n      title: Message\n      type: object\n      properties:\n        id:\n          type: string\n          description: The id of the message.\n          example: 1589228074636lm4k2je7j7jklbn2\n        owner:\n          type: string\n          description: The Bandwidth phone number associated with the message.\n          example: '+15554443333'\n        applicationId:\n          type: string\n          description: The application ID associated with the message.\n          example: 93de2206-9669-4e07-948d-329f4b722ee2\n        time:\n          type: string\n          description: The datetime stamp of the message in ISO 8601\n          example: 2022-09-14T18:20:16.000Z\n        segmentCount:\n          type: integer\n          description: \u003e-\n            The number of segments the original message from the user is broken\n            into before sending over to carrier networks.\n          example: 2\n        direction:\n          $ref: '#/components/schemas/messageDirectionEnum'\n        to:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n          description: The phone number recipients of the message.\n          example:\n            - '+15552223333'\n        from:\n          type: string\n          description: The phone number the message was sent from.\n          example: '+15553332222'\n        media:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            The list of media URLs sent in the message. Including a `filename`\n            field in the `Content-Disposition` header of the media linked with a\n            URL will set the displayed file name. This is a best practice to\n            ensure that your media has a readable file name.\n          example:\n            - https://dev.bandwidth.com/images/bandwidth-logo.png\n        text:\n          type: string\n          description: The contents of the message.\n          example: Hello world\n        tag:\n          type: string\n          description: The custom string set by the user.\n          example: custom tag\n        priority:\n          $ref: '#/components/schemas/priorityEnum'\n    messageRequest:\n      title: MessageRequest\n      type: object\n      required:\n        - applicationId\n        - to\n        - from\n      properties:\n        applicationId:\n          type: string\n          description: \u003e-\n            The ID of the Application your from number is associated with in the\n            Bandwidth Phone Number Dashboard.\n          example: 93de2206-9669-4e07-948d-329f4b722ee2\n        to:\n          uniqueItems: true\n          type: array\n          description: The phone number(s) the message should be sent to in E164 format.\n          example:\n            - '+15554443333'\n            - '+15552223333'\n          items:\n            type: string\n        from:\n          type: string\n          description: \u003e-\n            One of your telephone numbers the message should come from in E164\n            format.\n          example: '+15551113333'\n        text:\n          type: string\n          description: The contents of the text message. Must be 2048 characters or less.\n          maxLength: 2048\n          example: Hello world\n        media:\n          type: array\n          items:\n            type: string\n            format: uri\n            maxLength: 4096\n          description: \u003e-\n            A list of URLs to include as media attachments as part of the\n            message.\n\n            Each URL can be at most 4096 characters.\n          example:\n            - https://dev.bandwidth.com/images/bandwidth-logo.png\n            - https://dev.bandwidth.com/images/github_logo.png\n        tag:\n          type: string\n          description: \u003e-\n            A custom string that will be included in callback events of the\n            message. Max 1024 characters.\n          example: custom string\n        priority:\n          $ref: '#/components/schemas/priorityEnum'\n        expiration:\n          type: string\n          description: \u003e-\n            A string with the date/time value that the message will\n            automatically expire by. This must be a valid RFC-3339 value, e.g.,\n            2021-03-14T01:59:26Z or 2021-03-13T20:59:26-05:00.\n          example: '2021-02-01T11:29:18-05:00'\n    inboundMessageCallback:\n      description: Inbound Message Callback\n      type: object\n      properties:\n        time:\n          type: string\n          format: date-time\n          example: 2016-09-14T18:20:16.000Z\n        type:\n          type: string\n          example: message-received\n        to:\n          type: string\n          example: '+15552223333'\n        description:\n          type: string\n          example: Incoming message received\n        message:\n          type: object\n          properties:\n            id:\n              type: string\n              example: 1661365814859loidf7mcwd4qacn7\n            owner:\n              type: string\n              example: '+15553332222'\n            applicationId:\n              type: string\n              example: 93de2206-9669-4e07-948d-329f4b722ee2\n            time:\n              type: string\n              format: date-time\n              example: 2016-09-14T18:20:16.000Z\n            segmentCount:\n              type: integer\n              example: 1\n            direction:\n              $ref: '#/components/schemas/messageDirectionEnum'\n            to:\n              uniqueItems: true\n              type: array\n              items:\n                type: string\n              example:\n                - '+15552223333'\n            from:\n              type: string\n              example: '+15553332222'\n            text:\n              type: string\n              example: Hello world\n            tag:\n              type: string\n              example: custom string\n            media:\n              type: array\n              items:\n                type: string\n                format: uri\n              example:\n                - https://dev.bandwidth.com/images/bandwidth-logo.png\n                - https://dev.bandwidth.com/images/github_logo.png\n            priority:\n              $ref: '#/components/schemas/priorityEnum'\n          required:\n            - id\n            - owner\n            - applicationId\n            - time\n            - segmentCount\n            - direction\n            - to\n            - from\n            - text\n      required:\n        - time\n        - type\n        - to\n        - description\n        - message\n    messageSendingCallback:\n      type: object\n      description: Message Sending Callback\n      properties:\n        time:\n          type: string\n          format: date-time\n          example: 2016-09-14T18:20:16.000Z\n        type:\n          type: string\n          example: message-sending\n        to:\n          type: string\n          example: '+15552223333'\n        description:\n          type: string\n          example: Message is sending to carrier\n        message:\n          type: object\n          properties:\n            id:\n              type: string\n              example: 1661365814859loidf7mcwd4qacn7\n            owner:\n              type: string\n              example: '+15553332222'\n            applicationId:\n              type: string\n              example: 93de2206-9669-4e07-948d-329f4b722ee2\n            time:\n              type: string\n              format: date-time\n              example: 2016-09-14T18:20:16.000Z\n            segmentCount:\n              type: integer\n              example: 1\n            direction:\n              $ref: '#/components/schemas/messageDirectionEnum'\n            to:\n              uniqueItems: true\n              type: array\n              items:\n                type: string\n              example:\n                - '+15552223333'\n            from:\n              type: string\n              example: '+15553332222'\n            text:\n              type: string\n              example: ''\n            tag:\n              type: string\n              example: custom string\n            media:\n              type: array\n              items:\n                type: string\n                format: uri\n              example:\n                - https://dev.bandwidth.com/images/bandwidth-logo.png\n                - https://dev.bandwidth.com/images/github_logo.png\n            priority:\n              $ref: '#/components/schemas/priorityEnum'\n          required:\n            - id\n            - owner\n            - applicationId\n            - time\n            - segmentCount\n            - direction\n            - to\n            - from\n            - text\n            - media\n            - priority\n      required:\n        - time\n        - type\n        - to\n        - description\n        - message\n    messageDeliveredCallback:\n      description: Message Delivered Callback\n      type: object\n      properties:\n        time:\n          type: string\n          format: date-time\n          example: 2016-09-14T18:20:16.000Z\n        type:\n          type: string\n          example: message-delivered\n        to:\n          type: string\n          example: '+15552223333'\n        description:\n          type: string\n          example: Message delivered to carrier.\n        message:\n          type: object\n          properties:\n            id:\n              type: string\n              example: 1661365814859loidf7mcwd4qacn7\n            owner:\n              type: string\n              example: '+15553332222'\n            applicationId:\n              type: string\n              example: 93de2206-9669-4e07-948d-329f4b722ee2\n            time:\n              type: string\n              format: date-time\n              example: 2016-09-14T18:20:16.000Z\n            segmentCount:\n              type: integer\n              example: 1\n            direction:\n              $ref: '#/components/schemas/messageDirectionEnum'\n            to:\n              uniqueItems: true\n              type: array\n              items:\n                type: string\n              example:\n                - '+15552223333'\n            from:\n              type: string\n              example: '+15553332222'\n            text:\n              type: string\n              example: ''\n            tag:\n              type: string\n              example: custom string\n            media:\n              type: array\n              items:\n                type: string\n                format: uri\n              example:\n                - https://dev.bandwidth.com/images/bandwidth-logo.png\n                - https://dev.bandwidth.com/images/github_logo.png\n            priority:\n              $ref: '#/components/schemas/priorityEnum'\n          required:\n            - id\n            - owner\n            - applicationId\n            - time\n            - segmentCount\n            - direction\n            - to\n            - from\n            - text\n            - tag\n      required:\n        - time\n        - type\n        - to\n        - description\n        - message\n    messageFailedCallback:\n      description: Message Failed Callback\n      type: object\n      properties:\n        time:\n          type: string\n          format: date-time\n          example: 2016-09-14T18:20:16.000Z\n        type:\n          type: string\n          example: message-failed\n        to:\n          type: string\n          example: '+15552223333'\n        description:\n          type: string\n          example: rejected-unallocated-from-number\n        message:\n          type: object\n          properties:\n            id:\n              type: string\n              example: 1661365814859loidf7mcwd4qacn7\n            owner:\n              type: string\n              example: '+15553332222'\n            applicationId:\n              type: string\n              example: 93de2206-9669-4e07-948d-329f4b722ee2\n            time:\n              type: string\n              format: date-time\n              example: 2016-09-14T18:20:16.000Z\n            segmentCount:\n              type: integer\n              example: 1\n            direction:\n              $ref: '#/components/schemas/messageDirectionEnum'\n            to:\n              uniqueItems: true\n              type: array\n              items:\n                type: string\n              example:\n                - '+15552223333'\n            from:\n              type: string\n              example: '+15553332222'\n            text:\n              type: string\n              example: ''\n            tag:\n              type: string\n              example: custom string\n            media:\n              type: array\n              items:\n                type: string\n                format: uri\n              example:\n                - https://dev.bandwidth.com/images/bandwidth-logo.png\n                - https://dev.bandwidth.com/images/github_logo.png\n            priority:\n              $ref: '#/components/schemas/priorityEnum'\n          required:\n            - id\n            - owner\n            - applicationId\n            - time\n            - segmentCount\n            - direction\n            - to\n            - from\n            - text\n            - tag\n            - priority\n        errorCode:\n          type: integer\n          example: 9902\n      required:\n        - time\n        - type\n        - to\n        - description\n        - message\n        - errorCode\n  requestBodies:\n    createMessageRequest:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/messageRequest'\n      required: true\n    uploadMediaRequest:\n      content:\n        application/json:\n          schema:\n            type: string\n            format: binary\n        application/ogg:\n          schema:\n            type: string\n            format: binary\n        application/pdf:\n          schema:\n            type: string\n            format: binary\n        application/rtf:\n          schema:\n            type: string\n            format: binary\n        application/zip:\n          schema:\n            type: string\n            format: binary\n        application/x-tar:\n          schema:\n            type: string\n            format: binary\n        application/xml:\n          schema:\n            type: string\n            format: binary\n        application/gzip:\n          schema:\n            type: string\n            format: binary\n        application/x-bzip2:\n          schema:\n            type: string\n            format: binary\n        application/x-gzip:\n          schema:\n            type: string\n            format: binary\n        application/smil:\n          schema:\n            type: string\n            format: binary\n        application/javascript:\n          schema:\n            type: string\n            format: binary\n        audio/mp4:\n          schema:\n            type: string\n            format: binary\n        audio/mpeg:\n          schema:\n            type: string\n            format: binary\n        audio/ogg:\n          schema:\n            type: string\n            format: binary\n        audio/flac:\n          schema:\n            type: string\n            format: binary\n        audio/webm:\n          schema:\n            type: string\n            format: binary\n        audio/wav:\n          schema:\n            type: string\n            format: binary\n        audio/amr:\n          schema:\n            type: string\n            format: binary\n        audio/3gpp:\n          schema:\n            type: string\n            format: binary\n        image/bmp:\n          schema:\n            type: string\n            format: binary\n        image/gif:\n          schema:\n            type: string\n            format: binary\n        image/jpeg:\n          schema:\n            type: string\n            format: binary\n        image/pjpeg:\n          schema:\n            type: string\n            format: binary\n        image/png:\n          schema:\n            type: string\n            format: binary\n        image/svg+xml:\n          schema:\n            type: string\n            format: binary\n        image/tiff:\n          schema:\n            type: string\n            format: binary\n        image/webp:\n          schema:\n            type: string\n            format: binary\n        image/x-icon:\n          schema:\n            type: string\n            format: binary\n        text/css:\n          schema:\n            type: string\n            format: binary\n        text/csv:\n          schema:\n            type: string\n            format: binary\n        text/calendar:\n          schema:\n            type: string\n            format: binary\n        text/plain:\n          schema:\n            type: string\n            format: binary\n        text/javascript:\n          schema:\n            type: string\n            format: binary\n        text/vcard:\n          schema:\n            type: string\n            format: binary\n        text/vnd.wap.wml:\n          schema:\n            type: string\n            format: binary\n        text/xml:\n          schema:\n            type: string\n            format: binary\n        video/avi:\n          schema:\n            type: string\n            format: binary\n        video/mp4:\n          schema:\n            type: string\n            format: binary\n        video/mpeg:\n          schema:\n            type: string\n            format: binary\n        video/ogg:\n          schema:\n            type: string\n            format: binary\n        video/quicktime:\n          schema:\n            type: string\n            format: binary\n        video/webm:\n          schema:\n            type: string\n            format: binary\n        video/x-ms-wmv:\n          schema:\n            type: string\n            format: binary\n      required: true\n  responses:\n    createMessageResponse:\n      description: Accepted\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/message'\n    listMessagesResponse:\n      description: OK\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/messagesList'\n    getMediaResponse:\n      description: OK\n      content:\n        application/octet-stream:\n          schema:\n            type: string\n            description: Successful Operation\n            format: binary\n    listMediaResponse:\n      description: OK\n      headers:\n        Continuation-Token:\n          description: Continuation token used to retrieve subsequent media.\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/media'\n    messagingBadRequestError:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/messagingRequestError'\n    createMessageBadRequestError:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/createMessageRequestError'\n    messagingUnauthorizedError:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/messagingRequestError'\n    messagingForbiddenError:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/messagingRequestError'\n    messagingNotFoundError:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/messagingRequestError'\n    messagingInvalidMediaTypeError:\n      description: Unsupported Media Type\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/messagingRequestError'\n    messagingTooManyRequestsError:\n      description: Too Many Requests\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/messagingRequestError'\n    messagingInternalServerError:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/messagingRequestError'\n  callbacks:\n    inboundCallback:\n      '{inboundCallbackUrl}':\n        post:\n          requestBody:\n            required: true\n            description: Inbound Message Callback Payload\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/inboundMessageCallback'\n          responses:\n            '200':\n              description: OK\n    statusCallback:\n      '{statusCallbackUrl}':\n        post:\n          requestBody:\n            required: true\n            description: Status Callback Payload\n            content:\n              application/json:\n                schema:\n                  type: object\n                  oneOf:\n                    - $ref: '#/components/schemas/messageSendingCallback'\n                    - $ref: '#/components/schemas/messageDeliveredCallback'\n                    - $ref: '#/components/schemas/messageFailedCallback'\n          responses:\n            '200':\n              description: OK\n  securitySchemes:\n    Basic:\n      type: http\n      scheme: basic\n      description: |-\n        Basic authentication is a simple authentication scheme built into the\n        HTTP protocol. To use it, send your HTTP requests with an Authorization\n        header that contains the word Basic followed by a space and a\n        base64-encoded string `username:password`Example: `Authorization: Basic\n        ZGVtbZpwQDU1dzByZA==`\nsecurity:\n  - Basic: []\ntags:\n  - name: Messages\n  - name: Media\n",
			"canonicalURL": "/github.com/Bandwidth/api-docs@1e1b8ac6521849db6e594ab0afa89722adf317eb/-/blob/site/specs/messaging.yml",
			"externalURLs": [
				{
					"url": "https://github.com/Bandwidth/api-docs/blob/1e1b8ac6521849db6e594ab0afa89722adf317eb/site/specs/messaging.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1100: cannot unmarshal !!str `#/compo...` into ogen.PathItem; yaml: line 1102: cannot unmarshal !!str `#/compo...` into ogen.PathItem"
}