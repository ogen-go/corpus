{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Rebilly/api-definitions"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/openapi.yaml",
			"byteSize": 64884,
			"content": "openapi: 3.0.3\ninfo:\n  version: \"latest\"\n  title: Rebilly API\n  contact:\n    name: \"Rebilly API Support\"\n    url: \"https://www.rebilly.com/contact/\"\n    email: \"integrations@rebilly.com\"\n  license:\n    name: \"Rebilly\"\n    url: 'https://www.rebilly.com/api-license/'\n  termsOfService: 'https://www.rebilly.com/terms-of-use/'\n  x-logo:\n    url: 'https://rebilly-core.redoc.ly/rb_apiLogo.svg'\n    backgroundColor: '#0044d4'\n  description:\n    $ref: description.md\n\nsecurity:\n  - SecretApiKey: []\n  - JWT: []\n\nservers:\n  - url: 'https://api-sandbox.rebilly.com/organizations/{organizationId}'\n    description: Sandbox server\n    variables:\n      organizationId:\n        default: unknown\n        description: |-\n          Unique organization identifier.\n          An organization is an entity that represents a company.\n          For more information, see [Obtain an organization ID](https://www.rebilly.com/docs/settings/organizations-and-websites/#obtain-your-organization-id-and-website-id).\n  - url: 'https://api.rebilly.com/organizations/{organizationId}'\n    description: Live server\n    variables:\n      organizationId:\n        default: unknown\n        description: |-\n          Unique organization identifier.\n          An organization is an entity that represents a company.\n          For more information, see [Obtain an organization ID](https://www.rebilly.com/docs/settings/organizations-and-websites/#obtain-your-organization-id-and-website-id).\n\ncomponents:\n  securitySchemes:\n    JWT:\n      description: |-\n        JWT is a short lifetime token that can be assigned a specific expiration time.\n        To create a JWT session, see [JWT session resource](https://user-api-docs.rebilly.com/tag/JWT-Session#operation/PostSigninRequest).\n\n        Usage format: `Bearer \u003cJWT\u003e`.\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    ApplicationJWT:\n      description: |-\n        Applications in our App Store can create a JSON Web Token (JWT) by [fetching an user's instance](https://user-api-docs.rebilly.com/tag/Application-owners#operation/GetApplicationInstanceByOrganization).\n\n        Usage format: `Bearer \u003cJWT\u003e`.\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n    PublishableApiKey:\n      description: |-\n        Only for the Tokens resource.\n\n        You can create a Publishable API Key via our [API Keys resource](https://all-rebilly.redoc.ly/tag/API-keys/operation/PostApiKey),\n        by specifying the type as `publishable`.\n      name: Authorization\n      type: apiKey\n      in: header\n\n    SecretApiKey:\n      description: |-\n        Never share your secret keys.\n        Keep them guarded and secure.\n\n        Use your secret API key only to make requests from the server side.\n        To authenticate, provide your secret key in the request header.\n      name: REB-APIKEY\n      type: apiKey\n      in: header\n\n    CustomerJWT:\n      description: |-\n        You can create a JSON Web Token (JWT) via [Storefront Authentication](https://all-rebilly.redoc.ly/tag/Authentication/operation/StorefrontPostLogin).\n\n        Usage format: `Bearer \u003cJWT\u003e`.\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\ntags:\n  - name: Account\n    description: |-\n      Use these operations to manage Rebilly accounts.\n      An account in which you are subscribed to in order to use the Rebilly product.\n  - name: AML\n    description: |-\n      Use Anti-Money Laundering (AML) operations to screen customers and help prevent your business from becoming directly or indirectly involved in criminal activity.\n\n      Use AML operations during customer creation, and some transaction processing,\n      to help determine if a potential customer (lead), or customer, has political or economic sanctions against them.\n\n      AML operations search the following for screening purposes:\n      Politically Exposed Persons (PEPs) lists, sanction lists,\n      and adverse media lists.\n  - name: API keys\n    description: |-\n      Use API keys to identify and authenticate applications and users.\n      Always keep your API keys private.\n      When creating API keys, you can restrict them to a given set of permissions.\n      For information on how to create and manage API keys, see [API keys](https://www.rebilly.com/docs/dev-docs/api-keys/).\n\n      In addition to API keys, you may use JSON Web Tokens (JWT) to authenticate to the API.\n      For more information, see [JWT session](https://user-api-docs.rebilly.com/#tag/JWT-Session).\n  - name: Application owners\n    description: |-\n      Use these operations to register applications to the Rebilly Apps Store and manage application instances.\n      An application owner is a person or organization that has submitted an app to the Rebilly App Store.\n      For more information, see [Submit an app](https://www.rebilly.com/docs/dev-docs/submit-a-rebilly-app/).\n  - name: Application users\n    description: |-\n      Use these operations to install or uninstall apps from the Rebilly App Store to your Rebilly account, and to manage application instances.\n      An application user is a person or organization that uses an app that is installed from the Rebilly App Store.\n      For more information, see [Install or uninstall an app](https://www.rebilly.com/docs/dev-docs/install-an-app/).\n  - name: Authentication\n    description: Use these operations to manage the process of confirming the identity of users that are attempting to access resources.\n  - name: Balance transactions\n    description: |-\n      Use these operations to view and manage balance transactions.\n\n      \u003e **Important:** These operations are experimental and may change.\n  - name: Billing portals\n    description: |-\n      Use these operations to create and manage billing portals.\n      Rebilly hosted billing portals provide secure, Rebilly hosted pages, where customers can:\n      view invoices, cancel subscriptions, update payment instruments, and update their address.\n  - name: Blocklists\n    description: |-\n      Use blocklists to prevent fraud and criminal activity.\n\n      Blocklists are lists of customer attribute values that are blocked from buying from you.\n      For example, if a customer attempts to make a purchase from you with a credit card that is in a blocklist, the transaction is blocked and is not processed.\n\n      Before a new transaction is processed in Rebilly, blocklists are examined to check for attributes related to the entity.\n      If a match is detected, the operation is aborted.\n      A blocklist that expires after a period of time is called a greylist.\n  - name: Broadcast messages\n    description: |-\n      Use broadcast messages to notify customers and leads about upcoming promotions, service updates, and events.\n      Broadcast messages are emails that are sent to a specific group of customers, or all customers.\n      For more information, see [Create a broadcast message](https://www.rebilly.com/docs/automations/email-notifications/#create-a-broadcast-messages).\n  - name: Cashier\n    description: |-\n      Create and manage cashier requests and manage strategies that determine the deposit amounts to display on the page.\n      Rebilly hosted cashiers provide a secure and compliant way to deposit funds.\n      Cashier forms are customizable, and use fully responsive design, built-in error messaging and validation.\n  - name: Checkout forms\n    description: |-\n      Use these operations to create and manage checkout forms.\n      Rebilly hosted checkout forms provide secure and compliant checkouts.\n      Checkout forms are customizable, and use fully responsive design,\n      built-in error messaging, validation, and expedited checkout for returning customers.\n  - name: Coupons\n    description: |-\n      Use coupons to reward customers, generate sales, or to test new pricing strategies.\n      Coupons enable you to apply different types of discounts to invoices, subscriptions, and pricing plans.\n\n      Redeemed coupons are attached to a customer's account.\n      Depending on the coupon restrictions, the redeemed coupons are then applied from the customer's account to subsequent invoices or subscriptions.\n      Redeemed coupons can only be applied to invoices of the same currency.\n\n      Once a coupon is redeemed it cannot be modified.\n      You may deactivate a coupon or create a new coupon, but you cannot reuse the same coupon code.\n      If you have a use case where you must reuse the same code, [contact Rebilly](https://www.rebilly.com/contact/).\n\n      ### Coupon restriction types\n\n      The following coupon description types are available:\n\n      - `restrict-to-countries`: Restricts a coupon for use in specific countries.\n      - `discounts-per-redemption`: Restricts the number of times that the coupon can be applied by one redemption.\n        For example, use this restriction to configure a coupon that can only be applied to the first subscription renewal of a particular product.\n      - `minimum-order-amount`: Sets a minimum order amount for a coupon application.\n        For example, if the restriction amount is $20, the coupon is only applied to invoices with a total amount of $20 or more.\n      - `restrict-to-invoices`: Restricts a coupon to specific invoices.\n      - `restrict-to-plans`: Restricts a coupon to specific pricing plans.\n      - `restrict-to-subscriptions`: Restricts a coupon to specific order subscriptions.\n      - `restrict-to-products`: Restricts a coupon to specific products.\n      - `paid-by-time`: Specifies a date and time at which a coupon redemption expires if not paid.\n      - `redemptions-per-customer`: Restricts the number of times that a coupon can be redeemed by one customer.\n        For example, use this restriction to limit the number of redemptions to one per customer.\n      - `total-redemptions`: Restricts the number of times a coupon can be redeemed by different customers.\n      - `restrict-to-bxgy`: Provides \"buy X get Y\" promotions.\n        These promotions incentivize new customers to buy and also reward existing customers.\n        This restriction type enables you to add discounted plans to an invoice when a certain quantity of other plans are purchased.\n        For example, if a customer buys two or more books, they get one free bookmark.\n  - name: Credit memos\n    description: |-\n      Use credit memos to provide a customer with store credit.\n      A common use case for using a credit memo is to provide a customer with store credit,\n      rather than a refund, if the customer pays more than they owe or returns a product.\n      For information on the credit memo resource, see [Resources](https://www.rebilly.com/docs/dev-docs/concepts/#resources).\n  - name: Credit memos timeline\n    description: |-\n      Use credit memo timelines to maintain an audit trail of changes and activity for each credit memo.\n      Credit memos are a means of providing a customer with store credit.\n  - name: Custom domains\n    description: |-\n      Use custom domains to configure and use your own domain for forms and billing portals,\n      instead of the default Rebilly domain: `portal.secure-payments.app`.\n      For more information, see [Configure a custom domain](https://www.rebilly.com/docs/settings/organizations-and-websites#configure-a-custom-domain).\n  - name: Custom fields\n    description: |-\n      Use custom fields to extend a resource scheme to include custom data that is not provided as a common field.\n      Depending on the resource on which the custom field is added, it may be available in the Rebilly UI.\n\n      Example: A custom field called `preferredCommunicationChannel` is added to the customer resource.\n      It has two allowed values, which are 'email' and 'phone'.\n\n      ```js\n      {\n        \"customFields\": {\n            \"preferredCommunicationChannel\": \"email\"\n        }\n      }\n      ```\n\n      For detailed information on Rebilly resources, see [Resources](https://www.rebilly.com/docs/dev-docs/concepts/#resources).\n  - name: Customer authentication\n    description: Use these operations to validate the identity of users and manage authentication credentials.\n  - name: Customers\n    description: |-\n      Use these operations to manage customers.\n      A customer is an entity that purchases goods or services from you (a merchant),\n      and is the payee in any transaction that is credited to you.\n      Customers are associated with payment instruments,\n      subscriptions, invoices, and other related resources.\n\n      In other systems, customers may be referred to as accounts,\n      clients, members, patrons, or players.\n      For information on the customer resource, see [Resources](https://www.rebilly.com/docs/dev-docs/concepts/#resources).\n  - name: Customers timeline\n    description: Use customer timelines to maintain an audit trail of changes and activity for each customer.\n  - name: Data exports\n    description: |-\n      Use data export operations to manage the export of resource data, such as:\n      transactions, customers, subscriptions, invoices, invoice item data, or revenue audit.\n      Common data export use cases are:\n      accounting, data analysis, reporting, or importing into other databases.\n\n      For detailed information on Rebilly resources,\n      see [Resources](https://www.rebilly.com/docs/dev-docs/concepts/#resources).\n\n      For information on how manage reconciliation, see [Transaction reconciliation](https://www.rebilly.com/docs/dev-docs/transaction-reconciliation).\n  - name: Disputes\n    description: |-\n      Use these operations to manage disputes.\n      A dispute occurs when a customer contests a charge to their account.\n      The dispute and related information is made available to the merchant by the bank or credit card company.\n      The merchant then has the option to represent the charge and win the case.\n      This process is called dispute resolution.\n      If the merchant is unable to represent the charge, the card issuer typically reverses the sale and adds fees on top of the charge.\n      This process is called a chargeback.\n  - name: Email credentials\n    description: Use these operations to get, create, and manage SMTP credential hashes.\n  - name: Email delivery settings\n    description: |-\n      Use email delivery settings to configure from which email address notifications and broadcast message are sent.\n      In Rebilly, this email address is referred to as a \"From address\".\n      Supported email service providers are:\n      SMTP, Mailgun, SendGrid, AWS SES, Postmark, and Rebilly.\n  - name: Email messages\n    description: Use email messages to email customers directly.\n  - name: Email notifications\n    description: |-\n      Use email notifications to keep customers informed on events,\n      and to inform them of events that may require action on their end.\n      Email notifications are targeted email messages that can be plain text or HTML.\n\n      Email notifications can also be used to notify teammates about new customers, blocklist matches, risk score changes, and more.\n      For more information, see [Email notifications](https://www.rebilly.com/docs/automations/email-notifications/).\n  - name: Email verification\n    description: |-\n      Use these operations to manage email verification.\n      Email verification is the process of confirming that an email address exists and is associated with an individual.\n  - name: Experian credentials\n    description: |-\n      Use these operations to manage your Experian account credentials.\n      The Experian integration provides identity verification.\n      For more information, see [Experian integration](https://www.rebilly.com/docs/automations/experian-integration/#experian-integration).\n  - name: Fees\n    description: |-\n      Use fees to reconcile transactions with applicable fees and discount rates.\n      Fees are not applied directly to transaction amounts, they do not modify the transaction amount.\n      Fees help to describe each part of the transaction amount.\n\n      \u003e **Important:** These operations are experimental and may change.\n  - name: Files\n    description: |-\n      Use the file entity to store files and related metadata.\n      Files can be sorted by size, MIME-type, user-defined tags, and description.\n\n      The following methods are available to upload files:\n      multipart/form-data encoded form, RAW POST \u0026mdash;\n      by sending the file contents as the POST body, and fetching from URL \u0026mdash;\n      by providing the file URL using the 'url' parameter.\n\n      Use the attachments entity to link a file to one or multiple objects, such as:\n      customer, dispute, transaction, order, plan, product, invoice, or timeline comment.\n      Attachments enable you to quickly find and use files related to specific entities.\n  - name: Gateway accounts\n    description: |-\n      Use these operations to manage payment gateway accounts.\n      A payment gateway is a service which enables merchants to receive payments from their customers to their merchant account.\n      A merchant account is a bank account that enables businesses to receive payments.\n      Use payment gateway accounts to connect payment requests to third party networks and platforms.\n  - name: Gateway accounts timeline\n    description: Use gateway account timelines to maintain an audit trail of changes and activity for each gateway account.\n  - name: Histograms\n    description: Use histograms operations to generate transaction histogram reports with cohorts and periods.\n      For information on the invoice resource, see [Resources](https://www.rebilly.com/docs/dev-docs/concepts/#resources).\n  - name: Integrations\n    description: |-\n      Use these operations to manage third-party apps that are integrated to your Rebilly account.\n      For more information on third-party apps, and how to integrate them,\n      see [Integrations](https://www.rebilly.com/docs/automations/integrations/).\n  - name: Invoices\n    description: |-\n      Use invoices to bill for the goods or services that you provide.\n      If your invoice includes subscription items, it also includes the corresponding service periods and prices.\n        - `funds-proof`: Validates that a customer has funds.\n        - `credit-file-proof`: Verifies that there is an existing credit file with two sources that match the customer's name, DOB, and address.\n\n      Rebilly parses and analyzes the documents and accepts or rejects them according to a configurable scoring algorithm.\n      When all document types in a KYC request are accepted, the status is fulfilled, and the [KYC request fulfilled webhook](https://www.rebilly.com/docs/dev-docs/api/operation/kyc-request-fulfilled/) is emitted.\n\n      ### Credit file proof\n\n      The `credit-file-proof` KYC document request type is only available in the API,\n      this option is not available in the [KYC document gatherer](https://www.rebilly.com/docs/kyc-and-aml/kyc-document-gatherer/).\n      This request verifies that there is an existing credit file with two sources that match the person's name, date of birth, and address.\n\n      In Canada, to meet FINTRAC requirements, the `credit-file-proof` KYC document request verifies the customer's name, address, and date of birth with a credit agency.\n\n      If `credit-file-proof` is requested in combination with `identity-proof` and `address-proof`,\n      `credit-file-proof` is attempted first.\n      If `credit-file-proof` validates the identity and address,\n      the KYC request is considered fulfilled.\n      If the request is not fulfilled,\n      redirect your customer to the KYC document gatherer to collect their KYC documents.\n  - name: Invoices timeline\n    description: Use invoice timelines to maintain an audit trail of changes and activity for each invoice.\n  - name: Journal\n    description: Use journal accounts, entries and records to track and recognize revenue.\n  - name: JWT session\n    description: |-\n      Use these operations to manage JWT sessions.\n      A session contains a token, which is a JSON Web Token.\n      The token is created with a user's sign in credentials.\n\n      This token can be used to authenticate to the API.\n      In addition, the session can be set to expire at a particular time.\n      Use the token to authenticate further requests to the Rebilly API.\n\n      The token must be kept private, but can be stored on the user's browser client to simulate a \"session\".\n  - name: KYC documents\n    description: |-\n      Use Know Your Customer (KYC) documents to verify your customers identity.\n      The KYC document operations generate a signed link to the Rebilly [KYC document gatherer](https://www.rebilly.com/docs/kyc-and-aml/kyc-document-gatherer/).\n\n      Document types:\n        - `identity-proof`: Validates a customer's identity.\n        - `address-proof`: Validates a customer's address.\n        - `purchase-proof`: Validates a customer's purchase.\n\n  - name: Lists\n    description: |-\n      Use lists to create and maintain sets of values that may be referenced in rule conditions.\n      Commonly used lists contain values related to conditions that target specific properties such as: customers, transactions, or BINs.\n\n      You may grant list edit permissions to members of your team without enabling them to edit rules.\n      This may be useful if your workflow involves frequent updates to value sets that are used in rule or bind conditions.\n      List order may not be maintained and duplicates may be removed.\n\n      For more information, see [Value lists](https://www.rebilly.com/docs/automations/create-a-value-list/#value-lists).\n  - name: Memberships\n    description: |-\n      Use these operations to manage user membership within your organizations.\n      Membership describes the relationship between organizations and users.\n      For example, one user could be a member of more than one organization.\n  - name: Metadata\n    description: |-\n      Use these operations to retrieve and manage metadata.\n      Metadata is structured information on other data.\n  - name: Orders\n    description: |-\n      Order is a customer's request to purchase items.\n      It can contain subscription and one-time sale items.\n      When an order contains one or more subscription items, it is a subscription order.\n\n      An order generates an invoice.\n      A subscription order generates an invoice for each service period.\n      For more information, see [Orders](https://www.rebilly.com/docs/dev-docs/concepts/#orders).\n      For more information, see [My organizations and websites](https://www.rebilly.com/docs/settings/organizations-and-websites/).\n\n      Note: Organizations are shared between the live and sandbox environments.\n\n  - name: Orders timeline\n    description: Use order timelines to maintain an audit trail of changes and activity for each order.\n  - name: Organization data exports\n    description: |-\n      Use organization data exports to export your organization data which you may want to do as a business continuity practice.\n      These may also be used to to export data if you decide to migrate to a different payments solution.\n  - name: Organizations\n    description: |-\n      Use these operations to manage your organizations in Rebilly.\n      An organization is an entity that represents you, or your company, as a merchant.\n      You can have multiple organizations.\n  - name: Password reset\n    description: Use these operations to manage password resets for a user or organization.\n  - name: Payment instruments\n    description: |-\n      Use these operations to manage payment instruments.\n      Payment instrument is a term which describes any means of making a digital payment, such as:\n      credit cards, debit cards, direct debits, payment service providers, and digital wallets.\n\n      For more information on payment instruments, see [Payment instruments](https://www.rebilly.com/docs/dev-docs/concepts/#payment-instruments).\n  - name: Payment tokens\n    description: |-\n      Use payment tokens to reduce the scope of [PCI DSS compliance](https://www.rebilly.com/docs/pci-compliance/).\n\n      A payment token can be made using a different authentication scheme (public key authentication), which enables you to create a payment token directly from the browser.\n      This bypasses the need to send sensitive cardholder info to your servers.\n      We recommend using this with the FramePay library, which helps you integrate a form into this API resource and create payment tokens.\n  - name: Plaid credentials\n    description: |-\n      Use these operations to manage your Plaid account credentials.\n      The Plaid integration provides customer bank credential verification,\n      and simplifies the process of providing credentials for your customers.\n      For more information, see [Plaid integration](https://www.rebilly.com/docs/automations/plaid-integration/).\n  - name: Plans\n    description: |-\n      Use pricing plans to describe how the customer must pay for [products](https://www.rebilly.com/docs/dev-docs/api/tag/Products/).\n\n      Rebilly provides the following plan types:\n\n      - Trial only: Use this plan to create and offer a free or discounted trial period for your product.\n        For example, a free 2 week trial of an internet service.\n        After the trial, the customer can choose to sign up for a paid subscription, or stop using the service.\n      - Recurring: Use this plan to create and offer a subscription for your product.\n        For example, a monthly subscription to an internet service that is charged at 20 USD per month.\n      - One time sale: Use this plan to create and offer a one-off sale for your products.\n        For example, a one time purchase of two bags of coffee.\n\n      For information on the plans resource, see [Plans](https://www.rebilly.com/docs/dev-docs/concepts/#plans).\n\n      For information on plan pricing, see [Pricing formulas](https://www.rebilly.com/docs/settings/pricing-formulas/).\n  - name: Products\n    description: |-\n      Use products to describe the goods and services that your business sells.\n      A product also describes sales items on invoices and receipts.\n      Product pricing is defined in [plans](https://www.rebilly.com/docs/dev-docs/api/tag/Plans/).\n      A product may have one or many plans.\n\n      For information on the product resource, see [Product](https://www.rebilly.com/docs/dev-docs/concepts/#products).\n  - name: Profile\n    description: |-\n      Use these operations to manage user profiles.\n      A profile represents the person that is signed in to Rebilly.\n  - name: Purchases\n    description: |-\n      Use these operations to manage purchases.\n      Purchases are transactions that have been executed related to the purchase of goods or services.\n  - name: Reports\n    description: Use reports operations to retrieve summary information about your customers, subscriptions, transactions, and more.\n  - name: Reset password\n    description: |-\n      Use these operations to manage password resets.\n      When a password reset is requested, an email with a token is sent.\n      In the email the user must click a reset link, and then create a new password.\n  - name: Roles\n    description: |-\n      Use these operations to manage user roles within your team or organization.\n      Roles are an implementation of the general hierarchical (Role Based Access Control) RBAC.\n      A senior role inherits all of its juniors' Access Control Lists (ACLs) and its own ACL.\n      Junior roles are not influenced by the senior role.\n  - name: Rules\n    description: |-\n      Use rules to automate.\n      In the Rebilly rules engine, an action is an operation that executes when an event occurs.\n      Action and event conditions are defined in rules.\n      Rulesets are collections of rules that are associated with an event.\n      The order in which the rules are placed within a ruleset specifies the execution order.\n\n      For a list of events and related actions, see [Events](https://www.rebilly.com/docs/automations/event-types/).\n  - name: Rules timeline\n    description: Use rule timelines to maintain an audit trail of changes and activity for each rule.\n  - name: Search\n    description: Use search operations to search data on customers, invoices, orders, transactions and more.\n  - name: Segments\n    description: |-\n      Use these operations to manage UI segments.\n      A segment is a filtered view of a data set that can be shared with other users.\n      For example, you may create a transactions segment that displays specific columns that are filtered and sorted based on certain criteria,\n      and share it with others in your organization.\n  - name: Shipping rates\n    description: |-\n      Use these operations to manage shipping rates.\n      A shipping rate contains a filter and a pricing for a specific shipping destination.\n  - name: Status\n    description: |-\n      Use this operation to check the status of the Rebilly API.\n      No authentication is required.\n  - name: Tags\n    description: Use tags to organize and categorize customers or KYC documents based on keywords.\n  - name: TaxJar credentials\n    description: |-\n      Use these operations to manage your TaxJar account credentials.\n      The TaxJar integration enables you to calculate taxes and create transactions for the Sales Tax AutoFile feature in your TaxJar account.\n      For more information, see [TaxJar integration](https://www.rebilly.com/docs/automations/tax-jar-integration/#taxjar-integration).\n  - name: Avalara credentials\n    description: |-\n      Use these operations to manage your Avalara account credentials.\n      The Avalara integration enables you to calculate taxes and create transactions in your Avalara account.\n  - name: Tracking\n    description: |-\n      Use tracking when debugging and auditing issues.\n      Tracking is a layer for accessing all activity such as:\n      API requests, subscriptions, webhooks, events, and more.\n  - name: Transactions\n    description: |-\n      Use these operations to:\n        - set up payment instruments for payments\n        - authorize and hold funds\n        - capture funds\n        - make payments\n        - make payouts\n        - refund transactions.\n  - name: Transactions timeline\n    description: Use transaction timelines to maintain an audit trail of changes and activity for each transaction.\n  - name: Usage\n    description: Reports the product usage of a subscription item for metered billing purposes.\n  - name: Users\n    description: |-\n      Use these operations to manage users.\n      A user is a person who can login to Rebilly, and take actions based on their granted permissions.\n  - name: Webhook credentials\n    description: Use these operations to manage webhook credential hashes.\n  - name: Webhooks\n    description: |-\n      Use these operations to manage webhooks.\n      Webhooks notify your systems in real-time when certain events occur.\n      For example, when a new transaction occurs or a new subscription is created.\n      Webhooks enable you to collect information about events.\n      Rebilly can send this information by HTTP POST request to a defined URL of your choice.\n  - name: Websites\n    description: |-\n      Use these operations to manage websites.\n      A website is where your organization obtains a customer.\n      It is also the processor account and billing descriptor used for payment transactions.\n      You can create multiple websites.\n\n      Websites are related to each invoice and each payment gateway account.\n      This enables you to associate gateway accounts with multiple websites,\n      or make them exclusive to particular websites.\n      For more information, see [My organizations and websites](https://www.rebilly.com/docs/settings/organizations-and-websites/).\n\n\nx-tagGroups:\n  - name: Customers\n    tags:\n      - Customers\n      - Customer authentication\n      - Tags\n      - Customers timeline\n  - name: Payment Instruments\n    tags:\n      - Payment instruments\n      - Payment tokens\n  - name: Payments\n    tags:\n      - Transactions\n      - Disputes\n      - Fees\n      - Transactions timeline\n  - name: Orders \u0026 Invoices\n    tags:\n      - Orders\n      - Invoices\n      - Usage\n      - Credit memos\n      - Plans\n      - Products\n      - Coupons\n      - Shipping rates\n      - Orders timeline\n      - Invoices timeline\n      - Credit memos timeline\n  - name: Risk\n    tags:\n      - Blocklists\n      - KYC documents\n      - AML\n  - name: Misc\n    tags:\n      - Custom fields\n      - Files\n      - Search\n\n\npaths:\n  /aml:\n    $ref: './paths/aml.yaml'\n  /aml-checks:\n    $ref: './paths/aml-checks.yaml'\n  '/aml-checks/{id}':\n    $ref: './paths/aml-checks@{id}.yaml'\n  '/aml-checks/{id}/review':\n    $ref: './paths/aml-checks@{id}@review.yaml'\n  /attachments:\n    $ref: ./paths/attachments.yaml\n  '/attachments/{id}':\n    $ref: './paths/attachments@{id}.yaml'\n  /authentication-options:\n    $ref: ./paths/authentication-options.yaml\n  /authentication-tokens:\n    $ref: ./paths/authentication-tokens.yaml\n  '/authentication-tokens/{token}':\n    $ref: './paths/authentication-tokens@{token}.yaml'\n  '/authentication-tokens/{token}/exchange':\n    $ref: './paths/authentication-tokens@{token}@exchange.yaml'\n  /blocklists:\n    $ref: ./paths/blocklists.yaml\n  '/blocklists/{id}':\n    $ref: './paths/blocklists@{id}.yaml'\n  /coupons-redemptions:\n    $ref: ./paths/coupons-redemptions.yaml\n  '/coupons-redemptions/{id}':\n    $ref: './paths/coupons-redemptions@{id}.yaml'\n  '/coupons-redemptions/{id}/cancel':\n    $ref: './paths/coupons-redemptions@{id}@cancel.yaml'\n  /coupons:\n    $ref: ./paths/coupons.yaml\n  '/coupons/{id}':\n    $ref: './paths/coupons@{id}.yaml'\n  '/coupons/{id}/expiration':\n    $ref: './paths/coupons@{id}@expiration.yaml'\n  /credentials:\n    $ref: ./paths/credentials.yaml\n  '/credentials/{id}':\n    $ref: './paths/credentials@{id}.yaml'\n  '/custom-fields/{resource}':\n    $ref: './paths/custom-fields@{resource}.yaml'\n  '/custom-fields/{resource}/{name}':\n    $ref: './paths/custom-fields@{resource}@{name}.yaml'\n  /customers:\n    $ref: ./paths/customers.yaml\n  '/customers/{id}':\n    $ref: './paths/customers@{id}.yaml'\n  /customer-timeline-custom-events:\n    $ref: ./paths/customer-timeline-custom-events.yaml\n  '/customer-timeline-custom-events/{id}':\n    $ref: './paths/customer-timeline-custom-events@{id}.yaml'\n  '/customers/{id}/aml':\n    $ref: './paths/customers@{id}@aml.yaml'\n  '/customers/{id}/lead-source':\n    $ref: './paths/customers@{id}@lead-source.yaml'\n  '/customers/{id}/timeline':\n    $ref: './paths/customers@{id}@timeline.yaml'\n  '/customers/{id}/timeline/{messageId}':\n    $ref: './paths/customers@{id}@timeline@{messageId}.yaml'\n  /disputes:\n    $ref: ./paths/disputes.yaml\n  '/disputes/{id}':\n    $ref: './paths/disputes@{id}.yaml'\n  /files:\n    $ref: ./paths/files.yaml\n  '/files/{id}':\n    $ref: './paths/files@{id}.yaml'\n  '/files/{id}/download':\n    $ref: './paths/files@{id}@download.yaml'\n  '/application-instances/{applicationId}':\n    $ref: './paths/application-instances@{applicationId}.yaml'\n  '/applications':\n    $ref: './paths/applications.yaml'\n  '/applications/{id}':\n    $ref: './paths/applications@{id}.yaml'\n  '/applications/{id}/instances':\n    $ref: './paths/applications@{id}@instances.yaml'\n  '/applications/{id}/instances/{organizationId}':\n    $ref: './paths/applications@{id}@instances@{organizationId}.yaml'\n  /invoices:\n    $ref: ./paths/invoices.yaml\n  '/invoices/{id}':\n    $ref: './paths/invoices@{id}.yaml'\n  '/invoices/{id}/items':\n    $ref: './paths/invoices@{id}@items.yaml'\n  '/invoices/{id}/items/{itemId}':\n    $ref: './paths/invoices@{id}@items@{itemId}.yaml'\n  '/invoices/{id}/issue':\n    $ref: './paths/invoices@{id}@issue.yaml'\n  '/invoices/{id}/abandon':\n    $ref: './paths/invoices@{id}@abandon.yaml'\n  '/invoices/{id}/void':\n    $ref: './paths/invoices@{id}@void.yaml'\n  '/invoices/{id}/recalculate':\n    $ref: './paths/invoices@{id}@recalculate.yaml'\n  '/invoices/{id}/reissue':\n    $ref: './paths/invoices@{id}@reissue.yaml'\n  '/invoices/{id}/transaction-allocations':\n    $ref: './paths/invoices@{id}@transaction-allocations.yaml'\n  '/invoices/{id}/transaction':\n    $ref: './paths/invoices@{id}@transaction.yaml'\n  '/invoices/{id}/timeline':\n    $ref: './paths/invoices@{id}@timeline.yaml'\n  '/invoices/{id}/timeline/{messageId}':\n    $ref: './paths/invoices@{id}@timeline@{messageId}.yaml'\n  /credit-memos:\n    $ref: ./paths/credit-memos.yaml\n  /credit-memos/{id}:\n    $ref: ./paths/credit-memos@{id}.yaml\n  /credit-memos/{id}/void:\n    $ref: ./paths/credit-memos@{id}@void.yaml\n  /credit-memos/{id}/timeline:\n    $ref: ./paths/credit-memos@{id}@timeline.yaml\n  /credit-memos/{id}/timeline/{messageId}:\n    $ref: ./paths/credit-memos@{id}@timeline@{messageId}.yaml\n  /journal-accounts:\n    $ref: paths/journal-accounts.yaml\n  /journal-accounts/{id}:\n    $ref: paths/journal-accounts@{id}.yaml\n  /journal-entries:\n    $ref: paths/journal-entries.yaml\n  /journal-entries/{id}:\n    $ref: paths/journal-entries@{id}.yaml\n  /journal-entries/{id}/records:\n    $ref: paths/journal-entries@{id}@records.yaml\n  /journal-entries/{id}/records/{journalRecordId}:\n    $ref: paths/journal-entries@{id}@records@{journalRecordId}.yaml\n  /kyc-requests:\n    $ref: ./paths/kyc-requests.yaml\n  '/kyc-requests/{id}':\n    $ref: './paths/kyc-requests@{id}.yaml'\n  /kyc-documents:\n    $ref: ./paths/kyc-documents.yaml\n  '/kyc-documents/{id}':\n    $ref: './paths/kyc-documents@{id}.yaml'\n  '/kyc-documents/{id}/acceptance':\n    $ref: './paths/kyc-documents@{id}@acceptance.yaml'\n  '/kyc-documents/{id}/matches':\n    $ref: './paths/kyc-documents@{id}@matches.yaml'\n  '/kyc-documents/{id}/rejection':\n    $ref: './paths/kyc-documents@{id}@rejection.yaml'\n  '/kyc-documents/{id}/review':\n    $ref: './paths/kyc-documents@{id}@review.yaml'\n  '/kyc-documents/{id}/start-review':\n    $ref: './paths/kyc-documents@{id}@start-review.yaml'\n  '/kyc-documents/{id}/stop-review':\n    $ref: './paths/kyc-documents@{id}@stop-review.yaml'\n  /kyc-settings:\n    $ref: ./paths/kyc-settings.yaml\n  /password-tokens:\n    $ref: ./paths/password-tokens.yaml\n  '/password-tokens/{id}':\n    $ref: './paths/password-tokens@{id}.yaml'\n  '/payment-instruments':\n    $ref: './paths/payment-instruments.yaml'\n  '/payment-instruments/{id}':\n    $ref: './paths/payment-instruments@{id}.yaml'\n  '/payment-instruments/{id}/deactivation':\n    $ref: './paths/payment-instruments@{id}@deactivation.yaml'\n  /plans:\n    $ref: ./paths/plans.yaml\n  '/plans/{id}':\n    $ref: './paths/plans@{id}.yaml'\n  /products:\n    $ref: ./paths/products.yaml\n  '/products/{id}':\n    $ref: './paths/products@{id}.yaml'\n  '/ready-to-pay':\n    $ref: ./paths/ready-to-pay.yaml\n  /search:\n    $ref: ./paths/search.yaml\n  /shipping-rates:\n    $ref: ./paths/shipping-rates.yaml\n  '/shipping-rates/{id}':\n    $ref: './paths/shipping-rates@{id}.yaml'\n  /subscriptions:\n    $ref: ./paths/subscriptions.yaml\n  '/subscriptions/{id}':\n    $ref: './paths/subscriptions@{id}.yaml'\n  '/subscriptions/{id}/void':\n    $ref: './paths/subscriptions@{id}@void.yaml'\n  '/subscriptions/{id}/change-items':\n    $ref: './paths/subscriptions@{id}@change-items.yaml'\n  '/subscriptions/{id}/interim-invoice':\n    $ref: './paths/subscriptions@{id}@interim-invoice.yaml'\n  /subscription-pauses:\n    $ref: ./paths/subscription-pauses.yaml\n  '/subscription-pauses/{id}':\n    $ref: './paths/subscription-pauses@{id}.yaml'\n  /subscription-cancellations:\n    $ref: ./paths/subscription-cancellations.yaml\n  '/subscription-cancellations/{id}':\n    $ref: './paths/subscription-cancellations@{id}.yaml'\n  /subscription-reactivations:\n    $ref: ./paths/subscription-reactivations.yaml\n  '/subscription-reactivations/{id}':\n    $ref: './paths/subscription-reactivations@{id}.yaml'\n  '/subscriptions/{id}/upcoming-invoices':\n    $ref: './paths/subscriptions@{id}@upcoming-invoices.yaml'\n  '/subscriptions/{id}/upcoming-invoice':\n    $ref: './paths/subscriptions@{id}@upcoming-invoice.yaml'\n  '/subscriptions/{id}/upcoming-invoices/{invoiceId}/issue':\n    $ref: './paths/subscriptions@{id}@upcoming-invoices@{invoiceId}@issue.yaml'\n  '/subscriptions/{id}/timeline':\n    $ref: './paths/subscriptions@{id}@timeline.yaml'\n  '/subscriptions/{id}/timeline/{messageId}':\n    $ref: './paths/subscriptions@{id}@timeline@{messageId}.yaml'\n  '/usages':\n    $ref: './paths/usages.yaml'\n  '/usages/{id}':\n    $ref: './paths/usages@{id}.yaml'\n  /tags:\n    $ref: ./paths/tags.yaml\n  '/tags/{tag}':\n    $ref: './paths/tags@{tag}.yaml'\n  '/tags/{tag}/customers':\n    $ref: './paths/tags@{tag}@customers.yaml'\n  '/tags/{tag}/customers/{customerId}':\n    $ref: './paths/tags@{tag}@customers@{customerId}.yaml'\n  '/tags/{tag}/kyc-documents':\n    $ref: './paths/tags@{tag}@kyc-documents.yaml'\n  '/tags/{tag}/kyc-documents/{kycDocumentId}':\n    $ref: './paths/tags@{tag}@kyc-documents@{kycDocumentId}.yaml'\n  /tokens:\n    $ref: ./paths/tokens.yaml\n  '/tokens/{token}':\n    $ref: './paths/tokens@{token}.yaml'\n  /digital-wallets/validation:\n    $ref: './paths/digital-wallets@validation.yaml'\n  /transactions:\n    $ref: ./paths/transactions.yaml\n  '/transactions/{id}':\n    $ref: './paths/transactions@{id}.yaml'\n  /payouts:\n    $ref: ./paths/payouts.yaml\n  '/transactions/{id}/query':\n    $ref: './paths/transactions@{id}@query.yaml'\n  '/transactions/{id}/update':\n    $ref: './paths/transactions@{id}@update.yaml'\n  '/transactions/{id}/refund':\n    $ref: './paths/transactions@{id}@refund.yaml'\n  '/transactions/{id}/timeline':\n    $ref: './paths/transactions@{id}@timeline.yaml'\n  '/transactions/{id}/timeline/{messageId}':\n    $ref: './paths/transactions@{id}@timeline@{messageId}.yaml'\n  '/fees':\n    $ref: './paths/fees.yaml'\n  '/fees/{id}':\n    $ref: './paths/fees@{id}.yaml'\n  '/activation/{token}':\n    $ref: './paths/activation@{token}.yaml'\n  /api-keys:\n    $ref: ./paths/api-keys.yaml\n  '/api-keys/{id}':\n    $ref: './paths/api-keys@{id}.yaml'\n  /balance-transactions:\n    $ref: './paths/balance-transactions.yaml'\n  '/balance-transactions/{id}':\n    $ref: './paths/balance-transactions@{id}.yaml'\n  /billing-portals:\n    $ref: ./paths/billing-portals.yaml\n  /billing-portals/{id}:\n    $ref: './paths/billing-portals@{id}.yaml'\n  /broadcast-messages:\n    $ref: ./paths/broadcast-messages.yaml\n  '/broadcast-messages/{id}':\n    $ref: './paths/broadcast-messages@{id}.yaml'\n  /cashier-requests:\n    $ref: ./paths/cashier-requests.yaml\n  /cashier-requests/{id}:\n    $ref: ./paths/cashier-requests@{id}.yaml\n  /cashier-strategies:\n    $ref: ./paths/cashier-strategies.yaml\n  /cashier-strategies/{id}:\n    $ref: ./paths/cashier-strategies@{id}.yaml\n  /checkout-forms:\n    $ref: ./paths/checkout-forms.yaml\n  /checkout-forms/{id}:\n    $ref: './paths/checkout-forms@{id}.yaml'\n  /credential-hashes/aws-ses:\n    $ref: ./paths/credential-hashes@aws-ses.yaml\n  '/credential-hashes/aws-ses/{hash}':\n    $ref: './paths/credential-hashes@aws-ses@{hash}.yaml'\n  /credential-hashes/emails:\n    $ref: ./paths/credential-hashes@emails.yaml\n  '/credential-hashes/emails/{hash}':\n    $ref: './paths/credential-hashes@emails@{hash}.yaml'\n  /credential-hashes/mailgun:\n    $ref: ./paths/credential-hashes@mailgun.yaml\n  '/credential-hashes/mailgun/{hash}':\n    $ref: './paths/credential-hashes@mailgun@{hash}.yaml'\n  /credential-hashes/oauth2:\n    $ref: ./paths/credential-hashes@oauth2.yaml\n  '/credential-hashes/oauth2/{hash}':\n    $ref: './paths/credential-hashes@oauth2@{hash}.yaml'\n  '/credential-hashes/oauth2/{hash}/items':\n    $ref: './paths/credential-hashes@oauth2@{hash}@items.yaml'\n  /credential-hashes/plaid:\n    $ref: './paths/credential-hashes@plaid.yaml'\n  '/credential-hashes/plaid/{hash}':\n    $ref: './paths/credential-hashes@plaid@{hash}.yaml'\n  /credential-hashes/postmark:\n    $ref: ./paths/credential-hashes@postmark.yaml\n  '/credential-hashes/postmark/{hash}':\n    $ref: './paths/credential-hashes@postmark@{hash}.yaml'\n  /credential-hashes/sendgrid:\n    $ref: ./paths/credential-hashes@sendgrid.yaml\n  '/credential-hashes/sendgrid/{hash}':\n    $ref: './paths/credential-hashes@sendgrid@{hash}.yaml'\n  /credential-hashes/webhooks:\n    $ref: ./paths/credential-hashes@webhooks.yaml\n  '/credential-hashes/webhooks/{hash}':\n    $ref: './paths/credential-hashes@webhooks@{hash}.yaml'\n  /credential-hashes/experian:\n    $ref: ./paths/credential-hashes@experian.yaml\n  '/credential-hashes/experian/{hash}':\n    $ref: './paths/credential-hashes@experian@{hash}.yaml'\n  /credential-hashes/taxjar:\n    $ref: ./paths/credential-hashes@taxjar.yaml\n  '/credential-hashes/taxjar/{hash}':\n    $ref: './paths/credential-hashes@taxjar@{hash}.yaml'\n  /credential-hashes/avalara:\n    $ref: ./paths/credential-hashes@avalara.yaml\n  '/credential-hashes/avalara/{hash}':\n    $ref: './paths/credential-hashes@avalara@{hash}.yaml'\n  /custom-domains:\n    $ref: ./paths/custom-domains.yaml\n  '/custom-domains/{domain}':\n    $ref: './paths/custom-domains@{domain}.yaml'\n  '/email-delivery-setting-verifications/{token}':\n    $ref: './paths/email-delivery-setting-verifications@{token}.yaml'\n  /email-delivery-settings:\n    $ref: ./paths/email-delivery-settings.yaml\n  '/email-delivery-settings/{id}':\n    $ref: './paths/email-delivery-settings@{id}.yaml'\n  '/email-delivery-settings/{id}/resend-email-verification':\n    $ref: './paths/email-delivery-settings@{id}@resend-email-verification.yaml'\n  /email-messages:\n    $ref: ./paths/email-messages.yaml\n  '/email-messages/{id}':\n    $ref: './paths/email-messages@{id}.yaml'\n  /email-notifications:\n    $ref: ./paths/email-notifications.yaml\n  /events:\n    $ref: ./paths/events.yaml\n  '/events/{eventType}':\n    $ref: './paths/events@{eventType}.yaml'\n  '/events/{eventType}/rules':\n    $ref: './paths/events@{eventType}@rules.yaml'\n  '/events/{eventType}/timeline':\n    $ref: './paths/events@{eventType}@timeline.yaml'\n  '/events/{eventType}/timeline/{messageId}':\n    $ref: './paths/events@{eventType}@timeline@{messageId}.yaml'\n  '/events/{eventType}/rules/history':\n    $ref: './paths/events@{eventType}@rules@history.yaml'\n  '/events/{eventType}/rules/history/{version}':\n    $ref: './paths/events@{eventType}@rules@history@{version}.yaml'\n  '/events/{eventType}/rules/versions/{version}':\n    $ref: './paths/events@{eventType}@rules@versions@{version}.yaml'\n  '/events/{eventType}/rules/drafts':\n    $ref: './paths/events@{eventType}@rules@drafts.yaml'\n  '/events/{eventType}/rules/drafts/{id}':\n    $ref: './paths/events@{eventType}@rules@drafts@{id}.yaml'\n  /forgot-password:\n    $ref: ./paths/forgot-password.yaml\n  /gateway-accounts:\n    $ref: ./paths/gateway-accounts.yaml\n  '/gateway-accounts/{id}':\n    $ref: './paths/gateway-accounts@{id}.yaml'\n  '/gateway-accounts/{id}/close':\n    $ref: './paths/gateway-accounts@{id}@close.yaml'\n  '/gateway-accounts/{id}/disable':\n    $ref: './paths/gateway-accounts@{id}@disable.yaml'\n  '/gateway-accounts/{id}/downtime-schedules':\n    $ref: './paths/gateway-accounts@{id}@downtime-schedules.yaml'\n  '/gateway-accounts/{id}/downtime-schedules/{downtimeId}':\n    $ref: './paths/gateway-accounts@{id}@downtime-schedules@{downtimeId}.yaml'\n  '/gateway-accounts/{id}/enable':\n    $ref: './paths/gateway-accounts@{id}@enable.yaml'\n  '/gateway-accounts/{id}/limits':\n    $ref: './paths/gateway-accounts@{id}@limits.yaml'\n  '/gateway-accounts/{id}/limits/{limitId}':\n    $ref: './paths/gateway-accounts@{id}@limits@{limitId}.yaml'\n  '/gateway-accounts/{id}/timeline':\n    $ref: './paths/gateway-accounts@{id}@timeline.yaml'\n  '/gateway-accounts/{id}/timeline/{messageId}':\n    $ref: './paths/gateway-accounts@{id}@timeline@{messageId}.yaml'\n  '/gateway-accounts/{id}/check-credentials':\n    $ref: './paths/gateway-accounts@{id}@check-credentials.yaml'\n  '/gateway-accounts/{id}/financial-settings':\n    $ref: './paths/gateway-accounts@{id}@financial-settings.yaml'\n  /digital-wallets/onboarding/apple-pay:\n    $ref: './paths/digital-wallets@onboarding@apple-pay.yaml'\n  /grid-segments:\n    $ref: ./paths/grid-segments.yaml\n  '/grid-segments/{id}':\n    $ref: './paths/grid-segments@{id}.yaml'\n  /integrations:\n    $ref: ./paths/integrations.yaml\n  '/integrations/{label}':\n    $ref: './paths/integrations@{label}.yaml'\n  /lists:\n    $ref: ./paths/lists.yaml\n  '/lists/{id}':\n    $ref: './paths/lists@{id}.yaml'\n  '/lists/{id}/{version}':\n    $ref: './paths/lists@{id}@{version}.yaml'\n  /logout:\n    $ref: ./paths/logout.yaml\n  /memberships:\n    $ref: ./paths/memberships.yaml\n  '/memberships/{organizationId}/{userId}':\n    $ref: './paths/memberships@{organizationId}@{userId}.yaml'\n  /organizations:\n    $ref: ./paths/organizations.yaml\n  '/organizations/{id}':\n    $ref: './paths/organizations@{id}.yaml'\n  /payment-cards-bank-names:\n    $ref: ./paths/payment-cards-bank-names.yaml\n  /payment-methods:\n    $ref: ./paths/payment-methods.yaml\n  /payment-methods/{apiName}:\n    $ref: './paths/payment-methods@{apiName}.yaml'\n  /payment-gateways-metadata:\n    $ref: ./paths/payment-gateways-metadata.yaml\n  /payment-gateways-metadata/{apiName}:\n    $ref: './paths/payment-gateways-metadata@{apiName}.yaml'\n  /payout-requests:\n    $ref: ./paths/payout-requests.yaml\n  '/payout-requests/{id}':\n    $ref: './paths/payout-requests@{id}.yaml'\n  '/payout-requests/{id}/accept':\n    $ref: './paths/payout-requests@{id}@accept.yaml'\n  '/payout-requests/{id}/reject':\n    $ref: './paths/payout-requests@{id}@reject.yaml'\n  '/payout-requests/{id}/payment-instruments':\n    $ref: './paths/payout-requests@{id}@payment-instruments.yaml'\n  /permissions-emulation:\n    $ref: ./paths/permissions-emulation.yaml\n  /previews/orders:\n    $ref: ./paths/previews@orders.yaml\n  /previews/rule-actions/send-email:\n    $ref: ./paths/previews@rule-actions@send-email.yaml\n  /previews/rule-actions/trigger-webhook:\n    $ref: ./paths/previews@rule-actions@trigger-webhook.yaml\n  /previews/webhooks:\n    $ref: ./paths/previews@webhooks.yaml\n  /profile:\n    $ref: ./paths/profile.yaml\n  /profile/mfa:\n    $ref: ./paths/profile@mfa.yaml\n  /profile/password:\n    $ref: ./paths/profile@password.yaml\n  /profile/totp-reset:\n    $ref: ./paths/profile@totp-reset.yaml\n  '/reset-password/{token}':\n    $ref: './paths/reset-password@{token}.yaml'\n  '/roles':\n    $ref: ./paths/roles.yaml\n  '/roles/{id}':\n    $ref: './paths/roles@{id}.yaml'\n  '/send-through-attribution/{eventType}':\n    $ref: './paths/send-through-attribution@{eventType}.yaml'\n  /signin:\n    $ref: ./paths/signin.yaml\n  /signup:\n    $ref: ./paths/signup.yaml\n  /status:\n    $ref: ./paths/status.yaml\n  /tracking/api:\n    $ref: ./paths/tracking@api.yaml\n  '/tracking/api/{id}':\n    $ref: './paths/tracking@api@{id}.yaml'\n  /tracking/lists:\n    $ref: ./paths/tracking@lists.yaml\n  /tracking/webhooks:\n    $ref: ./paths/tracking@webhooks.yaml\n  '/tracking/webhooks/{id}':\n    $ref: './paths/tracking@webhooks@{id}.yaml'\n  '/tracking/webhooks/{id}/resend':\n    $ref: './paths/tracking@webhooks@{id}@resend.yaml'\n  /users:\n    $ref: ./paths/users.yaml\n  '/users/{id}':\n    $ref: './paths/users@{id}.yaml'\n  '/users/{id}/mfa':\n    $ref: './paths/users@{id}@mfa.yaml'\n  '/users/{id}/password':\n    $ref: './paths/users@{id}@password.yaml'\n  '/users/{id}/totp-reset':\n    $ref: './paths/users@{id}@totp-reset.yaml'\n  /webhooks:\n    $ref: ./paths/webhooks.yaml\n  '/webhooks/{id}':\n    $ref: './paths/webhooks@{id}.yaml'\n  /websites:\n    $ref: ./paths/websites.yaml\n  '/websites/{id}':\n    $ref: './paths/websites@{id}.yaml'\n  '/experimental/customers/{customerId}/summary-metrics':\n    $ref: './paths/customers@{customerId}@summary-metrics.yaml'\n  /experimental/data-exports:\n    $ref: ./paths/data-exports.yaml\n  '/experimental/data-exports/{id}':\n    $ref: './paths/data-exports@{id}.yaml'\n  /organization-exports:\n    $ref: ./paths/organization-exports.yaml\n  '/organization-exports/{id}':\n    $ref: './paths/organization-exports@{id}.yaml'\n  /experimental/histograms/transactions:\n    $ref: ./paths/histograms@transactions.yaml\n  /experimental/reports/api-log-summary:\n    $ref: ./paths/reports@api-log-summary.yaml\n  /experimental/reports/cumulative-subscriptions:\n    $ref: ./paths/reports@cumulative-subscriptions.yaml\n  /experimental/reports/dashboard:\n    $ref: ./paths/reports@dashboard.yaml\n  /experimental/reports/dcc-markup:\n    $ref: ./paths/reports@dcc-markup.yaml\n  /experimental/reports/disputes:\n    $ref: ./paths/reports@disputes.yaml\n  /experimental/reports/events-triggered:\n    $ref: ./paths/reports@events-triggered.yaml\n  '/experimental/reports/events-triggered/{eventType}/rules':\n    $ref: ./paths/reports@events-triggered@{eventType}@rules.yaml\n  /experimental/reports/future-renewals:\n    $ref: ./paths/reports@future-renewals.yaml\n  /experimental/reports/journal:\n    $ref: ./paths/reports@journal.yaml\n  /experimental/reports/kyc-acceptance-summary:\n    $ref: ./paths/reports@kyc-acceptance-summary.yaml\n  /experimental/reports/kyc-rejection-summary:\n    $ref: ./paths/reports@kyc-rejection-summary.yaml\n  /experimental/reports/kyc-request-summary:\n    $ref: ./paths/reports@kyc-request-summary.yaml\n  /experimental/reports/monthly-recurring-revenue:\n    $ref: ./paths/reports@monthly-recurring-revenue.yaml\n  /experimental/reports/renewal-sales:\n    $ref: ./paths/reports@renewal-sales.yaml\n  /experimental/reports/retention-percentage:\n    $ref: ./paths/reports@retention-percentage.yaml\n  /experimental/reports/retention-value:\n    $ref: ./paths/reports@retention-value.yaml\n  /experimental/reports/revenue-waterfall:\n    $ref: ./paths/reports@revenue-waterfall.yaml\n  /experimental/reports/revenue-audit:\n    $ref: ./paths/reports@revenue-audit.yaml\n  /experimental/reports/subscription-cancellation:\n    $ref: ./paths/reports@subscription-cancellation.yaml\n  /experimental/reports/subscription-renewal:\n    $ref: ./paths/reports@subscription-renewal.yaml\n  /experimental/reports/time-series-transaction:\n    $ref: ./paths/reports@time-series-transaction.yaml\n  /experimental/reports/transactions-time-dispute:\n    $ref: ./paths/reports@transactions-time-dispute.yaml\n  /experimental/reports/transactions:\n    $ref: ./paths/reports@transactions.yaml\n  '/experimental/subscriptions/{subscriptionId}/summary-metrics':\n    $ref: ./paths/subscriptions@{subscriptionId}@summary-metrics.yaml\n  '/storefront/account':\n    $ref: ./paths/storefront/account.yaml\n  '/storefront/account/forgot-password':\n    $ref: paths/storefront/account@forgot-password.yaml\n  '/storefront/account/password':\n    $ref: paths/storefront/account@password.yaml\n  '/storefront/account/resend-verification':\n    $ref: paths/storefront/account@resend-verification.yaml\n  '/storefront/account/reset-password/{token}':\n    $ref: paths/storefront/account@reset-password@{token}.yaml\n  '/storefront/account/verification/{token}':\n    $ref: paths/storefront/account@verification@{token}.yaml\n  '/storefront/billing-portals/{slug}':\n    $ref: paths/storefront/billing-portals@{slug}.yaml\n  '/storefront/cashier-requests/{id}':\n    $ref: paths/storefront/cashier-requests@{id}.yaml\n  '/storefront/cashier-deposit':\n    $ref: paths/storefront/cashier-deposit.yaml\n  '/storefront/checkout-forms/{id}':\n    $ref: paths/storefront/checkout-forms@{id}.yaml\n  '/storefront/invoices':\n    $ref: paths/storefront/invoices.yaml\n  '/storefront/invoices/{id}':\n    $ref: paths/storefront/invoices@{id}.yaml\n  '/storefront/kyc-documents':\n    $ref: paths/storefront/kyc-documents.yaml\n  '/storefront/kyc-documents/{id}':\n    $ref: paths/storefront/kyc-documents@{id}.yaml\n  '/storefront/kyc-requests/{id}':\n    $ref: paths/storefront/kyc-requests@{id}.yaml\n  '/storefront/login':\n    $ref: paths/storefront/login.yaml\n  '/storefront/logout':\n    $ref: paths/storefront/logout.yaml\n  '/storefront/orders':\n    $ref: paths/storefront/orders.yaml\n  '/storefront/orders/{id}':\n    $ref: paths/storefront/orders@{id}.yaml\n  '/storefront/orders/{id}/cancellation':\n    $ref: paths/storefront/orders@{id}@cancellation.yaml\n  '/storefront/payment':\n    $ref: paths/storefront/payment.yaml\n  '/storefront/payment-instruments':\n    $ref: paths/storefront/payment-instruments.yaml\n  '/storefront/payment-instruments/{id}':\n    $ref: paths/storefront/payment-instruments@{id}.yaml\n  '/storefront/payment-instruments/{id}/deactivation':\n    $ref: paths/storefront/payment-instruments@{id}@deactivation.yaml\n  '/storefront/payment-instruments/{id}/setup':\n    $ref: paths/storefront/payment-instruments@{id}@setup.yaml\n  '/storefront/payout-requests':\n    $ref: ./paths/storefront/payout-requests.yaml\n  '/storefront/payout-requests/{id}':\n    $ref: paths/storefront/payout-requests@{id}.yaml\n  '/storefront/payout-requests/{id}/cancel':\n    $ref: paths/storefront/payout-requests@{id}@cancel.yaml\n  '/storefront/plans':\n    $ref: paths/storefront/plans.yaml\n  '/storefront/plans/{id}':\n    $ref: paths/storefront/plans@{id}.yaml\n  '/storefront/products':\n    $ref: paths/storefront/products.yaml\n  '/storefront/products/{id}':\n    $ref: paths/storefront/products@{id}.yaml\n  '/storefront/purchase':\n    $ref: paths/storefront/purchase.yaml\n  '/storefront/preview-purchase':\n    $ref: paths/storefront/preview-purchase.yaml\n  '/storefront/ready-to-pay':\n    $ref: paths/storefront/ready-to-pay.yaml\n  '/storefront/register':\n    $ref: paths/storefront/register.yaml\n  '/storefront/transactions':\n    $ref: paths/storefront/transactions.yaml\n  '/storefront/transactions/{id}':\n    $ref: paths/storefront/transactions@{id}.yaml\n  '/storefront/websites/{id}':\n    $ref: paths/storefront/websites@{id}.yaml\n  '/customers/{id}/edd-score':\n    $ref: paths/customers@{id}@edd-score.yaml\n  '/customers/{id}/edd-timeline':\n    $ref: paths/customers@{id}@edd-timeline.yaml\n  '/customers/{id}/edd-search-results':\n    $ref: paths/customers@{id}@edd-search-results.yaml\n\nx-webhooks:\n  application-instance-disabled:\n    post:\n      $ref: ./webhooks/application-instance-disabled.yaml\n  application-instance-enabled:\n    post:\n      $ref: ./webhooks/application-instance-enabled.yaml\n  aml-list-possibly-matched:\n    post:\n      $ref: ./webhooks/aml-list-possibly-matched.yaml\n  balance-transaction-settled:\n    post:\n      $ref: ./webhooks/balance-transaction-settled.yaml\n  credit-memo-applied:\n    post:\n      $ref: ./webhooks/credit-memo-applied.yaml\n  credit-memo-created:\n    post:\n      $ref: ./webhooks/credit-memo-created.yaml\n  credit-memo-modified:\n    post:\n      $ref: ./webhooks/credit-memo-modified.yaml\n  credit-memo-partially-applied:\n    post:\n      $ref: ./webhooks/credit-memo-partially-applied.yaml\n  credit-memo-voided:\n    post:\n      $ref: ./webhooks/credit-memo-voided.yaml\n  customer-created:\n    post:\n      $ref: ./webhooks/customer-created.yaml\n  customer-merged:\n    post:\n      $ref: ./webhooks/customer-merged.yaml\n  customer-one-time-password-requested:\n    post:\n      $ref: ./webhooks/customer-one-time-password-requested.yaml\n  customer-redirected-offsite:\n    post:\n      $ref: ./webhooks/customer-redirected-offsite.yaml\n  customer-returned:\n    post:\n      $ref: ./webhooks/customer-returned.yaml\n  customer-updated:\n    post:\n      $ref: ./webhooks/customer-updated.yaml\n  dispute-created:\n    post:\n      $ref: ./webhooks/dispute-created.yaml\n  dispute-modified:\n    post:\n      $ref: ./webhooks/dispute-modified.yaml\n  experian-check-performed:\n    post:\n      $ref: ./webhooks/experian-check-performed.yaml\n  invoice-tax-calculation-failed:\n    post:\n      $ref: ./webhooks/invoice-tax-calculation-failed.yaml\n  gateway-account-downtime-ended:\n    post:\n      $ref: ./webhooks/gateway-account-downtime-ended.yaml\n  gateway-account-downtime-started:\n    post:\n      $ref: ./webhooks/gateway-account-downtime-started.yaml\n  gateway-account-limit-reached:\n    post:\n      $ref: ./webhooks/gateway-account-limit-reached.yaml\n  gateway-account-requested:\n    post:\n      $ref: ./webhooks/gateway-account-requested.yaml\n  invoice-abandoned:\n    post:\n      $ref: ./webhooks/invoice-abandoned.yaml\n  invoice-created:\n    post:\n      $ref: ./webhooks/invoice-created.yaml\n  invoice-issued:\n    post:\n      $ref: ./webhooks/invoice-issued.yaml\n  invoice-modified:\n    post:\n      $ref: ./webhooks/invoice-modified.yaml\n  invoice-paid:\n    post:\n      $ref: ./webhooks/invoice-paid.yaml\n  invoice-partially-paid:\n    post:\n      $ref: ./webhooks/invoice-partially-paid.yaml\n  invoice-refunded:\n    post:\n      $ref: ./webhooks/invoice-refunded.yaml\n  invoice-partially-refunded:\n    post:\n      $ref: ./webhooks/invoice-partially-refunded.yaml\n  invoice-past-due:\n    post:\n      $ref: ./webhooks/invoice-past-due.yaml\n  invoice-past-due-reminder:\n    post:\n      $ref: ./webhooks/invoice-past-due-reminder.yaml\n  invoice-reissued:\n    post:\n      $ref: ./webhooks/invoice-reissued.yaml\n  invoice-voided:\n    post:\n      $ref: ./webhooks/invoice-voided.yaml\n  kyc-document-accepted:\n    post:\n      $ref: ./webhooks/kyc-document-accepted.yaml\n  kyc-document-modified:\n    post:\n      $ref: ./webhooks/kyc-document-modified.yaml\n  kyc-document-rejected:\n    post:\n      $ref: ./webhooks/kyc-document-rejected.yaml\n  kyc-document-reviewed:\n    post:\n      $ref: ./webhooks/kyc-document-reviewed.yaml\n  kyc-document-archived:\n    post:\n      $ref: ./webhooks/kyc-document-archived.yaml\n  kyc-request-attempted:\n    post:\n      $ref: ./webhooks/kyc-request-attempted.yaml\n  kyc-request-failed:\n    post:\n      $ref: ./webhooks/kyc-request-failed.yaml\n  kyc-request-fulfilled:\n    post:\n      $ref: ./webhooks/kyc-request-fulfilled.yaml\n  kyc-request-partially-fulfilled:\n    post:\n      $ref: ./webhooks/kyc-request-partially-fulfilled.yaml\n  nsf-response-received:\n    post:\n      $ref: ./webhooks/nsf-response-received.yaml\n  offsite-payment-completed:\n    post:\n      $ref: ./webhooks/offsite-payment-completed.yaml\n  order-completed:\n    post:\n      $ref: ./webhooks/order-completed.yaml\n  payment-card-created:\n    post:\n      $ref: ./webhooks/payment-card-created.yaml\n  payment-card-expiration-reminder:\n    post:\n      $ref: ./webhooks/payment-card-expiration-reminder.yaml\n  payment-card-expired:\n    post:\n      $ref: ./webhooks/payment-card-expired.yaml\n  payment-instrument-modified:\n    post:\n      $ref: ./webhooks/payment-instrument-modified.yaml\n  renewal-invoice-issued:\n    post:\n      $ref: ./webhooks/renewal-invoice-issued.yaml\n  renewal-invoice-payment-canceled:\n    post:\n      $ref: ./webhooks/renewal-invoice-payment-canceled.yaml\n  renewal-invoice-payment-declined:\n    post:\n      $ref: ./webhooks/renewal-invoice-payment-declined.yaml\n  risk-score-changed:\n    post:\n      $ref: ./webhooks/risk-score-changed.yaml\n  subscription-activated:\n    post:\n      $ref: ./webhooks/subscription-activated.yaml\n  subscription-canceled:\n    post:\n      $ref: ./webhooks/subscription-canceled.yaml\n  subscription-churned:\n    post:\n      $ref: ./webhooks/subscription-churned.yaml\n  subscription-downgraded:\n    post:\n      $ref: ./webhooks/subscription-downgraded.yaml\n  subscription-modified:\n    post:\n      $ref: ./webhooks/subscription-modified.yaml\n  subscription-reactivated:\n    post:\n      $ref: ./webhooks/subscription-reactivated.yaml\n  subscription-renewal-reminder:\n    post:\n      $ref: ./webhooks/subscription-renewal-reminder.yaml\n  subscription-renewed:\n    post:\n      $ref: ./webhooks/subscription-renewed.yaml\n  subscription-trial-converted:\n    post:\n      $ref: ./webhooks/subscription-trial-converted.yaml\n  subscription-trial-end-reminder:\n    post:\n      $ref: ./webhooks/subscription-trial-end-reminder.yaml\n  subscription-trial-ended:\n    post:\n      $ref: ./webhooks/subscription-trial-ended.yaml\n  subscription-trial-end-changed:\n    post:\n      $ref: ./webhooks/subscription-trial-end-changed.yaml\n  subscription-upgraded:\n    post:\n      $ref: ./webhooks/subscription-upgraded.yaml\n  subscription-paused:\n    post:\n      $ref: ./webhooks/subscription-paused.yaml\n  subscription-pause-created:\n    post:\n      $ref: ./webhooks/subscription-pause-created.yaml\n  subscription-pause-modified:\n    post:\n      $ref: ./webhooks/subscription-pause-modified.yaml\n  subscription-pause-revoked:\n    post:\n      $ref: ./webhooks/subscription-pause-revoked.yaml\n  subscription-resumed:\n    post:\n      $ref: ./webhooks/subscription-resumed.yaml\n  transaction-amount-discrepancy-found:\n    post:\n      $ref: ./webhooks/transaction-amount-discrepancy-found.yaml\n  transaction-declined:\n    post:\n      $ref: ./webhooks/transaction-declined.yaml\n  transaction-discrepancy-found:\n    post:\n      $ref: ./webhooks/transaction-discrepancy-found.yaml\n  transaction-process-requested:\n    post:\n      $ref: ./webhooks/transaction-process-requested.yaml\n  transaction-processed:\n    post:\n      $ref: ./webhooks/transaction-processed.yaml\n  transaction-timeout-resolved:\n    post:\n      $ref: ./webhooks/transaction-timeout-resolved.yaml\n  waiting-gateway-transaction-completed:\n    post:\n      $ref: ./webhooks/waiting-gateway-transaction-completed.yaml\n  data-export-completed:\n    post:\n      $ref: ./webhooks/data-export-completed.yaml\n",
			"canonicalURL": "/github.com/Rebilly/api-definitions@ff94255f15d9d47ad256e9fcd0fd21935b4e8b25/-/blob/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Rebilly/api-definitions/blob/ff94255f15d9d47ad256e9fcd0fd21935b4e8b25/openapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 17: cannot unmarshal !!map into string"
}