{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ellisist/funkwhale"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "docs/swagger.yml",
			"byteSize": 4273,
			"content": "openapi: \"3.0\"\ninfo:\n  description: \"Documentation for [Funkwhale](https://funkwhale.audio) API. The API is **not** stable yet.\"\n  version: \"1.0.0\"\n  title: \"Funkwhale API\"\n\nservers:\n  - url: https://demo.funkwhale.audio/api/v1\n    description: Demo server\n  - url: https://node1.funkwhale.test/api/v1\n    description: Node 1 (local)\n\ncomponents:\n  securitySchemes:\n    jwt:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: \"You can get a token by using the /token endpoint\"\n\nsecurity:\n  - jwt: []\n\npaths:\n  /token/:\n    post:\n      tags:\n        - \"auth\"\n      description:\n        Obtain a JWT token you can use for authenticating your next requests.\n      security: []\n      responses:\n        '200':\n          description: Successfull auth\n        '400':\n          description: Invalid credentials\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: \"object\"\n              properties:\n                username:\n                  type: \"string\"\n                  example: \"demo\"\n                password:\n                  type: \"string\"\n                  example: \"demo\"\n\n  /artists/:\n    get:\n      tags:\n        - \"artists\"\n      parameters:\n        - name: \"q\"\n          in: \"query\"\n          description: \"Search query used to filter artists\"\n          schema:\n            required: false\n            type: \"string\"\n            example: \"carpenter\"\n        - name: \"listenable\"\n          in: \"query\"\n          description: \"Filter/exclude artists with listenable tracks\"\n          schema:\n            required: false\n            type: \"boolean\"\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: \"object\"\n                properties:\n                  count:\n                    $ref: \"#/properties/resultsCount\"\n                  results:\n                    type: \"array\"\n                    items:\n                      $ref: \"#/definitions/ArtistWithAlbums\"\n\nproperties:\n  resultsCount:\n    type: \"integer\"\n    format: \"int64\"\n    description: \"The total number of resources matching the request\"\n  mbid:\n    type: \"string\"\n    formats: \"uuid\"\n    description: \"A musicbrainz ID\"\ndefinitions:\n  Artist:\n    type: \"object\"\n    properties:\n      mbid:\n        required: false\n        $ref: \"#/properties/mbid\"\n      id:\n        type: \"integer\"\n        format: \"int64\"\n        example: 42\n      name:\n        type: \"string\"\n        example: \"System of a Down\"\n      creation_date:\n        type: \"string\"\n        format: \"date-time\"\n  ArtistWithAlbums:\n    type: \"object\"\n    allOf:\n      - $ref: \"#/definitions/Artist\"\n      - type: \"object\"\n        properties:\n          albums:\n            type: \"array\"\n            items:\n              $ref: \"#/definitions/ArtistAlbum\"\n\n  Album:\n    type: \"object\"\n    properties:\n      mbid:\n        required: false\n        $ref: \"#/properties/mbid\"\n      id:\n        type: \"integer\"\n        format: \"int64\"\n        example: 16\n      artist:\n        type: \"integer\"\n        format: \"int64\"\n        example: 42\n      title:\n        type: \"string\"\n        example: \"Toxicity\"\n      creation_date:\n        type: \"string\"\n        format: \"date-time\"\n      release_date:\n        type: \"string\"\n        required: false\n        format: \"date\"\n        example: \"2001-01-01\"\n\n  ArtistAlbum:\n    type: \"object\"\n    allOf:\n      - $ref: \"#/definitions/Album\"\n      - type: \"object\"\n        properties:\n          tracks_count:\n            type: \"integer\"\n            format: \"int64\"\n            example: 16\n\n  Track:\n    type: \"object\"\n    properties:\n      mbid:\n        required: false\n        $ref: \"#/properties/mbid\"\n      id:\n        type: \"integer\"\n        format: \"int64\"\n        example: 66\n      artist:\n        type: \"integer\"\n        format: \"int64\"\n        example: 42\n      album:\n        type: \"integer\"\n        format: \"int64\"\n        example: 16\n      title:\n        type: \"string\"\n        example: \"Chop Suey!\"\n      position:\n        required: false\n        description: \"Position of the track in the album\"\n        type: \"number\"\n        minimum: 1\n        example: 1\n      creation_date:\n        type: \"string\"\n        format: \"date-time\"\n"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal bool into Go struct field Schema.paths.get.parameters.schema.required of type []string"
}