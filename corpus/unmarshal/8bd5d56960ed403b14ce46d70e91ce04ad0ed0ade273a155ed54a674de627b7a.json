{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nttcom/ntt-ptc-2020"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "app/spec/swagger.yaml",
			"byteSize": 42754,
			"content": "openapi: 3.0.0\ninfo:\n  description: \"This is an API document for a ticket reservation system.\"\n  version: 0.1.2\n  title: Ticket system\ntags:\n  # 機能ごとのグルーピング\n  - name: users\n    description: ユーザの操作\n  - name: events\n    description: イベントの操作\n  - name: eventgenres\n    description: イベントジャンルの操作\n  - name: reservations\n    description: イベント参加予約の操作\n  - name: venues\n    description: 会場の操作\n  - name: other\n    description: その他\npaths:\n  /api/genres:\n    get:\n      security:\n        - bearerAuth:\n            - artist\n            - owner\n      tags:\n        - eventgenres\n      summary: List event genres\n      description: イベントジャンルの取得\n      operationId: ListEventGenres\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventGenreList\"\n        \"401\":\n          $ref: \"#/components/responses/401General\"\n        '403':\n          $ref: \"#/components/responses/403atListEventGenres\"\n        '500':\n          $ref: \"#/components/responses/500General\"\n  /api/login:\n    post:\n      tags:\n        - users\n      summary: User login\n      description: \"ユーザのログイン (jwt の生成)\"\n      operationId: LogIn\n      requestBody:\n        $ref: \"#/components/requestBodies/Login\"\n      responses:\n        \"200\":\n          description: Login successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JwtAndUserId\"\n        \"400\":\n          $ref: \"#/components/responses/400atLogIn\"\n        \"401\":\n          $ref: \"#/components/responses/401atLogIn\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n  /api/logout:\n    post:\n      security:\n        - bearerAuth:\n            - audience\n            - artist\n            - owner\n      tags:\n        - users\n      summary: User logout\n      description: \"ユーザのログアウト (jwt の revoke)\"\n      operationId: LogOut\n      responses:\n        \"200\":\n          description: Logout successful\n        \"401\":\n          $ref: \"#/components/responses/401General\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n  /api/users:\n    post:\n      tags:\n        - users\n      summary: User signup\n      description: \"ユーザのサインアップ (username/password を DB Insert)\"\n      operationId: SignUp\n      requestBody:\n        $ref: \"#/components/requestBodies/Signup\"\n      responses:\n        \"201\":\n          description: Create successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          $ref: \"#/components/responses/400atSignUp\"\n        \"409\":\n          $ref: \"#/components/responses/409atSignUp\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n  /api/users/{user_id}:\n    get:\n      security:\n        - bearerAuth:\n            - audience\n            - artist\n            - owner\n      tags:\n        - users\n      summary: Get user info\n      description: \"ユーザ情報を取得\"\n      operationId: GetUser\n      parameters:\n        - in: path\n          name: user_id\n          schema:\n            type: integer\n          required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          $ref: \"#/components/responses/400atGetUser\"\n        \"401\":\n          $ref: \"#/components/responses/401General\"\n        \"403\":\n          $ref: \"#/components/responses/403atGetUser\"\n        \"404\":\n          $ref: \"#/components/responses/404General\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n  /api/users/{user_id}/reservations:\n    get:\n      security:\n        - bearerAuth:\n            - audience\n            - owner\n      tags:\n        - reservations\n      summary: List reservations of specific users\n      description: イベントの予約状況 (どのイベントにどんなユーザが予約しているか) を取得\n      operationId: ListReservationsOfUsers\n      parameters: # query-param 未指定の場合、予約全件を取得 (for owner Role)\n        - in: path\n          name: user_id\n          schema:\n            type: integer\n          required: true\n        - in: query\n          name: limit\n          description: 最大何件取得するかを指定\n          required: false\n          schema:\n            type: integer\n            minimum: 0\n            default: 5\n        - in: query\n          name: offset\n          description: 何番目から取得するかを指定\n          required: false\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ReservationList\"\n        \"400\":\n          $ref: \"#/components/responses/400atListReservations\"\n        \"401\":\n          $ref: \"#/components/responses/401General\"\n        \"403\":\n          $ref: \"#/components/responses/403atListReservationsOfUsers\"\n        \"404\":\n          $ref: \"#/components/responses/404General\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n  /api/reservations/{reservation_id}:\n    get:\n      security:\n        - bearerAuth:\n            - audience\n            - owner\n      tags:\n        - reservations\n      summary: Get reservation\n      description: 予約詳細を取得\n      operationId: GetReservation\n      parameters:\n        - in: path\n          name: reservation_id\n          schema:\n            type: integer\n          required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Reservation\"\n        \"400\":\n          $ref: \"#/components/responses/400atGetReservation\"\n        \"401\":\n          $ref: \"#/components/responses/401General\"\n        \"403\":\n          $ref: \"#/components/responses/403atGetReservation\"\n        \"404\":\n          $ref: \"#/components/responses/404General\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n    delete:\n      security:\n        - bearerAuth:\n            - audience\n            - owner\n      tags:\n        - reservations\n      summary: Cancel a reservation\n      description: イベント参加予約のキャンセル\n      operationId: DeleteReservation\n      parameters:\n        - in: path\n          name: reservation_id\n          schema:\n            type: integer\n          required: true\n      responses:\n        \"204\":\n          description: Deleted successfully\n        \"400\":\n          $ref: \"#/components/responses/400atDeleteReservation\"\n        \"401\":\n          $ref: \"#/components/responses/401General\"\n        \"403\":\n          $ref: \"#/components/responses/403atDeleteReservation\"\n        \"404\":\n          $ref: \"#/components/responses/404General\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n  /api/events:\n    get:\n      tags:\n        - events\n      summary: List all events\n      description: \"公開されている開催予定のイベント一覧を取得\"\n      operationId: ListEvents\n      parameters:\n        # イベントを公開したユーザで絞り込み\n        - in: query\n          name: user_id\n          description: 公演者 (artist) のユーザID。指定しないとき、全公演を返す。\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: 最大何件取得するかを指定\n          required: false\n          schema:\n            type: integer\n            minimum: 0\n            default: 12\n        - in: query\n          name: offset\n          description: 何番目から取得するかを指定\n          required: false\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventList\"\n        \"400\":\n          $ref: \"#/components/responses/400atListEvents\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n    post:\n      security:\n        - bearerAuth:\n            - artist\n      tags:\n        - events\n      summary: Create event\n      description: \"イベントを作成\"\n      operationId: CreateEvent\n      requestBody:\n        $ref: \"#/components/requestBodies/Event\"\n      responses:\n        \"201\":\n          description: Create successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n        \"400\":\n          $ref: \"#/components/responses/400atCreateEvent\"\n        \"401\":\n          $ref: \"#/components/responses/401General\"\n        \"403\":\n          $ref: \"#/components/responses/403atCreateEvent\"\n        \"409\":\n          $ref: \"#/components/responses/409atCreateEvent\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n  /api/events/{event_id}:\n    get:\n      tags:\n        - events\n      summary: Get event\n      description: \"特定のイベントを取得\"\n      operationId: GetEvent\n      parameters:\n        - in: path\n          name: event_id\n          schema:\n            type: integer\n          required: true\n      responses:\n        \"200\":\n          description: Retrieval successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n        \"400\":\n          $ref: \"#/components/responses/400atGetEvent\"\n        \"404\":\n          $ref: \"#/components/responses/404General\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n    put:\n      security:\n        - bearerAuth:\n            - artist\n            - owner\n      tags:\n        - events\n      summary: Update event\n      description: \"特定のイベントを更新\"\n      operationId: UpdateEvent\n      parameters:\n        - in: path\n          name: event_id\n          schema:\n            type: integer\n          required: true\n      requestBody:\n        $ref: \"#/components/requestBodies/Event\"\n      responses:\n        \"200\":\n          description: Update successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n        \"400\":\n          $ref: \"#/components/responses/400atUpdateEvent\"\n        \"401\":\n          $ref: \"#/components/responses/401General\"\n        \"403\":\n          $ref: \"#/components/responses/403atUpdateEvent\"\n        \"404\":\n          $ref: \"#/components/responses/404General\"\n        \"409\":\n          $ref: \"#/components/responses/409atUpdateEvent\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n  /api/events/{event_id}/reservations:\n    get:\n      security:\n        - bearerAuth:\n            - artist\n            - owner\n      tags:\n        - reservations\n      summary: List reservations of specific events\n      description: イベントの予約状況 (どのイベントにどんなユーザが予約しているか) を取得\n      operationId: ListReservationsOfEvents\n      parameters:\n        - in: path\n          name: event_id\n          schema:\n            type: integer\n          required: true\n        - in: query\n          name: limit\n          description: 最大何件取得するかを指定\n          required: false\n          schema:\n            type: integer\n            minimum: 0\n            default: 10\n        - in: query\n          name: offset\n          description: 何番目から取得するかを指定\n          required: false\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ReservationList\"\n        \"400\":\n          $ref: \"#/components/responses/400atListReservations\"\n        \"401\":\n          $ref: \"#/components/responses/401General\"\n        \"403\":\n          $ref: \"#/components/responses/403atListReservations\"\n        \"404\":\n          $ref: \"#/components/responses/404General\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n    post:\n      security:\n        - bearerAuth:\n            - audience\n      tags:\n        - reservations\n      summary: Reserve tickets of an event\n      description: \"イベントの参加予約\"\n      operationId: ReserveEvent\n      parameters:\n        - in: path\n          name: event_id\n          schema:\n            type: integer\n          required: true\n      requestBody:\n        $ref: \"#/components/requestBodies/Reservation\"\n      responses:\n        \"201\":\n          description: Reservation successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Reservation\"\n        \"400\":\n          $ref: \"#/components/responses/400atReserveEvent\"\n        \"401\":\n          $ref: \"#/components/responses/401General\"\n        \"403\":\n          $ref: \"#/components/responses/403atReserveEvent\"\n        \"404\":\n          $ref: \"#/components/responses/404General\"\n        \"409\":\n          $ref: \"#/components/responses/409atReserveEvent\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n  /api/events/{event_id}/image:\n    get:\n      tags:\n        - events\n      summary: Get event image\n      description: \"特定のイベントの画像を取得\"\n      operationId: GetEventImage\n      parameters:\n        - in: path\n          name: event_id\n          schema:\n            type: integer\n          required: true\n      responses:\n        \"200\":\n          description: Retrieval successful\n          content:\n            image/png:\n              schema:\n                type: string\n                format: binary\n                description: If event doesn't have its image, returns 200 with default image.\n        \"400\":\n          $ref: \"#/components/responses/400atGetEventImage\"\n        \"404\":\n          $ref: \"#/components/responses/404atGetEventImage\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n    put:\n      security:\n        - bearerAuth:\n            - artist\n            - owner\n      tags:\n        - events\n      summary: Put event image\n      description: \"特定のイベントの画像を新規登録/更新\"\n      operationId: PutEventImage\n      parameters:\n        - in: path\n          name: event_id\n          schema:\n            type: integer\n          required: true\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                image:\n                  type: string\n                  format: binary\n      responses:\n        \"204\":\n          description: Update successful\n          content:\n            application/json:\n              schema: {}\n        \"400\":\n          $ref: \"#/components/responses/400atPutEventImage\"\n        \"401\":\n          $ref: \"#/components/responses/401General\"\n        \"403\":\n          $ref: \"#/components/responses/403atPutEventImage\"\n        \"404\":\n          $ref: \"#/components/responses/404General\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n  /api/venues:\n    get:\n      security:\n        - bearerAuth:\n            - audience\n            - artist\n            - owner\n      tags:\n        - venues\n      summary: List venues\n      description: \"会場一覧を取得\"\n      operationId: ListVenues\n      parameters:\n        - in: query\n          name: limit\n          description: 最大何件取得するかを指定\n          required: false\n          schema:\n            type: integer\n            minimum: 0\n            default: 5\n        - in: query\n          name: offset\n          description: 何番目から取得するかを指定\n          required: false\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VenueList\"\n        \"400\":\n          $ref: \"#/components/responses/400atListVenues\"\n        \"401\":\n          $ref: \"#/components/responses/401General\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n    # 優先度②なのでコメントアウト\n    # post:\n    #   security:\n    #     - bearerAuth:\n    #         - owner\n    #   tags:\n    #     - venues\n    #     - owner\n    #   summary: Reserve venue\n    #   description: \"利用可能な会場情報を登録\"\n    #   operationId: CreateVenue\n    #   requestBody:\n    #     $ref: \"#/components/requestBodies/Venue\"\n    #   responses:\n    #     \"201\":\n    #       description: Created\n    #     \"400\":\n    #       description: Invalid input\n    #     \"401\":\n    #       description: Invalid credentials\n    #     \"403\":\n    #       description: if not (role == \"owner\")\n    #     \"409\":\n    #       description: 重複エラー (既に登録済みの会場を予約しようとした場合)\n    #     \"500\":\n    #       description: Internal Server Error\n  /api/venues/{venue_id}/timeslots:\n    get:\n      security:\n        - bearerAuth:\n            - artist\n            - owner\n      tags:\n        - venues\n      summary: List timeslots of venue\n      description: \"ある会場の、空き時間枠の一覧を取得（過去の枠も返す）\"\n      operationId: ListVenueTimeslots\n      parameters:\n        - in: path\n          name: venue_id\n          schema:\n            type: integer\n          required: true\n        - in: query\n          name: from\n          description: |\n            指定されたdatetime (rfc3339準拠) 以降を全件取得 (event.start_at と比較)。\n            どのタイムゾーン識別子が指定されても処理できるようにする。タイムゾーンが指定されない場合はUTCと仮定する。\n          required: false\n          schema:\n            type: string\n            format: date-time\n            example: \"2020-07-21T07:18:20Z\"\n            default: \"now()\"\n        - in: query\n          name: to\n          description: |\n            指定されたdatetime (rfc3339準拠) 以前を全件取得 (event.start_at と比較)。\n            どのタイムゾーン識別子が指定されても処理できるようにする。タイムゾーンが指定されない場合はUTCと仮定する。\n          required: false\n          schema:\n            type: string\n            format: date-time\n            example: \"2020-07-31T23:59:59Z\"\n            default: \"end_of_this_month()\"\n      responses:\n        \"200\":\n          description: OK (even if all timeslots are gone)\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TimeslotList\"\n        \"400\":\n          $ref: \"#/components/responses/400atListVenueTimeslots\"\n        \"401\":\n          $ref: \"#/components/responses/401General\"\n        \"403\":\n          $ref: \"#/components/responses/403atListVenueTimeslots\"\n        \"404\":\n          $ref: \"#/components/responses/404General\"\n        \"500\":\n          $ref: \"#/components/responses/500General\"\n  /api/initialize:\n    post:\n      tags:\n        - other\n      summary: Initialize Database data\n      description: アプリケーションのデータ初期化および販促実施。\n      operationId: InitializeDatabase\n      responses:\n        \"200\":\n          description: OK\n          content:\n            plain/text:\n              schema:\n                type: string\n                description: |\n                  リクエストするレベル（1, 2, 3のいずれかの数値）。\n                  競技者自身がバックエンドを改修してこのいずれかを返すよう実装する。\n\n                  1は販促なし、2は販促あり、3は大規模販促ありを意味する。\n                  ベンチマーク時に、アプリケーションに到来するリクエスト量に影響がある（1が最も軽く、3が最も重い）。\n                  1, 2, 3いずれでもない値を返した場合、あるいは何も返さなかった場合、1が指定されたものとして扱われる。\n              example: \"3\"\n\n\nservers:\n  - url: http://127.0.0.1/\ncomponents:\n  securitySchemes:\n    bearerAuth: # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT # optional, arbitrary value for documentation purposes\n  requestBodies:\n    Login:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              username:\n                type: string\n              password:\n                type: string\n            required:\n              - username\n              - password\n    Signup:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              username:\n                type: string\n              password:\n                type: string\n              role:\n                type: string\n                description: \"`artist` または `audience` のみ認容。\"\n            required:\n              - username\n              - password\n              - role\n    Event:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              event_name:\n                type: string\n              event_genre_id:\n                type: integer\n              timeslot_ids:\n                type: array\n                description: |\n                  The venue_id of selected timeslots must be same.\n                  If the same timeslot is specified more than once, 400 will be returned.\n                items:\n                  type: integer\n                minItems: 1\n                maxItems: 2\n                uniqueItems: true\n              price:\n                type: integer\n                minimum: 1\n              start_at:\n                type: string\n                format: date-time\n                example: \"2020-12-01T18:00:00Z\"\n              end_at:\n                type: string\n                format: date-time\n                example: \"2020-12-01T22:00:00Z\"\n                minimum: \"{start_at}\"\n            required:\n              - event_name\n              - event_genre_id\n              - venue_id\n              - timeslot_ids\n              - price\n              - start_at\n              - end_at\n    Reservation:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              num_of_resv:\n                type: integer\n                example: 2\n                minimum: 1\n            required:\n              - num_of_resv\n    Venue:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              capacity:\n                type: integer\n            required:\n              - name\n              - capacity\n\n  responses:\n    400atCreateEvent:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error400Post\"\n    400atUpdateEvent:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error400Post\"\n    400atDeleteReservation:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error400General\"\n    400atListEvents:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error400General\"\n    400atListReservations:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error400General\"\n    400atListVenues:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error400General\"\n    400atListVenueTimeslots:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error400General\"\n    400atGetEvent:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error400General\"\n    400atGetEventImage:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error400General\"\n    400atGetReservation:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error400General\"\n    400atGetUser:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error400General\"\n    400atLogIn:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: |\n                  Conditions and response messages:\n                  - Username and/or password is not provided.\n                    - Both of username and password are required.\n                example:\n                  Both of username and password are required.\n    400atPutEventImage:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error400PostSingleParameter\"\n    400atReserveEvent:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error400Post\"\n    400atSignUp:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: |\n                  Conditions and response messages:\n                  - One or more of the mandatory parameter is not provided.\n                    - Mandatory parameter(s) are missing.\n                  - `role` is not audience or artist.\n                    - Role is invalid. Choose from 'audience' or 'artist'.\n                example: Mandatory parameter(s) are missing.\n    401General:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: |\n                  Conditions and response messages:\n                  - Token is invalid or not provided.\n                    - Invalid credentials.\n                example: Invalid credentials.\n    401atLogIn:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: |\n                  Conditions and response messages:\n                  - Username and/or password is wrong.\n                    - Invalid credentials.\n                example: Invalid credentials.\n    403atCreateEvent:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error403ArtistOnly\"\n    403atDeleteReservation:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: |\n                  Conditions and response messages:\n                  - `reservation_id.user_id` is not own.\n                    - Access declined.\n                  - Role is not owner.\n                    - Access declined.\n                example: Access declined.\n    403atGetReservation:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error403UserReservation\"\n    403atGetUser:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: |\n                  Conditions and response messages:\n                  - User's role is audience and `user_id` is not own.\n                    - Access declined.\n                  - User's role is artist and `user_id` is not own.\n                    - Access declined.\n                example: Access declined.\n    403atListEventGenres:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: |\n                  Conditions and response messages:\n                  - User's role is not artist or owner.\n                    - Access declined.\n                example: Access declined.\n    403atListReservations:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error403Reservation\"\n    403atListReservationsOfUsers:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error403UserReservation\"\n    403atListVenueTimeslots:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error403ArtistOnly\"\n    403atReserveEvent:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: |\n                  Conditions and response messages:\n                  - User's role is not audience or owner.\n                    - Access declined.\n                example: Access declined.\n    403atUpdateEvent:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error403Event\"\n    403atPutEventImage:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error403Event\"\n    404atGetEventImage:\n      description: Not found\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: |\n                  Conditions and response messages:\n                  - An event specified by `event_id` doesn't exist.\n                    - Requested resource is not found.\n\n                  Attention: Event specified by `event_id` exists but related image is not uploaded,\n                  the app must return 200 and the default image.\n                example: Requested resource is not found.\n    404General:\n      description: Not found\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: |\n                  General 404 error. Response is fixed as `Requested resource is not found.`.\n                example: Requested resource is not found.\n    409atCreateEvent:\n      description: Conflict\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error409EventDuplicated\"\n    409atReserveEvent:\n      description: Conflict\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: |\n                  Conditions and response messages:\n                  - Tickets are all gone (sold out).\n                    - Tickets are all gone.\n                  - The user has already reserved ticket(s) of this event.\n                    - You've already reserved this event. To change the content, cancel and reserve it again.\n                example: Tickets are all gone.\n    409atSignUp:\n      description: Conflict\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: |\n                  Conditions and response messages:\n                  - A user who has same `username` is already on the database.\n                    - A user who has same username exists. Consider using different username.\n                example: A user who has same username exists. Consider using different username.\n    409atUpdateEvent:\n      description: Conflict\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error409EventDuplicated\"\n    500General:\n      description: Internal server error\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                description: |\n                  If a server catches any untracked exception, raise this with the value `Internal server error.`.\n                example: Internal server error.\n\n  schemas:\n    Error400General:\n      type: object\n      properties:\n        message:\n          type: string\n          description: |\n            Conditions and response messages:\n            - One or more parameter types don't match the spec.\n              - Type mismatch(es) exist.\n          example: Type mismatch(es) exist.\n    Error400Post:\n      type: object\n      properties:\n        message:\n          type: string\n          description: |\n            Conditions and response messages:\n            - One or more of the mandatory parameters are not provided.\n              - Mandatory parameter(s) are missing.\n            - One or more parameter types don't match the spec.\n              - Type mismatch(es) exist.\n            - There are violation(s) of restriction written in the spec.\n              - Restriction violation(s) occur.\n            - One or more resources specified in the request body are not available or gone.\n              - Specified resource(s) are unavailable.\n          example: Mandatory parameter(s) are missing.\n    Error400PostSingleParameter:\n      type: object\n      properties:\n        message:\n          type: string\n          description: |\n            Conditions and response messages:\n            - One or more of the mandatory parameters are not provided.\n              - Mandatory parameter(s) are missing.\n            - One or more parameter types don't match the spec.\n              - Type mismatch(es) exist.\n          example: Mandatory parameter(s) are missing.\n    Error403ArtistOnly:\n      type: object\n      properties:\n        message:\n          type: string\n          description: |\n            Conditions and response messages:\n            - User's role is not artist.\n              - Access declined.\n          example: Access declined.\n    Error403Event:\n      type: object\n      properties:\n        message:\n          type: string\n          description: |\n            Conditions and response messages:\n            - User's role is not artist or owner.\n              - Access declined.\n            - User's role is artist but a user who makes the request doesn't match an event owner.\n              - Access declined.\n          example: Access declined.\n    Error403Reservation:\n      type: object\n      properties:\n        message:\n          type: string\n          description: |\n            Conditions and response messages:\n            - User's role is audience and `user_id` is not own.\n              - Access declined.\n            - User's role is artist and `event_id` is not own.\n              - Access declined.\n            - User's role is not none of them: audience, artist or owner.\n              - Access declined.\n          example: Access declined.\n    Error403UserReservation:\n      type: object\n      properties:\n        message:\n          type: string\n          description: |\n            Conditions and response messages:\n            - User's role is audience and `user_id` is not own.\n              - Access declined.\n            - User's role is not none of them: audience or owner.\n              - Access declined.\n          example: Access declined.\n    Error409EventDuplicated:\n      type: object\n      properties:\n        message:\n          type: string\n          description: |\n            Conditions and response messages:\n            - Selected timeslots are already kept by another event.\n              - Selected timeslots are already reserved.\n          example: Selected timeslots are already reserved.\n    JwtAndUserId:\n      type: object\n      properties:\n        user_id:\n          type: integer\n        access_token:\n          type: string\n          example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlF1ZWVuIiwiaXNfYXJ0aXN0Ijp0cnVlfQ.lurfq9WJC4DEdMh6NxIVp5zZwHd5h643SjT00EyEdnQ\"\n    # JWT Payload の内容 (OpenAPI では参照されないため warning が発生するかも)\n    JwtPayload:\n      type: object\n      properties:\n        username:\n          type: string\n          example: \"Queen\"\n        role:\n          type: string\n          example: \"artist\"\n        iat:\n          type: integer\n          format: int64\n          description: Issued At (Unix Epoch Time)\n          example: 1598431133\n        exp:\n          type: integer\n          format: int64\n          description: Expiration Time (Unix Epoch Time)\n          example: 1598434733\n    User:\n      type: object\n      properties:\n        user_id:\n          type: integer\n        username:\n          type: string\n        role:\n          type: string\n    Event:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1234\n          description: event_id\n        event_name:\n          type: string\n          example: xxx festa\n        event_genre_id:\n          type: integer\n          example: 0\n        artist_id:\n          type: integer\n          example: 1234\n        artist_name:\n          type: string\n        venue_id:\n          type: integer\n          example: 12\n        timeslot_ids:\n          type: array\n          items:\n            type: integer\n        venue_name:\n          type: string\n        price:\n          type: integer\n          example: 5000\n        start_at:\n          type: string\n          format: date-time\n          example: \"2020-12-01T18:00:00Z\"\n        end_at:\n          type: string\n          format: date-time\n          example: \"2020-12-01T22:00:00Z\"\n        # 優先度②のためコメントアウト\n        #expose_at:\n        #  type: string\n        #  format: date-time\n        #  example: \"2020-10-01T00:00:00\"\n        created_at:\n          type: string\n          format: date-time\n          example: \"2020-07-21T07:18:20Z\"\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2020-08-23T11:00:25Z\"\n        # 優先度②のためコメントアウト\n        #event_status:\n        #  type: string\n        #  example: waiting\n        # 優先度②のためコメントアウト\n        #is_public:\n        #  type: boolean\n        #  example: true\n        capacity:\n          type: integer\n          example: 300\n        current_resv:\n          type: integer\n          example: 190\n    EventList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Event\"\n    EventGenre:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n    EventGenreList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/EventGenre\"\n    Reservation:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: reservation_id\n          example: 1234\n        user_id:\n          type: integer\n          example: 1\n        username:\n          type: string\n          example: \"hoge\"\n        event_id:\n          type: integer\n          example: 1\n        event_name:\n          type: string\n          example: \"第10回 みんなで掘削！チキチキボーリング大会 in 東京\"\n        event_price:\n          type: integer\n          example: 5000\n        event_start_at:\n          type: string\n          format: date-time\n          example: \"2020-07-21T07:18:20Z\"\n        event_end_at:\n          type: string\n          format: date-time\n          example: \"2020-07-21T07:18:20Z\"\n        venue_name:\n          type: string\n          example: \"大手町プレイス32F\"\n        num_of_resv:\n          type: integer\n          example: 2\n        # 優先度②のためコメントアウト\n        # status:\n        #   type: string\n        #   example: \"waiting\"\n        created_at:\n          type: string\n          format: date-time\n          example: \"2020-07-21T07:18:20Z\"\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2020-08-23T11:00:25Z\"\n    ReservationList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Reservation\"\n    Venue:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        capacity:\n          type: integer\n        created_at:\n          type: string\n          format: date-time\n          example: \"2020-07-21T07:18:20Z\"\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2020-08-23T11:00:25Z\"\n    VenueList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Venue\"\n    Timeslot:\n      type: object\n      properties:\n        id:\n          type: integer\n        start_at:\n          type: string\n          format: date-time\n          example: \"2020-07-01T15:00:00Z\"\n        end_at:\n          type: string\n          format: date-time\n          example: \"2020-07-02T02:59:59Z\"\n        created_at:\n          type: string\n          format: date-time\n          example: \"2020-07-21T07:18:20Z\"\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2020-08-23T11:00:25Z\"\n    TimeslotList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Timeslot\"\n",
			"canonicalURL": "/github.com/nttcom/ntt-ptc-2020@95ff2481e972cd30827406e1b1587c739a21da96/-/blob/app/spec/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nttcom/ntt-ptc-2020/blob/95ff2481e972cd30827406e1b1587c739a21da96/app/spec/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: unexpected tag !!str"
}