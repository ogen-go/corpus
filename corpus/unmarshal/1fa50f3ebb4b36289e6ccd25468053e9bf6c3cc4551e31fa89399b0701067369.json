{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gchq/CyberChef-server"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "swagger.yml",
			"byteSize": 6195,
			"content": "openapi: 3.0.0\ninfo:\n  title: CyberChef API\n  description: A HTTP API that exposes some of CyberChef's functionality.\n  version: 1.0.0\n\n\npaths:\n  /bake:\n    post:\n      summary: Bakes a recipe\n      description: \u003e\n        Bake a recipe defined in JSON. For an example JSON recipe, build a recipe on \n        [CyberChef](https://gchq.github.io/CyberChef/) and click save. Select \"clean JSON\".\n        \n\n        The Recipe property in the payload is designed so that you only need to provide\n        arguments for operations if they are required, or you want to change them from the default.\n        For more information on accepted recipe formats, see the [bake section of the Node API docs](https://github.com/gchq/CyberChef/wiki/Node-API#bake)\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/SingleOpRecipe\"\n                - $ref: \"#/components/schemas/MultiOpRecipe\"\n            example:\n              input: \"some input\"\n              recipe:\n                - op: toHex\n                - op: toBase64\n                - op: toBinary\n                  args:\n                    delimiter: \"Comma\"\n\n      responses:\n        '200':\n          description: Recipe baked successfully\n          content:\n            application/json:\n              schema:\n                type: \"string\"\n                value: \"Object\"\n              example:\n                type: \"string\"\n                value: \"01001110,01111010,01001101,01100111,01001110,01101101,01011001,01100111,01001110,01101101,01010001,01100111,01001110,01101010,01010101,01100111,01001101,01101010,01000001,01100111,01001110,01101010,01101011,01100111,01001110,01101101,01010101,01100111,01001110,01111010,01000001,01100111,01001110,01111010,01010101,01100111,01001110,01111010,01010001,00111101\"\n        '400':\n          description: Bad request\n\n  /magic:\n    post:\n      summary: Performs magic on some input\n      description: \u003e\n        Take some input data and optional arguments for the [Magic operation](https://github.com/gchq/CyberChef/wiki/Automatic-detection-of-encoded-data-using-CyberChef-Magic) and return JSON of results of automatic encoding detection of the inputted data.\n\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/MagicInput\"\n            example:\n              input: \"WUagwsiae6mP8gNtCCLUFpCpCB26RmBDoDD8PacdAmzAzBVjkK2QstFXaKhpC6iUS7RHqXrJtFisoRSgoJ4whjm1arm864qaNq4RcfUmLHrcsAaZc5TXCYifNdgS83gDeejGX46gaiMyuBV6EskHt1scgJ88x2tNSotQDwbGY1mmCob2ARGFvCKYNqiN9ipMq1ZU1mgkdbNuGcb76aRtYWhCGUc8g93UJudhb8htsheZnwTpgqhx83SVJSZXMXUjJT2zmpC7uXWtumqokbdSi88YtkWDAc1Toouh2oH4D4ddmNKJWUDpMwmngUmK14xwmomccPQE9hM172APnSqwxdKQ172RkcAsysnmj5gGtRmVNNh2s359wr6mS2QRP\"\n              args:\n                depth: 1\n\n      responses:\n        '200':\n          description: Magic operation ran successfully\n          content:\n            application/json:\n              schema:\n                type: \"string\"\n                value:\n                  $ref: \"#/components/schemas/MagicResponse\"\n              example:\n                type: 6\n                value:\n                  - recipe:\n                    - op: \"From Base58\"\n                      args:\n                        - \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n                        - false\n                    data: \"x^Ü^Í^ÒÑqÃ0\\fCWá\\b^ÉcKò8mâì?B\\u001eA^ÊUûÕ»^ÜOb@\\u0010^ÀxìÖ^ÆµÃ¶^Ûµ§µ»õ^Çõ]×ÃzÓwÓ\\u0015äÛ1^Ý3-§µKõ^×0t=¼½õdë\\u001cÄ^Ö^ØS\\u0000uÁ\\u001f´Pñõ³*^ÌppuÝÅ\\u0003\"\n                    languageScores:\n                      - lang: zh\n                        score: 215110.97112616687\n                        probability: 0\n                    fileType: null\n                    isUTF8: true\n                    entropy: 5.6887987925007035\n                    matchingOps:\n                      - op: \"From Base58\"\n                        pattern: {}\n                        args:\n                          - 123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\n                          - false\n                    useful: false\n\n\ncomponents:\n  schemas:\n    SingleOpRecipe:\n      type: object\n      properties:\n        input:\n          type: string\n          example: \"bake this\"\n        recipe:\n          $ref: \"#/components/schemas/Operation\"\n          example:\n            op: \"toHex\"\n\n    MultiOpRecipe:\n      type: object\n      properties:\n        input: \n          type: string\n          example: \"input for recipe\"\n        recipe:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Operation\"\n    Operation:\n      type: object\n      properties:\n        op:\n          type: string\n          required: true\n        args:\n          oneOf:\n            - $ref: \"#/components/schemas/ArgArray\"\n            - $ref: \"#/components/schemas/ArgObject\"\n\n    OperationArray:\n      type: array\n      items: \n        $ref: \"#/components/schemas/Operation\"\n      \n    ArgArray:\n      type: array\n      items:\n        type: {}\n      example: \n        - 16\n        - true\n        - false\n    ArgObject:\n      type: object\n      additionalProperties: true\n      example: \n        width: 16\n        upperCaseHex: true\n        includeFinalLength: false\n\n    MagicInput:\n      type: object\n      properties:\n        input: {}\n        args:\n          oneOf:\n            - $ref: \"#/components/schemas/ArgArray\"\n            - $ref: \"#/components/schemas/ArgObject\"\n    MagicResponse:\n      type: object\n      properties:\n        type:\n          type: int\n        value:\n          type: array\n          items:\n            $ref: \"#/components/schemas/MagicResponseItem\"\n    MagicResponseItem:\n      type: object\n      properties:\n        recipe:\n          type: array\n          items:\n            type: Object\n        data:\n          type: string\n        languageScores:\n          type: array\n          items:\n            type: Object\n        matchingOps:\n          type: array\n          items:\n            type: Object\n        useful: bool\n "
		}
	},
	"Error": "unmarshal: callback: json: cannot unmarshal string into Go value of type ogen.Schema"
}