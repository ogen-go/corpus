{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/swagger-api/swagger-parser"
		},
		"file": {
			"name": "basicOAS30.yaml",
			"size": 0,
			"path": "modules/swagger-parser-v3/src/test/resources/3.1.0/test/basicOAS30.yaml",
			"byteSize": 5018,
			"content": "openapi: \"3.0.0\"\njsonSchemaDialect: https://json-schema.org/draft/2020-12/schema\ninfo:\n  version: 1.0.0\n  summary: test summary in info object\n  description: description in info object\n  title: Swagger Petstore\n  license:\n    name: MIT\n    identifier: test identifier\nservers:\n  - url: http://petstore.swagger.io/v1\n  - url: http://{host}.swagger.io/v1\n    variables:\n      host:\n        default: demo\n        description: this value is assigned by the service provider\n        enum: []\nwebhooks:\n  # Each webhook needs a name\n  newPet:\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n              description: pet\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\npaths:\n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: An paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n                description: error\n    post:\n      summary: Create a pet\n      operationId: createPets\n      tags:\n        - pets\n      responses:\n        \"201\":\n          description: Null response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Tag\"\n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/User\"\n          description: user\n          summary: user\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  pathItems:\n    pets:\n      get:\n        description: Returns all pets from the system that the user has access to\n        responses:\n          '200':\n            description: A list of pets.\n            content:\n              application/json:\n                schema:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/pet'\n  parameters:\n    User:\n      in: query\n      description: user\n      name: user\n      schema:\n        type: string\n  schemas:\n    Pet:\n      type:\n        - object\n        - string\n        - array\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n          writeOnly: true\n          readOnly: true\n        testenum:\n          type: string\n          enum:\n            - available\n            - pending\n            - sold\n          default: available\n        testconst:\n          type: string\n          const: pending\n        tag:\n          type: string\n      arbitraryKeyword: test\n    Pets:\n      type: 'null'\n      default: \"I'm a string\"\n      exclusiveMaximum: 12\n      exclusiveMinimum: 1\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    ArrayWithoutItems:\n      type: array\n    ItemsWithoutArrayType:\n      type: object\n      items:\n        item1:\n          type: object\n        item2:\n          type: string\n        item3: what\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n        tag:\n          $ref: \"#/components/schemas/Tag\"\n    Tag:\n      type:\n        - object\n        - string\n        - string\n        - foo\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      patternProperties:\n        '[a-b].*': 1\n    MapAnyValue:\n      additionalProperties: { }\n",
			"canonicalURL": "/github.com/swagger-api/swagger-parser@87220efc5e2241d2192874f7ff244dc6eb729268/-/blob/modules/swagger-parser-v3/src/test/resources/3.1.0/test/basicOAS30.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/swagger-api/swagger-parser/blob/87220efc5e2241d2192874f7ff244dc6eb729268/modules/swagger-parser-v3/src/test/resources/3.1.0/test/basicOAS30.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!seq into string; yaml: line 1: cannot unmarshal !!int `12` into bool; yaml: line 1: cannot unmarshal !!int `1` into bool; yaml: line 1: cannot unmarshal !!int `1` into ogen.Schema; yaml: line 1: cannot unmarshal !!seq into string"
}