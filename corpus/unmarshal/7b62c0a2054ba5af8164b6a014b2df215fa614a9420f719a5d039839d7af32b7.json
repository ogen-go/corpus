{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/splewis/get5"
		},
		"file": {
			"name": "event_schema.yml",
			"size": 0,
			"path": "documentation/docs/event_schema.yml",
			"byteSize": 39138,
			"content": "---\nopenapi: \"3.0.3\"\ninfo:\n  title: \"\"\n  version: \"\"\npaths:\n  \"/get5_status\":\n    get:\n      tags:\n        - Get5 Status\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Get5Status\"\n  \"/Get_OnEvent\":\n    put:\n      tags:\n        - All Events\n      description: |\n        Called when **any event** is fired. This forward takes two parameters (while all others take only one); the\n        event object itself *and* a string representing the encoded JSON object. If you use this forward, you should\n        fetch the event name and switch on it, casting the object to its correct subclass using\n        `view_as\u003cTheEventSubclass\u003e(event)`.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Get5Event\"\n      responses: { }\n  \"/Get5_OnGameStateChanged\":\n    post:\n      tags:\n        - Series Flow\n      description: |\n        Fired when the game state changes.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5GameStateChangedEvent\n              allOf:\n                - $ref: \"#/components/schemas/Get5Event\"\n              properties:\n                event:\n                  enum:\n                    - game_state_changed\n                new_state:\n                  description: The state the game has transitioned to. `NewState`\n                    in SourceMod.\n                  allOf:\n                    - \"$ref\": \"#/components/schemas/Get5State\"\n                old_state:\n                  description: The state the game has transitioned from. `OldState`\n                    in SourceMod.\n                  allOf:\n                    - \"$ref\": \"#/components/schemas/Get5State\"\n      responses: { }\n  \"/Get5_OnPlayerConnected\":\n    post:\n      tags:\n        - Client Actions\n      description: |\n        Fired when a player connects to the server.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5PlayerConnectedEvent\n              allOf:\n                - $ref: \"#/components/schemas/Get5Event\"\n              properties:\n                event:\n                  enum:\n                    - player_connect\n                player:\n                  $ref: \"#/components/schemas/Get5Player\"\n                ip_address:\n                  type: string\n                  example: '34.132.182.66'\n                  description: The IP address of the connecting client. `GetIPAddress()` and `SetIPAddress()` in SourceMod.\n      responses: { }\n  \"/Get5_OnPlayerDisconnected\":\n    post:\n      tags:\n        - Client Actions\n      description: |\n        Fired when a player disconnects from the server.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5PlayerDisconnectedEvent\n              allOf:\n                - $ref: \"#/components/schemas/Get5Event\"\n              properties:\n                event:\n                  enum:\n                    - player_disconnect\n                player:\n                  $ref: \"#/components/schemas/Get5Player\"\n      responses: { }\n  \"/Get5_OnPreLoadMatchConfig\":\n    post:\n      tags:\n        - Series Flow\n      description: |\n        Fired when the server attempts to load a match config.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5PreloadMatchConfigEvent\n              allOf:\n                - $ref: \"#/components/schemas/Get5Event\"\n              properties:\n                event:\n                  enum:\n                    - preload_match_config\n                filename:\n                  type: string\n                  description: The file the server attempted to load. `GetFileName()`\n                    and `SetFileName()` in SourceMod.\n      responses: { }\n  \"/Get5_OnLoadMatchConfigFailed\":\n    post:\n      tags:\n        - Series Flow\n      description: |\n        Fired when a match config fails to load.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5LoadMatchConfigFailedEvent\n              allOf:\n                - $ref: \"#/components/schemas/Get5Event\"\n              properties:\n                event:\n                  enum:\n                    - match_config_load_fail\n                reason:\n                  type: string\n                  description: The error description for why the config load failed.\n                    `GetReason()` and `SetReason()` in SourceMod.\n                  example: You done goofed.\n      responses: { }\n  \"/Get5_OnSeriesInit\":\n    post:\n      tags:\n        - Series Flow\n      description: |\n        Fired when a series is started after loading a match config.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5SeriesStartedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MatchEvent\"\n              properties:\n                event:\n                  enum:\n                    - series_start\n                team1_name:\n                  type: string\n                  example: NaVi\n                  description: The name of team 1. `GetTeam1Name()` and `SetTeam1Name()`\n                    in SourceMod.\n                team2_name:\n                  type: string\n                  example: Astralis\n                  description: The name of team 2. `GetTeam2Name()` and `SetTeam2Name()`\n                    in SourceMod.\n      responses: { }\n  \"/Get5_OnMatchPaused\":\n    post:\n      tags:\n        - Map Flow\n      description: |\n        Fired when the match is paused.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5MatchPausedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MapTeamEvent\"\n              properties:\n                event:\n                  enum:\n                    - game_paused\n                pause_type:\n                  $ref: \"#/components/schemas/Get5PauseType\"\n      responses: { }\n  \"/Get5_OnMatchUnpaused\":\n    post:\n      tags:\n        - Map Flow\n      description: |\n        Fired when the match is unpaused.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5MatchUnpausedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MapTeamEvent\"\n              properties:\n                event:\n                  enum:\n                    - game_unpaused\n      responses: { }\n  \"/Get5_OnMapResult\":\n    post:\n      tags:\n        - Series Flow\n      description: |\n        Fired when the map ends.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5MapResultEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MapEvent\"\n              properties:\n                event:\n                  enum:\n                    - map_result\n                team1_score:\n                  type: integer\n                  minimum: 0\n                  description: The score of team1. `Team1Score` in SourceMod.\n                  example: 16\n                team2_score:\n                  type: integer\n                  minimum: 0\n                  description: The score of team2. `Team2Score` in SourceMod.\n                  example: 13\n                winner:\n                  $ref: \"#/components/schemas/Get5Winner\"\n      responses: { }\n  \"/Get5_OnSeriesResult\":\n    post:\n      tags:\n        - Series Flow\n      description: |\n        Fired when a series is over. `winner` indicates team and side 0 if there was no winner in cases of a draw or if the series was forcefully canceled.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5SeriesResultEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MatchEvent\"\n              properties:\n                event:\n                  enum:\n                    - series_end\n                team1_series_score:\n                  type: integer\n                  minimum: 0\n                  example: 2\n                  description: The map/series score of team1. `Team1SeriesScore` in\n                    SourceMod.\n                team2_series_score:\n                  type: integer\n                  minimum: 0\n                  description: The map/series score of team2. `Team2SeriesScore` in\n                    SourceMod.\n                winner:\n                  $ref: \"#/components/schemas/Get5Winner\"\n      responses: { }\n  \"/Get5_OnKnifeRoundStarted\":\n    post:\n      tags:\n        - Map Flow\n      description: |\n        Fired when the knife round starts.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5KnifeRoundStartedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MapEvent\"\n              properties:\n                event:\n                  enum:\n                    - knife_start\n      responses: { }\n  \"/Get5_OnKnifeRoundWon\":\n    post:\n      tags:\n        - Map Flow\n      description: |\n        Fired when the knife round is over and the teams have elected to swap or stay. `side` represents the chosen side\n        of the winning team, not the side that won the knife round.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5KnifeRoundWonEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MapTeamEvent\"\n              properties:\n                event:\n                  enum:\n                    - knife_won\n                side:\n                  $ref: \"#/components/schemas/Get5Side\"\n                swapped:\n                  type: boolean\n                  description: Indicates if the winning team elected to swap sides\n                    or not. `Swapped` on SourceMod.\n      responses: { }\n  \"/Get5_OnSidePicked\":\n    post:\n      tags:\n        - Series Flow\n      description: |\n        Fired when a side is picked by a team.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5SidePickedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MapSelectionEvent\"\n              properties:\n                event:\n                  enum:\n                    - side_picked\n                side:\n                  $ref: \"#/components/schemas/Get5Side\"\n                map_number:\n                  type: integer\n                  minimum: 0\n                  description: The map number the team chose a side for. `MapNumber`\n                    in SourceMod.\n      responses: { }\n  \"/Get5_OnMapPicked\":\n    post:\n      tags:\n        - Series Flow\n      description: |\n        Fired when a team picks a map.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5MapPickedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MapSelectionEvent\"\n              properties:\n                event:\n                  enum:\n                    - map_picked\n                map_number:\n                  type: integer\n                  minimum: 0\n                  description: The map number of the chosen map.\n      responses: { }\n  \"/Get5_OnMapVetoed\":\n    post:\n      tags:\n        - Series Flow\n      description: |\n        Fired when a team vetos a map.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5MapPickedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MapSelectionEvent\"\n              properties:\n                event:\n                  enum:\n                    - map_vetoed\n      responses: { }\n  \"/Get5_OnTeamReadyStatusChanged\":\n    post:\n      tags:\n        - Map Flow\n      description: |\n        Fired when a team's ready status changes.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5TeamReadyStatusChangedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MatchTeamEvent\"\n              properties:\n                event:\n                  enum:\n                    - team_ready_status_changed\n                ready:\n                  type: boolean\n                  description: Indicates if the team was marked as ready or not (unready).\n                game_state:\n                  description: The game state the ready change was announced during. `GameState` in SourceMod and represented as an integer enum.\n                  allOf:\n                    - \"$ref\": \"#/components/schemas/Get5State\"\n      responses: { }\n  \"/Get5_OnGoingLive\":\n    post:\n      tags:\n        - Map Flow\n      description: |\n        Fired when a map is going live.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5GoingLiveEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MapEvent\"\n              properties:\n                event:\n                  enum:\n                    - going_live\n      responses: { }\n  \"/Get5_OnRoundStart\":\n    post:\n      tags:\n        - Map Flow\n      description: |\n        Fired when a round starts (when freezetime begins).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5RoundStartedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5RoundEvent\"\n              properties:\n                event:\n                  enum:\n                    - round_start\n      responses: { }\n  \"/Get5_OnRoundEnd\":\n    post:\n      tags:\n        - Map Flow\n      description: |\n        Fired when a round ends - when the result is in; not when the round stops. Game activity can occur after this.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5RoundEndedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5TimedRoundEvent\"\n              properties:\n                event:\n                  enum:\n                    - round_end\n                reason:\n                  type: integer\n                  minimum: 0\n                  description: The reason for the round ending. `Reason` in SourceMod.\n                    See https://sm.alliedmods.net/new-api/cstrike/CSRoundEndReason.\n                winner:\n                  $ref: \"#/components/schemas/Get5Winner\"\n                team1_score:\n                  type: integer\n                  minimum: 0\n                  description: The round score of team 1. `Team1Score` in SourceMod.\n                team2_score:\n                  type: integer\n                  minimum: 0\n                  description: The round score of team 2. `Team2Score` in SourceMod.\n      responses: { }\n  \"/Get5_OnRoundStatsUpdated\":\n    post:\n      tags:\n        - Map Flow\n      description: |\n        Fired after the stats update on round end.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5RoundStatsUpdatedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5RoundEvent\"\n              properties:\n                event:\n                  enum:\n                    - stats_updated\n      responses: { }\n  \"/Get5_OnBackupRestore\":\n    post:\n      tags:\n        - Series Flow\n      description: |\n        Fired when a round is restored from a backup.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5BackupRestoredEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MapEvent\"\n              properties:\n                event:\n                  enum:\n                    - backup_loaded\n                filename:\n                  type: string\n                  description: The name of the file that was used to restore the game\n                    state from. `GetFileName()` and `SetFileName()` in SourceMod.\n      responses: { }\n  \"/Get5_OnDemoFinished\":\n    post:\n      tags:\n        - Series Flow\n      description: |\n        Fired when the GOTV recording has ended. This event does not fire if no demo was recorded.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5DemoFinishedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5MapEvent\"\n              properties:\n                event:\n                  enum:\n                    - demo_finished\n                filename:\n                  type: string\n                  example: \"1324_map_0_de_nuke.dem\"\n                  description: The name of the file containing the GOTV recording of the map. The format is determined by the `get5_demo_name_format` parameter.\n      responses: { }\n  \"/Get5_OnPlayerBecameMVP\":\n    post:\n      tags:\n        - Map Flow\n      description: |\n        Fired when a player is elected the MVP of the round.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5RoundMVPEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5PlayerRoundEvent\"\n              properties:\n                event:\n                  enum:\n                    - round_mvp\n                reason:\n                  type: integer\n                  minimum: 0\n                  description: The reason for the MVP assignment. `Reason` in SourceMod.\n      responses: { }\n  \"/Get5_OnGrenadeThrown\":\n    post:\n      tags:\n        - Client Actions\n      description: |\n        Fired whenever a grenade is thrown by a player. The `weapon` property reflects the grenade used.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5GrenadeThrownEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5PlayerWeaponEvent\"\n              properties:\n                event:\n                  enum:\n                    - grenade_thrown\n      responses: { }\n  \"/Get5_OnPlayerDeath\":\n    post:\n      tags:\n        - Client Actions\n      description: |\n        Fired when a player dies.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5PlayerDeathEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5PlayerWeaponEvent\"\n              properties:\n                event:\n                  enum:\n                    - player_death\n                headshot:\n                  type: boolean\n                  description: Indicates if the player died from a headshot. `Headshot`\n                    in SourceMod.\n                thru_smoke:\n                  type: boolean\n                  description: Indicates if the player was killed through smoke. `ThruSmoke`\n                    in SourceMod.\n                penetrated:\n                  type: boolean\n                  description: Indicates if the player was killed through an object\n                    (another player or walls). `Penetrated` in SourceMod.\n                attacker_blind:\n                  type: boolean\n                  description: Indicates if the attacker was blind while the player\n                    died. `AttackerBlind` in SourceMod.\n                no_scope:\n                  type: boolean\n                  description: Indicates if the attacker killed the player with a\n                    rifle without scoping. `NoScope` in SourceMod.\n                suicide:\n                  type: boolean\n                  description: Indicates if the player died from suicide, such as\n                    falling or dying from their own grenade. C4 bomb kills do not\n                    count as suicide. `Suicide` in SourceMod.\n                friendly_fire:\n                  type: boolean\n                  description: Indicates if the player died from friendly fire. `FriendlyFire`\n                    in SourceMod.\n                attacker:\n                  \"$ref\": \"#/components/schemas/Get5Player\"\n                assist:\n                  \"$ref\": \"#/components/schemas/Get5AssisterObject\"\n      responses: { }\n  \"/Get5_OnPlayerSay\":\n    post:\n      tags:\n        - Client Actions\n      description: |\n        Fired when a player types in chat.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5PlayerSayEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5PlayerTimedRoundEvent\"\n              properties:\n                event:\n                  enum:\n                    - player_say\n                command:\n                  type: string\n                  enum:\n                    - say\n                    - say_team\n                  example: say\n                  description: The command the player sent. `GetCommand()` and `SetCommand()` in SourceMod.\n                message:\n                  type: string\n                  minLength: 1\n                  example: gg have fun\n                  description: The arguments passed to the command; the message written. `GetMessage()` and `SetMessage()` in SourceMod.\n      responses: { }\n  \"/Get5_OnHEGrenadeDetonated\":\n    post:\n      tags:\n        - Client Actions\n      description: |\n        Fired when an HE grenade detonates. `player` describes who threw the HE and `victims` who were affected.\n        `weapon` is always an HE grenade.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5HEDetonatedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5VictimWithDamageGrenadeEvent\"\n              properties:\n                event:\n                  enum:\n                    - hegrenade_detonated\n      responses: { }\n  \"/Get5_OnMolotovDetonated\":\n    post:\n      tags:\n        - Client Actions\n      description: |\n        Fired when a molotov grenade expires. `player` describes\n        who threw the molotov and `victims` who were affected. `weapon` is\n        always a molotov grenade. Note that `round_time` reflects the time\n        at which the grenade detonated (started burning).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5MolotovDetonatedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5VictimWithDamageGrenadeEvent\"\n              properties:\n                event:\n                  enum:\n                    - molotov_detonated\n      responses: { }\n  \"/Get5_OnFlashbangDetonated\":\n    post:\n      tags:\n        - Client Actions\n      description: |\n        Fired when a flash bang grenade detonates. `player` describes\n        who threw the flash bang and `victims` who were affected. `weapon`\n        is always a flash bang grenade.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5FlashbangDetonatedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5VictimGrenadeEvent\"\n              properties:\n                event:\n                  enum:\n                    - flashbang_detonated\n      responses: { }\n  \"/Get5_OnSmokeGrenadeDetonated\":\n    post:\n      tags:\n        - Client Actions\n      description: |\n        Fired when an smoke grenade expires. `player` describes\n        who threw the grenade. `weapon` is always a smoke grenade.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5SmokeDetonatedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5PlayerWeaponEvent\"\n              properties:\n                event:\n                  enum:\n                    - smokegrenade_detonated\n                extinguished_molotov:\n                  type: boolean\n                  description: Indicates if the smoke distinguished an active molotov/firebomb.\n                    `ExtinguishedMolotov` in SourceMod.\n      responses: { }\n  \"/Get5_OnDecoyStarted\":\n    post:\n      tags:\n        - Client Actions\n      description: |\n        Fired when a decoy starts making noise. `player` describes\n        who threw the grenade. `weapon` is always a decoy grenade.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5DecoyStartedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5PlayerWeaponEvent\"\n              properties:\n                event:\n                  enum:\n                    - decoygrenade_started\n      responses: { }\n  \"/Get5_OnBombPlanted\":\n    post:\n      tags:\n        - Client Actions\n      description: |\n        Fired when the bomb is planted. `player` describes who planted the bomb.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5BombPlantedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5PlayerBombEvent\"\n              properties:\n                event:\n                  enum:\n                    - bomb_planted\n      responses: { }\n  \"/Get5_OnBombDefused\":\n    post:\n      tags:\n        - Client Actions\n      description: |\n        Fired when the bomb is defused. `player` describes who defused the bomb.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5BombDefusedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5PlayerBombEvent\"\n              properties:\n                event:\n                  enum:\n                    - bomb_defused\n                bomb_time_remaining:\n                  type: number\n                  minimum: 0\n                  example: 12438\n                  description: Indicates how many milliseconds remained on the bomb\n                    timer when it was defused.\n      responses: { }\n  \"/Get5_OnBombExploded\":\n    post:\n      tags:\n        - Client Actions\n      description: |\n        Fired when the bomb explodes.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Get5BombExplodedEvent\n              allOf:\n                - \"$ref\": \"#/components/schemas/Get5BombEvent\"\n              properties:\n                event:\n                  enum:\n                    - bomb_exploded\n      responses: { }\ncomponents:\n  schemas:\n    Get5Status:\n      type: object\n      properties:\n        plugin_version:\n          type: string\n          description: The version of Get5. This is required when submitting a bug-report.\n          example: 0.8.1-8ef7ffa3\n        gamestate:\n          \"$ref\": \"#/components/schemas/Get5State\"\n        paused:\n          type: boolean\n          description: Indicates if the game is currently paused.\n        loaded_config_file:\n          type: string\n          description: |\n            The path to the loaded config file. If you used `get5_loadmatch \u003cfile\u003e`, it's this file's name.\n            If you used `get5_loadmatch_url`, the pattern of the file is `remote_config%d.json`, where `%d` is the server's id,\n            which you can set with `get5_server_id`.\n          example: addons/sourcemod/configs/get5/match_config.json\n        matchid:\n          type: string\n          description: The match ID of the game. Only defined if a match config was loaded.\n          example: 1743\n        map_number:\n          type: integer\n          description: The map number of the current match, starting at 0. Only defined if a match config was loaded.\n          minimum: 0\n        round_number:\n          type: integer\n          description: The round number of the current match, starting at 0. -1 if not live. Only defined if a match config was loaded.\n          minimum: -1\n        round_time:\n          type: integer\n          description: The number of milliseconds elapsed since the round started. Only defined if a match config was loaded.\n          minimum: 0\n        team1:\n          $ref: \"#/components/schemas/Get5StatusTeam\"\n        team2:\n          $ref: \"#/components/schemas/Get5StatusTeam\"\n        maps:\n          type: array\n          minItems: 1\n          items:\n            - type: string\n              example: de_dust2\n          description: The maps of the series, in the order they are played. Only defined if maps have been decided.\n          example:\n            - de_dust2\n            - de_nuke\n    Get5StatusTeam:\n      type: object\n      description: Describes a team of a match. Only defined if a match config was loaded.\n      properties:\n        name:\n          type: string\n          description: The name of the team.\n          example: NaVi\n        series_score:\n          type: integer\n          minimum: 0\n          description: The current series score of the team.\n          example: 1\n        current_map_score:\n          type: integer\n          minimum: 0\n          description: The current map score of the team (i.e. the number of rounds won the current map).\n          example: 14\n        connected_clients:\n          type: integer\n          minimum: 0\n          description: The number of connected players of the team.\n          example: 5\n        ready:\n          type: boolean\n          description: Indicates if the team has been marked as ready or not.\n        side:\n          $ref: \"#/components/schemas/Get5Side\"\n    Get5State:\n      type: string\n      enum:\n        - \"none\"\n        - \"pre_veto\"\n        - \"veto\"\n        - \"warmup\"\n        - \"knife\"\n        - \"waiting_for_knife_decision\"\n        - \"going_live\"\n        - \"live\"\n        - \"post_game\"\n      description: |\n        Represents the state of a Get5 match.\n    Get5Event:\n      type: object\n      properties:\n        event:\n          type: string\n          description: The name of the event `GetEvent()` and `SetEvent()` in SourceMod.\n    Get5MatchEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5Event\"\n      properties:\n        matchid:\n          type: string\n          description: The ID of the match. `GetMatchId()` and `SetMatchId()` in SourceMod.\n          example: '14272'\n    Get5MatchTeamEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5MatchEvent\"\n      properties:\n        team:\n          $ref: \"#/components/schemas/Get5Team\"\n    Get5MapEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5MatchEvent\"\n      properties:\n        map_number:\n          type: integer\n          minimum: 0\n          example: 0\n          description: The map number in the series, starting at 0. `MapNumber` in\n            SourceMod.\n    Get5MapSelectionEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5MatchTeamEvent\"\n      properties:\n        map_name:\n          type: string\n          example: de_nuke\n          description: The name of the map related to the event (map picked/banned\n            etc.). `GetMapName()` and `SetMapName()` in SourceMod.\n    Get5MapTeamEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5MapEvent\"\n      properties:\n        team:\n          $ref: \"#/components/schemas/Get5Team\"\n    Get5RoundEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5MapEvent\"\n      properties:\n        round_number:\n          type: integer\n          minimum: 0\n          example: 13\n          description: The round number of the map, starting at 0. `RoundNumber` in\n            SourceMod.\n    Get5PlayerRoundEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5RoundEvent\"\n      properties:\n        player:\n          \"$ref\": \"#/components/schemas/Get5Player\"\n    Get5TimedRoundEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5RoundEvent\"\n      properties:\n        round_time:\n          type: integer\n          description: The number of milliseconds into the round the event occurred.\n            `RoundTime` in SourceMod.\n          minimum: 0\n          example: 51434\n    Get5BombEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5TimedRoundEvent\"\n      properties:\n        site:\n          $ref: \"#/components/schemas/Get5Site\"\n    Get5PlayerBombEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5PlayerTimedRoundEvent\"\n      properties:\n        site:\n          $ref: \"#/components/schemas/Get5Site\"\n    Get5PlayerTimedRoundEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5TimedRoundEvent\"\n      properties:\n        player:\n          \"$ref\": \"#/components/schemas/Get5Player\"\n    Get5PlayerWeaponEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5PlayerTimedRoundEvent\"\n      properties:\n        weapon:\n          \"$ref\": \"#/components/schemas/Get5Weapon\"\n    Get5Winner:\n      type: object\n      description: Describes a winning team (their side and team number). `Winner` in SourceMod.\n      properties:\n        side:\n          $ref: \"#/components/schemas/Get5Side\"\n        team:\n          $ref: \"#/components/schemas/Get5Team\"\n    Get5Team:\n      type: string\n      nullable: true\n      description: Represents a team. `null` if no team. `Team` in SourceMod and represented as an integer enum.\n      enum:\n        - team1\n        - team2\n        - spec\n    Get5Side:\n      type: string\n      nullable: true\n      description: Represents a side (CT vs T). `null` if no side. `Side` in SourceMod and represented as an integer enum.\n      enum:\n        - ct\n        - t\n        - spec\n    Get5PauseType:\n      type: string\n      description: Describes a pause type. `PauseType` in SourceMod and represented as an integer enum where 0 means no pause. The `backup` pause is a special pause type fired when the game is paused due to a round backup restore.\n      enum:\n        - tactical\n        - technical\n        - admin\n        - backup\n    Get5Player:\n      type: object\n      properties:\n        steamid:\n          type: string\n          example: '76561198279375306'\n          description: The SteamID64 of the player. `GetSteamId()` and `SetSteamId()`\n            in SourceMod. This will be `BOT-%d` if the player is a bot, where `%d` is the client index. This is required to be able to distinguish bots from each other. The string will be empty for Console and GOTV (although we *should* never see this in practice).\n        side:\n          $ref: \"#/components/schemas/Get5Side\"\n        name:\n          type: string\n          description: The in-game name of the player. If the player is a bot, this will be \"BOT Gary\" etc. `GetName()` and `SetName()` in SourceMod.\n          example: s1mple\n        is_bot:\n          type: boolean\n          description: Indicates if the player is a bot. `IsBot` in SourceMod.\n      description: Describes a player. `Player` in SourceMod (or `Attacker` on `Get5PlayerDeathEvent`).\n    Get5Weapon:\n      type: object\n      properties:\n        name:\n          type: string\n          example: ak47\n          description: The in-game console name of the weapon used. `GetName()` and\n            `SetName()` in SourceMod.\n        id:\n          type: integer\n          minimum: 0\n          example: 27\n          description: The weapon ID used. See https://sm.alliedmods.net/new-api/cstrike/CSWeaponID\n            `Id` in SourceMod.\n      description: Describes a weapon. `Weapon` in SourceMod.\n    Get5AssisterObject:\n      type: object\n      nullable: true\n      properties:\n        player:\n          \"$ref\": \"#/components/schemas/Get5Player\"\n        friendly_fire:\n          type: boolean\n          description: Indicates if the assist was friendly fire. `FriendlyFire` in\n            SourceMod.\n        flash_assist:\n          type: boolean\n          description: Indicates if the assist was a flash assist. `FlashAssist` in\n            SourceMod.\n      description: 'Describes an assist to a kill. `null` if no assister. `Assist`\n        in SourceMod. **Note: Use `HasAssist()` in SourceMod to determine if the property\n        exists before accessing it.**'\n    Get5GrenadeVictim:\n      type: object\n      properties:\n        player:\n          \"$ref\": \"#/components/schemas/Get5Player\"\n        friendly_fire:\n          type: boolean\n          description: Indicates if the grenade victim (`player`) was a friendly.\n            `FriendlyFire` in SourceMod.\n    Get5VictimGrenadeEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5PlayerWeaponEvent\"\n      properties:\n        victims:\n          type: array\n          items:\n            oneOf:\n              - \"$ref\": \"#/components/schemas/Get5BlindedGrenadeVictim\"\n              - \"$ref\": \"#/components/schemas/Get5DamageGrenadeVictim\"\n          description: Describes the victims of the grenade. For flash bangs, these\n            are `Get5BlindedGrenadeVictim` and for molotovs/firebombs and HE, these\n            are `Get5DamageGrenadeVictim`. The array is empty if the grenade did not\n            affect anyone. `Victims` in SourceMod.\n    Get5VictimWithDamageGrenadeEvent:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5VictimGrenadeEvent\"\n      properties:\n        damage_enemies:\n          type: integer\n          minimum: 0\n          description: The total damage the grenade did to enemies. `DamageEnemies`\n            in SourceMod.\n        damage_friendlies:\n          type: integer\n          minimum: 0\n          description: The total damage the grenade did to friendlies. `DamageFriendlies`\n            in SourceMod.\n    Get5DamageGrenadeVictim:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5GrenadeVictim\"\n      properties:\n        damage:\n          type: integer\n          maximum: 100\n          minimum: 1\n          description: The damage afflicted to the player by the grenade. `Damage`\n            in SourceMod.\n        killed:\n          type: boolean\n          description: Indicates if the grenade victim (`player`) was killed by the\n            grenade. `Killed` in SourceMod.\n      description: Describes a victim of a HE or molotov/firebomb.\n    Get5BlindedGrenadeVictim:\n      allOf:\n        - \"$ref\": \"#/components/schemas/Get5GrenadeVictim\"\n      properties:\n        blind_duration:\n          type: number\n          maximum: 5\n          minimum: 0.5\n          description: The duration in seconds the victim (`player`) was blinded by\n            the grenade. `BlindDuration` in SourceMod.\n      description: Describes a victim of a flash bang.\n    Get5Site:\n      type: string\n      enum:\n        - a\n        - b\n      description: The site at which the bomb was planted/defused or exploded. `Site` in SourceMod.\n\ntags:\n  - name: Get5 Status\n    description: The response structure of the `get5_status` console command.\n  - name: All Events\n    description: Forward fired for all events.\n  - name: Series Flow\n    description: Events the occur in relation to setting up a match or series.\n  - name: Map Flow\n    description: Events the occur in relation to a map pick or match-events on a map (pausing).\n  - name: Client Actions\n    description: Events that occur based on players' in-game activity.\n\n",
			"canonicalURL": "/github.com/splewis/get5@8c5e46a51b72723b6712d3c7e288201fd13a91fb/-/blob/documentation/docs/event_schema.yml",
			"externalURLs": [
				{
					"url": "https://github.com/splewis/get5/blob/8c5e46a51b72723b6712d3c7e288201fd13a91fb/documentation/docs/event_schema.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!seq into ogen.Schema"
}