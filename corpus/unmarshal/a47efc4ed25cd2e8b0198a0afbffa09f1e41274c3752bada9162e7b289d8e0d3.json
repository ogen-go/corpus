{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/crawlab-team/crawlab-core"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/api/openapi.yaml",
			"byteSize": 118412,
			"content": "openapi: 3.1.0\ninfo:\n  title: Crawlab API\n  version: 0.6.0\n  description: Crawlab API\n  license:\n    name: BSD-3-Clause\n    url: https://github.com/crawlab-team/crawlab-pro/blob/main/LICENSE\n\nservers:\n  - url: http://localhost:8000\n    description: Local API\n  - url: http://localhost:8080/api\n    description: Docker API\n  - url: https://demo-pro.crawlab.cn/api\n    description: Demo API\n\ntags:\n  - name: login\n    description: Login related\n    x-displayName: Login\n  - name: version\n    description: Version related\n    x-displayName: Version\n  - name: node\n    description: Node related\n    x-displayName: Node\n  - name: project\n    description: Project related\n    x-displayName: Project\n\nx-tagGroups:\n  - name: Anomalous\n    tags:\n      - login\n      - version\n  - name: Auth Required\n    tags:\n      - node\n      - project\n\npaths:\n  # login\n  /login:\n    post:\n      tags: [ login ]\n      operationId: postLogin\n      summary: Login\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n            example:\n              username: admin\n              password: admin\n      responses:\n        200:\n          description: Login successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostLoginResponse'\n        401:\n          description: Login failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedErrorResponse'\n  /logout:\n    post:\n      tags: [ login ]\n      operationId: postLogout\n      summary: Logout\n      responses:\n        200:\n          description: Logout successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n\n  # version\n  /version:\n    get:\n      tags: [ version ]\n      operationId: getVersion\n      summary: Get version\n      responses:\n        200:\n          description: Get version successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetVersionResponse'\n              example:\n                status: ok\n                data: v0.6.0\n\n  # node\n  /nodes:\n    get:\n      tags: [ node ]\n      operationId: getNodes\n      summary: Get nodes\n      security:\n        - apiToken: [ ]\n      parameters:\n        - in: query\n          name: page\n          description: Page number\n          required: false\n          schema:\n            type: integer\n            default: 1\n        - in: query\n          name: page_size\n          description: Page size\n          required: false\n          schema:\n            type: integer\n            default: 10\n      responses:\n        200:\n          description: Get nodes successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetNodesResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    put:\n      tags: [ node ]\n      operationId: putNode\n      summary: Update node\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchRequestPayloadWithStringData'\n      responses:\n        200:\n          description: Update node successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    delete:\n      tags: [ node ]\n      operationId: deleteNodes\n      summary: Delete nodes\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchRequestPayload'\n      responses:\n        200:\n          description: Delete node successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /nodes/{id}:\n    get:\n      tags: [ node ]\n      operationId: getNode\n      summary: Get node\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Node ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get node successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetNodeResponse'\n        404:\n          description: Node not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    put:\n      tags: [ node ]\n      operationId: putNode\n      summary: Update node\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Node ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Node'\n      responses:\n        200:\n          description: Update node successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Node not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n\n  # project\n  /projects:\n    get:\n      tags: [ project ]\n      operationId: getProjects\n      summary: Get projects\n      security:\n        - apiToken: [ ]\n      parameters:\n        - in: query\n          name: page\n          schema:\n            type: integer\n        - in: query\n          name: size\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Get projects successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetProjectsResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    post:\n      tags: [ project ]\n      operationId: postProject\n      summary: Create project\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostProjectRequest'\n      responses:\n        200:\n          description: Create project successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    put:\n      tags: [ project ]\n      operationId: putProjects\n      summary: Update projects\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchRequestPayloadWithStringData'\n      responses:\n        200:\n          description: Update project successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Project not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    delete:\n      tags: [ project ]\n      operationId: deleteProjects\n      summary: Delete projects\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchRequestPayload'\n      responses:\n        200:\n          description: Delete project successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Project not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /projects/batch:\n    post:\n      tags: [ project ]\n      operationId: postProjects\n      summary: Create projects\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PostProjectRequest'\n      responses:\n        200:\n          description: Update project successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /projects/{id}:\n    get:\n      tags: [ project ]\n      operationId: getProject\n      summary: Get project\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Project ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get project successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetProjectResponse'\n        404:\n          description: Project not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    post:\n      tags: [ project ]\n      operationId: postProject\n      summary: Update project\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Project ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Project'\n      responses:\n        200:\n          description: Update project successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Project not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    delete:\n      tags: [ project ]\n      operationId: deleteProject\n      summary: Delete project\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Project ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Delete project successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Project not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n\n  # spider\n  /spiders:\n    get:\n      tags: [ spider ]\n      operationId: getSpiders\n      summary: Get spiders\n      security:\n        - apiToken: [ ]\n      parameters:\n        - in: query\n          name: page\n          schema:\n            type: integer\n        - in: query\n          name: size\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Get spiders successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSpidersResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    post:\n      tags: [ spider ]\n      operationId: postSpiders\n      summary: Create spiders\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchRequestPayloadWithStringData'\n      responses:\n        200:\n          description: Create spiders successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/batch:\n    post:\n      tags: [ spider ]\n      operationId: postSpiders\n      summary: Update spiders\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PostSpiderRequest'\n      responses:\n        200:\n          description: Update spiders successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}:\n    get:\n      tags: [ spider ]\n      operationId: getSpider\n      summary: Get spider\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get spider successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSpiderResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    post:\n      tags: [ spider ]\n      operationId: postSpider\n      summary: Update spider\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Spider'\n      responses:\n        200:\n          description: Update spider successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    delete:\n      tags: [ spider ]\n      operationId: deleteSpider\n      summary: Delete spider\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n  /spiders/{id}/files/list:\n    get:\n      tags: [ spider ]\n      operationId: getSpiderFilesList\n      summary: Get spider files list\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get spider files list successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSpiderFilesListResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/files/get:\n    get:\n      tags: [ spider ]\n      operationId: getSpiderFile\n      summary: Get spider file\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: File path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get spider file successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSpiderFileResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/files/info:\n    get:\n      tags: [ spider ]\n      operationId: getSpiderFileInfo\n      summary: Get spider file info\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: File path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get spider file info successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSpiderFileInfoResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/files/save:\n    post:\n      tags: [ spider ]\n      operationId: postSpiderFile\n      summary: Save spider file\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: File path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostSpiderFileRequest'\n      responses:\n        200:\n          description: Save spider file successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/files/save/dir:\n    post:\n      tags: [ spider ]\n      operationId: postSpiderFileDir\n      summary: Save spider file dir\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: File path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostSpiderFileDirRequest'\n      responses:\n        200:\n          description: Save spider file dir successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/files/renameFile:\n    post:\n      tags: [ spider ]\n      operationId: postSpiderFileRenameFile\n      summary: Rename spider file\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: File path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostSpiderFileRenameFileRequest'\n      responses:\n        200:\n          description: Rename spider file successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/files/delete:\n    post:\n      tags: [ spider ]\n      operationId: postSpiderFileDelete\n      summary: Delete spider file\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: File path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Delete spider file successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/files/copy:\n    post:\n      tags: [ spider ]\n      operationId: postSpiderFileCopy\n      summary: Copy spider file\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: File path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostSpiderFileCopyRequest'\n      responses:\n        200:\n          description: Copy spider file successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/run:\n    post:\n      tags: [ spider ]\n      operationId: postSpiderRun\n      summary: Run spider\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostSpiderRunRequest'\n      responses:\n        200:\n          description: Run spider successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/git:\n    get:\n      tags: [ spider ]\n      operationId: getSpiderGit\n      summary: Get spider git\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get spider git successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSpiderGitResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/git/remote-refs:\n    get:\n      tags: [ spider ]\n      operationId: getSpiderGitRemoteRefs\n      summary: Get spider git remote refs\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get spider git remote refs successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSpiderGitRemoteRefsResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/git/pull:\n    post:\n      tags: [ spider ]\n      operationId: postSpiderGitPull\n      summary: Pull spider git\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostSpiderGitPullRequest'\n      responses:\n        200:\n          description: Pull spider git successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/git/commit:\n    post:\n      tags: [ spider ]\n      operationId: postSpiderGitCommit\n      summary: Commit spider git\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostSpiderGitCommitRequest'\n      responses:\n        200:\n          description: Commit spider git successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/data-source:\n    get:\n      tags: [ spider ]\n      operationId: getSpiderDataSource\n      summary: Get spider data source\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get spider data source successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSpiderDataSourceResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /spiders/{id}/data-source/{ds_id}:\n    post:\n      tags: [ spider ]\n      operationId: postSpiderDataSource\n      summary: Create spider data source\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Spider ID\n          required: true\n          schema:\n            type: string\n        - name: ds_id\n          in: path\n          description: Data source ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Create spider data source successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Spider not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n\n  # schedule\n  /schedules:\n    get:\n      tags: [ schedule ]\n      operationId: getSchedules\n      summary: Get schedules\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: page\n          in: query\n          description: Page number\n          required: false\n          schema:\n            type: integer\n        - name: page_size\n          in: query\n          description: Page size\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Get schedules successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSchedulesResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    post:\n      tags: [ schedule ]\n      operationId: postSchedule\n      summary: Create schedule\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostScheduleRequest'\n      responses:\n        200:\n          description: Create schedule successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    put:\n      tags: [ schedule ]\n      operationId: putSchedule\n      summary: Update schedule\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Schedule ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchRequestPayloadWithStringData'\n      responses:\n        200:\n          description: Update schedule successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Schedule not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    delete:\n      tags: [ schedule ]\n      operationId: deleteSchedules\n      summary: Delete schedules\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchRequestPayload'\n      responses:\n        200:\n          description: Delete schedule successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Schedule not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /schedules/batch:\n    post:\n      tags: [ schedule ]\n      operationId: postSchedulesBatch\n      summary: Create schedules\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostSchedulesBatchRequest'\n      responses:\n        200:\n          description: Create schedules successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /schedules/{id}:\n    get:\n      tags: [ schedule ]\n      operationId: getSchedule\n      summary: Get schedule\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Schedule ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get schedule successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetScheduleResponse'\n        404:\n          description: Schedule not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    put:\n      tags: [ schedule ]\n      operationId: putSchedule\n      summary: Update schedule\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Schedule ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutScheduleRequest'\n      responses:\n        200:\n          description: Update schedule successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Schedule not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    delete:\n      tags: [ schedule ]\n      operationId: deleteSchedule\n      summary: Delete schedule\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Schedule ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Delete schedule successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Schedule not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /schedules/{id}/enabled:\n    post:\n      tags: [ schedule ]\n      operationId: postScheduleEnabled\n      summary: Enable schedule\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Schedule ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Enable schedule successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Schedule not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /schedules/{id}/disabled:\n    post:\n      tags: [ schedule ]\n      operationId: postScheduleDisabled\n      summary: Disable schedule\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Schedule ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Disable schedule successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Schedule not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n\n  # task\n  /tasks:\n    get:\n      tags: [ task ]\n      operationId: getTasks\n      summary: Get tasks\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: page\n          in: query\n          description: Page number\n          required: false\n          schema:\n            type: integer\n        - name: size\n          in: query\n          description: Page size number\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Get tasks successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTasksResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    delete:\n      tags: [ task ]\n      operationId: deleteTasks\n      summary: Delete tasks\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: ids\n          in: query\n          description: Task IDs\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: Delete tasks successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /tasks/run:\n    post:\n      tags: [ task ]\n      operationId: postTaskRun\n      summary: Run task\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostTaskRunRequest'\n      responses:\n        200:\n          description: Run task successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /tasks/{id}:\n    get:\n      tags: [ task ]\n      operationId: getTask\n      summary: Get task\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Task ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get task successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTaskResponse'\n        404:\n          description: Task not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    delete:\n      tags: [ task ]\n      operationId: deleteTask\n      summary: Delete task\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Task ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Delete task successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Task not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /tasks/{id}/restart:\n    post:\n      tags: [ task ]\n      operationId: postTaskRestart\n      summary: Restart task\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Task ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Restart task successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Task not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /tasks/{id}/cancel:\n    post:\n      tags: [ task ]\n      operationId: postTaskCancel\n      summary: Cancel task\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Task ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Cancel task successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Task not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /tasks/{id}/logs:\n    get:\n      tags: [ task ]\n      operationId: getTaskLogs\n      summary: Get task logs\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Task ID\n          required: true\n          schema:\n            type: string\n        - name: page\n          in: query\n          description: Page number\n          required: false\n          schema:\n            type: integer\n        - name: size\n          in: query\n          description: Page size number\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Get task logs successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTaskLogsResponse'\n        404:\n          description: Task not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /tasks/{id}/data:\n    get:\n      tags: [ task ]\n      operationId: getTaskData\n      summary: Get task data\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Task ID\n          required: true\n          schema:\n            type: string\n        - name: page\n          in: query\n          description: Page number\n          required: false\n          schema:\n            type: integer\n        - name: size\n          in: query\n          description: Page size number\n          required: false\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Get task data successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTaskDataResponse'\n        404:\n          description: Task not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n\n  # user\n  /users:\n    get:\n      tags: [ user ]\n      operationId: getUsers\n      summary: Get users\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: page\n          in: query\n          description: Page number\n          required: false\n          schema:\n            type: integer\n          example: 1\n        - name: size\n          in: query\n          description: Page size number\n          required: false\n          schema:\n            type: integer\n          example: 10\n      responses:\n        200:\n          description: Get users successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetUsersResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    post:\n      tags: [ user ]\n      operationId: postUser\n      summary: Create user\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostUserRequest'\n      responses:\n        200:\n          description: Create user successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    put:\n      tags: [ user ]\n      operationId: putUser\n      summary: Update user\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchRequestPayloadWithStringData'\n      responses:\n        200:\n          description: Update user successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    delete:\n      tags: [ user ]\n      operationId: deleteUser\n      summary: Delete user\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Delete user successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /users/{id}:\n    get:\n      tags: [ user ]\n      operationId: getUser\n      summary: Get user\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get user successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetUserResponse'\n        404:\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    put:\n      tags: [ user ]\n      operationId: putUser\n      summary: Update user\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutUserRequest'\n      responses:\n        200:\n          description: Update user successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    delete:\n      tags: [ user ]\n      operationId: deleteUser\n      summary: Delete user\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Delete user successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /users/{id}/change-password:\n    post:\n      tags: [ user ]\n      operationId: changePassword\n      summary: Change password\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostUserChangePasswordRequest'\n      responses:\n        200:\n          description: Change password successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /users/me:\n    get:\n      tags: [ user ]\n      operationId: getMe\n      summary: Get me\n      security:\n        - apiToken: [ ]\n      responses:\n        200:\n          description: Get me successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetUserResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    put:\n      tags: [ user ]\n      operationId: putMe\n      summary: Update me\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutUserRequest'\n      responses:\n        200:\n          description: Update me successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n\n  # token\n  /tokens:\n    get:\n      tags: [ token ]\n      operationId: getTokens\n      summary: Get tokens\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: page\n          in: query\n          description: Page number\n          required: false\n          schema:\n            type: integer\n          example: 1\n        - name: size\n          in: query\n          description: Page size\n          required: false\n          schema:\n            type: integer\n          example: 10\n      responses:\n        200:\n          description: Get tokens successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTokensResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    post:\n      tags: [ token ]\n      operationId: postToken\n      summary: Create token\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostTokenRequest'\n      responses:\n        200:\n          description: Create token successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /tokens/{id}:\n    get:\n      tags: [ token ]\n      operationId: getToken\n      summary: Get token\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Token ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get token successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTokenResponse'\n        404:\n          description: Token not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    put:\n      tags: [ token ]\n      operationId: putToken\n      summary: Update token\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Token ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutTokenRequest'\n      responses:\n        200:\n          description: Update token successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Token not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    delete:\n      tags: [ token ]\n      operationId: deleteToken\n      summary: Delete token\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Token ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Delete token successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Token not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n\n  # plugin\n  /plugins:\n    get:\n      tags: [ plugin ]\n      operationId: getPlugins\n      summary: Get plugins\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: page\n          in: query\n          description: Page number\n          required: false\n          schema:\n            type: integer\n          example: 1\n        - name: size\n          in: query\n          description: Page size\n          required: false\n          schema:\n            type: integer\n          example: 10\n      responses:\n        200:\n          description: Get plugins successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetPluginsResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n    post:\n      tags: [ plugin ]\n      operationId: postPlugin\n      summary: Create plugin\n      security:\n        - apiToken: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostPluginRequest'\n      responses:\n        200:\n          description: Create plugin successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /plugins/{id}:\n    get:\n      tags: [ plugin ]\n      operationId: getPlugin\n      summary: Get plugin\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Plugin ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get plugin successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetPluginResponse'\n        404:\n          description: Plugin not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /plugins/{id}/start:\n    post:\n      tags: [ plugin ]\n      operationId: startPlugin\n      summary: Start plugin\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Plugin ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Start plugin successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Plugin not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /plugins/{id}/stop:\n    post:\n      tags: [ plugin ]\n      operationId: stopPlugin\n      summary: Stop plugin\n      security:\n        - apiToken: [ ]\n      parameters:\n        - name: id\n          in: path\n          description: Plugin ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Stop plugin successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        404:\n          description: Plugin not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /plugins/public:\n    get:\n      tags: [ plugin ]\n      operationId: getPublicPlugins\n      summary: Get public plugins\n      security:\n        - apiToken: [ ]\n      responses:\n        200:\n          description: Get public plugins successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetPublicPluginsResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n  /plugins/public/info:\n    get:\n      tags: [ plugin ]\n      operationId: getPublicPluginsInfo\n      summary: Get public plugins info\n      security:\n        - apiToken: [ ]\n      parameters:\n        - in: query\n          name: full_name\n          description: Plugin full name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Get public plugins info successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetPublicPluginsInfoResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestErrorResponse'\n\ncomponents:\n  schemas:\n    # base request bodies\n    BatchRequestPayload:\n      description: Batch request payload\n      properties:\n        ids:\n          type: array\n          description: Model IDs to operate\n          items:\n            type: string\n    BatchRequestPayloadWithStringData:\n      description: Batch request payload with string data\n      properties:\n        ids:\n          type: array\n          description: Model IDs to operate\n          items:\n            type: string\n        data:\n          type: string\n          description: JSON marshalled model fields data to operate\n        fields:\n          type: array\n          description: Fields to operate\n          items:\n            type: string\n\n    # request bodies\n    PostProjectRequest:\n      description: Put project request body\n      properties:\n        name:\n          type: string\n          description: Project name\n        description:\n          type: string\n          description: Project description\n    PostSpiderRequest:\n      description: Put project request body\n      properties:\n        name:\n          type: string\n          description: Spider name\n        description:\n          type: string\n          description: Spider description\n        type:\n          type: string\n          description: Spider type\n        params:\n          type: string\n          description: Default spider task params\n        col_name:\n          type: string\n          description: Spider collection name\n        project_id:\n          type: string\n          description: Spider project ID\n        mode:\n          type: string\n          enum:\n            - random\n            - all-nodes\n            - selected-nodes\n          description: Default spider task mode\n    PostSpiderFileRequest:\n      description: Post spider file request body\n      properties:\n        path:\n          type: string\n          description: File path\n        data:\n          type: string\n          description: File data\n    PostSpiderFileDirRequest:\n      description: Post spider file dir request body\n      properties:\n        path:\n          type: string\n          description: File path\n    PostSpiderFileRenameFileRequest:\n      description: Post spider file rename file request body\n      properties:\n        path:\n          type: string\n          description: File path\n        new_path:\n          type: string\n          description: New file path\n    PostSpiderFileCopyRequest:\n      description: Post spider file copy request body\n      properties:\n        path:\n          type: string\n          description: File path\n        new_path:\n          type: string\n          description: New file path\n    PostSpiderRunRequest:\n      description: Post spider run request body\n      properties:\n        params:\n          type: string\n          description: Spider task params\n        mode:\n          type: string\n          enum:\n            - random\n            - all-nodes\n            - selected-nodes\n          description: Spider task mode\n      example:\n        mode: random\n    PostSpiderGitPullRequest:\n      description: Post spider git pull request body\n      properties:\n        branch:\n          type: string\n          description: Git branch\n        commit:\n          type: string\n          description: Git commit\n        remote:\n          type: string\n          description: Git remote\n        ref:\n          type: string\n          description: Git ref\n    PostSpiderGitCommitRequest:\n      description: Post spider git commit request body\n      $ref: '#/components/schemas/GitPayload'\n    PostScheduleRequest:\n      description: Post schedule request body\n      properties:\n        name:\n          type: string\n          description: Schedule name\n        description:\n          type: string\n          description: Schedule description\n        project_id:\n          type: string\n          description: Schedule project ID\n        spider_id:\n          type: string\n          description: Schedule spider ID\n        cron:\n          type: string\n          description: Cron expression\n        params:\n          type: string\n          description: Schedule params\n        mode:\n          $ref: '#/components/schemas/TaskMode'\n    PostSchedulesBatchRequest:\n      description: Post schedules batch request body\n      properties:\n        data:\n          type: array\n          description: Schedules data\n          items:\n            $ref: '#/components/schemas/PostScheduleRequest'\n    PutScheduleRequest:\n      description: Put schedule request body\n      properties:\n        name:\n          type: string\n          description: Schedule name\n        description:\n          type: string\n          description: Schedule description\n        project_id:\n          type: string\n          description: Schedule project ID\n        spider_id:\n          type: string\n          description: Schedule spider ID\n        cron:\n          type: string\n          description: Cron expression\n        params:\n          type: string\n          description: Schedule params\n        mode:\n          $ref: '#/components/schemas/TaskMode'\n    PostTaskRunRequest:\n      description: Post task run request body\n      properties:\n        spider_id:\n          type: string\n          description: Task spider ID\n        cmd:\n          type: string\n          description: Task command\n        params:\n          type: string\n          description: Task params\n        mode:\n          $ref: '#/components/schemas/TaskMode'\n        priority:\n          type: integer\n          description: Task priority\n    PostUserRequest:\n      description: Post user request body\n      properties:\n        username:\n          type: string\n          description: User username\n        password:\n          type: string\n          description: User password\n        email:\n          type: string\n          description: User email\n        role:\n          type: string\n          enum:\n            - admin\n            - user\n          description: User role\n    PutUserRequest:\n      description: Put user request body\n      properties:\n        username:\n          type: string\n          description: User username\n        email:\n          type: string\n          description: User email\n        role:\n          type: string\n          enum:\n            - admin\n            - user\n          description: User role\n    PostUserChangePasswordRequest:\n      description: Post user change password request body\n      properties:\n        password:\n          type: string\n          description: New password\n    PostTokenRequest:\n      description: Post token request body\n      properties:\n        name:\n          type: string\n          description: Token name\n    PutTokenRequest:\n      description: Put token request body\n      properties:\n        name:\n          type: string\n          description: Token name\n    PostPluginRequest:\n      description: Post plugin request body\n      properties:\n        name:\n          type: string\n          description: Plugin name\n        full_name:\n          type: string\n          description: Plugin full name\n\n    # base responses\n    BaseResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          description: Status of the response\n        message:\n          type: string\n          description: Message of the response\n    EmptyResponse:\n      description: Empty response body\n      $ref: '#/components/schemas/BaseResponse'\n      example:\n        status: ok\n        message: success\n    Response:\n      description: Response body\n      allOf:\n        - $ref: '#/components/schemas/BaseResponse'\n        - type: object\n          properties:\n            data:\n              type: object\n    ListResponse:\n      description: List response body\n      allOf:\n        - $ref: '#/components/schemas/BaseResponse'\n        - type: object\n          properties:\n            data:\n              type: array\n            total:\n              type: integer\n    ErrorResponse:\n      description: Error response body\n      allOf:\n        - $ref: '#/components/schemas/BaseResponse'\n        - type: object\n          properties:\n            error:\n              type: string\n\n    # error response\n    NotFoundErrorResponse:\n      description: Not found error response body\n      $ref: '#/components/schemas/ErrorResponse'\n      example:\n        status: error\n        message: not found\n    BadRequestErrorResponse:\n      description: Bad request error response\n      $ref: '#/components/schemas/ErrorResponse'\n      example:\n        status: error\n        message: bad request\n    UnauthorizedErrorResponse:\n      description: Unauthorized error response\n      $ref: '#/components/schemas/ErrorResponse'\n      example:\n        status: error\n        message: unauthorized\n\n    # success response\n    PostLoginResponse:\n      type: object\n      properties:\n        data:\n          type: string\n          description: API token\n    GetVersionResponse:\n      type: object\n      properties:\n        data:\n          type: string\n          description: Version\n    GetNodesResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ListResponse'\n        - properties:\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/Node'\n    GetNodeResponse:\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/Node'\n    GetProjectsResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ListResponse'\n        - properties:\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/Project'\n    GetProjectResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n              $ref: '#/components/schemas/Project'\n    GetSpidersResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ListResponse'\n        - properties:\n            data:\n              $ref: '#/components/schemas/Spider'\n    GetSpiderResponse:\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/Spider'\n    GetSpiderFilesListResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ListResponse'\n        - properties:\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/SpiderFile'\n      example:\n        {\n          \"status\": \"ok\",\n          \"message\": \"success\",\n          \"data\": [\n            {\n              \"name\": \"scrapy_baidu\",\n              \"path\": \"/scrapy_baidu\",\n              \"full_path\": \"/fs/62c66a8ef9dce6fe4caa58e5/scrapy_baidu\",\n              \"extension\": \"\",\n              \"md5\": \"\",\n              \"is_dir\": true,\n              \"file_size\": 0,\n              \"children\": [\n                {\n                  \"name\": \"spiders\",\n                  \"path\": \"/scrapy_baidu/spiders\",\n                  \"full_path\": \"/fs/62c66a8ef9dce6fe4caa58e5/scrapy_baidu/spiders\",\n                  \"extension\": \"\",\n                  \"md5\": \"\",\n                  \"is_dir\": true,\n                  \"file_size\": 0,\n                  \"children\": [\n                    {\n                      \"name\": \"__init__.py\",\n                      \"path\": \"/scrapy_baidu/spiders/__init__.py\",\n                      \"full_path\": \"/fs/62c66a8ef9dce6fe4caa58e5/scrapy_baidu/spiders/__init__.py\",\n                      \"extension\": \"py\",\n                      \"md5\": \"EoqQSUWYa98Uwyno4FRZYw==\",\n                      \"is_dir\": false,\n                      \"file_size\": 161,\n                      \"children\": null\n                    },\n                    {\n                      \"name\": \"baidu.py\",\n                      \"path\": \"/scrapy_baidu/spiders/baidu.py\",\n                      \"full_path\": \"/fs/62c66a8ef9dce6fe4caa58e5/scrapy_baidu/spiders/baidu.py\",\n                      \"extension\": \"py\",\n                      \"md5\": \"AhySHuGyj88CEA1ZbUJ19g==\",\n                      \"is_dir\": false,\n                      \"file_size\": 791,\n                      \"children\": null\n                    }\n                  ]\n                },\n                {\n                  \"name\": \"__init__.py\",\n                  \"path\": \"/scrapy_baidu/__init__.py\",\n                  \"full_path\": \"/fs/62c66a8ef9dce6fe4caa58e5/scrapy_baidu/__init__.py\",\n                  \"extension\": \"py\",\n                  \"md5\": \"chXunH2dwinSkhpA6JnsXw==\",\n                  \"is_dir\": false,\n                  \"file_size\": 1,\n                  \"children\": null\n                },\n                {\n                  \"name\": \"items.py\",\n                  \"path\": \"/scrapy_baidu/items.py\",\n                  \"full_path\": \"/fs/62c66a8ef9dce6fe4caa58e5/scrapy_baidu/items.py\",\n                  \"extension\": \"py\",\n                  \"md5\": \"Zg9KIbCe1h/coLSkQcQ9Sg==\",\n                  \"is_dir\": false,\n                  \"file_size\": 311,\n                  \"children\": null\n                },\n                {\n                  \"name\": \"middlewares.py\",\n                  \"path\": \"/scrapy_baidu/middlewares.py\",\n                  \"full_path\": \"/fs/62c66a8ef9dce6fe4caa58e5/scrapy_baidu/middlewares.py\",\n                  \"extension\": \"py\",\n                  \"md5\": \"4FQr2+wt4ALcuRYxzjsUdQ==\",\n                  \"is_dir\": false,\n                  \"file_size\": 3658,\n                  \"children\": null\n                },\n                {\n                  \"name\": \"pipelines.py\",\n                  \"path\": \"/scrapy_baidu/pipelines.py\",\n                  \"full_path\": \"/fs/62c66a8ef9dce6fe4caa58e5/scrapy_baidu/pipelines.py\",\n                  \"extension\": \"py\",\n                  \"md5\": \"q8MuuuJwvuV0gcE42Mg2oQ==\",\n                  \"is_dir\": false,\n                  \"file_size\": 259,\n                  \"children\": null\n                },\n                {\n                  \"name\": \"settings.py\",\n                  \"path\": \"/scrapy_baidu/settings.py\",\n                  \"full_path\": \"/fs/62c66a8ef9dce6fe4caa58e5/scrapy_baidu/settings.py\",\n                  \"extension\": \"py\",\n                  \"md5\": \"hh/13eHBaVrLNtB27duOZQ==\",\n                  \"is_dir\": false,\n                  \"file_size\": 3201,\n                  \"children\": null\n                }\n              ]\n            },\n            {\n              \"name\": \"__init__.py\",\n              \"path\": \"/__init__.py\",\n              \"full_path\": \"/fs/62c66a8ef9dce6fe4caa58e5/__init__.py\",\n              \"extension\": \"py\",\n              \"md5\": \"chXunH2dwinSkhpA6JnsXw==\",\n              \"is_dir\": false,\n              \"file_size\": 1,\n              \"children\": null\n            },\n            {\n              \"name\": \"crawlab.json\",\n              \"path\": \"/crawlab.json\",\n              \"full_path\": \"/fs/62c66a8ef9dce6fe4caa58e5/crawlab.json\",\n              \"extension\": \"json\",\n              \"md5\": \"jQ5qto4lYSEzWNF77h11gw==\",\n              \"is_dir\": false,\n              \"file_size\": 169,\n              \"children\": null\n            },\n            {\n              \"name\": \"scrapy.cfg\",\n              \"path\": \"/scrapy.cfg\",\n              \"full_path\": \"/fs/62c66a8ef9dce6fe4caa58e5/scrapy.cfg\",\n              \"extension\": \"cfg\",\n              \"md5\": \"UAALAu5OkhbTVtwQeFXpQA==\",\n              \"is_dir\": false,\n              \"file_size\": 267,\n              \"children\": null\n            }\n          ],\n          \"error\": \"\"\n        }\n    GetSpiderFileResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n              type: string\n              description: Spider file content\n      example:\n        {\n          \"status\": \"ok\",\n          \"message\": \"success\",\n          \"data\": \"# Automatically created by: scrapy startproject\\n#\\n# For more information about the [deploy] section see:\\n# https://scrapyd.readthedocs.io/en/latest/deploy.html\\n\\n[settings]\\ndefault = scrapy_baidu.settings\\n\\n[deploy]\\n#url = http://localhost:6800/\\nproject = scrapy_baidu\\n\",\n          \"error\": \"\"\n        }\n    GetSpiderFileInfoResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n              $ref: '#/components/schemas/SpiderFile'\n      example:\n        {\n          \"status\": \"ok\",\n          \"message\": \"success\",\n          \"data\": {\n            \"name\": \"openapi.yaml\",\n            \"path\": \"/openapi.yaml\",\n            \"full_path\": \"/fs/62c66a8af9dce6fe4caa58e3/openapi.yaml\",\n            \"extension\": \"yaml\",\n            \"md5\": \"1UUumcDmYtVAUOZZNegjJA==\",\n            \"is_dir\": false,\n            \"file_size\": 27698,\n            \"children\": null\n          },\n          \"error\": \"\"\n        }\n    GetSpiderGitResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n              type: object\n              description: Spider git content\n              properties:\n                current_branch:\n                  type: string\n                  description: Current git branch\n                branches:\n                  type: array\n                  description: Git branches\n                  items:\n                    type: string\n                changes:\n                  type: array\n                  description: Git changes\n                  items:\n                    $ref: '#/components/schemas/GitFileStatus'\n                logs:\n                  type: array\n                  description: Git logs\n                  items:\n                    $ref: '#/components/schemas/GitLog'\n                ignore:\n                  type: array\n                  description: Git ignore files\n                  items:\n                    type: string\n                git:\n                  type: object\n                  description: Git url\n                  $ref: '#/components/schemas/Git'\n    GetSpiderGitRemoteRefsResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n              type: object\n              description: Spider git remote refs\n              properties:\n                refs:\n                  type: array\n                  description: Git remote refs\n                  items:\n                    $ref: '#/components/schemas/GitRef'\n    GetSpiderDataSourceResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n              type: array\n              description: Spider data source\n              items:\n                $ref: '#/components/schemas/DataSource'\n    GetScheduleResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n            type: array\n            description: Schedules\n            items:\n              $ref: '#/components/schemas/Schedule'\n    GetSchedulesResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n            type: array\n            description: Schedules\n            items:\n              $ref: '#/components/schemas/Schedule'\n    GetTasksResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ListResponse'\n        - properties:\n            data:\n            type: array\n            description: Tasks\n            items:\n            $ref: '#/components/schemas/Task'\n    GetTaskResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n            $ref: '#/components/schemas/Task'\n    GetTaskLogsResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ListResponse'\n        - properties:\n          data:\n            type: array\n            description: Task logs\n            items:\n              type: string\n    GetTaskDataResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ListResponse'\n        - properties:\n            data:\n              type: array\n              items:\n                type: object\n    GetUsersResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ListResponse'\n        - properties:\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/User'\n      example:\n        {\n          \"status\": \"ok\",\n          \"message\": \"success\",\n          \"total\": 1,\n          \"data\": [\n            {\n              \"_id\": \"62c665fb6e54352bf1b279e2\",\n              \"username\": \"admin\",\n              \"role\": \"admin\",\n              \"email\": \"\"\n            }\n          ],\n          \"error\": \"\"\n        }\n    GetUserResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n            $ref: '#/components/schemas/User'\n      example:\n        {\n          \"status\": \"ok\",\n          \"message\": \"success\",\n          \"data\": {\n            \"_id\": \"62c665fb6e54352bf1b279e2\",\n            \"username\": \"admin\",\n            \"role\": \"admin\",\n            \"email\": \"\"\n          },\n          \"error\": \"\"\n        }\n    GetTokensResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ListResponse'\n        - properties:\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/Token'\n      example:\n        {\n          \"status\": \"ok\",\n          \"message\": \"success\",\n          \"total\": 1,\n          \"data\": [\n            {\n              \"_id\": \"62c8e9e7f23518fd080f04aa\",\n              \"name\": \"my token\",\n              \"token\": \"xxxxxxxxxx\"\n            }\n          ],\n          \"error\": \"\"\n        }\n    GetTokenResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n            $ref: '#/components/schemas/Token'\n      example:\n        {\n          \"status\": \"ok\",\n          \"message\": \"success\",\n          \"data\": {\n            \"_id\": \"62c8e9e7f23518fd080f04aa\",\n            \"name\": \"my token\",\n            \"token\": \"xxxxxxxxxx\"\n          },\n          \"error\": \"\"\n        }\n    GetPluginsResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ListResponse'\n        - properties:\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/Plugin'\n      example:\n        {\n          \"status\": \"ok\",\n          \"message\": \"success\",\n          \"total\": 3,\n          \"data\": [\n            {\n              \"_id\": \"62a88b02112099e6932808a8\",\n              \"name\": \"spider-assistant\",\n              \"short_name\": \"plugin-spider-assistant\",\n              \"full_name\": \"crawlab-team/plugin-spider-assistant\",\n              \"description\": \"Spider assistant plugin for Crawlab\",\n              \"proto\": \"http\",\n              \"active\": false,\n              \"endpoint\": \"localhost:9997\",\n              \"cmd\": \"sh ./bin/start.sh\",\n              \"docker_cmd\": \"/app/plugins/bin/plugin-spider-assistant\",\n              \"docker_dir\": \"/app/plugins/plugin-spider-assistant\",\n              \"event_key\": {\n                \"include\": \"^model:\",\n                \"exclude\": \"artifact\"\n              },\n              \"install_type\": \"public\",\n              \"install_url\": \"/app/plugins/plugin-spider-assistant\",\n              \"install_cmd\": \"\",\n              \"deploy_mode\": \"master\",\n              \"auto_start\": true,\n              \"ui_components\": [\n                {\n                  \"name\": \"assistant\",\n                  \"title\": \"assistant.detail.tabs.title\",\n                  \"src\": \"ui/src/AssistantDetail.vue\",\n                  \"type\": \"tab\",\n                  \"path\": \"assistant\",\n                  \"parent_paths\": [\n                    \"/spiders/:id\"\n                  ]\n                }\n              ],\n              \"ui_sidebar_navs\": [ ],\n              \"ui_assets\": [ ],\n              \"lang_url\": \"ui/lang\",\n              \"status\": null\n            },\n            {\n              \"_id\": \"62a88b04112099e6932808aa\",\n              \"name\": \"notification\",\n              \"short_name\": \"plugin-notification\",\n              \"full_name\": \"crawlab-team/plugin-notification\",\n              \"description\": \"A plugin for handling notifications\",\n              \"proto\": \"http\",\n              \"active\": false,\n              \"endpoint\": \"localhost:39999\",\n              \"cmd\": \"sh ./bin/start.sh\",\n              \"docker_cmd\": \"/app/plugins/bin/plugin-notification\",\n              \"docker_dir\": \"/app/plugins/plugin-notification\",\n              \"event_key\": {\n                \"include\": \"^model:\",\n                \"exclude\": \"artifact\"\n              },\n              \"install_type\": \"public\",\n              \"install_url\": \"/app/plugins/plugin-notification\",\n              \"install_cmd\": \"\",\n              \"deploy_mode\": \"master_only\",\n              \"auto_start\": true,\n              \"ui_components\": [\n                {\n                  \"name\": \"notification-list\",\n                  \"title\": \"Notifications\",\n                  \"src\": \"ui/src/NotificationList.vue\",\n                  \"type\": \"view\",\n                  \"path\": \"notifications\",\n                  \"parent_paths\": null\n                },\n                {\n                  \"name\": \"notification-detail\",\n                  \"title\": \"Notifications\",\n                  \"src\": \"ui/src/NotificationDetail.vue\",\n                  \"type\": \"view\",\n                  \"path\": \"notifications/:id\",\n                  \"parent_paths\": null\n                }\n              ],\n              \"ui_sidebar_navs\": [\n                {\n                  \"path\": \"/notifications\",\n                  \"title\": \"plugins.notification.ui_sidebar_navs.title.notifications\",\n                  \"icon\": [\n                    \"fa\",\n                    \"envelope\"\n                  ]\n                }\n              ],\n              \"ui_assets\": [\n                {\n                  \"path\": \"ui/public/simplemde/simplemde.js\",\n                  \"type\": \"js\"\n                },\n                {\n                  \"path\": \"ui/public/simplemde/simplemde.css\",\n                  \"type\": \"css\"\n                },\n                {\n                  \"path\": \"ui/public/css/style.css\",\n                  \"type\": \"css\"\n                }\n              ],\n              \"lang_url\": \"ui/lang\",\n              \"status\": null\n            },\n            {\n              \"_id\": \"62c390ab5853635d26cf76c7\",\n              \"name\": \"dependency\",\n              \"short_name\": \"plugin-dependency\",\n              \"full_name\": \"crawlab-team/plugin-dependency\",\n              \"description\": \"A plugin for managing dependencies\",\n              \"proto\": \"http\",\n              \"active\": false,\n              \"endpoint\": \"localhost:9998\",\n              \"cmd\": \"sh ./bin/start.sh\",\n              \"docker_cmd\": \"/app/plugins/bin/plugin-dependency\",\n              \"docker_dir\": \"/app/plugins/plugin-dependency\",\n              \"event_key\": {\n                \"include\": \"^model:\",\n                \"exclude\": \"artifact\"\n              },\n              \"install_type\": \"public\",\n              \"install_url\": \"/app/plugins/plugin-dependency\",\n              \"install_cmd\": \"\",\n              \"deploy_mode\": \"all\",\n              \"auto_start\": true,\n              \"ui_components\": [\n                {\n                  \"name\": \"dependency-settings\",\n                  \"title\": \"Dependencies Settings\",\n                  \"src\": \"ui/src/setting/DependencySettings.vue\",\n                  \"type\": \"view\",\n                  \"path\": \"dependencies/settings\",\n                  \"parent_paths\": null\n                },\n                {\n                  \"name\": \"dependency-python\",\n                  \"title\": \"Dependencies Python\",\n                  \"src\": \"ui/src/python/DependencyPython.vue\",\n                  \"type\": \"view\",\n                  \"path\": \"dependencies/python\",\n                  \"parent_paths\": null\n                },\n                {\n                  \"name\": \"dependency-node\",\n                  \"title\": \"Dependencies Node\",\n                  \"src\": \"ui/src/node/DependencyNode.vue\",\n                  \"type\": \"view\",\n                  \"path\": \"dependencies/node\",\n                  \"parent_paths\": null\n                },\n                {\n                  \"name\": \"dependencies\",\n                  \"title\": \"ui_components.title.dependencies\",\n                  \"src\": \"ui/src/spider/DependencySpiderTab.vue\",\n                  \"type\": \"tab\",\n                  \"path\": \"dependencies\",\n                  \"parent_paths\": [\n                    \"/spiders/:id\"\n                  ]\n                }\n              ],\n              \"ui_sidebar_navs\": [\n                {\n                  \"path\": \"/dependencies\",\n                  \"title\": \"plugins.dependency.ui_sidebar_navs.title.dependencies\",\n                  \"icon\": [\n                    \"fa\",\n                    \"puzzle-piece\"\n                  ],\n                  \"children\": [\n                    {\n                      \"path\": \"/dependencies/python\",\n                      \"title\": \"plugins.dependency.ui_sidebar_navs.title.python\",\n                      \"icon\": [\n                        \"fab\",\n                        \"python\"\n                      ]\n                    },\n                    {\n                      \"path\": \"/dependencies/node\",\n                      \"title\": \"plugins.dependency.ui_sidebar_navs.title.node\",\n                      \"icon\": [\n                        \"fab\",\n                        \"node-js\"\n                      ]\n                    },\n                    {\n                      \"path\": \"/dependencies/settings\",\n                      \"title\": \"plugins.dependency.ui_sidebar_navs.title.settings\",\n                      \"icon\": [\n                        \"fa\",\n                        \"cog\"\n                      ]\n                    }\n                  ]\n                }\n              ],\n              \"ui_assets\": [ ],\n              \"lang_url\": \"ui/lang\",\n              \"status\": null\n            }\n          ],\n          \"error\": \"\"\n        }\n    GetPluginResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n              $ref: '#/components/schemas/Plugin'\n    GetPublicPluginsResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/PublicPlugin'\n    GetPublicPluginsInfoResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Response'\n        - properties:\n            data:\n            type: array\n            items:\n              type: object\n\n    # models\n    Model:\n      description: Base model\n      type: object\n      properties:\n        _id:\n          type: string\n          description: ID of the model (MongoDB ObjectID)\n    ModelWithNameDescription:\n      allOf:\n        - $ref: '#/components/schemas/Model'\n        - properties:\n            name:\n              type: string\n              description: Name of the model\n            description:\n              type: string\n              description: Description of the model\n    ModelWithKey:\n      allOf:\n        - $ref: '#/components/schemas/Model'\n        - properties:\n            key:\n              type: string\n              description: Key of the model\n    Node:\n      description: Node model\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ModelWithKey'\n        - $ref: '#/components/schemas/ModelWithNameDescription'\n        - properties:\n            ip:\n              description: Node IP\n              type: string\n            port:\n              description: Node port\n              type: string\n            mac:\n              description: Node MAC\n              type: string\n            hostname:\n              description: Node hostname\n              type: string\n            is_master:\n              description: Whether the node is master\n              type: boolean\n            status:\n              description: Node current status\n              type: string\n              enum:\n                - online\n                - offline\n            enabled:\n              description: Node enabled\n              type: boolean\n            active:\n              description: Node active\n              type: boolean\n            active_ts:\n              description: Node active timestamp\n              type: string\n              format: date-time\n            available_runners:\n              description: Available number of available runners of the node\n              type: integer\n            max_runners:\n              description: Max number of runners of the node\n              type: integer\n    Project:\n      description: Project model\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ModelWithNameDescription'\n        - properties:\n            spiders:\n              description: Spiders of the project\n              type: integer\n    TaskStat:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Model'\n        - properties:\n            create_ts:\n              type: string\n              format: date-time\n            start_ts:\n              type: string\n              format: date-time\n            end_ts:\n              type: string\n              format: date-time\n            wait_duration:\n              type: integer\n            runtime_duration:\n              type: integer\n            total_duration:\n              type: integer\n            result_count:\n              type: integer\n            error_log_count:\n              type: integer\n    Task:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Model'\n        - properties:\n            spider_id:\n              type: string\n            status:\n              type: string\n            node_id:\n              type: string\n            cmd:\n              type: string\n            param:\n              type: string\n            error:\n              type: string\n            pid:\n              description: Process ID\n              type: integer\n            schedule_id:\n              type: string\n            type:\n              type: string\n            mode:\n              $ref: '#/components/schemas/TaskMode'\n            node_ids:\n              type: array\n              items:\n                type: string\n            parent_id:\n              type: string\n            priority:\n              type: integer\n            stat:\n              $ref: '#/components/schemas/TaskStat'\n            has_sub:\n              type: boolean\n            sub_tasks:\n              type: array\n              items:\n                $ref: '#/components/schemas/Task'\n            user_id:\n              type: string\n    TaskMode:\n      type: string\n      enum:\n        - random\n        - all-nodes\n        - selected-nodes\n    SpiderStat:\n      description: Spider stat\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Model'\n        - properties:\n            type:\n              description: Last task ID\n              type: string\n            task:\n              description: Last task\n              $ref: '#/components/schemas/Task'\n    Spider:\n      description: Spider model\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ModelWithNameDescription'\n        - properties:\n            type:\n              description: Spider type\n              type: string\n            col_id:\n              description: Spider collection ID\n              type: string\n            col_name:\n              description: Spider collection name\n              type: string\n            data_source_id:\n              description: Spider data source id\n              type: string\n            data_source_name:\n              description: Spider data source name\n              type: string\n            project_id:\n              description: Spider project id\n              type: string\n            mode:\n              description: Spider task mode\n              $ref: '#/components/schemas/TaskMode'\n            node_ids:\n              description: Spider task selected node IDs\n              type: array\n              items:\n                type: string\n            stat:\n              description: Spider stat\n              $ref: '#/components/schemas/SpiderStat'\n    SpiderFile:\n      description: Spider file model\n      type: object\n      properties:\n        name:\n          description: File name\n          type: string\n        path:\n          description: File path\n          type: string\n        full_path:\n          description: Full file path\n          type: string\n        extension:\n          description: File extension\n          type: string\n        md5:\n          description: File MD5 hash\n          type: string\n        is_dir:\n          description: Whether the file is directory\n          type: string\n        fileSize:\n          description: File size\n          type: integer\n        children:\n          description: Children files\n          type: array\n          items:\n            $ref: '#/components/schemas/SpiderFile'\n    GitFileStatus:\n      description: Git file status\n      type: object\n      properties:\n        path:\n          description: File path\n          type: string\n        name:\n          description: File name\n          type: string\n        is_dir:\n          description: Whether the file is directory\n          type: boolean\n        staging:\n          description: Staging\n          type: string\n        worktree:\n          description: Worktree\n          type: string\n        extra:\n          description: Extra\n          type: string\n        children:\n          description: Children files\n          type: array\n          items:\n            $ref: '#/components/schemas/GitFileStatus'\n    GitRef:\n      description: Git ref\n      type: object\n      properties:\n        type:\n          description: Ref type\n          type: string\n        name:\n          description: Ref name\n          type: string\n        full_name:\n          description: Ref full name\n          type: string\n        hash:\n          description: Ref hash\n          type: string\n        timestamp:\n          description: Ref timestamp\n          type: string\n          format: date-time\n    GitLog:\n      description: Git log\n      type: object\n      properties:\n        hash:\n          description: Commit hash\n          type: string\n        msg:\n          description: Commit message\n          type: string\n        author_name:\n          description: Author name\n          type: string\n        author_email:\n          description: Author email\n          type: string\n        timestamp:\n          description: Commit timestamp\n          type: string\n          format: date-time\n        refs:\n          description: Commit refs\n          type: array\n          items:\n            $ref: '#/components/schemas/GitRef'\n    Git:\n      description: Git model\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ModelWithKey'\n        - properties:\n          url:\n            description: Git url\n            type: string\n          branch:\n            description: Git branch\n            type: string\n          changes:\n            description: Git changes\n            type: array\n            items:\n              $ref: '#/components/schemas/GitFileStatus'\n          logs:\n            description: Git logs\n            type: array\n            items:\n              $ref: '#/components/schemas/GitLog'\n          ignore:\n            description: Git ignore files\n            type: array\n            items:\n              type: string\n          git:\n            description: Git url\n            type: string\n    GitPayload:\n      description: Git payload\n      type: object\n      properties:\n        paths:\n          description: Git paths\n          type: array\n          items:\n            type: string\n        commit_message:\n          description: Commit message\n          type: string\n        branch:\n          description: Branch\n          type: string\n        tag:\n          description: Tag\n          type: string\n    DataSource:\n      description: Data source model\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ModelWithKey'\n        - properties:\n            name:\n              description: Data source name\n              type: string\n            description:\n              description: Data source description\n              type: string\n            type:\n              description: Data source type\n              type: string\n            host:\n              description: Data source host\n              type: string\n            port:\n              description: Data source port\n              type: string\n            url:\n              description: Data source url\n              type: string\n            hosts:\n              description: Data source hosts\n              type: array\n              items:\n                type: string\n            database:\n              description: Data source database\n              type: string\n            username:\n              description: Data source username\n              type: string\n            password:\n              description: Data source password\n              type: string\n            enabled:\n              description: Data source enabled\n              type: boolean\n            connect_type:\n              description: Data source connect type\n              type: string\n            status:\n              description: Data source status\n              type: string\n            error:\n              description: Data source error\n              type: string\n            extra:\n              description: Data source extra\n              type: object\n    Schedule:\n      description: Schedule model\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ModelWithKey'\n        - properties:\n            spider_id:\n              description: Schedule spider ID\n              type: string\n            cron:\n              description: Schedule cron\n              type: string\n              example: \"* * * * *\"\n            entry_id:\n              description: Schedule entry ID\n              type: string\n              example: 1\n            cmd:\n              description: Schedule execute command\n              type: string\n              example: scrapy crawl spider\n            param:\n              description: Schedule execute command param\n              type: string\n              example: -a param1=value1 -a param2=value2\n            mode:\n              description: Schedule task mode\n              type: string\n              example: random\n            node_ids:\n            enabled:\n              description: Schedule enabled\n              type: boolean\n              example: true\n            user_id:\n              description: Schedule user ID\n              type: string\n    User:\n      description: User model\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Model'\n        - properties:\n          username:\n            description: User username\n            type: string\n          email:\n            description: User email\n            type: string\n          role:\n            description: User role\n            type: string\n    Token:\n      description: Token model\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Model'\n        - properties:\n            name:\n              description: Token name\n              type: string\n            token:\n              description: Token\n              type: string\n    Plugin:\n      description: Plugin model\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ModelWithNameDescription'\n        - properties:\n            short_name:\n              description: Plugin short name\n              type: string\n            full_name:\n              description: Plugin full name\n              type: string\n            proto:\n              description: Plugin protocol\n              type: string\n            active:\n              description: Plugin active\n              type: boolean\n            endpoint:\n              description: Plugin endpoint\n              type: string\n            cmd:\n              description: Plugin cmd\n              type: string\n            docker_cmd:\n              description: Plugin docker cmd\n              type: string\n            docker_dir:\n              description: Plugin docker directory\n              type: string\n            event_key:\n              description: Plugin event key\n              $ref: '#/components/schemas/PluginEventKey'\n            install_type:\n              description: Plugin install type\n              type: string\n            install_url:\n              description: Plugin install url\n              type: string\n            install_cmd:\n              description: Plugin install cmd\n              type: string\n            deploy_mode:\n              description: Plugin deploy mode\n              type: string\n            auto_start:\n              description: Plugin auto start\n              type: boolean\n            ui_components:\n              description: Plugin ui components\n              type: array\n              items:\n                $ref: '#/components/schemas/PluginUIComponent'\n            ui_sidebar_navs:\n              description: Plugin ui sidebar navs\n              type: array\n              items:\n                $ref: '#/components/schemas/PluginUINav'\n            ui_assets:\n              description: Plugin ui assets\n              type: array\n              items:\n                $ref: '#/components/schemas/PluginUIAsset'\n            lang_url:\n              description: Plugin language url\n              type: string\n            status:\n              description: Plugin status\n              $ref: '#/components/schemas/PluginStatus'\n    PluginEventKey:\n      description: Plugin event key model\n      type: object\n      properties:\n        include:\n          description: Plugin included event key\n          type: array\n          items:\n            type: string\n        exclude:\n          description: Plugin excluded event key\n          type: array\n          items:\n            type: string\n    PluginUIComponent:\n      description: Plugin ui component model\n      type: object\n      properties:\n        name:\n          description: Plugin ui component name\n          type: string\n        title:\n          description: Plugin ui component title\n          type: string\n        src:\n          description: Plugin ui component src\n          type: string\n        type:\n          description: Plugin ui component type\n          type: string\n        path:\n          description: Plugin ui component path\n          type: string\n        parent_paths:\n          description: Plugin ui component parent paths\n          type: array\n          items:\n            type: string\n    PluginUINav:\n      description: Plugin ui nav model\n      type: object\n      properties:\n        path:\n          description: Plugin ui nav path\n          type: string\n        title:\n          description: Plugin ui nav title\n          type: string\n        icon:\n          description: Plugin ui nav icon\n          type: array\n          items:\n            type: string\n        children:\n          description: Plugin ui nav children\n          type: array\n          items:\n            $ref: '#/components/schemas/PluginUINav'\n    PluginUIAsset:\n      description: Plugin ui asset model\n      type: object\n      properties:\n        path:\n          description: Plugin ui asset path\n          type: string\n        type:\n          description: Plugin ui asset type\n          type: string\n    PluginStatus:\n      description: Plugin status model\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Model'\n        - properties:\n            plugin_id:\n              description: Plugin ID\n              type: string\n            node_id:\n              description: Node ID\n              type: string\n            status:\n              description: Plugin status\n              type: string\n            pid:\n              description: Plugin process ID\n              type: integer\n            error:\n              description: Plugin error\n              type: string\n            node:\n              description: Node model\n              $ref: '#/components/schemas/Node'\n    PublicPlugin:\n      description: Public plugin model\n      type: object\n      properties:\n        id:\n          description: Public plugin ID\n          type: string\n        name:\n          description: Public plugin name\n          type: string\n        full_name:\n          description: Public plugin full name\n          type: string\n        description:\n          description: Public plugin description\n          type: string\n        html_url:\n          description: Public plugin html url\n          type: string\n        pushed_at:\n          description: Public plugin pushed at\n          type: string\n        created_at:\n          description: Public plugin created at\n          type: string\n        updated_at:\n          description: Public plugin updated at\n          type: string\n\n  securitySchemes:\n    apiToken:\n      type: apiKey\n      in: header\n      name: Authorization\n      description: API Token\n      x-displayName: API Token\n",
			"canonicalURL": "/github.com/crawlab-team/crawlab-core@6925d9af1673720977b1aad70e6eaa51b69bd4c9/-/blob/docs/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/crawlab-team/crawlab-core/blob/6925d9af1673720977b1aad70e6eaa51b69bd4c9/docs/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: line 1: cannot unmarshal !!null into *ogen.Properties"
}