{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SPbSTU-OPD-Palihindron-team/Open-space-map-constructor-FrontEnd"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "documents/reference/api.yaml",
			"byteSize": 29541,
			"content": "openapi: 3.0.3\ninfo:\n  title: map_rest_api\n  version: '1.0'\n  description: Open space map REST API documentation in Open API format.\n  license:\n    name: MIT\n  contact:\n    name: Evgenii Sudakov\n    email: yevgeniysudakov@gmail.com\nservers:\n  - url: 'http://localhost:3000'\npaths:\n  /employees:\n    get:\n      summary: Your GET endpoint\n      tags:\n        - employee\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  employees:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Employee'\n        '400':\n          description: Bad Request\n      operationId: get-employees\n      description: Returns all emploees in the openspace-map system.\n      security:\n        - apiKey: []\n  /employee:\n    parameters: []\n    post:\n      summary: POST endpoint\n      operationId: post-employee\n      responses:\n        '201':\n          description: Created\n        '203':\n          description: Non-Authoritative Information\n        '400':\n          description: Bad Request\n      description: |\n        Registration of new user in open-space-map service.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: ''\n              type: object\n              x-examples:\n                example-1:\n                  email: string\n                  password: string\n              properties:\n                employee:\n                  $ref: '#/components/schemas/Employee-entity'\n        description: 'Post query with fields: name, surname, email, password to add employee in table Registrated Users. Name, surname, email for validation employee with his data in Employees table, if he is worker, can be add to registrated users in open-space-map service.'\n      tags:\n        - employee\n      security:\n        - apiKey: []\n  '/employee/{employee_id}':\n    get:\n      summary: GET endpoint\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  employee:\n                    $ref: '#/components/schemas/Employee'\n        '400':\n          description: Bad Request\n      operationId: get-search-employee\n      description: |-\n        Query for getting full information of the user. It needs when employee wants to know more information about some user. \n        Returns personal information about user.\n      tags:\n        - employee\n      security:\n        - apiKey: []\n    parameters:\n      - schema:\n          type: integer\n        name: employee_id\n        in: path\n        required: true\n        description: id of employee\n    post:\n      summary: POST endpoint\n      operationId: post-employee-employee_id\n      responses:\n        '200':\n          description: OK\n      tags:\n        - employee\n      description: Query for changing fields of employee.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                employee:\n                  $ref: '#/components/schemas/Employee'\n        description: ''\n  /buildings:\n    get:\n      summary: GET endpoint\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  buildings:\n                    type: array\n                    description: |\n                      list of addreses buildings\n                    items:\n                      $ref: '#/components/schemas/Building'\n            application/xml:\n              schema:\n                type: object\n                properties: {}\n            multipart/form-data:\n              schema:\n                type: object\n                properties: {}\n        '400':\n          description: Bad Request\n      operationId: get-builds\n      description: Returning list of registered in system buildings.\n      tags:\n        - building\n      security:\n        - apiKey: []\n    parameters: []\n  '/building/{building_id}/floors':\n    get:\n      summary: GET endpoint\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                description: ''\n                type: object\n                x-examples:\n                  example-1:\n                    floors: 'array[integer]'\n                properties:\n                  floors:\n                    type: array\n                    uniqueItems: true\n                    description: |\n                      list of number of floors\n                    items:\n                      $ref: '#/components/schemas/Floor'\n                    readOnly: true\n            application/xml:\n              schema:\n                type: object\n                properties: {}\n            multipart/form-data:\n              schema:\n                type: object\n                properties: {}\n        '400':\n          description: Bad Request\n      operationId: get-building-floors-list\n      description: |-\n        GET query to show floors of the chosen buiding. \n        It needs for choosing floor from list for special building.\n      tags:\n        - building\n      parameters: []\n      security:\n        - apiKey: []\n    parameters:\n      - schema:\n          type: integer\n        name: building_id\n        in: path\n        description: id of the building\n        required: true\n  '/building/{building_id}/floor':\n    post:\n      summary: POST endpoint\n      operationId: post-building-add\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                floor:\n                  type: integer\n                  description: number of new floor\n      description: 'Query for adding new floor in building for admin, when creating map.'\n      tags:\n        - floor\n      security:\n        - apiKey: []\n    parameters:\n      - schema:\n          type: integer\n        name: building_id\n        in: path\n        required: true\n        description: id of the building\n  /building:\n    parameters: []\n    post:\n      summary: POST endpoint.\n      operationId: post-building\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                address:\n                  $ref: '#/components/schemas/Building-entity'\n          application/xml:\n            schema:\n              type: object\n              properties: {}\n        description: ''\n      description: 'request to add the building for admin, when creating map'\n      tags:\n        - building\n      security:\n        - apiKey: []\n  '/floor/{floor_id}/zones':\n    get:\n      summary: GET endpoint\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  zones:\n                    type: array\n                    description: list of zones in definite floor and building\n                    items:\n                      $ref: ''\n        '400':\n          description: Bad Request\n      operationId: get-building-floor-zones\n      description: Returns information of zones located on the chosen floor.\n      tags:\n        - zone\n      security:\n        - apiKey: []\n    parameters:\n      - schema:\n          type: integer\n        name: floor_id\n        in: path\n        required: true\n        description: id of the floor\n  '/floor/{floor_id}/walls':\n    parameters:\n      - schema:\n          type: integer\n        name: floor_id\n        in: path\n        required: true\n        description: id of the floor\n    get:\n      summary: GET endpoint\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  walls:\n                    type: array\n                    description: list of walls in defenition floor and building\n                    items:\n                      $ref: '#/components/schemas/Wall'\n          headers: {}\n        '400':\n          description: Bad Request\n      operationId: get-building-floor_number-walls\n      description: Returns walls appropriate to the floor of the building. It shows at map.\n      tags:\n        - wall\n      security:\n        - apiKey: []\n  '/floor/{floor_id}':\n    parameters:\n      - schema:\n          type: integer\n        name: floor_id\n        in: path\n        required: true\n        description: id of the floor\n    delete:\n      summary: DELETE endpoint.\n      operationId: delete-floor-building_id-delete\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n      description: 'Query for deleting floor according to the building by id for admin, it shows at map.'\n      tags:\n        - floor\n      security:\n        - apiKey: []\n  /item_types:\n    get:\n      summary: Your GET endpoint\n      tags:\n        - item\n      responses:\n        '200':\n          description: OK\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  itemTypes:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ItemType'\n        '400':\n          description: Bad Request\n      operationId: get-item_types\n      security:\n        - apiKey: []\n      description: Returns all availible items to place on map.\n  '/item/{item_id}':\n    parameters:\n      - schema:\n          type: integer\n        name: item_id\n        in: path\n        required: true\n        description: id of the item\n    get:\n      summary: GET endpoint\n      tags:\n        - item\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: list of possible items in basa\n                properties:\n                  item:\n                    $ref: '#/components/schemas/WorkspaceItem'\n                  ItemType:\n                    type: string\n                required:\n                  - item\n                  - ItemType\n        '400':\n          description: Bad Request\n      operationId: get-items-item_id\n      description: Returns item by its id.\n      security:\n        - apiKey: []\n    delete:\n      summary: DELETE endpoint\n      operationId: delete-items-item_id\n      responses:\n        '200':\n          description: OK\n      description: 'Query for deleting an item for admin, it shows at map.'\n      tags:\n        - item\n      security:\n        - apiKey: []\n  /items:\n    get:\n      summary: GET endpoint.\n      operationId: get-items\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Item'\n      description: Get list of all Items\n      security:\n        - apiKey: [ ]\n    post:\n      summary: POST endpoint.\n      operationId: post-items-save\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n      description: Saving buffered items after editing finish.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                itemList:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/Item'\n        description: ''\n      tags:\n        - item\n      security:\n        - apiKey: []\n    parameters: []\n  '/schedule/zone/{zone_id}/employees':\n    get:\n      summary: GET endpoint\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: list of empolyees in definition zone\n                properties:\n                  empoyees:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Employee'\n        '400':\n          description: Bad Request\n      operationId: get-zones-employees-check\n      description: 'Query for getting list of employees according to the zone by its id at the current time. '\n      tags:\n        - zone\n      security:\n        - apiKey: []\n    parameters:\n      - schema:\n          type: integer\n        name: zone_id\n        in: path\n        required: true\n        description: id of the zone\n  '/wall/{wall_id}':\n    put:\n      summary: PUT endpoint\n      operationId: put-walls-wall_id-edit\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n      description: Edit walls for admin.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: list of possible walls in basa\n              properties:\n                wall:\n                  $ref: '#/components/schemas/Wall'\n        description: Edited information.\n      tags:\n        - wall\n      security:\n        - apiKey: []\n    parameters:\n      - schema:\n          type: integer\n        name: wall_id\n        in: path\n        required: true\n        description: id of the wall\n    delete:\n      summary: DELETE endpoint\n      operationId: delete-wall-wall_id\n      responses:\n        '200':\n          description: OK\n      description: 'Query for deleting a wall for admin, it shows at map.'\n      tags:\n        - wall\n      security:\n        - apiKey: []\n  /walls:\n    post:\n      summary: POST endpoint\n      operationId: post-walls-save\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Zone'\n        '400':\n          description: Bad Request\n      description: Save walls.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                wallsList:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/Wall-entity'\n      tags:\n        - wall\n      security:\n        - apiKey: []\n    parameters: []\n  '/zone/{zone_id}/items':\n    parameters:\n      - schema:\n          type: integer\n        name: zone_id\n        in: path\n        required: true\n        description: id of the zone\n    get:\n      summary: GET endpoint\n      tags:\n        - zone\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: list of item in definition zone\n                properties:\n                  itemList:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        item:\n                          $ref: '#/components/schemas/Item'\n        '400':\n          description: Bad Request\n      operationId: get-zone-zone_id-items\n      description: Returns items in zone.\n      security:\n        - apiKey: []\n  /zones:\n    post:\n      summary: POST endpoint.\n      operationId: post-zones-save\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n      description: Save zones.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                zoneList:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/Zone'\n        description: ''\n      tags:\n        - zone\n      security:\n        - apiKey: []\n    parameters: []\n  '/map/item_search/{itemName}':\n    parameters:\n      - schema:\n          type: string\n        name: itemName\n        in: path\n        required: true\n        description: name of the item\n    get:\n      summary: GET endpoint\n      tags:\n        - item\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: list of items in definition floor and zone\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Item'\n        '400':\n          description: Bad Request\n      operationId: get-items-itemType\n      description: Query for getting items by its names with number of zone. It needs to everyone can see list of item in zone.\n      security:\n        - apiKey: []\n  '/registered_user/is_admin/{user_id}':\n    get:\n      summary: GET endpoint\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  privelege:\n                    type: boolean\n                    description: 'admin - 1, user - 0'\n            application/xml:\n              schema:\n                type: object\n                properties: {}\n        '400':\n          description: Bad Request\n      operationId: get-user\n      tags:\n        - user\n      description: Request which check status of person (admin or not)\n      security:\n        - apiKey: []\n    parameters:\n      - schema:\n          type: integer\n        name: user_id\n        in: path\n        description: id of the user\n        required: true\n    put:\n      summary: PUT endpoint\n      operationId: put-registrated_user-user_id\n      responses:\n        '200':\n          description: OK\n      description: 'Query for editing employee''s information. User can change only password. '\n      tags:\n        - user\n      security:\n        - apiKey: []\n  '/map/employee_placement/{employee_id}':\n    get:\n      summary: ''\n      operationId: get-map-employee_placement-employee_id\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  item:\n                    $ref: '#/components/schemas/WorkspaceItem'\n                  building:\n                    $ref: '#/components/schemas/Building'\n                  floor:\n                    $ref: '#/components/schemas/Floor'\n      description: Searching employee placement.\n      tags:\n        - employee\n    parameters:\n      - schema:\n          type: number\n        name: employee_id\n        in: path\n        required: true\n        description: id of employee\n  /workspace:\n    post:\n      summary: ''\n      operationId: post-workspace\n      responses:\n        '200':\n          description: OK\n      description: Adding new workspace item.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                WorkspaceItem:\n                  $ref: '#/components/schemas/Item-entity'\n      tags:\n        - item\ncomponents:\n  schemas:\n    Zone:\n      title: Zone\n      type: object\n      properties:\n        zone_id:\n          type: integer\n        building_id:\n          type: integer\n        floor_id:\n          type: integer\n        form:\n          type: array\n          items:\n            type: object\n            properties:\n              point:\n                type: object\n                required:\n                  - x\n                  - 'y'\n                properties:\n                  x:\n                    type: integer\n                  'y':\n                    type: integer\n            required:\n              - point\n        numberZone:\n          type: integer\n          description: Number of cabinet if it is.\n        type:\n          type: string\n          description: 'Enum of zone type: CABINET or OPEN_AREA '\n        description:\n          type: string\n      required:\n        - zone_id\n        - building_id\n        - floor_id\n        - form\n    Employee:\n      title: Employee\n      type: object\n      properties:\n        employee_id:\n          type: integer\n        name:\n          type: string\n        surname:\n          type: string\n        patronymic:\n          type: string\n        email:\n          type: string\n          format: email\n        telephone:\n          type: string\n        specialization:\n          type: string\n      required:\n        - employee_id\n        - name\n        - surname\n        - email\n    Employee-entity:\n      title: Employee\n      type: object\n      properties:\n        name:\n          type: string\n        surname:\n          type: string\n        patronymic:\n          type: string\n        email:\n          type: string\n          format: email\n        telephone:\n          type: string\n        specialization:\n          type: string\n      required:\n        - name\n        - surname\n        - email\n    Schedule:\n      title: Schedule\n      type: object\n      properties:\n        sesion_id:\n          type: integer\n        employee_id:\n          type: array\n          items:\n            type: integer\n        zone_id:\n          type: integer\n        startTime:\n          format: date-time\n          type: string\n        endTime:\n          type: string\n          format: duration\n        description:\n          type: string\n          description: Admins addictional information for users.\n      required:\n        - sesion_id\n        - employee_id\n        - zone_id\n    Building:\n      title: Building\n      type: object\n      x-examples:\n        - pk_building_id: 0\n          address: string\n          numberFloors: string\n      properties:\n        building_id:\n          type: integer\n        address:\n          type: string\n        numberFloors:\n          type: integer\n          description: Maximum floor number in the building.\n      required:\n        - building_id\n        - address\n        - numberFloors\n    Building-entity:\n      title: Building\n      type: object\n      x-examples:\n        - pk_building_id: 0\n          address: string\n          numberFloors: string\n      properties:\n        address:\n          type: string\n        numberFloors:\n          type: integer\n          description: Maximum floor number in the building.\n      required:\n        - address\n        - numberFloors\n    Wall:\n      title: Wall\n      type: object\n      properties:\n        wall_id:\n          type: integer\n        floor_id:\n          type: integer\n        color:\n          type: string\n        form:\n          type: array\n          items:\n            type: object\n            properties:\n              point:\n                type: object\n                properties:\n                  x:\n                    type: integer\n                  y:\n                    type: integer\n                required:\n                  - x\n                  - y\n            required:\n              - point\n        wallType:\n          type: string\n      required:\n        - wall_id\n        - floor_id\n        - form\n    Wall-entity:\n      title: Wall\n      type: object\n      properties:\n        floor_id:\n          type: integer\n        color:\n          type: string\n        form:\n          type: array\n          items:\n            type: object\n            properties:\n              x:\n                type: number\n              'y':\n                type: number\n        wallType:\n          type: string\n      required:\n        - floor_id\n        - form\n    Item:\n      title: Item\n      type: object\n      x-examples:\n        - pk_item_id: 0\n          fk_zone_id: 0\n          fk_itemType_id: 0\n          point:\n            x1: 0\n            y1: 0\n            x2: 0\n            y2: 0\n          angle: 0\n      description: ''\n      properties:\n        item_id:\n          type: integer\n        floor_id:\n          type: integer\n        point:\n          type: object\n          required:\n            - x\n            - 'y'\n          properties:\n            x:\n              type: integer\n            'y':\n              type: integer\n        angle:\n          type: number\n          format: float\n        scale:\n          type: number\n          format: float\n        itemType:\n          $ref: '#/components/schemas/ItemType'\n      required:\n        - item_id\n        - floor_id\n        - point\n        - angle\n        - scale\n        - itemType\n    Item-entity:\n      title: Item-entity\n      type: object\n      x-examples:\n        - pk_item_id: 0\n          fk_zone_id: 0\n          fk_itemType_id: 0\n          point:\n            x1: 0\n            y1: 0\n            x2: 0\n            y2: 0\n          angle: 0\n      description: ''\n      properties:\n        zone_id:\n          type: integer\n        itemType_id:\n          type: integer\n        point:\n          type: object\n          required:\n            - x\n            - 'y'\n          properties:\n            x:\n              type: integer\n            'y':\n              type: integer\n        angle:\n          type: number\n          format: float\n        scale:\n          type: number\n          format: float\n      required:\n        - zone_id\n        - itemType_id\n        - point\n        - angle\n        - scale\n    WorkspaceItem:\n      title: WorkspaceItem\n      type: object\n      x-examples:\n        - pk_item_id: 0\n          fk_zone_id: 0\n          fk_itemType_id: 0\n          point:\n            x1: 0\n            y1: 0\n            x2: 0\n            y2: 0\n          angle: 0\n      description: Item with places for employees.\n      properties:\n        item_id:\n          type: integer\n        floor_id:\n          type: integer\n        point:\n          type: object\n          required:\n            - x\n            - 'y'\n          properties:\n            x:\n              type: integer\n            'y':\n              type: integer\n        angle:\n          type: number\n          format: float\n        scale:\n          type: number\n          format: float\n        itemType:\n          $ref: '#/components/schemas/ItemType'\n        emploeyes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Employee'\n      required:\n        - item_id\n        - floor_id\n        - point\n        - angle\n        - scale\n        - itemType\n    ItemType:\n      title: ItemType\n      type: object\n      description: ''\n      properties:\n        itemType_id:\n          type: integer\n        itemName:\n          type: string\n          description: 'Enum of: - MFP - ATM - VENDING - COFFE_MACHINE - FIRE_HYDRANT - WORKPLACE - CONFERENCE_TABLE - DINING_ROOM_TABLE - CAFE_TABLE - GYM_SPOT - MEETING_ROOM - DOOR - WINDOW - LED_PANEL'\n        valuablePlacement:\n          type: string\n          description: 'Enum of: - ON_FLOOR - ON_ITEM - ON_WALL - IN_WALL'\n        polygon:\n          type: object\n          required:\n            - point\n          properties:\n            point:\n              type: object\n              required:\n                - x\n                - 'y'\n              properties:\n                x:\n                  type: integer\n                'y':\n                  type: integer\n        pictureLink:\n          format: uri-reference\n          type: string\n        description:\n          type: string\n      required:\n        - itemType_id\n        - itemName\n        - valuablePlacement\n        - polygon\n    RegisteredUser:\n      title: RegisteredUser\n      type: object\n      description: ''\n      properties:\n        user_id:\n          type: integer\n        login:\n          type: string\n          description: |\n            login is an email of user\n        password:\n          type: string\n          format: password\n        accessebilityType:\n          type: string\n          description: 'Enum of: - ADMIN - USER'\n      required:\n        - user_id\n        - login\n        - password\n    Floor:\n      title: Floor\n      type: object\n      description: ''\n      properties:\n        floor_id:\n          type: integer\n        building_id:\n          type: integer\n        numberFloor:\n          type: integer\n        floorType:\n          type: string\n          description: 'Enum of: - TECHNICAL - OFFICE'\n      required:\n        - floor_id\n        - building_id\n        - numberFloor\n  securitySchemes:\n    apiKey:\n      type: http\n      scheme: bearer\ntags:\n  - name: zone\n    description: Zone is an area bounded by a closed loop\n  - name: employee\n    description: Employee is a person with information about him.\n  - name: building\n    description: Building is an office described by its address.\n  - name: user\n    description: User is an employee that is registrated in open-space-map service\n  - name: item\n    description: Item an is object that is used to describe map.\n  - name: wall\n    description: Wall is a an object that is used to create rooms and zones.\n  - name: floor\n    description: Floor is a field of building that is used to describe location of zones.\n"
		}
	},
	"Error": "unmarshal: json: line 1:86: callback: callback: json: cannot unmarshal bool into Go struct field Schema.required of type string"
}