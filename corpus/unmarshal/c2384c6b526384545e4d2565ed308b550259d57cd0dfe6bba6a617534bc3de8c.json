{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Flagsmith/flagsmith-docs"
		},
		"file": {
			"name": "edge_api.json",
			"size": 0,
			"path": "api_spec/edge_api.json",
			"byteSize": 11737,
			"content": "{\n    \"openapi\": \"3.0.3\",\n    \"info\": { \"title\": \"Edge API\", \"version\": \"1\" },\n    \"servers\": [\n        {\n            \"url\": \"https://edge.api.flagsmith.com/api/v1/\",\n            \"description\": \"Edge API\"\n        }\n    ],\n    \"paths\": {\n        \"/flags\": {\n            \"get\": {\n                \"tags\": [],\n                \"summary\": \"Get flags\",\n                \"description\": \"Retrieve the flags for an environment.\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Flag\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/identities\": {\n            \"get\": {\n                \"tags\": [],\n                \"summary\": \"Get identity flags and traits\",\n                \"description\": \"Retrieve the flags and traits for an identity. Note: identity will be lazily created if it does not already exist.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"identifier\",\n                        \"in\": \"query\",\n                        \"description\": \"Identity Key\",\n                        \"required\": true\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/IdentitiesResponse\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"tags\": [],\n                \"summary\": \"Identify user\",\n                \"description\": \"Identify a user and retrieve their flags and traits in response.\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"example\": {},\n                                \"$ref\": \"#/components/schemas/IdentitiesRequestData\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/IdentitiesResponse\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/bulk-identities\": {\n            \"post\": {\n                \"tags\": [],\n                \"summary\": \"Bulk insert identities (overwrite)\",\n                \"description\": \"Bulk uploading identities and traits. If there is an existing identity, using POST will overwrite the existing identity with the data from the request.\\n\\n\\n:::info INFO\\nIt has a limit of 100 identities per request\\n\\n:::\\n\\n \\n\\n\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"object\",\n                                \"example\": {},\n                                \"$ref\": \"#/components/schemas/BulkIdentitiesData\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"202\": {\n                        \"description\": \"Accepted\"\n                    },\n                    \"400\": {\n                        \"description\": \"Bad Request\",\n                        \"content\": {\n                            \"text/plain\": {\n                                \"schema\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"Number of identities must not be more than 100\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not Found\",\n                        \"content\": {\n                            \"text/plain\": {\n                                \"schema\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"Environment not found\"\n                                }\n                            }\n                        }\n                    },\n                    \"403\": {\n                        \"description\": \"Forbidden\",\n                        \"content\": {\n                            \"text/plain\": {\n                                \"schema\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"Organisation is disabled from serving flags.\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"put\": {\n                \"tags\": [],\n                \"summary\": \"Bulk insert identities (update)\",\n                \"description\": \"Bulk uploading identities and traits. If there is an existing identity, using PUT will update the existing identity with the data from the request.\\n\\n\\n:::info INFO\\nIt has a limit of 100 identities per request\\n\\n:::\\n\\n \\n\\n\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"object\",\n                                \"example\": {},\n                                \"$ref\": \"#/components/schemas/BulkIdentitiesData\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"202\": {\n                        \"description\": \"Accepted\"\n                    },\n                    \"400\": {\n                        \"description\": \"Bad Request\",\n                        \"content\": {\n                            \"text/plain\": {\n                                \"schema\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"Number of identities must not be more than 100\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not Found\",\n                        \"content\": {\n                            \"text/plain\": {\n                                \"schema\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"Environment not found\"\n                                }\n                            }\n                        }\n                    },\n                    \"403\": {\n                        \"description\": \"Forbidden\",\n                        \"content\": {\n                            \"text/plain\": {\n                                \"schema\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"Organisation is disabled from serving flags.\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"securitySchemes\": {\n            \"EnvironmentKeyAuth\": { \"type\": \"apiKey\", \"in\": \"header\", \"name\": \"X-Environment-Key\" }\n        },\n        \"schemas\": {\n            \"Flag\": {\n                \"required\": [],\n                \"type\": \"array\",\n                \"properties\": {\n                    \"feature\": {\n                        \"$ref\": \"#/components/schemas/Feature\"\n                    },\n                    \"feature_state_value\": {\n                        \"oneOf\": [\n                            {\n                                \"type\": \"string\"\n                            },\n                            {\n                                \"type\": \"boolean\"\n                            },\n                            {\n                                \"type\": \"integer\"\n                            },\n                            {\n                                \"type\": \"float\"\n                            }\n                        ],\n                        \"description\": \"Can be any of the following types: string, integer, boolean, float\"\n                    },\n                    \"enabled\": {\n                        \"type\": \"boolean\"\n                    }\n                }\n            },\n            \"Feature\": {\n                \"title\": \"feature\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"integer\",\n                        \"readOnly\": true\n                    },\n                    \"name\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"Trait\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"trait_key\": {\n                        \"type\": \"string\"\n                    },\n                    \"trait_value\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"IdentitiesResponse\": {\n                \"required\": [],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"identifier\": {\n                        \"type\": \"string\"\n                    },\n                    \"flags\": {\n                        \"$ref\": \"#/components/schemas/Flag\"\n                    },\n                    \"traits\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/Trait\"\n                        }\n                    }\n                }\n            },\n            \"IdentitiesRequestData\": {\n                \"required\": true,\n                \"type\": \"object\",\n                \"properties\": {\n                    \"traits\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/Trait\"\n                        }\n                    },\n                    \"identifier\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"BulkIdentitiesData\": {\n                \"required\": true,\n                \"properties\": {\n                    \"data\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/IdentitiesRequestData\"\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"security\": [{ \"EnvironmentKeyAuth\": [] }],\n    \"tags\": []\n}\n",
			"canonicalURL": "/github.com/Flagsmith/flagsmith-docs@a95b7358058a1efd311c806fa73412f955cf0755/-/blob/api_spec/edge_api.json",
			"externalURLs": [
				{
					"url": "https://github.com/Flagsmith/flagsmith-docs/blob/a95b7358058a1efd311c806fa73412f955cf0755/api_spec/edge_api.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 284: cannot unmarshal !!bool `true` into []string; yaml: line 299: cannot unmarshal !!bool `true` into []string"
}