{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/apicurio.local/registry/2.1.0-SNAPSHOT/openapi.yaml",
			"byteSize": 97678,
			"content": "openapi: 3.0.2\nservers:\n  - url: http://apicurio.local\ninfo:\n  contact:\n    email: apicurio@lists.jboss.org\n    name: Apicurio\n    url: https://github.com/apicurio/apicurio-registry\n  description: |\n    Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.\n\n    The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata. \n\n    The supported artifact types include:\n    - Apache Avro schema\n    - AsyncAPI specification\n    - Google protocol buffers\n    - GraphQL schema\n    - JSON Schema\n    - Kafka Connect schema\n    - OpenAPI specification\n    - Web Services Description Language\n    - XML Schema Definition\n\n\n    **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`.\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0\n  title: Apicurio Registry API [v2]\n  version: 2.1.0-SNAPSHOT\n  x-apisguru-categories:\n    - developer_tools\n  x-origin:\n    - format: openapi\n      url: https://raw.githubusercontent.com/Apicurio/apicurio-registry/master/app/src/main/resources-unfiltered/META-INF/resources/api-specifications/registry/v2/openapi.json\n      version: \"3.0\"\n  x-preferred: true\n  x-providerName: apicurio.local\n  x-serviceName: registry\ntags:\n  - description: |-\n      The primary way to interact with the Apicurio Registry API is to add, update, \n      or delete artifacts. This section includes all of these primary operations.\n    name: Artifacts\n  - description: |-\n      Sometimes the metadata for an artifact is important. For example, metadata includes \n      when the artifact was created, last updated, and so on. This section contains \n      operations to access (and in some cases change) an artifact's metadata.\n    name: Metadata\n  - description: |-\n      Whenever an artifact's content is updated, the old versions of the artifact's content\n      are not lost.  All versions can be listed and accessed if necessary.  This section \n      describes the operations used to list and access all versions of an artifact's content\n      and metadata.\n    name: Versions\n  - description: |-\n      Rules can be configured on a per-artifact basis, allowing for different approaches\n      to content evolution for each artifact.  These rules override any global rules\n      that have been configured. This section contains the operations used to manage a\n      single artifact's rules.\n    name: Artifact rules\n  - description: |-\n      Global rules can be configured in the registry to govern how artifact content can \n      evolve over time (as artifact content is **updated**). Global rules are applied \n      whenever an artifact is added to the registry, and also whenever an artifact's \n      content is updated (only if that artifact does not have its own specific rules \n      configured). This section describes the operations used to manage the global rules.\n    name: Global rules\n  - description: \"The search API is used to browse or find artifacts in the registry. This section describes the operations for searching for artifacts and versions. \"\n    name: Search\n  - description: Application functionality that is only accessible to admin users.  Includes logging, global rules, and export/import of registry data.\n    name: Admin\n  - description: System level functionality, including versioning and status information.\n    name: System\n  - description: Some operations related to users.\n    name: Users\npaths:\n  /admin/export:\n    get:\n      description: Exports registry data as a ZIP archive.\n      operationId: exportData\n      responses:\n        \"200\":\n          content:\n            application/zip:\n              schema:\n                $ref: \"#/components/schemas/FileContent\"\n          description: Response when the export is successful.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Export registry data\n      tags:\n        - Admin\n    summary: Provides a way to export registry data.\n  /admin/import:\n    post:\n      description: Imports registry data that was previously exported using the `/admin/export` operation.\n      operationId: importData\n      requestBody:\n        content:\n          application/zip:\n            schema:\n              $ref: \"#/components/schemas/FileContent\"\n        description: The ZIP file representing the previously exported registry data.\n        required: true\n      responses:\n        \"201\":\n          description: Indicates that the import was successful.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Import registry data\n      tags:\n        - Admin\n    summary: Provides a way to import data into the registry.\n  /admin/loggers:\n    get:\n      description: |-\n        List all of the configured logging levels.  These override the default\n        logging configuration.\n      operationId: listLogConfigurations\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/NamedLogConfiguration\"\n                type: array\n          description: The list of logging configurations.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: List logging configurations\n      tags:\n        - Admin\n    summary: Manage logger settings/configurations.\n  \"/admin/loggers/{logger}\":\n    delete:\n      description: Removes the configured logger configuration (if any) for the given logger.\n      operationId: removeLogConfiguration\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NamedLogConfiguration\"\n          description: |-\n            The default logger configuration (now that the configuration for this logger has been removed, the \n            default configuration is applied).\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Removes logger configuration\n      tags:\n        - Admin\n    get:\n      description: Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.\n      operationId: getLogConfiguration\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NamedLogConfiguration\"\n          description: The logger configuration for the named logger.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get a single logger configuration\n      tags:\n        - Admin\n    parameters:\n      - description: The name of a single logger.\n        in: path\n        name: logger\n        required: true\n        schema:\n          type: string\n    put:\n      description: Configures the logger referenced by the provided logger name with the given configuration.\n      operationId: setLogConfiguration\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LogConfiguration\"\n        description: The new logger configuration.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NamedLogConfiguration\"\n          description: The new configuration for the given logger.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Set a logger's configuration\n      tags:\n        - Admin\n    summary: Manage logger settings/configurations.\n  /admin/roleMappings:\n    get:\n      description: |\n        Gets a list of all role mappings configured in the registry (if any).\n\n        This operation can fail for the following reasons:\n\n        * A server error occurred (HTTP error `500`)\n      operationId: listRoleMappings\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleMapping\"\n                type: array\n          description: A successful response will return the list of role mappings.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: List all role mappings\n      tags:\n        - Admin\n    post:\n      description: |+\n        Creates a new mapping between a user/principal and a role.\n\n        This operation can fail for the following reasons:\n\n        * A server error occurred (HTTP error `500`)\n\n      operationId: createRoleMapping\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RoleMapping\"\n        required: true\n      responses:\n        \"204\":\n          description: Returned when the role mapping was successfully created.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Create a new role mapping\n      tags:\n        - Admin\n    summary: Collection to manage role mappings for authenticated principals\n  \"/admin/roleMappings/{principalId}\":\n    delete:\n      description: |\n        Deletes a single role mapping, effectively denying access to a user/principal.\n\n        This operation can fail for the following reasons:\n\n        * No role mapping for the principalId exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteRoleMapping\n      responses:\n        \"204\":\n          description: Response returned when the delete was successful.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Delete a role mapping\n      tags:\n        - Admin\n    get:\n      description: |\n        Gets the details of a single role mapping (by principalId).\n\n        This operation can fail for the following reasons:\n\n        * No role mapping for the principalId exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getRoleMapping\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RoleMapping\"\n          description: When successful, returns the details of a role mapping.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Return a single role mapping\n      tags:\n        - Admin\n    parameters:\n      - description: Unique id of a principal (typically either a user or service account).\n        in: path\n        name: principalId\n        required: true\n        schema:\n          type: string\n    put:\n      description: |\n        Updates a single role mapping for one user/principal.\n\n        This operation can fail for the following reasons:\n\n        * No role mapping for the principalId exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: updateRoleMapping\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateRole\"\n        required: true\n      responses:\n        \"204\":\n          description: Response when the update is successful.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update a role mapping\n      tags:\n        - Admin\n    summary: Manage the configuration of a single role mapping.\n  /admin/rules:\n    delete:\n      description: |\n        Deletes all globally configured rules.\n\n        This operation can fail for the following reasons:\n\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteAllGlobalRules\n      responses:\n        \"204\":\n          description: All global rules have been removed successfully.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Delete all global rules\n      tags:\n        - Global rules\n        - Admin\n    get:\n      description: |\n        Gets a list of all the currently configured global rules (if any).\n\n        This operation can fail for the following reasons:\n\n        * A server error occurred (HTTP error `500`)\n      operationId: listGlobalRules\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RuleType\"\n                type: array\n          description: The list of names of the globally configured rules.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: List global rules\n      tags:\n        - Global rules\n        - Admin\n    post:\n      description: |\n        Adds a rule to the list of globally configured rules.\n\n        This operation can fail for the following reasons:\n\n        * The rule type is unknown (HTTP error `400`)\n        * The rule already exists (HTTP error `409`)\n        * A server error occurred (HTTP error `500`)\n      operationId: createGlobalRule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Rule\"\n        required: true\n      responses:\n        \"204\":\n          description: The global rule was added.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"409\":\n          $ref: \"#/components/responses/Conflict\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Create global rule\n      tags:\n        - Global rules\n        - Admin\n    summary: Manage the global rules that apply to all artifacts if not otherwise configured.\n  \"/admin/rules/{rule}\":\n    delete:\n      description: |\n        Deletes a single global rule.  If this is the only rule configured, this is the same\n        as deleting **all** rules.\n\n        This operation can fail for the following reasons:\n\n        * Invalid rule name/type (HTTP error `400`)\n        * No rule with name/type `rule` exists (HTTP error `404`)\n        * Rule cannot be deleted (HTTP error `409`)\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteGlobalRule\n      responses:\n        \"204\":\n          description: The global rule was successfully deleted.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Delete global rule\n      tags:\n        - Global rules\n        - Admin\n    get:\n      description: |\n        Returns information about the named globally configured rule.\n\n        This operation can fail for the following reasons:\n\n        * Invalid rule name/type (HTTP error `400`)\n        * No rule with name/type `rule` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getGlobalRuleConfig\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Rule\"\n          description: The global rule's configuration.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get global rule configuration\n      tags:\n        - Global rules\n        - Admin\n    parameters:\n      - description: The unique name/type of a rule.\n        in: path\n        name: rule\n        required: true\n        schema:\n          $ref: \"#/components/schemas/RuleType\"\n    put:\n      description: |\n        Updates the configuration for a globally configured rule.\n\n        This operation can fail for the following reasons:\n\n        * Invalid rule name/type (HTTP error `400`)\n        * No rule with name/type `rule` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: updateGlobalRuleConfig\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Rule\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Rule\"\n          description: The global rule's configuration was successfully updated.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update global rule configuration\n      tags:\n        - Global rules\n        - Admin\n    summary: Manage the configuration of a single global artifact rule.\n  \"/groups/{groupId}/artifacts\":\n    delete:\n      description: Deletes all of the artifacts that exist in a given group.\n      operationId: deleteArtifactsInGroup\n      responses:\n        \"204\":\n          description: When the delete operation is successful, a simple 204 is returned.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Deletes all artifacts in a group\n      tags:\n        - Artifacts\n    get:\n      description: Returns a list of all artifacts in the group.  This list is paged.\n      operationId: listArtifactsInGroup\n      parameters:\n        - description: The number of artifacts to return.  Defaults to 20.\n          in: query\n          name: limit\n          schema:\n            type: integer\n        - description: The number of artifacts to skip before starting the result set.  Defaults to 0.\n          in: query\n          name: offset\n          schema:\n            type: integer\n        - description: Sort order, ascending (`asc`) or descending (`desc`).\n          in: query\n          name: order\n          schema:\n            $ref: \"#/components/schemas/SortOrder\"\n        - description: |\n            The field to sort by.  Can be one of:\n\n            * `name`\n            * `createdOn`\n          in: query\n          name: orderby\n          schema:\n            $ref: \"#/components/schemas/SortBy\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArtifactSearchResults\"\n          description: On a successful response, returns a bounded set of artifacts.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: List artifacts in group\n      tags:\n        - Artifacts\n    parameters:\n      - description: Unique ID of an artifact group.\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/GroupId\"\n    post:\n      description: |\n        Creates a new artifact by posting the artifact content.  The body of the request should\n        be the raw content of the artifact.  This is typically in JSON format for *most* of the \n        supported types, but may be in another format for a few (for example, `PROTOBUF`).\n\n        The registry attempts to figure out what kind of artifact is being added from the\n        following supported list:\n\n        * Avro (`AVRO`)\n        * Protobuf (`PROTOBUF`)\n        * JSON Schema (`JSON`)\n        * Kafka Connect (`KCONNECT`)\n        * OpenAPI (`OPENAPI`)\n        * AsyncAPI (`ASYNCAPI`)\n        * GraphQL (`GRAPHQL`)\n        * Web Services Description Language (`WSDL`)\n        * XML Schema (`XSD`)\n\n        Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType` \n        HTTP request header, or include a hint in the request's `Content-Type`.  For example:\n\n        ```\n        Content-Type: application/json; artifactType=AVRO\n        ```\n\n        An artifact is created using the content provided in the body of the request.  This\n        content is created under a unique artifact ID that can be provided in the request\n        using the `X-Registry-ArtifactId` request header.  If not provided in the request,\n        the server generates a unique ID for the artifact.  It is typically recommended\n        that callers provide the ID, because this is typically a meaningful identifier, \n        and for most use cases should be supplied by the caller.\n\n        If an artifact with the provided artifact ID already exists, the default behavior\n        is for the server to reject the content with a 409 error.  However, the caller can\n        supply the `ifExists` query parameter to alter this default behavior. The `ifExists`\n        query parameter can have one of the following values:\n\n        * `FAIL` (*default*) - server rejects the content with a 409 error\n        * `UPDATE` - server updates the existing artifact and returns the new metadata\n        * `RETURN` - server does not create or add content to the server, but instead \n        returns the metadata for the existing artifact\n        * `RETURN_OR_UPDATE` - server returns an existing **version** that matches the \n        provided content if such a version exists, otherwise a new version is created\n\n        This operation may fail for one of the following reasons:\n\n        * An invalid `ArtifactType` was indicated (HTTP error `400`)\n        * No `ArtifactType` was indicated and the server could not determine one from the content (HTTP error `400`)\n        * Provided content (request body) was empty (HTTP error `400`)\n        * An artifact with the provided ID already exists (HTTP error `409`)\n        * The content violates one of the configured global rules (HTTP error `409`)\n        * A server error occurred (HTTP error `500`)\n      operationId: createArtifact\n      parameters:\n        - description: |-\n            Specifies the type of the artifact being added. Possible values include:\n\n            * Avro (`AVRO`)\n            * Protobuf (`PROTOBUF`)\n            * JSON Schema (`JSON`)\n            * Kafka Connect (`KCONNECT`)\n            * OpenAPI (`OPENAPI`)\n            * AsyncAPI (`ASYNCAPI`)\n            * GraphQL (`GRAPHQL`)\n            * Web Services Description Language (`WSDL`)\n            * XML Schema (`XSD`)\n          in: header\n          name: X-Registry-ArtifactType\n          schema:\n            $ref: \"#/components/schemas/ArtifactType\"\n        - description: A client-provided, globally unique identifier for the new artifact.\n          in: header\n          name: X-Registry-ArtifactId\n          schema:\n            type: string\n        - description: |-\n            Specifies the version number of this initial version of the artifact content.  This would typically\n            be a simple integer or a SemVer value.  If not provided, the server will assign a version number\n            automatically (starting with version `1`).\n          in: header\n          name: X-Registry-Version\n          schema:\n            $ref: \"#/components/schemas/Version\"\n        - description: Set this option to instruct the server on what to do if the artifact already exists.\n          in: query\n          name: ifExists\n          schema:\n            $ref: \"#/components/schemas/IfExists\"\n        - description: Used only when the `ifExists` query parameter is set to `RETURN_OR_UPDATE`, this parameter can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for a matching version.  The canonicalization algorithm is unique to each artifact type, but typically involves removing extra whitespace and formatting the content in a consistent manner.\n          in: query\n          name: canonical\n          schema:\n            type: boolean\n        - description: Specifies the description of artifact being added. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.\n          in: header\n          name: X-Registry-Description\n          required: false\n          schema:\n            $ref: \"#/components/schemas/ArtifactDescription\"\n        - description: Specifies the description of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.\n          in: header\n          name: X-Registry-Description-Encoded\n          schema:\n            $ref: \"#/components/schemas/EncodedArtifactDescription\"\n        - description: Specifies the name of artifact being added. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.\n          in: header\n          name: X-Registry-Name\n          schema:\n            $ref: \"#/components/schemas/ArtifactName\"\n        - description: Specifies the name of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.\n          in: header\n          name: X-Registry-Name-Encoded\n          schema:\n            $ref: \"#/components/schemas/EncodedArtifactName\"\n      requestBody:\n        content:\n          \"*/*\":\n            examples:\n              OpenAPI Example:\n                value:\n                  components:\n                    schemas:\n                      Widget:\n                        description: A sample data type.\n                        example:\n                          property-1: value1\n                          property-2: true\n                        properties:\n                          property-1:\n                            type: string\n                          property-2:\n                            type: boolean\n                        title: Root Type for Widget\n                        type: object\n                  info:\n                    description: An example API design using OpenAPI.\n                    title: Empty API\n                    version: 1.0.7\n                  openapi: 3.0.2\n                  paths:\n                    /widgets:\n                      get:\n                        responses:\n                          \"200\":\n                            content:\n                              application/json:\n                                schema:\n                                  items:\n                                    type: string\n                                  type: array\n                            description: All widgets\n                        summary: Get widgets\n            schema:\n              $ref: \"#/components/schemas/FileContent\"\n        description: |\n          The content of the artifact being created. This is often, but not always, JSON data\n          representing one of the supported artifact types:\n\n          * Avro (`AVRO`)\n          * Protobuf (`PROTOBUF`)\n          * JSON Schema (`JSON`)\n          * Kafka Connect (`KCONNECT`)\n          * OpenAPI (`OPENAPI`)\n          * AsyncAPI (`ASYNCAPI`)\n          * GraphQL (`GRAPHQL`)\n          * Web Services Description Language (`WSDL`)\n          * XML Schema (`XSD`)\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArtifactMetaData\"\n          description: Artifact was successfully created.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"409\":\n          $ref: \"#/components/responses/RuleViolationConflict\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Create artifact\n      tags:\n        - Artifacts\n    summary: Manage the collection of artifacts within a single group in the registry.\n  \"/groups/{groupId}/artifacts/{artifactId}\":\n    delete:\n      description: |-\n        Deletes an artifact completely, resulting in all versions of the artifact also being\n        deleted.  This may fail for one of the following reasons:\n\n        * No artifact with the `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteArtifact\n      responses:\n        \"204\":\n          description: Returned when the artifact was successfully deleted.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Delete artifact\n      tags:\n        - Artifacts\n    get:\n      description: |\n        Returns the latest version of the artifact in its raw form.  The `Content-Type` of the\n        response depends on the artifact type.  In most cases, this is `application/json`, but \n        for some types it may be different (for example, `PROTOBUF`).\n\n        This operation may fail for one of the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getLatestArtifact\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ArtifactContent\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get latest artifact\n      tags:\n        - Artifacts\n    parameters:\n      - description: The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/GroupId\"\n      - description: The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ArtifactId\"\n    put:\n      description: |-\n        Updates an artifact by uploading new content.  The body of the request should\n        be the raw content of the artifact.  This is typically in JSON format for *most*\n        of the supported types, but may be in another format for a few (for example, `PROTOBUF`).\n        The type of the content should be compatible with the artifact's type (it would be\n        an error to update an `AVRO` artifact with new `OPENAPI` content, for example).\n\n        The update could fail for a number of reasons including:\n\n        * Provided content (request body) was empty (HTTP error `400`)\n        * No artifact with the `artifactId` exists (HTTP error `404`)\n        * The new content violates one of the rules configured for the artifact (HTTP error `409`)\n        * A server error occurred (HTTP error `500`)\n\n        When successful, this creates a new version of the artifact, making it the most recent\n        (and therefore official) version of the artifact.\n      operationId: updateArtifact\n      parameters:\n        - description: |-\n            Specifies the version number of this new version of the artifact content.  This would typically\n            be a simple integer or a SemVer value.  If not provided, the server will assign a version number\n            automatically.\n          in: header\n          name: X-Registry-Version\n          schema:\n            $ref: \"#/components/schemas/Version\"\n        - description: |-\n            Specifies the artifact name of this new version of the artifact content. Name must be ASCII-only string. If this is not\n            provided, the server will extract the name from the artifact content.\n          in: header\n          name: X-Registry-Name\n          schema:\n            $ref: \"#/components/schemas/ArtifactName\"\n        - description: Specifies the artifact name of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.\n          in: header\n          name: X-Registry-Name-Encoded\n          schema:\n            $ref: \"#/components/schemas/EncodedArtifactName\"\n        - description: Specifies the artifact description of this new version of the artifact content. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.\n          in: header\n          name: X-Registry-Description\n          schema:\n            $ref: \"#/components/schemas/ArtifactDescription\"\n        - description: Specifies the artifact description of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.\n          in: header\n          name: X-Registry-Description-Encoded\n          schema:\n            $ref: \"#/components/schemas/EncodedArtifactDescription\"\n      requestBody:\n        content:\n          \"*/*\":\n            examples:\n              OpenAPI Example:\n                value:\n                  components:\n                    schemas:\n                      Widget:\n                        description: A sample data type.\n                        example:\n                          property-1: value1\n                          property-2: true\n                        properties:\n                          property-1:\n                            type: string\n                          property-2:\n                            type: boolean\n                        title: Root Type for Widget\n                        type: object\n                  info:\n                    description: An example API design using OpenAPI.\n                    title: Empty API\n                    version: 1.0.7\n                  openapi: 3.0.2\n                  paths:\n                    /widgets:\n                      get:\n                        responses:\n                          \"200\":\n                            content:\n                              application/json:\n                                schema:\n                                  items:\n                                    type: string\n                                  type: array\n                            description: All widgets\n                        summary: Get widgets\n            schema:\n              $ref: \"#/components/schemas/FileContent\"\n        description: |\n          The new content of the artifact being updated. This is often, but not always, JSON data\n          representing one of the supported artifact types:\n\n          * Avro (`AVRO`)\n          * Protobuf (`PROTOBUF`)\n          * JSON Schema (`JSON`)\n          * Kafka Connect (`KCONNECT`)\n          * OpenAPI (`OPENAPI`)\n          * AsyncAPI (`ASYNCAPI`)\n          * GraphQL (`GRAPHQL`)\n          * Web Services Description Language (`WSDL`)\n          * XML Schema (`XSD`)\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArtifactMetaData\"\n          description: When successful, returns the updated artifact metadata.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"409\":\n          $ref: \"#/components/responses/Conflict\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update artifact\n      tags:\n        - Artifacts\n    summary: Manage a single artifact.\n  \"/groups/{groupId}/artifacts/{artifactId}/meta\":\n    get:\n      description: |-\n        Gets the metadata for an artifact in the registry.  The returned metadata includes\n        both generated (read-only) and editable metadata (such as name and description).\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getArtifactMetaData\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArtifactMetaData\"\n          description: The artifact's metadata.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get artifact metadata\n      tags:\n        - Metadata\n    parameters:\n      - description: The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/GroupId\"\n      - description: The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ArtifactId\"\n    post:\n      description: |\n        Gets the metadata for an artifact that matches the raw content.  Searches the registry\n        for a version of the given artifact matching the content provided in the body of the\n        POST.\n\n        This operation can fail for the following reasons:\n\n        * Provided content (request body) was empty (HTTP error `400`)\n        * No artifact with the `artifactId` exists (HTTP error `404`)\n        * No artifact version matching the provided content exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getArtifactVersionMetaDataByContent\n      parameters:\n        - description: Parameter that can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for a matching version.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.\n          in: query\n          name: canonical\n          schema:\n            type: boolean\n      requestBody:\n        content:\n          \"*/*\":\n            examples:\n              OpenAPI:\n                value:\n                  components:\n                    schemas:\n                      Widget:\n                        description: A sample data type.\n                        example:\n                          property-1: value1\n                          property-2: true\n                        properties:\n                          property-1:\n                            type: string\n                          property-2:\n                            type: boolean\n                        title: Root Type for Widget\n                        type: object\n                  info:\n                    description: An example API design using OpenAPI.\n                    title: Empty API\n                    version: 1.0.7\n                  openapi: 3.0.2\n                  paths:\n                    /widgets:\n                      get:\n                        responses:\n                          \"200\":\n                            content:\n                              application/json:\n                                schema:\n                                  items:\n                                    type: string\n                                  type: array\n                            description: All widgets\n                        summary: Get widgets\n            schema:\n              $ref: \"#/components/schemas/FileContent\"\n        description: The content of an artifact version.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VersionMetaData\"\n          description: The metadata of the artifact version matching the provided content.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get artifact version metadata by content\n      tags:\n        - Metadata\n    put:\n      description: |-\n        Updates the editable parts of the artifact's metadata.  Not all metadata fields can\n        be updated.  For example, `createdOn` and `createdBy` are both read-only properties.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with the `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: updateArtifactMetaData\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditableMetaData\"\n        description: Updated artifact metadata.\n        required: true\n      responses:\n        \"204\":\n          description: The artifact's metadata was updated.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update artifact metadata\n      tags:\n        - Metadata\n    summary: Manage the metadata of a single artifact.\n  \"/groups/{groupId}/artifacts/{artifactId}/rules\":\n    delete:\n      description: |-\n        Deletes all of the rules configured for the artifact.  After this is done, the global\n        rules apply to the artifact again.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteArtifactRules\n      responses:\n        \"204\":\n          description: The rules were successfully deleted.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Delete artifact rules\n      tags:\n        - Artifact rules\n    get:\n      description: |-\n        Returns a list of all rules configured for the artifact.  The set of rules determines\n        how the content of an artifact can evolve over time.  If no rules are configured for\n        an artifact, the set of globally configured rules are used.  If no global rules \n        are defined, there are no restrictions on content evolution.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: listArtifactRules\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RuleType\"\n                type: array\n          description: Returns the names of the rules configured for the artifact.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: List artifact rules\n      tags:\n        - Artifact rules\n    parameters:\n      - description: The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/GroupId\"\n      - description: The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ArtifactId\"\n    post:\n      description: |-\n        Adds a rule to the list of rules that get applied to the artifact when adding new\n        versions.  All configured rules must pass to successfully add a new artifact version.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * Rule (named in the request body) is unknown (HTTP error `400`)\n        * A server error occurred (HTTP error `500`)\n      operationId: createArtifactRule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Rule\"\n        required: true\n      responses:\n        \"204\":\n          description: The rule was added.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Create artifact rule\n      tags:\n        - Artifact rules\n    summary: Manage the rules for a single artifact.\n  \"/groups/{groupId}/artifacts/{artifactId}/rules/{rule}\":\n    delete:\n      description: |-\n        Deletes a rule from the artifact.  This results in the rule no longer applying for\n        this artifact.  If this is the only rule configured for the artifact, this is the \n        same as deleting **all** rules, and the globally configured rules now apply to\n        this artifact.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No rule with this name/type is configured for this artifact (HTTP error `404`)\n        * Invalid rule type (HTTP error `400`)\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteArtifactRule\n      responses:\n        \"204\":\n          description: The rule was successfully deleted.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Delete artifact rule\n      tags:\n        - Artifact rules\n    get:\n      description: |-\n        Returns information about a single rule configured for an artifact.  This is useful\n        when you want to know what the current configuration settings are for a specific rule.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No rule with this name/type is configured for this artifact (HTTP error `404`)\n        * Invalid rule type (HTTP error `400`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getArtifactRuleConfig\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Rule\"\n          description: Information about a rule.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get artifact rule configuration\n      tags:\n        - Artifact rules\n    parameters:\n      - description: The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/GroupId\"\n      - description: The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ArtifactId\"\n      - description: The unique name/type of a rule.\n        in: path\n        name: rule\n        required: true\n        schema:\n          enum:\n            - VALIDITY\n            - COMPATIBILITY\n          type: string\n    put:\n      description: |\n        Updates the configuration of a single rule for the artifact.  The configuration data\n        is specific to each rule type, so the configuration of the `COMPATIBILITY` rule \n        is in a different format from the configuration of the `VALIDITY` rule.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No rule with this name/type is configured for this artifact (HTTP error `404`)\n        * Invalid rule type (HTTP error `400`)\n        * A server error occurred (HTTP error `500`)\n      operationId: updateArtifactRuleConfig\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Rule\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Rule\"\n          description: Rule configuration was updated.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update artifact rule configuration\n      tags:\n        - Artifact rules\n    summary: Manage the configuration of a single artifact rule.\n  \"/groups/{groupId}/artifacts/{artifactId}/state\":\n    parameters:\n      - description: The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/GroupId\"\n      - description: The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ArtifactId\"\n    put:\n      description: |\n        Updates the state of the artifact.  For example, you can use this to mark the latest\n        version of an artifact as `DEPRECATED`.  The operation changes the state of the latest \n        version of the artifact.  If multiple versions exist, only the most recent is changed.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: updateArtifactState\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateState\"\n        required: true\n      responses:\n        \"204\":\n          description: Returned when the operation was successful.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update artifact state\n      tags:\n        - Artifacts\n    summary: Manage the state of an artifact.\n  \"/groups/{groupId}/artifacts/{artifactId}/test\":\n    parameters:\n      - description: The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/GroupId\"\n      - description: The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ArtifactId\"\n    put:\n      description: |-\n        Tests whether an update to the artifact's content *would* succeed for the provided content.\n        Ultimately, this applies any rules configured for the artifact against the given content\n        to determine whether the rules would pass or fail, but without actually updating the artifact\n        content.\n\n        The body of the request should be the raw content of the artifact.  This is typically in \n        JSON format for *most* of the supported types, but may be in another format for a few \n        (for example, `PROTOBUF`).\n\n        The update could fail for a number of reasons including:\n\n        * Provided content (request body) was empty (HTTP error `400`)\n        * No artifact with the `artifactId` exists (HTTP error `404`)\n        * The new content violates one of the rules configured for the artifact (HTTP error `409`)\n        * The provided artifact type is not recognized (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n\n        When successful, this operation simply returns a *No Content* response.  This response\n        indicates that the content is valid against the configured content rules for the \n        artifact (or the global rules if no artifact rules are enabled).\n      operationId: testUpdateArtifact\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              $ref: \"#/components/schemas/FileContent\"\n        description: |\n          The content of the artifact being tested. This is often, but not always, JSON data\n          representing one of the supported artifact types:\n\n          * Avro (`AVRO`)\n          * Protobuf (`PROTOBUF`)\n          * JSON Schema (`JSON`)\n          * Kafka Connect (`KCONNECT`)\n          * OpenAPI (`OPENAPI`)\n          * AsyncAPI (`ASYNCAPI`)\n          * GraphQL (`GRAPHQL`)\n          * Web Services Description Language (`WSDL`)\n          * XML Schema (`XSD`)\n        required: true\n      responses:\n        \"204\":\n          description: |-\n            When successful, returns \"No Content\" to indicate that the rules passed, and the\n            content was not updated.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"409\":\n          $ref: \"#/components/responses/RuleViolationConflict\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Test update artifact\n      tags:\n        - Artifact rules\n    summary: Test whether content would pass update rules.\n  \"/groups/{groupId}/artifacts/{artifactId}/versions\":\n    get:\n      description: |\n        Returns a list of all versions of the artifact.  The result set is paged.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: listArtifactVersions\n      parameters:\n        - description: The number of versions to skip before starting to collect the result set.  Defaults to 0.\n          in: query\n          name: offset\n          required: false\n          schema:\n            type: integer\n        - description: The number of versions to return.  Defaults to 20.\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                All Versions:\n                  value:\n                    - 5\n                    - 6\n                    - 10\n                    - 103\n              schema:\n                $ref: \"#/components/schemas/VersionSearchResults\"\n          description: List of all artifact versions.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: List artifact versions\n      tags:\n        - Versions\n    parameters:\n      - description: The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/GroupId\"\n      - description: The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ArtifactId\"\n    post:\n      description: |\n        Creates a new version of the artifact by uploading new content.  The configured rules for\n        the artifact are applied, and if they all pass, the new content is added as the most recent \n        version of the artifact.  If any of the rules fail, an error is returned.\n\n        The body of the request should be the raw content of the new artifact version, and the type\n        of that content should match the artifact's type (for example if the artifact type is `AVRO`\n        then the content of the request should be an Apache Avro document).\n\n        This operation can fail for the following reasons:\n\n        * Provided content (request body) was empty (HTTP error `400`)\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * The new content violates one of the rules configured for the artifact (HTTP error `409`)\n        * A server error occurred (HTTP error `500`)\n      operationId: createArtifactVersion\n      parameters:\n        - description: |-\n            Specifies the version number of this new version of the artifact content.  This would typically\n            be a simple integer or a SemVer value.  It must be unique within the artifact.  If this is not\n            provided, the server will generate a new, unique version number for this new updated content.\n          in: header\n          name: X-Registry-Version\n          schema:\n            $ref: \"#/components/schemas/Version\"\n        - description: |-\n            Specifies the artifact name of this new version of the artifact content. Name must be ASCII-only string. If this is not\n            provided, the server will extract the name from the artifact content.\n          in: header\n          name: X-Registry-Name\n          schema:\n            $ref: \"#/components/schemas/ArtifactName\"\n        - description: Specifies the artifact description of this new version of the artifact content. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.\n          in: header\n          name: X-Registry-Description\n          schema:\n            $ref: \"#/components/schemas/ArtifactDescription\"\n        - description: Specifies the artifact description of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.\n          in: header\n          name: X-Registry-Description-Encoded\n          schema:\n            $ref: \"#/components/schemas/EncodedArtifactDescription\"\n        - description: Specifies the artifact name of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.\n          in: header\n          name: X-Registry-Name-Encoded\n          schema:\n            $ref: \"#/components/schemas/EncodedArtifactName\"\n      requestBody:\n        content:\n          \"*/*\":\n            examples:\n              OpenAPI Example:\n                value:\n                  components:\n                    schemas:\n                      Widget:\n                        description: A sample data type.\n                        example:\n                          property-1: value1\n                          property-2: true\n                        properties:\n                          property-1:\n                            type: string\n                          property-2:\n                            type: boolean\n                        title: Root Type for Widget\n                        type: object\n                  info:\n                    description: An example API design using OpenAPI.\n                    title: Empty API\n                    version: 1.0.7\n                  openapi: 3.0.2\n                  paths:\n                    /widgets:\n                      get:\n                        responses:\n                          \"200\":\n                            content:\n                              application/json:\n                                schema:\n                                  items:\n                                    type: string\n                                  type: array\n                            description: All widgets\n                        summary: Get widgets\n            schema:\n              $ref: \"#/components/schemas/FileContent\"\n        description: |\n          The content of the artifact version being created. This is often, but not always, JSON data\n          representing one of the supported artifact types:\n\n          * Avro (`AVRO`)\n          * Protobuf (`PROTOBUF`)\n          * JSON Schema (`JSON`)\n          * Kafka Connect (`KCONNECT`)\n          * OpenAPI (`OPENAPI`)\n          * AsyncAPI (`ASYNCAPI`)\n          * GraphQL (`GRAPHQL`)\n          * Web Services Description Language (`WSDL`)\n          * XML Schema (`XSD`)\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VersionMetaData\"\n          description: The artifact version was successfully created.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"409\":\n          $ref: \"#/components/responses/RuleViolationConflict\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Create artifact version\n      tags:\n        - Versions\n    summary: Manage all the versions of an artifact in the registry.\n  \"/groups/{groupId}/artifacts/{artifactId}/versions/{version}\":\n    get:\n      description: |\n        Retrieves a single version of the artifact content.  Both the `artifactId` and the\n        unique `version` number must be provided.  The `Content-Type` of the response depends \n        on the artifact type.  In most cases, this is `application/json`, but for some types \n        it may be different (for example, `PROTOBUF`).\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No version with this `version` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getArtifactVersion\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ArtifactContent\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get artifact version\n      tags:\n        - Versions\n    parameters:\n      - description: The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/GroupId\"\n      - description: The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ArtifactId\"\n      - description: The unique identifier of a specific version of the artifact content.\n        in: path\n        name: version\n        required: true\n        schema:\n          $ref: \"#/components/schemas/Version\"\n    summary: Manage a single version of a single artifact in the registry.\n  \"/groups/{groupId}/artifacts/{artifactId}/versions/{version}/meta\":\n    delete:\n      description: |\n        Deletes the user-editable metadata properties of the artifact version.  Any properties\n        that are not user-editable are preserved.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No version with this `version` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteArtifactVersionMetaData\n      responses:\n        \"204\":\n          description: The artifact version's user-editable metadata was successfully deleted.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Delete artifact version metadata\n      tags:\n        - Metadata\n    get:\n      description: |\n        Retrieves the metadata for a single version of the artifact.  The version metadata is \n        a subset of the artifact metadata and only includes the metadata that is specific to\n        the version (for example, this doesn't include `modifiedOn`).\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No version with this `version` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getArtifactVersionMetaData\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VersionMetaData\"\n          description: The artifact version's metadata.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get artifact version metadata\n      tags:\n        - Metadata\n    parameters:\n      - description: The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/GroupId\"\n      - description: The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ArtifactId\"\n      - description: The unique identifier of a specific version of the artifact content.\n        in: path\n        name: version\n        required: true\n        schema:\n          $ref: \"#/components/schemas/Version\"\n    put:\n      description: |\n        Updates the user-editable portion of the artifact version's metadata.  Only some of \n        the metadata fields are editable by the user.  For example, `description` is editable, \n        but `createdOn` is not.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No version with this `version` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: updateArtifactVersionMetaData\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditableMetaData\"\n        required: true\n      responses:\n        \"204\":\n          description: The artifact version's metadata was successfully updated.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update artifact version metadata\n      tags:\n        - Metadata\n    summary: Manage the metadata for a single version of an artifact in the registry.\n  \"/groups/{groupId}/artifacts/{artifactId}/versions/{version}/state\":\n    parameters:\n      - description: The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/GroupId\"\n      - description: The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ArtifactId\"\n      - description: The unique identifier of a specific version of the artifact content.\n        in: path\n        name: version\n        required: true\n        schema:\n          $ref: \"#/components/schemas/Version\"\n    put:\n      description: |\n        Updates the state of a specific version of an artifact.  For example, you can use \n        this operation to disable a specific version.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No version with this `version` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: updateArtifactVersionState\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateState\"\n        required: true\n      responses:\n        \"204\":\n          description: Returned when the update was successful.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update artifact version state\n      tags:\n        - Versions\n    summary: Manage the state of a specific artifact version.\n  \"/ids/contentHashes/{contentHash}/\":\n    get:\n      description: |\n        Gets the content for an artifact version in the registry using the \n        SHA-256 hash of the content.  This content hash may be shared by multiple artifact\n        versions in the case where the artifact versions have identical content.\n\n        This operation may fail for one of the following reasons:\n\n        * No content with this `contentHash` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getContentByHash\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ArtifactContent\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get artifact content by SHA-256 hash\n      tags:\n        - Artifacts\n    parameters:\n      - description: SHA-256 content hash for a single artifact content.\n        in: path\n        name: contentHash\n        required: true\n        schema:\n          type: string\n    summary: Access artifact content utilizing the SHA-256 hash of the content.\n  \"/ids/contentIds/{contentId}/\":\n    get:\n      description: |\n        Gets the content for an artifact version in the registry using the unique content\n        identifier for that content.  This content ID may be shared by multiple artifact\n        versions in the case where the artifact versions are identical.\n\n        This operation may fail for one of the following reasons:\n\n        * No content with this `contentId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getContentById\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ArtifactContent\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get artifact content by ID\n      tags:\n        - Artifacts\n    parameters:\n      - description: Global identifier for a single artifact content.\n        in: path\n        name: contentId\n        required: true\n        schema:\n          format: int64\n          type: integer\n    summary: Access artifact content utilizing the unique content identifier for that content.\n  \"/ids/globalIds/{globalId}\":\n    get:\n      description: |\n        Gets the content for an artifact version in the registry using its globally unique\n        identifier.\n\n        This operation may fail for one of the following reasons:\n\n        * No artifact version with this `globalId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getContentByGlobalId\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ArtifactContent\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get artifact by global ID\n      tags:\n        - Artifacts\n    parameters:\n      - description: Global identifier for an artifact version.\n        in: path\n        name: globalId\n        required: true\n        schema:\n          format: int64\n          type: integer\n    summary: Access artifact content utilizing an artifact version's globally unique identifier.\n  /search/artifacts:\n    get:\n      description: |\n        Returns a paginated list of all artifacts that match the provided filter criteria.\n      operationId: searchArtifacts\n      parameters:\n        - description: Filter by artifact name.\n          in: query\n          name: name\n          schema:\n            type: string\n        - description: The number of artifacts to skip before starting to collect the result set.  Defaults to 0.\n          in: query\n          name: offset\n          required: false\n          schema:\n            default: 0\n            type: integer\n        - description: The number of artifacts to return.  Defaults to 20.\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 20\n            type: integer\n        - description: Sort order, ascending (`asc`) or descending (`desc`).\n          in: query\n          name: order\n          schema:\n            $ref: \"#/components/schemas/SortOrder\"\n        - description: |\n            The field to sort by.  Can be one of:\n\n            * `name`\n            * `createdOn`\n          in: query\n          name: orderby\n          schema:\n            $ref: \"#/components/schemas/SortBy\"\n        - description: |-\n            Filter by label.  Include one or more label to only return artifacts containing all of the\n            specified labels.\n          in: query\n          name: labels\n          schema:\n            items:\n              type: string\n            type: array\n        - description: |-\n            Filter by one or more name/value property.  Separate each name/value pair using a colon.  For\n            example `properties=foo:bar` will return only artifacts with a custom property named `foo`\n            and value `bar`.\n          in: query\n          name: properties\n          schema:\n            items:\n              type: string\n            type: array\n        - description: Filter by description.\n          in: query\n          name: description\n          schema:\n            type: string\n        - description: Filter by artifact group.\n          in: query\n          name: group\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArtifactSearchResults\"\n          description: |-\n            On a successful response, returns a result set of artifacts - one for each artifact\n            in the registry that matches the criteria.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Search for artifacts\n      tags:\n        - Search\n        - Artifacts\n    post:\n      description: |\n        Returns a paginated list of all artifacts with at least one version that matches the\n        posted content.\n      operationId: searchArtifactsByContent\n      parameters:\n        - description: Parameter that can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the `artifactType` query parameter.\n          in: query\n          name: canonical\n          schema:\n            type: boolean\n        - description: Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the `canonical` query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts.\n          in: query\n          name: artifactType\n          schema:\n            $ref: \"#/components/schemas/ArtifactType\"\n        - description: The number of artifacts to skip before starting to collect the result set.  Defaults to 0.\n          in: query\n          name: offset\n          required: false\n          schema:\n            default: 0\n            type: integer\n        - description: The number of artifacts to return.  Defaults to 20.\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 20\n            type: integer\n        - description: Sort order, ascending (`asc`) or descending (`desc`).\n          in: query\n          name: order\n          schema:\n            enum:\n              - asc\n              - desc\n            type: string\n        - description: |\n            The field to sort by.  Can be one of:\n\n            * `name`\n            * `createdOn`\n          in: query\n          name: orderby\n          schema:\n            enum:\n              - name\n              - createdOn\n            type: string\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              $ref: \"#/components/schemas/FileContent\"\n        description: The content to search for.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArtifactSearchResults\"\n          description: |-\n            On a successful response, returns a result set of artifacts - one for each artifact\n            in the registry that matches the criteria.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Search for artifacts by content\n      tags:\n        - Search\n        - Artifacts\n    summary: Search for artifacts in the registry.\n  /system/info:\n    get:\n      description: |-\n        This operation retrieves information about the running registry system, such as the version\n        of the software and when it was built.\n      operationId: getSystemInfo\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SystemInfo\"\n          description: On success, returns the system information.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get system information\n      tags:\n        - System\n    summary: Retrieve system information\n  /users/me:\n    get:\n      description: Returns information about the currently authenticated user.\n      operationId: getCurrentUserInfo\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserInfo\"\n          description: Response when the endpoint is successfully invoked.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get current user\n      tags:\n        - Users\n    summary: Retrieves information about the current user\n  x-codegen-contextRoot: /apis/registry/v2\ncomponents:\n  responses:\n    ArtifactContent:\n      content:\n        \"*/*\":\n          examples:\n            OpenAPI:\n              value:\n                info:\n                  description: An example API design using OpenAPI.\n                  title: Empty API\n                  version: 1.0.0\n                openapi: 3.0.2\n          schema:\n            $ref: \"#/components/schemas/FileContent\"\n      description: The content of one version of one artifact.\n    BadRequest:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: Common response for all operations that can return a `400` error.\n    Conflict:\n      content:\n        application/json:\n          examples:\n            ConflictExample:\n              value:\n                error_code: 409\n                message: The artifact content was invalid.\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: Common response used when an input conflicts with existing data.\n    NotFound:\n      content:\n        application/json:\n          examples:\n            NotFoundExample:\n              value:\n                error_code: 404\n                message: No artifact with id 'Topic-1/Inbound' could be found.\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: Common response for all operations that can return a `404` error.\n    RuleViolationConflict:\n      content:\n        application/json:\n          examples:\n            RuleViolationConflictExample:\n              value:\n                causes:\n                  - context: /info[title]\n                    description: API is missing a title\n                  - context: /paths[/invoices]/put[operationId]\n                    description: Operation IDs must be unique\n                error_code: 409\n                message: The artifact content was invalid\n          schema:\n            $ref: \"#/components/schemas/RuleViolationError\"\n      description: Common response used when an input conflicts with existing data.\n    ServerError:\n      content:\n        application/json:\n          examples:\n            ErrorExample:\n              value:\n                error_code: 500\n                message: Lost connection to the database.\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: Common response for all operations that can fail with an unexpected server error.\n  schemas:\n    ArtifactDescription:\n      description: Description of the artifact.\n      example: '\"Artifact description\"'\n      type: string\n      x-codegen-inline: true\n    ArtifactId:\n      description: The ID of a single artifact.\n      example: '\"example-artifact\"'\n      type: string\n    ArtifactMetaData:\n      description: \"\"\n      example:\n        contentId: 82736\n        createdBy: user1\n        createdOn: 2019-03-22T12:51:19Z\n        description: Description of the artifact\n        globalId: 12984719247\n        groupId: My-Group\n        id: Procurement-Invoice\n        labels:\n          - label-1\n          - label-2\n        modifiedBy: user2\n        modifiedOn: 2019-07-19T15:09:00Z\n        name: Artifact Name\n        properties:\n          custom-1: foo\n          custom-2: bar\n        type: AVRO\n        version: 18\n      properties:\n        contentId:\n          description: \"\"\n          format: int64\n          type: integer\n        createdBy:\n          type: string\n        createdOn:\n          format: date-time\n          type: string\n        description:\n          type: string\n        globalId:\n          description: \"\"\n          format: int64\n          type: integer\n        groupId:\n          $ref: \"#/components/schemas/GroupId\"\n          description: \"\"\n        id:\n          $ref: \"#/components/schemas/ArtifactId\"\n          description: \"\"\n        labels:\n          description: \"\"\n          items:\n            type: string\n          type: array\n        modifiedBy:\n          type: string\n        modifiedOn:\n          format: date-time\n          type: string\n        name:\n          type: string\n        properties:\n          $ref: \"#/components/schemas/Properties\"\n          description: \"\"\n        state:\n          $ref: \"#/components/schemas/ArtifactState\"\n          description: \"\"\n        type:\n          $ref: \"#/components/schemas/ArtifactType\"\n          description: \"\"\n        version:\n          description: \"\"\n          type: string\n      required:\n        - id\n        - createdBy\n        - createdOn\n        - modifiedBy\n        - modifiedOn\n        - version\n        - type\n        - globalId\n        - state\n        - group\n        - contentId\n      title: Root Type for ArtifactMetaData\n      type: object\n    ArtifactName:\n      description: Name of the artifact.\n      example: '\"Artifact name\"'\n      type: string\n      x-codegen-inline: true\n    ArtifactSearchResults:\n      description: Describes the response received when searching for artifacts.\n      properties:\n        artifacts:\n          description: The artifacts returned in the result set.\n          items:\n            $ref: \"#/components/schemas/SearchedArtifact\"\n          type: array\n        count:\n          description: |-\n            The total number of artifacts that matched the query that produced the result set (may be \n            more than the number of artifacts in the result set).\n          type: integer\n      required:\n        - count\n        - artifacts\n      type: object\n    ArtifactState:\n      description: |\n        Describes the state of an artifact or artifact version.  The following states\n        are possible:\n\n        * ENABLED\n        * DISABLED\n        * DEPRECATED\n      enum:\n        - ENABLED\n        - DISABLED\n        - DEPRECATED\n      type: string\n      x-codegen-package: io.apicurio.registry.types\n    ArtifactType:\n      description: \"\"\n      enum:\n        - AVRO\n        - PROTOBUF\n        - JSON\n        - OPENAPI\n        - ASYNCAPI\n        - GRAPHQL\n        - KCONNECT\n        - WSDL\n        - XSD\n        - XML\n      example: AVRO\n      type: string\n      x-codegen-package: io.apicurio.registry.types\n    EditableMetaData:\n      description: \"\"\n      example:\n        description: The description of the artifact.\n        labels:\n          - regional\n          - global\n        name: Artifact Name\n        properties:\n          custom-1: foo\n          custom-2: bar\n      properties:\n        description:\n          type: string\n        labels:\n          description: \"\"\n          items:\n            type: string\n          type: array\n        name:\n          type: string\n        properties:\n          $ref: \"#/components/schemas/Properties\"\n          description: \"\"\n      title: Root Type for EditableArtifactMetaData\n      type: object\n    EncodedArtifactDescription:\n      description: Base64 encoded description of the artifact.\n      example: '\"QXJ0aWZhY3QgZGVzY3JpcHRpb24K\"'\n      type: string\n      x-codegen-inline: true\n    EncodedArtifactName:\n      description: Base64 encoded name of the artifact.\n      example: '\"QXJ0aWZhY3QgbmFtZQo=\"'\n      type: string\n      x-codegen-inline: true\n    Error:\n      description: |-\n        All error responses, whether `4xx` or `5xx` will include one of these as the response\n        body.\n      example:\n        error_code: 500\n        message: An error occurred somewhere.\n      properties:\n        detail:\n          description: Full details about the error.  This might contain a server stack trace, for example.\n          type: string\n        error_code:\n          description: The server-side error code.\n          format: int32\n          type: integer\n        message:\n          description: The short error message.\n          type: string\n        name:\n          description: The error name - typically the classname of the exception thrown by the server.\n          type: string\n      title: Root Type for Error\n      type: object\n    FileContent:\n      format: binary\n      type: string\n      x-codegen-inline: true\n    GroupId:\n      description: An ID of a single artifact group.\n      example: '\"my-group\"'\n      type: string\n    IfExists:\n      description: \"\"\n      enum:\n        - FAIL\n        - UPDATE\n        - RETURN\n        - RETURN_OR_UPDATE\n      type: string\n    LogConfiguration:\n      description: \"\"\n      properties:\n        level:\n          $ref: \"#/components/schemas/LogLevel\"\n          description: \"\"\n      required:\n        - level\n      type: object\n    LogLevel:\n      description: \"\"\n      enum:\n        - DEBUG\n        - TRACE\n        - WARN\n        - ERROR\n        - SEVERE\n        - WARNING\n        - INFO\n        - CONFIG\n        - FINE\n        - FINER\n        - FINEST\n      type: string\n      x-codegen-package: io.apicurio.registry.types\n    NamedLogConfiguration:\n      allOf:\n        - properties:\n            name:\n              description: \"\"\n              type: string\n          required:\n            - name\n          type: object\n        - $ref: \"#/components/schemas/LogConfiguration\"\n      description: \"\"\n      type: object\n    Properties:\n      additionalProperties:\n        type: string\n      description: User-defined name-value pairs. Name and value must be strings.\n      type: object\n      x-codegen-inline: true\n      x-codegen-type: StringMap\n    RoleMapping:\n      description: The mapping between a user/principal and their role.\n      example:\n        principalId: user1\n        role: READ_ONLY\n      properties:\n        principalId:\n          description: \"\"\n          type: string\n        role:\n          $ref: \"#/components/schemas/RoleType\"\n          description: \"\"\n      required:\n        - principalId\n        - role\n      type: object\n    RoleType:\n      description: \"\"\n      enum:\n        - READ_ONLY\n        - DEVELOPER\n        - ADMIN\n      type: string\n      x-codegen-package: io.apicurio.registry.types\n    Rule:\n      description: \"\"\n      example:\n        config: FULL\n        type: VALIDITY\n      properties:\n        config:\n          type: string\n        type:\n          $ref: \"#/components/schemas/RuleType\"\n      required:\n        - config\n      title: Root Type for Rule\n      type: object\n    RuleType:\n      description: \"\"\n      enum:\n        - VALIDITY\n        - COMPATIBILITY\n      example: VALIDITY\n      type: string\n      x-codegen-package: io.apicurio.registry.types\n    RuleViolationCause:\n      description: \"\"\n      example:\n        context: /info/externalDocs[url]\n        description: External documentation URL is not valid (it must be formatted as a URL).\n      properties:\n        context:\n          type: string\n        description:\n          type: string\n      title: Root Type for RuleViolationCause\n      type: object\n    RuleViolationError:\n      allOf:\n        - properties:\n            causes:\n              description: List of rule violation causes.\n              items:\n                $ref: \"#/components/schemas/RuleViolationCause\"\n              type: array\n          required:\n            - causes\n          type: object\n        - $ref: \"#/components/schemas/Error\"\n      description: |-\n        All error responses, whether `4xx` or `5xx` will include one of these as the response\n        body.\n      example:\n        causes:\n          - context: /info[title]\n            description: API is missing a title\n          - context: /paths[/invoices]/put[operationId]\n            description: Operation IDs must be unique\n        error_code: 409\n        message: Artifact failed validation\n      title: Root Type for Error\n      type: object\n    SearchedArtifact:\n      description: Models a single artifact from the result set returned when searching for artifacts.\n      example:\n        createdBy: user1\n        createdOn: 2019-03-22T12:51:19Z\n        description: Description of the artifact\n        groupId: My-Group\n        id: Procurement-Invoice\n        labels:\n          - current\n          - internal\n        name: Artifact Name\n        state: ENABLED\n        type: AVRO\n      properties:\n        createdBy:\n          description: \"\"\n          type: string\n        createdOn:\n          description: \"\"\n          format: date-time\n          type: string\n        description:\n          description: \"\"\n          type: string\n        groupId:\n          $ref: \"#/components/schemas/GroupId\"\n          description: \"\"\n        id:\n          $ref: \"#/components/schemas/ArtifactId\"\n          description: \"\"\n        labels:\n          description: \"\"\n          items:\n            type: string\n          type: array\n        modifiedBy:\n          description: \"\"\n          type: string\n        modifiedOn:\n          description: \"\"\n          format: date-time\n          type: string\n        name:\n          description: \"\"\n          type: string\n        state:\n          $ref: \"#/components/schemas/ArtifactState\"\n          description: \"\"\n        type:\n          $ref: \"#/components/schemas/ArtifactType\"\n          description: \"\"\n      required:\n        - createdBy\n        - createdOn\n        - id\n        - type\n        - state\n        - group\n      type: object\n    SearchedVersion:\n      description: Models a single artifact from the result set returned when searching for artifacts.\n      example:\n        contentId: 62\n        createdBy: some text\n        createdOn: 2018-02-10T09:30Z\n        description: Description of the artifact version\n        globalId: 37\n        labels:\n          - current\n          - internal\n        name: Artifact Version Name\n        properties: {}\n        state: ENABLED\n        type: AVRO\n        version: 85\n      properties:\n        contentId:\n          description: \"\"\n          format: int64\n          type: integer\n        createdBy:\n          description: \"\"\n          type: string\n        createdOn:\n          description: \"\"\n          format: date-time\n          type: string\n        description:\n          description: \"\"\n          type: string\n        globalId:\n          description: \"\"\n          format: int64\n          type: integer\n        labels:\n          description: \"\"\n          items:\n            type: string\n          type: array\n        name:\n          description: \"\"\n          type: string\n        properties:\n          $ref: \"#/components/schemas/Properties\"\n          description: \"\"\n        state:\n          $ref: \"#/components/schemas/ArtifactState\"\n          description: \"\"\n        type:\n          $ref: \"#/components/schemas/ArtifactType\"\n          description: \"\"\n        version:\n          description: \"\"\n          type: string\n      required:\n        - createdBy\n        - createdOn\n        - type\n        - state\n        - globalId\n        - version\n        - contentId\n      type: object\n    SortBy:\n      description: \"\"\n      enum:\n        - name\n        - createdOn\n      type: string\n    SortOrder:\n      description: \"\"\n      enum:\n        - asc\n        - desc\n      type: string\n    SystemInfo:\n      description: \"\"\n      example:\n        builtOn: 2021-03-19T12:55:00Z\n        description: The Apicurio Registry application.\n        name: Apicurio Registry (SQL)\n        version: 2.0.0.Final\n      properties:\n        builtOn:\n          format: date-time\n          type: string\n        description:\n          type: string\n        name:\n          type: string\n        version:\n          type: string\n      title: Root Type for SystemInfo\n      type: object\n    UpdateRole:\n      description: \"\"\n      example:\n        role: READ_ONLY\n      properties:\n        role:\n          $ref: \"#/components/schemas/RoleType\"\n      required:\n        - role\n      title: Root Type for UpdateRole\n      type: object\n    UpdateState:\n      description: \"\"\n      example:\n        state: DISABLED\n      properties:\n        state:\n          $ref: \"#/components/schemas/ArtifactState\"\n      required:\n        - state\n      title: Root Type for UpdateState\n      type: object\n    UserInfo:\n      description: Information about a single user.\n      example:\n        admin: true\n        developer: false\n        displayName: Diana Prince\n        username: dprince\n        viewer: false\n      properties:\n        admin:\n          type: boolean\n        developer:\n          type: boolean\n        displayName:\n          type: string\n        username:\n          type: string\n        viewer:\n          type: boolean\n      title: Root Type for UserInfo\n      type: object\n    Version:\n      description: |-\n        A single version of an artifact.  Can be provided by the client when creating a new version,\n        or it can be server-generated.  The value can be any string unique to the artifact, but it is\n        recommended to use a simple integer or a semver value.\n      example: '\"3.1.6\"'\n      type: string\n    VersionMetaData:\n      description: \"\"\n      example:\n        contentId: 12347\n        createdBy: user1\n        createdOn: 2019-05-17T12:00:00Z\n        description: The description of the artifact\n        globalId: 183282932983\n        groupId: My-Group\n        id: my-artifact-id\n        labels:\n          - label-1\n          - label-2\n        name: Artifact Name\n        properties:\n          custom-1: foo\n          custom-2: bar\n        type: PROTOBUF\n        version: 1221432\n      properties:\n        contentId:\n          description: \"\"\n          format: int64\n          type: integer\n        createdBy:\n          type: string\n        createdOn:\n          format: date-time\n          type: string\n        description:\n          type: string\n        globalId:\n          description: \"\"\n          format: int64\n          type: integer\n        groupId:\n          $ref: \"#/components/schemas/GroupId\"\n          description: \"\"\n        id:\n          $ref: \"#/components/schemas/ArtifactId\"\n          description: \"\"\n        labels:\n          description: \"\"\n          items:\n            type: string\n          type: array\n        name:\n          type: string\n        properties:\n          $ref: \"#/components/schemas/Properties\"\n          description: \"\"\n        state:\n          $ref: \"#/components/schemas/ArtifactState\"\n          description: \"\"\n        type:\n          $ref: \"#/components/schemas/ArtifactType\"\n          description: \"\"\n        version:\n          type: string\n      required:\n        - createdOn\n        - createdBy\n        - version\n        - type\n        - globalId\n        - id\n        - contentId\n      title: Root Type for ArtifactVersionMetaData\n      type: object\n    VersionSearchResults:\n      description: Describes the response received when searching for artifacts.\n      properties:\n        count:\n          description: |-\n            The total number of versions that matched the query (may be more than the number of versions\n            returned in the result set).\n          type: integer\n        versions:\n          description: The collection of artifact versions returned in the result set.\n          items:\n            $ref: \"#/components/schemas/SearchedVersion\"\n          type: array\n      required:\n        - count\n        - versions\n      type: object\nx-codegen:\n  bean-annotations:\n    - io.quarkus.runtime.annotations.RegisterForReflection\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@cafd364eceab1026372ac69bd0ef670c5fe491bb/-/blob/APIs/apicurio.local/registry/2.1.0-SNAPSHOT/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/cafd364eceab1026372ac69bd0ef670c5fe491bb/APIs/apicurio.local/registry/2.1.0-SNAPSHOT/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:77016: json: cannot unmarshal string into Go struct field Alias.paths of type ogen.PathItem"
}