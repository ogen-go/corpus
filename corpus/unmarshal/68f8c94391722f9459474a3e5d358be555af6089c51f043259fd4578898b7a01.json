{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/shipwire.containers/openapi.yml",
			"byteSize": 19531,
			"content": "openapi: 3.0.1\ninfo:\n  x-ballerina-display:\n    label: Shipwire Containers\n    iconPath: \"icon.png\"\n  title: Shipwire Containers API\n  description: |\n    This is a generated connector for [Shipwire Containers API v3.0](https://www.shipwire.com/developers/container/) OpenAPI specification.\n    The Container API is used to manage shipping containers and boxes within Shipwire Anywhere warehouses and dropship locations. \n    Use it to create a new container, to update an existing container, or to get information about already created containers.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials. \n  \n    Create a [Shipwire account](https://www.shipwire.com) and obtain tokens by following [this guide](https://www.shipwire.com/developers/getting-started).\n  version: \"3.0\"\nservers:\n- url: https://api.shipwire.com/\nsecurity:\n- basicAuth: []\npaths:\n  /api/v3.1/containers:\n    get:\n      summary: Get containers\n      description: Get a collection of containers.\n      operationId: getContainers\n      parameters:\n      - name: isActive\n        in: query\n        description: Returns containers that are active or not. Valid options are\n          1 or 0.\n        schema:\n          type: integer\n          format: enum\n          enum:\n          - 1\n          - 0\n      - name: warehouseIds\n        in: query\n        description: Returns all containers that exist in the provided warehouse.\n          Single warehouse's id or comma separated list of warehouse ids.\n        schema:\n          type: string\n      - name: warehouseExternalIds\n        in: query\n        description: Returns all containers that exist in the provided warehouse.\n          Single warehouse's external id or comma separated list of warehouse external\n          ids.\n        schema:\n          type: string\n      - name: type\n        in: query\n        description: Container type. Valid options are 'box', 'envelope', 'tube',\n          'pallet'\n        style: form\n        explode: true\n        schema:\n          type: array\n          items:\n            type: string\n            format: enum\n            enum:\n            - box\n            - envelope\n            - tube\n            - pallet\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetContainersResponse'\n    post:\n      summary: Create a new container\n      operationId: postContainers\n      requestBody:\n        description: CreateANewContainer request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateANewContainerRequest'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateANewContainerResponse'\n      x-codegen-request-body-name: body\n  /api/v3.1/containers/{id}:\n    get:\n      summary: Get a container\n      description: Get a container by container's id or external id.\n      operationId: getContainersById\n      parameters:\n      - name: id\n        in: path\n        description: The container's id or external id.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/getAContainerResponse'\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContainerNotFound404Response'\n    put:\n      summary: Update a container\n      description: Modify a container based on its containers's id or external id\n      operationId: putContainersById\n      parameters:\n      - name: id\n        in: path\n        description: The containers's id or external id.\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: UpdateAContainer request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateAContainerRequest'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateAContainerResponse'\n      x-codegen-request-body-name: body\ncomponents:\n  schemas:\n    GetContainersResponse:\n      title: Get containers response\n      description: Get container details\n      allOf:\n      - $ref: '#/components/schemas/GetResponseModel'\n      - type: object\n    CreateANewContainerRequest:\n      title: Create a new container request\n      required:\n      - basis\n      - dimensions\n      - isActive\n      - name\n      - type\n      - values\n      - warehouseId\n      type: object\n      properties:\n        warehouseExternalId:\n          type: string\n          description: A unique user-provided identifier for a Shipwire Anywhere warehouse\n            in an external system.\n          example: WH005\n        externalId:\n          type: string\n          description: A unique user-provided identifier for a container in an external\n            system.\n          example: \"1002\"\n        name:\n          type: string\n          description: A unique identifier for the container in the Shipwire system.\n            It can be standardized to be the dimensions of the container (length,\n            width, height) and type.\n          example: 25.00 X 5.00 X 5.00 box update\n        type:\n          type: string\n          description: This is the type of container based on the contents stored\n            in it.\n          format: enum\n          example: box\n          enum:\n          - box\n          - envelope\n          - tube\n          - pallet\n        isActive:\n          type: integer\n          description: A boolean which indicates whether or not the warehouse can\n            use the container for a particular customer for packaging\n          format: enum\n          example: 1\n        warehouseId:\n          type: integer\n          description: A unique identifier for a Shipwire or Shipwire Anywhere warehouse.\n            (See the warehouses API.)\n          example: 3071\n        basis:\n          type: string\n          description: Basis is a parameter used to prioritize the use of some containers\n            over others. To give preference to one container over another, assign\n            a higher basis value.\n          example: \"5045.0\"\n        serviceSpecificCarrierCode:\n          type: string\n          description: It indicates that this container is used with a particular\n            carrier service (eg. FDX 1D).\n          example: FDX FT\n        dimensions:\n          description: Dimensions\n          type: object\n        values:\n          description: Values\n          type: object\n      description: Request to create new container\n    ContainerNotFound404Response:\n      title: Create a new container response\n      description: Get using invalid container Id\n      allOf:\n      - $ref: '#/components/schemas/Get404ResponseModel'\n      - type: object\n    CreateANewContainerResponse:\n      title: Create a new container response\n      description: Response post container creation\n      allOf:\n      - $ref: '#/components/schemas/PutPostResponseModel'\n      - type: object\n    UpdateAContainerRequest:\n      title: Update a container request\n      required:\n      - basis\n      - dimensions\n      - isActive\n      - name\n      - type\n      - values\n      - warehouseId\n      type: object\n      properties:\n        warehouseExternalId:\n          type: string\n          description: A unique user-provided identifier for a Shipwire Anywhere warehouse\n            in an external system.\n          example: WH005\n        externalId:\n          type: string\n          description: A unique user-provided identifier for a container in an external\n            system.\n          example: \"1002\"\n        name:\n          type: string\n          description: A unique identifier for the container in the Shipwire system.\n            It can be standardized to be the dimensions of the container (length,\n            width, height) and type.\n          example: 25.00 X 5.00 X 5.00 box update\n        type:\n          type: string\n          description: This is the type of container based on the contents stored\n            in it.\n          format: enum\n          example: box\n          enum:\n          - box\n          - envelope\n          - tube\n          - pallet\n        isActive:\n          type: integer\n          description: A boolean which indicates whether or not the warehouse can\n            use the container for a particular customer for packaging\n          format: enum\n          example: 1\n        warehouseId:\n          type: integer\n          description: A unique identifier for a Shipwire or Shipwire Anywhere warehouse.\n            (See the warehouses API.)\n          example: 3071\n        basis:\n          type: string\n          description: Basis is a parameter used to prioritize the use of some containers\n            over others. To give preference to one container over another, assign\n            a higher basis value.\n          example: \"5045.0\"\n        serviceSpecificCarrierCode:\n          type: string\n          description: It indicates that this container is used with a particular\n            carrier service (eg. FDX 1D).\n          example: FDX FT\n        dimensions:\n          description: Dimensions\n          type: object\n        values:\n          description: Values\n          type: object\n      description: Request to update container information\n    UpdateAContainerResponse:\n      title: Update a container response\n      description: Response for container update\n      allOf:\n      - $ref: '#/components/schemas/PutPostResponseModel'\n      - type: object\n    getAContainerResponse:\n      title: Get a Container Response\n      type: object\n      properties:\n        status:\n          type: integer\n          description: This is the HTTP status code.\n          example: 200\n        message:\n          type: string\n          description: This is the HTTP status message.\n          example: Successful\n        resourceLocation:\n          type: string\n          description: A URL that gives more information about the linked resource.\n            A 'null' value would mean that no further information is available for\n            that resource.\n          example: https://api.shipwire.com/api/v3.1/containers/245641\n        resource:\n          $ref: '#/components/schemas/ContainerResponseModel'\n      description: Get container details\n    ContainerDimensions:\n      type: object\n      description: Container dimensions\n      properties:\n        length:\n          maximum: 108\n          minimum: 0.1\n          type: number\n          description: This is the length of the container based on its Unit of Measurement\n            (lengthUnit)\n          example: 20.0\n        width:\n          maximum: 108\n          minimum: 0.1\n          type: number\n          description: This is the width of the container based on its Unit of Measurement\n            (widthUnit)\n          example: 5.0\n        height:\n          maximum: 108\n          minimum: 0.1\n          type: number\n          description: This is the height of the container based on its Unit of Measurement\n            (heightUnit)\n          format: float\n          example: 5.0\n        weight:\n          type: number\n          description: This is the weight of the container based on its Unit of Measurement\n            (weightUnit)\n          format: float\n          example: 0.46\n        maxWeight:\n          type: number\n          description: This is the maximum weight that the container can hold based\n            on its Unit of Measurement (maxWeightUnit)\n          format: float\n          example: 40.0\n        lengthUnit:\n          type: string\n          description: This is the Unit of Measurement for Container length (e.g.\n            inches)\n          example: IN\n        widthUnit:\n          type: string\n          description: This is the Unit of Measurement for Container width (e.g. inches)\n          example: IN\n        heightUnit:\n          type: string\n          description: This is the Unit of Measurement for Container height (e.g.\n            inches)\n          example: IN\n        weightUnit:\n          type: string\n          description: This is the Unit of Measurement for Container weight (e.g.\n            pounds)\n          example: LB\n        maxWeightUnit:\n          type: string\n          description: This is the Unit of Measurement for Container's max weight\n            (e.g. pounds)\n          example: LB\n    ContainerValue:\n      description: Container value\n      type: object\n      properties:\n        costValue:\n          maximum: 1E+6\n          minimum: 0\n          type: number\n          description: This is the cost value for the container. During the carton\n            selection phase for an order, Shipwire will first consider containers\n            with a lower cost, even if chosing one will end up making the shipping\n            cost comparatively higher. (i.e. Shipwire will chose a container 1 with\n            a $0 cost over a container 2 with a $1 cost, even if the shipping cost\n            for using container 1 is higher than it would be using container 2.)\n          example: 20.0\n        retailValue:\n          maximum: 1E+6\n          minimum: 0\n          type: number\n          description: This is the retail value for the container. Container retail\n            value will be added to the shipping quote for the customer. If a merchant\n            doesn't plan to charge customers for cartons/boxes, the container retail\n            value should be set to $0.\n          example: 20.0\n        costValueCurrency:\n          type: string\n          description: This is the currency used in determining cost value for the\n            container.\n          example: USD\n        retailValueCurrency:\n          type: string\n          description: This is the currency used in determining retail value for the\n            container.\n          example: USD\n    Get404ResponseModel:\n      type: object\n      properties:\n        status:\n          type: integer\n          description: This is the HTTP status code.\n          example: 404\n        message:\n          type: string\n          description: This is the HTTP status message.\n          example: Container not found\n        resourceLocation:\n          type: string\n          description: A URL that gives more information about the linked resource.\n            A null value would mean that no further information is available for that\n            resource.\n          example: null\n    PutPostResponseModel:\n      type: object\n      properties:\n        status:\n          type: integer\n          description: This is the HTTP status code.\n          example: 200\n        message:\n          type: string\n          description: This is the HTTP status message.\n          example: Successful\n        warnings:\n          type: object\n          properties: {}\n          description: A notification that warns the user of something or that serves\n            as a caution. Eg. an externalId supplied greater than 32 characters.\n        errors:\n          type: object\n          properties: {}\n          description: A fatal error that prevents the user from performing some action.\n            (e.g. invalid warehouseId specified when creating a container)\n        resourceLocation:\n          type: string\n          description: A URL that gives more information about the linked resource.\n            A null value would mean that no further information is available for that\n            resource.\n          example: https://api.shipwire.com/api/v3.1/containers?offset=0\u0026limit=20\n    GetResponseModel:\n      type: object\n      properties:\n        status:\n          type: integer\n          description: This is the HTTP status code.\n          example: 200\n        message:\n          type: string\n          description: This is the HTTP status message.\n          example: Successful\n        resourceLocation:\n          type: string\n          description: A URL that gives more information about the linked resource.\n            A null value would mean that no further information is available for that\n            resource.\n          example: https://api.shipwire.com/api/v3.1/containers?offset=0\u0026limit=20\n    ContainerResponseModel:\n      description: Container response model\n      type: object\n      properties:\n        id:\n          type: integer\n          description: A unique auto-generated ID assigned to each new container added\n            to the Shipwire Platform.\n          example: 245641\n        externalId:\n          type: string\n          description: A unique user-provided identifier for a container in an external\n            system.\n          example: \"1002\"\n        name:\n          type: string\n          description: A unique identifier for the container in the Shipwire system.\n            It can be standardized to be the dimensions of the container (length,\n            width, height) and type.\n          example: 25.00 X 5.00 X 5.00 box update\n        type:\n          type: string\n          description: This is the type of container based on the contents stored\n            in it.\n          format: enum\n          example: box\n          enum:\n          - box\n          - envelope\n          - tube\n          - pallet\n        isActive:\n          type: integer\n          description: A boolean which indicates whether or not the warehouse can\n            use the container for a particular customer for packaging\n          format: enum\n          example: 1\n        warehouseId:\n          type: integer\n          description: A unique identifier for a Shipwire or Shipwire Anywhere warehouse.\n            (See the warehouses API.)\n          example: 3071\n        warehouseExternalId:\n          type: string\n          description: A unique user-provided identifier for a Shipwire Anywhere warehouse\n            in an external system.\n          example: WH005\n        basis:\n          type: string\n          description: Basis is a parameter used to prioritize the use of some containers\n            over others. To give preference to one container over another, assign\n            a higher basis value.\n          example: \"5045.0\"\n        serviceSpecificCarrierCode:\n          type: string\n          description: It indicates that this container is used with a particular\n            carrier service (eg. FDX 1D).\n          example: FDX FT\n        dimensions:\n          $ref: '#/components/schemas/ContainerResponseModel_dimensions'\n        values:\n          $ref: '#/components/schemas/ContainerResponseModel_values'\n    ContainerResponseModel_dimensions:\n      type: object\n      description: Dimensions\n      properties:\n        resourceLocation:\n          description: Resource location\n          type: string\n          example: null\n        resource:\n          $ref: '#/components/schemas/ContainerDimensions'\n    ContainerResponseModel_values:\n      type: object\n      description: Values\n      properties:\n        resourceLocation:\n          description: Resource location\n          type: string\n          example: null\n        resource:\n          $ref: '#/components/schemas/ContainerValue'\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n"
		}
	},
	"Error": "unmarshal: callback: json: cannot unmarshal number 0.1 into Go struct field Schema.minimum of type int64"
}