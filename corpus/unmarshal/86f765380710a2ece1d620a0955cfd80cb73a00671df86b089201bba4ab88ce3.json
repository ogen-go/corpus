{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/michaelawyu/api_tutorial"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/photo_album/openapi.yaml",
			"byteSize": 7022,
			"content": "openapi: 3.0.1\ninfo:\n  title: Sample OpenAPI Specification\n  description: 'An OpenAPI specification sample for [Build, Deploy, and Manage Networked APIs: An Overview](https://goo.gl/VardtG) document.'\n  version: 0.0.1\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: http://localhost:8080/\n    description: Example API Service\ncomponents:\n  schemas:\n    'User':\n      type: object\n      required:\n        - display_name\n        - email\n      properties:\n        name:\n          type: string\n          readOnly: true\n        display_name:\n          type: string\n          maxLength: 20d\n          minLength: 1\n        email:\n          type: string\n          format: email\n    'Photo':\n      type: object\n      required:\n        - data\n      properties:\n        name:\n          type: string\n          readOnly: true\n        display_name:\n          type: string\n        created_at:\n          type: integer\n          format: long\n          readOnly: true\n        data:\n          type: string\n    'ErrorMessage':\n      type: object\n      required:\n        - error_code\n        - error_message\n      properties:\n        error_code:\n          type: string\n        error_message:\n          type: string  \n  parameters:\n    'user_id':\n      name: user_id\n      in: path\n      description: ID of user\n      required: true\n      schema:\n        type: string\n    'photo_id':\n      name: photo_id\n      in: path\n      description: ID of photo\n      required: true\n      schema:\n        type: string\n    'photo_ids':\n      name: photo_ids\n      in: query\n      description: a collection of photo IDs\n      required: true\n      schema:\n        type: array\n        items:\n          type: string\npaths:\n  /users:\n    post:\n      description: Creates a new user\n      operationId: create_user\n      requestBody:\n        description: The user to create\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: User added\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: Unexpected error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n  /users/{user_id}:\n    parameters:\n      - $ref: '#/components/parameters/user_id'\n    get:\n      description: Gets a user\n      operationId: get_user\n      responses:\n        '200':\n          description: User found\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: Unexpected error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n    patch:\n      description: Updates a user\n      operationId: update_user\n      requestBody:\n        description: The user to update\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: User updated\n          content:\n            'application/json':\n              schema:\n               $ref: '#/components/schemas/User'\n        default:\n          description: Unexpected error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n  /users/{user_id}/photos/:\n    parameters:\n      - $ref: '#/components/parameters/user_id'\n    get:\n      description: Lists all photos\n      operationId: list_photos\n      parameters:\n        - name: 'order_by'\n          in: query\n          description: Ordering for the results\n          required: false\n          schema:\n            type: string\n            enum:\n              - 'display_name'\n              - 'created_at'\n        - name: 'page_token'\n          in: query\n          description: Token for the next page\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of photos and next_page_token\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  photos:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Photo'\n                  next_page_token:\n                    type: string\n        default:\n          description: Unexpected error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n    post:\n      description: Creates a photo\n      operationId: create_photo\n      requestBody:\n        description: The photo to add\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/Photo'\n      responses:\n        '200':\n          description: Photo added\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Photo'\n        default:\n          description: Unexpected error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n  /users/{user_id}/photos/{photo_id}:\n    parameters:\n      - $ref: '#/components/parameters/user_id'\n      - $ref: '#/components/parameters/photo_id'\n    get:\n      description: Gets a photo\n      operationId: get_photo\n      responses:\n        '200':\n          description: Photo found\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Photo'\n        default:\n          description: Unexpected error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n    delete:\n      description: Deletes a photo\n      operationId: delete_photo\n      responses:\n        '200':\n          description: Photo deleted\n        default:\n          description: Unexpected error\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n  /users/{user_id}/photos:batchGet:\n    parameters:\n      - $ref: '#/components/parameters/user_id'\n    get:\n      description: Gets a list of photos\n      operationId: batchget_photo\n      parameters:\n        - $ref: '#/components/parameters/photo_ids'\n      responses:\n        '200':\n          description: List of photos found\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Photo'\n        default:\n            description: Unexpected error\n            content:\n              'application/json':\n                schema:\n                  $ref: '#/components/schemas/ErrorMessage'"
		}
	},
	"Error": "unmarshal: json: line 1:19: callback: json: cannot unmarshal string into Go struct field Schema.maxLength of type uint64"
}