{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/arana-db/arana"
		},
		"file": {
			"name": "admin.api.yaml",
			"size": 0,
			"path": "pkg/admin/admin.api.yaml",
			"byteSize": 13667,
			"content": "openapi: 3.0.3\ninfo:\n  title: Arana\n  description: Arana\n  version: 1.0.0\nservers:\n  - url: 'http://127.0.0.1:8080/api/v1'\npaths:\n  /tenants:\n    get:\n      operationId: listTenants\n      summary: List all tenants\n      responses:\n        '200':\n          description: All Tenants\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tenants'\n    post:\n      operationId: createTenant\n      summary: Create a tenant\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tenant'\n      responses:\n        '201':\n          description: OK\n  /tenants/{tenantName}:\n    parameters:\n      - in: path\n        name: tenantName\n        schema:\n          type: string\n        required: true\n        description: the name of tenant\n    get:\n      operationId: getTenant\n      summary: Get a tenant\n      responses:\n        '200':\n          description: Single Tenant\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tenant'\n    delete:\n      operationId: deleteTenant\n      summary: Delete a tenant\n      responses:\n        '204':\n          description: NONE\n    put:\n      operationId: putTenant\n      summary: Update a tenant\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tenant'\n      responses:\n        '200':\n          description: OK\n  /tenants/{tenantName}/users:\n    parameters:\n      - in: path\n        name: tenantName\n        schema:\n          type: string\n        required: true\n        description: the name of tenant\n    get:\n      operationId: getTenantUsers\n      summary: List tenant users\n      responses:\n        '200':\n          description: Tenant user list\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users'\n    post:\n      operationId: createTenantUser\n      summary: Create a tenant user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: OK\n  /tenants/{tenantName}/users/{username}:\n    parameters:\n      - in: path\n        name: tenantName\n        schema:\n          type: string\n        required: true\n        description: the name of tenant\n      - in: path\n        name: username\n        schema:\n          type: string\n        required: true\n        description: username\n    get:\n      operationId: getTenantUser\n      summary: Get a tenant user\n      responses:\n        '200':\n          description: Tenant user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    delete:\n      operationId: deleteTenantUser\n      summary: Delete a tenant user\n      responses:\n        '204':\n          description: NONE\n    put:\n      operationId: putTenantUser\n      summary: Update a tenant user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: OK\n  /tenants/{tenantName}/nodes:\n    parameters:\n      - in: path\n        name: tenantName\n        schema:\n          type: string\n        required: true\n        description: the name of tenant\n    get:\n      operationId: listNodes\n      summary: List mysql nodes\n      responses:\n        '200':\n          description: All MySQL Nodes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Nodes'\n    post:\n      operationId: createNode\n      summary: Create mysql node\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Node'\n      responses:\n        '200':\n          description: OK\n  /tenants/{tenantName}/nodes/{nodeName}:\n    parameters:\n      - in: path\n        name: tenantName\n        schema:\n          type: string\n        required: true\n        description: the name of tenant\n      - in: path\n        name: nodeName\n        schema:\n          type: string\n        required: true\n        description: the name of node\n    get:\n      operationId: getNode\n      summary: Get a mysql node\n      responses:\n        '200':\n          description: Single MySQL Node\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n    delete:\n      operationId: deleteNode\n      summary: Delete a mysql node\n      responses:\n        '204':\n          description: NONE\n    put:\n      operationId: putNode\n      summary: Update a mysql node\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Node'\n      responses:\n        '200':\n          description: OK\n  /tenants/{tenantName}/clusters/{clusterName}/groups:\n    parameters:\n      - in: path\n        name: tenantName\n        schema:\n          type: string\n        required: true\n        description: the name of tenant\n      - in: path\n        name: clusterName\n        schema:\n          type: string\n        required: true\n        description: the name of cluster\n    get:\n      operationId: listGroups\n      summary: List all DB groups\n      responses:\n        '200':\n          description: All groups\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Groups'\n    post:\n      operationId: createGroup\n      summary: Create a DB group\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n      responses:\n        '200':\n          description: OK\n  /tenants/{tenantName}/clusters/{clusterName}/groups/{groupName}:\n    parameters:\n      - in: path\n        name: tenantName\n        schema:\n          type: string\n        required: true\n        description: the name of tenant\n      - in: path\n        name: clusterName\n        schema:\n          type: string\n        required: true\n        description: the name of cluster\n      - in: path\n        name: groupName\n        schema:\n          type: string\n        required: true\n        description: the name of DB group\n    get:\n      operationId: getGroup\n      summary: Get a DB group\n      responses:\n        '200':\n          description: Single DB group\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n    put:\n      operationId: putGroup\n      summary: Update a DB group\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n      responses:\n        '200':\n          description: OK\n    delete:\n      operationId: deleteGroup\n      summary: Delete a DB group\n      responses:\n        '204':\n          description: NONE\n  /tenants/{tenantName}/clusters:\n    parameters:\n      - in: path\n        name: tenantName\n        schema:\n          type: string\n        required: true\n        description: the name of tenant\n    get:\n      operationId: listClusters\n      summary: List all clusters\n      responses:\n        '200':\n          description: All Clusters\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Clusters'\n    post:\n      operationId: createCluster\n      summary: Create a cluster\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Cluster'\n      responses:\n        '200':\n          description: OK\n  /tenants/{tenantName}/clusters/{clusterName}:\n    parameters:\n      - in: path\n        name: tenantName\n        schema:\n          type: string\n        required: true\n        description: the name of tenant\n      - in: path\n        name: clusterName\n        schema:\n          type: string\n        required: true\n        description: the name of cluster\n    get:\n      operationId: getCluster\n      summary: Get a cluster\n      responses:\n        '200':\n          description: Single Cluster\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cluster'\n    put:\n      operationId: putCluster\n      summary: Update a cluster\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Cluster'\n      responses:\n        '200':\n          description: OK\n    delete:\n      operationId: deleteCluster\n      summary: Delete a cluster\n      responses:\n        '204':\n          description: NONE\n  /tenants/{tenantName}/clusters/{clusterName}/tables:\n    parameters:\n      - in: path\n        name: tenantName\n        schema:\n          type: string\n        required: true\n        description: the name of tenant\n      - in: path\n        name: clusterName\n        schema:\n          type: string\n        required: true\n        description: the name of cluster\n    get:\n      operationId: listTables\n      summary: List all tables\n      responses:\n        '200':\n          description: All Tables\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tables'\n    post:\n      operationId: createTable\n      summary: Create a table\n      requestBody:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Table'\n      responses:\n      '200':\n        description: OK\n  /tenants/{tenantName}/clusters/{clusterName}/tables/{tableName}:\n    parameters:\n      - in: path\n        name: tenantName\n        schema:\n          type: string\n        required: true\n        description: the name of tenant\n      - in: path\n        name: clusterName\n        schema:\n          type: string\n        required: true\n        description: the name of cluster\n      - in: path\n        name: tableName\n        schema:\n          type: string\n        required: true\n        description: the name of logical table\n    get:\n      operationId: getTable\n      summary: Get a table\n      responses:\n        '200':\n          description: Single Table\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Table'\n    put:\n      operationId: upsertTable\n      summary: Upsert a table\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Table'\n      responses:\n        '200':\n          description: OK\n    delete:\n      operationId: deleteTable\n      summary: Delete a table\n      responses:\n        '204':\n          description: NONE\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n      example:\n        username: 'tom'\n        password: 'tom123456'\n    Users:\n      type: array\n      items:\n        $ref: '#/components/schemas/User'\n    Tenant:\n      type: object\n      properties:\n        name:\n          type: string\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n      example:\n        name: \"foobar\"\n        users:\n          - username: \"tom\"\n            password: \"12345678\"\n          - username: \"john\"\n            password: \"12345678\"\n    Tenants:\n      type: array\n      items:\n        $ref: '#/components/schemas/Tenant'\n    Node:\n      type: object\n      required:\n        - name\n        - host\n        - username\n        - password\n        - database\n        - weight\n      properties:\n        name:\n          type: string\n        host:\n          type: string\n        port:\n          type: integer\n        username:\n          type: string\n        password:\n          type: string\n        database:\n          type: string\n        weight:\n          type: string\n        parameters:\n          type: object\n      example:\n        name: mysql-axfwq87\n        host: 1.2.3.4\n        port: 3306\n        username: root\n        password: 12345678\n        database: employees_0000\n        weight: r10w10\n    Nodes:\n      type: array\n      items:\n        $ref: '#/components/schemas/Node'\n    Group:\n      type: object\n      required:\n        - name\n        - nodes\n      properties:\n        name:\n          type: string\n        nodes:\n          type: array\n          items:\n            type: string\n      example:\n        name: employees_0000\n        nodes:\n          - mysql-fwijfo8\n          - mysql-we7nvil\n          - mysql-vjm24if\n    Groups:\n      type: array\n      items:\n        $ref: '#/components/schemas/Group'\n    Table:\n      type: object\n      required:\n        - sequence\n        - db_rules\n        - tbl_rules\n        - topology\n        - shadow_topology\n        - attributes\n      properties:\n      # TODO\n      example:\n      # TODO\n    Tables:\n      type: array\n      items:\n        $ref: '#/components/schemas/Table'\n    Cluster:\n      type: object\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n        groups:\n          type: array\n          items:\n            type: string\n      example:\n        name: employees\n        type: mysql\n        groups:\n          - employees_0000\n          - employees_0001\n          - employees_0002\n          - employees_0003\n          - employees_0004\n          - employees_0005\n          - employees_0006\n          - employees_0007\n    Clusters:\n      type: array\n      items:\n        $ref: '#/components/schemas/Cluster'\n",
			"canonicalURL": "/github.com/arana-db/arana@d47a067be2cfb22de2b58dda0cdb8155562d2415/-/blob/pkg/admin/admin.api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/arana-db/arana/blob/d47a067be2cfb22de2b58dda0cdb8155562d2415/pkg/admin/admin.api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: line 545: cannot unmarshal !!null into *ogen.Properties"
}