{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kornicameister/axion"
		},
		"file": {
			"name": "test_default_values.yml",
			"size": 0,
			"path": "typesafety/test_default_values.yml",
			"byteSize": 8327,
			"content": "---\n- case: correct_example\n  oas_spec: |\n    openapi: 3.0.1\n    info:\n      title: title\n      version: 1.0.0\n    servers:\n      - url: /\n    paths:\n      /:\n        get:\n          operationId: main.ce\n          parameters:\n            - name: argA\n              in: query\n              schema:\n                type: integer\n                default: 3\n            - name: argB\n              in: query\n              schema:\n                type: string\n                default: 'argB'\n            - name: argC\n              in: query\n              schema:\n                type: number\n                default: 66.6\n            - name: argD\n              in: query\n              required: true\n              schema:\n                type: boolean\n                default: false\n            - name: argE\n              in: query\n              required: false\n              schema:\n                type: boolean\n            - name: argF\n              in: query\n              required: false\n              schema:\n                type: boolean\n                nullable: true\n            - name: argG\n              in: query\n              required: true\n              schema:\n                type: boolean\n                nullable: true\n          responses:\n            default:\n              description: unexpected error\n  main: |\n    import typing as t\n\n    from axion import oas_endpoint\n    from axion import pipeline\n\n    @oas_endpoint\n    async def ce(\n      arg_a: int=3,\n      arg_b: str='argB',\n      arg_c: float=66.6,\n      arg_d: bool=False,\n      arg_e: t.Optional[bool]=None,\n      arg_f: t.Optional[bool]=None,\n      arg_g: t.Optional[bool]=None,\n    ) -\u003e pipeline.Response:\n      return {}\n- case: default_not_equal\n  oas_spec: |\n    openapi: 3.0.1\n    info:\n      title: title\n      version: 1.0.0\n    servers:\n      - url: /\n    paths:\n      /:\n        get:\n          operationId: main.default_not_equal\n          parameters:\n            - name: argA\n              in: query\n              schema:\n                type: integer\n                format: int64\n                default: 3\n            - name: argB\n              in: query\n              schema:\n                type: string\n                default: 'argB'\n            - name: argC\n              in: query\n              schema:\n                type: number\n                default: 66.6\n            - name: argD\n              in: query\n              schema:\n                type: boolean\n                default: false\n          responses:\n            default:\n              description: unexpected error\n  main: |\n    import typing as t\n    from axion import oas_endpoint\n    from axion import pipeline\n\n    @oas_endpoint\n    async def default_not_equal(\n      arg_a: int=4,\n      arg_b: str='arg_b',\n      arg_c: float=77.7,\n      arg_d: bool=True,\n    ) -\u003e pipeline.Response:\n      return {}\n  out: |\n    main:7: error: [default_not_equal(arg_a -\u003e argA)] Incorrect default value. Expected 3 but got 4  [axion-arg-value]\n    main:8: error: [default_not_equal(arg_b -\u003e argB)] Incorrect default value. Expected argB but got arg_b  [axion-arg-value]\n    main:9: error: [default_not_equal(arg_c -\u003e argC)] Incorrect default value. Expected 66.6 but got 77.7  [axion-arg-value]\n    main:10: error: [default_not_equal(arg_d -\u003e argD)] Incorrect default value. Expected False but got True  [axion-arg-value]\n- case: default_not_in_oas\n  oas_spec: |\n    openapi: 3.0.1\n    info:\n      title: title\n      version: 1.0.0\n    servers:\n      - url: /\n    paths:\n      /:\n        get:\n          operationId: main.default_not_in_oas\n          parameters:\n            - name: argA\n              in: query\n              required: true\n              schema:\n                type: integer\n                format: int64\n            - name: argB\n              in: query\n              required: true\n              schema:\n                type: string\n            - name: argC\n              in: query\n              required: true\n              schema:\n                type: boolean\n          responses:\n            default:\n              description: unexpected error\n  main: |\n    import typing as t\n\n    from axion import oas_endpoint\n    from axion import pipeline\n\n    @oas_endpoint\n    async def default_not_in_oas(\n      arg_a: int=100,\n      arg_b: str='test',\n      arg_c: bool=False,\n    ) -\u003e pipeline.Response:\n      return {}\n  out: |\n    main:8: note: [default_not_in_oas(arg_a -\u003e argA)] OAS does not define a default value. If you want \"100\" to be consistent default value, it should be declared in OAS too.\n    main:9: note: [default_not_in_oas(arg_b -\u003e argB)] OAS does not define a default value. If you want \"test\" to be consistent default value, it should be declared in OAS too.\n    main:10: note: [default_not_in_oas(arg_c -\u003e argC)] OAS does not define a default value. If you want \"False\" to be consistent default value, it should be declared in OAS too.\n- case: default_not_in_handler_required\n  oas_spec: |\n    openapi: 3.0.1\n    info:\n      title: title\n      version: 1.0.0\n    servers:\n      - url: /\n    paths:\n      /:\n        get:\n          operationId: main.d\n          parameters:\n            - name: argA\n              in: query\n              required: true\n              schema:\n                type: integer\n                format: int64\n                default: 100\n            - name: argB\n              in: query\n              required: true\n              schema:\n                type: string\n                default: argB\n          responses:\n            default:\n              description: unexpected error\n  main: |\n    import typing as t\n    from axion import oas_endpoint\n    from axion import pipeline\n\n    @oas_endpoint\n    async def d(\n      arg_a: int,\n      arg_b: str,\n    ) -\u003e pipeline.Response:\n      return {}\n  out: |\n    main:7: error: [d(arg_a -\u003e argA)] OAS defines \"100\" as a default value. It should be reflected in argument default value.  [axion-arg-value]\n    main:8: error: [d(arg_b -\u003e argB)] OAS defines \"argB\" as a default value. It should be reflected in argument default value.  [axion-arg-value]\n- case: default_not_in_handler_not_required\n  oas_spec: |\n    openapi: 3.0.1\n    info:\n      title: title\n      version: 1.0.0\n    servers:\n      - url: /\n    paths:\n      /:\n        get:\n          operationId: main.f\n          parameters:\n            - name: argA\n              in: query\n              required: false\n              schema:\n                type: integer\n                format: int64\n                default: 100\n            - name: argB\n              in: query\n              required: false\n              schema:\n                type: string\n                default: argB\n          responses:\n            default:\n              description: unexpected error\n  main: |\n    import typing as t\n    from axion import oas_endpoint\n    from axion import pipeline\n\n    @oas_endpoint\n    async def f(\n      arg_a: t.Optional[int],\n      arg_b: t.Optional[str],\n    ) -\u003e pipeline.Response:\n      return {}\n  out: |\n    main:7: error: [f(arg_a -\u003e argA)] OAS defines \"100\" as a default value. It should be reflected in argument default value.  [axion-arg-value]\n    main:8: error: [f(arg_b -\u003e argB)] OAS defines \"argB\" as a default value. It should be reflected in argument default value.  [axion-arg-value]\n- case: nullable_handling\n  oas_spec: |\n    openapi: 3.0.1\n    info:\n      title: title\n      version: 1.0.0\n    servers:\n      - url: /\n    paths:\n      /:\n        get:\n          operationId: main.nh\n          parameters:\n            - name: argA\n              in: query\n              schema:\n                type: integer\n                nullable: true\n            - name: argB\n              in: query\n              required: true\n              schema:\n                type: number\n                default: 10.0\n                nullable: true\n          responses:\n            default:\n              description: unexpected error\n  main: |\n    import typing as t\n\n    from axion import oas_endpoint\n    from axion import pipeline\n\n    @oas_endpoint\n    async def nh(\n      arg_a: t.Optional[int]=None,\n      arg_b: t.Optional[float]=11.0,\n    ) -\u003e pipeline.Response:\n      return {}\n  out: |\n    main:9: error: [nh(arg_b -\u003e argB)] Incorrect default value. Expected 10.0 but got 11.0  [axion-arg-value]\n"
		}
	},
	"Error": "unmarshal: json: cannot unmarshal array into Go value of type ogen.Spec"
}