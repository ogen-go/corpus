{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vrchatapi/specification"
		},
		"file": {
			"name": "files.yaml",
			"size": 0,
			"path": "openapi/components/paths/files.yaml",
			"byteSize": 8504,
			"content": "openapi: 3.0.3\ninfo:\n  title: files\n  version: '1.0'\n  description: Files Docs Here\npaths:\n  /files:\n    get:\n      summary: List Files\n      x-codeSamples:\n        $ref: \"../codeSamples/files.yaml#/~1files/get\"\n      responses:\n        '200':\n          $ref: ../responses/files/FileListResponse.yaml\n      operationId: getFiles\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: Returns a list of files\n      parameters:\n        - schema:\n            type: string\n            minLength: 1\n          in: query\n          name: tag\n          description: 'Tag, for example \"icon\" or \"gallery\", not included by default.'\n        - schema:\n            type: string\n          in: query\n          name: userId\n          deprecated: true\n          description: 'UserID, will always generate a 500 permission error.'\n        - $ref: '../parameters.yaml#/number'\n        - $ref: '../parameters.yaml#/offset'\n      tags:\n        - files\n  /file:\n    post:\n      summary: Create File\n      tags:\n        - files\n      x-codeSamples:\n        $ref: \"../codeSamples/files.yaml#/~1file/post\"\n      responses:\n        '200':\n          $ref: ../responses/files/FileResponse.yaml\n      operationId: createFile\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../requests/CreateFileRequest.yaml\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: Creates a new File object\n  '/file/{fileId}':\n    parameters:\n      - $ref: ../parameters.yaml#/fileId\n    get:\n      summary: Show File\n      operationId: getFile\n      tags:\n        - files\n      x-codeSamples:\n        $ref: \"../codeSamples/files.yaml#/~1file~1{fileId}/get\"\n      responses:\n        '200':\n          $ref: ../responses/files/FileResponse.yaml\n        '404':\n          $ref: ../responses/files/FileNotFoundError.yaml\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: 'Shows general information about the \"File\" object. Each File can have several \"Version\"''s, and each Version can have multiple real files or \"Data\" blobs.'\n    delete:\n      summary: Delete File\n      operationId: deleteFile\n      x-codeSamples:\n        $ref: \"../codeSamples/files.yaml#/~1file~1{fileId}/delete\"\n      responses:\n        '200':\n          $ref: ../responses/files/FileDeletedSuccess.yaml\n        '404':\n          $ref: ../responses/files/FileDeletedError.yaml\n      tags:\n        - files\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: Deletes a File object.\n    post:\n      summary: Create File Version\n      operationId: createFileVersion\n      x-codeSamples:\n        $ref: \"../codeSamples/files.yaml#/~1file~1{fileId}/post\"\n      responses:\n        '200':\n          $ref: ../responses/files/FileResponse.yaml\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: 'Creates a new FileVersion. Once a Version has been created, proceed to the `/file/{fileId}/{versionId}/file/start` endpoint to start a file upload.'\n      tags:\n        - files\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../requests/CreateFileVersionRequest.yaml\n  '/file/{fileId}/{versionId}':\n    parameters:\n      - $ref: ../parameters.yaml#/fileId\n      - $ref: ../parameters.yaml#/versionId\n    get:\n      summary: Download File Version\n      tags:\n        - files\n      x-codeSamples:\n        $ref: \"../codeSamples/files.yaml#/~1file~1{fileId}~1{versionId}/get\"\n      responses:\n        '200':\n          $ref: ../responses/files/RawFileResponse.yaml\n      operationId: downloadFileVersion\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: |-\n        Downloads the file with the provided version number.\n\n        **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.\n\n        **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the `extension` field when neccesary.\n    delete:\n      summary: Delete File Version\n      operationId: deleteFileVersion\n      x-codeSamples:\n        $ref: \"../codeSamples/files.yaml#/~1file~1{fileId}~1{versionId}/delete\"\n      responses:\n        '200':\n          $ref: ../responses/files/FileResponse.yaml\n        '400':\n          $ref: ../responses/files/FileVersionDeleteInitialError.yaml\n        '500':\n          $ref: ../responses/files/FileVersionDeleteMiddleError.yaml\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: Delete a specific version of a file. You can only delete the latest version.\n      tags:\n        - files\n  '/file/{fileId}/{versionId}/{fileType}/status':\n    parameters:\n      - $ref: ../parameters.yaml#/fileId\n      - $ref: ../parameters.yaml#/versionId\n      - $ref: ../parameters.yaml#/fileType\n    get:\n      summary: Check FileData Upload Status\n      tags:\n        - files\n      x-codeSamples:\n        $ref: \"../codeSamples/files.yaml#/~1file~1{fieldId}~1{versionId}~1{fileType}~1status/get\"\n      responses:\n        '200':\n          $ref: ../responses/files/FileVersionUploadStatusResponse.yaml\n      operationId: getFileDataUploadStatus\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: Retrieves the upload status for file upload. Can currently only be accessed when `status` is `waiting`. Trying to access it on a file version already uploaded currently times out.\n  '/file/{fileId}/{versionId}/{fileType}/start':\n    parameters:\n      - $ref: ../parameters.yaml#/fileId\n      - $ref: ../parameters.yaml#/versionId\n      - $ref: ../parameters.yaml#/fileType\n    put:\n      summary: Start FileData Upload\n      tags:\n        - files\n      x-codeSamples:\n        $ref: \"../codeSamples/files.yaml#/~1file~1{fileId}~1{versionId}~1{fileType}~1start/put\"\n      responses:\n        '200':\n          $ref: ../responses/files/FileUploadURLResponse.yaml\n        '400':\n          $ref: ../responses/files/FileUploadAlreadyFinishedError.yaml\n      operationId: startFileDataUpload\n      parameters:\n        - schema:\n            type: integer\n            minimum: 0\n            example: 1\n          in: query\n          name: partNumber\n          required: false\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: |-\n        Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each `partNumber`. Please see AWS's REST documentation on \"PUT Object to S3\" on how to upload. Once all parts has been uploaded, proceed to `/finish` endpoint.\n\n        **Note:** `nextPartNumber` seems like it is always ignored. Despite it returning 0, first partNumber is always 1.\n  '/file/{fileId}/{versionId}/{fileType}/finish':\n    parameters:\n      - $ref: ../parameters.yaml#/fileId\n      - $ref: ../parameters.yaml#/versionId\n      - $ref: ../parameters.yaml#/fileType\n    put:\n      summary: Finish FileData Upload\n      tags:\n        - files\n      x-codeSamples:\n        $ref: \"../codeSamples/files.yaml#/~1file~1{fileId}~1{versionId}~1{fileType}~1finish/put\"\n      responses:\n        '200':\n          $ref: ../responses/files/FileResponse.yaml\n      operationId: finishFileDataUpload\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../requests/FinishFileDataUploadRequest.yaml\n            examples:\n              Example Request:\n                value:\n                  etags:\n                    - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n                    - yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\n                  nextPartNumber: '0'\n                  maxParts: '0'\n        description: |-\n          Please see documentation on ETag's:\n          [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)\n\n          ETag's should NOT be present when uploading a `signature`.\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: Finish an upload of a FileData. This will mark it as \"complete\". After uploading the `file` for Avatars and Worlds you then have to upload a `signature` file.\ntags:\n  $ref: ../tags.yaml\ncomponents:\n  securitySchemes:\n    $ref: ../securitySchemes.yaml\n",
			"canonicalURL": "/github.com/vrchatapi/specification@1a2a4afbfad496a5b0ead6684fa47d01d02387bc/-/blob/openapi/components/paths/files.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/vrchatapi/specification/blob/1a2a4afbfad496a5b0ead6684fa47d01d02387bc/openapi/components/paths/files.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!str `../secu...` into ogen.SecurityScheme; yaml: line 1: cannot unmarshal !!map into []ogen.Tag"
}