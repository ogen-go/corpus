{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/blockfrost/blockfrost-dotnet"
		},
		"file": {
			"name": "swagger_simple.yaml",
			"size": 0,
			"path": "oas/0.1.27/swagger_simple.yaml",
			"byteSize": 19885,
			"content": "openapi: 3.0.0\ninfo:\n  version: \"0.1.27\"\n  title: Blockfrost.io ~ API Documentation\n  x-logo:\n    url: https://staging.blockfrost.io/images/logo.svg\n    altText: Blockfrost\n  contact:\n    name: Blockfrost Team\n    url: \"https://blockfrost.io\"\n    email: contact@blockfrost.io\n  license:\n    name: MIT\n    url: \"https://opensource.org/licenses/MIT\"\n  termsOfService: \"https://blockfrost.io/terms\"\n  description: |\n    Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.\n\nservers:\n  - url: https://cardano-mainnet.blockfrost.io/api/v0/\n    description: Cardano Mainnet network\n  - url: https://cardano-testnet.blockfrost.io/api/v0/\n    description: Cardano Testnet network\n  - url: https://localhost:3000\n    description: local\n\nsecurity:\n  - ApiKeyAuth: []\n\ntags:\n  - name: Health\n  - name: Cardano � Blocks\n  - name: Cardano � Epochs\n  - name: Cardano � Pools\n\npaths:\n  /:\n    get:\n      tags:\n        - Health\n      summary: Root endpoint\n      description: |\n        Root endpoint has no other function than to point end users to documentation.\n      responses:\n        \"200\":\n          description: Information pointing to the documentation.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  url:\n                    type: string\n                    example: \"https://blockfrost.io/\"\n                  version:\n                    type: string\n                    example: \"0.1.0\"\n                required:\n                  - url\n                  - version\n        \"400\":\n          $ref: \"#/components/responses/bad_request\"\n        \"403\":\n          $ref: \"#/components/responses/unauthorized_error\"\n        \"429\":\n          $ref: \"#/components/responses/overusage_limit\"\n        \"418\":\n          $ref: \"#/components/responses/autobanned\"\n        \"500\":\n          $ref: \"#/components/responses/internal_server_error\"\n\n  /health:\n    get:\n      tags:\n        - Health\n      summary: Backend health status\n      description: |\n        Return backend status as a boolean. Your application\n            should handle situations when backend for the given chain is unavailable.\n      responses:\n        \"200\":\n          description: Return the boolean indicating the health of the backend.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  is_healthy:\n                    type: boolean\n                    example: true\n                required:\n                  - is_healthy\n        \"400\":\n          $ref: \"#/components/responses/bad_request\"\n        \"403\":\n          $ref: \"#/components/responses/unauthorized_error\"\n        \"429\":\n          $ref: \"#/components/responses/overusage_limit\"\n        \"418\":\n          $ref: \"#/components/responses/autobanned\"\n        \"500\":\n          $ref: \"#/components/responses/internal_server_error\"\n\n  /health/clock:\n    get:\n      tags:\n        - Health\n      summary: Current backend time\n      description: |\n        This endpoint provides the current UNIX time. Your application might\n        use this to verify if the client clock is not out of sync.\n      responses:\n        \"200\":\n          description: Return the current UNIX time in milliseconds.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  server_time:\n                    type: integer\n                    format: int64\n                    example: 1603400958947\n                required:\n                  - server_time\n        \"400\":\n          $ref: \"#/components/responses/bad_request\"\n        \"403\":\n          $ref: \"#/components/responses/unauthorized_error\"\n        \"429\":\n          $ref: \"#/components/responses/overusage_limit\"\n        \"418\":\n          $ref: \"#/components/responses/autobanned\"\n        \"500\":\n          $ref: \"#/components/responses/internal_server_error\"\n\n  /blocks/latest:\n    get:\n      tags:\n        - Cardano � Blocks\n      summary: Latest block\n      description: |\n        Return the latest block available to the backends, also known as the\n        tip of the blockchain.\n      responses:\n        \"200\":\n          description: Return the contents of the latest block.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/block_content\"\n        \"400\":\n          $ref: \"#/components/responses/bad_request\"\n        \"403\":\n          $ref: \"#/components/responses/unauthorized_error\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"429\":\n          $ref: \"#/components/responses/overusage_limit\"\n        \"418\":\n          $ref: \"#/components/responses/autobanned\"\n        \"500\":\n          $ref: \"#/components/responses/internal_server_error\"\n\n  /blocks/{hash_or_number}/next:\n    get:\n      tags:\n        - Cardano � Blocks\n      summary: Listing of next blocks\n      description: |\n        Return the list of blocks following a specific block.\n      parameters:\n        - in: path\n          name: hash_or_number\n          required: true\n          schema:\n            type: string\n            format: 64-character case-sensitive hexadecimal string or block number.\n          description: Hash of the requested block.\n          example: \"5ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a\"\n        - in: query\n          name: count\n          required: false\n          schema:\n            type: integer\n            maximum: 100\n            default: 100\n          description: The number of results displayed on one page.\n        - in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            default: 1\n          description: The page number for listing the results.\n      responses:\n        \"200\":\n          description: Return the contents of the block.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/block_content_array\"\n        \"400\":\n          $ref: \"#/components/responses/bad_request\"\n        \"403\":\n          $ref: \"#/components/responses/unauthorized_error\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"429\":\n          $ref: \"#/components/responses/overusage_limit\"\n        \"418\":\n          $ref: \"#/components/responses/autobanned\"\n        \"500\":\n          $ref: \"#/components/responses/internal_server_error\"\n  /epochs/latest:\n    get:\n      tags:\n        - Cardano � Epochs\n      summary: Latest epoch\n      description: Return the information about the latest, therefore current, epoch.\n      responses:\n        \"200\":\n          description: Return the data about the epoch\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/epoch_content\"\n        \"400\":\n          $ref: \"#/components/responses/bad_request\"\n        \"403\":\n          $ref: \"#/components/responses/unauthorized_error\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"429\":\n          $ref: \"#/components/responses/overusage_limit\"\n        \"418\":\n          $ref: \"#/components/responses/autobanned\"\n        \"500\":\n          $ref: \"#/components/responses/internal_server_error\"\n  /pools/{pool_id}/metadata:\n    get:\n      tags:\n        - Cardano � Pools\n      summary: Stake pool metadata\n      description: |\n        Stake pool registration metadata.\n      parameters:\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            type: string\n          description: Bech32 or hexadecimal pool ID.\n          example: \"pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy\"\n      responses:\n        \"200\":\n          description: Return the pool metadata content.\n          content:\n            application/json:\n              schema:\n                anyOf:\n                  - $ref: \"#/components/schemas/pool_metadata\"\n                  - $ref: \"#/components/schemas/empty_object\"\n        \"400\":\n          $ref: \"#/components/responses/bad_request\"\n        \"403\":\n          $ref: \"#/components/responses/unauthorized_error\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"429\":\n          $ref: \"#/components/responses/overusage_limit\"\n        \"418\":\n          $ref: \"#/components/responses/autobanned\"\n        \"500\":\n          $ref: \"#/components/responses/internal_server_error\"\ncomponents:\n  responses:\n    overusage_limit:\n      description: Usage limit reached\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              status_code:\n                type: integer\n                example: 429\n              error:\n                type: string\n                example: \"Project Over Limit\"\n              message:\n                type: string\n                example: \"Usage is over limit.\"\n            required:\n              - status_code\n              - error\n              - message\n\n    autobanned:\n      description: IP has been auto-banned for extensive sending of requests after usage limit has been reached\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              status_code:\n                type: integer\n                example: 418\n              error:\n                type: string\n                example: \"Requested Banned\"\n              message:\n                type: string\n                example: \"IP has been auto-banned for flooding.\"\n            required:\n              - status_code\n              - error\n              - message\n\n    not_found:\n      description: Component not found\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              status_code:\n                type: integer\n                example: 404\n              error:\n                type: string\n                example: \"Not Found\"\n              message:\n                type: string\n                example: \"The requested component has not been found.\"\n            required:\n              - status_code\n              - error\n              - message\n\n    internal_server_error:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              status_code:\n                type: integer\n                example: 500\n              error:\n                type: string\n                example: \"Internal Server Error\"\n              message:\n                type: string\n                example: \"An unexpected response was received from the backend.\"\n            required:\n              - status_code\n              - error\n              - message\n\n    unauthorized_error:\n      description: Authentication secret is missing or invalid\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              status_code:\n                type: integer\n                example: 403\n              error:\n                type: string\n                example: \"Forbidden\"\n              message:\n                type: string\n                example: \"Invalid project token.\"\n            required:\n              - status_code\n              - error\n              - message\n\n    bad_request:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              status_code:\n                type: integer\n                example: 400\n              error:\n                type: string\n                example: \"Bad Request\"\n              message:\n                type: string\n                example: \"Backend did not understand your request.\"\n            required:\n              - status_code\n              - error\n              - message\n\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: project_id\n      description: |\n        There are multiple token types available based on network you choose\n        when creating a Blockfrost a project, for a list of token types\n        see [Available networks](#section/Available-networks)\n\n  schemas:\n    block_content_array:\n      type: array\n      items:\n        $ref: \"#/components/schemas/block_content\"\n    block_content:\n      type: object\n      properties:\n        time:\n          type: integer\n          example: 1641338934\n          description: Block creation time in UNIX time\n        height:\n          type: integer\n          nullable: true\n          example: 15243593\n          description: Block number\n        hash:\n          type: string\n          example: \"4ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a\"\n          description: Hash of the block\n        slot:\n          type: integer\n          nullable: true\n          example: 412162133\n          description: Slot number\n        epoch:\n          type: integer\n          nullable: true\n          example: 425\n          description: Epoch number\n        epoch_slot:\n          type: integer\n          nullable: true\n          example: 12\n          description: Slot within the epoch\n        slot_leader:\n          type: string\n          example: \"pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2qnikdy\"\n          description: Bech32 ID of the slot leader or specific block description in case there is no slot leader\n        size:\n          type: integer\n          example: 3\n          description: Block size in Bytes\n        tx_count:\n          type: integer\n          example: 1\n          description: Number of transactions in the block\n        output:\n          type: string\n          nullable: true\n          example: \"128314491794\"\n          description: Total output within the block in Lovelaces\n        fees:\n          type: string\n          nullable: true\n          example: \"592661\"\n          description: Total fees within the block in Lovelaces\n        block_vrf:\n          type: string\n          nullable: true\n          example: \"vrf_vk1wf2k6lhujezqcfe00l6zetxpnmh9n6mwhpmhm0dvfh3fxgmdnrfqkms8ty\"\n          description: VRF key of the block\n          minLength: 65\n          maxLength: 65\n        previous_block:\n          type: string\n          nullable: true\n          example: \"43ebccb3ac72c7cebd0d9b755a4b08412c9f5dcb81b8a0ad1e3c197d29d47b05\"\n          description: Hash of the previous block\n        next_block:\n          type: string\n          nullable: true\n          example: \"8367f026cf4b03e116ff8ee5daf149b55ba5a6ec6dec04803b8dc317721d15fa\"\n          description: Hash of the next block\n        confirmations:\n          type: integer\n          example: 4698\n          description: Number of block confirmations\n      required:\n        - time\n        - height\n        - hash\n        - slot\n        - epoch\n        - epoch_slot\n        - slot_leader\n        - size\n        - tx_count\n        - output\n        - fees\n        - block_vrf\n        - previous_block\n        - next_block\n        - confirmations\n    epoch_content_array:\n        type: array\n        items:\n        $ref: \"#/components/schemas/epoch_content\"\n    epoch_content:\n        type: object\n        properties:\n        epoch:\n            type: integer\n            example: 225\n            description: Epoch number\n        start_time:\n            type: integer\n            example: 1603403091\n            description: Unix time of the start of the epoch\n        end_time:\n            type: integer\n            example: 1603835086\n            description: Unix time of the end of the epoch\n        first_block_time:\n            type: integer\n            example: 1603403092\n            description: Unix time of the first block of the epoch\n        last_block_time:\n            type: integer\n            example: 1603835084\n            description: Unix time of the last block of the epoch\n        block_count:\n            type: integer\n            example: 21298\n            description: Number of blocks within the epoch\n        tx_count:\n            type: integer\n            example: 17856\n            description: Number of transactions within the epoch\n        output:\n            type: string\n            example: \"7849943934049314\"\n            description: Sum of all the transactions within the epoch in Lovelaces\n        fees:\n            type: string\n            example: \"4203312194\"\n            description: Sum of all the fees within the epoch in Lovelaces\n        active_stake:\n            nullable: true\n            type: string\n            example: \"784953934049314\"\n            description: Sum of all the active stakes within the epoch in Lovelaces\n        required:\n        - epoch\n        - start_time\n        - end_time\n        - first_block_time\n        - last_block_time\n        - block_count\n        - tx_count\n        - output\n        - fees\n        - active_stake \n    pool_metadata:\n      type: object\n      properties:\n        pool_id:\n          type: string\n          example: \"pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy\"\n          description: Bech32 pool ID\n        hex:\n          type: string\n          example: \"0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735\"\n          description: Hexadecimal pool ID\n        url:\n          type: string\n          nullable: true\n          example: \"https://stakenuts.com/mainnet.json\"\n          description: URL to the stake pool metadata\n        hash:\n          type: string\n          nullable: true\n          example: \"47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c\"\n          description: Hash of the metadata file\n        ticker:\n          type: string\n          nullable: true\n          example: \"NUTS\"\n          description: Ticker of the stake pool\n        name:\n          type: string\n          nullable: true\n          example: \"Stake Nuts\"\n          description: Name of the stake pool\n        description:\n          type: string\n          nullable: true\n          example: \"The best pool ever\"\n          description: Description of the stake pool\n        homepage:\n          type: string\n          nullable: true\n          example: \"https://stakentus.com/\"\n          description: Home page of the stake pool\n      required:\n        - pool_id\n        - hex\n        - url\n        - hash\n        - ticker\n        - name\n        - description\n        - homepage\n    network:\n      type: object\n      properties:\n        supply:\n          type: object\n          properties:\n            max:\n              type: string\n              description: Maximum supply in Lovelaces\n              example: \"45000000000000000\"\n            total:\n              type: string\n              description: Current total (max supply - reserves) supply in Lovelaces\n              example: \"32890715183299160\"\n            circulating:\n              type: string\n              description: Current circulating (UTXOs + withdrawables) supply in Lovelaces\n              example: \"32412601976210393\"\n            locked:\n              type: string\n              description: Curent locked supply by scripts in Lovelaces\n              example: \"125006953355\"\n          required:\n            - max\n            - total\n            - circulating\n            - locked\n        stake:\n          type: object\n          properties:\n            live:\n              type: string\n              example: \"23204950463991654\"\n              description: Current live stake in Lovelaces\n            active:\n              type: string\n              description: Current active stake in Lovelaces\n              example: \"22210233523456321\"\n          required:\n            - live\n            - active\n      required:\n        - supply\n        - stake\n\n    empty_object:\n      type: object\n",
			"canonicalURL": "/github.com/blockfrost/blockfrost-dotnet@b8016c5b2e3322155d84c09dc3bea678702da62c/-/blob/oas/0.1.27/swagger_simple.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/blockfrost/blockfrost-dotnet/blob/b8016c5b2e3322155d84c09dc3bea678702da62c/oas/0.1.27/swagger_simple.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: unexpected YAML kind 8"
}