{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/influxdata/openapi"
		},
		"file": {
			"name": "cloud.yml",
			"size": 0,
			"path": "contracts/ref/cloud.yml",
			"byteSize": 355298,
			"content": "components:\n  parameters:\n    After:\n      description: |\n        Resource ID to seek from. Results are not inclusive of this ID. Use `after` instead of `offset`.\n      in: query\n      name: after\n      required: false\n      schema:\n        type: string\n    Descending:\n      in: query\n      name: descending\n      required: false\n      schema:\n        default: false\n        type: boolean\n    Limit:\n      in: query\n      name: limit\n      required: false\n      schema:\n        default: 20\n        maximum: 100\n        minimum: 1\n        type: integer\n    Offset:\n      in: query\n      name: offset\n      required: false\n      schema:\n        minimum: 0\n        type: integer\n    SortBy:\n      in: query\n      name: sortBy\n      required: false\n      schema:\n        type: string\n    TraceSpan:\n      description: OpenTracing span context\n      example:\n        baggage:\n          key: value\n        span_id: \"1\"\n        trace_id: \"1\"\n      in: header\n      name: Zap-Trace-Span\n      required: false\n      schema:\n        type: string\n  responses:\n    ServerError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Non 2XX error response from server.\n  schemas:\n    ASTResponse:\n      description: Contains the AST for the supplied Flux query\n      properties:\n        ast:\n          $ref: '#/components/schemas/Package'\n      type: object\n    AddResourceMemberRequestBody:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n      required:\n      - id\n      type: object\n    AnalyzeQueryResponse:\n      properties:\n        errors:\n          items:\n            properties:\n              character:\n                type: integer\n              column:\n                type: integer\n              line:\n                type: integer\n              message:\n                type: string\n            type: object\n          type: array\n      type: object\n    ArrayExpression:\n      description: Used to create and directly specify the elements of an array object\n      properties:\n        elements:\n          description: Elements of the array\n          items:\n            $ref: '#/components/schemas/Expression'\n          type: array\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    Authorization:\n      allOf:\n      - $ref: '#/components/schemas/AuthorizationUpdateRequest'\n      - properties:\n          createdAt:\n            format: date-time\n            readOnly: true\n            type: string\n          id:\n            readOnly: true\n            type: string\n          links:\n            example:\n              self: /api/v2/authorizations/1\n              user: /api/v2/users/12\n            properties:\n              self:\n                $ref: '#/components/schemas/Link'\n                readOnly: true\n              user:\n                $ref: '#/components/schemas/Link'\n                readOnly: true\n            readOnly: true\n            type: object\n          org:\n            description: Name of the org token is scoped to.\n            readOnly: true\n            type: string\n          orgID:\n            description: ID of org that authorization is scoped to.\n            type: string\n          permissions:\n            description: List of permissions for an auth.  An auth must have at least\n              one Permission.\n            items:\n              $ref: '#/components/schemas/Permission'\n            minItems: 1\n            type: array\n          token:\n            description: Passed via the Authorization Header and Token Authentication\n              type.\n            readOnly: true\n            type: string\n          updatedAt:\n            format: date-time\n            readOnly: true\n            type: string\n          user:\n            description: Name of user that created and owns the token.\n            readOnly: true\n            type: string\n          userID:\n            description: ID of user that created and owns the token.\n            readOnly: true\n            type: string\n        type: object\n      required:\n      - orgID\n      - permissions\n    AuthorizationUpdateRequest:\n      properties:\n        description:\n          description: A description of the token.\n          type: string\n        status:\n          default: active\n          description: Status of the token. If `inactive`, requests using the token\n            will be rejected.\n          enum:\n          - active\n          - inactive\n          type: string\n    Authorizations:\n      properties:\n        authorizations:\n          items:\n            $ref: '#/components/schemas/Authorization'\n          type: array\n        links:\n          $ref: '#/components/schemas/Links'\n          readOnly: true\n      type: object\n    Axes:\n      description: The viewport for a View's visualizations\n      properties:\n        x:\n          $ref: '#/components/schemas/Axis'\n        \"y\":\n          $ref: '#/components/schemas/Axis'\n      required:\n      - x\n      - \"y\"\n      type: object\n    Axis:\n      description: Axis used in a visualization.\n      properties:\n        base:\n          description: Radix for formatting axis values.\n          enum:\n          - \"\"\n          - \"2\"\n          - \"10\"\n          type: string\n        bounds:\n          description: The extents of the axis in the form [lower, upper]. Clients\n            determine whether bounds are inclusive or exclusive of their limits.\n          items:\n            type: string\n          maxItems: 2\n          minItems: 0\n          type: array\n        label:\n          description: Description of the axis.\n          type: string\n        prefix:\n          description: Label prefix for formatting axis values.\n          type: string\n        scale:\n          $ref: '#/components/schemas/AxisScale'\n        suffix:\n          description: Label suffix for formatting axis values.\n          type: string\n      type: object\n    AxisScale:\n      description: 'Scale is the axis formatting scale. Supported: \"log\", \"linear\"'\n      enum:\n      - log\n      - linear\n      type: string\n    BadStatement:\n      description: A placeholder for statements for which no correct statement nodes\n        can be created\n      properties:\n        text:\n          description: Raw source text\n          type: string\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    BandViewProperties:\n      properties:\n        axes:\n          $ref: '#/components/schemas/Axes'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n          type: array\n        generateXAxisTicks:\n          items:\n            type: string\n          type: array\n        generateYAxisTicks:\n          items:\n            type: string\n          type: array\n        geom:\n          $ref: '#/components/schemas/XYGeom'\n        hoverDimension:\n          enum:\n          - auto\n          - x\n          - \"y\"\n          - xy\n          type: string\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          format: float\n          type: number\n        legendOrientationThreshold:\n          type: integer\n        lowerColumn:\n          type: string\n        mainColumn:\n          type: string\n        note:\n          type: string\n        queries:\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n          type: array\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        staticLegend:\n          $ref: '#/components/schemas/StaticLegend'\n        timeFormat:\n          type: string\n        type:\n          enum:\n          - band\n          type: string\n        upperColumn:\n          type: string\n        xColumn:\n          type: string\n        xTickStart:\n          format: float\n          type: number\n        xTickStep:\n          format: float\n          type: number\n        xTotalTicks:\n          type: integer\n        yColumn:\n          type: string\n        yTickStart:\n          format: float\n          type: number\n        yTickStep:\n          format: float\n          type: number\n        yTotalTicks:\n          type: integer\n      required:\n      - type\n      - geom\n      - queries\n      - shape\n      - axes\n      - colors\n      - note\n      - showNoteWhenEmpty\n      type: object\n    BinaryExpression:\n      description: uses binary operators to act on two operands in an expression\n      properties:\n        left:\n          $ref: '#/components/schemas/Expression'\n        operator:\n          type: string\n        right:\n          $ref: '#/components/schemas/Expression'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    Block:\n      description: A set of statements\n      properties:\n        body:\n          description: Block body\n          items:\n            $ref: '#/components/schemas/Statement'\n          type: array\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    BooleanLiteral:\n      description: Represents boolean values\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: boolean\n      type: object\n    Bucket:\n      properties:\n        createdAt:\n          format: date-time\n          readOnly: true\n          type: string\n        description:\n          type: string\n        id:\n          readOnly: true\n          type: string\n        labels:\n          $ref: '#/components/schemas/Labels'\n        links:\n          example:\n            labels: /api/v2/buckets/1/labels\n            members: /api/v2/buckets/1/members\n            org: /api/v2/orgs/2\n            owners: /api/v2/buckets/1/owners\n            self: /api/v2/buckets/1\n            write: /api/v2/write?org=2\u0026bucket=1\n          properties:\n            labels:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve labels for this bucket.\n            members:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve members that can read this bucket.\n            org:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve parent organization for this bucket.\n            owners:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve owners that can read and write to this\n                bucket.\n            self:\n              $ref: '#/components/schemas/Link'\n              description: URL for this bucket.\n            write:\n              $ref: '#/components/schemas/Link'\n              description: URL to write line protocol to this bucket.\n          readOnly: true\n          type: object\n        name:\n          type: string\n        orgID:\n          type: string\n        retentionRules:\n          $ref: '#/components/schemas/RetentionRules'\n        rp:\n          type: string\n        schemaType:\n          $ref: '#/components/schemas/SchemaType'\n          default: implicit\n        type:\n          default: user\n          enum:\n          - user\n          - system\n          readOnly: true\n          type: string\n        updatedAt:\n          format: date-time\n          readOnly: true\n          type: string\n      required:\n      - name\n      - retentionRules\n    Buckets:\n      properties:\n        buckets:\n          items:\n            $ref: '#/components/schemas/Bucket'\n          type: array\n        links:\n          $ref: '#/components/schemas/Links'\n          readOnly: true\n      type: object\n    BuilderAggregateFunctionType:\n      enum:\n      - filter\n      - group\n      type: string\n    BuilderConfig:\n      properties:\n        aggregateWindow:\n          properties:\n            fillValues:\n              type: boolean\n            period:\n              type: string\n          type: object\n        buckets:\n          items:\n            type: string\n          type: array\n        functions:\n          items:\n            $ref: '#/components/schemas/BuilderFunctionsType'\n          type: array\n        tags:\n          items:\n            $ref: '#/components/schemas/BuilderTagsType'\n          type: array\n      type: object\n    BuilderFunctionsType:\n      properties:\n        name:\n          type: string\n      type: object\n    BuilderTagsType:\n      properties:\n        aggregateFunctionType:\n          $ref: '#/components/schemas/BuilderAggregateFunctionType'\n        key:\n          type: string\n        values:\n          items:\n            type: string\n          type: array\n      type: object\n    BuiltinStatement:\n      description: Declares a builtin identifier and its type\n      properties:\n        id:\n          $ref: '#/components/schemas/Identifier'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    CallExpression:\n      description: Represents a function call\n      properties:\n        arguments:\n          description: Function arguments\n          items:\n            $ref: '#/components/schemas/Expression'\n          type: array\n        callee:\n          $ref: '#/components/schemas/Expression'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    Cell:\n      properties:\n        h:\n          format: int32\n          type: integer\n        id:\n          type: string\n        links:\n          properties:\n            self:\n              type: string\n            view:\n              type: string\n          type: object\n        viewID:\n          description: The reference to a view from the views API.\n          type: string\n        w:\n          format: int32\n          type: integer\n        x:\n          format: int32\n          type: integer\n        \"y\":\n          format: int32\n          type: integer\n      type: object\n    CellUpdate:\n      properties:\n        h:\n          format: int32\n          type: integer\n        w:\n          format: int32\n          type: integer\n        x:\n          format: int32\n          type: integer\n        \"y\":\n          format: int32\n          type: integer\n      type: object\n    CellWithViewProperties:\n      allOf:\n      - $ref: '#/components/schemas/Cell'\n      - properties:\n          name:\n            type: string\n          properties:\n            $ref: '#/components/schemas/ViewProperties'\n        type: object\n      type: object\n    Cells:\n      items:\n        $ref: '#/components/schemas/Cell'\n      type: array\n    CellsWithViewProperties:\n      items:\n        $ref: '#/components/schemas/CellWithViewProperties'\n      type: array\n    Check:\n      allOf:\n      - $ref: '#/components/schemas/CheckDiscriminator'\n    CheckBase:\n      properties:\n        createdAt:\n          format: date-time\n          readOnly: true\n          type: string\n        description:\n          description: An optional description of the check.\n          type: string\n        id:\n          readOnly: true\n          type: string\n        labels:\n          $ref: '#/components/schemas/Labels'\n        lastRunError:\n          readOnly: true\n          type: string\n        lastRunStatus:\n          enum:\n          - failed\n          - success\n          - canceled\n          readOnly: true\n          type: string\n        latestCompleted:\n          description: Timestamp (in RFC3339 date/time format](https://datatracker.ietf.org/doc/html/rfc3339))\n            of the latest scheduled and completed run.\n          format: date-time\n          readOnly: true\n          type: string\n        links:\n          example:\n            labels: /api/v2/checks/1/labels\n            members: /api/v2/checks/1/members\n            owners: /api/v2/checks/1/owners\n            query: /api/v2/checks/1/query\n            self: /api/v2/checks/1\n          properties:\n            labels:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve labels for this check\n            members:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve members for this check\n            owners:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve owners for this check\n            query:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve flux script for this check\n            self:\n              $ref: '#/components/schemas/Link'\n              description: URL for this check\n          readOnly: true\n          type: object\n        name:\n          type: string\n        orgID:\n          description: The ID of the organization that owns this check.\n          type: string\n        ownerID:\n          description: The ID of creator used to create this check.\n          readOnly: true\n          type: string\n        query:\n          $ref: '#/components/schemas/DashboardQuery'\n        status:\n          $ref: '#/components/schemas/TaskStatusType'\n        taskID:\n          description: The ID of the task associated with this check.\n          type: string\n        updatedAt:\n          format: date-time\n          readOnly: true\n          type: string\n      required:\n      - name\n      - orgID\n      - query\n    CheckDiscriminator:\n      discriminator:\n        mapping:\n          custom: '#/components/schemas/CustomCheck'\n          deadman: '#/components/schemas/DeadmanCheck'\n          threshold: '#/components/schemas/ThresholdCheck'\n        propertyName: type\n      oneOf:\n      - $ref: '#/components/schemas/DeadmanCheck'\n      - $ref: '#/components/schemas/ThresholdCheck'\n      - $ref: '#/components/schemas/CustomCheck'\n    CheckPatch:\n      properties:\n        description:\n          type: string\n        name:\n          type: string\n        status:\n          enum:\n          - active\n          - inactive\n          type: string\n      type: object\n    CheckStatusLevel:\n      description: The state to record if check matches a criteria.\n      enum:\n      - UNKNOWN\n      - OK\n      - INFO\n      - CRIT\n      - WARN\n      type: string\n    CheckViewProperties:\n      properties:\n        check:\n          $ref: '#/components/schemas/Check'\n        checkID:\n          type: string\n        colors:\n          description: Colors define color encoding of data into a visualization\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n          type: array\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          format: float\n          type: number\n        legendOrientationThreshold:\n          type: integer\n        queries:\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n          type: array\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        type:\n          enum:\n          - check\n          type: string\n      required:\n      - type\n      - shape\n      - checkID\n      - queries\n      - colors\n      type: object\n    Checks:\n      properties:\n        checks:\n          items:\n            $ref: '#/components/schemas/Check'\n          type: array\n        links:\n          $ref: '#/components/schemas/Links'\n    ColorMapping:\n      additionalProperties:\n        type: string\n      description: A color mapping is an object that maps time series data to a UI\n        color scheme to allow the UI to render graphs consistent colors across reloads.\n      example:\n        configcat_deployments-autopromotionblocker: '#663cd0'\n        measurement_birdmigration_europe: '#663cd0'\n        series_id_1: '#edf529'\n        series_id_2: '#edf529'\n      type: object\n    ColumnDataType:\n      enum:\n      - integer\n      - float\n      - boolean\n      - string\n      - unsigned\n      type: string\n    ColumnSemanticType:\n      enum:\n      - timestamp\n      - tag\n      - field\n      nullable: false\n      type: string\n    ConditionalExpression:\n      description: Selects one of two expressions, `Alternate` or `Consequent`, depending\n        on a third boolean expression, `Test`\n      properties:\n        alternate:\n          $ref: '#/components/schemas/Expression'\n        consequent:\n          $ref: '#/components/schemas/Expression'\n        test:\n          $ref: '#/components/schemas/Expression'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    ConstantVariableProperties:\n      properties:\n        type:\n          enum:\n          - constant\n          type: string\n        values:\n          items:\n            type: string\n          type: array\n    CreateCell:\n      properties:\n        h:\n          format: int32\n          type: integer\n        name:\n          type: string\n        usingView:\n          description: Makes a copy of the provided view.\n          type: string\n        w:\n          format: int32\n          type: integer\n        x:\n          format: int32\n          type: integer\n        \"y\":\n          format: int32\n          type: integer\n      type: object\n    CreateDashboardRequest:\n      properties:\n        description:\n          description: The user-facing description of the dashboard.\n          type: string\n        name:\n          description: The user-facing name of the dashboard.\n          type: string\n        orgID:\n          description: The ID of the organization that owns the dashboard.\n          type: string\n      required:\n      - orgID\n      - name\n    CustomCheck:\n      allOf:\n      - $ref: '#/components/schemas/CheckBase'\n      - properties:\n          type:\n            enum:\n            - custom\n            type: string\n        required:\n        - type\n        type: object\n    DBRP:\n      properties:\n        bucketID:\n          description: ID of the bucket used as the target for the translation.\n          type: string\n        database:\n          description: InfluxDB v1 database\n          type: string\n        default:\n          description: Mapping represents the default retention policy for the database\n            specified.\n          type: boolean\n        id:\n          description: ID of the DBRP mapping.\n          readOnly: true\n          type: string\n        links:\n          $ref: '#/components/schemas/Links'\n        orgID:\n          description: ID of the organization that owns this mapping.\n          type: string\n        retention_policy:\n          description: InfluxDB v1 retention policy\n          type: string\n      required:\n      - id\n      - orgID\n      - bucketID\n      - database\n      - retention_policy\n      - default\n      type: object\n    DBRPCreate:\n      properties:\n        bucketID:\n          description: ID of the bucket used as the target for the translation.\n          type: string\n        database:\n          description: InfluxDB v1 database\n          type: string\n        default:\n          description: Mapping represents the default retention policy for the database\n            specified.\n          type: boolean\n        org:\n          description: Name of the organization that owns this mapping.\n          type: string\n        orgID:\n          description: ID of the organization that owns this mapping.\n          type: string\n        retention_policy:\n          description: InfluxDB v1 retention policy\n          type: string\n      required:\n      - bucketID\n      - database\n      - retention_policy\n      type: object\n    DBRPGet:\n      properties:\n        content:\n          $ref: '#/components/schemas/DBRP'\n          required: true\n      type: object\n    DBRPUpdate:\n      properties:\n        default:\n          type: boolean\n        retention_policy:\n          description: InfluxDB v1 retention policy\n          type: string\n    DBRPs:\n      properties:\n        content:\n          items:\n            $ref: '#/components/schemas/DBRP'\n          type: array\n    Dashboard:\n      allOf:\n      - $ref: '#/components/schemas/CreateDashboardRequest'\n      - properties:\n          cells:\n            $ref: '#/components/schemas/Cells'\n          id:\n            readOnly: true\n            type: string\n          labels:\n            $ref: '#/components/schemas/Labels'\n          links:\n            example:\n              cells: /api/v2/dashboards/1/cells\n              labels: /api/v2/dashboards/1/labels\n              members: /api/v2/dashboards/1/members\n              org: /api/v2/labels/1\n              owners: /api/v2/dashboards/1/owners\n              self: /api/v2/dashboards/1\n            properties:\n              cells:\n                $ref: '#/components/schemas/Link'\n              labels:\n                $ref: '#/components/schemas/Link'\n              members:\n                $ref: '#/components/schemas/Link'\n              org:\n                $ref: '#/components/schemas/Link'\n              owners:\n                $ref: '#/components/schemas/Link'\n              self:\n                $ref: '#/components/schemas/Link'\n            type: object\n          meta:\n            properties:\n              createdAt:\n                format: date-time\n                type: string\n              updatedAt:\n                format: date-time\n                type: string\n            type: object\n        type: object\n      type: object\n    DashboardColor:\n      description: Defines an encoding of data value into color space.\n      properties:\n        hex:\n          description: The hex number of the color\n          maxLength: 7\n          minLength: 7\n          type: string\n        id:\n          description: The unique ID of the view color.\n          type: string\n        name:\n          description: The user-facing name of the hex color.\n          type: string\n        type:\n          description: Type is how the color is used.\n          enum:\n          - min\n          - max\n          - threshold\n          - scale\n          - text\n          - background\n          type: string\n        value:\n          description: The data value mapped to this color.\n          format: float\n          type: number\n      required:\n      - id\n      - type\n      - hex\n      - name\n      - value\n      type: object\n    DashboardQuery:\n      properties:\n        builderConfig:\n          $ref: '#/components/schemas/BuilderConfig'\n        editMode:\n          $ref: '#/components/schemas/QueryEditMode'\n        name:\n          type: string\n        text:\n          description: The text of the Flux query.\n          type: string\n      type: object\n    DashboardWithViewProperties:\n      allOf:\n      - $ref: '#/components/schemas/CreateDashboardRequest'\n      - properties:\n          cells:\n            $ref: '#/components/schemas/CellsWithViewProperties'\n          id:\n            readOnly: true\n            type: string\n          labels:\n            $ref: '#/components/schemas/Labels'\n          links:\n            example:\n              cells: /api/v2/dashboards/1/cells\n              labels: /api/v2/dashboards/1/labels\n              members: /api/v2/dashboards/1/members\n              org: /api/v2/labels/1\n              owners: /api/v2/dashboards/1/owners\n              self: /api/v2/dashboards/1\n            properties:\n              cells:\n                $ref: '#/components/schemas/Link'\n              labels:\n                $ref: '#/components/schemas/Link'\n              members:\n                $ref: '#/components/schemas/Link'\n              org:\n                $ref: '#/components/schemas/Link'\n              owners:\n                $ref: '#/components/schemas/Link'\n              self:\n                $ref: '#/components/schemas/Link'\n            type: object\n          meta:\n            properties:\n              createdAt:\n                format: date-time\n                type: string\n              updatedAt:\n                format: date-time\n                type: string\n            type: object\n        type: object\n      type: object\n    Dashboards:\n      properties:\n        dashboards:\n          items:\n            $ref: '#/components/schemas/Dashboard'\n          type: array\n        links:\n          $ref: '#/components/schemas/Links'\n      type: object\n    DateTimeLiteral:\n      description: Represents an instant in time with nanosecond precision using the\n        syntax of golang's RFC3339 Nanosecond variant\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          format: date-time\n          type: string\n      type: object\n    DeadmanCheck:\n      allOf:\n      - $ref: '#/components/schemas/CheckBase'\n      - properties:\n          every:\n            description: Check repetition interval.\n            type: string\n          level:\n            $ref: '#/components/schemas/CheckStatusLevel'\n          offset:\n            description: Duration to delay after the schedule, before executing check.\n            type: string\n          reportZero:\n            description: If only zero values reported since time, trigger an alert\n            type: boolean\n          staleTime:\n            description: String duration for time that a series is considered stale\n              and should not trigger deadman.\n            type: string\n          statusMessageTemplate:\n            description: The template used to generate and write a status message.\n            type: string\n          tags:\n            description: List of tags to write to each status.\n            items:\n              properties:\n                key:\n                  type: string\n                value:\n                  type: string\n              type: object\n            type: array\n          timeSince:\n            description: String duration before deadman triggers.\n            type: string\n          type:\n            enum:\n            - deadman\n            type: string\n        required:\n        - type\n        type: object\n    DecimalPlaces:\n      description: Indicates whether decimal places should be enforced, and how many\n        digits it should show.\n      properties:\n        digits:\n          description: The number of digits after decimal to display\n          format: int32\n          type: integer\n        isEnforced:\n          description: Indicates whether decimal point setting should be enforced\n          type: boolean\n      type: object\n    DeletePredicateRequest:\n      description: The delete predicate request.\n      properties:\n        predicate:\n          description: InfluxQL-like delete statement\n          example: tag1=\"value1\" and (tag2=\"value2\" and tag3!=\"value3\")\n          type: string\n        start:\n          description: RFC3339Nano\n          format: date-time\n          type: string\n        stop:\n          description: RFC3339Nano\n          format: date-time\n          type: string\n      required:\n      - start\n      - stop\n      type: object\n    Dialect:\n      description: Dialect are options to change the default CSV output format; https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions\n      properties:\n        annotations:\n          description: https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns\n          items:\n            enum:\n            - group\n            - datatype\n            - default\n            type: string\n          type: array\n          uniqueItems: true\n        commentPrefix:\n          default: '#'\n          description: Character prefixed to comment strings\n          maxLength: 1\n          minLength: 0\n          type: string\n        dateTimeFormat:\n          default: RFC3339\n          description: Format of timestamps\n          enum:\n          - RFC3339\n          - RFC3339Nano\n          type: string\n        delimiter:\n          default: ','\n          description: Separator between cells; the default is ,\n          maxLength: 1\n          minLength: 1\n          type: string\n        header:\n          default: true\n          description: If true, the results will contain a header row\n          type: boolean\n      type: object\n    DictExpression:\n      description: Used to create and directly specify the elements of a dictionary\n      properties:\n        elements:\n          description: Elements of the dictionary\n          items:\n            $ref: '#/components/schemas/DictItem'\n          type: array\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    DictItem:\n      description: A key/value pair in a dictionary\n      properties:\n        key:\n          $ref: '#/components/schemas/Expression'\n        type:\n          $ref: '#/components/schemas/NodeType'\n        val:\n          $ref: '#/components/schemas/Expression'\n      type: object\n    Duration:\n      description: A pair consisting of length of time and the unit of time measured.\n        It is the atomic unit from which all duration literals are composed.\n      properties:\n        magnitude:\n          type: integer\n        type:\n          $ref: '#/components/schemas/NodeType'\n        unit:\n          type: string\n      type: object\n    DurationLiteral:\n      description: Represents the elapsed time between two instants as an int64 nanosecond\n        count with syntax of golang's time.Duration\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        values:\n          description: Duration values\n          items:\n            $ref: '#/components/schemas/Duration'\n          type: array\n      type: object\n    Error:\n      properties:\n        code:\n          description: code is the machine-readable error code.\n          enum:\n          - internal error\n          - not found\n          - conflict\n          - invalid\n          - unprocessable entity\n          - empty value\n          - unavailable\n          - forbidden\n          - too many requests\n          - unauthorized\n          - method not allowed\n          - request too large\n          - unsupported media type\n          readOnly: true\n          type: string\n        err:\n          description: Stack of errors that occurred during processing of the request.\n            Useful for debugging.\n          readOnly: true\n          type: string\n        message:\n          description: Human-readable message.\n          readOnly: true\n          type: string\n        op:\n          description: Describes the logical code operation when the error occurred.\n            Useful for debugging.\n          readOnly: true\n          type: string\n      required:\n      - code\n    Expression:\n      oneOf:\n      - $ref: '#/components/schemas/ArrayExpression'\n      - $ref: '#/components/schemas/DictExpression'\n      - $ref: '#/components/schemas/FunctionExpression'\n      - $ref: '#/components/schemas/BinaryExpression'\n      - $ref: '#/components/schemas/CallExpression'\n      - $ref: '#/components/schemas/ConditionalExpression'\n      - $ref: '#/components/schemas/LogicalExpression'\n      - $ref: '#/components/schemas/MemberExpression'\n      - $ref: '#/components/schemas/IndexExpression'\n      - $ref: '#/components/schemas/ObjectExpression'\n      - $ref: '#/components/schemas/ParenExpression'\n      - $ref: '#/components/schemas/PipeExpression'\n      - $ref: '#/components/schemas/UnaryExpression'\n      - $ref: '#/components/schemas/BooleanLiteral'\n      - $ref: '#/components/schemas/DateTimeLiteral'\n      - $ref: '#/components/schemas/DurationLiteral'\n      - $ref: '#/components/schemas/FloatLiteral'\n      - $ref: '#/components/schemas/IntegerLiteral'\n      - $ref: '#/components/schemas/PipeLiteral'\n      - $ref: '#/components/schemas/RegexpLiteral'\n      - $ref: '#/components/schemas/StringLiteral'\n      - $ref: '#/components/schemas/UnsignedIntegerLiteral'\n      - $ref: '#/components/schemas/Identifier'\n    ExpressionStatement:\n      description: May consist of an expression that does not return a value and is\n        executed solely for its side-effects\n      properties:\n        expression:\n          $ref: '#/components/schemas/Expression'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    Field:\n      properties:\n        alias:\n          description: Alias overrides the field name in the returned response.  Applies\n            only if type is `func`\n          type: string\n        args:\n          description: Args are the arguments to the function\n          items:\n            $ref: '#/components/schemas/Field'\n          type: array\n        type:\n          description: '`type` describes the field type. `func` is a function. `field`\n            is a field reference.'\n          enum:\n          - func\n          - field\n          - integer\n          - number\n          - regex\n          - wildcard\n          type: string\n        value:\n          description: value is the value of the field.  Meaning of the value is implied\n            by the `type` key\n          type: string\n      type: object\n    File:\n      description: Represents a source from a single file\n      properties:\n        body:\n          description: List of Flux statements\n          items:\n            $ref: '#/components/schemas/Statement'\n          type: array\n        imports:\n          description: A list of package imports\n          items:\n            $ref: '#/components/schemas/ImportDeclaration'\n          type: array\n        name:\n          description: The name of the file.\n          type: string\n        package:\n          $ref: '#/components/schemas/PackageClause'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    Flags:\n      additionalProperties: true\n      type: object\n    FloatLiteral:\n      description: Represents floating point numbers according to the double representations\n        defined by the IEEE-754-1985\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: number\n      type: object\n    FluxResponse:\n      description: Rendered flux that backs the check or notification.\n      properties:\n        flux:\n          type: string\n    FluxSuggestion:\n      properties:\n        name:\n          type: string\n        params:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    FluxSuggestions:\n      properties:\n        funcs:\n          items:\n            $ref: '#/components/schemas/FluxSuggestion'\n          type: array\n      type: object\n    FunctionExpression:\n      description: Function expression\n      properties:\n        body:\n          $ref: '#/components/schemas/Node'\n        params:\n          description: Function parameters\n          items:\n            $ref: '#/components/schemas/Property'\n          type: array\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    GaugeViewProperties:\n      properties:\n        colors:\n          description: Colors define color encoding of data into a visualization\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n          type: array\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n        note:\n          type: string\n        prefix:\n          type: string\n        queries:\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n          type: array\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        suffix:\n          type: string\n        tickPrefix:\n          type: string\n        tickSuffix:\n          type: string\n        type:\n          enum:\n          - gauge\n          type: string\n      required:\n      - type\n      - queries\n      - colors\n      - shape\n      - note\n      - showNoteWhenEmpty\n      - prefix\n      - tickPrefix\n      - suffix\n      - tickSuffix\n      - decimalPlaces\n      type: object\n    GeoCircleViewLayer:\n      allOf:\n      - $ref: '#/components/schemas/GeoViewLayerProperties'\n      - properties:\n          colorDimension:\n            $ref: '#/components/schemas/Axis'\n          colorField:\n            description: Circle color field\n            type: string\n          colors:\n            description: Colors define color encoding of data into a visualization\n            items:\n              $ref: '#/components/schemas/DashboardColor'\n            type: array\n          interpolateColors:\n            description: Interpolate circle color based on displayed value\n            type: boolean\n          radius:\n            description: Maximum radius size in pixels\n            type: integer\n          radiusDimension:\n            $ref: '#/components/schemas/Axis'\n          radiusField:\n            description: Radius field\n            type: string\n        required:\n        - radiusField\n        - radiusDimension\n        - colorField\n        - colorDimension\n        - colors\n        type: object\n    GeoHeatMapViewLayer:\n      allOf:\n      - $ref: '#/components/schemas/GeoViewLayerProperties'\n      - properties:\n          blur:\n            description: Blur for heatmap points\n            type: integer\n          colors:\n            description: Colors define color encoding of data into a visualization\n            items:\n              $ref: '#/components/schemas/DashboardColor'\n            type: array\n          intensityDimension:\n            $ref: '#/components/schemas/Axis'\n          intensityField:\n            description: Intensity field\n            type: string\n          radius:\n            description: Radius size in pixels\n            type: integer\n        required:\n        - intensityField\n        - intensityDimension\n        - radius\n        - blur\n        - colors\n        type: object\n    GeoPointMapViewLayer:\n      allOf:\n      - $ref: '#/components/schemas/GeoViewLayerProperties'\n      - properties:\n          colorDimension:\n            $ref: '#/components/schemas/Axis'\n          colorField:\n            description: Marker color field\n            type: string\n          colors:\n            description: Colors define color encoding of data into a visualization\n            items:\n              $ref: '#/components/schemas/DashboardColor'\n            type: array\n          isClustered:\n            description: Cluster close markers together\n            type: boolean\n          tooltipColumns:\n            description: An array for which columns to display in tooltip\n            items:\n              type: string\n            type: array\n        required:\n        - colorField\n        - colorDimension\n        - colors\n        type: object\n    GeoTrackMapViewLayer:\n      allOf:\n      - $ref: '#/components/schemas/GeoViewLayerProperties'\n      - required:\n        - trackWidth\n        - speed\n        - randomColors\n        - trackPointVisualization\n        type: object\n      properties:\n        colors:\n          description: Colors define color encoding of data into a visualization\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n          type: array\n        randomColors:\n          description: Assign different colors to different tracks\n          type: boolean\n        speed:\n          description: Speed of the track animation\n          type: integer\n        trackWidth:\n          description: Width of the track\n          type: integer\n    GeoViewLayer:\n      oneOf:\n      - $ref: '#/components/schemas/GeoCircleViewLayer'\n      - $ref: '#/components/schemas/GeoHeatMapViewLayer'\n      - $ref: '#/components/schemas/GeoPointMapViewLayer'\n      - $ref: '#/components/schemas/GeoTrackMapViewLayer'\n      type: object\n    GeoViewLayerProperties:\n      properties:\n        type:\n          enum:\n          - heatmap\n          - circleMap\n          - pointMap\n          - trackMap\n          type: string\n      required:\n      - type\n      type: object\n    GeoViewProperties:\n      properties:\n        allowPanAndZoom:\n          default: true\n          description: If true, map zoom and pan controls are enabled on the dashboard\n            view\n          type: boolean\n        center:\n          description: Coordinates of the center of the map\n          properties:\n            lat:\n              description: Latitude of the center of the map\n              format: double\n              type: number\n            lon:\n              description: Longitude of the center of the map\n              format: double\n              type: number\n          required:\n          - lat\n          - lon\n          type: object\n        colors:\n          description: Colors define color encoding of data into a visualization\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n          type: array\n        detectCoordinateFields:\n          default: true\n          description: If true, search results get automatically regroupped so that\n            lon,lat and value are treated as columns\n          type: boolean\n        latLonColumns:\n          $ref: '#/components/schemas/LatLonColumns'\n        layers:\n          description: List of individual layers shown in the map\n          items:\n            $ref: '#/components/schemas/GeoViewLayer'\n          type: array\n        mapStyle:\n          description: Define map type - regular, satellite etc.\n          type: string\n        note:\n          type: string\n        queries:\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n          type: array\n        s2Column:\n          description: String to define the column\n          type: string\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        type:\n          enum:\n          - geo\n          type: string\n        useS2CellID:\n          description: If true, S2 column is used to calculate lat/lon\n          type: boolean\n        zoom:\n          description: Zoom level used for initial display of the map\n          format: double\n          maximum: 28\n          minimum: 1\n          type: number\n      required:\n      - type\n      - shape\n      - queries\n      - note\n      - showNoteWhenEmpty\n      - center\n      - zoom\n      - allowPanAndZoom\n      - detectCoordinateFields\n      - layers\n      type: object\n    GreaterThreshold:\n      allOf:\n      - $ref: '#/components/schemas/ThresholdBase'\n      - properties:\n          type:\n            enum:\n            - greater\n            type: string\n          value:\n            format: float\n            type: number\n        required:\n        - type\n        - value\n        type: object\n    HTTPNotificationEndpoint:\n      allOf:\n      - $ref: '#/components/schemas/NotificationEndpointBase'\n      - properties:\n          authMethod:\n            enum:\n            - none\n            - basic\n            - bearer\n            type: string\n          contentTemplate:\n            type: string\n          headers:\n            additionalProperties:\n              type: string\n            description: Customized headers.\n            type: object\n          method:\n            enum:\n            - POST\n            - GET\n            - PUT\n            type: string\n          password:\n            type: string\n          token:\n            type: string\n          url:\n            type: string\n          username:\n            type: string\n        required:\n        - url\n        - authMethod\n        - method\n        type: object\n      type: object\n    HTTPNotificationRule:\n      allOf:\n      - $ref: '#/components/schemas/NotificationRuleBase'\n      - $ref: '#/components/schemas/HTTPNotificationRuleBase'\n    HTTPNotificationRuleBase:\n      properties:\n        type:\n          enum:\n          - http\n          type: string\n        url:\n          type: string\n      required:\n      - type\n      type: object\n    HealthCheck:\n      properties:\n        checks:\n          items:\n            $ref: '#/components/schemas/HealthCheck'\n          type: array\n        commit:\n          type: string\n        message:\n          type: string\n        name:\n          type: string\n        status:\n          enum:\n          - pass\n          - fail\n          type: string\n        version:\n          type: string\n      required:\n      - name\n      - status\n      type: object\n    HeatmapViewProperties:\n      properties:\n        binSize:\n          type: number\n        colors:\n          description: Colors define color encoding of data into a visualization\n          items:\n            type: string\n          type: array\n        generateXAxisTicks:\n          items:\n            type: string\n          type: array\n        generateYAxisTicks:\n          items:\n            type: string\n          type: array\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          format: float\n          type: number\n        legendOrientationThreshold:\n          type: integer\n        note:\n          type: string\n        queries:\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n          type: array\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        timeFormat:\n          type: string\n        type:\n          enum:\n          - heatmap\n          type: string\n        xAxisLabel:\n          type: string\n        xColumn:\n          type: string\n        xDomain:\n          items:\n            type: number\n          maxItems: 2\n          type: array\n        xPrefix:\n          type: string\n        xSuffix:\n          type: string\n        xTickStart:\n          format: float\n          type: number\n        xTickStep:\n          format: float\n          type: number\n        xTotalTicks:\n          type: integer\n        yAxisLabel:\n          type: string\n        yColumn:\n          type: string\n        yDomain:\n          items:\n            type: number\n          maxItems: 2\n          type: array\n        yPrefix:\n          type: string\n        ySuffix:\n          type: string\n        yTickStart:\n          format: float\n          type: number\n        yTickStep:\n          format: float\n          type: number\n        yTotalTicks:\n          type: integer\n      required:\n      - type\n      - queries\n      - colors\n      - shape\n      - note\n      - showNoteWhenEmpty\n      - xColumn\n      - yColumn\n      - xDomain\n      - yDomain\n      - xAxisLabel\n      - yAxisLabel\n      - xPrefix\n      - yPrefix\n      - xSuffix\n      - ySuffix\n      - binSize\n      type: object\n    HistogramViewProperties:\n      properties:\n        binCount:\n          type: integer\n        colors:\n          description: Colors define color encoding of data into a visualization\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n          type: array\n        fillColumns:\n          items:\n            type: string\n          type: array\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          format: float\n          type: number\n        legendOrientationThreshold:\n          type: integer\n        note:\n          type: string\n        position:\n          enum:\n          - overlaid\n          - stacked\n          type: string\n        queries:\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n          type: array\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        type:\n          enum:\n          - histogram\n          type: string\n        xAxisLabel:\n          type: string\n        xColumn:\n          type: string\n        xDomain:\n          items:\n            format: float\n            type: number\n          type: array\n      required:\n      - type\n      - queries\n      - colors\n      - shape\n      - note\n      - showNoteWhenEmpty\n      - xColumn\n      - fillColumns\n      - xDomain\n      - xAxisLabel\n      - position\n      - binCount\n      type: object\n    Identifier:\n      description: A valid Flux identifier\n      properties:\n        name:\n          type: string\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    ImportDeclaration:\n      description: Declares a package import\n      properties:\n        as:\n          $ref: '#/components/schemas/Identifier'\n        path:\n          $ref: '#/components/schemas/StringLiteral'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    IndexExpression:\n      description: Represents indexing into an array\n      properties:\n        array:\n          $ref: '#/components/schemas/Expression'\n        index:\n          $ref: '#/components/schemas/Expression'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    IntegerLiteral:\n      description: Represents integer numbers\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n      type: object\n    IsOnboarding:\n      properties:\n        allowed:\n          description: True means that the influxdb instance has NOT had initial setup;\n            false means that the database has been setup.\n          type: boolean\n      type: object\n    Label:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        orgID:\n          readOnly: true\n          type: string\n        properties:\n          additionalProperties:\n            type: string\n          description: Key/Value pairs associated with this label. Keys can be removed\n            by sending an update with an empty value.\n          example:\n            color: ffb3b3\n            description: this is a description\n          type: object\n      type: object\n    LabelCreateRequest:\n      properties:\n        name:\n          type: string\n        orgID:\n          type: string\n        properties:\n          additionalProperties:\n            type: string\n          description: Key/Value pairs associated with this label. Keys can be removed\n            by sending an update with an empty value.\n          example:\n            color: ffb3b3\n            description: this is a description\n          type: object\n      required:\n      - orgID\n      - name\n      type: object\n    LabelMapping:\n      properties:\n        labelID:\n          type: string\n      type: object\n    LabelResponse:\n      properties:\n        label:\n          $ref: '#/components/schemas/Label'\n        links:\n          $ref: '#/components/schemas/Links'\n      type: object\n    LabelUpdate:\n      properties:\n        name:\n          type: string\n        properties:\n          additionalProperties:\n            type: string\n          description: Key/Value pairs associated with this label. Keys can be removed\n            by sending an update with an empty value.\n          example:\n            color: ffb3b3\n            description: this is a description\n          type: object\n      type: object\n    Labels:\n      items:\n        $ref: '#/components/schemas/Label'\n      type: array\n    LabelsResponse:\n      properties:\n        labels:\n          $ref: '#/components/schemas/Labels'\n        links:\n          $ref: '#/components/schemas/Links'\n      type: object\n    LanguageRequest:\n      description: Flux query to be analyzed.\n      properties:\n        query:\n          description: Flux query script to be analyzed\n          type: string\n      required:\n      - query\n      type: object\n    LatLonColumn:\n      description: Object type for key and column definitions\n      properties:\n        column:\n          description: Column to look up Lat/Lon\n          type: string\n        key:\n          description: Key to determine whether the column is tag/field\n          type: string\n      required:\n      - key\n      - column\n      type: object\n    LatLonColumns:\n      description: Object type to define lat/lon columns\n      properties:\n        lat:\n          $ref: '#/components/schemas/LatLonColumn'\n        lon:\n          $ref: '#/components/schemas/LatLonColumn'\n      required:\n      - lat\n      - lon\n      type: object\n    LesserThreshold:\n      allOf:\n      - $ref: '#/components/schemas/ThresholdBase'\n      - properties:\n          type:\n            enum:\n            - lesser\n            type: string\n          value:\n            format: float\n            type: number\n        required:\n        - type\n        - value\n        type: object\n    Limit:\n      description: These are org limits similar to those configured in/by quartz.\n      properties:\n        bucket:\n          properties:\n            maxBuckets:\n              type: integer\n            maxRetentionDuration:\n              description: Max bucket retention duration in nanoseconds. 0 is unlimited.\n              type: integer\n          required:\n          - maxBuckets\n          - maxRetentionDuration\n          type: object\n        check:\n          properties:\n            maxChecks:\n              type: integer\n          required:\n          - maxChecks\n          type: object\n        dashboard:\n          properties:\n            maxDashboards:\n              type: integer\n          required:\n          - maxDashboards\n          type: object\n        features:\n          properties:\n            allowDelete:\n              description: allow delete predicate endpoint\n              type: boolean\n          type: object\n        notificationEndpoint:\n          properties:\n            blockedNotificationEndpoints:\n              description: comma separated list of notification endpoints\n              example: http,pagerduty\n              type: string\n          required:\n          - blockNotificationEndpoints\n          type: object\n        notificationRule:\n          properties:\n            blockedNotificationRules:\n              description: comma separated list of notification rules\n              example: http,pagerduty\n              type: string\n            maxNotifications:\n              type: integer\n          required:\n          - maxNotifications\n          - blockNotificationRules\n          type: object\n        orgID:\n          type: string\n        rate:\n          properties:\n            cardinality:\n              description: Allowed organization total cardinality. 0 is unlimited.\n              type: integer\n            concurrentDeleteRequests:\n              description: Allowed organization concurrent outstanding delete requests.\n              type: integer\n            concurrentReadRequests:\n              description: Allowed concurrent queries. 0 is unlimited.\n              type: integer\n            concurrentWriteRequests:\n              description: Allowed concurrent writes. 0 is unlimited.\n              type: integer\n            deleteRequestsPerSecond:\n              description: Allowed organization delete request rate.\n              type: integer\n            queryTime:\n              description: Query Time in nanoseconds\n              type: integer\n            readKBs:\n              description: Query limit in kb/sec. 0 is unlimited.\n              type: integer\n            writeKBs:\n              description: Write limit in kb/sec. 0 is unlimited.\n              type: integer\n          required:\n          - readKBs\n          - queryTime\n          - concurrentReadRequests\n          - writeKBs\n          - concurrentWriteRequests\n          - cardinality\n          type: object\n        task:\n          properties:\n            maxTasks:\n              type: integer\n          required:\n          - maxTasks\n          type: object\n      required:\n      - rate\n      - bucket\n      - task\n      - dashboard\n      - check\n      - notificationRule\n      - notificationEndpoint\n      type: object\n    LinePlusSingleStatProperties:\n      properties:\n        axes:\n          $ref: '#/components/schemas/Axes'\n        colors:\n          description: Colors define color encoding of data into a visualization\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n          type: array\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n        generateXAxisTicks:\n          items:\n            type: string\n          type: array\n        generateYAxisTicks:\n          items:\n            type: string\n          type: array\n        hoverDimension:\n          enum:\n          - auto\n          - x\n          - \"y\"\n          - xy\n          type: string\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          format: float\n          type: number\n        legendOrientationThreshold:\n          type: integer\n        note:\n          type: string\n        position:\n          enum:\n          - overlaid\n          - stacked\n          type: string\n        prefix:\n          type: string\n        queries:\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n          type: array\n        shadeBelow:\n          type: boolean\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        staticLegend:\n          $ref: '#/components/schemas/StaticLegend'\n        suffix:\n          type: string\n        timeFormat:\n          type: string\n        type:\n          enum:\n          - line-plus-single-stat\n          type: string\n        xColumn:\n          type: string\n        xTickStart:\n          format: float\n          type: number\n        xTickStep:\n          format: float\n          type: number\n        xTotalTicks:\n          type: integer\n        yColumn:\n          type: string\n        yTickStart:\n          format: float\n          type: number\n        yTickStep:\n          format: float\n          type: number\n        yTotalTicks:\n          type: integer\n      required:\n      - type\n      - queries\n      - shape\n      - axes\n      - colors\n      - note\n      - showNoteWhenEmpty\n      - prefix\n      - suffix\n      - decimalPlaces\n      - position\n      type: object\n    LineProtocolError:\n      properties:\n        code:\n          description: Code is the machine-readable error code.\n          enum:\n          - internal error\n          - not found\n          - conflict\n          - invalid\n          - empty value\n          - unavailable\n          readOnly: true\n          type: string\n        err:\n          description: Stack of errors that occurred during processing of the request.\n            Useful for debugging.\n          readOnly: true\n          type: string\n        line:\n          description: First line in the request body that contains malformed data.\n          format: int32\n          readOnly: true\n          type: integer\n        message:\n          description: Human-readable message.\n          readOnly: true\n          type: string\n        op:\n          description: Describes the logical code operation when the error occurred.\n            Useful for debugging.\n          readOnly: true\n          type: string\n      required:\n      - code\n    LineProtocolLengthError:\n      properties:\n        code:\n          description: Code is the machine-readable error code.\n          enum:\n          - invalid\n          readOnly: true\n          type: string\n        message:\n          description: Human-readable message.\n          readOnly: true\n          type: string\n      required:\n      - code\n      - message\n    Link:\n      description: URI of resource.\n      format: uri\n      readOnly: true\n      type: string\n    Links:\n      properties:\n        next:\n          $ref: '#/components/schemas/Link'\n        prev:\n          $ref: '#/components/schemas/Link'\n        self:\n          $ref: '#/components/schemas/Link'\n      required:\n      - self\n      type: object\n    LogEvent:\n      properties:\n        message:\n          description: A description of the event that occurred.\n          example: Halt and catch fire\n          readOnly: true\n          type: string\n        runID:\n          description: the ID of the task that logged\n          readOnly: true\n          type: string\n        time:\n          description: Time event occurred, RFC3339Nano.\n          format: date-time\n          readOnly: true\n          type: string\n      type: object\n    LogicalExpression:\n      description: Represents the rule conditions that collectively evaluate to either\n        true or false\n      properties:\n        left:\n          $ref: '#/components/schemas/Expression'\n        operator:\n          type: string\n        right:\n          $ref: '#/components/schemas/Expression'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    Logs:\n      properties:\n        events:\n          items:\n            $ref: '#/components/schemas/LogEvent'\n          readOnly: true\n          type: array\n      type: object\n    MapVariableProperties:\n      properties:\n        type:\n          enum:\n          - map\n          type: string\n        values:\n          additionalProperties:\n            type: string\n          type: object\n    MarkdownViewProperties:\n      properties:\n        note:\n          type: string\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        type:\n          enum:\n          - markdown\n          type: string\n      required:\n      - type\n      - shape\n      - note\n      type: object\n    MeasurementSchema:\n      description: Definition of a measurement schema.\n      example:\n        bucketID: ba3c5e7f9b0a0010\n        columns:\n        - format: unix timestamp\n          name: time\n          type: integer\n        - name: host\n          type: tag\n        - name: region\n          type: tag\n        - dataType: float\n          name: usage_user\n          type: field\n        - dataType: float\n          name: usage_user\n          type: field\n        createdAt: \"2021-01-21T00:48:40.993Z\"\n        id: 1a3c5e7f9b0a8642\n        name: cpu\n        orgID: 0a3c5e7f9b0a0001\n        updatedAt: \"2021-01-21T00:48:40.993Z\"\n      properties:\n        bucketID:\n          description: ID of the bucket that the measurement schema is associated\n            with.\n          type: string\n        columns:\n          description: Ordered collection of column definitions.\n          items:\n            $ref: '#/components/schemas/MeasurementSchemaColumn'\n          type: array\n        createdAt:\n          format: date-time\n          readOnly: true\n          type: string\n        id:\n          readOnly: true\n          type: string\n        name:\n          nullable: false\n          type: string\n        orgID:\n          description: ID of the organization that the measurement schema is associated\n            with.\n          type: string\n        updatedAt:\n          format: date-time\n          readOnly: true\n          type: string\n      required:\n      - id\n      - name\n      - columns\n      - createdAt\n      - updatedAt\n      type: object\n    MeasurementSchemaColumn:\n      description: Definition of a measurement schema column.\n      example:\n        format: unix timestamp\n        name: time\n        type: integer\n      properties:\n        dataType:\n          $ref: '#/components/schemas/ColumnDataType'\n        name:\n          type: string\n        type:\n          $ref: '#/components/schemas/ColumnSemanticType'\n      required:\n      - name\n      - type\n      type: object\n    MeasurementSchemaCreateRequest:\n      description: Create a new measurement schema.\n      example:\n        columns:\n        - format: unix timestamp\n          name: time\n          type: integer\n        - name: host\n          type: tag\n        - name: region\n          type: tag\n        - dataType: float\n          name: usage_user\n          type: field\n        - dataType: float\n          name: usage_user\n          type: field\n        name: cpu\n      properties:\n        columns:\n          description: Ordered collection of column definitions.\n          items:\n            $ref: '#/components/schemas/MeasurementSchemaColumn'\n          type: array\n        name:\n          type: string\n      required:\n      - name\n      - columns\n      type: object\n    MeasurementSchemaList:\n      description: A list of measurement schemas returning summary information\n      example:\n        measurementSchemas:\n        - bucketID: ba3c5e7f9b0a0010\n          createdAt: \"2021-01-21T00:48:40.993Z\"\n          id: 1a3c5e7f9b0a8642\n          name: cpu\n          orgID: 0a3c5e7f9b0a0001\n          updatedAt: \"2021-01-21T00:48:40.993Z\"\n        - bucketID: ba3c5e7f9b0a0010\n          createdAt: \"2021-01-21T00:48:40.993Z\"\n          id: 1a3c5e7f9b0a8643\n          name: memory\n          orgID: 0a3c5e7f9b0a0001\n          updatedAt: \"2021-01-21T00:48:40.993Z\"\n        - bucketID: ba3c5e7f9b0a0010\n          createdAt: \"2021-01-21T00:48:40.993Z\"\n          id: 1a3c5e7f9b0a8644\n          name: disk\n          orgID: 0a3c5e7f9b0a0001\n          updatedAt: \"2021-01-21T00:48:40.993Z\"\n      properties:\n        measurementSchemas:\n          items:\n            $ref: '#/components/schemas/MeasurementSchema'\n          type: array\n      required:\n      - measurementSchemas\n      type: object\n    MeasurementSchemaUpdateRequest:\n      description: Update an existing measurement schema\n      example:\n        columns:\n        - format: unix timestamp\n          name: time\n          type: integer\n        - name: host\n          type: tag\n        - name: region\n          type: tag\n        - dataType: float\n          name: usage_user\n          type: field\n        - dataType: float\n          name: usage_user\n          type: field\n      properties:\n        columns:\n          description: An ordered collection of column definitions\n          items:\n            $ref: '#/components/schemas/MeasurementSchemaColumn'\n          type: array\n      required:\n      - columns\n      type: object\n    MemberAssignment:\n      description: Object property assignment\n      properties:\n        init:\n          $ref: '#/components/schemas/Expression'\n        member:\n          $ref: '#/components/schemas/MemberExpression'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    MemberExpression:\n      description: Represents accessing a property of an object\n      properties:\n        object:\n          $ref: '#/components/schemas/Expression'\n        property:\n          $ref: '#/components/schemas/PropertyKey'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    MosaicViewProperties:\n      properties:\n        colors:\n          description: Colors define color encoding of data into a visualization\n          items:\n            type: string\n          type: array\n        fillColumns:\n          items:\n            type: string\n          type: array\n        generateXAxisTicks:\n          items:\n            type: string\n          type: array\n        hoverDimension:\n          enum:\n          - auto\n          - x\n          - \"y\"\n          - xy\n          type: string\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          format: float\n          type: number\n        legendOrientationThreshold:\n          type: integer\n        note:\n          type: string\n        queries:\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n          type: array\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        timeFormat:\n          type: string\n        type:\n          enum:\n          - mosaic\n          type: string\n        xAxisLabel:\n          type: string\n        xColumn:\n          type: string\n        xDomain:\n          items:\n            type: number\n          maxItems: 2\n          type: array\n        xPrefix:\n          type: string\n        xSuffix:\n          type: string\n        xTickStart:\n          format: float\n          type: number\n        xTickStep:\n          format: float\n          type: number\n        xTotalTicks:\n          type: integer\n        yAxisLabel:\n          type: string\n        yDomain:\n          items:\n            type: number\n          maxItems: 2\n          type: array\n        yLabelColumnSeparator:\n          type: string\n        yLabelColumns:\n          items:\n            type: string\n          type: array\n        yPrefix:\n          type: string\n        ySeriesColumns:\n          items:\n            type: string\n          type: array\n        ySuffix:\n          type: string\n      required:\n      - type\n      - queries\n      - colors\n      - shape\n      - note\n      - showNoteWhenEmpty\n      - xColumn\n      - ySeriesColumns\n      - fillColumns\n      - xDomain\n      - yDomain\n      - xAxisLabel\n      - yAxisLabel\n      - xPrefix\n      - yPrefix\n      - xSuffix\n      - ySuffix\n      type: object\n    Node:\n      oneOf:\n      - $ref: '#/components/schemas/Expression'\n      - $ref: '#/components/schemas/Block'\n    NodeType:\n      description: Type of AST node\n      type: string\n    NotificationEndpoint:\n      allOf:\n      - $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n    NotificationEndpointBase:\n      properties:\n        createdAt:\n          format: date-time\n          readOnly: true\n          type: string\n        description:\n          description: An optional description of the notification endpoint.\n          type: string\n        id:\n          type: string\n        labels:\n          $ref: '#/components/schemas/Labels'\n        links:\n          example:\n            labels: /api/v2/notificationEndpoints/1/labels\n            members: /api/v2/notificationEndpoints/1/members\n            owners: /api/v2/notificationEndpoints/1/owners\n            self: /api/v2/notificationEndpoints/1\n          properties:\n            labels:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve labels for this endpoint.\n            members:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve members for this endpoint.\n            owners:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve owners for this endpoint.\n            self:\n              $ref: '#/components/schemas/Link'\n              description: URL for this endpoint.\n          readOnly: true\n          type: object\n        name:\n          type: string\n        orgID:\n          type: string\n        status:\n          default: active\n          description: The status of the endpoint.\n          enum:\n          - active\n          - inactive\n          type: string\n        type:\n          $ref: '#/components/schemas/NotificationEndpointType'\n        updatedAt:\n          format: date-time\n          readOnly: true\n          type: string\n        userID:\n          type: string\n      required:\n      - type\n      - name\n      type: object\n    NotificationEndpointDiscriminator:\n      discriminator:\n        mapping:\n          http: '#/components/schemas/HTTPNotificationEndpoint'\n          pagerduty: '#/components/schemas/PagerDutyNotificationEndpoint'\n          slack: '#/components/schemas/SlackNotificationEndpoint'\n          telegram: '#/components/schemas/TelegramNotificationEndpoint'\n        propertyName: type\n      oneOf:\n      - $ref: '#/components/schemas/SlackNotificationEndpoint'\n      - $ref: '#/components/schemas/PagerDutyNotificationEndpoint'\n      - $ref: '#/components/schemas/HTTPNotificationEndpoint'\n      - $ref: '#/components/schemas/TelegramNotificationEndpoint'\n    NotificationEndpointType:\n      enum:\n      - slack\n      - pagerduty\n      - http\n      - telegram\n      type: string\n    NotificationEndpointUpdate:\n      properties:\n        description:\n          type: string\n        name:\n          type: string\n        status:\n          enum:\n          - active\n          - inactive\n          type: string\n      type: object\n    NotificationEndpoints:\n      properties:\n        links:\n          $ref: '#/components/schemas/Links'\n        notificationEndpoints:\n          items:\n            $ref: '#/components/schemas/NotificationEndpoint'\n          type: array\n    NotificationRule:\n      allOf:\n      - $ref: '#/components/schemas/NotificationRuleDiscriminator'\n    NotificationRuleBase:\n      properties:\n        createdAt:\n          format: date-time\n          readOnly: true\n          type: string\n        description:\n          description: An optional description of the notification rule.\n          type: string\n        endpointID:\n          type: string\n        every:\n          description: The notification repetition interval.\n          type: string\n        id:\n          readOnly: true\n          type: string\n        labels:\n          $ref: '#/components/schemas/Labels'\n        lastRunError:\n          readOnly: true\n          type: string\n        lastRunStatus:\n          enum:\n          - failed\n          - success\n          - canceled\n          readOnly: true\n          type: string\n        latestCompleted:\n          description: Timestamp (in RFC3339 date/time format](https://datatracker.ietf.org/doc/html/rfc3339))\n            of the latest scheduled and completed run.\n          format: date-time\n          readOnly: true\n          type: string\n        limit:\n          description: Don't notify me more than \u003climit\u003e times every \u003climitEvery\u003e\n            seconds. If set, limitEvery cannot be empty.\n          type: integer\n        limitEvery:\n          description: Don't notify me more than \u003climit\u003e times every \u003climitEvery\u003e\n            seconds. If set, limit cannot be empty.\n          type: integer\n        links:\n          example:\n            labels: /api/v2/notificationRules/1/labels\n            members: /api/v2/notificationRules/1/members\n            owners: /api/v2/notificationRules/1/owners\n            query: /api/v2/notificationRules/1/query\n            self: /api/v2/notificationRules/1\n          properties:\n            labels:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve labels for this notification rule.\n            members:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve members for this notification rule.\n            owners:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve owners for this notification rule.\n            query:\n              $ref: '#/components/schemas/Link'\n              description: URL to retrieve flux script for this notification rule.\n            self:\n              $ref: '#/components/schemas/Link'\n              description: URL for this endpoint.\n          readOnly: true\n          type: object\n        name:\n          description: Human-readable name describing the notification rule.\n          type: string\n        offset:\n          description: Duration to delay after the schedule, before executing check.\n          type: string\n        orgID:\n          description: The ID of the organization that owns this notification rule.\n          type: string\n        ownerID:\n          description: The ID of creator used to create this notification rule.\n          readOnly: true\n          type: string\n        runbookLink:\n          type: string\n        sleepUntil:\n          type: string\n        status:\n          $ref: '#/components/schemas/TaskStatusType'\n        statusRules:\n          description: List of status rules the notification rule attempts to match.\n          items:\n            $ref: '#/components/schemas/StatusRule'\n          minItems: 1\n          type: array\n        tagRules:\n          description: List of tag rules the notification rule attempts to match.\n          items:\n            $ref: '#/components/schemas/TagRule'\n          type: array\n        taskID:\n          description: The ID of the task associated with this notification rule.\n          type: string\n        updatedAt:\n          format: date-time\n          readOnly: true\n          type: string\n      required:\n      - orgID\n      - status\n      - name\n      - statusRules\n      - endpointID\n      type: object\n    NotificationRuleDiscriminator:\n      discriminator:\n        mapping:\n          http: '#/components/schemas/HTTPNotificationRule'\n          pagerduty: '#/components/schemas/PagerDutyNotificationRule'\n          slack: '#/components/schemas/SlackNotificationRule'\n          smtp: '#/components/schemas/SMTPNotificationRule'\n          telegram: '#/components/schemas/TelegramNotificationRule'\n        propertyName: type\n      oneOf:\n      - $ref: '#/components/schemas/SlackNotificationRule'\n      - $ref: '#/components/schemas/SMTPNotificationRule'\n      - $ref: '#/components/schemas/PagerDutyNotificationRule'\n      - $ref: '#/components/schemas/HTTPNotificationRule'\n      - $ref: '#/components/schemas/TelegramNotificationRule'\n    NotificationRuleUpdate:\n      properties:\n        description:\n          type: string\n        name:\n          type: string\n        status:\n          enum:\n          - active\n          - inactive\n          type: string\n      type: object\n    NotificationRules:\n      properties:\n        links:\n          $ref: '#/components/schemas/Links'\n        notificationRules:\n          items:\n            $ref: '#/components/schemas/NotificationRule'\n          type: array\n    ObjectExpression:\n      description: Allows the declaration of an anonymous object within a declaration\n      properties:\n        properties:\n          description: Object properties\n          items:\n            $ref: '#/components/schemas/Property'\n          type: array\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    OnboardingRequest:\n      properties:\n        bucket:\n          type: string\n        limit:\n          $ref: '#/components/schemas/Limit'\n        org:\n          type: string\n        password:\n          type: string\n        retentionPeriodHrs:\n          deprecated: true\n          type: integer\n        retentionPeriodSeconds:\n          type: integer\n        username:\n          type: string\n      required:\n      - username\n      - org\n      - bucket\n      type: object\n    OnboardingResponse:\n      properties:\n        auth:\n          $ref: '#/components/schemas/Authorization'\n        bucket:\n          $ref: '#/components/schemas/Bucket'\n        org:\n          $ref: '#/components/schemas/Organization'\n        user:\n          $ref: '#/components/schemas/UserResponse'\n      type: object\n    OptionStatement:\n      description: A single variable declaration\n      properties:\n        assignment:\n          oneOf:\n          - $ref: '#/components/schemas/VariableAssignment'\n          - $ref: '#/components/schemas/MemberAssignment'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    Organization:\n      properties:\n        createdAt:\n          format: date-time\n          readOnly: true\n          type: string\n        description:\n          type: string\n        id:\n          readOnly: true\n          type: string\n        links:\n          example:\n            buckets: /api/v2/buckets?org=myorg\n            dashboards: /api/v2/dashboards?org=myorg\n            labels: /api/v2/orgs/1/labels\n            members: /api/v2/orgs/1/members\n            owners: /api/v2/orgs/1/owners\n            secrets: /api/v2/orgs/1/secrets\n            self: /api/v2/orgs/1\n            tasks: /api/v2/tasks?org=myorg\n          properties:\n            buckets:\n              $ref: '#/components/schemas/Link'\n            dashboards:\n              $ref: '#/components/schemas/Link'\n            labels:\n              $ref: '#/components/schemas/Link'\n            members:\n              $ref: '#/components/schemas/Link'\n            owners:\n              $ref: '#/components/schemas/Link'\n            secrets:\n              $ref: '#/components/schemas/Link'\n            self:\n              $ref: '#/components/schemas/Link'\n            tasks:\n              $ref: '#/components/schemas/Link'\n          readOnly: true\n          type: object\n        name:\n          type: string\n        status:\n          default: active\n          description: If inactive the organization is inactive.\n          enum:\n          - active\n          - inactive\n          type: string\n        updatedAt:\n          format: date-time\n          readOnly: true\n          type: string\n      required:\n      - name\n    Organizations:\n      properties:\n        links:\n          $ref: '#/components/schemas/Links'\n        orgs:\n          items:\n            $ref: '#/components/schemas/Organization'\n          type: array\n      type: object\n    Package:\n      description: Represents a complete package source tree.\n      properties:\n        files:\n          description: Package files\n          items:\n            $ref: '#/components/schemas/File'\n          type: array\n        package:\n          description: Package name\n          type: string\n        path:\n          description: Package import path\n          type: string\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    PackageClause:\n      description: Defines a package identifier\n      properties:\n        name:\n          $ref: '#/components/schemas/Identifier'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    PagerDutyNotificationEndpoint:\n      allOf:\n      - $ref: '#/components/schemas/NotificationEndpointBase'\n      - properties:\n          clientURL:\n            type: string\n          routingKey:\n            type: string\n        required:\n        - routingKey\n        type: object\n      type: object\n    PagerDutyNotificationRule:\n      allOf:\n      - $ref: '#/components/schemas/NotificationRuleBase'\n      - $ref: '#/components/schemas/PagerDutyNotificationRuleBase'\n    PagerDutyNotificationRuleBase:\n      properties:\n        messageTemplate:\n          type: string\n        type:\n          enum:\n          - pagerduty\n          type: string\n      required:\n      - type\n      - messageTemplate\n      type: object\n    ParenExpression:\n      description: Represents an expression wrapped in parenthesis\n      properties:\n        expression:\n          $ref: '#/components/schemas/Expression'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    PasswordResetBody:\n      properties:\n        password:\n          type: string\n      required:\n      - password\n    PatchBucketRequest:\n      description: Updates to an existing bucket resource.\n      properties:\n        description:\n          type: string\n        name:\n          type: string\n        retentionRules:\n          $ref: '#/components/schemas/PatchRetentionRules'\n      type: object\n    PatchOrganizationRequest:\n      properties:\n        description:\n          description: New description to set on the organization\n          type: string\n        name:\n          description: New name to set on the organization\n          type: string\n      type: object\n    PatchRetentionRule:\n      description: Updates to a rule to expire or retain data.\n      properties:\n        everySeconds:\n          description: Duration in seconds for how long data will be kept in the database.\n            0 means infinite.\n          example: 86400\n          format: int64\n          minimum: 0\n          type: integer\n        shardGroupDurationSeconds:\n          description: Shard duration measured in seconds.\n          format: int64\n          type: integer\n        type:\n          default: expire\n          enum:\n          - expire\n          type: string\n      required:\n      - type\n      type: object\n    PatchRetentionRules:\n      description: Updates to rules to expire or retain data. No rules means no updates.\n      items:\n        $ref: '#/components/schemas/PatchRetentionRule'\n      type: array\n    Permission:\n      properties:\n        action:\n          enum:\n          - read\n          - write\n          type: string\n        resource:\n          $ref: '#/components/schemas/Resource'\n      required:\n      - action\n      - resource\n    PipeExpression:\n      description: Call expression with pipe argument\n      properties:\n        argument:\n          $ref: '#/components/schemas/Expression'\n        call:\n          $ref: '#/components/schemas/CallExpression'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    PipeLiteral:\n      description: Represents a specialized literal value, indicating the left hand\n        value of a pipe expression\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    PostBucketRequest:\n      properties:\n        description:\n          type: string\n        name:\n          type: string\n        orgID:\n          type: string\n        retentionRules:\n          $ref: '#/components/schemas/RetentionRules'\n        rp:\n          type: string\n        schemaType:\n          $ref: '#/components/schemas/SchemaType'\n          default: implicit\n      required:\n      - orgID\n      - name\n      - retentionRules\n    PostCheck:\n      allOf:\n      - $ref: '#/components/schemas/CheckDiscriminator'\n    PostNotificationEndpoint:\n      allOf:\n      - $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n    PostNotificationRule:\n      allOf:\n      - $ref: '#/components/schemas/NotificationRuleDiscriminator'\n    PostOrganizationRequest:\n      properties:\n        description:\n          type: string\n        name:\n          type: string\n      required:\n      - name\n      type: object\n    Property:\n      description: The value associated with a key\n      properties:\n        key:\n          $ref: '#/components/schemas/PropertyKey'\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          $ref: '#/components/schemas/Expression'\n      type: object\n    PropertyKey:\n      oneOf:\n      - $ref: '#/components/schemas/Identifier'\n      - $ref: '#/components/schemas/StringLiteral'\n    Query:\n      description: Query influx using the Flux language\n      properties:\n        dialect:\n          $ref: '#/components/schemas/Dialect'\n        extern:\n          $ref: '#/components/schemas/File'\n        now:\n          description: Specifies the time that should be reported as \"now\" in the\n            query. Default is the server's now time.\n          format: date-time\n          type: string\n        params:\n          additionalProperties: true\n          description: |\n            Enumeration of key/value pairs that respresent parameters to be injected into query (can only specify either this field or extern and not both)\n          type: object\n        query:\n          description: Query script to execute.\n          type: string\n        type:\n          description: The type of query. Must be \"flux\".\n          enum:\n          - flux\n          type: string\n      required:\n      - query\n      type: object\n    QueryEditMode:\n      enum:\n      - builder\n      - advanced\n      type: string\n    QueryVariableProperties:\n      properties:\n        type:\n          enum:\n          - query\n          type: string\n        values:\n          properties:\n            language:\n              type: string\n            query:\n              type: string\n          type: object\n    RangeThreshold:\n      allOf:\n      - $ref: '#/components/schemas/ThresholdBase'\n      - properties:\n          max:\n            format: float\n            type: number\n          min:\n            format: float\n            type: number\n          type:\n            enum:\n            - range\n            type: string\n          within:\n            type: boolean\n        required:\n        - type\n        - min\n        - max\n        - within\n        type: object\n    Ready:\n      properties:\n        started:\n          example: \"2019-03-13T10:09:33.891196-04:00\"\n          format: date-time\n          type: string\n        status:\n          enum:\n          - ready\n          type: string\n        up:\n          example: 14m45.911966424s\n          type: string\n      type: object\n    RegexpLiteral:\n      description: Expressions begin and end with `/` and are regular expressions\n        with syntax accepted by RE2\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n      type: object\n    RenamableField:\n      description: Describes a field that can be renamed and made visible or invisible.\n      properties:\n        displayName:\n          description: The name that a field is renamed to by the user.\n          type: string\n        internalName:\n          description: The calculated name of a field.\n          readOnly: true\n          type: string\n        visible:\n          description: Indicates whether this field should be visible on the table.\n          type: boolean\n      type: object\n    Resource:\n      properties:\n        id:\n          description: If ID is set that is a permission for a specific resource.\n            if it is not set it is a permission for all resources of that resource\n            type.\n          nullable: true\n          type: string\n        name:\n          description: Optional name of the resource if the resource has a name field.\n          nullable: true\n          type: string\n        org:\n          description: Optional name of the organization of the organization with\n            orgID.\n          nullable: true\n          type: string\n        orgID:\n          description: If orgID is set that is a permission for all resources owned\n            my that org. if it is not set it is a permission for all resources of\n            that resource type.\n          nullable: true\n          type: string\n        type:\n          enum:\n          - authorizations\n          - buckets\n          - dashboards\n          - orgs\n          - tasks\n          - telegrafs\n          - users\n          - variables\n          - secrets\n          - labels\n          - views\n          - documents\n          - notificationRules\n          - notificationEndpoints\n          - checks\n          - dbrp\n          - flows\n          - annotations\n          - functions\n          type: string\n      required:\n      - type\n      type: object\n    ResourceMember:\n      allOf:\n      - $ref: '#/components/schemas/UserResponse'\n      - properties:\n          role:\n            default: member\n            enum:\n            - member\n            type: string\n        type: object\n    ResourceMembers:\n      properties:\n        links:\n          properties:\n            self:\n              format: uri\n              type: string\n          type: object\n        users:\n          items:\n            $ref: '#/components/schemas/ResourceMember'\n          type: array\n      type: object\n    ResourceOwner:\n      allOf:\n      - $ref: '#/components/schemas/UserResponse'\n      - properties:\n          role:\n            default: owner\n            enum:\n            - owner\n            type: string\n        type: object\n    ResourceOwners:\n      properties:\n        links:\n          properties:\n            self:\n              format: uri\n              type: string\n          type: object\n        users:\n          items:\n            $ref: '#/components/schemas/ResourceOwner'\n          type: array\n      type: object\n    RetentionRule:\n      properties:\n        everySeconds:\n          description: Duration in seconds for how long data will be kept in the database.\n            0 means infinite.\n          example: 86400\n          format: int64\n          minimum: 0\n          type: integer\n        shardGroupDurationSeconds:\n          description: Shard duration measured in seconds.\n          format: int64\n          type: integer\n        type:\n          default: expire\n          enum:\n          - expire\n          type: string\n      required:\n      - type\n      - everySeconds\n      type: object\n    RetentionRules:\n      description: Rules to expire or retain data.  No rules means data never expires.\n      items:\n        $ref: '#/components/schemas/RetentionRule'\n      type: array\n    ReturnStatement:\n      description: Defines an expression to return\n      properties:\n        argument:\n          $ref: '#/components/schemas/Expression'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    Routes:\n      properties:\n        authorizations:\n          format: uri\n          type: string\n        buckets:\n          format: uri\n          type: string\n        dashboards:\n          format: uri\n          type: string\n        external:\n          properties:\n            statusFeed:\n              format: uri\n              type: string\n          type: object\n        flags:\n          format: uri\n          type: string\n        me:\n          format: uri\n          type: string\n        orgs:\n          format: uri\n          type: string\n        query:\n          properties:\n            analyze:\n              format: uri\n              type: string\n            ast:\n              format: uri\n              type: string\n            self:\n              format: uri\n              type: string\n            suggestions:\n              format: uri\n              type: string\n          type: object\n        setup:\n          format: uri\n          type: string\n        signin:\n          format: uri\n          type: string\n        signout:\n          format: uri\n          type: string\n        sources:\n          format: uri\n          type: string\n        system:\n          properties:\n            debug:\n              format: uri\n              type: string\n            health:\n              format: uri\n              type: string\n            metrics:\n              format: uri\n              type: string\n          type: object\n        tasks:\n          format: uri\n          type: string\n        telegrafs:\n          format: uri\n          type: string\n        users:\n          format: uri\n          type: string\n        variables:\n          format: uri\n          type: string\n        write:\n          format: uri\n          type: string\n    RuleStatusLevel:\n      description: The state to record if check matches a criteria.\n      enum:\n      - UNKNOWN\n      - OK\n      - INFO\n      - CRIT\n      - WARN\n      - ANY\n      type: string\n    Run:\n      properties:\n        finishedAt:\n          description: Time run finished executing, RFC3339Nano.\n          format: date-time\n          readOnly: true\n          type: string\n        id:\n          readOnly: true\n          type: string\n        links:\n          example:\n            retry: /api/v2/tasks/1/runs/1/retry\n            self: /api/v2/tasks/1/runs/1\n            task: /api/v2/tasks/1\n          properties:\n            retry:\n              format: uri\n              type: string\n            self:\n              format: uri\n              type: string\n            task:\n              format: uri\n              type: string\n          readOnly: true\n          type: object\n        log:\n          description: An array of logs associated with the run.\n          items:\n            $ref: '#/components/schemas/LogEvent'\n          readOnly: true\n          type: array\n        requestedAt:\n          description: Time run was manually requested, RFC3339Nano.\n          format: date-time\n          readOnly: true\n          type: string\n        scheduledFor:\n          description: Time used for run's \"now\" option, RFC3339.\n          format: date-time\n          type: string\n        startedAt:\n          description: Time run started executing, RFC3339Nano.\n          format: date-time\n          readOnly: true\n          type: string\n        status:\n          enum:\n          - scheduled\n          - started\n          - failed\n          - success\n          - canceled\n          readOnly: true\n          type: string\n        taskID:\n          readOnly: true\n          type: string\n    RunManually:\n      properties:\n        scheduledFor:\n          description: Time used for run's \"now\" option, RFC3339.  Default is the\n            server's now time.\n          format: date-time\n          nullable: true\n          type: string\n    Runs:\n      properties:\n        links:\n          $ref: '#/components/schemas/Links'\n        runs:\n          items:\n            $ref: '#/components/schemas/Run'\n          type: array\n      type: object\n    SMTPNotificationRule:\n      allOf:\n      - $ref: '#/components/schemas/NotificationRuleBase'\n      - $ref: '#/components/schemas/SMTPNotificationRuleBase'\n    SMTPNotificationRuleBase:\n      properties:\n        bodyTemplate:\n          type: string\n        subjectTemplate:\n          type: string\n        to:\n          type: string\n        type:\n          enum:\n          - smtp\n          type: string\n      required:\n      - type\n      - subjectTemplate\n      - to\n      type: object\n    ScatterViewProperties:\n      properties:\n        colors:\n          description: Colors define color encoding of data into a visualization\n          items:\n            type: string\n          type: array\n        fillColumns:\n          items:\n            type: string\n          type: array\n        generateXAxisTicks:\n          items:\n            type: string\n          type: array\n        generateYAxisTicks:\n          items:\n            type: string\n          type: array\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          format: float\n          type: number\n        legendOrientationThreshold:\n          type: integer\n        note:\n          type: string\n        queries:\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n          type: array\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        symbolColumns:\n          items:\n            type: string\n          type: array\n        timeFormat:\n          type: string\n        type:\n          enum:\n          - scatter\n          type: string\n        xAxisLabel:\n          type: string\n        xColumn:\n          type: string\n        xDomain:\n          items:\n            type: number\n          maxItems: 2\n          type: array\n        xPrefix:\n          type: string\n        xSuffix:\n          type: string\n        xTickStart:\n          format: float\n          type: number\n        xTickStep:\n          format: float\n          type: number\n        xTotalTicks:\n          type: integer\n        yAxisLabel:\n          type: string\n        yColumn:\n          type: string\n        yDomain:\n          items:\n            type: number\n          maxItems: 2\n          type: array\n        yPrefix:\n          type: string\n        ySuffix:\n          type: string\n        yTickStart:\n          format: float\n          type: number\n        yTickStep:\n          format: float\n          type: number\n        yTotalTicks:\n          type: integer\n      required:\n      - type\n      - queries\n      - colors\n      - shape\n      - note\n      - showNoteWhenEmpty\n      - xColumn\n      - yColumn\n      - fillColumns\n      - symbolColumns\n      - xDomain\n      - yDomain\n      - xAxisLabel\n      - yAxisLabel\n      - xPrefix\n      - yPrefix\n      - xSuffix\n      - ySuffix\n      type: object\n    SchemaType:\n      enum:\n      - implicit\n      - explicit\n      type: string\n    Script:\n      properties:\n        createdAt:\n          format: date-time\n          readOnly: true\n          type: string\n        description:\n          type: string\n        id:\n          readOnly: true\n          type: string\n        language:\n          $ref: '#/components/schemas/ScriptLanguage'\n        name:\n          type: string\n        orgID:\n          type: string\n        script:\n          description: script to be executed\n          type: string\n        updatedAt:\n          format: date-time\n          readOnly: true\n          type: string\n        url:\n          description: invocation endpoint address\n          type: string\n      required:\n      - name\n      - orgID\n      - script\n    ScriptCreateRequest:\n      properties:\n        description:\n          type: string\n        language:\n          $ref: '#/components/schemas/ScriptLanguage'\n        name:\n          description: The name of the script. The name must be unique within the\n            organization.\n          type: string\n        script:\n          description: The script to execute.\n          type: string\n      required:\n      - name\n      - script\n      - language\n      - description\n      type: object\n    ScriptHTTPResponseData:\n      description: The data sent in the response body when a script is invoked by\n        an HTTP request. User defined and dynamic.\n      type: string\n    ScriptInvocationParams:\n      properties:\n        params:\n          additionalProperties: true\n          type: object\n      type: object\n    ScriptLanguage:\n      enum:\n      - flux\n      type: string\n    ScriptUpdateRequest:\n      properties:\n        description:\n          type: string\n        name:\n          type: string\n        script:\n          description: script is script to be executed\n          type: string\n      type: object\n    Scripts:\n      properties:\n        scripts:\n          items:\n            $ref: '#/components/schemas/Script'\n          type: array\n      type: object\n    SecretKeys:\n      properties:\n        secrets:\n          items:\n            type: string\n          type: array\n      type: object\n    SecretKeysResponse:\n      allOf:\n      - $ref: '#/components/schemas/SecretKeys'\n      - properties:\n          links:\n            properties:\n              org:\n                type: string\n              self:\n                type: string\n            readOnly: true\n            type: object\n        type: object\n    Secrets:\n      additionalProperties:\n        type: string\n      example:\n        apikey: abc123xyz\n    SimpleTableViewProperties:\n      properties:\n        note:\n          type: string\n        queries:\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n          type: array\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        showAll:\n          type: boolean\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        type:\n          enum:\n          - simple-table\n          type: string\n      required:\n      - type\n      - showAll\n      - queries\n      - shape\n      - note\n      - showNoteWhenEmpty\n      type: object\n    SingleStatViewProperties:\n      properties:\n        colors:\n          description: Colors define color encoding of data into a visualization\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n          type: array\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n        note:\n          type: string\n        prefix:\n          type: string\n        queries:\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n          type: array\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        staticLegend:\n          $ref: '#/components/schemas/StaticLegend'\n        suffix:\n          type: string\n        tickPrefix:\n          type: string\n        tickSuffix:\n          type: string\n        type:\n          enum:\n          - single-stat\n          type: string\n      required:\n      - type\n      - queries\n      - colors\n      - shape\n      - note\n      - showNoteWhenEmpty\n      - prefix\n      - tickPrefix\n      - suffix\n      - tickSuffix\n      - decimalPlaces\n      type: object\n    SlackNotificationEndpoint:\n      allOf:\n      - $ref: '#/components/schemas/NotificationEndpointBase'\n      - properties:\n          token:\n            description: Specifies the API token string. Specify either `URL` or `Token`.\n            type: string\n          url:\n            description: Specifies the URL of the Slack endpoint. Specify either `URL`\n              or `Token`.\n            type: string\n        type: object\n      type: object\n    SlackNotificationRule:\n      allOf:\n      - $ref: '#/components/schemas/NotificationRuleBase'\n      - $ref: '#/components/schemas/SlackNotificationRuleBase'\n    SlackNotificationRuleBase:\n      properties:\n        channel:\n          type: string\n        messageTemplate:\n          type: string\n        type:\n          enum:\n          - slack\n          type: string\n      required:\n      - type\n      - messageTemplate\n      type: object\n    Stack:\n      properties:\n        createdAt:\n          format: date-time\n          readOnly: true\n          type: string\n        events:\n          items:\n            properties:\n              description:\n                type: string\n              eventType:\n                type: string\n              name:\n                type: string\n              resources:\n                items:\n                  properties:\n                    apiVersion:\n                      type: string\n                    associations:\n                      items:\n                        properties:\n                          kind:\n                            $ref: '#/components/schemas/TemplateKind'\n                          metaName:\n                            type: string\n                        type: object\n                      type: array\n                    kind:\n                      $ref: '#/components/schemas/TemplateKind'\n                    links:\n                      properties:\n                        self:\n                          type: string\n                      type: object\n                    resourceID:\n                      type: string\n                    templateMetaName:\n                      type: string\n                  type: object\n                type: array\n              sources:\n                items:\n                  type: string\n                type: array\n              updatedAt:\n                format: date-time\n                readOnly: true\n                type: string\n              urls:\n                items:\n                  type: string\n                type: array\n            type: object\n          type: array\n        id:\n          type: string\n        orgID:\n          type: string\n      type: object\n    Statement:\n      oneOf:\n      - $ref: '#/components/schemas/BadStatement'\n      - $ref: '#/components/schemas/VariableAssignment'\n      - $ref: '#/components/schemas/MemberAssignment'\n      - $ref: '#/components/schemas/ExpressionStatement'\n      - $ref: '#/components/schemas/ReturnStatement'\n      - $ref: '#/components/schemas/OptionStatement'\n      - $ref: '#/components/schemas/BuiltinStatement'\n      - $ref: '#/components/schemas/TestStatement'\n    StaticLegend:\n      description: StaticLegend represents the options specific to the static legend\n      properties:\n        colorizeRows:\n          type: boolean\n        heightRatio:\n          format: float\n          type: number\n        opacity:\n          format: float\n          type: number\n        orientationThreshold:\n          type: integer\n        show:\n          type: boolean\n        valueAxis:\n          type: string\n        widthRatio:\n          format: float\n          type: number\n      type: object\n    StatusRule:\n      properties:\n        count:\n          type: integer\n        currentLevel:\n          $ref: '#/components/schemas/RuleStatusLevel'\n        period:\n          type: string\n        previousLevel:\n          $ref: '#/components/schemas/RuleStatusLevel'\n      type: object\n    StringLiteral:\n      description: Expressions begin and end with double quote marks\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n      type: object\n    TableViewProperties:\n      properties:\n        colors:\n          description: Colors define color encoding of data into a visualization\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n          type: array\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n        fieldOptions:\n          description: fieldOptions represent the fields retrieved by the query with\n            customization options\n          items:\n            $ref: '#/components/schemas/RenamableField'\n          type: array\n        note:\n          type: string\n        queries:\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n          type: array\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        tableOptions:\n          properties:\n            fixFirstColumn:\n              description: fixFirstColumn indicates whether the first column of the\n                table should be locked\n              type: boolean\n            sortBy:\n              $ref: '#/components/schemas/RenamableField'\n            verticalTimeAxis:\n              description: verticalTimeAxis describes the orientation of the table\n                by indicating whether the time axis will be displayed vertically\n              type: boolean\n            wrapping:\n              description: Wrapping describes the text wrapping style to be used in\n                table views\n              enum:\n              - truncate\n              - wrap\n              - single-line\n              type: string\n          type: object\n        timeFormat:\n          description: timeFormat describes the display format for time values according\n            to moment.js date formatting\n          type: string\n        type:\n          enum:\n          - table\n          type: string\n      required:\n      - type\n      - queries\n      - colors\n      - shape\n      - note\n      - showNoteWhenEmpty\n      - tableOptions\n      - fieldOptions\n      - timeFormat\n      - decimalPlaces\n      type: object\n    TagRule:\n      properties:\n        key:\n          type: string\n        operator:\n          enum:\n          - equal\n          - notequal\n          - equalregex\n          - notequalregex\n          type: string\n        value:\n          type: string\n      type: object\n    Task:\n      properties:\n        authorizationID:\n          description: ID of the authorization used when the task communicates with\n            the query engine.\n          type: string\n        createdAt:\n          format: date-time\n          readOnly: true\n          type: string\n        cron:\n          description: |-\n            [Cron expression](https://en.wikipedia.org/wiki/Cron#Overview) that defines the schedule on which the task runs. Cron scheduling is based on system time.\n            Value is a [Cron expression](https://en.wikipedia.org/wiki/Cron#Overview).\n          type: string\n        description:\n          description: Description of the task.\n          type: string\n        every:\n          description: |-\n            Interval at which the task runs. `every` also determines when the task first runs, depending on the specified time.\n            Value is a [duration literal](https://docs.influxdata.com/flux/v0.x/spec/lexical-elements/#duration-literals)).\n          format: duration\n          type: string\n        flux:\n          description: Flux script to run for this task.\n          type: string\n        id:\n          readOnly: true\n          type: string\n        labels:\n          $ref: '#/components/schemas/Labels'\n        lastRunError:\n          readOnly: true\n          type: string\n        lastRunStatus:\n          enum:\n          - failed\n          - success\n          - canceled\n          readOnly: true\n          type: string\n        latestCompleted:\n          description: |-\n            Timestamp of the latest scheduled and completed run.\n            Value is a timestamp in [RFC3339 date/time format](https://docs.influxdata.com/flux/v0.x/data-types/basic/time/#time-syntax).\n          format: date-time\n          readOnly: true\n          type: string\n        links:\n          example:\n            labels: /api/v2/tasks/1/labels\n            logs: /api/v2/tasks/1/logs\n            members: /api/v2/tasks/1/members\n            owners: /api/v2/tasks/1/owners\n            runs: /api/v2/tasks/1/runs\n            self: /api/v2/tasks/1\n          properties:\n            labels:\n              $ref: '#/components/schemas/Link'\n            logs:\n              $ref: '#/components/schemas/Link'\n            members:\n              $ref: '#/components/schemas/Link'\n            owners:\n              $ref: '#/components/schemas/Link'\n            runs:\n              $ref: '#/components/schemas/Link'\n            self:\n              $ref: '#/components/schemas/Link'\n          readOnly: true\n          type: object\n        name:\n          description: Name of the task.\n          type: string\n        offset:\n          description: |-\n            [Duration](https://docs.influxdata.com/flux/v0.x/spec/lexical-elements/#duration-literals) to delay execution of the task after the scheduled time has elapsed. `0` removes the offset.\n            The value is a [duration literal](https://docs.influxdata.com/flux/v0.x/spec/lexical-elements/#duration-literals).\n          format: duration\n          type: string\n        org:\n          description: Name of the organization that owns the task.\n          type: string\n        orgID:\n          description: ID of the organization that owns the task.\n          type: string\n        ownerID:\n          description: ID of the user who owns this Task.\n          type: string\n        status:\n          $ref: '#/components/schemas/TaskStatusType'\n        type:\n          description: Type of the task, useful for filtering a task list.\n          type: string\n        updatedAt:\n          format: date-time\n          readOnly: true\n          type: string\n      required:\n      - id\n      - name\n      - orgID\n      - flux\n      type: object\n    TaskCreateRequest:\n      properties:\n        description:\n          description: An optional description of the task.\n          type: string\n        flux:\n          description: The Flux script to run for this task.\n          type: string\n        org:\n          description: The name of the organization that owns this Task.\n          type: string\n        orgID:\n          description: The ID of the organization that owns this Task.\n          type: string\n        status:\n          $ref: '#/components/schemas/TaskStatusType'\n      required:\n      - flux\n      type: object\n    TaskStatusType:\n      enum:\n      - active\n      - inactive\n      type: string\n    TaskUpdateRequest:\n      properties:\n        cron:\n          description: Override the 'cron' option in the flux script.\n          type: string\n        description:\n          description: An optional description of the task.\n          type: string\n        every:\n          description: Override the 'every' option in the flux script.\n          type: string\n        flux:\n          description: The Flux script to run for this task.\n          type: string\n        name:\n          description: Override the 'name' option in the flux script.\n          type: string\n        offset:\n          description: Override the 'offset' option in the flux script.\n          type: string\n        status:\n          $ref: '#/components/schemas/TaskStatusType'\n      type: object\n    Tasks:\n      properties:\n        links:\n          $ref: '#/components/schemas/Links'\n          readOnly: true\n        tasks:\n          items:\n            $ref: '#/components/schemas/Task'\n          type: array\n      type: object\n    Telegraf:\n      allOf:\n      - $ref: '#/components/schemas/TelegrafRequest'\n      - properties:\n          id:\n            readOnly: true\n            type: string\n          labels:\n            $ref: '#/components/schemas/Labels'\n            readOnly: true\n          links:\n            example:\n              lables: /api/v2/telegrafs/1/labels\n              members: /api/v2/telegrafs/1/members\n              owners: /api/v2/telegrafs/1/owners\n              self: /api/v2/telegrafs/1\n            properties:\n              labels:\n                $ref: '#/components/schemas/Link'\n              members:\n                $ref: '#/components/schemas/Link'\n              owners:\n                $ref: '#/components/schemas/Link'\n              self:\n                $ref: '#/components/schemas/Link'\n            readOnly: true\n            type: object\n        type: object\n      type: object\n    TelegrafPlugin:\n      properties:\n        config:\n          type: string\n        description:\n          type: string\n        name:\n          type: string\n        type:\n          type: string\n      type: object\n    TelegrafPluginRequest:\n      properties:\n        config:\n          type: string\n        description:\n          type: string\n        metadata:\n          properties:\n            buckets:\n              items:\n                type: string\n              type: array\n          type: object\n        name:\n          type: string\n        orgID:\n          type: string\n        plugins:\n          items:\n            properties:\n              alias:\n                type: string\n              config:\n                type: string\n              description:\n                type: string\n              name:\n                type: string\n              type:\n                type: string\n            type: object\n          type: array\n      type: object\n    TelegrafPlugins:\n      properties:\n        os:\n          type: string\n        plugins:\n          items:\n            $ref: '#/components/schemas/TelegrafPlugin'\n          type: array\n        version:\n          type: string\n      type: object\n    TelegrafRequest:\n      properties:\n        config:\n          type: string\n        description:\n          type: string\n        metadata:\n          properties:\n            buckets:\n              items:\n                type: string\n              type: array\n          type: object\n        name:\n          type: string\n        orgID:\n          type: string\n      type: object\n    Telegrafs:\n      properties:\n        configurations:\n          items:\n            $ref: '#/components/schemas/Telegraf'\n          type: array\n      type: object\n    TelegramNotificationEndpoint:\n      allOf:\n      - $ref: '#/components/schemas/NotificationEndpointBase'\n      - properties:\n          channel:\n            description: ID of the telegram channel, a chat_id in https://core.telegram.org/bots/api#sendmessage\n              .\n            type: string\n          token:\n            description: Specifies the Telegram bot token. See https://core.telegram.org/bots#creating-a-new-bot\n              .\n            type: string\n        required:\n        - token\n        - channel\n        type: object\n      type: object\n    TelegramNotificationRule:\n      allOf:\n      - $ref: '#/components/schemas/NotificationRuleBase'\n      - $ref: '#/components/schemas/TelegramNotificationRuleBase'\n    TelegramNotificationRuleBase:\n      properties:\n        disableWebPagePreview:\n          description: Disables preview of web links in the sent messages when \"true\".\n            Defaults to \"false\" .\n          type: boolean\n        messageTemplate:\n          description: The message template as a flux interpolated string.\n          type: string\n        parseMode:\n          description: Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options\n            . Defaults to \"MarkdownV2\" .\n          enum:\n          - MarkdownV2\n          - HTML\n          - Markdown\n          type: string\n        type:\n          description: The discriminator between other types of notification rules\n            is \"telegram\".\n          enum:\n          - telegram\n          type: string\n      required:\n      - type\n      - messageTemplate\n      - channel\n      type: object\n    Template:\n      items:\n        properties:\n          apiVersion:\n            type: string\n          kind:\n            $ref: '#/components/schemas/TemplateKind'\n          meta:\n            properties:\n              name:\n                type: string\n            type: object\n          spec:\n            type: object\n        type: object\n      type: array\n    TemplateApply:\n      properties:\n        actions:\n          items:\n            oneOf:\n            - properties:\n                action:\n                  enum:\n                  - skipKind\n                  type: string\n                properties:\n                  properties:\n                    kind:\n                      $ref: '#/components/schemas/TemplateKind'\n                  required:\n                  - kind\n                  type: object\n              type: object\n            - properties:\n                action:\n                  enum:\n                  - skipResource\n                  type: string\n                properties:\n                  properties:\n                    kind:\n                      $ref: '#/components/schemas/TemplateKind'\n                    resourceTemplateName:\n                      type: string\n                  required:\n                  - kind\n                  - resourceTemplateName\n                  type: object\n              type: object\n          type: array\n        dryRun:\n          type: boolean\n        envRefs:\n          additionalProperties:\n            oneOf:\n            - type: string\n            - type: integer\n            - type: number\n            - type: boolean\n          type: object\n        orgID:\n          type: string\n        remotes:\n          items:\n            properties:\n              contentType:\n                type: string\n              url:\n                type: string\n            required:\n            - url\n            type: object\n          type: array\n        secrets:\n          additionalProperties:\n            type: string\n          type: object\n        stackID:\n          type: string\n        template:\n          properties:\n            contentType:\n              type: string\n            contents:\n              $ref: '#/components/schemas/Template'\n            sources:\n              items:\n                type: string\n              type: array\n          type: object\n        templates:\n          items:\n            properties:\n              contentType:\n                type: string\n              contents:\n                $ref: '#/components/schemas/Template'\n              sources:\n                items:\n                  type: string\n                type: array\n            type: object\n          type: array\n      type: object\n    TemplateChart:\n      properties:\n        height:\n          type: integer\n        properties:\n          $ref: '#/components/schemas/ViewProperties'\n        width:\n          type: integer\n        xPos:\n          type: integer\n        yPos:\n          type: integer\n      type: object\n    TemplateEnvReferences:\n      items:\n        properties:\n          defaultValue:\n            description: Default value that will be provided for the reference when\n              no value is provided\n            nullable: true\n            oneOf:\n            - type: string\n            - type: integer\n            - type: number\n            - type: boolean\n          envRefKey:\n            description: Key identified as environment reference and is the key identified\n              in the template\n            type: string\n          resourceField:\n            description: Field the environment reference corresponds too\n            type: string\n          value:\n            description: Value provided to fulfill reference\n            nullable: true\n            oneOf:\n            - type: string\n            - type: integer\n            - type: number\n            - type: boolean\n        required:\n        - resourceField\n        - envRefKey\n        type: object\n      type: array\n    TemplateExportByID:\n      properties:\n        orgIDs:\n          items:\n            properties:\n              orgID:\n                type: string\n              resourceFilters:\n                properties:\n                  byLabel:\n                    items:\n                      type: string\n                    type: array\n                  byResourceKind:\n                    items:\n                      $ref: '#/components/schemas/TemplateKind'\n                    type: array\n                type: object\n            type: object\n          type: array\n        resources:\n          items:\n            properties:\n              id:\n                type: string\n              kind:\n                $ref: '#/components/schemas/TemplateKind'\n              name:\n                description: if defined with id, name is used for resource exported\n                  by id. if defined independently, resources strictly matching name\n                  are exported\n                type: string\n            required:\n            - id\n            - kind\n            type: object\n          type: array\n        stackID:\n          type: string\n      type: object\n    TemplateExportByName:\n      properties:\n        orgIDs:\n          items:\n            properties:\n              orgID:\n                type: string\n              resourceFilters:\n                properties:\n                  byLabel:\n                    items:\n                      type: string\n                    type: array\n                  byResourceKind:\n                    items:\n                      $ref: '#/components/schemas/TemplateKind'\n                    type: array\n                type: object\n            type: object\n          type: array\n        resources:\n          items:\n            properties:\n              kind:\n                $ref: '#/components/schemas/TemplateKind'\n              name:\n                type: string\n            required:\n            - name\n            - kind\n            type: object\n          type: array\n        stackID:\n          type: string\n      type: object\n    TemplateKind:\n      enum:\n      - Bucket\n      - Check\n      - CheckDeadman\n      - CheckThreshold\n      - Dashboard\n      - Label\n      - NotificationEndpoint\n      - NotificationEndpointHTTP\n      - NotificationEndpointPagerDuty\n      - NotificationEndpointSlack\n      - NotificationRule\n      - Task\n      - Telegraf\n      - Variable\n      type: string\n    TemplateSummary:\n      properties:\n        diff:\n          properties:\n            buckets:\n              items:\n                properties:\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  new:\n                    properties:\n                      description:\n                        type: string\n                      name:\n                        type: string\n                      retentionRules:\n                        $ref: '#/components/schemas/RetentionRules'\n                    type: object\n                  old:\n                    properties:\n                      description:\n                        type: string\n                      name:\n                        type: string\n                      retentionRules:\n                        $ref: '#/components/schemas/RetentionRules'\n                    type: object\n                  stateStatus:\n                    type: string\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n            checks:\n              items:\n                properties:\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  new:\n                    $ref: '#/components/schemas/CheckDiscriminator'\n                  old:\n                    $ref: '#/components/schemas/CheckDiscriminator'\n                  stateStatus:\n                    type: string\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n            dashboards:\n              items:\n                properties:\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  new:\n                    properties:\n                      charts:\n                        items:\n                          $ref: '#/components/schemas/TemplateChart'\n                        type: array\n                      description:\n                        type: string\n                      name:\n                        type: string\n                    type: object\n                  old:\n                    properties:\n                      charts:\n                        items:\n                          $ref: '#/components/schemas/TemplateChart'\n                        type: array\n                      description:\n                        type: string\n                      name:\n                        type: string\n                    type: object\n                  stateStatus:\n                    type: string\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n            labelMappings:\n              items:\n                properties:\n                  labelID:\n                    type: string\n                  labelName:\n                    type: string\n                  labelTemplateMetaName:\n                    type: string\n                  resourceID:\n                    type: string\n                  resourceName:\n                    type: string\n                  resourceTemplateMetaName:\n                    type: string\n                  resourceType:\n                    type: string\n                  status:\n                    type: string\n                type: object\n              type: array\n            labels:\n              items:\n                properties:\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  new:\n                    properties:\n                      color:\n                        type: string\n                      description:\n                        type: string\n                      name:\n                        type: string\n                    type: object\n                  old:\n                    properties:\n                      color:\n                        type: string\n                      description:\n                        type: string\n                      name:\n                        type: string\n                    type: object\n                  stateStatus:\n                    type: string\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n            notificationEndpoints:\n              items:\n                properties:\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  new:\n                    $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n                  old:\n                    $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n                  stateStatus:\n                    type: string\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n            notificationRules:\n              items:\n                properties:\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  new:\n                    properties:\n                      description:\n                        type: string\n                      endpointID:\n                        type: string\n                      endpointName:\n                        type: string\n                      endpointType:\n                        type: string\n                      every:\n                        type: string\n                      messageTemplate:\n                        type: string\n                      name:\n                        type: string\n                      offset:\n                        type: string\n                      status:\n                        type: string\n                      statusRules:\n                        items:\n                          properties:\n                            currentLevel:\n                              type: string\n                            previousLevel:\n                              type: string\n                          type: object\n                        type: array\n                      tagRules:\n                        items:\n                          properties:\n                            key:\n                              type: string\n                            operator:\n                              type: string\n                            value:\n                              type: string\n                          type: object\n                        type: array\n                    type: object\n                  old:\n                    properties:\n                      description:\n                        type: string\n                      endpointID:\n                        type: string\n                      endpointName:\n                        type: string\n                      endpointType:\n                        type: string\n                      every:\n                        type: string\n                      messageTemplate:\n                        type: string\n                      name:\n                        type: string\n                      offset:\n                        type: string\n                      status:\n                        type: string\n                      statusRules:\n                        items:\n                          properties:\n                            currentLevel:\n                              type: string\n                            previousLevel:\n                              type: string\n                          type: object\n                        type: array\n                      tagRules:\n                        items:\n                          properties:\n                            key:\n                              type: string\n                            operator:\n                              type: string\n                            value:\n                              type: string\n                          type: object\n                        type: array\n                    type: object\n                  stateStatus:\n                    type: string\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n            tasks:\n              items:\n                properties:\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  new:\n                    properties:\n                      cron:\n                        type: string\n                      description:\n                        type: string\n                      every:\n                        type: string\n                      name:\n                        type: string\n                      offset:\n                        type: string\n                      query:\n                        type: string\n                      status:\n                        type: string\n                    type: object\n                  old:\n                    properties:\n                      cron:\n                        type: string\n                      description:\n                        type: string\n                      every:\n                        type: string\n                      name:\n                        type: string\n                      offset:\n                        type: string\n                      query:\n                        type: string\n                      status:\n                        type: string\n                    type: object\n                  stateStatus:\n                    type: string\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n            telegrafConfigs:\n              items:\n                properties:\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  new:\n                    $ref: '#/components/schemas/TelegrafRequest'\n                  old:\n                    $ref: '#/components/schemas/TelegrafRequest'\n                  stateStatus:\n                    type: string\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n            variables:\n              items:\n                properties:\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  new:\n                    properties:\n                      args:\n                        $ref: '#/components/schemas/VariableProperties'\n                      description:\n                        type: string\n                      name:\n                        type: string\n                    type: object\n                  old:\n                    properties:\n                      args:\n                        $ref: '#/components/schemas/VariableProperties'\n                      description:\n                        type: string\n                      name:\n                        type: string\n                    type: object\n                  stateStatus:\n                    type: string\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n          type: object\n        errors:\n          items:\n            properties:\n              fields:\n                items:\n                  type: string\n                type: array\n              indexes:\n                items:\n                  type: integer\n                type: array\n              kind:\n                $ref: '#/components/schemas/TemplateKind'\n              reason:\n                type: string\n            type: object\n          type: array\n        sources:\n          items:\n            type: string\n          type: array\n        stackID:\n          type: string\n        summary:\n          properties:\n            buckets:\n              items:\n                properties:\n                  description:\n                    type: string\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  labelAssociations:\n                    items:\n                      $ref: '#/components/schemas/TemplateSummaryLabel'\n                    type: array\n                  name:\n                    type: string\n                  orgID:\n                    type: string\n                  retentionPeriod:\n                    type: integer\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n            checks:\n              items:\n                allOf:\n                - $ref: '#/components/schemas/CheckDiscriminator'\n                - properties:\n                    envReferences:\n                      $ref: '#/components/schemas/TemplateEnvReferences'\n                    kind:\n                      $ref: '#/components/schemas/TemplateKind'\n                    labelAssociations:\n                      items:\n                        $ref: '#/components/schemas/TemplateSummaryLabel'\n                      type: array\n                    templateMetaName:\n                      type: string\n                  type: object\n              type: array\n            dashboards:\n              items:\n                properties:\n                  charts:\n                    items:\n                      $ref: '#/components/schemas/TemplateChart'\n                    type: array\n                  description:\n                    type: string\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  labelAssociations:\n                    items:\n                      $ref: '#/components/schemas/TemplateSummaryLabel'\n                    type: array\n                  name:\n                    type: string\n                  orgID:\n                    type: string\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n            labelMappings:\n              items:\n                properties:\n                  labelID:\n                    type: string\n                  labelName:\n                    type: string\n                  labelTemplateMetaName:\n                    type: string\n                  resourceID:\n                    type: string\n                  resourceName:\n                    type: string\n                  resourceTemplateMetaName:\n                    type: string\n                  resourceType:\n                    type: string\n                  status:\n                    type: string\n                type: object\n              type: array\n            labels:\n              items:\n                $ref: '#/components/schemas/TemplateSummaryLabel'\n              type: array\n            missingEnvRefs:\n              items:\n                type: string\n              type: array\n            missingSecrets:\n              items:\n                type: string\n              type: array\n            notificationEndpoints:\n              items:\n                allOf:\n                - $ref: '#/components/schemas/NotificationEndpointDiscriminator'\n                - properties:\n                    envReferences:\n                      $ref: '#/components/schemas/TemplateEnvReferences'\n                    kind:\n                      $ref: '#/components/schemas/TemplateKind'\n                    labelAssociations:\n                      items:\n                        $ref: '#/components/schemas/TemplateSummaryLabel'\n                      type: array\n                    templateMetaName:\n                      type: string\n                  type: object\n              type: array\n            notificationRules:\n              items:\n                properties:\n                  description:\n                    type: string\n                  endpointID:\n                    type: string\n                  endpointTemplateMetaName:\n                    type: string\n                  endpointType:\n                    type: string\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n                  every:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  labelAssociations:\n                    items:\n                      $ref: '#/components/schemas/TemplateSummaryLabel'\n                    type: array\n                  messageTemplate:\n                    type: string\n                  name:\n                    type: string\n                  offset:\n                    type: string\n                  status:\n                    type: string\n                  statusRules:\n                    items:\n                      properties:\n                        currentLevel:\n                          type: string\n                        previousLevel:\n                          type: string\n                      type: object\n                    type: array\n                  tagRules:\n                    items:\n                      properties:\n                        key:\n                          type: string\n                        operator:\n                          type: string\n                        value:\n                          type: string\n                      type: object\n                    type: array\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n            tasks:\n              items:\n                properties:\n                  cron:\n                    type: string\n                  description:\n                    type: string\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n                  every:\n                    type: string\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  name:\n                    type: string\n                  offset:\n                    type: string\n                  query:\n                    type: string\n                  status:\n                    type: string\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n            telegrafConfigs:\n              items:\n                allOf:\n                - $ref: '#/components/schemas/TelegrafRequest'\n                - properties:\n                    envReferences:\n                      $ref: '#/components/schemas/TemplateEnvReferences'\n                    kind:\n                      $ref: '#/components/schemas/TemplateKind'\n                    labelAssociations:\n                      items:\n                        $ref: '#/components/schemas/TemplateSummaryLabel'\n                      type: array\n                    templateMetaName:\n                      type: string\n                  type: object\n              type: array\n            variables:\n              items:\n                properties:\n                  arguments:\n                    $ref: '#/components/schemas/VariableProperties'\n                  description:\n                    type: string\n                  envReferences:\n                    $ref: '#/components/schemas/TemplateEnvReferences'\n                  id:\n                    type: string\n                  kind:\n                    $ref: '#/components/schemas/TemplateKind'\n                  labelAssociations:\n                    items:\n                      $ref: '#/components/schemas/TemplateSummaryLabel'\n                    type: array\n                  name:\n                    type: string\n                  orgID:\n                    type: string\n                  templateMetaName:\n                    type: string\n                type: object\n              type: array\n          type: object\n      type: object\n    TemplateSummaryLabel:\n      properties:\n        envReferences:\n          $ref: '#/components/schemas/TemplateEnvReferences'\n        id:\n          type: string\n        kind:\n          $ref: '#/components/schemas/TemplateKind'\n        name:\n          type: string\n        orgID:\n          type: string\n        properties:\n          properties:\n            color:\n              type: string\n            description:\n              type: string\n          type: object\n        templateMetaName:\n          type: string\n      type: object\n    TestStatement:\n      description: Declares a Flux test case\n      properties:\n        assignment:\n          $ref: '#/components/schemas/VariableAssignment'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    Threshold:\n      discriminator:\n        mapping:\n          greater: '#/components/schemas/GreaterThreshold'\n          lesser: '#/components/schemas/LesserThreshold'\n          range: '#/components/schemas/RangeThreshold'\n        propertyName: type\n      oneOf:\n      - $ref: '#/components/schemas/GreaterThreshold'\n      - $ref: '#/components/schemas/LesserThreshold'\n      - $ref: '#/components/schemas/RangeThreshold'\n    ThresholdBase:\n      properties:\n        allValues:\n          description: If true, only alert if all values meet threshold.\n          type: boolean\n        level:\n          $ref: '#/components/schemas/CheckStatusLevel'\n    ThresholdCheck:\n      allOf:\n      - $ref: '#/components/schemas/CheckBase'\n      - properties:\n          every:\n            description: Check repetition interval.\n            type: string\n          offset:\n            description: Duration to delay after the schedule, before executing check.\n            type: string\n          statusMessageTemplate:\n            description: The template used to generate and write a status message.\n            type: string\n          tags:\n            description: List of tags to write to each status.\n            items:\n              properties:\n                key:\n                  type: string\n                value:\n                  type: string\n              type: object\n            type: array\n          thresholds:\n            items:\n              $ref: '#/components/schemas/Threshold'\n            type: array\n          type:\n            enum:\n            - threshold\n            type: string\n        required:\n        - type\n        type: object\n    Token:\n      properties:\n        token:\n          type: string\n      type: object\n    UnaryExpression:\n      description: Uses operators to act on a single operand in an expression\n      properties:\n        argument:\n          $ref: '#/components/schemas/Expression'\n        operator:\n          type: string\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    UnsignedIntegerLiteral:\n      description: Represents integer numbers\n      properties:\n        type:\n          $ref: '#/components/schemas/NodeType'\n        value:\n          type: string\n      type: object\n    User:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        oauthID:\n          type: string\n        org_id:\n          type: string\n        role:\n          enum:\n          - owner\n          - member\n          type: string\n        status:\n          default: active\n          description: If inactive the user is inactive.\n          enum:\n          - active\n          - inactive\n          type: string\n      required:\n      - name\n    UserResponse:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        links:\n          example:\n            self: /api/v2/users/1\n          properties:\n            self:\n              format: uri\n              type: string\n          readOnly: true\n          type: object\n        name:\n          type: string\n        oauthID:\n          type: string\n        status:\n          default: active\n          description: If inactive the user is inactive.\n          enum:\n          - active\n          - inactive\n          type: string\n      required:\n      - name\n    Users:\n      properties:\n        links:\n          properties:\n            self:\n              format: uri\n              type: string\n          type: object\n        users:\n          items:\n            $ref: '#/components/schemas/UserResponse'\n          type: array\n      type: object\n    Variable:\n      properties:\n        arguments:\n          $ref: '#/components/schemas/VariableProperties'\n        createdAt:\n          format: date-time\n          type: string\n        description:\n          type: string\n        id:\n          readOnly: true\n          type: string\n        labels:\n          $ref: '#/components/schemas/Labels'\n        links:\n          properties:\n            labels:\n              format: uri\n              type: string\n            org:\n              format: uri\n              type: string\n            self:\n              format: uri\n              type: string\n          readOnly: true\n          type: object\n        name:\n          type: string\n        orgID:\n          type: string\n        selected:\n          items:\n            type: string\n          type: array\n        sort_order:\n          type: integer\n        updatedAt:\n          format: date-time\n          type: string\n      required:\n      - name\n      - orgID\n      - arguments\n      type: object\n    VariableAssignment:\n      description: Represents the declaration of a variable\n      properties:\n        id:\n          $ref: '#/components/schemas/Identifier'\n        init:\n          $ref: '#/components/schemas/Expression'\n        type:\n          $ref: '#/components/schemas/NodeType'\n      type: object\n    VariableProperties:\n      oneOf:\n      - $ref: '#/components/schemas/QueryVariableProperties'\n      - $ref: '#/components/schemas/ConstantVariableProperties'\n      - $ref: '#/components/schemas/MapVariableProperties'\n      type: object\n    Variables:\n      example:\n        variables:\n        - arguments:\n            type: constant\n            values:\n            - howdy\n            - hello\n            - hi\n            - yo\n            - oy\n          id: \"1221432\"\n          name: ':ok:'\n          selected:\n          - hello\n        - arguments:\n            type: map\n            values:\n              a: fdjaklfdjkldsfjlkjdsa\n              b: dfaksjfkljekfajekdljfas\n              c: fdjksajfdkfeawfeea\n          id: \"1221432\"\n          name: ':ok:'\n          selected:\n          - c\n        - arguments:\n            language: flux\n            query: 'from(bucket: \"foo\") |\u003e showMeasurements()'\n            type: query\n          id: \"1221432\"\n          name: ':ok:'\n          selected:\n          - host\n      properties:\n        variables:\n          items:\n            $ref: '#/components/schemas/Variable'\n          type: array\n      type: object\n    View:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        links:\n          properties:\n            self:\n              type: string\n          readOnly: true\n          type: object\n        name:\n          type: string\n        properties:\n          $ref: '#/components/schemas/ViewProperties'\n      required:\n      - name\n      - properties\n    ViewProperties:\n      oneOf:\n      - $ref: '#/components/schemas/LinePlusSingleStatProperties'\n      - $ref: '#/components/schemas/XYViewProperties'\n      - $ref: '#/components/schemas/SingleStatViewProperties'\n      - $ref: '#/components/schemas/HistogramViewProperties'\n      - $ref: '#/components/schemas/GaugeViewProperties'\n      - $ref: '#/components/schemas/TableViewProperties'\n      - $ref: '#/components/schemas/SimpleTableViewProperties'\n      - $ref: '#/components/schemas/MarkdownViewProperties'\n      - $ref: '#/components/schemas/CheckViewProperties'\n      - $ref: '#/components/schemas/ScatterViewProperties'\n      - $ref: '#/components/schemas/HeatmapViewProperties'\n      - $ref: '#/components/schemas/MosaicViewProperties'\n      - $ref: '#/components/schemas/BandViewProperties'\n      - $ref: '#/components/schemas/GeoViewProperties'\n    Views:\n      properties:\n        links:\n          properties:\n            self:\n              type: string\n          type: object\n        views:\n          items:\n            $ref: '#/components/schemas/View'\n          type: array\n      type: object\n    WritePrecision:\n      enum:\n      - ms\n      - s\n      - us\n      - ns\n      type: string\n    XYGeom:\n      enum:\n      - line\n      - step\n      - stacked\n      - bar\n      - monotoneX\n      type: string\n    XYViewProperties:\n      properties:\n        axes:\n          $ref: '#/components/schemas/Axes'\n        colorMapping:\n          $ref: '#/components/schemas/ColorMapping'\n          description: An object that contains information about the color mapping\n        colors:\n          description: Colors define color encoding of data into a visualization\n          items:\n            $ref: '#/components/schemas/DashboardColor'\n          type: array\n        generateXAxisTicks:\n          items:\n            type: string\n          type: array\n        generateYAxisTicks:\n          items:\n            type: string\n          type: array\n        geom:\n          $ref: '#/components/schemas/XYGeom'\n        hoverDimension:\n          enum:\n          - auto\n          - x\n          - \"y\"\n          - xy\n          type: string\n        legendColorizeRows:\n          type: boolean\n        legendHide:\n          type: boolean\n        legendOpacity:\n          format: float\n          type: number\n        legendOrientationThreshold:\n          type: integer\n        note:\n          type: string\n        position:\n          enum:\n          - overlaid\n          - stacked\n          type: string\n        queries:\n          items:\n            $ref: '#/components/schemas/DashboardQuery'\n          type: array\n        shadeBelow:\n          type: boolean\n        shape:\n          enum:\n          - chronograf-v2\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        staticLegend:\n          $ref: '#/components/schemas/StaticLegend'\n        timeFormat:\n          type: string\n        type:\n          enum:\n          - xy\n          type: string\n        xColumn:\n          type: string\n        xTickStart:\n          format: float\n          type: number\n        xTickStep:\n          format: float\n          type: number\n        xTotalTicks:\n          type: integer\n        yColumn:\n          type: string\n        yTickStart:\n          format: float\n          type: number\n        yTickStep:\n          format: float\n          type: number\n        yTotalTicks:\n          type: integer\n      required:\n      - type\n      - geom\n      - queries\n      - shape\n      - axes\n      - colors\n      - note\n      - showNoteWhenEmpty\n      - position\n      type: object\n  securitySchemes:\n    BasicAuthentication:\n      description: |\n        ### Basic authentication scheme\n\n        Use the HTTP Basic authentication scheme for InfluxDB `/api/v2` API operations that support it:\n          - **username**: InfluxDB Cloud username\n          - **password**: InfluxDB Cloud API token\n\n        #### Example\n\n        `curl --get \"https://europe-west1-1.gcp.cloud2.influxdata.com/query\"\n              --user \"exampleuser@influxdata.com\":\"INFLUX_API_TOKEN\"`\n\n        Replace the following:\n        - *`exampleuser@influxdata.com`*: the email address that you signed up with\n        - *`INFLUX_API_TOKEN`*: your [InfluxDB API token](https://docs.influxdata.com/influxdb/cloud/reference/glossary/#token)\n      scheme: basic\n      type: http\n    TokenAuthentication:\n      description: |\n        Use the [Token authentication](#section/Authentication/TokenAuthentication)\n        scheme to authenticate to the InfluxDB API.\n\n\n        In your API requests, send an `Authorization` header.\n        For the header value, provide the word `Token` followed by a space and an InfluxDB API token.\n        The word `Token` is case-sensitive.\n\n\n        ### Syntax\n\n        `Authorization: Token YOUR_INFLUX_TOKEN`\n\n\n        For more information and examples, see the following:\n          - [`/authorizations`](#tag/Authorizations) endpoint.\n          - [Authorize API requests](https://docs.influxdata.com/influxdb/cloud/api-guide/api_intro/#authentication).\n          - [Manage API tokens](https://docs.influxdata.com/influxdb/cloud/security/tokens/).\n      in: header\n      name: Authorization\n      type: apiKey\ninfo:\n  title: Complete InfluxDB Cloud API\nopenapi: 3.0.0\npaths:\n  /api/v2:\n    get:\n      operationId: GetRoutes\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Routes'\n          description: All routes\n      summary: List all top level routes\n      tags:\n      - Routes\n  /api/v2/authorizations:\n    get:\n      operationId: GetAuthorizations\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: Only show authorizations that belong to a user ID.\n        in: query\n        name: userID\n        schema:\n          type: string\n      - description: Only show authorizations that belong to a user name.\n        in: query\n        name: user\n        schema:\n          type: string\n      - description: Only show authorizations that belong to an organization ID.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: Only show authorizations that belong to a organization name.\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: Find a token by value.\n        in: query\n        name: token\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authorizations'\n          description: A list of authorizations\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: List all authorizations\n      tags:\n      - Authorizations\n    post:\n      operationId: PostAuthorizations\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Authorization'\n        description: Authorization to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n          description: Authorization created\n        \"400\":\n          $ref: '#/components/responses/ServerError'\n          description: Invalid request\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Create an authorization\n      tags:\n      - Authorizations\n  /api/v2/authorizations/{authID}:\n    delete:\n      operationId: DeleteAuthorizationsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The identifier of the authorization to delete.\n        in: path\n        name: authID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Authorization deleted\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Delete an authorization\n      tags:\n      - Authorizations\n    get:\n      operationId: GetAuthorizationsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The identifier of the authorization to get.\n        in: path\n        name: authID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n          description: Authorization details\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Retrieve an authorization\n      tags:\n      - Authorizations\n    patch:\n      description: Update an authorization's status to `active` or `inactive`.\n      operationId: PatchAuthorizationsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The identifier of the authorization to update.\n        in: path\n        name: authID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthorizationUpdateRequest'\n        description: The updated Authorization object.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n          description: The updated authorization.\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Update authorization status\n      tags:\n      - Authorizations\n  /api/v2/buckets:\n    get:\n      operationId: GetBuckets\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - $ref: '#/components/parameters/Offset'\n      - $ref: '#/components/parameters/Limit'\n      - $ref: '#/components/parameters/After'\n      - description: The name of the organization.\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: The organization ID.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: Only returns buckets with a specific name.\n        in: query\n        name: name\n        schema:\n          type: string\n      - description: Only returns buckets with a specific ID.\n        in: query\n        name: id\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Buckets'\n          description: A list of buckets\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all buckets\n      tags:\n      - Buckets\n    post:\n      operationId: PostBuckets\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostBucketRequest'\n        description: Bucket to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Bucket'\n          description: Bucket created\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Request body failed validation\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Create a bucket\n      tags:\n      - Buckets\n  /api/v2/buckets/{bucketID}:\n    delete:\n      operationId: DeleteBucketsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the bucket to delete.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Bucket not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a bucket\n      tags:\n      - Buckets\n    get:\n      operationId: GetBucketsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The bucket ID.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Bucket'\n          description: Bucket details\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve a bucket\n      tags:\n      - Buckets\n    patch:\n      operationId: PatchBucketsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The bucket ID.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchBucketRequest'\n        description: Bucket update to apply\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Bucket'\n          description: An updated bucket\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update a bucket\n      tags:\n      - Buckets\n  /api/v2/buckets/{bucketID}/labels:\n    get:\n      operationId: GetBucketsIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The bucket ID.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n          description: A list of all labels for a bucket\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all labels for a bucket\n      tags:\n      - Buckets\n    post:\n      operationId: PostBucketsIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The bucket ID.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n        description: Label to add\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n          description: The newly added label\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a label to a bucket\n      tags:\n      - Buckets\n  /api/v2/buckets/{bucketID}/labels/{labelID}:\n    delete:\n      operationId: DeleteBucketsIDLabelsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The bucket ID.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      - description: The ID of the label to delete.\n        in: path\n        name: labelID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Bucket not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a label from a bucket\n      tags:\n      - Buckets\n  /api/v2/buckets/{bucketID}/members:\n    get:\n      operationId: GetBucketsIDMembers\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The bucket ID.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n          description: A list of bucket members\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all users with member privileges for a bucket\n      tags:\n      - Buckets\n    post:\n      operationId: PostBucketsIDMembers\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The bucket ID.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n        description: User to add as member\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n          description: Member added to bucket\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a member to a bucket\n      tags:\n      - Buckets\n  /api/v2/buckets/{bucketID}/members/{userID}:\n    delete:\n      operationId: DeleteBucketsIDMembersID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the member to remove.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      - description: The bucket ID.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Member removed\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Remove a member from a bucket\n      tags:\n      - Buckets\n  /api/v2/buckets/{bucketID}/owners:\n    get:\n      operationId: GetBucketsIDOwners\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The bucket ID.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n          description: A list of bucket owners\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all owners of a bucket\n      tags:\n      - Buckets\n    post:\n      operationId: PostBucketsIDOwners\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The bucket ID.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n        description: User to add as owner\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n          description: Bucket owner added\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add an owner to a bucket\n      tags:\n      - Buckets\n  /api/v2/buckets/{bucketID}/owners/{userID}:\n    delete:\n      operationId: DeleteBucketsIDOwnersID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the owner to remove.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      - description: The bucket ID.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Owner removed\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Remove an owner from a bucket\n      tags:\n      - Buckets\n  /api/v2/buckets/{bucketID}/schema/measurements:\n    get:\n      operationId: getMeasurementSchemas\n      parameters:\n      - description: The name of the organization.\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: The identifier of the organization.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: The name of the measurement to return schemas for.\n        in: query\n        name: name\n        schema:\n          type: string\n      - description: The identifier of the bucket.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MeasurementSchemaList'\n          description: A list of measurement schemas returning summary information.\n          headers:\n            ETag:\n              description: The current version of the bucket schema\n              schema:\n                type: string\n        \"404\":\n          $ref: '#/components/responses/ServerError'\n          description: Bucket not found\n      summary: List all measurement schemas of a bucket\n      tags:\n      - Bucket Schemas\n    post:\n      operationId: createMeasurementSchema\n      parameters:\n      - description: The name of the organization.\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: The identifier of the organization.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: The identifier of the bucket.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MeasurementSchemaCreateRequest'\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MeasurementSchema'\n          description: The created measurement schema.\n          headers:\n            ETag:\n              description: The current version of the measurement schema\n              schema:\n                type: string\n        \"400\":\n          content:\n            application/json:\n              examples:\n                badNameExample:\n                  description: The error returned when the name is invalid, such as\n                    too few or too many characters or the name contains non-printable\n                    ASCII or is not valid UTF-8.\n                  summary: Invalid name\n                  value:\n                    code: invalid\n                    message: name is invalid\n                duplicateColumnNamesExample:\n                  description: The error returned when the request body contains duplicate\n                    column names.\n                  summary: Duplicate column names\n                  value:\n                    code: invalid\n                    message: Duplicate column names\n                missingColumnsExample:\n                  description: The error returned when the request body is missing\n                    the columns property.\n                  summary: Missing columns\n                  value:\n                    code: invalid\n                    message: columns is required\n                missingFieldExample:\n                  description: The error returned when the request body is missing\n                    at least one field type column.\n                  summary: Missing field\n                  value:\n                    code: invalid\n                    message: At least one field column is required\n                missingTimestampExample:\n                  description: The error returned when the request body is missing\n                    a timestamp type column.\n                  summary: Missing timestamp\n                  value:\n                    code: invalid\n                    message: Timestamp column is required\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Client error with create request\n      summary: Create a measurement schema for a bucket\n      tags:\n      - Bucket Schemas\n    summary: Bucket schemas\n  /api/v2/buckets/{bucketID}/schema/measurements/{measurementID}:\n    get:\n      operationId: getMeasurementSchema\n      parameters:\n      - description: The name of the organization.\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: The identifier of the organization.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: The identifier of the bucket.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      - description: The identifier of the measurement.\n        in: path\n        name: measurementID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MeasurementSchema'\n          description: Schema definition for a single measurement\n          headers:\n            ETag:\n              description: The current version of the measurement schema\n              schema:\n                type: string\n      summary: Retrieve measurement schema information\n      tags:\n      - Bucket Schemas\n    patch:\n      operationId: updateMeasurementSchema\n      parameters:\n      - description: The name of the organization.\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: The identifier of the organization.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: The identifier of the bucket.\n        in: path\n        name: bucketID\n        required: true\n        schema:\n          type: string\n      - description: The identifier of the measurement.\n        in: path\n        name: measurementID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MeasurementSchemaUpdateRequest'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MeasurementSchema'\n          description: The updated measurement schema\n        \"400\":\n          content:\n            application/json:\n              examples:\n                missingColumnsExample:\n                  description: The error returned when the request body does not contain\n                    all the columns from the source.\n                  summary: Deleted columns\n                  value:\n                    code: invalid\n                    message: Unable to delete columns from schema\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Client error updating measurement schema\n      summary: Update a measurement schema\n      tags:\n      - Bucket Schemas\n    summary: Bucket Schema\n  /api/v2/checks:\n    get:\n      operationId: GetChecks\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - $ref: '#/components/parameters/Offset'\n      - $ref: '#/components/parameters/Limit'\n      - description: Only show checks that belong to a specific organization ID.\n        in: query\n        name: orgID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checks'\n          description: A list of checks\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all checks\n      tags:\n      - Checks\n    post:\n      operationId: CreateCheck\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostCheck'\n        description: Check to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Check'\n          description: Check created\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add new check\n      tags:\n      - Checks\n  /api/v2/checks/{checkID}:\n    delete:\n      operationId: DeleteChecksID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The check ID.\n        in: path\n        name: checkID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The check was not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a check\n      tags:\n      - Checks\n    get:\n      operationId: GetChecksID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The check ID.\n        in: path\n        name: checkID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Check'\n          description: The check requested\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve a check\n      tags:\n      - Checks\n    patch:\n      operationId: PatchChecksID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The check ID.\n        in: path\n        name: checkID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CheckPatch'\n        description: Check update to apply\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Check'\n          description: An updated check\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The check was not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update a check\n      tags:\n      - Checks\n    put:\n      operationId: PutChecksID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The check ID.\n        in: path\n        name: checkID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Check'\n        description: Check update to apply\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Check'\n          description: An updated check\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The check was not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update a check\n      tags:\n      - Checks\n  /api/v2/checks/{checkID}/labels:\n    get:\n      operationId: GetChecksIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The check ID.\n        in: path\n        name: checkID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n          description: A list of all labels for a check\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all labels for a check\n      tags:\n      - Checks\n    post:\n      operationId: PostChecksIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The check ID.\n        in: path\n        name: checkID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n        description: Label to add\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n          description: The label was added to the check\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a label to a check\n      tags:\n      - Checks\n  /api/v2/checks/{checkID}/labels/{labelID}:\n    delete:\n      operationId: DeleteChecksIDLabelsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The check ID.\n        in: path\n        name: checkID\n        required: true\n        schema:\n          type: string\n      - description: The ID of the label to delete.\n        in: path\n        name: labelID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Check or label not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete label from a check\n      tags:\n      - Checks\n  /api/v2/checks/{checkID}/query:\n    get:\n      operationId: GetChecksIDQuery\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The check ID.\n        in: path\n        name: checkID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FluxResponse'\n          description: The check query requested\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Invalid request\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Check not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve a check query\n      tags:\n      - Checks\n  /api/v2/dashboards:\n    get:\n      operationId: GetDashboards\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - $ref: '#/components/parameters/Offset'\n      - $ref: '#/components/parameters/Descending'\n      - description: The non-zero number of dashboards to return\n        in: query\n        name: limit\n        schema:\n          default: 20\n          maximum: 100\n          minimum: -1\n          type: integer\n      - description: A user identifier. Returns only dashboards where this user has\n          the `owner` role.\n        in: query\n        name: owner\n        schema:\n          type: string\n      - description: The column to sort by.\n        in: query\n        name: sortBy\n        schema:\n          enum:\n          - ID\n          - CreatedAt\n          - UpdatedAt\n          type: string\n      - description: A list of dashboard identifiers. Returns only the listed dashboards.\n          If both `id` and `owner` are specified, only `id` is used.\n        in: query\n        name: id\n        schema:\n          items:\n            type: string\n          type: array\n      - description: The identifier of the organization.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: The name of the organization.\n        in: query\n        name: org\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboards'\n          description: All dashboards\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all dashboards\n      tags:\n      - Dashboards\n    post:\n      operationId: PostDashboards\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateDashboardRequest'\n        description: Dashboard to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/Dashboard'\n                - $ref: '#/components/schemas/DashboardWithViewProperties'\n          description: Added dashboard\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Create a dashboard\n      tags:\n      - Dashboards\n  /api/v2/dashboards/{dashboardID}:\n    delete:\n      operationId: DeleteDashboardsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the dashboard to update.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Dashboard not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a dashboard\n      tags:\n      - Dashboards\n    get:\n      operationId: GetDashboardsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the dashboard to update.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      - description: Includes the cell view properties in the response if set to `properties`\n        in: query\n        name: include\n        required: false\n        schema:\n          enum:\n          - properties\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/Dashboard'\n                - $ref: '#/components/schemas/DashboardWithViewProperties'\n          description: Retrieve a single dashboard\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Dashboard not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve a Dashboard\n      tags:\n      - Dashboards\n    patch:\n      operationId: PatchDashboardsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the dashboard to update.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                cells:\n                  $ref: '#/components/schemas/CellWithViewProperties'\n                  description: optional, when provided will replace all existing cells\n                    with the cells provided\n                description:\n                  description: optional, when provided will replace the description\n                  type: string\n                name:\n                  description: optional, when provided will replace the name\n                  type: string\n              title: PatchDashboardRequest\n              type: object\n        description: Patching of a dashboard\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n          description: Updated dashboard\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Dashboard not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update a dashboard\n      tags:\n      - Dashboards\n  /api/v2/dashboards/{dashboardID}/cells:\n    post:\n      operationId: PostDashboardsIDCells\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the dashboard to update.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCell'\n        description: Cell that will be added\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cell'\n          description: Cell successfully added\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Dashboard not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Create a dashboard cell\n      tags:\n      - Cells\n      - Dashboards\n    put:\n      description: Replaces all cells in a dashboard. This is used primarily to update\n        the positional information of all cells.\n      operationId: PutDashboardsIDCells\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the dashboard to update.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Cells'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n          description: Replaced dashboard cells\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Dashboard not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Replace cells in a dashboard\n      tags:\n      - Cells\n      - Dashboards\n  /api/v2/dashboards/{dashboardID}/cells/{cellID}:\n    delete:\n      operationId: DeleteDashboardsIDCellsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the dashboard to delete.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      - description: The ID of the cell to delete.\n        in: path\n        name: cellID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Cell successfully deleted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Cell or dashboard not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a dashboard cell\n      tags:\n      - Cells\n      - Dashboards\n    patch:\n      description: Updates the non positional information related to a cell. Updates\n        to a single cell's positional data could cause grid conflicts.\n      operationId: PatchDashboardsIDCellsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the dashboard to update.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      - description: The ID of the cell to update.\n        in: path\n        name: cellID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CellUpdate'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cell'\n          description: Updated dashboard cell\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Cell or dashboard not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update the non-positional information related to a cell\n      tags:\n      - Cells\n      - Dashboards\n  /api/v2/dashboards/{dashboardID}/cells/{cellID}/view:\n    get:\n      operationId: GetDashboardsIDCellsIDView\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The dashboard ID.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      - description: The cell ID.\n        in: path\n        name: cellID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/View'\n          description: A dashboard cells view\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Cell or dashboard not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve the view for a cell\n      tags:\n      - Cells\n      - Dashboards\n      - Views\n    patch:\n      operationId: PatchDashboardsIDCellsIDView\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the dashboard to update.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      - description: The ID of the cell to update.\n        in: path\n        name: cellID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/View'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/View'\n          description: Updated cell view\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Cell or dashboard not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update the view for a cell\n      tags:\n      - Cells\n      - Dashboards\n      - Views\n  /api/v2/dashboards/{dashboardID}/labels:\n    get:\n      operationId: GetDashboardsIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The dashboard ID.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n          description: A list of all labels for a dashboard\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all labels for a dashboard\n      tags:\n      - Dashboards\n    post:\n      operationId: PostDashboardsIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The dashboard ID.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n        description: Label to add\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n          description: The label added to the dashboard\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a label to a dashboard\n      tags:\n      - Dashboards\n  /api/v2/dashboards/{dashboardID}/labels/{labelID}:\n    delete:\n      operationId: DeleteDashboardsIDLabelsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The dashboard ID.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      - description: The ID of the label to delete.\n        in: path\n        name: labelID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Dashboard not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a label from a dashboard\n      tags:\n      - Dashboards\n  /api/v2/dashboards/{dashboardID}/members:\n    get:\n      operationId: GetDashboardsIDMembers\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The dashboard ID.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n          description: A list of users who have member privileges for a dashboard\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all dashboard members\n      tags:\n      - Dashboards\n    post:\n      operationId: PostDashboardsIDMembers\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The dashboard ID.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n        description: User to add as member\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n          description: Added to dashboard members\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a member to a dashboard\n      tags:\n      - Dashboards\n  /api/v2/dashboards/{dashboardID}/members/{userID}:\n    delete:\n      operationId: DeleteDashboardsIDMembersID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the member to remove.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      - description: The dashboard ID.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Member removed\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Remove a member from a dashboard\n      tags:\n      - Dashboards\n  /api/v2/dashboards/{dashboardID}/owners:\n    get:\n      operationId: GetDashboardsIDOwners\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The dashboard ID.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n          description: A list of users who have owner privileges for a dashboard\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all dashboard owners\n      tags:\n      - Dashboards\n    post:\n      operationId: PostDashboardsIDOwners\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The dashboard ID.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n        description: User to add as owner\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n          description: Added to dashboard owners\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add an owner to a dashboard\n      tags:\n      - Dashboards\n  /api/v2/dashboards/{dashboardID}/owners/{userID}:\n    delete:\n      operationId: DeleteDashboardsIDOwnersID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the owner to remove.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      - description: The dashboard ID.\n        in: path\n        name: dashboardID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Owner removed\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Remove an owner from a dashboard\n      tags:\n      - Dashboards\n  /api/v2/dbrps:\n    get:\n      operationId: GetDBRPs\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: Specifies the organization ID to filter on\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: Specifies the organization name to filter on\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: Specifies the mapping ID to filter on\n        in: query\n        name: id\n        schema:\n          type: string\n      - description: Specifies the bucket ID to filter on\n        in: query\n        name: bucketID\n        schema:\n          type: string\n      - description: Specifies filtering on default\n        in: query\n        name: default\n        schema:\n          type: boolean\n      - description: Specifies the database to filter on\n        in: query\n        name: db\n        schema:\n          type: string\n      - description: Specifies the retention policy to filter on\n        in: query\n        name: rp\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DBRPs'\n          description: Success. Returns a list of database retention policy mappings.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Bad request. The request has one or more invalid parameters.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List database retention policy mappings\n      tags:\n      - DBRPs\n    post:\n      operationId: PostDBRP\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DBRPCreate'\n        description: The database retention policy mapping to add\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DBRP'\n          description: Created. Returns the created database retention policy mapping.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Bad request. The mapping in the request has one or more invalid\n            IDs.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a database retention policy mapping\n      tags:\n      - DBRPs\n  /api/v2/dbrps/{dbrpID}:\n    delete:\n      operationId: DeleteDBRPID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: Specifies the organization ID of the mapping\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: Specifies the organization name of the mapping\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: The database retention policy mapping\n        in: path\n        name: dbrpID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: if any of the IDs passed is invalid\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a database retention policy\n      tags:\n      - DBRPs\n    get:\n      operationId: GetDBRPsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: Specifies the organization ID of the mapping\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: Specifies the organization name of the mapping\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: The database retention policy mapping ID\n        in: path\n        name: dbrpID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DBRPGet'\n          description: The database retention policy requested\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: if any of the IDs passed is invalid\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve a database retention policy mapping\n      tags:\n      - DBRPs\n    patch:\n      operationId: PatchDBRPID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: Specifies the organization ID of the mapping\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: Specifies the organization name of the mapping\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: The database retention policy mapping.\n        in: path\n        name: dbrpID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DBRPUpdate'\n        description: Database retention policy update to apply\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DBRPGet'\n          description: An updated mapping\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: if any of the IDs passed is invalid\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The mapping was not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update a database retention policy mapping\n      tags:\n      - DBRPs\n  /api/v2/delete:\n    post:\n      operationId: PostDelete\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: Specifies the organization to delete data from.\n        in: query\n        name: org\n        schema:\n          description: Only points from this organization are deleted.\n          type: string\n      - description: Specifies the bucket to delete data from.\n        in: query\n        name: bucket\n        schema:\n          description: Only points from this bucket are deleted.\n          type: string\n      - description: Specifies the organization ID of the resource.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: Specifies the bucket ID to delete data from.\n        in: query\n        name: bucketID\n        schema:\n          description: Only points from this bucket ID are deleted.\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeletePredicateRequest'\n        description: Deletes data from an InfluxDB bucket.\n        required: true\n      responses:\n        \"204\":\n          description: delete has been accepted\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Invalid request.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: no token was sent or does not have sufficient permissions.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: the bucket or organization is not found.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: internal server error\n      summary: Delete data\n      tags:\n      - Delete\n  /api/v2/flags:\n    get:\n      operationId: GetFlags\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Flags'\n          description: Feature flags for the currently authenticated user\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Return the feature flags for the currently authenticated user\n      tags:\n      - Users\n  /api/v2/labels:\n    get:\n      operationId: GetLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The organization ID.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n          description: A list of labels\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all labels\n      tags:\n      - Labels\n    post:\n      operationId: PostLabels\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelCreateRequest'\n        description: Label to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n          description: Added label\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Create a label\n      tags:\n      - Labels\n  /api/v2/labels/{labelID}:\n    delete:\n      operationId: DeleteLabelsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the label to delete.\n        in: path\n        name: labelID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Label not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a label\n      tags:\n      - Labels\n    get:\n      operationId: GetLabelsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the label to update.\n        in: path\n        name: labelID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n          description: A label\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve a label\n      tags:\n      - Labels\n    patch:\n      operationId: PatchLabelsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the label to update.\n        in: path\n        name: labelID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelUpdate'\n        description: Label update\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n          description: Updated label\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Label not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update a label\n      tags:\n      - Labels\n  /api/v2/maps/mapToken:\n    get:\n      operationId: getMapboxToken\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n          description: Temporary token for Mapbox.\n        \"401\":\n          $ref: '#/components/responses/ServerError'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        default:\n          $ref: '#/components/responses/ServerError'\n      summary: Get a mapbox token\n  /api/v2/me:\n    get:\n      operationId: GetMe\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n          description: The currently authenticated user.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve the currently authenticated user\n      tags:\n      - Users\n  /api/v2/me/password:\n    put:\n      operationId: PutMePassword\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordResetBody'\n        description: New password\n        required: true\n      responses:\n        \"204\":\n          description: Password successfully updated\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unsuccessful authentication\n      security:\n      - BasicAuthentication: []\n      summary: Update a password\n      tags:\n      - Users\n  /api/v2/notificationEndpoints:\n    get:\n      operationId: GetNotificationEndpoints\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - $ref: '#/components/parameters/Offset'\n      - $ref: '#/components/parameters/Limit'\n      - description: Only show notification endpoints that belong to specific organization\n          ID.\n        in: query\n        name: orgID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoints'\n          description: A list of notification endpoints\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all notification endpoints\n      tags:\n      - NotificationEndpoints\n    post:\n      operationId: CreateNotificationEndpoint\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostNotificationEndpoint'\n        description: Notification endpoint to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoint'\n          description: Notification endpoint created\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a notification endpoint\n      tags:\n      - NotificationEndpoints\n  /api/v2/notificationEndpoints/{endpointID}:\n    delete:\n      operationId: DeleteNotificationEndpointsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification endpoint ID.\n        in: path\n        name: endpointID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The endpoint was not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a notification endpoint\n      tags:\n      - NotificationEndpoints\n    get:\n      operationId: GetNotificationEndpointsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification endpoint ID.\n        in: path\n        name: endpointID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoint'\n          description: The notification endpoint requested\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve a notification endpoint\n      tags:\n      - NotificationEndpoints\n    patch:\n      operationId: PatchNotificationEndpointsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification endpoint ID.\n        in: path\n        name: endpointID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotificationEndpointUpdate'\n        description: Check update to apply\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoint'\n          description: An updated notification endpoint\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The notification endpoint was not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update a notification endpoint\n      tags:\n      - NotificationEndpoints\n    put:\n      operationId: PutNotificationEndpointsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification endpoint ID.\n        in: path\n        name: endpointID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotificationEndpoint'\n        description: A new notification endpoint to replace the existing endpoint\n          with\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationEndpoint'\n          description: An updated notification endpoint\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The notification endpoint was not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update a notification endpoint\n      tags:\n      - NotificationEndpoints\n  /api/v2/notificationEndpoints/{endpointID}/labels:\n    get:\n      operationId: GetNotificationEndpointsIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification endpoint ID.\n        in: path\n        name: endpointID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n          description: A list of all labels for a notification endpoint\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all labels for a notification endpoint\n      tags:\n      - NotificationEndpoints\n    post:\n      operationId: PostNotificationEndpointIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification endpoint ID.\n        in: path\n        name: endpointID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n        description: Label to add\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n          description: The label was added to the notification endpoint\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a label to a notification endpoint\n      tags:\n      - NotificationEndpoints\n  /api/v2/notificationEndpoints/{endpointID}/labels/{labelID}:\n    delete:\n      operationId: DeleteNotificationEndpointsIDLabelsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification endpoint ID.\n        in: path\n        name: endpointID\n        required: true\n        schema:\n          type: string\n      - description: The ID of the label to delete.\n        in: path\n        name: labelID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Endpoint or label not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a label from a notification endpoint\n      tags:\n      - NotificationEndpoints\n  /api/v2/notificationRules:\n    get:\n      operationId: GetNotificationRules\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - $ref: '#/components/parameters/Offset'\n      - $ref: '#/components/parameters/Limit'\n      - description: Only show notification rules that belong to a specific organization\n          ID.\n        in: query\n        name: orgID\n        required: true\n        schema:\n          type: string\n      - description: Only show notifications that belong to the specific check ID.\n        in: query\n        name: checkID\n        schema:\n          type: string\n      - description: Only return notification rules that \"would match\" statuses which\n          contain the tag key value pairs provided.\n        in: query\n        name: tag\n        schema:\n          example: env:prod\n          pattern: ^[a-zA-Z0-9_]+:[a-zA-Z0-9_]+$\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRules'\n          description: A list of notification rules\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all notification rules\n      tags:\n      - NotificationRules\n    post:\n      operationId: CreateNotificationRule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostNotificationRule'\n        description: Notification rule to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRule'\n          description: Notification rule created\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a notification rule\n      tags:\n      - NotificationRules\n  /api/v2/notificationRules/{ruleID}:\n    delete:\n      operationId: DeleteNotificationRulesID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification rule ID.\n        in: path\n        name: ruleID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The check was not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a notification rule\n      tags:\n      - NotificationRules\n    get:\n      operationId: GetNotificationRulesID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification rule ID.\n        in: path\n        name: ruleID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRule'\n          description: The notification rule requested\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve a notification rule\n      tags:\n      - NotificationRules\n    patch:\n      operationId: PatchNotificationRulesID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification rule ID.\n        in: path\n        name: ruleID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotificationRuleUpdate'\n        description: Notification rule update to apply\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRule'\n          description: An updated notification rule\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The notification rule was not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update a notification rule\n      tags:\n      - NotificationRules\n    put:\n      operationId: PutNotificationRulesID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification rule ID.\n        in: path\n        name: ruleID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotificationRule'\n        description: Notification rule update to apply\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationRule'\n          description: An updated notification rule\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The notification rule was not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update a notification rule\n      tags:\n      - NotificationRules\n  /api/v2/notificationRules/{ruleID}/labels:\n    get:\n      operationId: GetNotificationRulesIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification rule ID.\n        in: path\n        name: ruleID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n          description: A list of all labels for a notification rule\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all labels for a notification rule\n      tags:\n      - NotificationRules\n    post:\n      operationId: PostNotificationRuleIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification rule ID.\n        in: path\n        name: ruleID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n        description: Label to add\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n          description: The label was added to the notification rule\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a label to a notification rule\n      tags:\n      - NotificationRules\n  /api/v2/notificationRules/{ruleID}/labels/{labelID}:\n    delete:\n      operationId: DeleteNotificationRulesIDLabelsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification rule ID.\n        in: path\n        name: ruleID\n        required: true\n        schema:\n          type: string\n      - description: The ID of the label to delete.\n        in: path\n        name: labelID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Rule or label not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete label from a notification rule\n      tags:\n      - NotificationRules\n  /api/v2/notificationRules/{ruleID}/query:\n    get:\n      operationId: GetNotificationRulesIDQuery\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The notification rule ID.\n        in: path\n        name: ruleID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FluxResponse'\n          description: The notification rule query requested\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Invalid request\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Notification rule not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve a notification rule query\n      tags:\n      - Rules\n  /api/v2/orgs:\n    get:\n      operationId: GetOrgs\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - $ref: '#/components/parameters/Offset'\n      - $ref: '#/components/parameters/Limit'\n      - $ref: '#/components/parameters/Descending'\n      - description: Filter organizations to a specific organization name.\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: Filter organizations to a specific organization ID.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: Filter organizations to a specific user ID.\n        in: query\n        name: userID\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organizations'\n          description: A list of organizations\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all organizations\n      tags:\n      - Organizations\n    post:\n      operationId: PostOrgs\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostOrganizationRequest'\n        description: Organization to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n          description: Organization created\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Create an organization\n      tags:\n      - Organizations\n  /api/v2/orgs/{orgID}:\n    delete:\n      operationId: DeleteOrgsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the organization to delete.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Organization not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete an organization\n      tags:\n      - Organizations\n    get:\n      operationId: GetOrgsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the organization to get.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n          description: Organization details\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve an organization\n      tags:\n      - Organizations\n    patch:\n      operationId: PatchOrgsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the organization to get.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchOrganizationRequest'\n        description: Organization update to apply\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n          description: Organization updated\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update an organization\n      tags:\n      - Organizations\n  /api/v2/orgs/{orgID}/limits:\n    get:\n      operationId: GetOrgLimitsID\n      parameters:\n      - description: ID of the organization.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: These are org limits similar to those configured in/by\n                  quartz.\n                properties:\n                  limits:\n                    $ref: '#/components/schemas/Limit'\n                  links:\n                    $ref: '#/components/schemas/Links'\n                type: object\n          description: Limits defined for the organization.\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: unexpected error\n      summary: Retrieve limits for an organization\n      tags:\n      - Limits\n  /api/v2/orgs/{orgID}/members:\n    get:\n      operationId: GetOrgsIDMembers\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The organization ID.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n          description: A list of organization members\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Organization not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all members of an organization\n      tags:\n      - Organizations\n    post:\n      operationId: PostOrgsIDMembers\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The organization ID.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n        description: User to add as member\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n          description: Added to organization created\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a member to an organization\n      tags:\n      - Organizations\n  /api/v2/orgs/{orgID}/members/{userID}:\n    delete:\n      operationId: DeleteOrgsIDMembersID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the member to remove.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      - description: The organization ID.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Member removed\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Remove a member from an organization\n      tags:\n      - Organizations\n  /api/v2/orgs/{orgID}/owners:\n    get:\n      operationId: GetOrgsIDOwners\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The organization ID.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n          description: A list of organization owners\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Organization not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all owners of an organization\n      tags:\n      - Organizations\n    post:\n      operationId: PostOrgsIDOwners\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The organization ID.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n        description: User to add as owner\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n          description: Organization owner added\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add an owner to an organization\n      tags:\n      - Organizations\n  /api/v2/orgs/{orgID}/owners/{userID}:\n    delete:\n      operationId: DeleteOrgsIDOwnersID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the owner to remove.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      - description: The organization ID.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Owner removed\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Remove an owner from an organization\n      tags:\n      - Organizations\n  /api/v2/orgs/{orgID}/secrets:\n    get:\n      operationId: GetOrgsIDSecrets\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The organization ID.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SecretKeysResponse'\n          description: A list of all secret keys\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all secret keys for an organization\n      tags:\n      - Secrets\n    patch:\n      operationId: PatchOrgsIDSecrets\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The organization ID.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Secrets'\n        description: Secret key value pairs to update/add\n        required: true\n      responses:\n        \"204\":\n          description: Keys successfully patched\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update secrets in an organization\n      tags:\n      - Secrets\n  /api/v2/orgs/{orgID}/secrets/{secretID}:\n    delete:\n      operationId: DeleteOrgsIDSecretsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The organization ID.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      - description: The secret ID.\n        in: path\n        name: secretID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Keys successfully deleted\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Delete a secret from an organization\n      tags:\n      - Secrets\n  /api/v2/orgs/{orgID}/secrets/delete:\n    post:\n      deprecated: true\n      operationId: PostOrgsIDSecrets\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The organization ID.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SecretKeys'\n        description: Secret key to delete\n        required: true\n      responses:\n        \"204\":\n          description: Keys successfully patched\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete secrets from an organization\n      tags:\n      - Secrets\n  /api/v2/orgs/{orgID}/usage:\n    get:\n      operationId: GetOrgUsageID\n      parameters:\n      - description: ID of the organization.\n        in: path\n        name: orgID\n        required: true\n        schema:\n          type: string\n      - description: |\n          Earliest time to include in results.\n          For more information about timestamps, see [Manipulate timestamps with Flux](https://docs.influxdata.com/influxdb/cloud/query-data/flux/manipulate-timestamps/).\n        in: query\n        name: start\n        required: true\n        schema:\n          format: unix timestamp\n          type: integer\n      - description: |\n          Latest time to include in results.\n          For more information about timestamps, see [Manipulate timestamps with Flux](https://docs.influxdata.com/influxdb/cloud/query-data/flux/manipulate-timestamps/).\n        in: query\n        name: stop\n        required: false\n        schema:\n          format: unix timestamp\n          type: integer\n      - description: return raw usage data\n        in: query\n        name: raw\n        required: false\n        schema:\n          default: false\n          type: boolean\n      responses:\n        \"200\":\n          content:\n            text/csv:\n              schema:\n                example: |\n                  #group,false,false,true,true,false,false,true,true,true,true #datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,double,string,string,string,string #default,_result,,,,,,,,, ,result,table,_start,_stop,_time,_value,_field,_measurement,bucket_id,org_id ,,0,2021-05-10T14:25:10.865702397Z,2021-05-10T15:25:10.865702397Z,2021-05-10T15:00:00Z,5434066,gauge,storage_usage_bucket_bytes,2f6ba0cf9a2fdcbb,cec6fc1d2176dc11 ,,1,2021-05-10T14:25:10.865702397Z,2021-05-10T15:25:10.865702397Z,2021-05-10T15:00:00Z,9924053.966666665,gauge,storage_usage_bucket_bytes,8af67bcaf69d9daf,cec6fc1d2176dc11\n                type: string\n          description: Usage data\n          headers:\n            Content-Encoding:\n              description: Lists any encodings (usually compression algorithms) that\n                have been applied to the response payload.\n              schema:\n                default: identity\n                description: The content coding. `gzip` for compressed data or `identity`\n                  for unmodified, uncompressed data.\n                enum:\n                - gzip\n                - identity\n                type: string\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: unexpected error\n      summary: Retrieve usage for an organization\n      tags:\n      - Usage\n  /ping:\n    get:\n      operationId: GetPing\n      responses:\n        \"204\":\n          description: OK\n          headers:\n            X-Influxdb-Build:\n              description: The type of InfluxDB build.\n              schema:\n                type: string\n            X-Influxdb-Version:\n              description: The version of InfluxDB.\n              schema:\n                type: integer\n      servers:\n      - url: \"\"\n      summary: Checks the status of InfluxDB instance and version of InfluxDB.\n      tags:\n      - Ping\n    head:\n      operationId: HeadPing\n      responses:\n        \"204\":\n          description: OK\n          headers:\n            X-Influxdb-Build:\n              description: The type of InfluxDB build.\n              schema:\n                type: string\n            X-Influxdb-Version:\n              description: The version of InfluxDB.\n              schema:\n                type: integer\n      servers:\n      - url: \"\"\n      summary: Checks the status of InfluxDB instance and version of InfluxDB.\n      tags:\n      - Ping\n  /api/v2/query:\n    post:\n      description: |\n        Retrieves data from InfluxDB buckets.\n\n        To query data, you need the following:\n        - **organization** – _See [View organizations](https://docs.influxdata.com/influxdb/cloud/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._\n        - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/cloud/security/tokens/view-tokens/)\n         for instructions on viewing your API token._\n        - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/cloud/reference/urls/)_.\n        - **Flux query** – _See [Flux](https://docs.influxdata.com/flux/v0.x/)._\n\n        For more information and examples, see [Query with the InfluxDB API](https://docs.influxdata.com/influxdb/cloud/query-data/execute-queries/influx-api/).\n      operationId: PostQuery\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: Indicates the content encoding (usually a compression algorithm)\n          that the client can understand.\n        in: header\n        name: Accept-Encoding\n        schema:\n          default: identity\n          description: The content coding.  Use `gzip` for compressed data or `identity`\n            for unmodified, uncompressed data.\n          enum:\n          - gzip\n          - identity\n          type: string\n      - in: header\n        name: Content-Type\n        schema:\n          enum:\n          - application/json\n          - application/vnd.flux\n          type: string\n      - description: Name of the organization executing the query. Accepts either\n          the ID or Name. If you provide both `orgID` and `org`, `org` takes precedence.\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: ID of the organization executing the query. If you provide both\n          `orgID` and `org`, `org` takes precedence.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Query'\n          application/vnd.flux:\n            example: |\n              from(bucket: \"example-bucket\")\n                  |\u003e range(start: -5m)\n                  |\u003e filter(fn: (r) =\u003e r._measurement == \"example-measurement\")\n            schema:\n              type: string\n        description: Flux query or specification to execute\n      responses:\n        \"200\":\n          content:\n            text/csv:\n              schema:\n                example: |\n                  result,table,_start,_stop,_time,region,host,_value mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:00Z,east,A,15.43 mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:20Z,east,B,59.25 mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:40Z,east,C,52.62\n                type: string\n          description: Success. Returns query results.\n          headers:\n            Content-Encoding:\n              description: Lists any encodings (usually compression algorithms) that\n                have been applied to the response payload.\n              schema:\n                default: identity\n                description: |\n                  Content coding: `gzip` for compressed data or `identity` for unmodified, uncompressed data.\n                enum:\n                - gzip\n                - identity\n                type: string\n            Trace-Id:\n              description: If generated, trace ID of the request.\n              schema:\n                description: Trace ID of a request.\n                type: string\n        \"429\":\n          description: |\n            #### InfluxDB Cloud:\n              - returns this error if a **read** or **write** request exceeds your\n                plan's [adjustable service quotas](https://docs.influxdata.com/influxdb/cloud/account-management/limits/#adjustable-service-quotas)\n                or if a **delete** request exceeds the maximum\n                [global limit](https://docs.influxdata.com/influxdb/cloud/account-management/limits/#global-limits)\n              - returns `Retry-After` header that describes when to try the write again.\n\n            #### InfluxDB OSS:\n              - doesn't return this error.\n          headers:\n            Retry-After:\n              description: Non-negative decimal integer indicating seconds to wait\n                before retrying the request.\n              schema:\n                format: int32\n                type: integer\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Error processing query\n      summary: Query data\n      tags:\n      - Query\n  /api/v2/query/analyze:\n    post:\n      operationId: PostQueryAnalyze\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - in: header\n        name: Content-Type\n        schema:\n          enum:\n          - application/json\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Query'\n        description: Flux query to analyze\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnalyzeQueryResponse'\n          description: Query analyze results. Errors will be empty if the query is\n            valid.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal server error\n          headers:\n            X-Influx-Error:\n              description: Error string describing the problem\n              schema:\n                type: string\n            X-Influx-Reference:\n              description: Reference code unique to the error type\n              schema:\n                type: integer\n      summary: Analyze a Flux query\n      tags:\n      - Query\n  /api/v2/query/ast:\n    post:\n      description: Analyzes flux query and generates a query specification.\n      operationId: PostQueryAst\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - in: header\n        name: Content-Type\n        schema:\n          enum:\n          - application/json\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LanguageRequest'\n        description: Analyzed Flux query to generate abstract syntax tree.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ASTResponse'\n          description: Abstract syntax tree of the flux query.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Any response other than 200 is an internal server error\n      summary: Generate an Abstract Syntax Tree (AST) from a query\n      tags:\n      - Query\n  /api/v2/query/suggestions:\n    get:\n      operationId: GetQuerySuggestions\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FluxSuggestions'\n          description: Suggestions for next functions in call chain\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Any response other than 200 is an internal server error\n      summary: Retrieve query suggestions\n      tags:\n      - Query\n  /api/v2/query/suggestions/{name}:\n    get:\n      operationId: GetQuerySuggestionsName\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The name of the branching suggestion.\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FluxSuggestion'\n          description: Suggestions for next functions in call chain\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Any response other than 200 is an internal server error\n      summary: Retrieve query suggestions for a branching suggestion\n      tags:\n      - Query\n  /api/v2/resources:\n    get:\n      operationId: GetResources\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: All resources targets\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal server error\n      summary: List all known resources\n      tags:\n      - Resources\n  /api/v2/scripts:\n    get:\n      operationId: GetScripts\n      parameters:\n      - description: The number of scripts to return.\n        in: query\n        name: limit\n        required: false\n        schema:\n          type: integer\n      - description: The offset for pagination.\n        in: query\n        name: offset\n        required: false\n        schema:\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Scripts'\n          description: The list of scripts.\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: List scripts\n      tags:\n      - Invocable Scripts\n    post:\n      operationId: PostScripts\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScriptCreateRequest'\n        description: The script to create.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Script'\n          description: The created script.\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Create a script\n      tags:\n      - Invocable Scripts\n  /api/v2/scripts/{scriptID}:\n    delete:\n      description: Deletes a script and all associated records.\n      operationId: DeleteScriptsID\n      parameters:\n      - description: The ID of the script to delete.\n        in: path\n        name: scriptID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: The script is deleted.\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Delete a script\n      tags:\n      - Invocable Scripts\n    get:\n      description: Uses script ID to retrieve details of an invocable script.\n      operationId: GetScriptsID\n      parameters:\n      - description: The script ID.\n        in: path\n        name: scriptID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Script'\n          description: The requested script object.\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Retrieve a script\n      tags:\n      - Invocable Scripts\n    patch:\n      description: |\n        Updates properties (`name`, `description`, and `script`) of an invocable script.\n      operationId: PatchScriptsID\n      parameters:\n      - description: The script ID.\n        in: path\n        name: scriptID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScriptUpdateRequest'\n        description: Script update to apply\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Script'\n          description: The updated script.\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Update a script\n      tags:\n      - Invocable Scripts\n  /api/v2/scripts/{scriptID}/invoke:\n    post:\n      description: Invokes a script and substitutes `params` keys referenced in the\n        script with `params` key-values sent in the request body.\n      operationId: PostScriptsIDInvoke\n      parameters:\n      - in: path\n        name: scriptID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScriptInvocationParams'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScriptHTTPResponseData'\n          description: The result of the script execution.\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Invoke a script\n      tags:\n      - Invocable Scripts\n  /api/v2/setup:\n    get:\n      description: Check if setup is allowed. Returns `true` if no default user, organization,\n        or bucket have been created.\n      operationId: GetSetup\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IsOnboarding'\n          description: Setup is allowed, true or false\n      summary: Retrieve setup status\n      tags:\n      - Setup\n    post:\n      description: Post an onboarding request to create an initial user, organization,\n        and bucket.\n      operationId: PostSetup\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OnboardingRequest'\n        description: Source to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OnboardingResponse'\n          description: The created default user, bucket, and organization\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Create an initial user, organization, and bucket\n      tags:\n      - Setup\n  /api/v2/setup/user:\n    post:\n      description: Post an onboarding request to create a new user, organization,\n        and bucket.\n      operationId: PostSetupUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OnboardingRequest'\n        description: Source to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OnboardingResponse'\n          description: The created default user, bucket, and organization.\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Create a new user, organization, and bucket\n      tags:\n      - Setup\n  /api/v2/signin:\n    post:\n      description: Authenticates ***Basic Auth*** credentials for a user. If successful,\n        creates a new UI session for the user.\n      operationId: PostSignin\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        \"204\":\n          description: Success. User authenticated.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized access.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User account is disabled.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unsuccessful authentication.\n      security:\n      - BasicAuthentication: []\n      summary: Create a user session.\n      tags:\n      - Signin\n  /api/v2/signout:\n    post:\n      description: Expires the current UI session for the user.\n      operationId: PostSignout\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        \"204\":\n          description: Session successfully expired\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized access\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unsuccessful session expiry\n      summary: Expire the current UI session\n      tags:\n      - Signout\n  /api/v2/stacks:\n    get:\n      operationId: ListStacks\n      parameters:\n      - description: The organization ID of the stacks\n        in: query\n        name: orgID\n        required: true\n        schema:\n          type: string\n      - description: A collection of names to filter the list by.\n        in: query\n        name: name\n        schema:\n          type: string\n      - description: A collection of stackIDs to filter the list by.\n        in: query\n        name: stackID\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  stacks:\n                    items:\n                      $ref: '#/components/schemas/Stack'\n                    type: array\n                type: object\n          description: Success. Returns the list of stacks.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List installed templates\n      tags:\n      - Templates\n    post:\n      operationId: CreateStack\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                description:\n                  type: string\n                name:\n                  type: string\n                orgID:\n                  type: string\n                urls:\n                  items:\n                    type: string\n                  type: array\n              title: PostStackRequest\n              type: object\n        description: The stack to create.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stack'\n          description: Success. Returns the newly created stack.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Create a new stack\n      tags:\n      - Templates\n  /api/v2/stacks/{stack_id}:\n    delete:\n      operationId: DeleteStack\n      parameters:\n      - description: The identifier of the stack.\n        in: path\n        name: stack_id\n        required: true\n        schema:\n          type: string\n      - description: The identifier of the organization.\n        in: query\n        name: orgID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: The stack and its associated resources were deleted.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a stack and associated resources\n      tags:\n      - Templates\n    get:\n      operationId: ReadStack\n      parameters:\n      - description: The identifier of the stack.\n        in: path\n        name: stack_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stack'\n          description: Returns the stack.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve a stack\n      tags:\n      - Templates\n    patch:\n      operationId: UpdateStack\n      parameters:\n      - description: The identifier of the stack.\n        in: path\n        name: stack_id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                additionalResources:\n                  items:\n                    properties:\n                      kind:\n                        type: string\n                      resourceID:\n                        type: string\n                      templateMetaName:\n                        type: string\n                    required:\n                    - kind\n                    - resourceID\n                    type: object\n                  type: array\n                description:\n                  nullable: true\n                  type: string\n                name:\n                  nullable: true\n                  type: string\n                templateURLs:\n                  items:\n                    type: string\n                  nullable: true\n                  type: array\n              title: PatchStackRequest\n              type: object\n        description: The stack to update.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stack'\n          description: Returns the updated stack.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update a stack\n      tags:\n      - Templates\n  /api/v2/stacks/{stack_id}/uninstall:\n    post:\n      operationId: UninstallStack\n      parameters:\n      - description: The identifier of the stack.\n        in: path\n        name: stack_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stack'\n          description: Returns the uninstalled stack.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Uninstall a stack\n      tags:\n      - Templates\n  /api/v2/tasks:\n    get:\n      operationId: GetTasks\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: Returns task with a specific name.\n        in: query\n        name: name\n        schema:\n          type: string\n      - description: Return tasks after a specified ID.\n        in: query\n        name: after\n        schema:\n          type: string\n      - description: Filter tasks to a specific user ID.\n        in: query\n        name: user\n        schema:\n          type: string\n      - description: Filter tasks to a specific organization name.\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: Filter tasks to a specific organization ID.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: Filter tasks by a status--\"inactive\" or \"active\".\n        in: query\n        name: status\n        schema:\n          enum:\n          - active\n          - inactive\n          type: string\n      - description: The non-zero number of tasks to return\n        in: query\n        name: limit\n        schema:\n          default: 100\n          maximum: 500\n          minimum: -1\n          type: integer\n      - description: Type of task, unset by default.\n        in: query\n        name: type\n        required: false\n        schema:\n          default: \"\"\n          enum:\n          - basic\n          - system\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tasks'\n          description: A list of tasks\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all tasks\n      tags:\n      - Tasks\n    post:\n      operationId: PostTasks\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskCreateRequest'\n        description: Task to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n          description: Task created\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Create a new task\n      tags:\n      - Tasks\n  /api/v2/tasks/{taskID}:\n    delete:\n      description: Deletes a task and all associated records\n      operationId: DeleteTasksID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the task to delete.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Task deleted\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a task\n      tags:\n      - Tasks\n    get:\n      operationId: GetTasksID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n          description: Task details\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve a task\n      tags:\n      - Tasks\n    patch:\n      description: Update a task. This will cancel all queued runs.\n      operationId: PatchTasksID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskUpdateRequest'\n        description: Task update to apply\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n          description: Task updated\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update a task\n      tags:\n      - Tasks\n  /api/v2/tasks/{taskID}/labels:\n    get:\n      operationId: GetTasksIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n          description: A list of all labels for a task\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all labels for a task\n      tags:\n      - Tasks\n    post:\n      operationId: PostTasksIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n        description: Label to add\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n          description: A list of all labels for a task\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a label to a task\n      tags:\n      - Tasks\n  /api/v2/tasks/{taskID}/labels/{labelID}:\n    delete:\n      operationId: DeleteTasksIDLabelsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      - description: The label ID.\n        in: path\n        name: labelID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Task not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a label from a task\n      tags:\n      - Tasks\n  /api/v2/tasks/{taskID}/logs:\n    get:\n      operationId: GetTasksIDLogs\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Logs'\n          description: All logs for a task\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve all logs for a task\n      tags:\n      - Tasks\n  /api/v2/tasks/{taskID}/members:\n    get:\n      operationId: GetTasksIDMembers\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n          description: A list of users who have member privileges for a task\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all task members\n      tags:\n      - Tasks\n    post:\n      operationId: PostTasksIDMembers\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n        description: User to add as member\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n          description: Added to task members\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a member to a task\n      tags:\n      - Tasks\n  /api/v2/tasks/{taskID}/members/{userID}:\n    delete:\n      operationId: DeleteTasksIDMembersID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the member to remove.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Member removed\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Remove a member from a task\n      tags:\n      - Tasks\n  /api/v2/tasks/{taskID}/owners:\n    get:\n      operationId: GetTasksIDOwners\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n          description: A list of users who have owner privileges for a task\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all owners of a task\n      tags:\n      - Tasks\n    post:\n      operationId: PostTasksIDOwners\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n        description: User to add as owner\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n          description: Added to task owners\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add an owner to a task\n      tags:\n      - Tasks\n  /api/v2/tasks/{taskID}/owners/{userID}:\n    delete:\n      operationId: DeleteTasksIDOwnersID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the owner to remove.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Owner removed\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Remove an owner from a task\n      tags:\n      - Tasks\n  /api/v2/tasks/{taskID}/runs:\n    get:\n      operationId: GetTasksIDRuns\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the task to get runs for.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      - description: Returns runs after a specific ID.\n        in: query\n        name: after\n        schema:\n          type: string\n      - description: The number of runs to return\n        in: query\n        name: limit\n        schema:\n          default: 100\n          maximum: 500\n          minimum: 1\n          type: integer\n      - description: Filter runs to those scheduled after this time, RFC3339\n        in: query\n        name: afterTime\n        schema:\n          format: date-time\n          type: string\n      - description: Filter runs to those scheduled before this time, RFC3339\n        in: query\n        name: beforeTime\n        schema:\n          format: date-time\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Runs'\n          description: A list of task runs\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List runs for a task\n      tags:\n      - Tasks\n    post:\n      operationId: PostTasksIDRuns\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RunManually'\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n          description: Run scheduled to start\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Manually start a task run, overriding the current schedule\n      tags:\n      - Tasks\n  /api/v2/tasks/{taskID}/runs/{runID}:\n    delete:\n      operationId: DeleteTasksIDRunsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      - description: The run ID.\n        in: path\n        name: runID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Cancel a running task\n      tags:\n      - Tasks\n    get:\n      operationId: GetTasksIDRunsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      - description: The run ID.\n        in: path\n        name: runID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n          description: The run record\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve a single run for a task\n      tags:\n      - Tasks\n  /api/v2/tasks/{taskID}/runs/{runID}/logs:\n    get:\n      operationId: GetTasksIDRunsIDLogs\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: ID of task to get logs for.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      - description: ID of run to get logs for.\n        in: path\n        name: runID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Logs'\n          description: All logs for a run\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve all logs for a run\n      tags:\n      - Tasks\n  /api/v2/tasks/{taskID}/runs/{runID}/retry:\n    post:\n      operationId: PostTasksIDRunsIDRetry\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The task ID.\n        in: path\n        name: taskID\n        required: true\n        schema:\n          type: string\n      - description: The run ID.\n        in: path\n        name: runID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n          description: Run that has been queued\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retry a task run\n      tags:\n      - Tasks\n  /api/v2/telegraf/plugins:\n    get:\n      operationId: GetTelegrafPlugins\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The type of plugin desired.\n        in: query\n        name: type\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TelegrafPlugins'\n          description: A list of Telegraf plugins.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all Telegraf plugins\n      tags:\n      - Telegraf Plugins\n  /api/v2/telegrafs:\n    get:\n      operationId: GetTelegrafs\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The organization ID the Telegraf config belongs to.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Telegrafs'\n          description: A list of Telegraf configurations\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all Telegraf configurations\n      tags:\n      - Telegrafs\n    post:\n      operationId: PostTelegrafs\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TelegrafPluginRequest'\n        description: Telegraf configuration to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Telegraf'\n          description: Telegraf configuration created\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Create a Telegraf configuration\n      tags:\n      - Telegrafs\n  /api/v2/telegrafs/{telegrafID}:\n    delete:\n      operationId: DeleteTelegrafsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The Telegraf configuration ID.\n        in: path\n        name: telegrafID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a Telegraf configuration\n      tags:\n      - Telegrafs\n    get:\n      operationId: GetTelegrafsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The Telegraf configuration ID.\n        in: path\n        name: telegrafID\n        required: true\n        schema:\n          type: string\n      - in: header\n        name: Accept\n        required: false\n        schema:\n          default: application/toml\n          enum:\n          - application/toml\n          - application/json\n          - application/octet-stream\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Telegraf'\n            application/octet-stream:\n              example: |-\n                [agent]\n                interval = \"10s\"\n              schema:\n                type: string\n            application/toml:\n              example: |-\n                [agent]\n                interval = \"10s\"\n              schema:\n                type: string\n          description: Telegraf configuration details\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Retrieve a Telegraf configuration\n      tags:\n      - Telegrafs\n    put:\n      operationId: PutTelegrafsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The Telegraf config ID.\n        in: path\n        name: telegrafID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TelegrafPluginRequest'\n        description: Telegraf configuration update to apply\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Telegraf'\n          description: An updated Telegraf configurations\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Update a Telegraf configuration\n      tags:\n      - Telegrafs\n  /api/v2/telegrafs/{telegrafID}/labels:\n    get:\n      operationId: GetTelegrafsIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The Telegraf config ID.\n        in: path\n        name: telegrafID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n          description: A list of all labels for a Telegraf config\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all labels for a Telegraf config\n      tags:\n      - Telegrafs\n    post:\n      operationId: PostTelegrafsIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The Telegraf config ID.\n        in: path\n        name: telegrafID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n        description: Label to add\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n          description: The label added to the Telegraf config\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a label to a Telegraf config\n      tags:\n      - Telegrafs\n  /api/v2/telegrafs/{telegrafID}/labels/{labelID}:\n    delete:\n      operationId: DeleteTelegrafsIDLabelsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The Telegraf config ID.\n        in: path\n        name: telegrafID\n        required: true\n        schema:\n          type: string\n      - description: The label ID.\n        in: path\n        name: labelID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Telegraf config not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a label from a Telegraf config\n      tags:\n      - Telegrafs\n  /api/v2/telegrafs/{telegrafID}/members:\n    get:\n      operationId: GetTelegrafsIDMembers\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The Telegraf config ID.\n        in: path\n        name: telegrafID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMembers'\n          description: A list of Telegraf config members\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all users with member privileges for a Telegraf config\n      tags:\n      - Telegrafs\n    post:\n      operationId: PostTelegrafsIDMembers\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The Telegraf config ID.\n        in: path\n        name: telegrafID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n        description: User to add as member\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceMember'\n          description: Member added to Telegraf config\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a member to a Telegraf config\n      tags:\n      - Telegrafs\n  /api/v2/telegrafs/{telegrafID}/members/{userID}:\n    delete:\n      operationId: DeleteTelegrafsIDMembersID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the member to remove.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      - description: The Telegraf config ID.\n        in: path\n        name: telegrafID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Member removed\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Remove a member from a Telegraf config\n      tags:\n      - Telegrafs\n  /api/v2/telegrafs/{telegrafID}/owners:\n    get:\n      operationId: GetTelegrafsIDOwners\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The Telegraf configuration ID.\n        in: path\n        name: telegrafID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwners'\n          description: Returns Telegraf configuration owners as a ResourceOwners list\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all owners of a Telegraf configuration\n      tags:\n      - Telegrafs\n    post:\n      operationId: PostTelegrafsIDOwners\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The Telegraf configuration ID.\n        in: path\n        name: telegrafID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceMemberRequestBody'\n        description: User to add as owner\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceOwner'\n          description: Telegraf configuration owner was added. Returns a ResourceOwner\n            that references the User.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add an owner to a Telegraf configuration\n      tags:\n      - Telegrafs\n  /api/v2/telegrafs/{telegrafID}/owners/{userID}:\n    delete:\n      operationId: DeleteTelegrafsIDOwnersID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the owner to remove.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      - description: The Telegraf config ID.\n        in: path\n        name: telegrafID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Owner removed\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Remove an owner from a Telegraf config\n      tags:\n      - Telegrafs\n  /api/v2/templates/apply:\n    post:\n      description: Applies or performs a dry-run of template in an organization.\n      operationId: ApplyTemplate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TemplateApply'\n          application/x-jsonnet:\n            schema:\n              $ref: '#/components/schemas/TemplateApply'\n          text/yml:\n            schema:\n              $ref: '#/components/schemas/TemplateApply'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TemplateSummary'\n          description: |\n            Success. The package dry-run succeeded. No new resources were created. Returns a diff and summary of the dry-run. The diff and summary won't contain IDs for resources that didn't exist at the time of the dry-run.\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TemplateSummary'\n          description: |\n            Success. The package applied successfully. Returns a diff and summary of the run. The summary contains newly created resources. The diff compares the initial state to the state after the package applied. This corresponds to `\"dryRun\": true`.\n        \"422\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/TemplateSummary'\n                - properties:\n                    code:\n                      type: string\n                    message:\n                      type: string\n                  required:\n                  - message\n                  - code\n                  type: object\n          description: Template failed validation\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Apply or dry-run a template\n      tags:\n      - Templates\n  /api/v2/templates/export:\n    post:\n      operationId: ExportTemplate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n              - $ref: '#/components/schemas/TemplateExportByID'\n              - $ref: '#/components/schemas/TemplateExportByName'\n        description: Export resources as an InfluxDB template.\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Template'\n            application/x-yaml:\n              schema:\n                $ref: '#/components/schemas/Template'\n          description: The template was created successfully. Returns the newly created\n            template.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Export a new template\n      tags:\n      - Templates\n  /api/v2/users:\n    get:\n      operationId: GetUsers\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users'\n          description: A list of users\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: List all users\n      tags:\n      - Users\n    post:\n      operationId: PostUsers\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: User to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n          description: User created\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Create a user\n      tags:\n      - Users\n  /api/v2/users/{userID}:\n    delete:\n      operationId: DeleteUsersID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the user to delete.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: User deleted\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Delete a user\n      tags:\n      - Users\n    get:\n      operationId: GetUsersID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The user ID.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n          description: User details\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Retrieve a user\n      tags:\n      - Users\n    patch:\n      operationId: PatchUsersID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The ID of the user to update.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: User update to apply\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n          description: User updated\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Unexpected error\n      summary: Update a user\n      tags:\n      - Users\n  /api/v2/users/{userID}/password:\n    post:\n      operationId: PostUsersIDPassword\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The user ID.\n        in: path\n        name: userID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordResetBody'\n        description: New password\n        required: true\n      responses:\n        \"204\":\n          description: Password successfully updated\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unsuccessful authentication\n      security:\n      - BasicAuthentication: []\n      summary: Update a password\n      tags:\n      - Users\n  /api/v2/variables:\n    get:\n      operationId: GetVariables\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The name of the organization.\n        in: query\n        name: org\n        schema:\n          type: string\n      - description: The organization ID.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Variables'\n          description: A list of variables for an organization.\n        \"400\":\n          $ref: '#/components/responses/ServerError'\n          description: Invalid request\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Internal server error\n      summary: List all variables\n      tags:\n      - Variables\n    post:\n      operationId: PostVariables\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Variable'\n        description: Variable to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Variable'\n          description: Variable created\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Internal server error\n      summary: Create a variable\n      tags:\n      - Variables\n  /api/v2/variables/{variableID}:\n    delete:\n      operationId: DeleteVariablesID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The variable ID.\n        in: path\n        name: variableID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Variable deleted\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Internal server error\n      summary: Delete a variable\n      tags:\n      - Variables\n    get:\n      operationId: GetVariablesID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The variable ID.\n        in: path\n        name: variableID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Variable'\n          description: Variable found\n        \"404\":\n          $ref: '#/components/responses/ServerError'\n          description: Variable not found\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Internal server error\n      summary: Retrieve a variable\n      tags:\n      - Variables\n    patch:\n      operationId: PatchVariablesID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The variable ID.\n        in: path\n        name: variableID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Variable'\n        description: Variable update to apply\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Variable'\n          description: Variable updated\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Internal server error\n      summary: Update a variable\n      tags:\n      - Variables\n    put:\n      operationId: PutVariablesID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The variable ID.\n        in: path\n        name: variableID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Variable'\n        description: Variable to replace\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Variable'\n          description: Variable updated\n        default:\n          $ref: '#/components/responses/ServerError'\n          description: Internal server error\n      summary: Replace a variable\n      tags:\n      - Variables\n  /api/v2/variables/{variableID}/labels:\n    get:\n      operationId: GetVariablesIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The variable ID.\n        in: path\n        name: variableID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsResponse'\n          description: A list of all labels for a variable\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: List all labels for a variable\n      tags:\n      - Variables\n    post:\n      operationId: PostVariablesIDLabels\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The variable ID.\n        in: path\n        name: variableID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelMapping'\n        description: Label to add\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelResponse'\n          description: The newly added label\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Add a label to a variable\n      tags:\n      - Variables\n  /api/v2/variables/{variableID}/labels/{labelID}:\n    delete:\n      operationId: DeleteVariablesIDLabelsID\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: The variable ID.\n        in: path\n        name: variableID\n        required: true\n        schema:\n          type: string\n      - description: The label ID to delete.\n        in: path\n        name: labelID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Delete has been accepted\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Variable not found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error\n      summary: Delete a label from a variable\n      tags:\n      - Variables\n  /api/v2/write:\n    post:\n      description: |\n        Writes data to a bucket.\n\n        To write data into InfluxDB, you need the following:\n\n        - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/cloud/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._\n        - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/cloud/organizations/buckets/view-buckets/) for\n         instructions on viewing your bucket ID._\n        - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/cloud/security/tokens/view-tokens/)\n         for instructions on viewing your API token._\n        - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/cloud/reference/urls/)_.\n        - data in [line protocol](https://docs.influxdata.com/influxdb/cloud/reference/syntax/line-protocol) format.\n\n        InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.\n\n        For more information and examples, see the following:\n        - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/cloud/write-data/developer-tools/api).\n        - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/cloud/write-data/best-practices/optimize-writes/).\n        - [Troubleshoot issues writing data](https://docs.influxdata.com/influxdb/cloud/write-data/troubleshoot/)\n      operationId: PostWrite\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - description: |\n          The value tells InfluxDB what compression is applied to the line protocol in the request payload.\n          To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.\n        in: header\n        name: Content-Encoding\n        schema:\n          default: identity\n          description: Content coding. Use `gzip` for compressed data or `identity`\n            for unmodified, uncompressed data.\n          enum:\n          - gzip\n          - identity\n          type: string\n      - description: |\n          Format of the data in the request body.\n          To make an API request with a line protocol payload, send `Content-Type: text/plain; charset=utf-8` as a request header.\n        in: header\n        name: Content-Type\n        schema:\n          default: text/plain; charset=utf-8\n          description: |\n            `text/plain` is the content type for line protocol. `UTF-8` is the default character set.\n          enum:\n          - text/plain\n          - text/plain; charset=utf-8\n          type: string\n      - description: Size of the entity-body, in bytes, sent to the database. If the\n          length is greater than the database's `max body` configuration option, the\n          server responds with status code `413`.\n        in: header\n        name: Content-Length\n        schema:\n          description: The length in decimal number of octets.\n          type: integer\n      - description: |\n          Content type that the client can understand. Writes only return a response body if they fail, e.g. due to a formatting problem or quota limit.\n          #### InfluxDB Cloud\n            - returns only `application/json` for format and limit errors.\n            - returns only `text/html` for some quota limit errors.\n\n\n          #### InfluxDB OSS\n            - returns only `application/json` for format and limit errors.\n\n\n          For more information about write errors, see how to [troubleshoot issues writing data](https://docs.influxdata.com/influxdb/cloud/write-data/troubleshoot/).\n        in: header\n        name: Accept\n        schema:\n          default: application/json\n          description: Error content type.\n          enum:\n          - application/json\n          type: string\n      - description: Destination organization for writes. The database writes all\n          points in the batch to this organization. If you provide both `orgID` and\n          `org` parameters, `org` takes precedence.\n        in: query\n        name: org\n        required: true\n        schema:\n          description: Organization name or ID.\n          type: string\n      - description: ID of the destination organization for writes. If both `orgID`\n          and `org` are specified, `org` takes precedence.\n        in: query\n        name: orgID\n        schema:\n          type: string\n      - description: Destination bucket for writes.\n        in: query\n        name: bucket\n        required: true\n        schema:\n          description: All points within batch are written to this bucket.\n          type: string\n      - description: Precision for unix timestamps in the line protocol of the request\n          payload.\n        in: query\n        name: precision\n        schema:\n          $ref: '#/components/schemas/WritePrecision'\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              format: byte\n              type: string\n        description: Data in line protocol format.\n        required: true\n      responses:\n        \"204\":\n          description: InfluxDB validated the request data format and accepted the\n            data for writing to the bucket. Because data is written to InfluxDB asynchronously,\n            data may not yet be written to a bucket. If some of your data didn’t write\n            to the bucket, see [how to check for write errors](https://docs.influxdata.com/influxdb/cloud/write-data/troubleshoot/).\n        \"400\":\n          content:\n            application/json:\n              examples:\n                measurementSchemaFieldTypeConflict:\n                  summary: InfluxDB Cloud field type conflict thrown by an explicit\n                    bucket schema\n                  value:\n                    code: invalid\n                    message: 'partial write error (2 written): unable to parse ''air_sensor,service=S1,sensor=L1\n                      temperature=\"90.5\",humidity=70.0 1632850122'': schema: field\n                      type for field \"temperature\" not permitted by schema; got String\n                      but expected Float'\n              schema:\n                $ref: '#/components/schemas/LineProtocolError'\n          description: Bad request. Line protocol data in the request is malformed.\n            The response body contains the first malformed line in the data. InfluxDB\n            rejected the batch and did not write any data.\n        \"401\":\n          content:\n            application/json:\n              examples:\n                tokenNotAuthorized:\n                  summary: Token is not authorized to access the organization or resource\n                  value:\n                    code: unauthorized\n                    message: unauthorized access\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: |\n            Unauthorized. The error may indicate one of the following:\n              * The `Authorization: Token` header is missing or malformed.\n              * The API token value is missing from the header.\n              * The token does not have sufficient permissions to write to this organization and bucket.\n        \"404\":\n          content:\n            application/json:\n              examples:\n                resource-not-found:\n                  summary: Not found error\n                  value:\n                    code: not found\n                    message: bucket \"air_sensor\" not found\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Not found. A requested resource was not found. The response\n            body contains the requested resource type, e.g. `organization name` or\n            `bucket`, and name.\n        \"413\":\n          content:\n            application/json:\n              examples:\n                dataExceedsSizeLimitOSS:\n                  summary: InfluxDB OSS response\n                  value: |\n                    {\"code\":\"request too large\",\"message\":\"unable to read data: points batch is too large\"}\n              schema:\n                $ref: '#/components/schemas/LineProtocolLengthError'\n            text/html:\n              examples:\n                dataExceedsSizeLimit:\n                  summary: InfluxDB Cloud response\n                  value: |\n                    \u003chtml\u003e\n                      \u003chead\u003e\u003ctitle\u003e413 Request Entity Too Large\u003c/title\u003e\u003c/head\u003e\n                      \u003cbody\u003e\n                        \u003ccenter\u003e\u003ch1\u003e413 Request Entity Too Large\u003c/h1\u003e\u003c/center\u003e\n                        \u003chr\u003e\n                        \u003ccenter\u003enginx\u003c/center\u003e\n                      \u003c/body\u003e\n                    \u003c/html\u003e\n              schema:\n                type: string\n          description: |\n            The request payload is too large. InfluxDB rejected the batch and did not write any data.\n            #### InfluxDB Cloud:\n              - returns this error if the request exceeds the maximum [global limit](https://docs.influxdata.com/influxdb/cloud/account-management/limits/#global-limits).\n              - returns `Content-Type: text/html` for this error.\n\n            #### InfluxDB OSS:\n              - returns this error only if the [Go (golang) `ioutil.ReadAll()`](https://pkg.go.dev/io/ioutil#ReadAll) function raises an error.\n              - returns `Content-Type: application/json` for this error.\n        \"429\":\n          description: |\n            #### InfluxDB Cloud:\n              - returns this error if a **read** or **write** request exceeds your\n                plan's [adjustable service quotas](https://docs.influxdata.com/influxdb/cloud/account-management/limits/#adjustable-service-quotas)\n                or if a **delete** request exceeds the maximum\n                [global limit](https://docs.influxdata.com/influxdb/cloud/account-management/limits/#global-limits).\n              - returns `Retry-After` header that describes when to try the write again.\n\n            #### InfluxDB OSS:\n              - doesn't return this error.\n          headers:\n            Retry-After:\n              description: Non-negative decimal integer indicating seconds to wait\n                before retrying the request.\n              schema:\n                format: int32\n                type: integer\n        \"500\":\n          content:\n            application/json:\n              examples:\n                internalError:\n                  summary: Internal error example\n                  value:\n                    code: internal error\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal server error.\n        \"503\":\n          description: |\n            #### InfluxDB Cloud:\n              - returns this error if series cardinality exceeds your plan's\n                [adjustable service quotas](https://docs.influxdata.com/influxdb/cloud/account-management/limits/#adjustable-service-quotas).\n                See [how to resolve high series cardinality](https://docs.influxdata.com/influxdb/cloud/write-data/best-practices/resolve-high-cardinality/).\n\n            #### InfluxDB OSS:\n              - returns this error if\n                the server is temporarily unavailable to accept writes.\n              - returns `Retry-After` header that describes when to try the write again.\n          headers:\n            Retry-After:\n              description: Non-negative decimal integer indicating seconds to wait\n                before retrying the request.\n              schema:\n                format: int32\n                type: integer\n        default:\n          $ref: '#/components/responses/ServerError'\n      summary: Write data\n      tags:\n      - Write\nsecurity:\n- TokenAuthentication: []\nservers:\n- url: \"\"\ntags:\n- description: |\n    The InfluxDB `/api/v2` API requires authentication for all requests.\n    Use InfluxDB API tokens to authenticate requests to the `/api/v2` API.\n\n\n    For more information, see\n    [Token authentication](#section/Authentication/TokenAuthentication)\n\n    \u003c!-- ReDoc-Inject: \u003csecurity-definitions\u003e --\u003e\n  name: Authentication\n  x-traitTag: true\n- description: |\n    See the [**API Quick Start**](https://docs.influxdata.com/influxdb/cloud/api-guide/api_intro/) to get up and running authenticating with tokens, writing to buckets, and querying data.\n\n    [**InfluxDB API client libraries**](https://docs.influxdata.com/influxdb/cloud/api-guide/client-libraries/) are available for popular languages and ready to import into your application.\n  name: Quick start\n  x-traitTag: true\n- description: |\n    The InfluxDB API uses standard HTTP status codes for success and failure responses.\n    The response body may include additional details. For details about a specific operation's response, see **Responses** and **Response Samples** for that operation.\n\n    API operations may return the following HTTP status codes:\n\n    | \u0026nbsp;Code\u0026nbsp; | Status                   | Description      |\n    |:-----------:|:------------------------ |:--------------------- |\n    | `200`       | Success                  |                       |\n    | `204`       | No content               | For a `POST` request, `204` indicates that InfluxDB accepted the request and request data is valid. Asynchronous operations, such as `write`, might not have completed yet. |\n    | `400`       | Bad request              | `Authorization` header is missing or malformed or the API token does not have permission for the operation. |\n    | `401`       | Unauthorized             | May indicate one of the following: \u003cli\u003e`Authorization: Token` header is missing or malformed\u003c/li\u003e\u003cli\u003eAPI token value is missing from the header\u003c/li\u003e\u003cli\u003eAPI token does not have permission. For more information about token types and permissions, see [Manage API tokens](https://docs.influxdata.com/influxdb/cloud/security/tokens/)\u003c/li\u003e |\n    | `404`       | Not found                | Requested resource was not found. `message` in the response body provides details about the requested resource. |\n    | `413`       | Request entity too large | Request payload exceeds the size limit. |\n    | `422`       | Unprocessible entity     | Request data is invalid. `code` and `message` in the response body provide details about the problem. |\n    | `429`       | Too many requests        | API token is temporarily over the request quota. The `Retry-After` header describes when to try the request again. |\n    | `500`       | Internal server error    |                       |\n    | `503`       | Service unavailable      | Server is temporarily unavailable to process the request. The `Retry-After` header describes when to try the request again. |\n  name: Response codes\n  x-traitTag: true\n- description: |\n    Retrieve data, analyze queries, and get query suggestions.\n  name: Query\n- description: |\n    Write time series data to buckets.\n  name: Write\n- description: |\n    Create and manage API tokens. An **authorization** associates a list of permissions to an **organization** and provides a token for API access. Optionally, you can restrict an authorization and its token to a specific user.\n\n    For more information and examples, see the following:\n      - [Authorize API requests](https://docs.influxdata.com/influxdb/cloud/api-guide/api_intro/#authentication).\n      - [Manage API tokens](https://docs.influxdata.com/influxdb/cloud/security/tokens/).\n      - [Assign a token to a specific user](https://docs.influxdata.com/influxdb/cloud/security/tokens/create-token/).\n  name: Authorizations\nx-tagGroups:\n- name: Overview\n  tags:\n  - Quick start\n  - Authentication\n  - Response codes\n- name: Data I/O endpoints\n  tags:\n  - Write\n  - Query\n- name: Resource endpoints\n  tags:\n  - Buckets\n  - Dashboards\n  - Tasks\n  - Resources\n- name: Security and access endpoints\n  tags:\n  - Authorizations\n  - Organizations\n  - Users\n- name: System information endpoints\n  tags:\n  - Ping\n  - Routes\n- name: All endpoints\n  tags:\n  - Annotations\n  - Authorizations\n  - Buckets\n  - Cells\n  - Checks\n  - DBRPs\n  - Dashboards\n  - Delete\n  - Invocable Scripts\n  - Labels\n  - Limits\n  - NotificationEndpoints\n  - NotificationRules\n  - OAuth\n  - Organizations\n  - Ping\n  - Public Flags\n  - Query\n  - Resources\n  - Routes\n  - Rules\n  - Secrets\n  - Setup\n  - Signin\n  - Signout\n  - Streams\n  - Tasks\n  - Telegraf Plugins\n  - Telegrafs\n  - Templates\n  - Usage\n  - Users\n  - Variables\n  - Write\n"
		}
	},
	"Error": "unmarshal: callback: json: cannot unmarshal bool into Go struct field Schema.required of type []string"
}