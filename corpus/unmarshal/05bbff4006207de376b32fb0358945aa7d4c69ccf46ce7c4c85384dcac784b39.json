{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/JaimeTR/stardeos"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "support/doc/api/openapi.yaml",
			"byteSize": 158395,
			"content": "openapi: 3.0.0\ninfo:\n  title: PeerTube\n  version: 2.4.0\n  contact:\n    name: PeerTube Community\n    url: 'https://joinpeertube.org'\n  license:\n    name: AGPLv3.0\n    url: 'https://github.com/Chocobozzz/PeerTube/blob/master/LICENSE'\n  x-logo:\n    url: 'https://joinpeertube.org/img/brand.png'\n    altText: PeerTube Project Homepage\n  description: |\n    # Introduction\n\n    The PeerTube API is built on HTTP(S) and is RESTful. You can use your favorite\n    HTTP/REST library for your programming language to use PeerTube. The spec API is fully compatible with\n    [openapi-generator](https://github.com/OpenAPITools/openapi-generator/wiki/API-client-generator-HOWTO)\n    which generates a client SDK in the language of your choice - we generate some client SDKs automatically:\n\n    - [Python](https://framagit.org/framasoft/peertube/clients/python)\n    - [Go](https://framagit.org/framasoft/peertube/clients/go)\n    - [Kotlin](https://framagit.org/framasoft/peertube/clients/kotlin)\n\n    See the [Quick Start guide](https://docs.joinpeertube.org/#/api-rest-getting-started) so you can play with the PeerTube API.\n\n    # Authentication\n\n    When you sign up for an account, you are given the possibility to generate\n    sessions, and authenticate using this session token. One session token can\n    currently be used at a time.\n\n    ## Roles\n\n    Accounts are given permissions based on their role. There are three roles on\n    PeerTube: Administrator, Moderator, and User. See the [roles guide](https://docs.joinpeertube.org/#/admin-managing-users?id=roles) for a detail of their permissions.\n\n    # Errors\n\n    The API uses standard HTTP status codes to indicate the success or failure\n    of the API call. The body of the response will be JSON in the following\n    format.\n\n    ```\n    {\n      \"code\": \"unauthorized_request\", // example inner error code\n      \"error\": \"Token is invalid.\" // example exposed error message\n    }\n    ```\nexternalDocs:\n  url: https://docs.joinpeertube.org/api-rest-reference.html\ntags:\n  - name: Accounts\n    description: \u003e\n      Accounts encompass remote accounts discovered across the federation,\n      and correspond to the main Actor, along with video channels a user can create, which\n      are also Actors.\n\n      When a comment is posted, it is done with your Account's Actor.\n  - name: Users\n    description: \u003e\n      Using some features of PeerTube require authentication, for which User\n      provide different levels of permission as well as associated user\n      information. Each user has a corresponding local Account for federation.\n  - name: My User\n    description: \u003e\n      Operations related to your own User, when logged-in.\n  - name: My Subscriptions\n    description: \u003e\n      Operations related to your subscriptions to video channels, their\n      new videos, and how to keep up to date with their latest publications!\n  - name: My Notifications\n    description: \u003e\n      Notifications following new videos, follows or reports. They allow you\n      to keep track of the interactions and overall important information that\n      concerns you. You MAY set per-notification type delivery preference, to\n      receive the info either by mail, by in-browser notification or both.\n  - name: Config\n    description: \u003e\n      Each server exposes public information regarding supported videos and\n      options.\n  - name: Job\n    description: \u003e\n      Jobs are long-running tasks enqueued and processed by the instance\n      itself. No additional worker registration is currently available.\n  - name: Instance Follows\n    description: \u003e\n      Managing servers which the instance interacts with is crucial to the\n      concept of federation in PeerTube and external video indexation. The PeerTube\n      server then deals with inter-server ActivityPub operations and propagates\n      information across its social graph by posting activities to actors' inbox\n      endpoints.\n    externalDocs:\n      url: https://docs.joinpeertube.org/#/admin-following-instances?id=instances-follows\n  - name: Instance Redundancy\n    description: \u003e\n      Redundancy is part of the inter-server solidarity that PeerTube fosters.\n      Manage the list of instances you wish to help by seeding their videos according\n      to the policy of video selection of your choice. Note that you have a similar functionality\n      to mirror individual videos, see `Video Mirroring`.\n    externalDocs:\n      url: https://docs.joinpeertube.org/#/admin-following-instances?id=instances-redundancy\n  - name: Plugins\n    description: \u003e\n      Managing plugins installed from a local path or from NPM, or search for new ones.\n    externalDocs:\n      url: https://docs.joinpeertube.org/#/api-plugins\n  - name: Abuses\n    description: |\n      Abuses deal with reports of local or remote videos/comments/accounts alike.\n  - name: Video\n    description: |\n      Operations dealing with listing, uploading, fetching or modifying videos.\n  - name: Search\n    description: |\n      The search helps to find _videos_ or _channels_ from within the instance and beyond.\n      Videos from other instances federated by the instance (that is, instances\n      followed by the instance) can be found via keywords and other criteria of\n      the advanced search.\n\n      Administrators can also enable the use of a remote search system, indexing\n      videos and channels not could be not federated by the instance.\n  - name: Video Comments\n    description: \u003e\n      Operations dealing with comments to a video. Comments are organized in\n      threads.\n  - name: Video Playlists\n    description: \u003e\n      Operations dealing with playlists of videos. Playlists are bound to users\n      and/or channels.\n  - name: Video Channels\n    description: \u003e\n      Operations dealing with the creation, modification and listing of videos within a channel.\n  - name: Video Blocks\n    description: \u003e\n      Operations dealing with blocking videos (removing them from view and\n      preventing interactions).\n  - name: Video Rates\n    description: \u003e\n      Like/dislike a video.\n  - name: Feeds\n    description: \u003e\n      Server syndication feeds\nx-tagGroups:\n  - name: Accounts\n    tags:\n      - Accounts\n      - Users\n      - My User\n      - My Subscriptions\n      - My Notifications\n  - name: Videos\n    tags:\n      - Video\n      - Video Captions\n      - Video Channels\n      - Video Comments\n      - Video Rates\n      - Video Playlists\n      - Video Ownership Change\n      - Video Mirroring\n      - Live Videos\n      - Feeds\n  - name: Search\n    tags:\n      - Search\n  - name: Moderation\n    tags:\n      - Abuses\n      - Video Blocks\n      - Account Blocks\n      - Server Blocks\n  - name: Instance Configuration\n    tags:\n      - Config\n      - Instance Follows\n      - Instance Redundancy\n      - Plugins\n  - name: Jobs\n    tags:\n      - Job\npaths:\n  '/accounts/{name}':\n    get:\n      tags:\n        - Accounts\n      summary: Get an account\n      parameters:\n        - $ref: '#/components/parameters/name'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n        '404':\n          description: account not found\n  '/accounts/{name}/videos':\n    get:\n      tags:\n        - Accounts\n        - Video\n      summary: 'List videos of an account'\n      parameters:\n        - $ref: '#/components/parameters/name'\n        - $ref: '#/components/parameters/categoryOneOf'\n        - $ref: '#/components/parameters/tagsOneOf'\n        - $ref: '#/components/parameters/tagsAllOf'\n        - $ref: '#/components/parameters/licenceOneOf'\n        - $ref: '#/components/parameters/languageOneOf'\n        - $ref: '#/components/parameters/nsfw'\n        - $ref: '#/components/parameters/filter'\n        - $ref: '#/components/parameters/skipCount'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/videosSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            fetch('https://peertube2.cpy.re/api/v1/accounts/{name}/videos')\n            .then(function(response) {\n              return response.json()\n            }).then(function(data) {\n              console.log(data)\n            })\n        - lang: Shell\n          source: |\n            ## DEPENDENCIES: jq\n            curl -s https://peertube2.cpy.re/api/v1/accounts/{name}/videos | jq\n        - lang: Ruby\n          source: |\n            require 'net/http'\n            require 'json'\n\n            uri = URI.parse(\"https://peertube2.cpy.re/api/v1/accounts/{name}/videos\")\n\n            http = Net::HTTP.new(uri.host, uri.port)\n            http.use_ssl = true\n\n            response = http.get(uri.request_uri)\n\n            puts JSON.parse(response.read_body)\n        - lang: Python\n          source: |\n            import requests\n\n            r = requests.get(\"https://peertube2.cpy.re/api/v1//accounts/{name}/videos\")\n            json = r.json()\n\n            print(json)\n  /accounts:\n    get:\n      tags:\n        - Accounts\n      summary: List accounts\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Account'\n  /config:\n    get:\n      tags:\n        - Config\n      summary: Get instance public configuration\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServerConfig'\n  /config/about:\n    get:\n      summary: Get instance \"About\" information\n      tags:\n        - Config\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServerConfigAbout'\n  /config/custom:\n    get:\n      summary: Get instance runtime configuration\n      tags:\n        - Config\n      security:\n        - OAuth2:\n          - admin\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServerConfigCustom'\n    put:\n      summary: Set instance runtime configuration\n      tags:\n        - Config\n      security:\n        - OAuth2:\n          - admin\n      responses:\n        '200':\n          description: successful operation\n        '400':\n          x-summary: field inconsistencies\n          description: \u003e\n            Arises when:\n              - the emailer is disabled and the instance is open to registrations\n              - webtorrent and hls are disabled with transcoding enabled - you need at least one enabled\n    delete:\n      summary: Delete instance runtime configuration\n      tags:\n        - Config\n      security:\n        - OAuth2:\n          - admin\n      responses:\n        '200':\n          description: successful operation\n  /jobs/{state}:\n    get:\n      summary: List instance jobs\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Job\n      parameters:\n        - name: state\n          in: path\n          required: true\n          description: The state of the job\n          schema:\n            type: string\n            enum:\n              - active\n              - completed\n              - failed\n              - waiting\n              - delayed\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    maxItems: 100\n                    items:\n                      $ref: '#/components/schemas/Job'\n  '/server/following/{host}':\n    delete:\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Instance Follows\n      summary: Unfollow a server\n      parameters:\n        - name: host\n          in: path\n          required: true\n          description: 'The host to unfollow '\n          schema:\n            type: string\n            format: hostname\n      responses:\n        '201':\n          description: successful operation\n  /server/followers:\n    get:\n      tags:\n        - Instance Follows\n      summary: List instance followers\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Follow'\n  /server/following:\n    get:\n      tags:\n        - Instance Follows\n      summary: List instances followed by the server\n      parameters:\n        - name: state\n          in: query\n          schema:\n            type: string\n            enum:\n              - pending\n              - accepted\n        - name: actorType\n          in: query\n          schema:\n            type: string\n            enum:\n              - Person\n              - Application\n              - Group\n              - Service\n              - Organization\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Follow'\n    post:\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Instance Follows\n      summary: Follow a server\n      responses:\n        '204':\n          description: successful operation\n        '500':\n          description: cannot follow a non-HTTPS server\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                hosts:\n                  type: array\n                  items:\n                    type: string\n                    format: hostname\n                  uniqueItems: true\n  /users:\n    post:\n      summary: Create a user\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Users\n      responses:\n        '200':\n          description: user created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddUserResponse'\n          links:\n            # GET /users/{id}\n            GetUserId:\n              operationId: getUserId\n              parameters:\n                id: '$response.body#/user/id'\n            # PUT /users/{id}\n            PutUserId:\n              operationId: putUserId\n              parameters:\n                id: '$response.body#/user/id'\n            # DELETE /users/{id}\n            DelUserId:\n              operationId: delUserId\n              parameters:\n                id: '$response.body#/user/id'\n        '403':\n          description: insufficient authority to create an admin or moderator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddUser'\n        description: User to create\n        required: true\n    get:\n      summary: List users\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Users\n      parameters:\n        - $ref: '#/components/parameters/usersSearch'\n        - $ref: '#/components/parameters/usersBlocked'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/usersSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n  '/users/{id}':\n    parameters:\n      - $ref: '#/components/parameters/id'\n    delete:\n      summary: Delete a user\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Users\n      operationId: delUserId\n      responses:\n        '204':\n          description: successful operation\n    get:\n      summary: Get a user\n      security:\n        - OAuth2: []\n      tags:\n        - Users\n      operationId: getUserId\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    put:\n      summary: Update a user\n      security:\n        - OAuth2: []\n      tags:\n        - Users\n      operationId: putUserId\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUser'\n        required: true\n  /users/register:\n    post:\n      summary: Register a user\n      tags:\n        - Users\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterUser'\n        required: true\n  /users/me:\n    get:\n      summary: Get my user information\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My User\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n    put:\n      summary: Update my user information\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My User\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateMe'\n        required: true\n  /users/me/videos/imports:\n    get:\n      summary: Get video imports of my user\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - Videos\n        - My User\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoImport'\n  /users/me/video-quota-used:\n    get:\n      summary: Get my user used quota\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My User\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: number\n  '/users/me/videos/{videoId}/rating':\n    get:\n      summary: Get rate of my user for a video\n      security:\n        - OAuth2: []\n      tags:\n        - My User\n        - Video Rates\n      parameters:\n        - name: videoId\n          in: path\n          required: true\n          description: 'The video id '\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetMeVideoRating'\n  /users/me/videos:\n    get:\n      summary: Get videos of my user\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My User\n        - Videos\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n  /users/me/subscriptions:\n    get:\n      summary: Get my user subscriptions\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My Subscriptions\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n    post:\n      tags:\n        - My Subscriptions\n      summary: Add subscription to my user\n      security:\n        - OAuth2:\n          - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                uri:\n                  type: string\n                  format: uri\n                  description: uri of the video channels to subscribe to\n              required:\n                - uri\n            examples:\n              default:\n                value:\n                  uri: 008a0e54-375d-49d0-8379-143202e24152@video.lqdn.fr\n      responses:\n        '200':\n          description: successful operation\n  /users/me/subscriptions/exist:\n    get:\n      summary: Get if subscriptions exist for my user\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My Subscriptions\n      parameters:\n        - $ref: '#/components/parameters/subscriptionsUris'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n  /users/me/subscriptions/videos:\n    get:\n      summary: List videos of subscriptions of my user\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My Subscriptions\n        - Videos\n      parameters:\n        - $ref: '#/components/parameters/categoryOneOf'\n        - $ref: '#/components/parameters/tagsOneOf'\n        - $ref: '#/components/parameters/tagsAllOf'\n        - $ref: '#/components/parameters/licenceOneOf'\n        - $ref: '#/components/parameters/languageOneOf'\n        - $ref: '#/components/parameters/nsfw'\n        - $ref: '#/components/parameters/filter'\n        - $ref: '#/components/parameters/skipCount'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/videosSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n  '/users/me/subscriptions/{subscriptionHandle}':\n    get:\n      summary: Get subscription of my user\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My Subscriptions\n      parameters:\n        - $ref: '#/components/parameters/subscriptionHandle'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoChannel'\n    delete:\n      summary: Delete subscription of my user\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My Subscriptions\n      parameters:\n        - $ref: '#/components/parameters/subscriptionHandle'\n      responses:\n        '200':\n          description: successful operation\n  /users/me/notifications:\n    get:\n      summary: List my notifications\n      security:\n        - OAuth2: []\n      tags:\n        - My Notifications\n      parameters:\n        - name: unread\n          in: query\n          description: only list unread notifications\n          schema:\n            type: boolean\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationListResponse'\n  /users/me/notifications/read:\n    post:\n      summary: Mark notifications as read by their id\n      security:\n        - OAuth2: []\n      tags:\n        - My Notifications\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ids:\n                  type: array\n                  description: ids of the notifications to mark as read\n                  items:\n                    type: integer\n              required:\n                - ids\n      responses:\n        '204':\n          description: successful operation\n  /users/me/notifications/read-all:\n    post:\n      summary: Mark all my notification as read\n      security:\n        - OAuth2: []\n      tags:\n        - My Notifications\n      responses:\n        '204':\n          description: successful operation\n  /users/me/notification-settings:\n    put:\n      summary: Update my notification settings\n      security:\n        - OAuth2: []\n      tags:\n        - My Notifications\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                newVideoFromSubscription:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                newCommentOnMyVideo:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                abuseAsModerator:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                videoAutoBlacklistAsModerator:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                blacklistOnMyVideo:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                myVideoPublished:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                myVideoImportFinished:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                newFollow:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                newUserRegistration:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                commentMention:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                newInstanceFollower:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                autoInstanceFollowing:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n      responses:\n        '204':\n          description: successful operation\n  /users/me/avatar/pick:\n    post:\n      summary: Update my user avatar\n      security:\n        - OAuth2: []\n      tags:\n        - My User\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Avatar'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                avatarfile:\n                  description: The file to upload.\n                  type: string\n                  format: binary\n            encoding:\n              avatarfile:\n                contentType: image/png, image/jpeg\n  /videos/ownership:\n    get:\n      summary: List video ownership changes\n      tags:\n        - Video Ownership Change\n      security:\n        - OAuth2: []\n      responses:\n        '200':\n          description: successful operation\n  '/videos/ownership/{id}/accept':\n    post:\n      summary: Accept ownership change request\n      tags:\n        - Video Ownership Change\n      security:\n        - OAuth2: []\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n        '403':\n          description: cannot terminate an ownership change of another user\n        '404':\n          description: video owneship change not found\n  '/videos/ownership/{id}/refuse':\n    post:\n      summary: Refuse ownership change request\n      tags:\n        - Video Ownership Change\n      security:\n        - OAuth2: []\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n        '403':\n          description: cannot terminate an ownership change of another user\n        '404':\n          description: video owneship change not found\n  '/videos/{id}/give-ownership':\n    post:\n      summary: Request ownership change\n      tags:\n        - Video Ownership Change\n      security:\n        - OAuth2: []\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n              required:\n                - username\n      responses:\n        '204':\n          description: successful operation\n        '400':\n          description: changing video ownership to a remote account is not supported yet\n        '404':\n          description: video not found\n  /videos:\n    get:\n      summary: List videos\n      tags:\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/categoryOneOf'\n        - $ref: '#/components/parameters/tagsOneOf'\n        - $ref: '#/components/parameters/tagsAllOf'\n        - $ref: '#/components/parameters/licenceOneOf'\n        - $ref: '#/components/parameters/languageOneOf'\n        - $ref: '#/components/parameters/nsfw'\n        - $ref: '#/components/parameters/filter'\n        - $ref: '#/components/parameters/skipCount'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/videosSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n  /videos/categories:\n    get:\n      summary: List available video categories\n      tags:\n        - Video\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/videos/categories\n  /videos/licences:\n    get:\n      summary: List available video licences\n      tags:\n        - Video\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/videos/licences\n  /videos/languages:\n    get:\n      summary: List available video languages\n      tags:\n        - Video\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/videos/languages\n  /videos/privacies:\n    get:\n      summary: List available video privacies\n      tags:\n        - Video\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/videos/privacies\n  '/videos/{id}':\n    put:\n      summary: Update a video\n      security:\n        - OAuth2: []\n      tags:\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                thumbnailfile:\n                  description: Video thumbnail file\n                  type: string\n                  format: binary\n                previewfile:\n                  description: Video preview file\n                  type: string\n                  format: binary\n                category:\n                  description: Video category\n                  type: integer\n                  example: 4\n                licence:\n                  description: Video licence\n                  type: integer\n                  example: 2\n                language:\n                  description: Video language\n                  type: string\n                privacy:\n                  $ref: '#/components/schemas/VideoPrivacySet'\n                description:\n                  description: Video description\n                  type: string\n                waitTranscoding:\n                  description: Whether or not we wait transcoding before publish the video\n                  type: string\n                support:\n                  description: A text tell the audience how to support the video creator\n                  example: Please support my work on \u003cinsert crowdfunding plateform\u003e! \u003c3\n                  type: string\n                nsfw:\n                  description: Whether or not this video contains sensitive content\n                  type: boolean\n                name:\n                  description: Video name\n                  type: string\n                tags:\n                  description: Video tags (maximum 5 tags each between 2 and 30 characters)\n                  type: array\n                  minItems: 1\n                  maxItems: 5\n                  items:\n                    type: string\n                    minLength: 2\n                    maxLength: 30\n                commentsEnabled:\n                  description: Enable or disable comments for this video\n                  type: boolean\n                originallyPublishedAt:\n                  description: Date when the content was originally published\n                  type: string\n                  format: date-time\n                scheduleUpdate:\n                  $ref: '#/components/schemas/VideoScheduledUpdate'\n            encoding:\n              thumbnailfile:\n                contentType: image/jpeg\n              previewfile:\n                contentType: image/jpeg\n    get:\n      summary: Get a video\n      tags:\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoDetails'\n    delete:\n      summary: Delete a video\n      security:\n        - OAuth2: []\n      tags:\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n  '/videos/{id}/description':\n    get:\n      summary: Get complete video description\n      tags:\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: string\n  '/videos/{id}/views':\n    post:\n      summary: Add a view to a video\n      tags:\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n  '/videos/{id}/watching':\n    put:\n      summary: Set watching progress of a video\n      tags:\n        - Video\n      security:\n        - OAuth2: []\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserWatchingVideo'\n        required: true\n      responses:\n        '204':\n          description: successful operation\n  /videos/upload:\n    post:\n      summary: Upload a video\n      security:\n        - OAuth2: []\n      tags:\n        - Video\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoUploadResponse'\n        '403':\n          description: user video quota is exceeded with this video\n        '408':\n          description: upload has timed out\n        '422':\n          description: invalid input file\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                videofile:\n                  description: Video file\n                  type: string\n                  format: binary\n                channelId:\n                  description: Channel id that will contain this video\n                  type: integer\n                thumbnailfile:\n                  description: Video thumbnail file\n                  type: string\n                  format: binary\n                previewfile:\n                  description: Video preview file\n                  type: string\n                  format: binary\n                privacy:\n                  $ref: '#/components/schemas/VideoPrivacySet'\n                category:\n                  description: Video category\n                  type: integer\n                  example: 4\n                licence:\n                  description: Video licence\n                  type: string\n                language:\n                  description: Video language\n                  type: integer\n                  example: 2\n                description:\n                  description: Video description\n                  type: string\n                waitTranscoding:\n                  description: Whether or not we wait transcoding before publish the video\n                  type: boolean\n                support:\n                  description: A text tell the audience how to support the video creator\n                  example: Please support my work on \u003cinsert crowdfunding plateform\u003e! \u003c3\n                  type: string\n                nsfw:\n                  description: Whether or not this video contains sensitive content\n                  type: boolean\n                name:\n                  description: Video name\n                  type: string\n                tags:\n                  description: Video tags (maximum 5 tags each between 2 and 30 characters)\n                  type: array\n                  minItems: 1\n                  maxItems: 5\n                  uniqueItems: true\n                  items:\n                    type: string\n                    minLength: 2\n                    maxLength: 30\n                commentsEnabled:\n                  description: Enable or disable comments for this video\n                  type: boolean\n                downloadEnabled:\n                  description: Enable or disable downloading for this video\n                  type: boolean\n                originallyPublishedAt:\n                  description: Date when the content was originally published\n                  type: string\n                  format: date-time\n                scheduleUpdate:\n                  $ref: '#/components/schemas/VideoScheduledUpdate'\n              required:\n                - videofile\n                - channelId\n                - name\n            encoding:\n              videofile:\n                contentType: video/mp4, video/webm, video/ogg, video/avi, video/quicktime, video/x-msvideo, video/x-flv, video/x-matroska, application/octet-stream\n              thumbnailfile:\n                contentType: image/jpeg\n              previewfile:\n                contentType: image/jpeg\n      x-code-samples:\n        - lang: Shell\n          source: |\n            ## DEPENDENCIES: jq\n            USERNAME=\"\u003cyour_username\u003e\"\n            PASSWORD=\"\u003cyour_password\u003e\"\n            FILE_PATH=\"\u003cyour_file_path\u003e\"\n            CHANNEL_ID=\"\u003cyour_channel_id\u003e\"\n            NAME=\"\u003cvideo_name\u003e\"\n\n            API_PATH=\"https://peertube2.cpy.re/api/v1\"\n            ## AUTH\n            client_id=$(curl -s \"$API_PATH/oauth-clients/local\" | jq -r \".client_id\")\n            client_secret=$(curl -s \"$API_PATH/oauth-clients/local\" | jq -r \".client_secret\")\n            token=$(curl -s \"$API_PATH/users/token\" \\\n              --data client_id=\"$client_id\" \\\n              --data client_secret=\"$client_secret\" \\\n              --data grant_type=password \\\n              --data response_type=code \\\n              --data username=\"$USERNAME\" \\\n              --data password=\"$PASSWORD\" \\\n              | jq -r \".access_token\")\n            ## VIDEO UPLOAD\n            curl -s \"$API_PATH/videos/upload\" \\\n              -H \"Authorization: Bearer $token\" \\\n              --max-time 600 \\\n              --form videofile=@\"$FILE_PATH\" \\\n              --form channelId=$CHANNEL_ID \\\n              --form name=\"$NAME\"\n  /videos/imports:\n    post:\n      summary: Import a video\n      description: Import a torrent or magnetURI or HTTP resource (if enabled by the instance administrator)\n      security:\n        - OAuth2: []\n      tags:\n        - Video\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                torrentfile:\n                  description: Torrent File\n                  type: string\n                  format: binary\n                targetUrl:\n                  description: HTTP target URL\n                  type: string\n                magnetUri:\n                  description: Magnet URI\n                  type: string\n                channelId:\n                  description: Channel id that will contain this video\n                  type: integer\n                thumbnailfile:\n                  description: Video thumbnail file\n                  type: string\n                  format: binary\n                previewfile:\n                  description: Video preview file\n                  type: string\n                  format: binary\n                privacy:\n                  $ref: '#/components/schemas/VideoPrivacySet'\n                category:\n                  description: Video category\n                  type: string\n                licence:\n                  description: Video licence\n                  type: string\n                language:\n                  description: Video language\n                  type: string\n                description:\n                  description: Video description\n                  type: string\n                waitTranscoding:\n                  description: Whether or not we wait transcoding before publish the video\n                  type: boolean\n                support:\n                  description: A text tell the audience how to support the video creator\n                  example: Please support my work on \u003cinsert crowdfunding plateform\u003e! \u003c3\n                  type: string\n                nsfw:\n                  description: Whether or not this video contains sensitive content\n                  type: boolean\n                name:\n                  description: Video name\n                  type: string\n                tags:\n                  description: Video tags (maximum 5 tags each between 2 and 30 characters)\n                  type: array\n                  minItems: 1\n                  maxItems: 5\n                  items:\n                    type: string\n                    minLength: 2\n                    maxLength: 30\n                commentsEnabled:\n                  description: Enable or disable comments for this video\n                  type: boolean\n                downloadEnabled:\n                  description: Enable or disable downloading for this video\n                  type: boolean\n                scheduleUpdate:\n                  $ref: '#/components/schemas/VideoScheduledUpdate'\n              required:\n                - channelId\n                - name\n            encoding:\n              torrentfile:\n                contentType: application/x-bittorrent\n              thumbnailfile:\n                contentType: image/jpeg\n              previewfile:\n                contentType: image/jpeg\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoUploadResponse'\n        '409':\n          description: HTTP or Torrent/magnetURI import not enabled\n        '400':\n          description: '`magnetUri` or `targetUrl` or a torrent file missing'\n\n  /videos/live:\n    post:\n      summary: Create a live\n      security:\n        - OAuth2: []\n      tags:\n        - Live Videos\n        - Video\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoUploadResponse'\n        '403':\n          description: Live is not enabled, allow replay is not enabled, or max instance/user live videos limit is exceeded\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                channelId:\n                  description: Channel id that will contain this live video\n                  type: integer\n                saveReplay:\n                  type: boolean\n                thumbnailfile:\n                  description: Live video/replay thumbnail file\n                  type: string\n                  format: binary\n                previewfile:\n                  description: Live video/replay preview file\n                  type: string\n                  format: binary\n                privacy:\n                  $ref: '#/components/schemas/VideoPrivacySet'\n                category:\n                  description: Live video/replay category\n                  type: string\n                licence:\n                  description: Live video/replay licence\n                  type: string\n                language:\n                  description: Live video/replay language\n                  type: string\n                description:\n                  description: Live video/replay description\n                  type: string\n                support:\n                  description: A text tell the audience how to support the creator\n                  example: Please support my work on \u003cinsert crowdfunding plateform\u003e! \u003c3\n                  type: string\n                nsfw:\n                  description: Whether or not this live video/replay contains sensitive content\n                  type: boolean\n                name:\n                  description: Live video/replay name\n                  type: string\n                tags:\n                  description: Live video/replay tags (maximum 5 tags each between 2 and 30 characters)\n                  type: array\n                  minItems: 1\n                  maxItems: 5\n                  items:\n                    type: string\n                    minLength: 2\n                    maxLength: 30\n                commentsEnabled:\n                  description: Enable or disable comments for this live video/replay\n                  type: boolean\n                downloadEnabled:\n                  description: Enable or disable downloading for the replay of this live\n                  type: boolean\n              required:\n                - channelId\n                - name\n            encoding:\n              thumbnailfile:\n                contentType: image/jpeg\n              previewfile:\n                contentType: image/jpeg\n\n  /videos/live/{id}:\n    get:\n      summary: Get a live information\n      security:\n        - OAuth2: []\n      tags:\n        - Live Videos\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LiveVideoResponse'\n    put:\n      summary: Update a live information\n      security:\n        - OAuth2: []\n      tags:\n        - Live Videos\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LiveVideoUpdate'\n      responses:\n        '204':\n          description: Successful operation\n        '400':\n          description: Bad parameters or trying to update a live that has already started\n        '403':\n          description: Trying to save replay of the live but saving replay is not enabled on the instance\n\n  /users/me/abuses:\n    get:\n      summary: List my abuses\n      security:\n        - OAuth2: []\n      tags:\n        - Abuses\n        - My User\n      parameters:\n        - name: id\n          in: query\n          description: only list the report with this id\n          schema:\n            type: integer\n        - name: state\n          in: query\n          schema:\n            $ref: '#/components/schemas/AbuseStateSet'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/abusesSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Abuse'\n\n  /abuses:\n    get:\n      summary: List abuses\n      security:\n        - OAuth2:\n          - admin\n          - moderator\n      tags:\n        - Abuses\n      parameters:\n        - name: id\n          in: query\n          description: only list the report with this id\n          schema:\n            type: integer\n        - name: predefinedReason\n          in: query\n          description: predefined reason the listed reports should contain\n          schema:\n            $ref: '#/components/schemas/PredefinedAbuseReasons'\n        - name: search\n          in: query\n          description: plain search that will match with video titles, reporter names and more\n          schema:\n            type: string\n        - name: state\n          in: query\n          schema:\n            $ref: '#/components/schemas/AbuseStateSet'\n        - name: searchReporter\n          in: query\n          description: only list reports of a specific reporter\n          schema:\n            type: string\n        - name: searchReportee\n          description: only list reports of a specific reportee\n          in: query\n          schema:\n            type: string\n        - name: searchVideo\n          in: query\n          description: only list reports of a specific video\n          schema:\n            type: string\n        - name: searchVideoChannel\n          in: query\n          description: only list reports of a specific video channel\n          schema:\n            type: string\n        - name: videoIs\n          in: query\n          description: only list blacklisted or deleted videos\n          schema:\n            type: string\n            enum:\n            - 'deleted'\n            - 'blacklisted'\n        - name: filter\n          in: query\n          description: only list account, comment or video reports\n          schema:\n            type: string\n            enum:\n            - 'video'\n            - 'comment'\n            - 'account'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/abusesSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Abuse'\n\n    post:\n      summary: Report an abuse\n      security:\n        - OAuth2: []\n      tags:\n        - Abuses\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                reason:\n                  description: Reason why the user reports this video\n                  type: string\n                  minLength: 4\n                predefinedReasons:\n                  $ref: '#/components/schemas/PredefinedAbuseReasons'\n\n                video:\n                  type: object\n                  properties:\n                    id:\n                      description: Video id to report\n                      type: number\n                    startAt:\n                      type: integer\n                      description: Timestamp in the video that marks the beginning of the report\n                      minimum: 0\n                    endAt:\n                      type: integer\n                      description: Timestamp in the video that marks the ending of the report\n                      minimum: 0\n                comment:\n                  type: object\n                  properties:\n                    id:\n                      description: Comment id to report\n                      type: number\n                account:\n                  type: object\n                  properties:\n                    id:\n                      description: Account id to report\n                      type: number\n              required:\n                - reason\n      responses:\n        '204':\n          description: successful operation\n        '400':\n          description: incorrect request parameters\n  '/abuses/{abuseId}':\n    put:\n      summary: Update an abuse\n      security:\n        - OAuth2:\n          - admin\n          - moderator\n      tags:\n        - Abuses\n      parameters:\n        - $ref: '#/components/parameters/abuseId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  $ref: '#/components/schemas/AbuseStateSet'\n                moderationComment:\n                  type: string\n                  description: Update the report comment visible only to the moderation team\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: abuse not found\n    delete:\n      tags:\n        - Abuses\n      summary: Delete an abuse\n      security:\n        - OAuth2:\n          - admin\n          - moderator\n      parameters:\n        - $ref: '#/components/parameters/abuseId'\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: block not found\n  '/abuses/{abuseId}/messages':\n    get:\n      summary: List messages of an abuse\n      security:\n        - OAuth2: []\n      tags:\n        - Abuses\n      parameters:\n        - $ref: '#/components/parameters/abuseId'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AbuseMessage'\n\n    post:\n      summary: Add message to an abuse\n      security:\n        - OAuth2: []\n      tags:\n        - Abuses\n      parameters:\n        - $ref: '#/components/parameters/abuseId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                message:\n                  description: Message to send\n                  type: string\n              required:\n                - message\n      responses:\n        '200':\n          description: successful operation\n        '400':\n          description: incorrect request parameters\n  '/abuses/{abuseId}/messages/{abuseMessageId}':\n    delete:\n      summary: Delete an abuse message\n      security:\n        - OAuth2: []\n      tags:\n        - Abuses\n      parameters:\n        - $ref: '#/components/parameters/abuseId'\n        - $ref: '#/components/parameters/abuseMessageId'\n      responses:\n        '204':\n          description: successful operation\n\n  '/videos/{id}/blacklist':\n    post:\n      summary: Block a video\n      security:\n        - OAuth2:\n          - admin\n          - moderator\n      tags:\n        - Video Blocks\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n    delete:\n      summary: Unblock a video by its id\n      security:\n        - OAuth2:\n          - admin\n          - moderator\n      tags:\n        - Video Blocks\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: block not found\n  /videos/blacklist:\n    get:\n      tags:\n        - Video Blocks\n      summary: List video blocks\n      security:\n        - OAuth2:\n          - admin\n          - moderator\n      parameters:\n        - name: type\n          in: query\n          description: \u003e\n            list only blocks that match this type:\n\n            - `1`: manual block\n\n            - `2`: automatic block that needs review\n          schema:\n            type: integer\n            enum:\n              - 1\n              - 2\n        - name: search\n          in: query\n          description: plain search that will match with video titles, and more\n          schema:\n            type: string\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/blacklistsSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/VideoBlacklist'\n  /videos/{id}/captions:\n    get:\n      summary: List captions of a video\n      tags:\n        - Video Captions\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/VideoCaption'\n  /videos/{id}/captions/{captionLanguage}:\n    put:\n      summary: Add or replace a video caption\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - Video Captions\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/captionLanguage'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                captionfile:\n                  description: The file to upload.\n                  type: string\n                  format: binary\n            encoding:\n              captionfile:\n                contentType: text/vtt, application/x-subrip, text/plain\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: video or language not found\n    delete:\n      summary: Delete a video caption\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - Video Captions\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/captionLanguage'\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: video or language or caption for that language not found\n  /video-channels:\n    get:\n      summary: List video channels\n      tags:\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/VideoChannel'\n    post:\n      summary: Create a video channel\n      security:\n        - OAuth2: []\n      tags:\n        - Video Channels\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VideoChannelCreate'\n  '/video-channels/{channelHandle}':\n    get:\n      summary: Get a video channel\n      tags:\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/channelHandle'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoChannel'\n    put:\n      summary: Update a video channel\n      security:\n        - OAuth2: []\n      tags:\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/channelHandle'\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VideoChannelUpdate'\n    delete:\n      summary: Delete a video channel\n      security:\n        - OAuth2: []\n      tags:\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/channelHandle'\n      responses:\n        '204':\n          description: successful operation\n  '/video-channels/{channelHandle}/videos':\n    get:\n      summary: List videos of a video channel\n      tags:\n        - Video\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/channelHandle'\n        - $ref: '#/components/parameters/categoryOneOf'\n        - $ref: '#/components/parameters/tagsOneOf'\n        - $ref: '#/components/parameters/tagsAllOf'\n        - $ref: '#/components/parameters/licenceOneOf'\n        - $ref: '#/components/parameters/languageOneOf'\n        - $ref: '#/components/parameters/nsfw'\n        - $ref: '#/components/parameters/filter'\n        - $ref: '#/components/parameters/skipCount'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/videosSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n\n  /video-playlists/privacies:\n    get:\n      summary: List available playlist privacies\n      tags:\n        - Video Playlists\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/video-playlists/privacies\n\n  /video-playlists:\n    get:\n      summary: List video playlists\n      tags:\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/VideoPlaylist'\n    post:\n      summary: Create a video playlist\n      description: 'If the video playlist is set as public, the videoChannelId is mandatory.'\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  videoPlaylist:\n                    type: object\n                    properties:\n                      id:\n                        type: integer\n                      uuid:\n                        type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                displayName:\n                  description: Video playlist display name\n                  type: string\n                thumbnailfile:\n                  description: Video playlist thumbnail file\n                  type: string\n                  format: binary\n                privacy:\n                  $ref: '#/components/schemas/VideoPlaylistPrivacySet'\n                description:\n                  description: Video playlist description\n                  type: string\n                videoChannelId:\n                  description: Video channel in which the playlist will be published\n                  type: integer\n              required:\n                - displayName\n            encoding:\n              thumbnailfile:\n                contentType: image/jpeg\n\n  /video-playlists/{id}:\n    get:\n      summary: Get a video playlist\n      tags:\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoPlaylist'\n    put:\n      summary: Update a video playlist\n      description: 'If the video playlist is set as public, the playlist must have a assigned channel.'\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      responses:\n        '204':\n          description: successful operation\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                displayName:\n                  description: Video playlist display name\n                  type: string\n                thumbnailfile:\n                  description: Video playlist thumbnail file\n                  type: string\n                  format: binary\n                privacy:\n                  $ref: '#/components/schemas/VideoPlaylistPrivacySet'\n                description:\n                  description: Video playlist description\n                  type: string\n                videoChannelId:\n                  description: Video channel in which the playlist will be published\n                  type: integer\n            encoding:\n              thumbnailfile:\n                contentType: image/jpeg\n    delete:\n      summary: Delete a video playlist\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n\n  /video-playlists/{id}/videos:\n    get:\n      summary: 'List videos of a playlist'\n      tags:\n        - Videos\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n    post:\n      summary: 'Add a video in a playlist'\n      security:\n        - OAuth2: []\n      tags:\n        - Videos\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  videoPlaylistElement:\n                    type: object\n                    properties:\n                      id:\n                        type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                videoId:\n                  type: integer\n                  description: 'Video to add in the playlist'\n                startTimestamp:\n                  type: integer\n                  description: 'Start the video at this specific timestamp (in seconds)'\n                stopTimestamp:\n                  type: integer\n                  description: 'Stop the video at this specific timestamp (in seconds)'\n              required:\n                - videoId\n\n  /video-playlists/{id}/videos/reorder:\n    post:\n      summary: 'Reorder a playlist'\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                startPosition:\n                  type: integer\n                  description: 'Start position of the element to reorder'\n                  minimum: 1\n                insertAfterPosition:\n                  type: integer\n                  description: 'New position for the block to reorder, to add the block before the first element'\n                  minimum: 0\n                reorderLength:\n                  type: integer\n                  description: 'How many element from `startPosition` to reorder'\n                  minimum: 1\n              required:\n                - startPosition\n                - insertAfterPosition\n\n  /video-playlists/{id}/videos/{playlistElementId}:\n    put:\n      summary: 'Update a playlist element'\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/playlistElementId'\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                startTimestamp:\n                  type: integer\n                  description: 'Start the video at this specific timestamp (in seconds)'\n                stopTimestamp:\n                  type: integer\n                  description: 'Stop the video at this specific timestamp (in seconds)'\n    delete:\n      summary: 'Delete an element from a playlist'\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/playlistElementId'\n      responses:\n        '204':\n          description: successful operation\n\n  '/users/me/video-playlists/videos-exist':\n    get:\n      summary: 'Check video exists in my playlists'\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      parameters:\n        - name: videoIds\n          in: query\n          required: true\n          description: The video ids to check\n          schema:\n            type: array\n            items:\n              type: integer\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  videoId:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        playlistElementId:\n                          type: integer\n                        playlistId:\n                          type: integer\n                        startTimestamp:\n                          type: integer\n                        stopTimestamp:\n                          type: integer\n\n  '/accounts/{name}/video-channels':\n    get:\n      summary: List video channels of an account\n      tags:\n        - Video Channels\n        - Accounts\n      parameters:\n        - $ref: '#/components/parameters/name'\n        - name: withStats\n          in: query\n          description: include view statistics for the last 30 days (only if authentified as the account user)\n          schema:\n            type: boolean\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VideoChannel'\n  '/accounts/{name}/ratings':\n    get:\n      summary: List ratings of an account\n      security:\n        - OAuth2: []\n      tags:\n        - Accounts\n      parameters:\n        - $ref: '#/components/parameters/name'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n        - name: rating\n          in: query\n          required: false\n          description: Optionally filter which ratings to retrieve\n          schema:\n            type: string\n            enum:\n              - like\n              - dislike\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VideoRating'\n  '/videos/{id}/comment-threads':\n    get:\n      summary: List threads of a video\n      tags:\n        - Video Comments\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/commentsSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommentThreadResponse'\n    post:\n      summary: Create a thread\n      security:\n        - OAuth2: []\n      tags:\n        - Video Comments\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommentThreadPostResponse'\n        '404':\n          description: video does not exist\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                text:\n                  type: string\n                  description: 'Text comment'\n              required:\n                - text\n\n  '/videos/{id}/comment-threads/{threadId}':\n    get:\n      summary: Get a thread\n      tags:\n        - Video Comments\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/threadId'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoCommentThreadTree'\n  '/videos/{id}/comments/{commentId}':\n    post:\n      summary: Reply to a thread of a video\n      security:\n        - OAuth2: []\n      tags:\n        - Video Comments\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/commentId'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommentThreadPostResponse'\n        '404':\n          description: thread or video does not exist\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                text:\n                  type: string\n                  description: 'Text comment'\n              required:\n                - text\n\n    delete:\n      summary: Delete a comment or a reply\n      security:\n        - OAuth2: []\n      tags:\n        - Video Comments\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/commentId'\n      responses:\n        '204':\n          description: successful operation\n        '403':\n          description: cannot remove comment of another user\n        '404':\n          description: comment or video does not exist\n        '409':\n          description: comment is already deleted\n  '/videos/{id}/rate':\n    put:\n      summary: Like/dislike a video\n      security:\n        - OAuth2: []\n      tags:\n        - Video Rates\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: video does not exist\n  /search/videos:\n    get:\n      tags:\n        - Search\n      summary: Search videos\n      parameters:\n        - name: search\n          in: query\n          required: true\n          allowEmptyValue: false\n          description: \u003e\n            String to search. If the user can make a remote URI search, and the string is an URI then the\n            PeerTube instance will fetch the remote object and add it to its database. Then,\n            you can use the REST API to fetch the complete video information and interact with it.\n          schema:\n            type: string\n        - $ref: '#/components/parameters/categoryOneOf'\n        - $ref: '#/components/parameters/tagsOneOf'\n        - $ref: '#/components/parameters/tagsAllOf'\n        - $ref: '#/components/parameters/licenceOneOf'\n        - $ref: '#/components/parameters/languageOneOf'\n        - $ref: '#/components/parameters/nsfw'\n        - $ref: '#/components/parameters/filter'\n        - $ref: '#/components/parameters/skipCount'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/searchTarget'\n        - $ref: '#/components/parameters/videosSearchSort'\n        - name: startDate\n          in: query\n          description: Get videos that are published after this date\n          schema:\n            type: string\n            format: date-time\n        - name: endDate\n          in: query\n          description: Get videos that are published before this date\n          schema:\n            type: string\n            format: date-time\n        - name: originallyPublishedStartDate\n          in: query\n          description: Get videos that are originally published after this date\n          schema:\n            type: string\n            format: date-time\n        - name: originallyPublishedEndDate\n          in: query\n          description: Get videos that are originally published before this date\n          schema:\n            type: string\n            format: date-time\n        - name: durationMin\n          in: query\n          description: Get videos that have this minimum duration\n          schema:\n            type: integer\n        - name: durationMax\n          in: query\n          description: Get videos that have this maximum duration\n          schema:\n            type: integer\n      callbacks:\n        'searchTarget === search-index':\n          $ref: '#/components/callbacks/searchIndex'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n        '500':\n          description: search index unavailable\n  /search/video-channels:\n    get:\n      tags:\n        - Search\n      summary: Search channels\n      parameters:\n        - name: search\n          in: query\n          required: true\n          description: \u003e\n            String to search. If the user can make a remote URI search, and the string is an URI then the\n            PeerTube instance will fetch the remote object and add it to its database. Then,\n            you can use the REST API to fetch the complete channel information and interact with it.\n          schema:\n            type: string\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/searchTarget'\n        - $ref: '#/components/parameters/sort'\n      callbacks:\n        'searchTarget === search-index':\n          $ref: '#/components/callbacks/searchIndex'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VideoChannel'\n        '500':\n          description: search index unavailable\n  /blocklist/accounts:\n    get:\n      tags:\n        - Account Blocks\n      summary: List account blocks\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n    post:\n      tags:\n        - Account Blocks\n      summary: Block an account\n      security:\n        - OAuth2:\n          - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                accountName:\n                  type: string\n                  example: chocobozzz@example.org\n                  description: account to block, in the form `username@domain`\n              required:\n                - accountName\n      responses:\n        '200':\n          description: successful operation\n        '409':\n          description: self-blocking forbidden\n  '/blocklist/accounts/{accountName}':\n    delete:\n      tags:\n        - Account Blocks\n      summary: Unblock an account by its handle\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: accountName\n          in: path\n          required: true\n          description: account to unblock, in the form `username@domain`\n          schema:\n            type: string\n      responses:\n        '201':\n          description: successful operation\n        '404':\n          description: account or account block does not exist\n  /blocklist/servers:\n    get:\n      tags:\n        - Server Blocks\n      summary: List server blocks\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n    post:\n      tags:\n        - Server Blocks\n      summary: Block a server\n      security:\n        - OAuth2:\n          - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                host:\n                  type: string\n                  format: hostname\n                  description: server domain to block\n              required:\n                - host\n      responses:\n        '200':\n          description: successful operation\n        '409':\n          description: self-blocking forbidden\n  '/blocklist/servers/{host}':\n    delete:\n      tags:\n        - Server Blocks\n      summary: Unblock a server by its domain\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: host\n          in: path\n          required: true\n          description: server domain to unblock\n          schema:\n            type: string\n            format: hostname\n      responses:\n        '201':\n          description: successful operation\n        '404':\n          description: account block does not exist\n  /redundancy/{host}:\n    put:\n      tags:\n        - Instance Redundancy\n      summary: Update a server redundancy policy\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: host\n          in: path\n          required: true\n          description: server domain to mirror\n          schema:\n            type: string\n            format: hostname\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                redundancyAllowed:\n                  type: boolean\n                  description: allow mirroring of the host's local videos\n              required:\n                - redundancyAllowed\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: server is not already known\n  /redundancy/videos:\n    get:\n      tags:\n        - Video Mirroring\n      summary: List videos being mirrored\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: target\n          in: query\n          required: true\n          description: direction of the mirror\n          schema:\n            type: string\n            enum:\n              - my-videos\n              - remote-videos\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/videoRedundanciesSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VideoRedundancy'\n    post:\n      tags:\n        - Video Mirroring\n      summary: Mirror a video\n      security:\n        - OAuth2:\n          - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                videoId:\n                  type: integer\n              required:\n                - videoId\n      responses:\n        '204':\n          description: successful operation\n        '400':\n          description: cannot mirror a local video\n        '404':\n          description: video does not exist\n        '409':\n          description: video is already mirrored\n  /redundancy/videos/{redundancyId}:\n    delete:\n      tags:\n        - Video Mirroring\n      summary: Delete a mirror done on a video\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: redundancyId\n          in: path\n          required: true\n          description: id of an existing redundancy on a video\n          schema:\n            type: string\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: video redundancy not found\n  '/feeds/video-comments.{format}':\n    get:\n      tags:\n        - Feeds\n      summary: List comments on videos\n      servers:\n        - url: 'https://peertube2.cpy.re'\n          description: Live Test Server (live data - latest nightly version)\n        - url: 'https://peertube3.cpy.re'\n          description: Live Test Server (live data - latest RC version)\n        - url: 'https://peertube.cpy.re'\n          description: Live Test Server (live data - stable version)\n      parameters:\n        - name: format\n          in: path\n          required: true\n          description: 'format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))'\n          schema:\n            type: string\n            enum:\n              - xml\n              - rss\n              - rss2\n              - atom\n              - atom1\n              - json\n              - json1\n        - name: videoId\n          in: query\n          description: 'limit listing to a specific video'\n          schema:\n            type: string\n        - name: accountId\n          in: query\n          description: 'limit listing to a specific account'\n          schema:\n            type: string\n        - name: accountName\n          in: query\n          description: 'limit listing to a specific account'\n          schema:\n            type: string\n        - name: videoChannelId\n          in: query\n          description: 'limit listing to a specific video channel'\n          schema:\n            type: string\n        - name: videoChannelName\n          in: query\n          description: 'limit listing to a specific video channel'\n          schema:\n            type: string\n      responses:\n        '204':\n          description: successful operation\n          headers:\n            Cache-Control:\n              schema:\n                type: string\n                default: 'max-age=900' # 15 min cache\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/VideoCommentsForXML'\n            application/rss+xml:\n              schema:\n                $ref: '#/components/schemas/VideoCommentsForXML'\n            text/xml:\n              schema:\n                $ref: '#/components/schemas/VideoCommentsForXML'\n            application/atom+xml:\n              schema:\n                $ref: '#/components/schemas/VideoCommentsForXML'\n            application/json:\n              schema:\n                type: object\n        '400':\n          x-summary: field inconsistencies\n          description: \u003e\n            Arises when:\n              - videoId filter is mixed with a channel filter\n        '404':\n          description: video, video channel or account not found\n        '406':\n          description: accept header unsupported\n  '/feeds/videos.{format}':\n    get:\n      tags:\n        - Feeds\n      summary: List videos\n      servers:\n        - url: 'https://peertube2.cpy.re'\n          description: Live Test Server (live data - latest nightly version)\n        - url: 'https://peertube3.cpy.re'\n          description: Live Test Server (live data - latest RC version)\n        - url: 'https://peertube.cpy.re'\n          description: Live Test Server (live data - stable version)\n      parameters:\n        - name: format\n          in: path\n          required: true\n          description: 'format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))'\n          schema:\n            type: string\n            enum:\n              - xml\n              - rss\n              - rss2\n              - atom\n              - atom1\n              - json\n              - json1\n        - name: accountId\n          in: query\n          description: 'limit listing to a specific account'\n          schema:\n            type: string\n        - name: accountName\n          in: query\n          description: 'limit listing to a specific account'\n          schema:\n            type: string\n        - name: videoChannelId\n          in: query\n          description: 'limit listing to a specific video channel'\n          schema:\n            type: string\n        - name: videoChannelName\n          in: query\n          description: 'limit listing to a specific video channel'\n          schema:\n            type: string\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/nsfw'\n        - $ref: '#/components/parameters/filter'\n      responses:\n        '204':\n          description: successful operation\n          headers:\n            Cache-Control:\n              schema:\n                type: string\n                default: 'max-age=900' # 15 min cache\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/VideosForXML'\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/videos.xml?filter=local\n            application/rss+xml:\n              schema:\n                $ref: '#/components/schemas/VideosForXML'\n            text/xml:\n              schema:\n                $ref: '#/components/schemas/VideosForXML'\n            application/atom+xml:\n              schema:\n                $ref: '#/components/schemas/VideosForXML'\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: video channel or account not found\n        '406':\n          description: accept header unsupported\n  /plugins:\n    get:\n      tags:\n        - Plugins\n      summary: List plugins\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: pluginType\n          in: query\n          schema:\n            type: integer\n        - name: uninstalled\n          in: query\n          schema:\n            type: boolean\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginResponse'\n  /plugins/available:\n    get:\n      tags:\n        - Plugins\n      summary: List available plugins\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: pluginType\n          in: query\n          schema:\n            type: integer\n        - name: currentPeerTubeEngine\n          in: query\n          schema:\n            type: string\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginResponse'\n        '503':\n          description: plugin index unavailable\n  /plugins/install:\n    post:\n      tags:\n        - Plugins\n      summary: Install a plugin\n      security:\n        - OAuth2:\n          - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - type: object\n                  properties:\n                    npmName:\n                      type: string\n                      example: peertube-plugin-auth-ldap\n                  required:\n                    - npmName\n                  additionalProperties: false\n                - type: object\n                  properties:\n                    path:\n                      type: string\n                  required:\n                    - path\n                  additionalProperties: false\n      responses:\n        '204':\n          description: successful operation\n        '400':\n          description: should have either `npmName` or `path` set\n  /plugins/update:\n    post:\n      tags:\n        - Plugins\n      summary: Update a plugin\n      security:\n        - OAuth2:\n          - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - type: object\n                  properties:\n                    npmName:\n                      type: string\n                      example: peertube-plugin-auth-ldap\n                  required:\n                    - npmName\n                  additionalProperties: false\n                - type: object\n                  properties:\n                    path:\n                      type: string\n                  required:\n                    - path\n                  additionalProperties: false\n      responses:\n        '204':\n          description: successful operation\n        '400':\n          description: should have either `npmName` or `path` set\n        '404':\n          description: existing plugin not found\n  /plugins/uninstall:\n    post:\n      tags:\n        - Plugins\n      summary: Uninstall a plugin\n      security:\n        - OAuth2:\n          - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                npmName:\n                  type: string\n                  description: name of the plugin/theme in its package.json\n                  example: peertube-plugin-auth-ldap\n              required:\n                - npmName\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: existing plugin not found\n  /plugins/{npmName}:\n    get:\n      tags:\n        - Plugins\n      summary: Get a plugin\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - $ref: '#/components/parameters/npmName'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Plugin'\n        '404':\n          description: plugin not found\n  /plugins/{npmName}/settings:\n    put:\n      tags:\n        - Plugins\n      summary: Set a plugin's settings\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - $ref: '#/components/parameters/npmName'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                settings:\n                  type: object\n                  additionalProperties: true\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: plugin not found\n  /plugins/{npmName}/public-settings:\n    get:\n      tags:\n        - Plugins\n      summary: Get a plugin's public settings\n      parameters:\n        - $ref: '#/components/parameters/npmName'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n        '404':\n          description: plugin not found\n  /plugins/{npmName}/registered-settings:\n    get:\n      tags:\n        - Plugins\n      summary: Get a plugin's registered settings\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - $ref: '#/components/parameters/npmName'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n        '404':\n          description: plugin not found\nservers:\n  - url: 'https://peertube2.cpy.re/api/v1'\n    description: Live Test Server (live data - latest nightly version)\n  - url: 'https://peertube3.cpy.re/api/v1'\n    description: Live Test Server (live data - latest RC version)\n  - url: 'https://peertube.cpy.re/api/v1'\n    description: Live Test Server (live data - stable version)\ncomponents:\n  parameters:\n    start:\n      name: start\n      in: query\n      required: false\n      description: Offset used to paginate results\n      schema:\n        type: integer\n        minimum: 0\n    count:\n      name: count\n      in: query\n      required: false\n      description: \"Number of items to return\"\n      schema:\n        type: integer\n        default: 15\n        maximum: 100\n        minimum: 1\n    sort:\n      name: sort\n      in: query\n      required: false\n      description: Sort column\n      schema:\n        type: string\n        example: -createdAt\n    search:\n      name: search\n      in: query\n      required: false\n      description: Plain text search, applied to various parts of the model depending on endpoint\n      schema:\n        type: string\n    searchTarget:\n      name: searchTarget\n      in: query\n      required: false\n      description: \u003e\n        If the administrator enabled search index support, you can override the default search target.\n\n\n        **Warning**: If you choose to make an index search, PeerTube will get results from a third party service.\n        It means the instance may not yet know the objects you fetched. If you want to load video/channel information:\n          * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),\n          then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.\n          After that, you can use the classic REST API endpoints to fetch the complete object or interact with it\n          * If the current user doesn't have the ability to make a remote URI search, then redirect the user on the origin instance or fetch\n          the data from the origin instance API\n      schema:\n        type: string\n        enum:\n          - 'local'\n          - 'search-index'\n    videosSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort videos by criteria\n      schema:\n        type: string\n        enum:\n        - name\n        - -duration\n        - -createdAt\n        - -publishedAt\n        - -views\n        - -likes\n        - -trending\n    videosSearchSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort videos by criteria\n      schema:\n        type: string\n        enum:\n        - name\n        - -duration\n        - -createdAt\n        - -publishedAt\n        - -views\n        - -likes\n        - -match\n    commentsSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort comments by criteria\n      schema:\n        type: string\n        enum:\n        - -createdAt\n        - -totalReplies\n    blacklistsSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort blacklists by criteria\n      schema:\n        type: string\n        enum:\n        - -id\n        - name\n        - -duration\n        - -views\n        - -likes\n        - -dislikes\n        - -uuid\n        - -createdAt\n    usersSearch:\n      name: search\n      in: query\n      required: false\n      description: Plain text search that will match with user usernames or emails\n      schema:\n        type: string\n    usersBlocked:\n      name: blocked\n      in: query\n      required: false\n      description: Filter results down to (un)banned users\n      schema:\n        type: boolean\n    usersSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort users by criteria\n      schema:\n        type: string\n        enum:\n        - -id\n        - -username\n        - -createdAt\n    abusesSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort abuses by criteria\n      schema:\n        type: string\n        enum:\n        - -id\n        - -createdAt\n        - -state\n    videoRedundanciesSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort abuses by criteria\n      schema:\n        type: string\n        enum:\n        - name\n    name:\n      name: name\n      in: path\n      required: true\n      description: The name of the account\n      schema:\n        type: string\n        example: chocobozzz | chocobozzz@example.org\n    id:\n      name: id\n      in: path\n      required: true\n      description: The user id\n      schema:\n        type: integer\n        minimum: 0\n        example: 42\n    idOrUUID:\n      name: id\n      in: path\n      required: true\n      description: The object id or uuid\n      schema:\n        oneOf:\n          - type: integer\n            minimum: 0\n            example: 42\n          - type: string\n            format: uuid\n            example: 9c9de5e8-0a1e-484a-b099-e80766180a6d\n    playlistElementId:\n      name: playlistElementId\n      in: path\n      required: true\n      description: Playlist element id\n      schema:\n        type: integer\n    abuseId:\n      name: abuseId\n      in: path\n      required: true\n      description: Abuse id\n      schema:\n        type: integer\n    abuseMessageId:\n      name: abuseMessageId\n      in: path\n      required: true\n      description: Abuse message id\n      schema:\n        type: integer\n    captionLanguage:\n      name: captionLanguage\n      in: path\n      required: true\n      description: The caption language\n      schema:\n        type: string\n    channelHandle:\n      name: channelHandle\n      in: path\n      required: true\n      description: The video channel handle\n      schema:\n        type: string\n        example: my_username | my_username@example.com\n    subscriptionHandle:\n      name: subscriptionHandle\n      in: path\n      required: true\n      description: The subscription handle\n      schema:\n        type: string\n        example: my_username | my_username@example.com\n    threadId:\n      name: threadId\n      in: path\n      required: true\n      description: The thread id (root comment id)\n      schema:\n        type: integer\n    commentId:\n      name: commentId\n      in: path\n      required: true\n      description: The comment id\n      schema:\n        type: integer\n    categoryOneOf:\n      name: categoryOneOf\n      in: query\n      required: false\n      description: category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get))\n      schema:\n        oneOf:\n        - type: integer\n        - type: array\n          items:\n            type: integer\n      style: form\n      explode: false\n    tagsOneOf:\n      name: tagsOneOf\n      in: query\n      required: false\n      description: tag(s) of the video\n      schema:\n        oneOf:\n        - type: string\n        - type: array\n          items:\n            type: string\n      style: form\n      explode: false\n    tagsAllOf:\n      name: tagsAllOf\n      in: query\n      required: false\n      description: tag(s) of the video, where all should be present in the video\n      schema:\n        oneOf:\n        - type: string\n        - type: array\n          items:\n            type: string\n      style: form\n      explode: false\n    languageOneOf:\n      name: languageOneOf\n      in: query\n      required: false\n      description: language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use `_unknown` to filter on videos that don't have a video language\n      schema:\n        oneOf:\n        - type: string\n        - type: array\n          items:\n            type: string\n      style: form\n      explode: false\n    licenceOneOf:\n      name: licenceOneOf\n      in: query\n      required: false\n      description: licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get))\n      schema:\n        oneOf:\n        - type: integer\n        - type: array\n          items:\n            type: integer\n      style: form\n      explode: false\n    skipCount:\n      name: skipCount\n      in: query\n      required: false\n      description: if you don't need the `total` in the response\n      schema:\n        type: string\n        enum:\n          - 'true'\n          - 'false'\n        default: 'false'\n    nsfw:\n      name: nsfw\n      in: query\n      required: false\n      description: whether to include nsfw videos, if any\n      schema:\n        type: string\n        enum:\n        - 'true'\n        - 'false'\n    filter:\n      name: filter\n      in: query\n      required: false\n      description: \u003e\n        Special filters which might require special rights:\n         * `local` - only videos local to the instance\n         * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)\n         * `all` - all videos, showing private and unlisted videos (requires Admin privileges)\n      schema:\n        type: string\n        enum:\n        - local\n        - all-local\n    subscriptionsUris:\n      name: uris\n      in: query\n      required: true\n      description: list of uris to check if each is part of the user subscriptions\n      schema:\n        type: array\n        items:\n          type: string\n          format: uri\n    npmName:\n      name: npmName\n      in: path\n      required: true\n      description: name of the plugin/theme on npmjs.com or in its package.json\n      schema:\n        type: string\n        example: peertube-plugin-auth-ldap\n  securitySchemes:\n    OAuth2:\n      description: \u003e\n        In the header: *Authorization: Bearer \u003ctoken\\\u003e*\n\n\n        Authenticating via OAuth requires the following steps:\n\n\n        - Have an account with sufficient authorization levels\n\n        - [Generate](https://docs.joinpeertube.org/#/api-rest-getting-started) a\n        Bearer Token\n\n        - Make Authenticated Requests\n      type: oauth2\n      flows:\n        password:\n          tokenUrl: 'https://peertube.example.com/api/v1/users/token'\n          scopes:\n            admin: Admin scope\n            moderator: Moderator scope\n            user: User scope\n  schemas:\n    VideoConstantNumber:\n      properties:\n        id:\n          type: integer\n        label:\n          type: string\n    VideoConstantString:\n      properties:\n        id:\n          type: string\n        label:\n          type: string\n\n    VideoPlaylistPrivacySet:\n      type: integer\n      enum:\n        - 1\n        - 2\n        - 3\n      description: 'The video playlist privacy (Public = `1`, Unlisted = `2`, Private = `3`)'\n    VideoPlaylistPrivacyConstant:\n      properties:\n        id:\n          $ref: '#/components/schemas/VideoPlaylistPrivacySet'\n        label:\n          type: string\n\n    VideoPlaylistTypeSet:\n      type: integer\n      enum:\n        - 1\n        - 2\n      description: 'The video playlist type (Regular = `1`, Watch Later = `2`)'\n    VideoPlaylistTypeConstant:\n      properties:\n        id:\n          $ref: '#/components/schemas/VideoPlaylistTypeSet'\n        label:\n          type: string\n\n    VideoPrivacySet:\n      type: integer\n      enum:\n        - 1\n        - 2\n        - 3\n        - 4\n      description: 'The video privacy (Public = `1`, Unlisted = `2`, Private = `3`, Internal = `4`)'\n    VideoPrivacyConstant:\n      properties:\n        id:\n          $ref: '#/components/schemas/VideoPrivacySet'\n        label:\n          type: string\n\n    NSFWPolicy:\n      type: string\n      enum:\n        - display\n        - blur\n        - do_not_list\n\n    UserRole:\n      type: integer\n      enum:\n        - 0\n        - 1\n        - 2\n      description: 'The user role (Admin = `0`, Moderator = `1`, User = `2`)'\n      example: 2\n\n    VideoStateConstant:\n      properties:\n        id:\n          type: integer\n          enum:\n            - 1\n            - 2\n            - 3\n          description: 'The video state (Published = `1`, to transcode = `2`, to import = `3`)'\n        label:\n          type: string\n\n    AbuseStateSet:\n      type: integer\n      enum:\n        - 1\n        - 2\n        - 3\n      description: 'The abuse state (Pending = `1`, Rejected = `2`, Accepted = `3`)'\n    AbuseStateConstant:\n      properties:\n        id:\n          $ref: '#/components/schemas/AbuseStateSet'\n        label:\n          type: string\n    AbusePredefinedReasons:\n      type: array\n      items:\n        type: string\n        enum:\n        - violentOrAbusive\n        - hatefulOrAbusive\n        - spamOrMisleading\n        - privacy\n        - rights\n        - serverRules\n        - thumbnails\n        - captions\n      example: [spamOrMisleading]\n\n    VideoResolutionConstant:\n      properties:\n        id:\n          type: integer\n          description: 'Video resolution (240, 360, 720 ...)'\n          example: 240\n        label:\n          type: string\n          example: 240p\n    VideoScheduledUpdate:\n      properties:\n        privacy:\n          $ref: '#/components/schemas/VideoPrivacySet'\n        updateAt:\n          type: string\n          format: date\n          description: When to update the video\n      required:\n        - updateAt\n    AccountSummary:\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        displayName:\n          type: string\n        url:\n          type: string\n          format: url\n        host:\n          type: string\n          format: hostname\n        avatar:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/Avatar'\n    VideoChannelSummary:\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        displayName:\n          type: string\n        url:\n          type: string\n          format: url\n        host:\n          type: string\n          format: hostname\n        avatar:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/Avatar'\n    PlaylistElement:\n      properties:\n        position:\n          type: integer\n        startTimestamp:\n          type: integer\n        stopTimestamp:\n          type: integer\n        video:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/Video'\n    VideoFile:\n      properties:\n        magnetUri:\n          type: string\n        resolution:\n          $ref: '#/components/schemas/VideoResolutionConstant'\n        size:\n          type: integer\n          description: 'Video file size in bytes'\n        torrentUrl:\n          type: string\n          format: url\n        torrentDownloadUrl:\n          type: string\n          format: url\n        fileUrl:\n          type: string\n          format: url\n        fileDownloadUrl:\n          type: string\n          format: url\n        fps:\n          type: number\n        metadataUrl:\n          type: string\n          format: url\n    VideoStreamingPlaylists:\n      properties:\n        id:\n          type: integer\n        type:\n          type: integer\n          enum:\n            - 1\n          description: 'Playlist type (HLS = `1`)'\n        playlistUrl:\n          type: string\n          format: url\n        segmentsSha256Url:\n          type: string\n          format: url\n        files:\n          type: array\n          description: 'Video files associated to this playlist. The difference with the root \"files\" property is that these files are fragmented, so they can be used in this streaming playlist (HLS etc)'\n          items:\n            $ref: '#/components/schemas/VideoFile'\n        redundancies:\n          type: array\n          items:\n            type: object\n            properties:\n              baseUrl:\n                type: string\n                format: url\n    VideoInfo:\n      properties:\n        id:\n          type: integer\n        uuid:\n          type: string\n          format: uuid\n          example: 9c9de5e8-0a1e-484a-b099-e80766180a6d\n        name:\n          type: string\n    Video:\n      properties:\n        id:\n          type: integer\n          example: 8\n        uuid:\n          type: string\n          format: uuid\n          example: 9c9de5e8-0a1e-484a-b099-e80766180a6d\n        isLive:\n          type: boolean\n        createdAt:\n          type: string\n          format: date-time\n        publishedAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        originallyPublishedAt:\n          type: string\n          format: date-time\n        category:\n          $ref: '#/components/schemas/VideoConstantNumber'\n        licence:\n          $ref: '#/components/schemas/VideoConstantNumber'\n        language:\n          $ref: '#/components/schemas/VideoConstantString'\n        privacy:\n          $ref: '#/components/schemas/VideoPrivacyConstant'\n        description:\n          type: string\n        duration:\n          type: integer\n          example: 1419\n        isLocal:\n          type: boolean\n        name:\n          type: string\n          example: What is PeerTube?\n        thumbnailPath:\n          type: string\n          example: /static/thumbnails/a65bc12f-9383-462e-81ae-8207e8b434ee.jpg\n        previewPath:\n          type: string\n          example: /lazy-static/previews/a65bc12f-9383-462e-81ae-8207e8b434ee.jpg\n        embedPath:\n          type: string\n          example: /videos/embed/a65bc12f-9383-462e-81ae-8207e8b434ee\n        views:\n          type: integer\n          example: 1337\n        likes:\n          type: integer\n          example: 42\n        dislikes:\n          type: integer\n          example: 7\n        nsfw:\n          type: boolean\n        waitTranscoding:\n          type: boolean\n          nullable: true\n        state:\n          $ref: '#/components/schemas/VideoStateConstant'\n        scheduledUpdate:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/VideoScheduledUpdate'\n        blacklisted:\n          nullable: true\n          type: boolean\n        blacklistedReason:\n          nullable: true\n          type: string\n        account:\n          $ref: '#/components/schemas/AccountSummary'\n        channel:\n          $ref: '#/components/schemas/VideoChannelSummary'\n        userHistory:\n          nullable: true\n          type: object\n          properties:\n            currentTime:\n              type: integer\n    VideoDetails:\n      allOf:\n        - $ref: '#/components/schemas/Video'\n        - type: object\n          properties:\n            descriptionPath:\n              type: string\n            support:\n              type: string\n              description: A text tell the audience how to support the video creator\n              example: Please support my work on \u003cinsert crowdfunding plateform\u003e! \u003c3\n            channel:\n              $ref: '#/components/schemas/VideoChannel'\n            account:\n              $ref: '#/components/schemas/Account'\n            tags:\n              type: array\n              items:\n                type: string\n              example: [flowers, gardening]\n            files:\n              type: array\n              description: 'WebTorrent/raw video files. Can be empty if WebTorrent is disabled on the server. In this case, video files will be in the \"streamingPlaylists[].files\" property'\n              items:\n                $ref: '#/components/schemas/VideoFile'\n            commentsEnabled:\n              type: boolean\n            downloadEnabled:\n              type: boolean\n            trackerUrls:\n              type: array\n              items:\n                type: string\n                format: url\n            streamingPlaylists:\n              type: array\n              items:\n                $ref: '#/components/schemas/VideoStreamingPlaylists'\n    FileRedundancyInformation:\n      properties:\n        id:\n          type: integer\n        fileUrl:\n          type: string\n          format: url\n        strategy:\n          type: string\n          enum:\n            - manual\n            - most-views\n            - trending\n            - recently-added\n        size:\n          type: integer\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        expiresOn:\n          type: string\n          format: date-time\n    VideoRedundancy:\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        url:\n          type: string\n          format: url\n        uuid:\n          type: string\n          format: uuid\n          example: 9c9de5e8-0a1e-484a-b099-e80766180a6d\n        redundancies:\n          type: object\n          properties:\n            files:\n              type: array\n              items:\n                $ref: '#/components/schemas/FileRedundancyInformation'\n            streamingPlaylists:\n              type: array\n              items:\n                $ref: '#/components/schemas/FileRedundancyInformation'\n    VideoImportStateConstant:\n      properties:\n        id:\n          type: integer\n          enum:\n            - 1\n            - 2\n            - 3\n          description: 'The video import state (Pending = `1`, Success = `2`, Failed = `3`)'\n        label:\n          type: string\n          example: Pending\n    VideoImport:\n      properties:\n        id:\n          type: integer\n          example: 2\n        targetUrl:\n          type: string\n          format: url\n          example: https://framatube.org/videos/watch/9c9de5e8-0a1e-484a-b099-e80766180a6d\n        magnetUri:\n          type: string\n          format: uri\n          example: magnet:?xs=https%3A%2F%2Fframatube.org%2Fstatic%2Ftorrents%2F9c9de5e8-0a1e-484a-b099-e80766180a6d-240.torrent\u0026xt=urn:btih:38b4747ff788b30bf61f59d1965cd38f9e48e01f\u0026dn=What+is+PeerTube%3F\u0026tr=wss%3A%2F%2Fframatube.org%2Ftracker%2Fsocket\u0026tr=https%3A%2F%2Fframatube.org%2Ftracker%2Fannounce\u0026ws=https%3A%2F%2Fframatube.org%2Fstatic%2Fwebseed%2F9c9de5e8-0a1e-484a-b099-e80766180a6d-240.mp4\n        torrentName:\n          type: string\n        state:\n          $ref: '#/components/schemas/VideoImportStateConstant'\n        error:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        video:\n          $ref: '#/components/schemas/Video'\n    Abuse:\n      properties:\n        id:\n          type: integer\n          example: 7\n        reason:\n          type: string\n          example: The video is a spam\n        predefinedReasons:\n          $ref: '#/components/schemas/AbusePredefinedReasons'\n        reporterAccount:\n          $ref: '#/components/schemas/Account'\n        state:\n          $ref: '#/components/schemas/AbuseStateConstant'\n        moderationComment:\n          type: string\n          example: Decided to ban the server since it spams us regularly\n        video:\n          type: object\n          properties:\n            id:\n              type: integer\n            name:\n              type: string\n            uuid:\n              type: string\n              format: uuid\n              example: 9c9de5e8-0a1e-484a-b099-e80766180a6d\n        createdAt:\n          type: string\n          format: date-time\n    AbuseMessage:\n      properties:\n        id:\n          type: integer\n        message:\n          type: string\n        byModerator:\n          type: boolean\n        createdAt:\n          type: string\n          format: date-time\n        account:\n          $ref: '#/components/schemas/AccountSummary'\n    VideoBlacklist:\n      properties:\n        id:\n          type: integer\n        videoId:\n          type: integer\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        name:\n          type: string\n        uuid:\n          type: string\n          format: uuid\n          example: 9c9de5e8-0a1e-484a-b099-e80766180a6d\n        description:\n          type: string\n        duration:\n          type: integer\n        views:\n          type: integer\n        likes:\n          type: integer\n        dislikes:\n          type: integer\n        nsfw:\n          type: boolean\n    VideoChannel:\n      properties:\n        displayName:\n          type: string\n        description:\n          type: string\n        isLocal:\n          type: boolean\n        ownerAccount:\n          type: object\n          properties:\n            id:\n              type: integer\n            uuid:\n              type: string\n              format: uuid\n              example: 9c9de5e8-0a1e-484a-b099-e80766180a6d\n    VideoPlaylist:\n      properties:\n        id:\n          type: integer\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        description:\n          type: string\n        uuid:\n          type: string\n          format: uuid\n          example: 9c9de5e8-0a1e-484a-b099-e80766180a6d\n        displayName:\n          type: string\n        isLocal:\n          type: boolean\n        videoLength:\n          type: integer\n        thumbnailPath:\n          type: string\n        privacy:\n          $ref: '#/components/schemas/VideoPlaylistPrivacyConstant'\n        type:\n          $ref: '#/components/schemas/VideoPlaylistTypeConstant'\n        ownerAccount:\n          $ref: '#/components/schemas/AccountSummary'\n        videoChannel:\n          $ref: '#/components/schemas/VideoChannelSummary'\n    VideoComment:\n      properties:\n        id:\n          type: integer\n        url:\n          type: string\n          format: url\n        text:\n          type: string\n        threadId:\n          type: integer\n        inReplyToCommentId:\n          type: integer\n        videoId:\n          type: integer\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        totalRepliesFromVideoAuthor:\n          type: integer\n        totalReplies:\n          type: integer\n        account:\n          $ref: '#/components/schemas/Account'\n    VideoCommentThreadTree:\n      properties:\n        comment:\n          $ref: '#/components/schemas/VideoComment'\n        children:\n          type: array\n          items:\n            $ref: '#/components/schemas/VideoCommentThreadTree'\n    VideoCaption:\n      properties:\n        language:\n          $ref: '#/components/schemas/VideoConstantString'\n        captionPath:\n          type: string\n    Avatar:\n      properties:\n        path:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n    ActorInfo:\n      properties:\n        id:\n          type: integer\n          example: 11\n        name:\n          type: string\n        displayName:\n          type: string\n        host:\n          type: string\n          format: hostname\n        avatar:\n          nullable: true\n          type: object\n          properties:\n            path:\n              type: string\n    Actor:\n      properties:\n        id:\n          type: integer\n          example: 11\n        url:\n          type: string\n          format: url\n        name:\n          type: string\n        host:\n          type: string\n          format: hostname\n        followingCount:\n          type: integer\n        followersCount:\n          type: integer\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        avatar:\n          $ref: '#/components/schemas/Avatar'\n    Account:\n      allOf:\n        - $ref: '#/components/schemas/Actor'\n        - properties:\n            userId:\n              type: string\n              example: 2\n            displayName:\n              type: string\n            description:\n              type: string\n    UserWatchingVideo:\n      properties:\n        currentTime:\n          type: integer\n          description: timestamp within the video, in seconds\n          example: 5\n    ServerConfig:\n      properties:\n        instance:\n          type: object\n          properties:\n            name:\n              type: string\n            shortDescription:\n              type: string\n            defaultClientRoute:\n              type: string\n            isNSFW:\n              type: boolean\n            defaultNSFWPolicy:\n              type: string\n            customizations:\n              type: object\n              properties:\n                javascript:\n                  type: string\n                css:\n                  type: string\n        search:\n          type: object\n          properties:\n            remoteUri:\n              type: object\n              properties:\n                users:\n                  type: boolean\n                anonymous:\n                  type: boolean\n        plugin:\n          type: object\n          properties:\n            registered:\n              type: array\n              items:\n                type: string\n        theme:\n          type: object\n          properties:\n            registered:\n              type: array\n              items:\n                type: string\n        email:\n          type: object\n          properties:\n            enabled:\n              type: boolean\n        contactForm:\n          type: object\n          properties:\n            enabled:\n              type: boolean\n        serverVersion:\n          type: string\n        serverCommit:\n          type: string\n        signup:\n          type: object\n          properties:\n            allowed:\n              type: boolean\n            allowedForCurrentIP:\n              type: boolean\n            requiresEmailVerification:\n              type: boolean\n        transcoding:\n          type: object\n          properties:\n            hls:\n              type: object\n              properties:\n                enabled:\n                  type: boolean\n            webtorrent:\n              type: object\n              properties:\n                enabled:\n                  type: boolean\n            enabledResolutions:\n              type: array\n              items:\n                type: integer\n        import:\n          type: object\n          properties:\n            videos:\n              type: object\n              properties:\n                http:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                torrent:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n        autoBlacklist:\n          type: object\n          properties:\n            videos:\n              type: object\n              properties:\n                ofUsers:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n        avatar:\n          type: object\n          properties:\n            file:\n              type: object\n              properties:\n                size:\n                  type: object\n                  properties:\n                    max:\n                      type: integer\n            extensions:\n              type: array\n              items:\n                type: string\n        video:\n          type: object\n          properties:\n            image:\n              type: object\n              properties:\n                extensions:\n                  type: array\n                  items:\n                    type: string\n                size:\n                  type: object\n                  properties:\n                    max:\n                      type: integer\n            file:\n              type: object\n              properties:\n                extensions:\n                  type: array\n                  items:\n                    type: string\n        videoCaption:\n          type: object\n          properties:\n            file:\n              type: object\n              properties:\n                size:\n                  type: object\n                  properties:\n                    max:\n                      type: integer\n                extensions:\n                  type: array\n                  items:\n                    type: string\n        user:\n          type: object\n          properties:\n            videoQuota:\n              type: integer\n            videoQuotaDaily:\n              type: integer\n        trending:\n          type: object\n          properties:\n            videos:\n              type: object\n              properties:\n                intervalDays:\n                  type: integer\n        tracker:\n          type: object\n          properties:\n            enabled:\n              type: boolean\n        followings:\n          type: object\n          properties:\n            instance:\n              type: object\n              properties:\n                autoFollowIndex:\n                  type: object\n                  properties:\n                    indexUrl:\n                      type: string\n                      format: url\n    ServerConfigAbout:\n      properties:\n        instance:\n          type: object\n          properties:\n            name:\n              type: string\n            shortDescription:\n              type: string\n            description:\n              type: string\n            terms:\n              type: string\n    ServerConfigCustom:\n      properties:\n        instance:\n          type: object\n          properties:\n            name:\n              type: string\n            shortDescription:\n              type: string\n            description:\n              type: string\n            terms:\n              type: string\n            defaultClientRoute:\n              type: string\n            isNSFW:\n              type: boolean\n            defaultNSFWPolicy:\n              type: string\n            customizations:\n              type: object\n              properties:\n                javascript:\n                  type: string\n                css:\n                  type: string\n        theme:\n          type: object\n          properties:\n            default:\n              type: string\n        services:\n          type: object\n          properties:\n            twitter:\n              type: object\n              properties:\n                username:\n                  type: string\n                whitelisted:\n                  type: boolean\n        cache:\n          type: object\n          properties:\n            previews:\n              type: object\n              properties:\n                size:\n                  type: integer\n            captions:\n              type: object\n              properties:\n                size:\n                  type: integer\n        signup:\n          type: object\n          properties:\n            enabled:\n              type: boolean\n            limit:\n              type: integer\n            requiresEmailVerification:\n              type: boolean\n        admin:\n          type: object\n          properties:\n            email:\n              type: string\n              format: email\n        contactForm:\n          type: object\n          properties:\n            enabled:\n              type: boolean\n        user:\n          type: object\n          properties:\n            videoQuota:\n              type: integer\n            videoQuotaDaily:\n              type: integer\n        transcoding:\n          type: object\n          properties:\n            enabled:\n              type: boolean\n            allowAdditionalExtensions:\n              type: boolean\n            allowAudioFiles:\n              type: boolean\n            threads:\n              type: integer\n            resolutions:\n              type: object\n              properties:\n                240p:\n                  type: boolean\n                360p:\n                  type: boolean\n                480p:\n                  type: boolean\n                720p:\n                  type: boolean\n                1080p:\n                  type: boolean\n                2160p:\n                  type: boolean\n            hls:\n              type: object\n              properties:\n                enabled:\n                  type: boolean\n        import:\n          type: object\n          properties:\n            videos:\n              type: object\n              properties:\n                http:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                torrent:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n        autoBlacklist:\n          type: object\n          properties:\n            videos:\n              type: object\n              properties:\n                ofUsers:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n        followers:\n          type: object\n          properties:\n            instance:\n              type: object\n              properties:\n                enabled:\n                  type: boolean\n                manualApproval:\n                  type: boolean\n    Follow:\n      properties:\n        id:\n          type: integer\n        follower:\n          $ref: '#/components/schemas/Actor'\n        following:\n          $ref: '#/components/schemas/Actor'\n        score:\n          type: number\n          description: score reflecting the reachability of the actor, with steps of `10` and a base score of `1000`.\n        state:\n          type: string\n          enum:\n            - pending\n            - accepted\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n\n    PredefinedAbuseReasons:\n      description: Reason categories that help triage reports\n      type: array\n      items:\n        type: string\n        enum:\n        - violentOrAbusive\n        - hatefulOrAbusive\n        - spamOrMisleading\n        - privacy\n        - rights\n        - serverRules\n        - thumbnails\n        - captions\n\n    Job:\n      properties:\n        id:\n          type: integer\n          minimum: 0\n          example: 42\n        state:\n          type: string\n          enum:\n            - active\n            - completed\n            - failed\n            - waiting\n            - delayed\n        type:\n          type: string\n          enum:\n            - activitypub-http-unicast\n            - activitypub-http-broadcast\n            - activitypub-http-fetcher\n            - activitypub-follow\n            - video-file-import\n            - video-transcoding\n            - email\n            - video-import\n            - videos-views\n            - activitypub-refresher\n            - video-redundancy\n        data:\n          type: object\n          additionalProperties: true\n        error:\n          type: object\n          additionalProperties: true\n        createdAt:\n          type: string\n          format: date-time\n        finishedOn:\n          type: string\n          format: date-time\n        processedOn:\n          type: string\n          format: date-time\n    AddUserResponse:\n      properties:\n        user:\n          type: object\n          properties:\n            id:\n              type: integer\n              example: 8\n            account:\n              type: object\n              properties:\n                id:\n                  type: integer\n                  example: 37\n    VideoUploadResponse:\n      properties:\n        video:\n          type: object\n          properties:\n            id:\n              type: integer\n              example: 8\n            uuid:\n              type: string\n              format: uuid\n              example: 9c9de5e8-0a1e-484a-b099-e80766180a6d\n    CommentThreadResponse:\n      properties:\n        total:\n          type: integer\n          example: 1\n        data:\n          type: array\n          maxItems: 100\n          items:\n            $ref: '#/components/schemas/VideoComment'\n    CommentThreadPostResponse:\n      properties:\n        comment:\n          $ref: '#/components/schemas/VideoComment'\n    VideoListResponse:\n      properties:\n        total:\n          type: integer\n          example: 1\n        data:\n          type: array\n          maxItems: 100\n          items:\n            $ref: '#/components/schemas/Video'\n    User:\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        username:\n          type: string\n          description: The user username\n          minLength: 1\n          maxLength: 50\n        email:\n          type: string\n          format: email\n          description: The user email\n        theme:\n          type: string\n          description: Theme enabled by this user\n        emailVerified:\n          type: boolean\n          description: Has the user confirmed their email address?\n        nsfwPolicy:\n          $ref: '#/components/schemas/NSFWPolicy'\n        webtorrentEnabled:\n          type: boolean\n          description: Enable P2P in the player\n        autoPlayVideo:\n          type: boolean\n          description: Automatically start playing the video on the watch page\n        role:\n          $ref: '#/components/schemas/UserRole'\n        roleLabel:\n          type: string\n          enum:\n            - User\n            - Moderator\n            - Administrator\n        videoQuota:\n          type: integer\n          description: The user video quota\n        videoQuotaDaily:\n          type: integer\n          description: The user daily video quota\n        videosCount:\n          type: integer\n        abusesCount:\n          type: integer\n        abusesAcceptedCount:\n          type: integer\n        abusesCreatedCount:\n          type: integer\n        videoCommentsCount:\n          type: integer\n        noInstanceConfigWarningModal:\n          type: boolean\n        noWelcomeModal:\n          type: boolean\n        blocked:\n          type: boolean\n        blockedReason:\n          type: string\n        createdAt:\n          type: string\n        account:\n          $ref: '#/components/schemas/Account'\n        videoChannels:\n          type: array\n          items:\n            $ref: '#/components/schemas/VideoChannel'\n    AddUser:\n      properties:\n        username:\n          type: string\n          description: The user username\n          minLength: 1\n          maxLength: 50\n        password:\n          type: string\n          format: password\n          description: The user password. If the smtp server is configured, you can leave empty and an email will be sent\n          minLength: 6\n          maxLength: 255\n        email:\n          type: string\n          format: email\n          description: The user email\n        videoQuota:\n          type: integer\n          description: The user video quota\n        videoQuotaDaily:\n          type: integer\n          description: The user daily video quota\n        role:\n          $ref: '#/components/schemas/UserRole'\n      required:\n        - username\n        - password\n        - email\n        - videoQuota\n        - videoQuotaDaily\n        - role\n    UpdateUser:\n      properties:\n        id:\n          type: string\n          description: The user id\n        email:\n          type: string\n          format: email\n          description: The updated email of the user\n        videoQuota:\n          type: integer\n          description: The updated video quota of the user\n        videoQuotaDaily:\n          type: integer\n          description: The updated daily video quota of the user\n        role:\n          $ref: '#/components/schemas/UserRole'\n      required:\n        - id\n        - email\n        - videoQuota\n        - videoQuotaDaily\n        - role\n    UpdateMe:\n      properties:\n        password:\n          type: string\n          format: password\n          description: Your new password\n          minLength: 6\n          maxLength: 255\n        email:\n          type: string\n          format: email\n          description: Your new email\n        displayNSFW:\n          type: string\n          description: Your new displayNSFW\n          enum:\n            - 'true'\n            - 'false'\n            - both\n        autoPlayVideo:\n          type: boolean\n          description: Your new autoPlayVideo\n      required:\n        - password\n        - email\n        - displayNSFW\n        - autoPlayVideo\n    GetMeVideoRating:\n      properties:\n        id:\n          type: string\n          description: Id of the video\n        rating:\n          type: number\n          description: Rating of the video\n      required:\n        - id\n        - rating\n    VideoRating:\n      properties:\n        video:\n          $ref: '#/components/schemas/Video'\n        rating:\n          type: number\n          description: 'Rating of the video'\n      required:\n        - video\n        - rating\n    RegisterUser:\n      properties:\n        username:\n          type: string\n          description: The username of the user\n          minLength: 1\n          maxLength: 50\n          pattern: '/^[a-z0-9._]{1,50}$/'\n        password:\n          type: string\n          format: password\n          description: The password of the user\n          minLength: 6\n          maxLength: 255\n        email:\n          type: string\n          format: email\n          description: The email of the user\n        displayName:\n          type: string\n          description: The user display name\n          minLength: 1\n          maxLength: 120\n        channel:\n          type: object\n          properties:\n            name:\n              type: string\n              description: The name for the default channel\n              pattern: '/^[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\\\\-_.:]+$/'\n            displayName:\n              type: string\n              description: The display name for the default channel\n              minLength: 1\n              maxLength: 120\n      required:\n        - username\n        - password\n        - email\n    VideoChannelCreate:\n      properties:\n        name:\n          type: string\n        displayName:\n          type: string\n        description:\n          type: string\n        support:\n          type: string\n          description: 'A text shown by default on all videos of this channel, to tell the audience how to support it'\n          example: Please support my work on \u003cinsert crowdfunding plateform\u003e! \u003c3\n      required:\n        - name\n        - displayName\n    VideoChannelUpdate:\n      properties:\n        displayName:\n          type: string\n        description:\n          type: string\n        support:\n          type: string\n          description: 'A text shown by default on all videos of this channel, to tell the audience how to support it'\n          example: Please support my work on \u003cinsert crowdfunding plateform\u003e! \u003c3\n        bulkVideosSupportUpdate:\n          type: boolean\n          description: 'Update the support field for all videos of this channel'\n\n    MRSSPeerLink:\n      type: object\n      xml:\n        name: 'media:peerLink'\n      properties:\n        href:\n          type: string\n          xml:\n            attribute: true\n        type:\n          type: string\n          enum:\n            - application/x-bittorrent\n          xml:\n            attribute: true\n    MRSSGroupContent:\n      type: object\n      xml:\n        name: 'media:content'\n      properties:\n        url:\n          type: string\n          format: url\n          xml:\n            attribute: true\n        fileSize:\n          type: integer\n          xml:\n            attribute: true\n        type:\n          type: string\n          xml:\n            attribute: true\n        framerate:\n          type: integer\n          xml:\n            attribute: true\n        duration:\n          type: integer\n          xml:\n            attribute: true\n        height:\n          type: integer\n          xml:\n            attribute: true\n        lang:\n          type: string\n          xml:\n            attribute: true\n    VideoCommentsForXML:\n      type: array\n      xml:\n        wrapped: true\n        name: 'channel'\n      items:\n        type: object\n        xml:\n          name: 'item'\n        properties:\n          link:\n            type: string\n            format: url\n          guid:\n            type: string\n          pubDate:\n            type: string\n            format: date-time\n          'content:encoded':\n            type: string\n          'dc:creator':\n            type: string\n    VideosForXML:\n      type: array\n      xml:\n        wrapped: true\n        name: 'channel'\n      items:\n        type: object\n        xml:\n          name: 'item'\n        properties:\n          link:\n            type: string\n            format: url\n            description: video watch page URL\n          guid:\n            type: string\n            description: video canonical URL\n          pubDate:\n            type: string\n            format: date-time\n            description: video publication date\n          description:\n            type: string\n            description: video description\n          'content:encoded':\n            type: string\n            description: video description\n          'dc:creator':\n            type: string\n            description: publisher user name\n          'media:category':\n            type: integer\n            description: video category (MRSS)\n          'media:community':\n            type: object\n            description: see [media:community](https://www.rssboard.org/media-rss#media-community) (MRSS)\n            properties:\n              'media:statistics':\n                type: object\n                properties:\n                  views:\n                    type: integer\n                    xml:\n                      attribute: true\n          'media:embed':\n            type: object\n            properties:\n              url:\n                type: string\n                format: url\n                description: video embed path, relative to the canonical URL domain (MRSS)\n                xml:\n                  attribute: true\n          'media:player':\n            type: object\n            properties:\n              url:\n                type: string\n                format: url\n                description: video watch path, relative to the canonical URL domain (MRSS)\n                xml:\n                  attribute: true\n          'media:thumbnail':\n            type: object\n            properties:\n              url:\n                type: string\n                format: url\n                xml:\n                  attribute: true\n              height:\n                type: integer\n                xml:\n                  attribute: true\n              width:\n                type: integer\n                xml:\n                  attribute: true\n          'media:title':\n            type: string\n            description: see [media:title](https://www.rssboard.org/media-rss#media-title) (MRSS). We only use `plain` titles.\n          'media:description':\n            type: string\n          'media:rating':\n            type: string\n            enum:\n              - nonadult\n              - adult\n            description: see [media:rating](https://www.rssboard.org/media-rss#media-rating) (MRSS)\n          'enclosure':\n            type: object\n            description: main streamable file for the video\n            properties:\n              url:\n                type: string\n                format: url\n                xml:\n                  attribute: true\n              type:\n                type: string\n                enum:\n                  - application/x-bittorrent\n                xml:\n                  attribute: true\n              length:\n                type: integer\n                xml:\n                  attribute: true\n          'media:group':\n            type: array\n            description: list of streamable files for the video. see [media:peerLink](https://www.rssboard.org/media-rss#media-peerlink) and [media:content](https://www.rssboard.org/media-rss#media-content) or  (MRSS)\n            items:\n              anyOf:\n                - $ref: '#/components/schemas/MRSSPeerLink'\n                - $ref: '#/components/schemas/MRSSGroupContent'\n    NotificationSettingValue:\n      type: integer\n      description: \u003e\n        Notification type\n\n        - `0` NONE\n\n        - `1` WEB\n\n        - `2` EMAIL\n      enum:\n        - 0\n        - 1\n        - 3\n    Notification:\n      properties:\n        id:\n          type: integer\n        type:\n          type: integer\n          description: \u003e\n            Notification type, following the `UserNotificationType` enum:\n\n            - `1` NEW_VIDEO_FROM_SUBSCRIPTION\n\n            - `2` NEW_COMMENT_ON_MY_VIDEO\n\n            - `3` NEW_ABUSE_FOR_MODERATORS\n\n            - `4` BLACKLIST_ON_MY_VIDEO\n\n            - `5` UNBLACKLIST_ON_MY_VIDEO\n\n            - `6` MY_VIDEO_PUBLISHED\n\n            - `7` MY_VIDEO_IMPORT_SUCCESS\n\n            - `8` MY_VIDEO_IMPORT_ERROR\n\n            - `9` NEW_USER_REGISTRATION\n\n            - `10` NEW_FOLLOW\n\n            - `11` COMMENT_MENTION\n\n            - `12` VIDEO_AUTO_BLACKLIST_FOR_MODERATORS\n\n            - `13` NEW_INSTANCE_FOLLOWER\n\n            - `14` AUTO_INSTANCE_FOLLOWING\n        read:\n          type: boolean\n        video:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/VideoInfo'\n            - type: object\n              properties:\n                channel:\n                  $ref: '#/components/schemas/ActorInfo'\n        videoImport:\n          nullable: true\n          type: object\n          properties:\n            id:\n              type: integer\n            video:\n              nullable: true\n              $ref: '#/components/schemas/VideoInfo'\n            torrentName:\n              type: string\n              nullable: true\n            magnetUri:\n              type: string\n              format: uri\n              nullable: true\n            targetUri:\n              type: string\n              format: uri\n              nullable: true\n        comment:\n          nullable: true\n          type: object\n          properties:\n            id:\n              type: integer\n            threadId:\n              type: integer\n            video:\n              $ref: '#/components/schemas/VideoInfo'\n            account:\n              $ref: '#/components/schemas/ActorInfo'\n        videoAbuse:\n          nullable: true\n          type: object\n          properties:\n            id:\n              type: integer\n            video:\n              allOf:\n                - $ref: '#/components/schemas/VideoInfo'\n        videoBlacklist:\n          nullable: true\n          type: object\n          properties:\n            id:\n              type: integer\n            video:\n              allOf:\n                - $ref: '#/components/schemas/VideoInfo'\n        account:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/ActorInfo'\n        actorFollow:\n          type: object\n          nullable: true\n          properties:\n            id:\n              type: integer\n            follower:\n              $ref: '#/components/schemas/ActorInfo'\n            state:\n              type: string\n              enum:\n                - pending\n                - accepted\n            following:\n              type: object\n              properties:\n                type:\n                  type: string\n                  enum:\n                    - account\n                    - channel\n                    - instance\n                name:\n                  type: string\n                displayName:\n                  type: string\n                host:\n                  type: string\n                  format: hostname\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n    NotificationListResponse:\n      properties:\n        total:\n          type: integer\n          example: 1\n        data:\n          type: array\n          maxItems: 100\n          items:\n            $ref: '#/components/schemas/Notification'\n    Plugin:\n      properties:\n        name:\n          type: string\n          example: peertube-plugin-auth-ldap\n        type:\n          type: integer\n          description: \u003e\n            - `1`: PLUGIN\n\n            - `2`: THEME\n          enum:\n            - 1\n            - 2\n        latestVersion:\n          type: string\n          example: 0.0.3\n        version:\n          type: string\n          example: 0.0.1\n        enabled:\n          type: boolean\n        uninstalled:\n          type: boolean\n        peertubeEngine:\n          type: string\n          example: 2.2.0\n        description:\n          type: string\n        homepage:\n          type: string\n          format: url\n          example: https://framagit.org/framasoft/peertube/official-plugins/tree/master/peertube-plugin-auth-ldap\n        settings:\n          type: object\n          additionalProperties: true\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n    PluginResponse:\n      properties:\n        total:\n          type: integer\n          example: 1\n        data:\n          type: array\n          maxItems: 100\n          items:\n            $ref: '#/components/schemas/Plugin'\n\n    LiveVideoUpdate:\n      properties:\n        saveReplay:\n          type: boolean\n\n    LiveVideoResponse:\n      properties:\n        rtmpUrl:\n          type: string\n        streamKey:\n          type: string\n          description: RTMP stream key to use to stream into this live video\n        saveReplay:\n          type: boolean\n\n  callbacks:\n    searchIndex:\n      'https://search.example.org/api/v1/search/videos':\n        post:\n          summary: third-party search index MAY be used instead of the local index, if enabled by the instance admin. see `searchTarget`\n          responses:\n            '200':\n              description: successful operation\n              content:\n                application/json:\n                  schema:\n                    $ref: '#/components/schemas/VideoListResponse'\n",
			"canonicalURL": "/github.com/JaimeTR/stardeos@c07fac202dba3fed69aace74157589c21d732be6/-/blob/support/doc/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/JaimeTR/stardeos/blob/c07fac202dba3fed69aace74157589c21d732be6/support/doc/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!str `#/compo...` into ogen.PathItem; yaml: line 1: cannot unmarshal !!str `#/compo...` into ogen.PathItem"
}