{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SE701Team2/Updog"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "backend/specs/swagger.yaml",
			"byteSize": 26530,
			"content": "openapi: 3.0.2\nservers:\n  - url: /api\ninfo:\n  description: |-\n    This is the Updog API documentation based on the OpenAPI 3.0 specification.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io).\n    - [The Updog repository](https://github.com/SE701Team2/Updog)\n  version: 1.0.11\n  title: Updog API - OpenAPI 3.0\n  termsOfService: 'http://swagger.io/terms/'\n  contact:\n    email: 'se701updog@gmail.com'\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: Posts\n    description: Comments and replies from our user\n  - name: User\n    description: Operations about user\npaths:\n  /posts:\n    post:\n      tags:\n        - Posts\n      summary: Create Post\n      description: Adds a new post\n      operationId: createPost\n      requestBody:\n        description: Create a new post\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                text_content:\n                  type: string\n                  example: This is an example\n                parent:\n                  type: integer\n                  example: null\n                newTags:\n                  required: false\n                  type: array\n                  items:\n                    type: string\n                  example: ['dogs', 'cats']\n      responses:\n        '201':\n          description: successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Posts'\n        '401':\n          description: Auth token invalid\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n  '/posts/{postId}':\n    get:\n      tags:\n        - Posts\n      summary: Find post by ID\n      description: Returns a single post\n      operationId: getPosttById\n      parameters:\n        - name: postId\n          in: path\n          description: ID of post to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Posts'\n        '404':\n          description: Post not found\n        '500':\n          description: Internal Server Error\n    put:\n      tags:\n        - Posts\n      summary: Update an existing post\n      description: Update an existing post by Id\n      operationId: modifyPostById\n      parameters:\n        - name: postId\n          in: path\n          description: ID of post to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        description: Update an existent post from user\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                text_content:\n                  type: string\n                usersLiked:\n                  type: integer\n                usersShared:\n                  type: integer\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Posts'\n        '400':\n          description: Update failed\n        '403':\n          description: Invalid author ID\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - Posts\n      summary: Deletes a post\n      description: Delete an existent post by Id\n      operationId: deletePostById\n      parameters:\n        - name: postId\n          in: path\n          description: ID of post to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Message has been deleted\n        '400':\n          description: Failed to update\n        '403':\n          description: Invalid author ID\n        '404':\n          description: Invalid message ID\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n  '/posts/{postId}/like':\n    post:\n      tags:\n        - Posts\n      summary: Like post\n      description: Like a post by their Id\n      operationId: likePost\n      parameters:\n        - name: postId\n          in: path\n          description: ID of post to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '201':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LikedPost'\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Auth token invalid\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - Posts\n      summary: Removes Like from Post\n      description: Deletes an exisiting like from a post\n      operationId: unlikePost\n      parameters:\n        - name: postId\n          in: path\n          description: ID of post to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: The liked post has been deleted\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Auth token invalid\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n  '/posts/{postId}/share':\n    post:\n      tags:\n        - Posts\n      summary: Share post\n      description: Share a post by their Id\n      operationId: sharePostById\n      parameters:\n        - name: postId\n          in: path\n          description: ID of post to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '201':\n          description: Post shared\n        '401':\n          description: Auth token invalid\n        '404':\n          description: Post with that Id does not exist\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - Posts\n      summary: Unshare a Post\n      description: Deletes an exisiting share of a post\n      operationId: unsharePostById\n      parameters:\n        - name: postId\n          in: path\n          description: ID of post to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: The liked post has been deleted\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Auth token invalid\n        '404':\n          description: The post was not shared by the user before\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n  '/posts/{postId}/interactions':\n    get:\n      tags:\n        - Posts\n      summary: Get post interactions\n      description: Gets all users who have liked or shared the post\n      operationId: getInteractedUsers\n      parameters:\n        - name: postId\n          in: path\n          description: ID of post to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                likes:\n                  $ref: '#/components/schemas/User'\n                shares:\n                  $ref: '#/components/schemas/User'\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Auth token invalid\n        '404':\n          description: Post with that Id not found\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n  /users:\n    get:\n      tags:\n        - User\n      summary: Get all user handles\n      description: ''\n      operationId: getAllUserHandles\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  usernames:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        userId:\n                          type: integer\n                        username:\n                          type: string\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Auth token invalid\n        '500':\n          description: Internal Server Error\n    post:\n      tags:\n        - User\n      summary: Create user\n      description: ''\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  example: user1\n                nickname:\n                  type: string\n                  example: IamUser\n                email:\n                  type: string\n                  example: user1@gmail.com\n                password:\n                  type: string\n                  example: userPassword\n      responses:\n        '201':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '409':\n          description: Email has already been taken\n        '500':\n          description: Internal Server Error\n    put:\n      tags:\n        - User\n      summary: Modify user\n      description: This can only be done by the logged in user.\n      operationId: modifyUser\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  example: user1\n                nickname:\n                  type: string\n                  example: IamUser\n                bio:\n                  type: string\n                  example: This is my bio\n                profilePic:\n                  type: string\n                  example: null\n                profileBanner:\n                  type: string\n                  example: null\n      responses:\n        '200':\n          description: The profile has been updated\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Access token invalid\n        '500':\n          description: Internal Server Error\n    delete:\n      tags:\n        - User\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: The user has been deleted\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Access token invalid\n        '500':\n          description: Internal Server Error\n  /users/authenticate:\n    post:\n      tags:\n        - User\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  example: user1@gmail.com\n                password:\n                  type: string\n                  example: userPassword\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: string\n        '401':\n          description: Invalid username/password supplied\n        '500':\n          description: Internal Server Error\n  '/users/{username}':\n    get:\n      tags:\n        - User\n      summary: Get user by their username\n      description: ''\n      operationId: getUserByUsername\n      parameters:\n        - name: username\n          in: path\n          description: 'The username of the user that needs to be fetched.'\n          required: true\n          schema:\n            type: string\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Access token invalid\n        '500':\n          description: Internal Server Error\n  '/users/{username}/follow':\n    get:\n      tags:\n        - User\n      summary: Get users who are following or are followers of this username\n      description: ''\n      operationId: getFollow\n      parameters:\n        - name: username\n          in: path\n          description: 'The username of the user that needs to be fetched.'\n          required: true\n          schema:\n            type: string\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  following:\n                    $ref: '#/components/schemas/User'\n                  followers:\n                    $ref: '#/components/schemas/User'\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Access token invalid\n        '500':\n          description: Internal Server Error\n    post:\n      tags:\n        - User\n      summary: Follow a user\n      description: ''\n      operationId: followUser\n      parameters:\n        - name: username\n          in: path\n          description: 'The username of the user that needs to be fetched.'\n          required: true\n          schema:\n            type: string\n      security:\n        - bearerAuth: []\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Followers'\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Access token invalid\n        '404':\n          description: User not found\n        '409':\n          description: Already following this user\n        '500':\n          description: Internal Server Error\n    delete:\n      tags:\n        - User\n      summary: Unfollow a user\n      description: ''\n      operationId: unfollowUser\n      parameters:\n        - name: username\n          in: path\n          description: 'The username of the user that needs to be fetched.'\n          required: true\n          schema:\n            type: string\n      security:\n        - bearerAuth: []\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Followers'\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Access token invalid\n        '404':\n          description: User not found\n        '500':\n          description: Internal Server Error\n  '/users/{username}/activity':\n    get:\n      tags:\n        - User\n      summary: Get a users activity\n      description: ''\n      operationId: getUserActivity\n      parameters:\n        - name: username\n          in: path\n          description: 'The username of the user that needs to be fetched.'\n          required: true\n          schema:\n            type: string\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  postId:\n                    type: string\n                  timestamp:\n                    type: string\n                    format: date-time\n                  activity:\n                    type: string\n                  post:\n                    type: object\n                  userId:\n                    type: number\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Access token invalid\n        '404':\n          description: User not found\n        '500':\n          description: Internal Server Error\n  /feed:\n    get:\n      tags:\n        - User\n      summary: Get a users feed\n      description: 'This is generated from users this user follows'\n      operationId: getFeed\n      parameters:\n        - name: username\n          in: path\n          description: 'The username of the user that needs to be fetched.'\n          required: true\n          schema:\n            type: string\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  postId:\n                    type: string\n                  timestamp:\n                    type: string\n                    format: date-time\n                  activity:\n                    type: string\n                  post:\n                    type: object\n                  userId:\n                    type: number\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Access token invalid\n        '500':\n          description: Internal Server Error\n  /notifications:\n    get:\n      tags:\n        - User\n      summary: Get a users notifications\n      description: ''\n      operationId: getNotifications\n      parameters:\n        - name: username\n          in: path\n          description: 'The username of the user that needs to be fetched.'\n          required: true\n          schema:\n            type: string\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  type:\n                    type: string\n                  from:\n                    type: string\n                  post:\n                    type: string\n                  timestamp:\n                    type: string\n                    format: date-time\n                  content:\n                    type: string\n        '400':\n          description: Auth token not provided\n        '401':\n          description: Access token invalid\n        '500':\n          description: Internal Server Error\n  /tags:\n    post:\n      tags:\n        - Tags\n      summary: Create tag\n      description: Creates a new Tag\n      operationId: createTag\n      requestBody:\n        description: Create a new Tag\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tagName:\n                  type: string\n                  example: Dogs\n      responses:\n        '200':\n          description: successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Posts'\n      security:\n        - bearerAuth: []\n    get:\n      tags:\n        - Tags\n      summary: Gets all tags\n      description: Gets all Tags in the database\n      operationId: getTags\n      responses:\n        '200':\n          description: successfull operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tags'\n      security:\n        - bearerAuth: []\n  /search:\n    get:\n      tags:\n        - Search\n      summary: Searches for posts, topics, and users\n      description: ''\n      operationId: search\n      parameters:\n        - in: query\n          name: query\n          description: 'The search query.'\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: type\n          description: 'The type of data to search for: top/latest/people.'\n          required: true\n          schema:\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '500':\n          description: Internal Server Error\n  /interests:\n    get:\n      tags:\n        - Interests\n      summary: Returns an array of tags that the user is interested in\n      description: ''\n      operationId: intereests\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  interests:\n                    type: array\n                    items:\n                      type: string\n        '500':\n          description: Internal Server Error\n    post:\n      tags:\n        - Interests\n      summary: Add tags to the user's interests\n      description: ''\n      security:\n        - bearerAuth: []\n      operationId: addInterest\n      requestBody:\n        description: Add tags to the user's interests\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                interests:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '201':\n          description: successful operation\n        '500':\n          description: Internal Server Error\n\n    delete:\n      tags:\n        - Interests\n      summary: Remove tags from the user's interests\n      description: ''\n      security:\n        - bearerAuth: []\n      operationId: removeInterest\n      requestBody:\n        description: Remove tags from the user's interests\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                interests:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '200':\n          description: successful operation\n        '500':\n          description: Internal Server Error\ncomponents:\n  schemas:\n    Posts:\n      x-swagger-router-model: io.swagger.updog.model.Posts\n      properties:\n        text-content:\n          type: string\n          example: 'Hello World!'\n        author:\n          type: integer\n          format: int32\n          example: 2\n        parent:\n          type: integer\n          format: int32\n          example: 5\n        usersLiked:\n          type: integer\n          format: int32\n          example: 71\n        usersShared:\n          type: integer\n          format: int32\n          example: 52\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        likedUsers:\n          type: array\n          xml:\n            name: likedPosts\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/LikedPost'\n        sharedUsers:\n          type: array\n          xml:\n            name: sharedPosts\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/SharedPost'\n      xml:\n        name: posts\n      type: object\n    User:\n      x-swagger-router-model: io.swagger.updog.model.User\n      properties:\n        username:\n          type: string\n          example: theUser\n        email:\n          type: string\n          example: john@email.com\n        password:\n          type: string\n          example: 12345\n        nickname:\n          type: string\n        profilePic:\n          type: string\n        profileBanner:\n          type: string\n        bio:\n          type: string\n        joinedDate:\n          type: integer\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        followed:\n          type: array\n          xml:\n            name: followed\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Followers'\n        follower:\n          type: array\n          xml:\n            name: follower\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Followers'\n        likedPosts:\n          type: array\n          xml:\n            name: likedPosts\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/LikedPost'\n        sharedPosts:\n          type: array\n          xml:\n            wrapped: true\n            name: sharedPosts\n          items:\n            $ref: '#/components/schemas/SharedPost'\n      xml:\n        name: user\n      type: object\n    Attachments:\n      x-swagger-router-model: io.swagger.updog.model.attachments\n      properties:\n        postId:\n          type: integer\n        attachmentLink:\n          type: string\n      type: object\n    Followers:\n      x-swagger-router-model: io.swagger.updog.model.followers\n      properties:\n        followedId:\n          type: integer\n        followerId:\n          type: integer\n      type: object\n    LikedPost:\n      x-swagger-router-model: io.swagger.updog.model.likedpost\n      properties:\n        postId:\n          type: integer\n        userId:\n          type: integer\n      type: object\n    SharedPost:\n      x-swagger-router-model: io.swagger.updog.model.sharedpost\n      properties:\n        postId:\n          type: integer\n        userId:\n          type: integer\n      type: object\n    Tags:\n      x-swagger-router-model: io.swagger.updog.model.tags\n      properties:\n        tagId:\n          type: integer\n        tagName:\n          type: string\n    Interests:\n      type: string\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n",
			"canonicalURL": "/github.com/SE701Team2/Updog@d5b4e88eb23f5dc59f9332cd39be55549930f5cd/-/blob/backend/specs/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/SE701Team2/Updog/blob/d5b4e88eb23f5dc59f9332cd39be55549930f5cd/backend/specs/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:6325: json: unable to unmarshal Go value of type ogen.Spec: spec: json: cannot unmarshal Go value of type ogen.Properties: json: cannot unmarshal JSON boolean into Go value of type []string"
}