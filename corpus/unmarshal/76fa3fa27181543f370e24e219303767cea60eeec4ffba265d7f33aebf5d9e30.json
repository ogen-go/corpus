{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hirokai/virtual-poster"
		},
		"file": {
			"name": "virtual-poster.v1.yaml",
			"size": 0,
			"path": "server/virtual-poster.v1.yaml",
			"byteSize": 102310,
			"content": "openapi: 3.0.0\ninfo:\n  title: virtual-poster\n  version: \"1.0\"\n  contact:\n    name: Hiroyuki Kai\n    email: fullerenec84@gmail.com\n  description: Virtual poster API\n  license:\n    name: GPL or virtual-poster license\nservers:\n  - url: \"http://localhost:3000/api\"\npaths:\n  \"/maps/{roomId}/people\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        description: Room ID\n        required: true\n    get:\n      summary: Get a list of people\n      tags:\n        - people\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  people:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/PersonInMap\"\n                  people_deleted:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                        id:\n                          $ref: \"#/components/schemas/UserId\"\n                      required:\n                        - name\n                        - id\n                required:\n                  - people\n                  - people_deleted\n      operationId: get-maps-roomId-people\n      parameters:\n        - schema:\n            type: boolean\n          in: query\n          name: email\n          description: Return email address of each user. Only valid for app admin and room owner.\n        - schema:\n            type: boolean\n          in: query\n          name: groups\n          description: Return user groups in the room. Only valid for app admin and room owner. Note that this group is different from chat groups\n      description: Get all people in the room. Only returns who entered the room already.\n  \"/people/{userId}\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: userId\n        in: path\n        required: true\n        description: \"\"\n    get:\n      summary: Get information on a user\n      tags:\n        - people\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PersonWithEmail\"\n            application/xml:\n              schema:\n                type: object\n                properties: {}\n      operationId: get-people-userId\n      description: Get a person\n      security:\n        - debugAs: []\n        - debugToken: []\n      parameters:\n        - schema:\n            type: boolean\n          in: query\n          name: email\n    patch:\n      summary: Information on a user\n      operationId: put-people-userId\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  modified:\n                    type: object\n                    properties:\n                      keys:\n                        type: array\n                        items:\n                          type: string\n                      update:\n                        type: object\n                        required:\n                          - id\n                          - last_updated\n                        properties:\n                          id:\n                            type: string\n                          last_updated:\n                            type: number\n                          name:\n                            type: string\n                          email:\n                            type: string\n                    required:\n                      - keys\n                      - update\n                required:\n                  - ok\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n                name:\n                  type: string\n                  minLength: 1\n                avatar:\n                  type: string\n      tags:\n        - people\n      security:\n        - debugAs: []\n        - debugToken: []\n      description: \"Update person info  \"\n    delete:\n      summary: \"\"\n      operationId: delete-people-userId\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      description: Delete the user account\n      tags:\n        - people\n  /people:\n    get:\n      summary: List all users\n      tags:\n        - people\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PersonWithEmail\"\n      operationId: get-people\n      parameters:\n        - schema:\n            type: boolean\n          in: query\n          name: email\n          description: Include email\n          allowEmptyValue: true\n        - $ref: \"#/components/parameters/debug_token\"\n        - $ref: \"#/components/parameters/debug_as\"\n      description: List all users who are visible to the user\n    post:\n      summary: Create a new user\n      operationId: post-people\n      responses:\n        \"200\":\n          description: OK\n      parameters:\n        - $ref: \"#/components/parameters/debug_token\"\n        - $ref: \"#/components/parameters/debug_as\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n                name:\n                  type: string\n                  minLength: 1\n                avatar:\n                  type: string\n                rooms:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/RoomId\"\n                on_conflict:\n                  type: string\n                  enum:\n                    - append\n                    - reject\n                    - replace\n              required:\n                - email\n                - name\n        description: \"\"\n      description: Add new person\n      tags:\n        - people\n      security:\n        - debugAs: []\n        - debugToken: []\n  \"/people_multi/{userIds}\":\n    get:\n      summary: Get information on users\n      tags:\n        - people\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PersonWithEmail\"\n      operationId: \"get-people_multi-:userIds\"\n      description: \"Get information on multiple users at one time  \"\n      parameters:\n        - schema:\n            type: boolean\n          in: query\n          name: email\n          description: Return email address\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: userIds\n        in: path\n        required: true\n        description: |\n          User IDs, concatenated with \"::::\"\n  /maps:\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n    get:\n      summary: Get or create rooms\n      tags:\n        - map\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    numCols:\n                      type: integer\n                      minimum: 0\n                    numRows:\n                      type: integer\n                      minimum: 0\n                    id:\n                      type: string\n                      minLength: 1\n                    name:\n                      type: string\n                      minLength: 1\n                    poster_location_count:\n                      type: integer\n                      minimum: 0\n                    poster_count:\n                      type: integer\n                      minimum: 0\n                    owner:\n                      $ref: \"#/components/schemas/UserId\"\n                    num_people_joined:\n                      type: integer\n                    num_people_with_access:\n                      type: integer\n                    access_codes:\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          code:\n                            type: string\n                          active:\n                            type: boolean\n                          access_granted:\n                            type: array\n                            items:\n                              type: string\n                          timestamp:\n                            type: number\n                        required:\n                          - code\n                          - active\n                          - access_granted\n                          - timestamp\n                    allow_poster_assignment:\n                      type: boolean\n                    move_log:\n                      type: boolean\n                    minimap_visibility:\n                      type: string\n                      enum:\n                        - all_initial\n                        - map_initial\n                        - all_only_visited\n                        - map_only_visited\n                    admins:\n                      type: array\n                      items:\n                        $ref: \"#/components/schemas/UserId\"\n                  required:\n                    - numCols\n                    - numRows\n                    - id\n                    - name\n                    - poster_location_count\n                    - poster_count\n                    - owner\n                    - allow_poster_assignment\n                    - minimap_visibility\n                    - admins\n      operationId: get-maps\n      description: Get a list of rooms\n    post:\n      summary: Create a new room\n      operationId: post-maps-roomId\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  room_id:\n                    type: string\n      description: Create a new map\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                template:\n                  type: string\n                allow_poster_assignment:\n                  type: boolean\n                data:\n                  type: string\n                minimap_visibility:\n                  type: string\n                  enum:\n                    - all_initial\n                    - all_only_visited\n                    - map_initial\n                    - map_only_visited\n              required:\n                - name\n      tags:\n        - map\n  \"/maps/{roomId}\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    get:\n      summary: Get or delete a map\n      tags:\n        - map\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  numCols:\n                    type: integer\n                  numRows:\n                    type: integer\n                  allow_poster_assignment:\n                    type: boolean\n                  name:\n                    type: string\n                  move_log:\n                    type: boolean\n                  minimap_visibility:\n                    type: string\n                    enum:\n                      - all_initial\n                      - map_initial\n                      - all_only_visited\n                      - map_only_visited\n                  access_codes:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        code:\n                          type: string\n                        active:\n                          type: boolean\n                        access_granted:\n                          type: array\n                          items:\n                            type: string\n                        timestamp:\n                          type: number\n                      required:\n                        - code\n                        - active\n                        - access_granted\n                        - timestamp\n                  people_groups:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: string\n                        name:\n                          type: string\n                        description:\n                          type: string\n                        user_count:\n                          type: integer\n                      required:\n                        - id\n                        - name\n                required:\n                  - numCols\n                  - numRows\n                  - allow_poster_assignment\n                  - name\n                  - move_log\n                  - minimap_visibility\n      operationId: get-maps-roomId\n      description: Get room information\n    delete:\n      summary: \"\"\n      operationId: delete-maps-roomId\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                required:\n                  - ok\n      description: Delete an owned map\n      tags:\n        - map\n    patch:\n      summary: Update room settings.\n      operationId: patch-maps-roomId\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      description: Update room settings.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                allow_poster_assignment:\n                  type: boolean\n                access_rules:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      email:\n                        type: string\n                        description: \"This can be regular expression  \"\n                      resource:\n                        type: string\n                      allow:\n                        type: boolean\n                    required:\n                      - email\n                      - allow\n                access_rules_active:\n                  type: boolean\n                minimap_visibility:\n                  type: string\n                  enum:\n                    - all_initial\n                    - map_initial\n                    - all_only_visited\n                    - map_only_visited\n            examples:\n              example-1:\n                value:\n                  publicly_visible: true\n                  requires_access_code: true\n          application/xml:\n            schema:\n              type: object\n              properties: {}\n        description: \"\"\n      tags:\n        - map\n  \"/maps/{roomId}/enter\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    post:\n      summary: Enter a room\n      operationId: post-maps-roomId-enter\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  status:\n                    type: string\n                  public_key:\n                    type: string\n                  socket_url:\n                    type: string\n                  socket_protocol:\n                    type: string\n                    enum:\n                      - Socket.IO\n                      - WebSocket\n                required:\n                  - ok\n      tags:\n        - map\n      security:\n        - debugAs: []\n        - debugToken: []\n      description: Enter a room\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: user_id\n          description: User ID of the person to let enter. Optional\n  \"/maps/{roomId}/chat_groups/{groupId}/join\":\n    post:\n      summary: Join a chat\n      operationId: \"post-maps-:room_id-groups-:group_id-join\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  joinedGroup:\n                    $ref: \"#/components/schemas/ChatGroup\"\n                required:\n                  - ok\n      description: \"Join a chat group. You can only join one chat group at maximum.  \"\n      tags:\n        - chat\n      security:\n        - debugAs: []\n        - debugToken: []\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n          minLength: 1\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: groupId\n        in: path\n        required: true\n  \"/maps/{roomId}/chat_groups/{groupId}/leave\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: groupId\n        in: path\n        required: true\n    post:\n      summary: Leave a chat group\n      operationId: post-maps-roomId-groups-groupId-leave\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  leftGroup:\n                    $ref: \"#/components/schemas/ChatGroup\"\n                required:\n                  - ok\n      description: Leave a chat group.\n      tags:\n        - chat\n      security:\n        - debugAs: []\n        - debugToken: []\n  \"/maps/{roomId}/chat_groups/{groupId}/people\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: groupId\n        in: path\n        required: true\n    post:\n      summary: Add a new person to a chat\n      tags:\n        - chat\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  joinedGroup:\n                    $ref: \"#/components/schemas/ChatGroup\"\n                required:\n                  - ok\n      operationId: get-maps-roomId-groups-groupId-people\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userId:\n                  type: string\n              required:\n                - userId\n      description: Get people of a group in a room\n    delete:\n      summary: \"\"\n      operationId: delete-maps-roomId-groups-groupId-people\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  group_removed:\n                    type: boolean\n                  users:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/UserId\"\n                required:\n                  - ok\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userId:\n                  type: string\n      tags:\n        - chat\n      description: \"Kick out a member from chat  \"\n  \"/maps/{roomId}/chat_groups\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    post:\n      summary: Make a new chat group\n      tags:\n        - chat\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  group:\n                    $ref: \"#/components/schemas/ChatGroup\"\n                required:\n                  - ok\n      operationId: post-maps-roomId-groups\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                fromUser:\n                  $ref: \"#/components/schemas/UserId\"\n                toUsers:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/UserId\"\n              required:\n                - fromUser\n                - toUsers\n      description: Create a new chat group\n    get:\n      summary: List members of a chat group\n      operationId: get-maps-roomId-groups\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ChatGroup\"\n      description: List members of a chat group\n      tags:\n        - chat\n      security:\n        - debugAs: []\n        - debugToken: []\n  /chat_groups:\n    get:\n      summary: Get chat groups\n      tags:\n        - chat\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ChatGroup\"\n      operationId: get-chat-groups\n      description: Get chat groups (Return type stub)\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n  \"/maps/{roomId}/people/{userId}/chat_groups\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: userId\n        in: path\n        required: true\n    get:\n      summary: Get a group the user belongs to.\n      tags:\n        - chat\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ChatGroup\"\n      operationId: get-maps-roomId-people-userId-groups\n      description: Get a chat group of the user in a room\n  \"/maps/{roomId}/comments\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    get:\n      summary: Get all chat comments and events in the room\n      tags:\n        - chat\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - $ref: \"#/components/schemas/ChatComment\"\n                    - $ref: \"#/components/schemas/ChatEvent\"\n      operationId: get-maps-roomId-comments\n      description: Get all comments (that are visible to a user) in the room.\n  \"/posters/{posterId}/comments/{commentId}\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: posterId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: commentId\n        in: path\n        required: true\n    patch:\n      summary: Poster comment\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  comment:\n                    $ref: \"#/components/schemas/ChatComment\"\n                required:\n                  - ok\n      operationId: patch-posters-posterId-comments-commentId\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                comment:\n                  type: string\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      description: Update poster comment\n      parameters: []\n    delete:\n      summary: Delete a poster comment\n      operationId: delete-posters-posterId-comments-commentId\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      description: Delete a poster comment\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n  \"/comments/{commentId}\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: commentId\n        in: path\n        required: true\n    patch:\n      summary: Edit a comment\n      tags:\n        - chat\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  comment:\n                    $ref: \"#/components/schemas/CommentEncrypted\"\n                  error:\n                    type: string\n                required:\n                  - ok\n      operationId: patch-comments-commentId\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                comments:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/CommentEncrypted\"\n      description: Edit a comment\n    delete:\n      summary: Delete a comment\n      operationId: delete-comments-commentId\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      description: Delete a comment\n      tags:\n        - chat\n      security:\n        - debugAs: []\n        - debugToken: []\n  \"/maps/{roomId}/people/{userId}/poster\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: userId\n        in: path\n        required: true\n    get:\n      summary: Get a poster of a user in a room\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: string\n                  poster:\n                    type: string\n      operationId: get-maps-roomId-people-userId-poster\n      description: \"Get a poster of the user in the room  \"\n  \"/people/{userId}/posters\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: userId\n        in: path\n        required: true\n    get:\n      summary: Get all posters of the user\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  posters:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Poster\"\n      operationId: get-people-userId-posters\n      description: Get all poster of the user\n  \"/maps/{roomId}/people/{userId}/poster/file\":\n    post:\n      summary: Upload a poster file\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      operationId: \"post-maps-:roomId-people-:userId-poster-file\"\n      description: Upload a poster file\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties: {}\n        description: Image file (PNG or PDF).\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: userId\n        in: path\n        required: true\n  \"/posters/{posterId}/file\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: posterId\n        in: path\n        required: true\n    get:\n      summary: Get a poster file\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/octet-stream:\n              schema:\n                type: object\n                properties: {}\n      operationId: get-posters-posterId-file\n      description: Get a poster file\n      parameters:\n        - schema:\n            type: integer\n          in: query\n          name: timestamp\n          description: \"\"\n    post:\n      summary: Upload a poster file\n      operationId: post-posters-posterId-file\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  poster:\n                    $ref: \"#/components/schemas/Poster\"\n                required:\n                  - ok\n      description: Upload a poster file\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n    delete:\n      summary: Delete a poster file\n      operationId: delete-posters-posterId-file\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  poster:\n                    $ref: \"#/components/schemas/Poster\"\n                  error:\n                    type: string\n                required:\n                  - ok\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      description: Delete a poster file\n  \"/posters/{posterId}/comments\":\n    post:\n      summary: Post a comment on a poster\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                required:\n                  - ok\n      operationId: \"post-maps-:roomId-posters-:posterId-comments\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  $ref: \"#/components/schemas/UserId\"\n                comment:\n                  type: string\n      description: Add a comment on a poster\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: posterId\n        in: path\n        required: true\n    get:\n      summary: Get comments on a poster\n      operationId: get-posters-posterId-comments\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PosterCommentDecrypted\"\n      tags:\n        - poster\n      description: Get comments on a poster\n  /posters:\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n    get:\n      summary: Get all posters\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Poster\"\n      operationId: get-posters\n      description: Only for admin\n  \"/maps/{roomId}/posters\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    get:\n      summary: Get all posters in a room\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Poster\"\n      operationId: get-maps-roomId-posters\n      description: Get all posters in a room\n  /id_token:\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n    post:\n      summary: Submit ID token\n      tags:\n        - auth\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  user_id:\n                    $ref: \"#/components/schemas/UserId\"\n                  admin:\n                    type: boolean\n                  public_key:\n                    type: string\n                  debug_token:\n                    type: string\n                  registered:\n                    type: string\n                    enum:\n                      - can_register\n                      - registered\n                  name:\n                    type: string\n                  updated:\n                    type: boolean\n                  token_actual:\n                    type: string\n                required:\n                  - ok\n                  - updated\n      operationId: post-id_token\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                debug_from:\n                  type: string\n                force:\n                  type: boolean\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: debug_as\n        - schema:\n            type: string\n          in: query\n          name: debug_token\n      description: Register Firebase Auth ID token\n  /ping:\n    get:\n      summary: Ping\n      tags:\n        - misc\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n                pattern: pong\n                default: pong\n      operationId: get-ping\n      description: \"Return pong. Used for health check, etc.  \"\n  /socket_url:\n    get:\n      summary: Get socket URL\n      tags:\n        - misc\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  socket_url:\n                    type: string\n      operationId: get-socket_url\n      description: \"Get the URL of a socket server  \"\n  /public_key:\n    get:\n      summary: Get my public key\n      tags:\n        - misc\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  public_key:\n                    type: string\n                required:\n                  - ok\n      operationId: get-public_key\n      description: Get my public key\n    post:\n      summary: Post my public key\n      operationId: post-public_key\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                required:\n                  - ok\n      description: Post my public key\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                key:\n                  type: string\n                force:\n                  type: boolean\n              required:\n                - key\n      tags:\n        - misc\n      security:\n        - debugAs: []\n        - debugToken: []\n  /logout:\n    post:\n      summary: Logout\n      tags:\n        - auth\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                required:\n                  - ok\n      operationId: post-logout\n      description: Logout from the app and remove cookie\n  \"/maps/{roomId}/poster_slots/{posterNumber}\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: posterNumber\n        in: path\n        required: true\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n    post:\n      summary: Take a poster slot\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  suggested_message:\n                    type: string\n                  allowed_regions:\n                    type: array\n                    items:\n                      type: array\n                      items:\n                        type: array\n                        items:\n                          type: number\n                required:\n                  - ok\n      operationId: post-maps-roomId-take_slot-posterLocation\n      description: Take a poster slot. The poster title and user ID can be optionally passed.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                user_id:\n                  type: string\n    delete:\n      summary: \"\"\n      operationId: delete-maps-roomId-poster_slot-posterNumber\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n      description: \"Release a poster slot the user reserved  \"\n      parameters: []\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n  \"/maps/{roomId}/poster_slots_multi\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    post:\n      summary: Assign posters in bulk\n      tags:\n        - poster\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  added:\n                    type: array\n                    items:\n                      type: number\n                  error_entries:\n                    type: array\n                    items:\n                      type: number\n                required:\n                  - ok\n      operationId: post-maps-roomId-posters_multi\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                posters:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      poster_number:\n                        type: string\n                      user:\n                        $ref: \"#/components/schemas/UserId\"\n                      title:\n                        type: string\n                    required:\n                      - poster_number\n                      - user\n              required:\n                - posters\n      description: Assign poster locations in bulk\n  /latency_report:\n    post:\n      summary: Submit a latency report\n      tags:\n        - misc\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                required:\n                  - ok\n      operationId: post-latency_report\n      description: Submit a latency report. Used for performance metrics.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: object\n                properties:\n                  url:\n                    type: string\n                  method:\n                    type: string\n                    enum:\n                      - GET\n                      - POST\n                      - PATCH\n                      - PUT\n                      - DELETE\n                      - HEAD\n                      - OPTIONS\n                      - LINK\n                      - UNLINK\n                  latency:\n                    type: number\n                  timestamp:\n                    type: integer\n        description: \"\"\n  /register:\n    post:\n      summary: Register a user\n      tags:\n        - people\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  user:\n                    $ref: \"#/components/schemas/PersonWithEmail\"\n                  error:\n                    type: string\n                required:\n                  - ok\n      operationId: post-register\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n                name:\n                  type: string\n                access_code:\n                  type: string\n              required:\n                - email\n                - name\n                - access_code\n      description: \"Register a new user from their web browser  \"\n  /blind_sign/key_pair:\n    get:\n      summary: Get a key pair for blind signature\n      tags:\n        - misc\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  \"N\":\n                    type: string\n                  E:\n                    type: string\n                required:\n                  - \"N\"\n                  - E\n      operationId: get-blind_sign-key_pair\n      description: Get a key pair for blind signature.\n  /blind_sign/sign:\n    post:\n      summary: Sign a message with blind signature\n      tags:\n        - misc\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  signed:\n                    type: string\n                required:\n                  - ok\n      operationId: post-blind_sign-sign\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                blinded:\n                  type: string\n              required:\n                - blinded\n      description: Blind sign a message\n  /blind_sign/verify:\n    get:\n      summary: Verify blind signature\n      tags:\n        - misc\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                required:\n                  - ok\n      operationId: get-blind_sign-verify\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: unblinded\n        - schema:\n            type: string\n          in: query\n          name: message\n      description: \"Verify blind signature  \"\n  \"/maps/{roomId}/chat_groups/{groupId}/comments\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: groupId\n        in: path\n        required: true\n    post:\n      summary: Send a comment to a chat group\n      operationId: post-maps-roomId-comments\n      responses:\n        \"200\":\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: \"#/components/schemas/CommentEncrypted\"\n        description: \"\"\n      description: Post a comment in a room\n      tags:\n        - chat\n      security:\n        - debugAs: []\n        - debugToken: []\n  \"/maps/{roomId}/posters/{posterId}/approach\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: posterId\n        in: path\n        required: true\n    post:\n      summary: Approach the poster\n      tags:\n        - map\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n      operationId: post-maps-roomId-posters-posterId-approach\n      description: Approach a poster by walking.\n  \"/people/{userId}/access_code\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: userId\n        in: path\n        required: true\n    post:\n      summary: Post an access code\n      tags:\n        - misc\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  added:\n                    type: array\n                    items:\n                      type: string\n                  primary_room:\n                    type: string\n                required:\n                  - ok\n      operationId: post-people-userId-access_code\n      description: \"Post an access code for rooms, etc.\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                access_code:\n                  type: string\n              required:\n                - access_code\n  \"/posters/{posterId}\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: posterId\n        in: path\n        required: true\n    patch:\n      summary: Update poster info\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n      operationId: patch-posters-posterId\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                access_log:\n                  type: boolean\n                author_online_only:\n                  type: boolean\n      description: Update poster info.\n  \"/comments/{commentId}/reply\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: commentId\n        in: path\n        required: true\n    post:\n      summary: Add a reply to a comment\n      tags:\n        - chat\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      operationId: post-comments-commentId-reply\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: \"#/components/schemas/CommentEncrypted\"\n      description: \"Add a comment reply  \"\n  \"/posters/{posterId}/comments/{commentId}/reply\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: posterId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: commentId\n        in: path\n        required: true\n    post:\n      summary: Post a reply to a poster comment\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                required:\n                  - ok\n      operationId: post-posters-posterId-comments-commentId-reply\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                text:\n                  type: string\n              required:\n                - text\n  \"/maps/{roomId}/posters/{posterId}/enter\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: posterId\n        in: path\n        required: true\n    post:\n      summary: Start viewing a poster\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  image_allowed:\n                    type: boolean\n                  image_url:\n                    type: string\n                required:\n                  - ok\n      operationId: post-maps-roomId-posters-posterId-enter\n      description: \"Start viewing a poster. After this, the user can get poster image and comments.  \"\n  \"/maps/{roomId}/posters/{posterId}/leave\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: posterId\n        in: path\n        required: true\n    post:\n      summary: Start viewing a poster\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                required:\n                  - ok\n      operationId: post-maps-roomId-posters-posterId-leave\n      description: \"Finish viewing a poster. After this, the user cannot get comments until they enter it again.  \"\n  \"/maps/{roomId}/posters/{posterId}/history\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: posterId\n        in: path\n        required: true\n    get:\n      summary: Get a view history of a poster\n      tags:\n        - poster\n      security:\n        - debugAs: []\n        - debugToken: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    user_id:\n                      type: string\n                    joined_time:\n                      type: number\n                    left_time:\n                      type: number\n                    last_active:\n                      type: number\n                  required:\n                    - user_id\n                    - joined_time\n      operationId: get-maps-roomId-posters-posterId-history\n      description: \"Get a view history of a poster. Only when the poster author and/or administrator enables logging, it has a public record.\"\n  \"/people/{userId}/comments\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: userId\n        in: path\n        required: true\n    get:\n      summary: Export all comment logs\n      tags:\n        - chat\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - $ref: \"#/components/schemas/ChatComment\"\n                    - $ref: \"#/components/schemas/ChatEvent\"\n      operationId: get-people-userId-comments\n      description: \"Export all comment logs  \"\n  \"/maps/{roomId}/leave\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    post:\n      summary: Leave a map\n      tags:\n        - map\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                required:\n                  - ok\n      operationId: post-maps-roomId-leave\n      description: Leave a map. Poster viewing and group chat will also be finished.\n  /debug_token:\n    get:\n      summary: Get a debug token\n      tags:\n        - auth\n      operationId: get-debug_token\n      description: Get a debug token. Only for admin\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  debug_token:\n                    type: string\n                required:\n                  - debug_token\n          description: OK\n  \"/posters/{posterId}/file_url\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: posterId\n        in: path\n        required: true\n    get:\n      summary: Get a poster image URL.\n      tags:\n        - poster\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  url:\n                    type: string\n                  ok:\n                    type: boolean\n                required:\n                  - ok\n      operationId: get-maps-roomId-posters-posterId-image_url\n      security:\n        - debugAs: []\n        - debugToken: []\n      description: \"Get a signed URL of   a poster image. This is only allowed when the user is viewing poster.  \"\n  \"/maps/{roomId}/access_code/{accessCode}/renew\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: accessCode\n        in: path\n        required: true\n    post:\n      summary: Renew access code\n      tags:\n        - map\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  active:\n                    type: boolean\n                required:\n                  - ok\n      operationId: post-maps-roomId-access_code-renew\n      description: \"Renew access code.  \"\n  \"/maps/{roomId}/people/{userId}\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: userId\n        in: path\n        required: true\n    delete:\n      summary: Delete user access from room\n      tags:\n        - people\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      operationId: delete-maps-roomId-people-userId\n      description: Delete person's room access\n    patch:\n      summary: \"\"\n      operationId: patch-maps-roomId-people-userId\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                role:\n                  type: string\n                  enum:\n                    - admin\n                    - user\n              required:\n                - role\n    get:\n      summary: Get person info in room\n      operationId: get-maps-roomId-people-userId\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PersonInMap\"\n      tags:\n        - people\n        - map\n      description: Get person info in room. It includes person stats.\n  \"/maps/{roomId}/access_code\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    post:\n      summary: Create a new access code\n      operationId: post-maps-roomId-access_code\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  access_code:\n                    type: object\n                    properties:\n                      code:\n                        type: string\n                      access_granted:\n                        type: array\n                        items:\n                          type: string\n                      active:\n                        type: boolean\n                      timestamp:\n                        type: number\n                    required:\n                      - code\n                      - access_granted\n                      - active\n                      - timestamp\n      description: Create a new access code\n      tags:\n        - auth\n        - map\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                access_granted:\n                  type: array\n                  items:\n                    type: string\n                active:\n                  type: boolean\n  \"/maps/{roomId}/access_code/{accessCode}\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: accessCode\n        in: path\n        required: true\n    patch:\n      summary: Update access code property\n      tags:\n        - map\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n      operationId: patch-maps-roomId-access_code-accessCode\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                active:\n                  type: boolean\n                access_granted:\n                  type: array\n                  items:\n                    type: string\n    delete:\n      summary: Delete room access code\n      operationId: delete-maps-roomId-access_code-accessCode\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      description: \"Delete room access code  \"\n  \"/maps/{roomId}/posters/refresh_files\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    post:\n      summary: Refresh files\n      tags:\n        - poster\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      operationId: post-maps-roomId-posters-refresh_files\n      description: \"Refresh file_uploaded flags by actual exitence of files  \"\n  \"/maps/{roomId}/people_multi\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    post:\n      summary: Add users to a map\n      tags:\n        - people\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  added:\n                    type: array\n                    items:\n                      type: string\n                  error_entries:\n                    type: array\n                    items:\n                      type: string\n                required:\n                  - ok\n      operationId: post-maps-roomId-people_multi\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                people:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      email:\n                        type: string\n                      assign_position:\n                        type: boolean\n                      groups:\n                        type: array\n                        items:\n                          type: string\n                    required:\n                      - email\n      description: Add users to a map.\n  \"/maps/{roomId}/people_allowed\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    get:\n      summary: Get people that have access to room\n      tags:\n        - map\n        - people\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  people:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        email:\n                          type: string\n                        groups:\n                          type: array\n                          items:\n                            type: string\n                      required:\n                        - email\n                        - groups\n                  with_id:\n                    type: boolean\n                required:\n                  - ok\n                  - people\n                  - with_id\n      operationId: get-maps-roomId-people_allowed\n      description: Get the list of people who have access. They don't necessarily have to be registered (with user ID).\n    post:\n      summary: Give a person access to room\n      operationId: post-maps-roomId-people_allowed\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n              required:\n                - email\n      description: \"Give the user, which is specified by email, access to the room.\"\n      tags:\n        - map\n        - people\n  \"/maps/{roomId}/people_allowed/{email}\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: email\n        in: path\n        required: true\n    delete:\n      summary: Delete user access by email\n      tags:\n        - people\n        - map\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      operationId: delete-maps-roomId-people_allowed-email\n      description: \"Delete user access by email. The user can be just email stub who are not registered, and does not necessarily have an user ID.\"\n    patch:\n      summary: Update people groups the user belongs to\n      operationId: patch-maps-roomId-people_allowed-email\n      responses:\n        \"200\":\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                groups:\n                  type: array\n                  items:\n                    type: string\n                add_groups:\n                  type: array\n                  items:\n                    type: string\n                remove_groups:\n                  type: array\n                  items:\n                    type: string\n        description: \"\"\n      description: \"Update people groups the user belongs to. This applies to the email address of (possibly not-yet-existing) account.  \"\n      tags:\n        - people\n        - map\n  \"/comments/{commentId}/read\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: commentId\n        in: path\n        required: true\n    post:\n      summary: Tell the server that the message is read\n      tags:\n        - chat\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      operationId: post-comments-commentId-read\n      description: Tell the server that the message is read\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                read:\n                  type: boolean\n              required:\n                - read\n  \"/maps/{roomId}/notifications\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    get:\n      summary: Get notifications\n      tags:\n        - map\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/NotificationWithEmail\"\n      operationId: get-maps-roomId-notifications\n      description: Get all notifications in the room. Room or site admins only.\n  \"/maps/{roomId}/reset_cache\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    post:\n      summary: Reset map cache on Redis\n      tags:\n        - map\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      operationId: post-maps-roomId-reset_cache\n  \"/posters/{posterId}/file_upload_url\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: posterId\n        in: path\n        required: true\n    get:\n      summary: Get a URL for uploading a poster file on S3\n      tags: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                  url:\n                    type: string\n                  target:\n                    type: string\n                    enum:\n                      - s3\n                      - api_server\n                required:\n                  - ok\n      operationId: get-posters-posterId-file_upload_url\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: mime_type\n          required: true\n  \"/posters/{posterId}/file_upload_done\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: posterId\n        in: path\n        required: true\n    post:\n      summary: Notify the server completing the upload\n      tags: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n      operationId: post-posters-posterId-file_upload_done\n      description: \"Notify the server completion of upload  \"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                mime_type:\n                  type: string\n              required:\n                - mime_type\n  \"/maps/{roomId}/cells\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n    patch:\n      summary: Modify map layout\n      tags:\n        - map\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      operationId: patch-maps-roomId-cells\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                changes:\n                  type: array\n                  items: {}\n                message:\n                  type: string\n      description: Modify map layout\n    put:\n      summary: Replace all map cells at once\n      operationId: put-maps-roomId-cells\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      description: Replace all map cells at once\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                data:\n                  type: string\n                message:\n                  type: string\n              required:\n                - data\n      tags:\n        - map\n    get:\n      summary: Get map cells\n      operationId: get-maps-roomId-cells\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  numCols:\n                    type: integer\n                  numRows:\n                    type: integer\n                  cells:\n                    type: array\n                    required: true\n                    items:\n                      type: array\n                      required: true\n                      items:\n                        $ref: \"#/components/schemas/Cell\"\n                        required: true\n                required:\n                  - numCols\n                  - numRows\n                  - cells\n      tags:\n        - map\n      description: Get map layout of the room\n  \"/maps/{roomId}/people_groups\":\n    parameters:\n      - $ref: \"#/components/parameters/debug_token\"\n      - $ref: \"#/components/parameters/debug_as\"\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n        description: Room ID\n    post:\n      summary: Add a people group\n      tags:\n        - people\n        - map\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      operationId: post-maps-roomId-people_groups\n      description: \"Add a people group placeholder.  \"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                groups:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      description:\n                        type: string\n                    required:\n                      - name\n              required:\n                - groups\n      parameters: []\n  \"/gen_id/{entity}\":\n    parameters:\n      - schema:\n          type: string\n          enum:\n            - comment\n            - map_cell\n            - notification\n            - chat_group\n            - user_group\n            - poster\n            - room\n            - user\n        name: entity\n        in: path\n        required: true\n    get:\n      summary: Generate a new ID\n      tags:\n        - misc\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n      operationId: get-gen_id-entity\n      description: Generate a new ID.\n  \"/maps/{roomId}/notifications/{notificationId}\":\n    parameters:\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: notificationId\n        in: path\n        required: true\n    delete:\n      summary: Force delete notification\n      tags:\n        - notification\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n                  error:\n                    type: string\n                required:\n                  - ok\n      operationId: delete-maps-roomId-notifications-notificationId\n      description: Force delete notification\n  \"/maps/{roomId}/people/{userId}/notifications\":\n    parameters:\n      - schema:\n          type: string\n        name: roomId\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: userId\n        in: path\n        required: true\n    get:\n      summary: Get notifications for the user in a room\n      tags:\n        - notification\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Notification\"\n      operationId: get-maps-roomId-people-userId-notifications\n      description: \"Get notifications for the user in a room  \"\ncomponents:\n  parameters:\n    debug_token:\n      in: query\n      name: debug_token\n      required: false\n      schema:\n        type: string\n      description: Debug token\n    debug_as:\n      in: query\n      name: debug_as\n      required: false\n      schema:\n        type: string\n      description: Debug as a user\n  schemas:\n    Person:\n      title: Person\n      type: object\n      description: Person\n      x-examples: {}\n      x-tags:\n        - types\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        last_updated:\n          type: integer\n        public_key:\n          type: string\n        role:\n          type: string\n          enum:\n            - owner\n            - admin\n            - user\n      required:\n        - id\n        - name\n        - last_updated\n    PersonWithEmail:\n      title: PersonWithEmail\n      type: object\n      description: Person with email\n      x-examples:\n        example-1: {}\n      x-tags:\n        - types\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        last_updated:\n          type: integer\n        email:\n          type: string\n          format: email\n        public_key:\n          type: string\n        stats:\n          $ref: \"#/components/schemas/PersonStat\"\n        profiles:\n          type: object\n          additionalProperties:\n            type: object\n            properties:\n              last_updated:\n                type: integer\n              content:\n                type: string\n              metadata:\n                type: object\n            required:\n              - last_updated\n              - content\n      required:\n        - id\n        - name\n        - last_updated\n        - stats\n        - profiles\n    Cell:\n      title: Cell\n      type: object\n      x-tags:\n        - types\n      description: Map cell\n      properties:\n        id:\n          type: string\n        x:\n          type: integer\n        \"y\":\n          type: integer\n        kind:\n          type: string\n          enum:\n            - grass\n            - wall\n            - water\n            - poster\n            - poster_seat\n            - mud\n        open:\n          type: boolean\n        poster_number:\n          type: string\n        custom_image:\n          type: string\n        link_url:\n          type: string\n          format: uri\n        visited:\n          type: string\n          enum:\n            - visited\n            - seen\n      required:\n        - id\n        - x\n        - \"y\"\n        - kind\n        - open\n    ChatGroup:\n      title: ChatGroup\n      type: object\n      description: Chat group\n      x-tags:\n        - types\n      properties:\n        id:\n          $ref: \"#/components/schemas/ChatGroupId\"\n        room:\n          $ref: \"#/components/schemas/RoomId\"\n        users:\n          type: array\n          items:\n            $ref: \"#/components/schemas/UserId\"\n        color:\n          type: string\n        kind:\n          type: string\n          enum:\n            - poster\n            - people\n        last_updated:\n          type: number\n      required:\n        - id\n        - room\n        - users\n        - color\n        - kind\n        - last_updated\n    UserId:\n      type: string\n      title: UserId\n      minLength: 1\n      pattern: '[\\w_-]+'\n      maxLength: 15\n      x-tags:\n        - types\n    PosterId:\n      type: string\n      title: PosterId\n      minLength: 1\n      pattern: '[\\w_-]+'\n      maxLength: 15\n      x-tags:\n        - types\n      description: \"\"\n    NotificationId:\n      type: string\n      title: NotificationId\n      minLength: 1\n      pattern: 'F[\\w_-]+'\n      maxLength: 15\n      x-tags:\n        - types\n    ChatGroupId:\n      type: string\n      title: ChatGroupID\n      x-tags:\n        - types\n    RoomId:\n      type: string\n      title: RoomId\n      minLength: 1\n      x-tags:\n        - types\n    PosterCommentDecrypted:\n      title: PosterCommentDecrypted\n      type: object\n      description: Poster comment object\n      x-tags:\n        - types\n      properties:\n        id:\n          type: string\n        timestamp:\n          type: integer\n        last_updated:\n          type: integer\n        room:\n          $ref: \"#/components/schemas/RoomId\"\n        x:\n          type: integer\n          minimum: 0\n        \"y\":\n          type: integer\n          minimum: 0\n        person:\n          $ref: \"#/components/schemas/UserId\"\n        text_decrypted:\n          type: string\n        reply_to:\n          type: string\n        poster:\n          $ref: \"#/components/schemas/PosterId\"\n      required:\n        - id\n        - timestamp\n        - last_updated\n        - room\n        - x\n        - \"y\"\n        - person\n        - text_decrypted\n        - poster\n    ChatCommentDecrypted:\n      title: ChatCommentDecrypted\n      type: object\n      description: Chat comment object\n      x-tags:\n        - types\n      properties:\n        id:\n          type: string\n        timestamp:\n          type: integer\n        last_updated:\n          type: integer\n        room:\n          $ref: \"#/components/schemas/RoomId\"\n        x:\n          type: integer\n          minimum: 0\n        \"y\":\n          type: integer\n          minimum: 0\n        person:\n          $ref: \"#/components/schemas/UserId\"\n        text_decrypted:\n          type: string\n        texts:\n          type: array\n          items:\n            type: object\n            properties:\n              encrypted:\n                type: boolean\n              to:\n                oneOf:\n                  - $ref: \"#/components/schemas/UserId\"\n                  - $ref: \"#/components/schemas/PosterId\"\n            required:\n              - encrypted\n              - to\n        kind:\n          type: string\n          enum:\n            - poster\n            - person\n        reply_to:\n          type: string\n      required:\n        - id\n        - timestamp\n        - last_updated\n        - room\n        - x\n        - \"y\"\n        - person\n        - text_decrypted\n        - texts\n        - kind\n    CommentEncrypted:\n      title: CommentEncrypted\n      type: object\n      description: Encrypted comment object\n      x-tags:\n        - types\n      properties:\n        to:\n          type: string\n        text:\n          type: string\n        encrypted:\n          type: boolean\n      required:\n        - to\n        - text\n        - encrypted\n    ChatComment:\n      title: ChatComment\n      type: object\n      x-tags:\n        - types\n      properties:\n        id:\n          $ref: \"#/components/schemas/CommentId\"\n        timestamp:\n          type: integer\n        last_updated:\n          type: integer\n        room:\n          $ref: \"#/components/schemas/RoomId\"\n        x:\n          type: integer\n        \"y\":\n          type: integer\n        person:\n          $ref: \"#/components/schemas/UserId\"\n        kind:\n          type: string\n          enum:\n            - poster\n            - person\n        texts:\n          type: array\n          items:\n            $ref: \"#/components/schemas/CommentEncrypted\"\n        reply_to:\n          type: string\n      required:\n        - id\n        - timestamp\n        - last_updated\n        - room\n        - x\n        - \"y\"\n        - person\n        - kind\n        - texts\n    Poster:\n      title: Poster\n      type: object\n      x-tags:\n        - types\n      properties:\n        id:\n          $ref: \"#/components/schemas/PosterId\"\n        last_updated:\n          type: integer\n        title:\n          type: string\n        author:\n          $ref: \"#/components/schemas/UserId\"\n        room:\n          $ref: \"#/components/schemas/RoomId\"\n        location:\n          type: string\n        poster_number:\n          type: string\n        x:\n          type: number\n        \"y\":\n          type: number\n        file_url:\n          type: string\n        access_log:\n          type: boolean\n          description: Record access log\n        author_online_only:\n          type: boolean\n          description: Allow access only when the author is online\n        file_size:\n          type: integer\n        viewed:\n          type: boolean\n        metadata:\n          type: object\n      required:\n        - id\n        - last_updated\n        - author\n        - room\n        - location\n        - poster_number\n        - x\n        - \"y\"\n        - file_url\n        - access_log\n        - author_online_only\n    PersonInMap:\n      title: PersonInMap\n      type: object\n      description: \"\"\n      properties:\n        id:\n          type: string\n        room:\n          type: string\n        x:\n          type: number\n        \"y\":\n          type: number\n        direction:\n          type: string\n          enum:\n            - up\n            - down\n            - left\n            - right\n            - none\n        name:\n          type: string\n        last_updated:\n          type: integer\n        moving:\n          type: boolean\n        stats:\n          $ref: \"#/components/schemas/PersonStat\"\n        poster_viewing:\n          $ref: \"#/components/schemas/PosterId\"\n        email:\n          type: string\n        role:\n          type: string\n          enum:\n            - owner\n            - admin\n            - user\n        people_groups:\n          type: array\n          items:\n            type: string\n      required:\n        - id\n        - room\n        - x\n        - \"y\"\n        - direction\n        - name\n        - last_updated\n        - moving\n    PersonStat:\n      title: PersonStat\n      type: object\n      properties:\n        walking_steps:\n          type: integer\n        people_encountered:\n          type: array\n          items:\n            type: string\n        chat_count:\n          type: integer\n        chat_char_count:\n          type: integer\n        viewed_posters:\n          type: integer\n      required:\n        - walking_steps\n        - people_encountered\n        - chat_count\n        - chat_char_count\n        - viewed_posters\n    CommentId:\n      title: CommentId\n      type: string\n    Notification:\n      title: Notification\n      type: object\n      description: Notification sent from server\n      properties:\n        kind:\n          type: string\n          enum:\n            - new_chat_comments\n            - new_poster_comments\n            - reply_chat_comments\n            - reply_poster_comments\n            - mention_in_poster_comment\n        data:\n          oneOf:\n            - $ref: \"#/components/schemas/NotificationChatCommentsData\"\n            - $ref: \"#/components/schemas/NotificationPosterCommentsData\"\n        timestamp:\n          type: integer\n        id:\n          type: string\n        person:\n          $ref: \"#/components/schemas/UserId\"\n        room:\n          $ref: \"#/components/schemas/RoomId\"\n      required:\n        - kind\n        - timestamp\n        - id\n        - person\n        - room\n    NotificationWithEmail:\n      title: NotificationWithEmail\n      type: object\n      description: Notification sent from server. Data for admin.\n      x-tags:\n        - notification\n      properties:\n        kind:\n          type: string\n          enum:\n            - new_chat_comments\n            - new_poster_comments\n            - reply_chat_comments\n            - reply_poster_comments\n            - mention_in_poster_comment\n        data:\n          oneOf:\n            - $ref: \"#/components/schemas/NotificationPosterCommentsData\"\n            - $ref: \"#/components/schemas/NotificationChatCommentsData\"\n        timestamp:\n          type: integer\n        id:\n          $ref: \"#/components/schemas/NotificationId\"\n        person:\n          $ref: \"#/components/schemas/UserId\"\n        room:\n          $ref: \"#/components/schemas/RoomId\"\n        email:\n          type: object\n          properties:\n            status:\n              type: string\n              enum:\n                - queued\n                - sending\n                - sent\n                - failed\n            body:\n              type: string\n            body_html:\n              type: string\n            send_to:\n              type: string\n            send_from:\n              type: string\n            retry_count:\n              type: number\n            subject:\n              type: string\n          required:\n            - status\n            - body\n            - send_to\n            - retry_count\n            - subject\n        resolved_tiime:\n          type: string\n        superseded_by:\n          $ref: \"#/components/schemas/NotificationId\"\n      required:\n        - kind\n        - timestamp\n        - id\n        - person\n        - room\n    NotificationChatCommentsData:\n      title: NotificationChatCommentsData\n      type: object\n      properties:\n        comments:\n          type: array\n          items:\n            oneOf:\n              - type: string\n              - type: object\n                properties:\n                  id:\n                    $ref: \"#/components/schemas/CommentId\"\n                  from:\n                    $ref: \"#/components/schemas/UserId\"\n                  timestamp:\n                    type: integer\n                  read:\n                    type: boolean\n      required:\n        - comments\n    NotificationPosterCommentsData:\n      title: NotificationPosterCommentsData\n      type: object\n      properties:\n        poster:\n          $ref: \"#/components/schemas/PosterId\"\n        comments:\n          type: array\n          items:\n            oneOf:\n              - type: string\n              - type: object\n                properties:\n                  id:\n                    $ref: \"#/components/schemas/CommentId\"\n                  from:\n                    $ref: \"#/components/schemas/UserId\"\n                  timestamp:\n                    type: integer\n                  read:\n                    type: boolean\n      required:\n        - poster\n        - comments\n    ChatEvent:\n      title: ChatEvent\n      type: object\n      properties:\n        kind:\n          type: string\n          enum:\n            - event\n        event_type:\n          type: string\n          enum:\n            - new\n            - join\n            - add\n            - leave\n            - dissolve\n            - start_overhear\n            - end_overhear\n            - set_private\n        event_data:\n          type: object\n          properties:\n            additionalProperties:\n              type: string\n        person:\n          type: string\n        group:\n          type: string\n        timestamp:\n          type: number\n        room:\n          $ref: \"#/components/schemas/RoomId\"\n      required:\n        - kind\n        - event_type\n        - person\n        - group\n        - timestamp\n        - room\n  securitySchemes:\n    debugAs:\n      type: apiKey\n      in: query\n      name: debug_as\n      description: \"\"\n    debugToken:\n      type: apiKey\n      in: query\n      name: debug_token\ntags:\n  - name: chat\n  - name: map\n  - name: people\n  - name: poster\n  - name: auth\n  - name: misc\nsecurity:\n  - debugToken: []\n  - debugAs: []\n",
			"canonicalURL": "/github.com/hirokai/virtual-poster@d1eabc4dc8746894e398103773d72fe179607b93/-/blob/server/virtual-poster.v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/hirokai/virtual-poster/blob/d1eabc4dc8746894e398103773d72fe179607b93/server/virtual-poster.v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "unmarshal: json: line 1:25521: json: cannot unmarshal Go value of type ogen.Spec: spec: json: cannot unmarshal Go value of type ogen.Properties: json: cannot unmarshal JSON boolean into Go value of type []string"
}