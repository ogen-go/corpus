{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/koel/koel"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "api-docs/api.yaml",
			"byteSize": 51586,
			"content": "openapi: 3.0.0\ninfo:\n  title: Koel API\n  version: 5.1.0\n  description: 'The API for [Koel](https://koel.dev), the music streaming application that works.'\n  contact:\n    name: An Phan\n    url: 'https://phanan.net'\n    email: me@phanan.net\n  license:\n    name: MIT\n    url: 'https://github.com/koel/koel/blob/master/LICENSE.md'\nservers:\n  - url: 'https://koel.test'\n    description: Local\ntags:\n  - name: interaction\n  - name: download\npaths:\n  /api/user:\n    post:\n      summary: Create a user\n      tags:\n        - user\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n      operationId: post-user\n      security:\n        - Bearer Token: []\n      description: Create a new user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                email:\n                  type: string\n                  format: email\n                password:\n                  type: string\n                  format: password\n                is_admin:\n                  type: boolean\n              required:\n                - name\n                - email\n                - password\n                - is_admin\n    parameters: []\n  '/api/user/{userId}':\n    parameters:\n      - schema:\n          type: integer\n        name: userId\n        in: path\n        required: true\n        description: ID of the user\n    patch:\n      summary: Update a user\n      tags:\n        - user\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n      operationId: patch-user-userId\n      description: Update a user\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                email:\n                  type: string\n                  format: email\n                password:\n                  type: string\n                  format: password\n                  description: 'If provided, will update the user''s password'\n                is_admin:\n                  type: boolean\n              required:\n                - name\n                - email\n                - is_admin\n    delete:\n      summary: Delete a user\n      tags:\n        - user\n      responses:\n        '204':\n          description: No Content\n      operationId: delete-user-userId\n      description: Delete a user\n      security:\n        - Bearer Token: []\n  /api/me:\n    get:\n      summary: Get profile\n      tags:\n        - authentication\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n      operationId: get-me\n      security:\n        - Bearer Token: []\n      description: Get the current user's profile\n    post:\n      summary: Log in\n      tags:\n        - authentication\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                required:\n                  - token\n      operationId: post-me\n      description: 'Log a user in. Upon a successful login, an API token will be returned. This token should be stored for further authenticated request (either as a Bearer token or as an `api-token` parameter).'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n                password:\n                  type: string\n                  format: password\n              required:\n                - email\n                - password\n    put:\n      summary: Update profile\n      tags:\n        - authentication\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                    description: New API token if the password is changed.\n      operationId: put-me\n      description: Update the current user's profile\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                email:\n                  type: string\n                  format: email\n                password:\n                  type: string\n                  format: password\n                  description: 'If provided, will update the current user''s password'\n              required:\n                - name\n                - email\n    delete:\n      summary: Log out\n      tags:\n        - authentication\n      responses:\n        '204':\n          description: No Content\n      operationId: delete-me\n      description: Log the current user out\n      security:\n        - Bearer Token: []\n    parameters: []\n  /api/data:\n    get:\n      summary: Get application data\n      tags:\n        - data\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  albums:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Album'\n                  allowDownload:\n                    type: boolean\n                    description: Whether the current installation of Koel allows downloading\n                  artists:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Artist'\n                  cdnUrl:\n                    type: string\n                    format: uri\n                    description: 'The CDN URL of the application, if configured'\n                  currentUser:\n                    $ref: '#/components/schemas/User'\n                  currentVersion:\n                    type: string\n                    description: Version of the current installation of Koel\n                  latestVersion:\n                    type: string\n                    description: The latest version of Koel\n                  playlists:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Playlist'\n                  recentlyPlayed:\n                    type: array\n                    description: An array containing the IDs of the most recently-played songs\n                    items:\n                      type: string\n                  settings:\n                    type: object\n                    description: Settings for the current Koel installation. Only available if the current authenticated user is an admin.\n                    properties:\n                      media_path:\n                        type: string\n                    required:\n                      - media_path\n                  songs:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Song'\n                  supportsTranscoding:\n                    type: boolean\n                    description: Whether the current installation of Koel supports transcoding media\n                  useLastfm:\n                    type: boolean\n                  useYouTube:\n                    type: boolean\n                  useiTunes:\n                    type: boolean\n                  users:\n                    description: Only available if the current authenticated user is an admin\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n                  interactions:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/InteractionExcerpt'\n                required:\n                  - albums\n                  - allowDownload\n                  - artists\n                  - cdnUrl\n                  - currentUser\n                  - currentVersion\n                  - latestVersion\n                  - playlists\n                  - recentlyPlayed\n                  - songs\n                  - supportsTranscoding\n                  - useLastfm\n                  - useYouTube\n                  - useiTunes\n                  - interactions\n      operationId: get-data\n      description: 'Retrieve a set of application data catered for the current authenticated user (songs, albums, artists, playlists, interactions, and if the user is an admin, settings as well). This call should typically be made right after the user is logged in, to populate the application''s interface with relevant information.'\n      security:\n        - Bearer Token: []\n    parameters: []\n  /api/interaction/play:\n    post:\n      summary: Increase play count\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Interaction'\n      operationId: post-interaction-play\n      description: 'Increase a song''s play count as the currently authenticated user. This request should be made whenever a song is played. '\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                song:\n                  type: string\n                  description: ID of the song\n              required:\n                - song\n      tags:\n        - interaction\n    parameters: []\n  /api/interaction/like:\n    post:\n      summary: Toggle like/unlike a song\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Interaction'\n      operationId: post-interaction-like\n      description: Toggle like (\"favorite\") or unlike (\"unfavorite\") a song. The \"liked\" status of the song will be reversed by this operation.\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                song:\n                  type: string\n                  description: ID of the song\n              required:\n                - song\n      tags:\n        - interaction\n  /api/interaction/batch/like:\n    post:\n      summary: Like multiple songs\n      tags:\n        - interaction\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Interaction'\n      operationId: post-interaction-batch-like\n      description: 'Like several songs at once, useful for \"batch\" (e.g., drag-and-drop) actions'\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                songs:\n                  type: array\n                  description: An array of song IDs\n                  items:\n                    type: string\n              required:\n                - songs\n    parameters: []\n  /api/interaction/batch/unlike:\n    post:\n      summary: Unlike multiple songs\n      tags:\n        - interaction\n      responses:\n        '204':\n          description: OK\n      operationId: post-interaction-batch-unlike\n      description: 'Unlike several songs at once, useful for \"batch\" (e.g., drag-and-drop) actions'\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                songs:\n                  type: array\n                  description: An array of song IDs\n                  items:\n                    type: string\n              required:\n                - songs\n  '/api/interaction/recently-played/{count}':\n    parameters:\n      - schema:\n          type: integer\n        name: count\n        in: path\n        description: The maximum number of songs to be returned (optional)\n    get:\n      summary: Get recently played songs\n      tags:\n        - interaction\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: An array of song IDs\n                items:\n                  type: string\n      operationId: get-interaction-recently-played-count\n      description: Get a list of songs recently played by the current authenticated user\n      security:\n        - Bearer Token: []\n  /api/playlist:\n    get:\n      summary: Get current user's playlists\n      tags:\n        - playlist\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Playlist'\n      operationId: get-playlist\n      description: Get all playlists owned by the current authenticated user\n      security:\n        - Bearer Token: []\n    post:\n      summary: Create another playlist\n      tags:\n        - playlist\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Playlist'\n      operationId: post-playlist\n      description: Create a new playlist that's owned by the current authenticated user\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                rules:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/SmartPlaylistRule'\n                songs:\n                  type: array\n                  description: An array of song IDs to populate the playlist. Only used if the playlist is not a smart one (i.e. `rules` are empty).\n                  items:\n                    type: string\n                    format: md5\n              required:\n                - name\n  '/api/playlist/{playlistId}/songs':\n    parameters:\n      - schema:\n          type: integer\n        name: playlistId\n        in: path\n        required: true\n        description: ID of the playlist\n    patch:\n      summary: Update a playlist\n      tags:\n        - playlist\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Playlist'\n      operationId: patch-playlist-playlistId\n      description: 'Update a playlist (name and, if a smart playlist, its rules)'\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                rules:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/Playlist'\n    delete:\n      summary: ''\n      operationId: delete-playlist-playlistId\n      responses:\n        '200':\n          description: OK\n      description: Delete a playlist\n      security:\n        - Bearer Token: []\n    get:\n      summary: Get playlist's songs\n      operationId: get-playlist-playlistId\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: An array of song IDs\n                items:\n                  type: string\n      description: Get a playlist's songs\n      security:\n        - Bearer Token: []\n  '/api/playlist/{playlistId}/sync':\n    parameters:\n      - schema:\n          type: integer\n        name: playlistId\n        in: path\n        required: true\n        description: ID of the playlist\n    put:\n      summary: ''\n      operationId: put-playlist-playlistId-sync\n      responses:\n        '200':\n          description: OK\n      description: 'Populate playlist''s content. Instead of adding or removing songs individually, a playlist''s content is replaced entirely with an array of song IDs.'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                songs:\n                  type: array\n                  description: An array of song IDs\n                  items:\n                    type: string\n              required:\n                - songs\n  /api/songs:\n    put:\n      summary: Update song(s) information\n      tags:\n        - media information\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  artists:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Artist'\n                  albums:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Album'\n                  songs:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Song'\n                required:\n                  - artists\n                  - albums\n                  - songs\n      operationId: put-songs\n      description: Update the information of a song or multiple songs\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                songs:\n                  type: array\n                  items:\n                    type: string\n                data:\n                  type: object\n                  properties:\n                    title:\n                      type: string\n                    artistName:\n                      type: string\n                    albumName:\n                      type: string\n                    lyrics:\n                      type: string\n              required:\n                - songs\n                - data\n  '/api/album/{albumId}/info':\n    parameters:\n      - schema:\n          type: integer\n        name: albumId\n        in: path\n        required: true\n        description: ID of the album\n    get:\n      summary: Get album's extra information\n      tags:\n        - media information\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AlbumExtraInformation'\n      operationId: get-album-albumId-info\n      description: 'Get extra information (image, description etc.) about an album. Currently this information is only available if Last.fm integration is enabled. If it''s not the case, `null` will be returned.'\n      security:\n        - Bearer Token: []\n  '/api/artist/{artistId}/info':\n    parameters:\n      - schema:\n          type: integer\n        name: artistId\n        in: path\n        required: true\n        description: ID of the artist\n    get:\n      summary: Get artist's extra information\n      tags:\n        - media information\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ArtistExtraInformation'\n      operationId: get-artist-artistId-info\n      description: 'Get extra information (image, biography etc.) about an artist. Currently this information is only available if Last.fm integration is enabled. If it''s not the case, `null` will be returned.'\n      security:\n        - Bearer Token: []\n  '/api/song/{songId}/info':\n    parameters:\n      - schema:\n          type: string\n        name: songId\n        in: path\n        required: true\n        description: ID of the song\n    get:\n      summary: Get song's extra information\n      tags:\n        - media information\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  lyrics:\n                    type: string\n                  album_info:\n                    $ref: '#/components/schemas/AlbumExtraInformation'\n                  artist_info:\n                    $ref: '#/components/schemas/ArtistExtraInformation'\n                  youtube:\n                    $ref: '#/components/schemas/YouTubeSearchResult'\n                required:\n                  - lyrics\n                  - album_info\n      operationId: get-song-songId-info\n      description: 'Get a song''s extra information. The response of this request is a superset of both corresponding `album/{albumId}/info` and `artist/{artistId}/info` responses, combined with the song''s lyrics and related YouTube videos, if applicable. '\n      security:\n        - Bearer Token: []\n  '/api/album/{albumId}/cover':\n    parameters:\n      - schema:\n          type: integer\n        name: albumId\n        in: path\n        required: true\n        description: ID of the album\n    put:\n      summary: Upload album's cover\n      tags:\n        - media information\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  coverUrl:\n                    type: string\n                    format: uri\n                required:\n                  - coverUrl\n      operationId: put-album-albumId-cover\n      description: Upload an image as an album's cover\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                cover:\n                  description: 'The cover image''s content, in [Data URI format](https://en.wikipedia.org/wiki/Data_URI_scheme)'\n                  type: string\n              required:\n                - cover\n  '/api/artist/{artistId}/image':\n    parameters:\n      - schema:\n          type: integer\n        name: artistId\n        in: path\n        required: true\n        description: ID of the artist\n    put:\n      summary: Upload artist's image\n      tags:\n        - media information\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  imageUrl:\n                    type: string\n                    format: uri\n                required:\n                  - imageUrl\n      operationId: put-artist-artistId-image\n      description: Upload an artist's image\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                image:\n                  type: string\n                  description: 'The image''s content, in [Data URI format](https://en.wikipedia.org/wiki/Data_URI_scheme)'\n              required:\n                - image\n  '/api/album/{album}/thumbnail':\n    parameters:\n      - schema:\n          type: integer\n        name: album\n        in: path\n        required: true\n        description: ID of the album\n    get:\n      summary: Get album's thumbnail\n      tags:\n        - media information\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type:\n                  - object\n                  - 'null'\n                properties:\n                  thumbnailUrl:\n                    type: string\n                    format: uri\n                required:\n                  - thumbnailUrl\n      operationId: get-album-album-thumbnail\n      description: Get an album's thumbnail (a 48px-wide blurry version of the album's cover). Returns the full URL to the thumbnail or NULL if the album has no cover.\n      security:\n        - Bearer Token: []\n  /api/settings:\n    post:\n      summary: Save the application settings\n      tags:\n        - settings\n      responses:\n        '204':\n          description: No Content\n      operationId: post-settings\n      description: Save the application settings. Right now there's only one setting to be saved (`media_path`). The current authenticated user must be an admin.\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                media_path:\n                  type: string\n                  description: Absolute path to the media folder\n              required:\n                - media_path\n  /api/os/s3/song:\n    post:\n      summary: Save a song from S3\n      tags:\n        - S3 integration\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Song'\n      operationId: post-os-s3-song\n      description: Create a new song or update an existing one with data sent from AWS\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                bucket:\n                  type: string\n                key:\n                  type: string\n                tags:\n                  type: object\n                  required:\n                    - duration\n                    - artist\n                    - album\n                    - title\n                  properties:\n                    duration:\n                      type: number\n                    artist:\n                      type: string\n                    albumartist:\n                      type: string\n                    album:\n                      type: string\n                    cover:\n                      type: object\n                      properties:\n                        data:\n                          type: string\n                          description: The base64-encoded binary content of the album cover\n                        extension:\n                          type: string\n                      required:\n                        - data\n                        - extension\n                    title:\n                      type: string\n                    track:\n                      type: number\n                    lyrics:\n                      type: string\n              required:\n                - bucket\n                - key\n                - tags\n    delete:\n      summary: Remove a song from S3\n      operationId: delete-os-s3-song\n      responses:\n        '204':\n          description: No Content\n      description: Remove a song whose information matches the data sent from AWS S3 (`bucket` and `key`)\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                bucket:\n                  type: string\n                key:\n                  type: string\n              required:\n                - bucket\n                - key\n  /api/upload:\n    post:\n      summary: Upload a song\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SongWithAlbumAndArtist'\n      operationId: post-upload\n      description: Upload a song. The current authenticated user must be an admin.\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n              required:\n                - file\n  '/api/{songId}/scrobble':\n    parameters:\n      - schema:\n          type: string\n        name: songId\n        in: path\n        required: true\n        description: ID of the song\n    post:\n      summary: Scrobble a song\n      tags:\n        - last.fm\n      responses:\n        '204':\n          description: No Content\n      operationId: post-api-songId-scrobble\n      description: 'Create a [Last.fm scrobble entry](https://www.last.fm/api/scrobbling) for a song. Only functional if Last.fm integration has been configured and the current authenticated user has connected to Last.fm.'\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                timestamp:\n                  type: integer\n  /api/lastfm/session-key:\n    post:\n      summary: Set Last.fm session key\n      tags:\n        - last.fm\n      responses:\n        '204':\n          description: No Content\n      operationId: post-api-lastfm-session-key\n      description: 'Set the Last.fm session key for the current authenticated user. This call should be made after the user is [connected to Last.fm](https://www.last.fm/api/authentication).'\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                key:\n                  type: string\n                  description: 'The Last.fm [session key](https://www.last.fm/api/show/auth.getSession)'\n              required:\n                - key\n  /lastfm/connect:\n    get:\n      summary: Connect to Last.fm\n      tags:\n        - last.fm\n      responses: {}\n      operationId: get-lastfm-connect\n      description: '[Connect](https://www.last.fm/api/authentication) the current user to Last.fm. This is actually NOT an API request. The application should instead redirect the current user to this route, which will send them to Last.fm for authentication. After authentication is successful, the user will be redirected back to `/lastfm/callback?token=\u003cLast.fm token\u003e`.'\n      security:\n        - api-token: []\n  '/play/{songId}/{transcode}/{bitrate}':\n    parameters:\n      - schema:\n          type: string\n        name: songId\n        in: path\n        required: true\n        description: ID of the song\n      - schema:\n          type: boolean\n        name: transcode\n        in: path\n        description: Whether to transcode the song (optional)\n      - schema:\n          type: number\n        name: bitrate\n        in: path\n        description: Bit rate to transcode to (optional)\n    get:\n      summary: Play a song\n      tags:\n        - playback\n      responses: {}\n      operationId: get-play-songId-transcode-bitrate\n      description: 'The GET request to play/stream a song. This is NOT an XmlHttpRequest By default Koel will serve the file as-is, unless it''s a FLAC file. If the value of `transcode` is truthy, Koel will attempt to transcode the file into `bitRate` kbps using ffmpeg.'\n      security:\n        - api-token: []\n  /download/songs:\n    get:\n      summary: Download songs\n      tags:\n        - download\n      responses: {}\n      operationId: get-download-songs\n      description: Download a song or several songs. This is NOT an XmlHttpRequest. The response will be a download response of either the media file or a zip file containg multiple media files.\n      security:\n        - api-token: []\n      parameters:\n        - schema:\n            type: array\n          in: query\n          name: songs\n          description: Array of IDs of songs to download\n  '/download/album/{albumId}':\n    parameters:\n      - schema:\n          type: integer\n        name: albumId\n        in: path\n        required: true\n        description: ID of the album\n    get:\n      summary: Download album\n      tags:\n        - download\n      responses: {}\n      operationId: get-download-album-albumId\n      description: Download a whole album. This is NOT an XmlHttpRequest. The response will be a download response of either one media file or a zip file containg multiple media files.\n      security:\n        - api-token: []\n  '/download/artist/{artistId}':\n    parameters:\n      - schema:\n          type: integer\n        name: artistId\n        in: path\n        required: true\n        description: ID of the artist\n    get:\n      summary: Download artist\n      tags:\n        - download\n      responses: {}\n      operationId: get-download-artist-artistId\n      description: Download a whole artist's biography. This is NOT an XmlHttpRequest. The response will be a download response of either one media file or a zip file containg multiple media files.\n      security:\n        - api-token: []\n  '/download/playlist/{playlistId}':\n    parameters:\n      - schema:\n          type: integer\n        name: playlistId\n        in: path\n        required: true\n        description: ID of the playlist\n    get:\n      summary: Download playlist\n      tags:\n        - download\n      responses: {}\n      operationId: get-download-playlist-playlistId\n      description: Download a whole playlist. This is NOT an XmlHttpRequest. The response will be a download response of either one media file or a zip file containg multiple media files.\n      security:\n        - api-token: []\n  /api/search:\n    get:\n      summary: 'Search for songs, albums, and artists'\n      tags:\n        - search\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: object\n                    required:\n                      - songs\n                      - artists\n                      - albums\n                    properties:\n                      songs:\n                        type: array\n                        description: An array of max 6 best-matching songs' IDs\n                        items:\n                          type: string\n                      artists:\n                        type: array\n                        description: An array of max 6 best-matching artists' IDs\n                        items:\n                          type: integer\n                      albums:\n                        type: array\n                        description: An array of max 6 best-matching albums' IDs\n                        items:\n                          type: number\n                required:\n                  - results\n      operationId: get-api-search\n      description: 'Seach for songs, albums, and artists, with a maximum of {count} results each.'\n      security:\n        - Bearer Token: []\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: q\n          description: The keywords to search\n          required: true\n        - schema:\n            type: integer\n            minimum: 1\n            default: 6\n          in: query\n          name: count\n          description: 'The maximum number of results for songs, artists, and albums'\n    parameters: []\n  /api/search/songs:\n    get:\n      summary: Search for songs\n      tags:\n        - search\n      responses: {}\n      operationId: get-api-search-songs\n      description: Get all songs that matches a search query.\n      security:\n        - Bearer Token: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                songs:\n                  type: array\n                  description: An array of matching songs' IDs\n                  items: {}\n              required:\n                - songs\ncomponents:\n  schemas:\n    User:\n      title: User\n      type: object\n      description: A User model\n      x-examples:\n        Sample User:\n          id: 1\n          name: Phan An\n          email: me@phanan.net\n          password: ''\n          is_admin: true\n          preferences:\n            last_fm_session_key: 12OcZD8_lsuGEFvxxY0k4lJihOYBZGWa\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        email:\n          type: string\n        is_admin:\n          type: boolean\n        preferences:\n          type: object\n          properties:\n            last_fm_session_key:\n              type: string\n      required:\n        - id\n        - name\n        - email\n        - is_admin\n        - preferences\n    Song:\n      title: Song\n      type: object\n      description: A Song model\n      x-examples:\n        Sample Song:\n          id: f88c7671623c6b8be881e2a04e685509\n          artist_id: 3\n          album_id: 3\n          title: When the Lights Are Down\n          disc: 1\n          track: 2\n          length: 221\n      properties:\n        id:\n          type: string\n          description: An md5 string\n        artist_id:\n          type: integer\n        album_id:\n          type: integer\n        title:\n          type: string\n        disc:\n          type: integer\n        track:\n          type: number\n        length:\n          type: number\n          format: float\n          description: The duration of the song in seconds\n      required:\n        - id\n        - artist_id\n        - album_id\n        - title\n        - disc\n        - track\n        - length\n    Artist:\n      title: Artist\n      type: object\n      description: An Artist model\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n      required:\n        - id\n        - name\n      x-examples:\n        Unknown Artist:\n          id: 1\n          name: Unknown Artist\n        Various Artists:\n          id: 2\n          name: Various Artists\n        Sample Artist:\n          id: 3\n          name: Kamelot\n    Album:\n      title: Album\n      type: object\n      description: An Album entity\n      properties:\n        id:\n          type: integer\n        artist_id:\n          type: integer\n        name:\n          type: string\n      required:\n        - id\n        - artist_id\n        - name\n      x-examples:\n        Unknown Album:\n          id: 1\n          artist_id: 1\n          name: Unknown Album\n        Sample Album:\n          id: 2\n          artist_id: 3\n          name: The Black Halo\n    InteractionExcerpt:\n      title: Interaction\n      type: object\n      description: 'An excerpt of the Interaction model, containing only the minimal data'\n      properties:\n        song_id:\n          type: string\n        liked:\n          type: boolean\n        play_count:\n          type: integer\n      required:\n        - song_id\n        - liked\n        - play_count\n    Playlist:\n      title: Playlist\n      type: object\n      description: A Playlist model\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        rules:\n          type:\n            - array\n            - 'null'\n          description: An array of Rule objects if the playlist is a Smart playlist\n          items:\n            $ref: '#/components/schemas/Playlist'\n        is_smart:\n          type: boolean\n          description: Whether the playlist is of Smart (dynamic) type\n      required:\n        - id\n        - name\n        - rules\n        - is_smart\n    SmartPlaylistRule:\n      title: SmartPlaylistRule\n      type: object\n      description: A SmartPlaylistRule model\n      properties:\n        id:\n          type: integer\n        rules:\n          type: array\n          description: An array of \"subrules\" (constraints) of the current rule\n          items:\n            type: object\n            properties:\n              id:\n                type: integer\n              model:\n                type: string\n                enum:\n                  - title\n                  - album.name\n                  - artist.name\n                  - interations.play_count\n                  - interactions.updated_at\n                  - length\n                  - created_at\n                  - updated_at\n              operator:\n                type: string\n                enum:\n                  - is\n                  - isNot\n                  - contains\n                  - notContain\n                  - isBetween\n                  - isGreaterThan\n                  - isLessThan\n                  - beginsWith\n                  - endsWith\n                  - notInLast\n              value:\n                type: array\n                items:\n                  type: string\n            required:\n              - id\n              - model\n              - operator\n              - value\n      required:\n        - id\n        - rules\n    Interaction:\n      title: Interaction\n      type: object\n      description: An Interaction model\n      properties:\n        song_id:\n          type: string\n        liked:\n          type: boolean\n        play_count:\n          type: integer\n        song:\n          $ref: '#/components/schemas/Song'\n        user:\n          $ref: '#/components/schemas/User'\n      required:\n        - song_id\n        - liked\n        - play_count\n        - song\n        - user\n    AlbumExtraInformation:\n      title: AlbumExtraInformation\n      type: object\n      description: 'Extra information about an album, currently provided by Last.fm'\n      properties:\n        url:\n          type: string\n          format: uri\n          description: URL to the album's page on Last.fm\n        image:\n          type: string\n          format: uri\n          description: URL to the album's image on Last.fm\n        wiki:\n          type: object\n          required:\n            - summary\n            - full\n          properties:\n            summary:\n              type: string\n            full:\n              type: string\n        tracks:\n          type: array\n          items:\n            type: object\n            properties:\n              title:\n                type: string\n              length:\n                type: integer\n              url:\n                type: string\n                format: uri\n            required:\n              - title\n              - length\n              - url\n        cover:\n          type: string\n          description: URL to the album cover by Koel\n      required:\n        - url\n        - image\n        - wiki\n        - tracks\n        - cover\n      x-examples:\n        Sample:\n          url: 'https://www.last.fm/music/Queen/Innuendo'\n          image: 'https://lastfm-img2.akamaized.net/i/u/300x300/b56adcd16ca6454498981a8470a3ec06.png'\n          wiki:\n            summary: Innuendo is a 1991 album by English rock band Queen...\n            full: Innuendo is a 1991 album by English rock band Queen. It is the band's fourteenth studio album and the last to be composed entirely of new material. It is also their final studio album to be released while lead singer Freddie Mercury was still alive.\n          tracks:\n            - title: Innuendo\n              length: 392\n              url: 'https://www.last.fm/music/Queen/_/Innuendo'\n            - title: I'm Going Slightly Mad\n              length: 247\n              url: 'https://www.last.fm/music/Queen/_/I%27m+Going+Slightly+Mad'\n          cover: 'https://koel.yourdomain.net/img/covers/5a771ec82a5d72.25096250.png'\n    ArtistExtraInformation:\n      title: ArtistExtraInformation\n      type: object\n      description: 'Extra information about an artist, currently provided by Last.fm'\n      properties:\n        url:\n          type: string\n          format: uri\n          description: URL to the artist's page on Last.fm\n        image:\n          type: string\n          format: uri\n          description: URL to the artist's image on Last.fm\n        bio:\n          type: object\n          required:\n            - summary\n            - full\n          properties:\n            summary:\n              type: string\n            full:\n              type: string\n      required:\n        - url\n        - image\n        - bio\n      x-examples:\n        Sample:\n          url: 'https://www.last.fm/music/Queen'\n          image: 'https://koel.yourdomain.net/img/artists/5a772708e7de19.84120679.png'\n          bio:\n            summary: Queen were an English rock band originally consisting of four members...\n            full: 'Queen were an English rock band originally consisting of four members: vocalist Freddie Mercury, guitarist Brian May, bass guitarist John Deacon, and drummer Roger Taylor.'\n    YouTubeSearchResult:\n      title: YouTubeSearchResult\n      type: object\n      description: A search result object returned by YouTube\n      properties:\n        kind:\n          type: string\n        etag:\n          type: string\n        nextPageToken:\n          type: string\n        regionCode:\n          type: string\n        pageInfo:\n          type: object\n          required:\n            - totalResults\n            - resultsPerPage\n          properties:\n            totalResults:\n              type: integer\n            resultsPerPage:\n              type: integer\n        items:\n          type: array\n          items:\n            type: object\n            properties:\n              kind:\n                type: string\n              etag:\n                type: string\n              id:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    kind:\n                      type: string\n                    videoId:\n                      type: string\n                  required:\n                    - kind\n                    - videoId\n              snippet:\n                type: object\n                required:\n                  - publishedAt\n                  - channelId\n                  - title\n                  - description\n                  - thumbnails\n                  - channelTitle\n                  - liveBroadcastContent\n                properties:\n                  publishedAt:\n                    type: string\n                    format: date-time\n                  channelId:\n                    type: string\n                  title:\n                    type: string\n                  description:\n                    type: string\n                  thumbnails:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        default:\n                          type: object\n                          required:\n                            - url\n                            - width\n                            - height\n                          properties:\n                            url:\n                              type: string\n                              format: uri\n                            width:\n                              type: integer\n                            height:\n                              type: integer\n                        medium:\n                          type: object\n                          required:\n                            - url\n                            - width\n                            - height\n                          properties:\n                            url:\n                              type: string\n                              format: uri\n                            width:\n                              type: integer\n                            height:\n                              type: integer\n                        high:\n                          type: object\n                          required:\n                            - url\n                            - width\n                            - height\n                          properties:\n                            url:\n                              type: string\n                              format: uri\n                            width:\n                              type: integer\n                            height:\n                              type: integer\n                      required:\n                        - default\n                        - medium\n                        - high\n                  channelTitle:\n                    type: string\n                  liveBroadcastContent:\n                    type: string\n            required:\n              - kind\n              - etag\n              - id\n              - snippet\n      required:\n        - kind\n        - etag\n        - nextPageToken\n        - regionCode\n        - pageInfo\n        - items\n      x-examples:\n        Sample:\n          kind: youtube#searchListResponse\n          etag: '\"XI7nbFXulYBIpL0ayR_gDh3eu1k/UMIztE1sQ8L9tu7igiTaSoBA9tw\"'\n          nextPageToken: CAoQAA\n          regionCode: CH\n          pageInfo:\n            totalResults: 1000000\n            resultsPerPage: 10\n          items:\n            - kind: youtube#searchResult\n              etag: '\"XI7nbFXulYBIpL0ayR_gDh3eu1k/bRRI2oEvvXIbCBFKv8WrLUaG-0A\"'\n              id:\n                kind: youtube#video\n                videoId: t99KH0TR-J4\n              snippet:\n                publishedAt: '2013-10-15T14:24:31.000Z'\n                channelId: UCiMhD4jzUqG-IgPzUmmytRQ\n                title: Queen - The Show Must Go On (Official Video)\n                description: 'Subscribe to the Official Queen Channel Here http://bit.ly/Subscribe2Queen Taken from Innuendo, 1991. Queen - The Show Must Go On (promo video, 1991) ...'\n                thumbnails:\n                  default:\n                    url: 'https://i.ytimg.com/vi/t99KH0TR-J4/default.jpg'\n                    width: 120\n                    height: 90\n                  medium:\n                    url: 'https://i.ytimg.com/vi/t99KH0TR-J4/mqdefault.jpg'\n                    width: 320\n                    height: 180\n                  high:\n                    url: 'https://i.ytimg.com/vi/t99KH0TR-J4/hqdefault.jpg'\n                    width: 480\n                    height: 360\n                channelTitle: Queen Official\n                liveBroadcastContent: none\n    SongWithAlbumAndArtist:\n      title: SongWithAlbumAndArtist\n      type: object\n      description: A Song model with loaded album and artist information\n      x-examples: {}\n      properties:\n        id:\n          type: string\n          description: An md5 string\n        artist_id:\n          type: integer\n        album_id:\n          type: integer\n        title:\n          type: string\n        disc:\n          type: integer\n        track:\n          type: number\n        length:\n          type: number\n          format: float\n          description: The duration of the song in seconds\n        album:\n          $ref: '#/components/schemas/Album'\n        artist:\n          $ref: '#/components/schemas/Artist'\n      required:\n        - id\n        - artist_id\n        - album_id\n        - title\n        - disc\n        - track\n        - length\n        - album\n        - artist\n  securitySchemes:\n    Bearer Token:\n      type: http\n      scheme: bearer\n    api-token:\n      name: The API token as a query parameter\n      type: apiKey\n      in: query\n"
		}
	},
	"Error": "unmarshal: callback: json: cannot unmarshal array into Go struct field Schema.type of type string"
}