{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/DataBooster/PyWebApi"
		},
		"file": {
			"name": "mdxreader.swagger.yaml",
			"size": 0,
			"path": "Sample/UserApps/MdxReader/mdxreader.swagger.yaml",
			"byteSize": 6335,
			"content": "openapi: 3.0.0\ninfo:\n  description: Runs a MDX query and returns the result, or forward the result to DbWebApi (for bulk insert/update) and then send a notification to somewhere.\n  version: 1.0.0\n  title: MDX Reader\n  contact:\n    name: PyWebApi\n    url: 'https://github.com/DataBooster/PyWebApi'\n  license:\n    name: MIT\n    url: 'https://github.com/DataBooster/PyWebApi/blob/master/LICENSE'\n\nexternalDocs:\n  url: 'https://github.com/DataBooster/PyWebApi#mdx-reader'\n  description: Wiki\n\ntags:\n  - name: Main\n\npaths:\n  /mdx_task.run_query:\n    post:\n      summary: Run a MDX query task.\n      operationId: run_query\n      description: |-\n        This function acts as an MDX query dispatcher:\n\n        1.  It forwards an MDX query (received as JSON from the HTTP client) to a specified OLAP, and then convert the query result to the specified model;\n        2.  (optional) Sends the above results to a database (DbWebApi) for storage or further processing;\n        3.  (optional) Sends a notification about the final result or error.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/run_query'\n        description: Payload\n      responses:\n        \"200\":\n          description: Return the final results\n          content:\n            application/json:\n              schema:\n                type: object\n        \"401\":\n          $ref: '#/components/responses/Unauthorized'\n        default:\n          $ref: '#/components/responses/ServerError'\n      tags:\n        - Main\n\ncomponents:\n\n  responses:\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error-response'\n    ServerError:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error-response'\n\n  schemas:\n    run_query:\n      type: object\n      required:\n        - connection_string\n        - command_text\n      properties:\n        connection_string:\n          type: string\n          example: \"Provider=MSOLAP;Data Source=The_OLAP;Initial Catalog=The_Cube;Integrated Security=SSPI;Format=Tabular;Connect Timeout=3600;\"\n          description: The ADOMD connection string for the MDX query.\n\n        command_text:\n          type: string\n          example: WITH ... SELECT ... ON COLUMNS, ... ON ROWS FROM ... WHERE ...\n          description: The entire text of the MDX select query.\n\n        result_model:\n          type: string\n          default: DictOfList\n          example: SqlTvp\n          enum:\n            - ListOfList\n            - DictOfList\n            - ListOfDict\n            - SqlTvp\n          description: See \u003chttps://github.com/DataBooster/PyWebApi#mdx-reader\u003e for details.\n\n        column_mapping:\n          type: object\n          default: {}\n          example: {\"\": \"inTvp_ForSql\", \"Top 1% Avg\": \"Lev1Avg\", \"Useless Col4\": \"\"}\n          description: |-\n            A mapping dictionary can be used to customize irregular column name mapping.\n            \n            Mapping a column name to empty string (or None) - often used to indicate that column does not need to appear in the final rendering of data.\n            \n            Special Note (to SQL Server stored procedure): A empty key in the map is used to specify the name of the table-valued parameter.\n            \n        pass_result_to_url:\n          type: string\n          format: url\n          example: \"http://dbwebapi.dev.com/sqldev/the_db.dbo.load_mdx_result\"\n          description: Rather than just returning the MDX results to the HTTP client, this optional argument can be used to forward these result data directly to a database stored procedure for storage or further processing (the stored procedure is exposed as a URL through DbWebApi).\n\n        more_args:\n          type: object\n          default: {}\n          example: {\"inAsOfDate\": \"2020-05-01\", \"inParam2\": \"test from Swagger UI\"}\n          description: Other than above MDX result data, your stored procedure may require more input parameters. This more_args argument (a dictionary) allows you to prepare all other input parameters required by the stored procedure into the dictionary.\n\n        notify_url:\n          type: string\n          format: url\n          example: http://...(optional)\n          description: We may need to send a notification to somewhere when above process get completed or an error is encountered. This argument allows you to specify the URL of the notification destination (it must also be a RESTful service).\n\n        notify_args:\n          type: object\n          example: {}\n          description: |-\n            This is a JSON dictionary. In general, any items it carries will be passed to the notification service as input arguments. However, if we want to include detailed result data and/or error information in the notification, then what parameter name(s) does the notification service use to receive them? We make a convention to use two special keys in this dictionary to indicate these two particular parameter names:\n              \n            '[=]' key - the value of this special key indicates the parameter name through which the notification service will receive detailed result data. (this is optional) If not specified, detailed result data will not be sent to the notification service;\n              \n            '[!]' key - the value of this special key indicates the parameter name through which the notification service will receive detailed error information. (this is optional) If not specified, detailed error information will not be sent to the notification service; in this case, the notification itself cannot tell whether the process has completed successfully or encountered any errors, then the notification service may require some other channel to know whether the process succeeded or failed.\n\n    error-response:\n      type: object\n      required:\n        - ExceptionMessage\n      properties:\n        ExceptionMessage:\n          type: string\n        ExceptionType:\n          type: string\n        StackTrace:\n          type: string\n\nservers:\n  - description: (Please update the local-test base URL to your actual path)\n    url: http://localhost/PyWebApi/pys/test_app/samples/mdxreader\n",
			"canonicalURL": "/github.com/DataBooster/PyWebApi@d4afed2d6b05215302bfb316a61b36cf13fb74aa/-/blob/Sample/UserApps/MdxReader/mdxreader.swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/DataBooster/PyWebApi/blob/d4afed2d6b05215302bfb316a61b36cf13fb74aa/Sample/UserApps/MdxReader/mdxreader.swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"run_query\": resolve \"#/components/schemas/run_query\": property \"column_mapping\": at Sample/UserApps/MdxReader/mdxreader.swagger.yaml:98:20: parse default: unexpected type: \"object\""
}