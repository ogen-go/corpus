{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/googleapis.com/streetviewpublish/v1/openapi.yaml",
			"byteSize": 58383,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://streetviewpublish.googleapis.com/\nx-hasEquivalentPaths: true\ninfo:\n  contact:\n    name: Google\n    url: https://google.com\n    x-twitter: youtube\n  description: \"Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. \"\n  license:\n    name: Creative Commons Attribution 3.0\n    url: http://creativecommons.org/licenses/by/3.0/\n  termsOfService: https://developers.google.com/terms/\n  title: Street View Publish API\n  version: v1\n  x-apiClientRegistration:\n    url: https://console.developers.google.com\n  x-apisguru-categories:\n    - analytics\n    - media\n  x-logo:\n    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\n  x-origin:\n    - converter:\n        url: https://github.com/mermade/oas-kit\n        version: 7.0.4\n      format: google\n      url: https://streetviewpublish.googleapis.com/$discovery/rest?version=v1\n      version: v1\n  x-providerName: googleapis.com\n  x-serviceName: streetviewpublish\nexternalDocs:\n  url: https://developers.google.com/streetview/publish/\ntags:\n  - name: photo\n  - name: photos\n  - name: photoSequence\n  - name: photoSequences\npaths:\n  /v1/photo:\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n    post:\n      description: \"After the client finishes uploading the photo with the returned UploadRef, CreatePhoto publishes the uploaded Photo to Street View on Google Maps. Currently, the only way to set heading, pitch, and roll in CreatePhoto is through the [Photo Sphere XMP metadata](https://developers.google.com/streetview/spherical-metadata) in the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`, `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose. This method returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT if the request is malformed or if the uploaded photo is not a 360 photo. * google.rpc.Code.NOT_FOUND if the upload reference does not exist. * google.rpc.Code.RESOURCE_EXHAUSTED if the account has reached the storage limit.\"\n      operationId: streetviewpublish.photo.create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Photo\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Photo\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photo\n  \"/v1/photo/{id}\":\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n    put:\n      description: \"Updates the metadata of a Photo, such as pose, place association, connections, etc. Changing the pixels of a photo is not supported. Only the fields specified in the updateMask field are used. If `updateMask` is not present, the update applies to all fields. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested photo. * google.rpc.Code.INVALID_ARGUMENT if the request is malformed. * google.rpc.Code.NOT_FOUND if the requested photo does not exist. * google.rpc.Code.UNAVAILABLE if the requested Photo is still being indexed.\"\n      operationId: streetviewpublish.photo.update\n      parameters:\n        - description: A unique identifier for a photo.\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \"Required. Mask that identifies fields on the photo metadata to update. If not present, the old Photo metadata is entirely replaced with the new Photo metadata in this request. The update fails if invalid fields are specified. Multiple fields can be specified in a comma-delimited list. The following fields are valid: * `pose.heading` * `pose.latLngPair` * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` \u003e Note: When updateMask contains repeated fields, the entire set of repeated values get replaced with the new contents. For example, if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections` is empty, all connections are removed.\"\n          in: query\n          name: updateMask\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Photo\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Photo\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photo\n  \"/v1/photo/{photoId}\":\n    delete:\n      description: \"Deletes a Photo and its metadata. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested photo. * google.rpc.Code.NOT_FOUND if the photo ID does not exist.\"\n      operationId: streetviewpublish.photo.delete\n      parameters:\n        - description: Required. ID of the Photo.\n          in: path\n          name: photoId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Empty\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photo\n    get:\n      description: \"Gets the metadata of the specified Photo. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested Photo. * google.rpc.Code.NOT_FOUND if the requested Photo does not exist. * google.rpc.Code.UNAVAILABLE if the requested Photo is still being indexed.\"\n      operationId: streetviewpublish.photo.get\n      parameters:\n        - description: Required. ID of the Photo.\n          in: path\n          name: photoId\n          required: true\n          schema:\n            type: string\n        - description: The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If language_code is unspecified, the user's language preference for Google services is used.\n          in: query\n          name: languageCode\n          schema:\n            type: string\n        - description: Required. Specifies if a download URL for the photo bytes should be returned in the Photo response.\n          in: query\n          name: view\n          schema:\n            enum:\n              - BASIC\n              - INCLUDE_DOWNLOAD_URL\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Photo\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photo\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n  /v1/photo:startUpload:\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n    post:\n      description: \"Creates an upload session to start uploading photo bytes. The method uses the upload URL of the returned UploadRef to upload the bytes for the Photo. In addition to the photo requirements shown in https://support.google.com/maps/answer/7012050?ref_topic=6275604, the photo must meet the following requirements: * Photo Sphere XMP metadata must be included in the photo metadata. See https://developers.google.com/streetview/spherical-metadata for the required fields. * The pixel size of the photo must meet the size requirements listed in https://support.google.com/maps/answer/7012050?ref_topic=6275604, and the photo must be a full 360 horizontally. After the upload completes, the method uses UploadRef with CreatePhoto to create the Photo object entry.\"\n      operationId: streetviewpublish.photo.startUpload\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Empty\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UploadRef\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photo\n  /v1/photoSequence:\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n    post:\n      description: \"After the client finishes uploading the PhotoSequence with the returned UploadRef, CreatePhotoSequence extracts a sequence of 360 photos from a video or Extensible Device Metadata (XDM, http://www.xdm.org/) to be published to Street View on Google Maps. `CreatePhotoSequence` returns an Operation, with the PhotoSequence Id set in the `Operation.name` field. This method returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT if the request is malformed. * google.rpc.Code.NOT_FOUND if the upload reference does not exist.\"\n      operationId: streetviewpublish.photoSequence.create\n      parameters:\n        - description: Required. The input form of PhotoSequence.\n          in: query\n          name: inputType\n          schema:\n            enum:\n              - INPUT_TYPE_UNSPECIFIED\n              - VIDEO\n              - XDM\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PhotoSequence\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Operation\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photoSequence\n  \"/v1/photoSequence/{sequenceId}\":\n    delete:\n      description: \"Deletes a PhotoSequence and its metadata. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested photo sequence. * google.rpc.Code.NOT_FOUND if the photo sequence ID does not exist. * google.rpc.Code.FAILED_PRECONDITION if the photo sequence ID is not yet finished processing.\"\n      operationId: streetviewpublish.photoSequence.delete\n      parameters:\n        - description: Required. ID of the PhotoSequence.\n          in: path\n          name: sequenceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Empty\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photoSequence\n    get:\n      description: \"Gets the metadata of the specified PhotoSequence via the Operation interface. This method returns the following three types of responses: * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` is poulated, which contains a PhotoSequence message. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested PhotoSequence. * google.rpc.Code.NOT_FOUND if the requested PhotoSequence does not exist.\"\n      operationId: streetviewpublish.photoSequence.get\n      parameters:\n        - description: Required. ID of the photo sequence.\n          in: path\n          name: sequenceId\n          required: true\n          schema:\n            type: string\n        - description: \"Optional. The filter expression. For example: `published_status=PUBLISHED`. The filters supported are: `published_status`. See https://google.aip.dev/160 for more information.\"\n          in: query\n          name: filter\n          schema:\n            type: string\n        - description: \"Specifies if a download URL for the photo sequence should be returned in `download_url` of individual photos in the PhotoSequence response. \u003e Note: Currently not implemented.\"\n          in: query\n          name: view\n          schema:\n            enum:\n              - BASIC\n              - INCLUDE_DOWNLOAD_URL\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Operation\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photoSequence\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n  /v1/photoSequence:startUpload:\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n    post:\n      description: Creates an upload session to start uploading photo sequence data. The upload URL of the returned UploadRef is used to upload the data for the `photoSequence`. After the upload is complete, the UploadRef is used with CreatePhotoSequence to create the PhotoSequence object entry.\n      operationId: streetviewpublish.photoSequence.startUpload\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Empty\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UploadRef\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photoSequence\n  /v1/photoSequences:\n    get:\n      description: Lists all the PhotoSequences that belong to the user, in descending CreatePhotoSequence timestamp order.\n      operationId: streetviewpublish.photoSequences.list\n      parameters:\n        - description: 'Optional. The filter expression. For example: `imagery_type=SPHERICAL`. The filters supported are: `imagery_type`, `processing_state`, `min_latitude`, `max_latitude`, `min_longitude`, `max_longitude`, and `filename_query`. See https://google.aip.dev/160 for more information. Filename queries should sent as a Phrase in order to support multple words and special characters by adding escaped quotes. Ex: filename_query=\"example of a phrase.mp4\"'\n          in: query\n          name: filter\n          schema:\n            type: string\n        - description: Optional. The maximum number of photo sequences to return. `pageSize` must be non-negative. If `pageSize` is zero or is not provided, the default page size of 100 is used. The number of photo sequences returned in the response may be less than `pageSize` if the number of matches is less than `pageSize`. This is currently unimplemented but is in process.\n          in: query\n          name: pageSize\n          schema:\n            type: integer\n        - description: Optional. The nextPageToken value returned from a previous ListPhotoSequences request, if any.\n          in: query\n          name: pageToken\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListPhotoSequencesResponse\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photoSequences\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n  /v1/photos:\n    get:\n      description: \"Lists all the Photos that belong to the user. \u003e Note: Recently created photos that are still being indexed are not returned in the response.\"\n      operationId: streetviewpublish.photos.list\n      parameters:\n        - description: \"Optional. The filter expression. For example: `placeId=ChIJj61dQgK6j4AR4GeTYWZsKWw`. The filters supported are: `placeId`, `min_latitude`, `max_latitude`, `min_longitude`, and `max_longitude`. See https://google.aip.dev/160 for more information.\"\n          in: query\n          name: filter\n          schema:\n            type: string\n        - description: Optional. The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If language_code is unspecified, the user's language preference for Google services is used.\n          in: query\n          name: languageCode\n          schema:\n            type: string\n        - description: Optional. The maximum number of photos to return. `pageSize` must be non-negative. If `pageSize` is zero or is not provided, the default page size of 100 is used. The number of photos returned in the response may be less than `pageSize` if the number of photos that belong to the user is less than `pageSize`.\n          in: query\n          name: pageSize\n          schema:\n            type: integer\n        - description: Optional. The nextPageToken value returned from a previous ListPhotos request, if any.\n          in: query\n          name: pageToken\n          schema:\n            type: string\n        - description: Required. Specifies if a download URL for the photos bytes should be returned in the Photos response.\n          in: query\n          name: view\n          schema:\n            enum:\n              - BASIC\n              - INCLUDE_DOWNLOAD_URL\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListPhotosResponse\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photos\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n  /v1/photos:batchDelete:\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n    post:\n      description: Deletes a list of Photos and their metadata. Note that if BatchDeletePhotos fails, either critical fields are missing or there is an authentication error. Even if BatchDeletePhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchDeletePhotosResponse.results. See DeletePhoto for specific failures that can occur per photo.\n      operationId: streetviewpublish.photos.batchDelete\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BatchDeletePhotosRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BatchDeletePhotosResponse\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photos\n  /v1/photos:batchGet:\n    get:\n      description: Gets the metadata of the specified Photo batch. Note that if BatchGetPhotos fails, either critical fields are missing or there is an authentication error. Even if BatchGetPhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchGetPhotosResponse.results. See GetPhoto for specific failures that can occur per photo.\n      operationId: streetviewpublish.photos.batchGet\n      parameters:\n        - description: Optional. The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If language_code is unspecified, the user's language preference for Google services is used.\n          in: query\n          name: languageCode\n          schema:\n            type: string\n        - description: Required. IDs of the Photos. For HTTP GET requests, the URL query parameter should be `photoIds=\u0026photoIds=\u0026...`.\n          explode: true\n          in: query\n          name: photoIds\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n        - description: Required. Specifies if a download URL for the photo bytes should be returned in the Photo response.\n          in: query\n          name: view\n          schema:\n            enum:\n              - BASIC\n              - INCLUDE_DOWNLOAD_URL\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BatchGetPhotosResponse\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photos\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n  /v1/photos:batchUpdate:\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n    post:\n      description: \"Updates the metadata of Photos, such as pose, place association, connections, etc. Changing the pixels of photos is not supported. Note that if BatchUpdatePhotos fails, either critical fields are missing or there is an authentication error. Even if BatchUpdatePhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchUpdatePhotosResponse.results. See UpdatePhoto for specific failures that can occur per photo. Only the fields specified in updateMask field are used. If `updateMask` is not present, the update applies to all fields. The number of UpdatePhotoRequest messages in a BatchUpdatePhotosRequest must not exceed 20. \u003e Note: To update Pose.altitude, Pose.latLngPair has to be filled as well. Otherwise, the request will fail.\"\n      operationId: streetviewpublish.photos.batchUpdate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BatchUpdatePhotosRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BatchUpdatePhotosResponse\"\n          description: Successful response\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/streetviewpublish\n          Oauth2c:\n            - https://www.googleapis.com/auth/streetviewpublish\n      tags:\n        - photos\ncomponents:\n  parameters:\n    _.xgafv:\n      description: V1 error format.\n      in: query\n      name: $.xgafv\n      schema:\n        enum:\n          - \"1\"\n          - \"2\"\n        type: string\n    access_token:\n      description: OAuth access token.\n      in: query\n      name: access_token\n      schema:\n        type: string\n    alt:\n      description: Data format for response.\n      in: query\n      name: alt\n      schema:\n        enum:\n          - json\n          - media\n          - proto\n        type: string\n    callback:\n      description: JSONP\n      in: query\n      name: callback\n      schema:\n        type: string\n    fields:\n      description: Selector specifying which fields to include in a partial response.\n      in: query\n      name: fields\n      schema:\n        type: string\n    key:\n      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n      in: query\n      name: key\n      schema:\n        type: string\n    oauth_token:\n      description: OAuth 2.0 token for the current user.\n      in: query\n      name: oauth_token\n      schema:\n        type: string\n    prettyPrint:\n      description: Returns response with indentations and line breaks.\n      in: query\n      name: prettyPrint\n      schema:\n        type: boolean\n    quotaUser:\n      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n      in: query\n      name: quotaUser\n      schema:\n        type: string\n    uploadType:\n      description: Legacy upload protocol for media (e.g. \"media\", \"multipart\").\n      in: query\n      name: uploadType\n      schema:\n        type: string\n    upload_protocol:\n      description: Upload protocol for media (e.g. \"raw\", \"multipart\").\n      in: query\n      name: upload_protocol\n      schema:\n        type: string\n  schemas:\n    BatchDeletePhotosRequest:\n      description: Request to delete multiple Photos.\n      properties:\n        photoIds:\n          description: \"Required. IDs of the Photos. HTTP GET requests require the following syntax for the URL query parameter: `photoIds=\u0026photoIds=\u0026...`.\"\n          items:\n            type: string\n          type: array\n      type: object\n    BatchDeletePhotosResponse:\n      description: Response to batch delete of one or more Photos.\n      properties:\n        status:\n          description: The status for the operation to delete a single Photo in the batch request.\n          items:\n            $ref: \"#/components/schemas/Status\"\n          type: array\n      type: object\n    BatchGetPhotosResponse:\n      description: Response to batch get of Photos.\n      properties:\n        results:\n          description: List of results for each individual Photo requested, in the same order as the requests in BatchGetPhotos.\n          items:\n            $ref: \"#/components/schemas/PhotoResponse\"\n          type: array\n      type: object\n    BatchUpdatePhotosRequest:\n      description: Request to update the metadata of photos. Updating the pixels of photos is not supported.\n      properties:\n        updatePhotoRequests:\n          description: Required. List of UpdatePhotoRequests.\n          items:\n            $ref: \"#/components/schemas/UpdatePhotoRequest\"\n          type: array\n      type: object\n    BatchUpdatePhotosResponse:\n      description: Response to batch update of metadata of one or more Photos.\n      properties:\n        results:\n          description: List of results for each individual Photo updated, in the same order as the request.\n          items:\n            $ref: \"#/components/schemas/PhotoResponse\"\n          type: array\n      type: object\n    Connection:\n      description: A connection is the link from a source photo to a destination photo.\n      properties:\n        target:\n          $ref: \"#/components/schemas/PhotoId\"\n          description: Required. The destination of the connection from the containing photo to another photo.\n      type: object\n    Empty:\n      description: \"A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }\"\n      properties: {}\n      type: object\n    GpsDataGapFailureDetails:\n      description: Details related to ProcessingFailureReason#GPS_DATA_GAP. If there are multiple GPS data gaps, only the one with the largest duration is reported here.\n      properties:\n        gapDuration:\n          description: The duration of the gap in GPS data that was found.\n          format: google-duration\n          type: string\n        gapStartTime:\n          description: Relative time (from the start of the video stream) when the gap started.\n          format: google-duration\n          type: string\n      type: object\n    Imu:\n      description: IMU data from the device sensors.\n      properties:\n        accelMpsps:\n          description: The accelerometer measurements in meters/sec^2 with increasing timestamps from devices.\n          items:\n            $ref: \"#/components/schemas/Measurement3d\"\n          type: array\n        gyroRps:\n          description: The gyroscope measurements in radians/sec with increasing timestamps from devices.\n          items:\n            $ref: \"#/components/schemas/Measurement3d\"\n          type: array\n        magUt:\n          description: The magnetometer measurements of the magnetic field in microtesla (uT) with increasing timestamps from devices.\n          items:\n            $ref: \"#/components/schemas/Measurement3d\"\n          type: array\n      type: object\n    ImuDataGapFailureDetails:\n      description: Details related to ProcessingFailureReason#IMU_DATA_GAP. If there are multiple IMU data gaps, only the one with the largest duration is reported here.\n      properties:\n        gapDuration:\n          description: The duration of the gap in IMU data that was found.\n          format: google-duration\n          type: string\n        gapStartTime:\n          description: Relative time (from the start of the video stream) when the gap started.\n          format: google-duration\n          type: string\n      type: object\n    InsufficientGpsFailureDetails:\n      description: Details related to ProcessingFailureReason#INSUFFICIENT_GPS.\n      properties:\n        gpsPointsFound:\n          description: The number of GPS points that were found in the video.\n          format: int32\n          type: integer\n      type: object\n    LatLng:\n      description: An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.\n      properties:\n        latitude:\n          description: The latitude in degrees. It must be in the range [-90.0, +90.0].\n          format: double\n          type: number\n        longitude:\n          description: The longitude in degrees. It must be in the range [-180.0, +180.0].\n          format: double\n          type: number\n      type: object\n    LatLngBounds:\n      description: A rectangle in geographical coordinates.\n      properties:\n        northeast:\n          $ref: \"#/components/schemas/LatLng\"\n          description: The northeast corner of these bounds.\n        southwest:\n          $ref: \"#/components/schemas/LatLng\"\n          description: The southwest corner of these bounds.\n      type: object\n    Level:\n      description: Level information containing level number and its corresponding name.\n      properties:\n        name:\n          description: Required. A name assigned to this Level, restricted to 3 characters. Consider how the elevator buttons would be labeled for this level if there was an elevator.\n          type: string\n        number:\n          description: Optional. Floor number, used for ordering. 0 indicates the ground level, 1 indicates the first level above ground level, -1 indicates the first level under ground level. Non-integer values are OK.\n          format: double\n          type: number\n      type: object\n    ListPhotoSequencesResponse:\n      description: Response to list all photo sequences that belong to a user.\n      properties:\n        nextPageToken:\n          description: Token to retrieve the next page of results, or empty if there are no more results in the list.\n          type: string\n        photoSequences:\n          description: List of photo sequences via Operation interface. The maximum number of items returned is based on the pageSize field in the request. Each item in the list can have three possible states, * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` contains a PhotoSequence message, In each sequence, only Id is populated.\n          items:\n            $ref: \"#/components/schemas/Operation\"\n          type: array\n      type: object\n    ListPhotosResponse:\n      description: Response to list all photos that belong to a user.\n      properties:\n        nextPageToken:\n          description: Token to retrieve the next page of results, or empty if there are no more results in the list.\n          type: string\n        photos:\n          description: List of photos. The pageSize field in the request determines the number of items returned.\n          items:\n            $ref: \"#/components/schemas/Photo\"\n          type: array\n      type: object\n    Measurement3d:\n      description: A Generic 3d measurement sample.\n      properties:\n        captureTime:\n          description: The timestamp of the IMU measurement.\n          format: google-datetime\n          type: string\n        x:\n          description: The sensor measurement in the x axis.\n          format: float\n          type: number\n        y:\n          description: The sensor measurement in the y axis.\n          format: float\n          type: number\n        z:\n          description: The sensor measurement in the z axis.\n          format: float\n          type: number\n      type: object\n    NotOutdoorsFailureDetails:\n      description: Details related to ProcessingFailureReason#NOT_OUTDOORS. If there are multiple indoor frames found, the first frame is recorded here.\n      properties:\n        startTime:\n          description: Relative time (from the start of the video stream) when an indoor frame was found.\n          format: google-duration\n          type: string\n      type: object\n    Operation:\n      description: This resource represents a long-running operation that is the result of a network API call.\n      properties:\n        done:\n          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.\n          type: boolean\n        error:\n          $ref: \"#/components/schemas/Status\"\n          description: The error result of the operation in case of failure or cancellation.\n        metadata:\n          additionalProperties:\n            description: Properties of the object. Contains field @type with type URL.\n          description: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.\n          type: object\n        name:\n          description: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.\n          type: string\n        response:\n          additionalProperties:\n            description: Properties of the object. Contains field @type with type URL.\n          description: The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.\n          type: object\n      type: object\n    Photo:\n      description: Photo is used to store 360 photos along with photo metadata.\n      properties:\n        captureTime:\n          description: Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.\n          format: google-datetime\n          type: string\n        connections:\n          description: Optional. Connections to other photos. A connection represents the link from this photo to another photo.\n          items:\n            $ref: \"#/components/schemas/Connection\"\n          type: array\n        downloadUrl:\n          description: Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.\n          readOnly: true\n          type: string\n        mapsPublishStatus:\n          description: Output only. Status in Google Maps, whether this photo was published or rejected.\n          enum:\n            - UNSPECIFIED_MAPS_PUBLISH_STATUS\n            - PUBLISHED\n            - REJECTED_UNKNOWN\n          readOnly: true\n          type: string\n        photoId:\n          $ref: \"#/components/schemas/PhotoId\"\n          description: Required. Output only. Required when updating a photo. Output only when creating a photo. Identifier for the photo, which is unique among all photos in Google.\n          readOnly: true\n        places:\n          description: Optional. Places where this photo belongs.\n          items:\n            $ref: \"#/components/schemas/Place\"\n          type: array\n        pose:\n          $ref: \"#/components/schemas/Pose\"\n          description: Optional. Pose of the photo.\n        shareLink:\n          description: Output only. The share link for the photo.\n          readOnly: true\n          type: string\n        thumbnailUrl:\n          description: Output only. The thumbnail URL for showing a preview of the given photo.\n          readOnly: true\n          type: string\n        transferStatus:\n          description: Output only. Status of rights transfer on this photo.\n          enum:\n            - TRANSFER_STATUS_UNKNOWN\n            - NEVER_TRANSFERRED\n            - PENDING\n            - COMPLETED\n            - REJECTED\n            - EXPIRED\n            - CANCELLED\n            - RECEIVED_VIA_TRANSFER\n          readOnly: true\n          type: string\n        uploadReference:\n          $ref: \"#/components/schemas/UploadRef\"\n          description: Input only. Required when creating a photo. Input only. The resource URL where the photo bytes are uploaded to.\n        uploadTime:\n          description: Output only. Time when the image was uploaded.\n          format: google-datetime\n          readOnly: true\n          type: string\n        viewCount:\n          description: Output only. View count of the photo.\n          format: int64\n          readOnly: true\n          type: string\n      type: object\n    PhotoId:\n      description: Identifier for a Photo.\n      properties:\n        id:\n          description: A unique identifier for a photo.\n          type: string\n      type: object\n    PhotoResponse:\n      description: Response payload for a single Photo in batch operations including BatchGetPhotos and BatchUpdatePhotos.\n      properties:\n        photo:\n          $ref: \"#/components/schemas/Photo\"\n          description: The Photo resource, if the request was successful.\n        status:\n          $ref: \"#/components/schemas/Status\"\n          description: The status for the operation to get or update a single photo in the batch request.\n      type: object\n    PhotoSequence:\n      description: A sequence of 360 photos along with metadata.\n      properties:\n        captureTimeOverride:\n          description: Optional. Absolute time when the photo sequence starts to be captured. If the photo sequence is a video, this is the start time of the video. If this field is populated in input, it overrides the capture time in the video or XDM file.\n          format: google-datetime\n          type: string\n        distanceMeters:\n          description: Output only. The computed distance of the photo sequence in meters.\n          format: double\n          readOnly: true\n          type: number\n        failureDetails:\n          $ref: \"#/components/schemas/ProcessingFailureDetails\"\n          description: Output only. If this sequence has `failure_reason` set, this may contain additional details about the failure.\n          readOnly: true\n        failureReason:\n          description: Output only. If this sequence has processing_state = FAILED, this will contain the reason why it failed. If the processing_state is any other value, this field will be unset.\n          enum:\n            - PROCESSING_FAILURE_REASON_UNSPECIFIED\n            - LOW_RESOLUTION\n            - DUPLICATE\n            - INSUFFICIENT_GPS\n            - NO_OVERLAP_GPS\n            - INVALID_GPS\n            - FAILED_TO_REFINE_POSITIONS\n            - TAKEDOWN\n            - CORRUPT_VIDEO\n            - INTERNAL\n            - INVALID_VIDEO_FORMAT\n            - INVALID_VIDEO_DIMENSIONS\n            - INVALID_CAPTURE_TIME\n            - GPS_DATA_GAP\n            - JUMPY_GPS\n            - INVALID_IMU\n            - INSUFFICIENT_IMU\n            - INSUFFICIENT_OVERLAP_TIME_SERIES\n            - IMU_DATA_GAP\n            - UNSUPPORTED_CAMERA\n            - NOT_OUTDOORS\n            - INSUFFICIENT_VIDEO_FRAMES\n          readOnly: true\n          type: string\n        filename:\n          description: Output only. The filename of the upload. Does not include the directory path. Only available if the sequence was uploaded on a platform that provides the filename.\n          readOnly: true\n          type: string\n        gpsSource:\n          description: Input only. If both raw_gps_timeline and the Camera Motion Metadata Track (CAMM) contain GPS measurements, indicate which takes precedence.\n          enum:\n            - PHOTO_SEQUENCE\n            - CAMERA_MOTION_METADATA_TRACK\n          type: string\n        id:\n          description: Output only. Unique identifier for the photo sequence. This also acts as a long running operation ID if uploading is performed asynchronously.\n          readOnly: true\n          type: string\n        imu:\n          $ref: \"#/components/schemas/Imu\"\n          description: Input only. Three axis IMU data for the collection. If this data is too large to put in the request, then it should be put in the CAMM track for the video. This data always takes precedence over the equivalent CAMM data, if it exists.\n        photos:\n          description: Output only. Photos with increasing timestamps.\n          items:\n            $ref: \"#/components/schemas/Photo\"\n          readOnly: true\n          type: array\n        processingState:\n          description: Output only. The processing state of this sequence.\n          enum:\n            - PROCESSING_STATE_UNSPECIFIED\n            - PENDING\n            - PROCESSING\n            - PROCESSED\n            - FAILED\n          readOnly: true\n          type: string\n        rawGpsTimeline:\n          description: Input only. Raw GPS measurements with increasing timestamps from the device that aren't time synced with each photo. These raw measurements will be used to infer the pose of each frame. Required in input when InputType is VIDEO and raw GPS measurements are not in Camera Motion Metadata Track (CAMM). User can indicate which takes precedence using gps_source if raw GPS measurements are provided in both raw_gps_timeline and Camera Motion Metadata Track (CAMM).\n          items:\n            $ref: \"#/components/schemas/Pose\"\n          type: array\n        sequenceBounds:\n          $ref: \"#/components/schemas/LatLngBounds\"\n          description: Output only. A rectangular box that encapsulates every image in this photo sequence.\n          readOnly: true\n        uploadReference:\n          $ref: \"#/components/schemas/UploadRef\"\n          description: Input only. Required when creating photo sequence. The resource name where the bytes of the photo sequence (in the form of video) are uploaded.\n        uploadTime:\n          description: Output only. The time this photo sequence was created in uSV Store service.\n          format: google-datetime\n          readOnly: true\n          type: string\n        viewCount:\n          description: Output only. The total number of views that all the published images in this PhotoSequence have received.\n          format: int64\n          readOnly: true\n          type: string\n      type: object\n    Place:\n      description: Place metadata for an entity.\n      properties:\n        languageCode:\n          description: Output only. The language_code that the name is localized with. This should be the language_code specified in the request, but may be a fallback.\n          readOnly: true\n          type: string\n        name:\n          description: Output only. The name of the place, localized to the language_code.\n          readOnly: true\n          type: string\n        placeId:\n          description: Place identifier, as described in https://developers.google.com/places/place-id.\n          type: string\n      type: object\n    Pose:\n      description: Raw pose measurement for an entity.\n      properties:\n        accuracyMeters:\n          description: \"The estimated horizontal accuracy of this pose in meters with 68% confidence (one standard deviation). For example, on Android, this value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy(). Other platforms have different methods of obtaining similar accuracy estimations.\"\n          format: float\n          type: number\n        altitude:\n          description: Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an unmeasured quantity.\n          format: double\n          type: number\n        gpsRecordTimestampUnixEpoch:\n          description: Time of the GPS record since UTC epoch.\n          format: google-datetime\n          type: string\n        heading:\n          description: The following pose parameters pertain to the center of the photo. They match https://developers.google.com/streetview/spherical-metadata. Compass heading, measured at the center of the photo in degrees clockwise from North. Value must be \u003e=0 and \u003c360. NaN indicates an unmeasured quantity.\n          format: double\n          type: number\n        latLngPair:\n          $ref: \"#/components/schemas/LatLng\"\n          description: \"Latitude and longitude pair of the pose, as explained here: https://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng When creating a Photo, if the latitude and longitude pair are not provided, the geolocation from the exif header is used. A latitude and longitude pair not provided in the photo or exif header causes the photo process to fail.\"\n        level:\n          $ref: \"#/components/schemas/Level\"\n          description: Level (the floor in a building) used to configure vertical navigation.\n        pitch:\n          description: Pitch, measured at the center of the photo in degrees. Value must be \u003e=-90 and \u003c= 90. A value of -90 means looking directly down, and a value of 90 means looking directly up. NaN indicates an unmeasured quantity.\n          format: double\n          type: number\n        roll:\n          description: Roll, measured in degrees. Value must be \u003e= 0 and \u003c360. A value of 0 means level with the horizon. NaN indicates an unmeasured quantity.\n          format: double\n          type: number\n      type: object\n    ProcessingFailureDetails:\n      description: Additional details to accompany the ProcessingFailureReason enum. This message is always expected to be used in conjunction with ProcessingFailureReason, and the oneof value set in this message should match the FailureReason.\n      properties:\n        gpsDataGapDetails:\n          $ref: \"#/components/schemas/GpsDataGapFailureDetails\"\n          description: See GpsDataGapFailureDetails.\n        imuDataGapDetails:\n          $ref: \"#/components/schemas/ImuDataGapFailureDetails\"\n          description: See ImuDataGapFailureDetails.\n        insufficientGpsDetails:\n          $ref: \"#/components/schemas/InsufficientGpsFailureDetails\"\n          description: See InsufficientGpsFailureDetails.\n        notOutdoorsDetails:\n          $ref: \"#/components/schemas/NotOutdoorsFailureDetails\"\n          description: See NotOutdoorsFailureDetails.\n      type: object\n    Status:\n      description: \"The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).\"\n      properties:\n        code:\n          description: The status code, which should be an enum value of google.rpc.Code.\n          format: int32\n          type: integer\n        details:\n          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.\n          items:\n            additionalProperties:\n              description: Properties of the object. Contains field @type with type URL.\n            type: object\n          type: array\n        message:\n          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.\n          type: string\n      type: object\n    UpdatePhotoRequest:\n      description: Request to update the metadata of a Photo. Updating the pixels of a photo is not supported.\n      properties:\n        photo:\n          $ref: \"#/components/schemas/Photo\"\n          description: Required. Photo object containing the new metadata.\n        updateMask:\n          description: \"Required. Mask that identifies fields on the photo metadata to update. If not present, the old Photo metadata is entirely replaced with the new Photo metadata in this request. The update fails if invalid fields are specified. Multiple fields can be specified in a comma-delimited list. The following fields are valid: * `pose.heading` * `pose.latLngPair` * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` \u003e Note: When updateMask contains repeated fields, the entire set of repeated values get replaced with the new contents. For example, if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections` is empty, all connections are removed.\"\n          format: google-fieldmask\n          type: string\n      type: object\n    UploadRef:\n      description: Upload reference for media files.\n      properties:\n        uploadUrl:\n          description: 'An upload reference should be unique for each user. It follows the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\"'\n          type: string\n      type: object\n  securitySchemes:\n    Oauth2:\n      description: Oauth 2.0 implicit authentication\n      flows:\n        implicit:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            https://www.googleapis.com/auth/streetviewpublish: Publish and manage your 360 photos on Google Street View\n      type: oauth2\n    Oauth2c:\n      description: Oauth 2.0 authorizationCode authentication\n      flows:\n        authorizationCode:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            https://www.googleapis.com/auth/streetviewpublish: Publish and manage your 360 photos on Google Street View\n          tokenUrl: https://accounts.google.com/o/oauth2/token\n      type: oauth2\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@20502d3674db5fa060375c4cf54d52234b351baf/-/blob/APIs/googleapis.com/streetviewpublish/v1/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/20502d3674db5fa060375c4cf54d52234b351baf/APIs/googleapis.com/streetviewpublish/v1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:30433: duplicate path: \"/v1/photo/{photoId}\""
}