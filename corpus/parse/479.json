{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kubeshop/testkube"
		},
		"file": {
			"name": "testkube.yaml",
			"path": "api/v1/testkube.yaml",
			"content": "openapi: 3.0.1\n\ninfo:\n  title: TestKube API\n  description: \"TestKube provides a Kubernetes-native framework for test definition, execution and results\"\n  contact:\n    email: testkube@kubeshop.io\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\n  version: 1.0.0\n\nexternalDocs:\n  description: \"Find out more about testkube\"\n  url: http://testkube.io\n\ntags:\n  - name: api\n    description: \"TestKube API operations\"\n  - name: scripts\n    description: \"Script operations\"\n  - name: executions\n    description: \"Execution operations\"\n  - name: tests\n    description: \"Scripts orchestration operations\"\n  - name: tags\n    description: \"Listing all available tags\"\n\npaths:\n  /tests:\n    post:\n      tags:\n        - tests\n        - api\n      summary: \"Create new test\"\n      description: \"Create new test action\"\n      operationId: createTest\n      requestBody:\n        $ref: \"#/components/schemas/TestUpsertRequest\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Test\"\n        500:\n          description: \"problem with creating script\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      tags:\n        - tests\n        - api\n      summary: \"Get all tests\"\n      description: \"Returns array of tests\"\n      operationId: listTests\n      parameters:\n        - $ref: \"#/components/parameters/Tags\"\n        - $ref: \"#/components/parameters/TextSearch\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Test\"\n        500:\n          description: \"problem with getting script executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /tests/{id}:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test\n      tags:\n        - tests\n        - api\n      summary: \"Get script execution by ID\"\n      description: \"Returns execution with given executionID\"\n      operationId: getTestByID\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Execution\"\n        500:\n          description: \"problem with getting test from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-executions:\n    get:\n      tags:\n        - executions\n        - api\n      summary: \"Get all test executions\"\n      description: \"Returns array of test executions\"\n      operationId: listTestExecutions\n      parameters:\n        - $ref: \"#/components/parameters/TestName\"\n        - $ref: \"#/components/parameters/TextSearch\"\n        - $ref: \"#/components/parameters/PageSize\"\n        - $ref: \"#/components/parameters/PageIndex\"\n        - $ref: \"#/components/parameters/ExecutionsStatusFilter\"\n        - $ref: \"#/components/parameters/StartDateFilter\"\n        - $ref: \"#/components/parameters/EndDateFilter\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestExecutionsResult\"\n        500:\n          description: \"problem with getting script executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /test-executions/{id}:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the test execution\n      tags:\n        - executions\n        - api\n      summary: \"Get test execution by ID\"\n      description: \"Returns test execution with given executionID\"\n      operationId: getTestExecutionByID\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestExecution\"\n        500:\n          description: \"problem with getting script executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions:\n    get:\n      tags:\n        - executions\n        - api\n      summary: \"Get all script executions\"\n      description: \"Returns array of scripts executions\"\n      operationId: listExecutions\n      parameters:\n        - $ref: \"#/components/parameters/TestName\"\n        - $ref: \"#/components/parameters/Type\"\n        - $ref: \"#/components/parameters/TextSearch\"\n        - $ref: \"#/components/parameters/PageSize\"\n        - $ref: \"#/components/parameters/PageIndex\"\n        - $ref: \"#/components/parameters/ExecutionsStatusFilter\"\n        - $ref: \"#/components/parameters/StartDateFilter\"\n        - $ref: \"#/components/parameters/EndDateFilter\"\n        - $ref: \"#/components/parameters/Tags\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutionsResult\"\n        500:\n          description: \"problem with getting script executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions/{executionID}:\n    get:\n      parameters:\n        - in: path\n          name: executionID\n          schema:\n            type: string\n          required: true\n          description: ID of the script execution\n      tags:\n        - executions\n        - api\n      summary: \"Get script execution by ID\"\n      description: \"Returns execution with given executionID\"\n      operationId: getExecutionByID\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Execution\"\n        500:\n          description: \"problem with getting script executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions/{id}/artifacts:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the script execution\n      tags:\n        - artifacts\n        - executions\n        - api\n      summary: \"Get execution's artifacts by ID\"\n      description: \"Returns artifacts of the given executionID\"\n      operationId: getExecutionArtifacts\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Artifact\"\n        500:\n          description: \"problem with getting execution's artifacts from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executions/{id}/artifacts/{filename}:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the script execution\n        - in: path # minio/[bucket_exec_id]/cypress/video/somevideo.avi\n          name: filename\n          schema:\n            type: string\n          required: true\n          description: name of the file in the bucket\n      operationId: downloadFile\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        500:\n          description: \"problem with getting artifacts from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /scripts:\n    get:\n      tags:\n        - scripts\n        - api\n      summary: \"List scripts\"\n      description: \"filters will be added later\"\n      operationId: listScripts\n      parameters:\n        - $ref: \"#/components/parameters/Tags\"\n        - $ref: \"#/components/parameters/TextSearch\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Script\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    post:\n      tags:\n        - scripts\n        - api\n      summary: \"create new script\"\n      description: \"create new script based on script content or git based data\"\n      operationId: createScript\n      requestBody:\n        description: script details body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScriptUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Script\"\n        400:\n          description: \"problem with script definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      tags:\n        - scripts\n        - api\n      summary: \"delete scripts\"\n      description: \"deletes all the scripts\"\n      operationId: deleteScripts\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /scripts/{id}:\n    patch:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the script execution\n      tags:\n        - scripts\n        - api\n      summary: \"update script\"\n      description: \"update script based on script content or git based data\"\n      operationId: updateScript\n      requestBody:\n        description: script details body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScriptUpsertRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Script\"\n        400:\n          description: \"problem with script definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      tags:\n        - scripts\n        - api\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the script\n      summary: \"Get script\"\n      description: \"Gets the specified script\"\n      operationId: getScript\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Script\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      tags:\n        - scripts\n        - api\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the script\n      summary: \"delete script\"\n      description: \"deletes a script\"\n      operationId: deleteScript\n      responses:\n        204:\n          description: \"no content\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /scripts/{id}/executions:\n    post:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the script\n        - in: query\n          name: namespace\n          schema:\n            type: integer\n          description: kubernetes namespace\n          required: false\n        - $ref: \"#/components/parameters/Tags\"\n      tags:\n        - api\n        - scripts\n        - executions\n      summary: \"Starts new script execution\"\n      description: \"New script execution returns new execution details on successful execution start\"\n      operationId: executeScript\n      requestBody:\n        description: body passed to configure execution\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ExecutionRequest\"\n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: \"#/components/schemas/ExecutionResult\"\n        400:\n          description: \"problem with request body\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with script execution\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the script\n        - $ref: \"#/components/parameters/PageSize\"\n        - $ref: \"#/components/parameters/PageIndex\"\n        - $ref: \"#/components/parameters/ExecutionsStatusFilter\"\n        - $ref: \"#/components/parameters/StartDateFilter\"\n        - $ref: \"#/components/parameters/EndDateFilter\"\n      tags:\n        - api\n        - scripts\n        - executions\n      summary: \"Get all script executions\"\n      description: \"Returns array of all available script executions\"\n      operationId: listScriptExecutions\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutionsResult\"\n        500:\n          description: \"problem with getting script executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /scripts/{id}/executions/{executionID}:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the script\n        - in: path\n          name: executionID\n          schema:\n            type: string\n          required: true\n          description: ID of the script execution\n      tags:\n        - api\n        - scripts\n        - executions\n      summary: \"Get script execution\"\n      description: \"Returns execution with given executionID\"\n      operationId: getScriptExecution\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Execution\"\n        500:\n          description: \"problem with getting script executions from storage\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    delete:\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: ID of the script\n        - in: path\n          name: executionID\n          schema:\n            type: string\n          required: true\n          description: ID of the script execution\n      tags:\n        - api\n        - scripts\n        - executions\n      summary: \"Aborts execution\"\n      description: \"Aborts execution and returns execution details\"\n      operationId: abortExecution\n      responses:\n        501:\n          description: not implemented yet\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: \"#/components/schemas/ExecutionResult\"\n\n  /executors:\n    get:\n      tags:\n        - executor\n        - api\n      summary: \"List executors\"\n      description: \"List executors available in cluster\"\n      operationId: listExecutors\n      parameters:\n        - in: query\n          name: namespace\n          schema:\n            type: integer\n          description: kubernetes namespace\n          required: false\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Executor\"\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n    post:\n      tags:\n        - scripts\n        - api\n      summary: \"create new executor\"\n      description: \"create new executor based on params passed in request\"\n      operationId: createExecutor\n      requestBody:\n        description: executor request body data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ExecutorCreateRequest\"\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ExecutorDetails\"\n        400:\n          description: \"problem with executor definition - probably some bad input occurs (invalid JSON body or similar)\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /executors/{name}:\n    delete:\n      parameters:\n        - in: path\n          name: name\n          schema:\n            type: string\n          required: true\n          description: Executor CRD name\n        - in: query\n          name: namespace\n          schema:\n            type: string\n          required: true\n          description: CRD namespace\n      tags:\n        - api\n        - executor\n      summary: \"Delete executor\"\n      description: \"Deletes executor by its name\"\n      operationId: deleteExecutor\n      responses:\n        204:\n          description: executor deleted successfuly\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n    get:\n      parameters:\n        - in: path\n          name: name\n          schema:\n            type: string\n          required: true\n          description: Executor CRD name\n        - in: query\n          name: namespace\n          schema:\n            type: integer\n          description: kubernetes namespace\n          required: false\n      tags:\n        - api\n        - executor\n      summary: \"Get executor details\"\n      description: \"Returns executors data with executions passed to executor\"\n      operationId: getExecutor\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: \"#/components/schemas/ExecutorDetails\"\n        502:\n          description: \"problem with communicating with kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n        500:\n          description: \"problem with getting executor data\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\n  /tags:\n    get:\n      tags:\n        - tags\n      summary: \"List tags\"\n      description: \"list all available tags\"\n      operationId: listTags\n      responses:\n        200:\n          description: \"successful operation\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        502:\n          description: \"problem with read information from kubernetes cluster\"\n          content:\n            application/problem+json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n\ncomponents:\n  schemas:\n    ObjectRef:\n      required:\n        - name\n      type: object\n      properties:\n        namespace:\n          type: string\n          description: object kubernetes namespace\n        name:\n          type: string\n          description: object name\n\n    Test:\n      type: object\n      required:\n        - name\n        - status\n        - steps\n      properties:\n        name:\n          type: string\n        namespace:\n          type: string\n        description:\n          type: string\n        before:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestStep\"\n          description: Run this step before whole suite\n        tags:\n          type: array\n          items:\n            type: string\n          description: test tags\n        steps:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestStep\"\n          description: Steps to run\n        after:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestStep\"\n          description: Run this step after whole suite\n        repeats:\n          type: integer\n          default: 1\n\n    TestStepType:\n      type: string\n      enum:\n        - executeScript\n        - delay\n\n    TestStep:\n      type: object\n      required:\n        - name\n        - type\n        - stopTestOnFailure\n      properties:\n        stopTestOnFailure:\n          type: boolean\n          default: true\n        execute:\n          $ref: \"#/components/schemas/TestStepExecuteScript\"\n        delay:\n          $ref: \"#/components/schemas/TestStepDelay\"\n\n    TestStepExecuteScript:\n      allOf:\n        - $ref: \"#/components/schemas/ObjectRef\"\n\n    TestStepDelay:\n      type: object\n      required:\n        - duration\n        - name\n      properties:\n        duration:\n          type: integer\n          default: 0\n          description: delay duration in milliseconds\n\n    TestExecution:\n      type: object\n      description: API server test scripts executions container\n      required:\n        - id\n        - name\n        - test\n      properties:\n        id:\n          type: string\n          description: execution id\n          format: bson objectId\n        name:\n          type: string\n          description: \"execution name\"\n        test:\n          $ref: \"#/components/schemas/ObjectRef\"\n        status:\n          $ref: \"#/components/schemas/TestStatus\"\n        envs:\n          type: object\n          description: \"environment variables passed to executor\"\n          additionalProperties:\n            type: string\n          example:\n            record: \"true\"\n            prefix: \"some-\"\n        params:\n          type: object\n          description: \"execution params passed to executor converted to vars for usage in tests\"\n          additionalProperties:\n            type: string\n          example:\n            users: \"3\"\n            prefix: \"some-\"\n        startTime:\n          type: string\n          description: \"test start time\"\n          format: date-time\n        endTime:\n          type: string\n          description: \"test end time\"\n          format: date-time\n        duration:\n          type: string\n          description: \"test duration\"\n        stepResults:\n          type: array\n          description: \"steps execution restults\"\n          items:\n            $ref: \"#/components/schemas/TestStepExecutionResult\"\n            description: test execution results\n        tags:\n          type: array\n          items:\n            type: string\n          description: test execution tags\n\n    TestStatus:\n      type: string\n      enum:\n        - queued\n        - pending\n        - success\n        - error\n\n    TestStepExecutionResult:\n      description: execution result returned from executor\n      type: object\n      required:\n        - status\n      properties:\n        step:\n          $ref: \"#/components/schemas/TestStep\"\n        script:\n          $ref: \"#/components/schemas/ObjectRef\"\n          description: name and namespace of script in object reference\n        execution:\n          $ref: \"#/components/schemas/Execution\"\n          description: test step execution\n\n    TestExecutionsResult:\n      description: the result for a page of executions\n      type: object\n      required:\n        - totals\n        - results\n      properties:\n        totals:\n          $ref: \"#/components/schemas/ExecutionsTotals\"\n        filtered:\n          $ref: \"#/components/schemas/ExecutionsTotals\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestExecutionSummary\"\n\n    TestExecutionSummary:\n      description: test execution summary\n      type: object\n      required:\n        - id\n        - name\n        - testName\n        - status\n      properties:\n        id:\n          type: string\n          description: execution id\n          format: bson objectId\n        name:\n          type: string\n          description: execution name\n        testName:\n          type: string\n          description: name of the script\n        status:\n          $ref: \"#/components/schemas/TestStatus\"\n        startTime:\n          type: string\n          description: \"test execution start time\"\n          format: date-time\n        endTime:\n          type: string\n          description: \"test execution end time\"\n          format: date-time\n        duration:\n          type: string\n          description: \"test execution duration\"\n        execution:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TestStepExecutionSummary\"\n\n    TestStepExecutionSummary:\n      description: test execution summary\n      type: object\n      required:\n        - id\n        - name\n        - status\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n          description: execution name\n        scriptName:\n          type: string\n          description: script name\n        status:\n          $ref: \"#/components/schemas/ExecutionStatus\"\n        type:\n          $ref: \"#/components/schemas/TestStepType\"\n\n    Script:\n      type: object\n      properties:\n        name:\n          type: string\n          description: script name\n        namespace:\n          type: string\n          description: script namespace\n        type:\n          type: string\n          description: script type\n        content:\n          $ref: \"#/components/schemas/ScriptContent\"\n          description: script content\n        created:\n          type: string\n          format: date-time\n        tags:\n          type: array\n          items:\n            type: string\n          description: script tags\n\n    ScriptContent:\n      type: object\n      properties:\n        type:\n          type: string\n          description: script type\n          enum:\n            - string\n            - file-uri\n            - git-file\n            - git-dir\n        repository:\n          $ref: \"#/components/schemas/Repository\"\n        data:\n          type: string\n          description: script content data as string\n        uri:\n          type: string\n          description: script content\n\n    Execution:\n      type: object\n      description: API server script execution\n      properties:\n        id:\n          type: string\n          description: execution id\n          format: bson objectId\n        scriptName:\n          type: string\n          description: unique script name (CRD Script name)\n        scriptNamespace:\n          type: string\n          description: script namespace\n        scriptType:\n          type: string\n          description: script type e.g. postman/collection\n        name:\n          type: string\n          description: \"execution name\"\n        envs:\n          type: object\n          description: \"environment variables passed to executor\"\n          additionalProperties:\n            type: string\n          example:\n            record: \"true\"\n            prefix: \"some-\"\n        args:\n          type: array\n          description: \"additional arguments/flags passed to executor binary\"\n          example: [\"--concurrency\", \"2\", \"--remote\", \"--some\", \"blabla\"]\n          items:\n            type: string\n        params:\n          type: object\n          description: \"execution params passed to executor converted to vars for usage in tests\"\n          additionalProperties:\n            type: string\n          example:\n            users: \"3\"\n            prefix: \"some-\"\n        paramsFile:\n          type: string\n          description: params file content - need to be in format for particular executor (e.g. postman envs file)\n        content:\n          $ref: \"#/components/schemas/ScriptContent\"\n        startTime:\n          type: string\n          description: \"test start time\"\n          format: date-time\n        endTime:\n          type: string\n          description: \"test end time\"\n          format: date-time\n        duration:\n          type: string\n          description: \"test duration\"\n        executionResult:\n          required: true\n          description: result get from executor\n          $ref: \"#/components/schemas/ExecutionResult\"\n        tags:\n          type: array\n          items:\n            type: string\n          description: execution tags\n\n    Artifact:\n      type: object\n      description: API server artifact\n      properties:\n        name:\n          type: string\n          description: artifact file path\n        size:\n          type: integer\n          description: file size in bytes\n\n    ExecutionsResult:\n      description: the result for a page of executions\n      type: object\n      required:\n        - totals\n        - results\n      properties:\n        totals:\n          $ref: \"#/components/schemas/ExecutionsTotals\"\n        filtered:\n          $ref: \"#/components/schemas/ExecutionsTotals\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ExecutionSummary\"\n\n    ExecutionSummary:\n      description: execution summary\n      type: object\n      required:\n        - id\n        - name\n        - scriptName\n        - scriptType\n        - status\n      properties:\n        id:\n          type: string\n          description: execution id\n          format: bson objectId\n        name:\n          type: string\n          description: execution name\n        scriptName:\n          type: string\n          description: name of the script\n        scriptType:\n          type: string\n          description: the type of script for this execution\n        status:\n          $ref: \"#/components/schemas/ExecutionStatus\"\n        startTime:\n          type: string\n          description: \"test execution start time\"\n          format: date-time\n        endTime:\n          type: string\n          description: \"test execution end time\"\n          format: date-time\n\n    ExecutionStatus:\n      type: string\n      enum:\n        - queued\n        - pending\n        - success\n        - error\n\n    ExecutionResult:\n      description: execution result returned from executor\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          $ref: \"#/components/schemas/ExecutionStatus\"\n        output:\n          type: string\n          description: \"RAW Script execution output, depends of reporter used in particular tool\"\n        outputType:\n          type: string\n          description: \"output type depends of reporter used in partucular tool\"\n          enum:\n            - text/plain\n            - application/junit+xml\n            - application/json\n        errorMessage:\n          type: string\n          description: \"error message when status is error, separate to output as output can be partial in case of error\"\n        steps:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ExecutionStepResult\"\n          description: execution steps (for collection of requests)\n\n    ExecutionStepResult:\n      description: execution result data\n      type: object\n      required:\n        - name\n        - status\n      properties:\n        name:\n          type: string\n          description: step name\n        duration:\n          type: string\n          format: duration\n        status:\n          type: string\n          description: execution step status\n          enum: [success, error]\n        assertionResults:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AssertionResult\"\n\n    AssertionResult:\n      description: execution result data\n      type: object\n      properties:\n        name:\n          type: string\n        status:\n          type: string\n          enum: [success, error]\n        errorMessage:\n          type: string\n          nullable: true\n\n    ExecutionsTotals:\n      type: object\n      description: various execution counters\n      required:\n        - results\n        - passed\n        - failed\n        - queued\n        - pending\n      properties:\n        results:\n          type: integer\n          description: the total number of executions available\n        passed:\n          type: integer\n          description: the total number of passed executions available\n        failed:\n          type: integer\n          description: the total number of failed executions available\n        queued:\n          type: integer\n          description: the total number of queued executions available\n        pending:\n          type: integer\n          description: the total number of running executions available\n\n    ServerInfo:\n      type: object\n      description: Server information with build version, build commit etc.\n      required:\n        - version\n      properties:\n        version:\n          type: string\n          description: build version\n        commit:\n          type: string\n          description: build commit\n\n    #\n    # Requests\n    #\n\n    ExecutorStartRequest:\n      description: scripts execution request body when calling new execution request\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of script execution to handle by executor, execution need to be able to return execution info based on this ID\n          example: af7f8afa8bc8ab8ab8a83b8\n        type:\n          type: string\n          description: script type\n          example: postaman/collection\n        name:\n          type: string\n          description: script execution custom name\n          example: testing with 1000 users\n        params:\n          type: object\n          description: \"execution params passed to executor\"\n          additionalProperties:\n            type: string\n          example:\n            users: \"3\"\n            prefix: \"some-\"\n        content:\n          $ref: \"#/components/schemas/ScriptContent\"\n\n    Repository:\n      description: repository representation for tests in git repositories\n      type: object\n      required:\n        - type\n        - uri\n        - branch\n      properties:\n        type:\n          type: string\n          enum:\n            - git\n          description: VCS repository type\n        uri:\n          type: string\n          description: uri of content file or git directory\n        branch:\n          type: string\n          description: branch/tag name for checkout\n        path:\n          type: string\n          description: if needed we can checkout particular path (dir or file) in case of BIG/mono repositories\n        username:\n          type: string\n          description: git auth username for private repositories\n        token:\n          type: string\n          description: git auth token for private repositories\n\n    ExecutionRequest:\n      description: scripts execution request body\n      type: object\n      properties:\n        name:\n          type: string\n          description: script execution custom name\n          example: testing with 1000 users\n        namespace:\n          type: string\n          description: script kubernetes namespace (\"testkube\" when not set)\n          example: testkube\n        params:\n          type: object\n          description: \"execution params passed to executor\"\n          additionalProperties:\n            type: string\n          example:\n            users: \"3\"\n            prefix: \"some-\"\n        tags:\n          type: array\n          items:\n            type: string\n\n    TestExecutionRequest:\n      description: test execution request body\n      type: object\n      properties:\n        name:\n          type: string\n          description: script execution custom name\n          example: testing with 1000 users\n        namespace:\n          type: string\n          description: script kubernetes namespace (\"testkube\" when not set)\n          example: testkube\n        params:\n          type: object\n          description: \"execution params passed to executor\"\n          additionalProperties:\n            type: string\n          example:\n            users: \"3\"\n            prefix: \"some-\"\n\n    ScriptUpsertRequest:\n      description: scripts create request body\n      allOf:\n        - $ref: \"#/components/schemas/Script\"\n\n    TestUpsertRequest:\n      description: test create request body\n      type: object\n      required:\n        - name\n        - namespace\n      allOf:\n        - $ref: \"#/components/schemas/Test\"\n        - $ref: \"#/components/schemas/ObjectRef\"\n\n    ExecutorCreateRequest:\n      description: executor create request body\n      type: object\n      required:\n        - name\n        - namespace\n        - types\n      allOf:\n        - $ref: \"#/components/schemas/Executor\"\n        - $ref: \"#/components/schemas/ObjectRef\"\n\n    # Copied from CRD spec\n    # https://github.com/kubeshop/testkube-operator/blob/main/config/crd/bases/executor.kubtest.io_executors.yaml\n    # TODO we need to sync those in some nice way\n    Executor:\n      description: CRD based executor data\n      type: object\n      properties:\n        executorType:\n          description:\n            ExecutorType one of \"rest\" for rest openapi based executors\n            or \"job\" which will be default runners for testkube soon\n          type: string\n        image:\n          description: Image for kube-job\n          type: string\n        types:\n          description: Types defines what types can be handled by executor e.g.\n            \"postman/collection\", \":curl/command\" etc\n          items:\n            type: string\n          type: array\n        uri:\n          description: URI for rest based executors\n          type: string\n\n    ExecutorDetails:\n      description: Executor details with Executor data and additional information like list of executions\n      type: object\n      properties:\n        name:\n          description: Executor name\n          type: string\n        executor:\n          $ref: \"#/components/schemas/Executor\"\n        executions:\n          $ref: \"#/components/schemas/ExecutionsResult\"\n\n    ExecutorOutput:\n      description: CRD based executor data\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n          description: One of possible output types\n          enum:\n            - error\n            - log\n            - event\n            - result\n        content:\n          type: string\n          description: Message/event data passed from executor (like log lines etc)\n          example:\n        result:\n          description: Execution result when job is finished\n          $ref: \"#/components/schemas/ExecutionResult\"\n\n    #\n    # Errors\n    #\n\n    Problem:\n      description: problem response in case of error\n      type: object\n      properties:\n        type:\n          type: string\n          description: Type contains a URI that identifies the problem type. This URI will,\n          example: http://kubeshop.io/testkube/problems/invalidscriptname\n        title:\n          type: string\n          description: Title is a short, human-readable summary of the problem type. This title SHOULD NOT change from occurrence to occurrence of the problem, except forpurposes of localization.\n          example: Invalid script name\n        status:\n          type: integer\n          description: HTTP status code for this occurrence of the problem.\n          example: 500\n        detail:\n          type: string\n          description: A human-readable explanation specific to this occurrence of the problem.\n          example: Your script name can't contain forbidden characters like \"}}}\" passed\n        instance:\n          type: string\n          description: A URI that identifies the specific occurrence of the problem. This URI may or may not yield further information if de-referenced.\n          example: http://10.23.23.123:8088/scripts\n\n  #\n  # Parameters\n  #\n\n  parameters:\n    TestName:\n      in: query\n      name: test\n      schema:\n        type: string\n        default: \"\"\n      description: test namespaced name to filter\n      required: false\n    Type:\n      in: query\n      name: type\n      schema:\n        type: string\n        default: \"\"\n      description: object type\n      required: false\n    TextSearch:\n      in: query\n      name: textSearch\n      schema:\n        type: string\n        default: \"\"\n      description: text to search in name and script name\n      required: false\n    PageSize:\n      in: query\n      name: pageSize\n      schema:\n        type: integer\n        default: 100\n      description: the number of executions to get, setting to 0 will return only totals\n      required: false\n    PageIndex:\n      in: query\n      name: page\n      schema:\n        type: integer\n        default: 0\n      description: the page index to start at\n      required: false\n    StartDateFilter:\n      in: query\n      name: startDate\n      schema:\n        type: string\n        format: date\n      required: false\n      description: startDate for filtering in ISO-8601 format, i.e. \"yyyy-mm-dd\"\n    EndDateFilter:\n      in: query\n      name: endDate\n      schema:\n        type: string\n        format: date\n      required: false\n      description: endDate for filtering\n    TestExecutionsStatusFilter:\n      in: query\n      name: status\n      schema:\n        $ref: \"#/components/schemas/TestStatus\"\n      description: optional status filter\n      required: false\n    ExecutionsStatusFilter:\n      in: query\n      name: status\n      schema:\n        $ref: \"#/components/schemas/ExecutionStatus\"\n      description: optional status filter\n      required: false\n    Tags:\n      in: query\n      name: tags\n      schema:\n        type: array\n        description: Tags to filter tests by\n"
		}
	},
	"Error": "callback: json: cannot unmarshal bool into Go struct field Schema.required of type []string"
}