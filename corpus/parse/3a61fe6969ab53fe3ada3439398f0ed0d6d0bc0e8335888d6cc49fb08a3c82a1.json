{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/readmeio/oas-examples"
		},
		"file": {
			"name": "schema-enums.yaml",
			"size": 0,
			"path": "3.0/yaml/schema-enums.yaml",
			"byteSize": 9555,
			"content": "openapi: 3.0.3\ninfo:\n  title: Support for different implementations of `enum`\n  description: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schemaObject\n  version: 1.0.0\nservers:\n  - url: https://httpbin.org\ntags:\n  - name: Enums\n    description: Showcasing enum handling and support\npaths:\n  '/anything/strings':\n    post:\n      operationId: string_enumSupport\n      summary: String enum support\n      description: \"Support and handling of enums on `type: string` schemas.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n*\n        [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\"\n      tags:\n        - Enums\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                enum:\n                  type: string\n                  description: A regular ol' enum\n                  enum:\n                    - available\n                    - pending\n                    - sold\n                enum *required:\n                  type: string\n                  description: A regular ol' enum\n                  enum:\n                    - available\n                    - pending\n                    - sold\n                enum (with default):\n                  type: string\n                  description: This enum has a `default` of `available`.\n                  enum:\n                    - available\n                    - pending\n                    - sold\n                  default: available\n                enum (with default) *required:\n                  type: string\n                  description: A required enum with a default (if a field is required\n                    it should probably always have a default, eh?)\n                  enum:\n                    - available\n                    - pending\n                    - sold\n                  default: available\n                enum (with example):\n                  type: string\n                  description: This enum has a `example` of `pending`.\n                  enum:\n                    - available\n                    - pending\n                    - sold\n                  example: pending\n                enum (with example) *required:\n                  type: string\n                  description: This enum has a `example` of `pending` and is required.\n                  enum:\n                    - available\n                    - pending\n                    - sold\n                  example: pending\n                enum (with non-value example):\n                  type: string\n                  description: This enum has an example that isn't part of the enum,\n                    so the option does not get hidden\n                  enum:\n                    - available\n                    - pending\n                    - sold\n                  example: Choose...\n                enum (with non-value example) *required:\n                  type: string\n                  description: This enum has an example that isn't part of the enum,\n                    so the option does not get hidden\n                  enum:\n                    - available\n                    - pending\n                    - sold\n                  example: Choose...\n                enum (with empty option):\n                  type: string\n                  description: This enum has an empty string (`\"\"`) as one of its\n                    available options.\n                  enum:\n                    - ''\n                    - available\n                    - pending\n                    - sold\n                enum (with duplicate options):\n                  type: string\n                  description: This enum has multiple duplicate options, they should\n                    get deduped in the UI\n                  enum:\n                    - ''\n                    - ''\n                    - available\n                    - available\n                enum (with empty option and empty default):\n                  type: string\n                  description: This enum has a an empty string (`\"\"`) as its only\n                    available option, and that same value is set as its `default`.\n                  enum:\n                    - ''\n                  default: ''\n              required:\n                - enum *required\n                - enum (with default) *required\n                - enum (with example) *required\n                - enum (with non-value example) *required\n      responses:\n        '200':\n          description: OK\n    get:\n      operationId: number_enumSupport\n      summary: Number enum support\n      description: \"Support and handling of enums on `type: number` schemas.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n*\n        [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\"\n      tags:\n        - Enums\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                enum:\n                  type: number\n                  description: A regular ol' enum\n                  enum:\n                    - 0\n                    - 1\n                    - 2\n                enum *required:\n                  type: number\n                  description: A regular ol' enum\n                  enum:\n                    - 0\n                    - 1\n                    - 2\n                enum (with default):\n                  type: number\n                  description: This enum has a `default` of `1`.\n                  enum:\n                    - 0\n                    - 1\n                    - 2\n                  default: 1\n                enum (with default) *required:\n                  type: number\n                  description: A required enum with a default (if a field is required\n                    it should probably always have a default, eh?)\n                  enum:\n                    - 0\n                    - 1\n                    - 2\n                  default: 2\n                enum (with example):\n                  type: number\n                  description: This enum has a `example` of `1`.\n                  enum:\n                    - 0\n                    - 1\n                    - 2\n                  example: 1\n                enum (with example) *required:\n                  type: number\n                  description: This enum has a `example` of `1` and is required.\n                  enum:\n                    - 0\n                    - 1\n                    - 2\n                  example: 1\n                enum (with empty option):\n                  type: number\n                  description: This enum has an empty string (`\"\"`) as one of its\n                    available options.\n                  enum:\n                    - ''\n                    - 0\n                    - 1\n                    - 2\n                enum (with duplicate options):\n                  type: number\n                  description: This enum has multiple duplicate options, they should\n                    get deduped in the UI\n                  enum:\n                    - ''\n                    - ''\n                    - 0\n                    - 2\n                    - 2\n              required:\n                - enum *required\n                - enum (with default) *required\n                - enum (with example) *required\n      responses:\n        '200':\n          description: OK\n    put:\n      operationId: boolean_enumSupport\n      summary: Boolean enum support\n      description: \"Support and handling of enums on `type: boolean` schemas.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n*\n        [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\"\n      tags:\n        - Enums\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                enum:\n                  type: boolean\n                  description: A regular ol' enum\n                  enum:\n                    - true\n                    - false\n                enum *required:\n                  type: boolean\n                  description: A regular ol' enum\n                  enum:\n                    - true\n                    - false\n                enum (with default):\n                  type: boolean\n                  description: This enum has a `default` of `false`.\n                  enum:\n                    - true\n                    - false\n                  default: false\n                enum (with default) *required:\n                  type: boolean\n                  description: A required enum with a default (if a field is required\n                    it should probably always have a default, eh?)\n                  enum:\n                    - true\n                    - false\n                  default: true\n              required:\n                - enum *required\n                - enum (with default) *required\n                - enum (with example) *required\n      responses:\n        '200':\n          description: OK\n",
			"canonicalURL": "/github.com/readmeio/oas-examples@ce1e5c9b6bda57cbfce4b9ba21c968a30eb63529/-/blob/3.0/yaml/schema-enums.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/readmeio/oas-examples/blob/ce1e5c9b6bda57cbfce4b9ba21c968a30eb63529/3.0/yaml/schema-enums.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/anything/strings\": get: operation \"number_enumSupport\": requestBody: parse content: application/json: schema: parse schema: property \"enum (with empty option)\": at 3.0/yaml/schema-enums.yaml:191:21: parse enum values: parse value \"\\\"\\\"\": expected type \"number\", got \"string\""
}