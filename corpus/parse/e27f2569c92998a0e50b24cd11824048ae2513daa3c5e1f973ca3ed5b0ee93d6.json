{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/papermerge/papermerge-core"
		},
		"file": {
			"name": "schema.yml",
			"size": 0,
			"path": "docker/dev/schema.yml",
			"byteSize": 131611,
			"content": "openapi: 3.0.3\ninfo:\n  title: Papermerge REST API\n  version: 2.1.0\n  description: Document management system designed for digital archives\npaths:\n  /api/auth/login/:\n    post:\n      operationId: Login/Authenticate\n      description: |-\n        Authenticates user with given username and password.\n        Response will contain token to be used as part of ``Authorization`` header\n        in subsequent requests whenever authorization is required.\n      tags:\n      - auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthToken'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthToken'\n          description: ''\n  /api/auth/logout/:\n    post:\n      operationId: Logout\n      description: |-\n        Logs the user out of current session.\n\n        On a successful request, the token used to authenticate is deleted from the\n        system and can no longer be used for authentication.\n\n        Request body must be empty.\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - auth\n      responses:\n        '200':\n          description: No response body\n  /api/auth/logoutall/:\n    post:\n      operationId: Logout All\n      description: |-\n        Logs the user out of all sessions i.e. deletes all auth tokens for the user.\n\n        On a successful request, the token used to authenticate, and all other\n        tokens registered to the same user account, are deleted from the system\n        and can no longer be used for authentication.\n\n        Request body must be empty.\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - auth\n      responses:\n        '200':\n          description: No response body\n  /api/automates/:\n    get:\n      operationId: automates_list\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - name: filter[search]\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - name: page[number]\n        required: false\n        in: query\n        description: A page number within the paginated result set.\n        schema:\n          type: integer\n      - name: page[size]\n        required: false\n        in: query\n        description: Number of results to return per page.\n        schema:\n          type: integer\n      - name: sort\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      tags:\n      - automates\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PaginatedAutomateList'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaginatedAutomateList'\n          description: ''\n    post:\n      operationId: automates_create\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - automates\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/Automate'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Automate'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Automate'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '201':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Automate'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Automate'\n          description: ''\n  /api/automates/{id}/:\n    get:\n      operationId: automates_retrieve\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: string\n        required: true\n      tags:\n      - automates\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Automate'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Automate'\n          description: ''\n    patch:\n      operationId: automates_partial_update\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: string\n        required: true\n      tags:\n      - automates\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/PatchedAutomate'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedAutomate'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedAutomate'\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Automate'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Automate'\n          description: ''\n    delete:\n      operationId: automates_destroy\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: string\n        required: true\n      tags:\n      - automates\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '204':\n          description: No response body\n  /api/content-types/{id}/:\n    get:\n      operationId: content_types_retrieve\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        required: true\n      tags:\n      - content-types\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/ContentType'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentType'\n          description: ''\n  /api/documents/:\n    get:\n      operationId: documents_list\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - name: filter[search]\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - name: page[number]\n        required: false\n        in: query\n        description: A page number within the paginated result set.\n        schema:\n          type: integer\n      - name: page[size]\n        required: false\n        in: query\n        description: Number of results to return per page.\n        schema:\n          type: integer\n      - name: sort\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      tags:\n      - documents\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PaginatedDocumentDetailsList'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaginatedDocumentDetailsList'\n          description: ''\n  /api/documents/{document_id}/upload/{file_name}:\n    put:\n      operationId: documents_upload_update\n      parameters:\n      - in: path\n        name: document_id\n        schema:\n          type: string\n          pattern: ^\\d+$\n        required: true\n      - in: path\n        name: file_name\n        schema:\n          type: string\n          pattern: ^[^/]+$\n        required: true\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - documents\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          description: No response body\n  /api/documents/{id}/:\n    get:\n      operationId: documents_retrieve\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this Document.\n        required: true\n      tags:\n      - documents\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/DocumentDetails'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentDetails'\n          description: ''\n    patch:\n      operationId: documents_partial_update\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this Document.\n        required: true\n      tags:\n      - documents\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/PatchedDocumentDetails'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedDocumentDetails'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedDocumentDetails'\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/DocumentDetails'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentDetails'\n          description: ''\n    delete:\n      operationId: documents_destroy\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this Document.\n        required: true\n      tags:\n      - documents\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '204':\n          description: No response body\n  /api/folders/:\n    get:\n      operationId: folders_list\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - name: filter[search]\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - name: page[number]\n        required: false\n        in: query\n        description: A page number within the paginated result set.\n        schema:\n          type: integer\n      - name: page[size]\n        required: false\n        in: query\n        description: Number of results to return per page.\n        schema:\n          type: integer\n      - name: sort\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      tags:\n      - folders\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PaginatedFolderList'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaginatedFolderList'\n          description: ''\n    post:\n      operationId: folders_create\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - folders\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/Folder'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Folder'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Folder'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '201':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n          description: ''\n  /api/folders/{id}/:\n    get:\n      operationId: folders_retrieve\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this Folder.\n        required: true\n      tags:\n      - folders\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n          description: ''\n    patch:\n      operationId: folders_partial_update\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this Folder.\n        required: true\n      tags:\n      - folders\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/PatchedFolder'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedFolder'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedFolder'\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n          description: ''\n    delete:\n      operationId: folders_destroy\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this Folder.\n        required: true\n      tags:\n      - folders\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '204':\n          description: No response body\n  /api/groups/:\n    get:\n      operationId: groups_list\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - name: filter[search]\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - name: page[number]\n        required: false\n        in: query\n        description: A page number within the paginated result set.\n        schema:\n          type: integer\n      - name: page[size]\n        required: false\n        in: query\n        description: Number of results to return per page.\n        schema:\n          type: integer\n      - name: sort\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      tags:\n      - groups\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PaginatedGroupList'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaginatedGroupList'\n          description: ''\n    post:\n      operationId: groups_create\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - groups\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/Group'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Group'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '201':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Group'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n          description: ''\n  /api/groups/{id}/:\n    get:\n      operationId: groups_retrieve\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this group.\n        required: true\n      tags:\n      - groups\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Group'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n          description: ''\n    patch:\n      operationId: groups_partial_update\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this group.\n        required: true\n      tags:\n      - groups\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/PatchedGroup'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedGroup'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedGroup'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Group'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n          description: ''\n    delete:\n      operationId: groups_destroy\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this group.\n        required: true\n      tags:\n      - groups\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '204':\n          description: No response body\n  /api/nodes/:\n    get:\n      operationId: nodes_list\n      description: |-\n        Documents can be organized in folders. One folder can contain documents as\n        well as other folders. A node is a convinient abstraction of two concepts -\n        'folder' and 'document'. Each node has a type field with value either\n        'folders' or 'documents' depending on what kind of node it is.\n      parameters:\n      - name: filter[search]\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - name: page[number]\n        required: false\n        in: query\n        description: A page number within the paginated result set.\n        schema:\n          type: integer\n      - name: page[size]\n        required: false\n        in: query\n        description: Number of results to return per page.\n        schema:\n          type: integer\n      - name: sort\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      tags:\n      - nodes\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PaginatedNodeList'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaginatedNodeList'\n          description: ''\n    post:\n      operationId: nodes_create\n      description: |-\n        Documents can be organized in folders. One folder can contain documents as\n        well as other folders. A node is a convinient abstraction of two concepts -\n        'folder' and 'document'. Each node has a type field with value either\n        'folders' or 'documents' depending on what kind of node it is.\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - nodes\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/Node'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Node'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Node'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '201':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Node'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n          description: ''\n  /api/nodes/{id}/:\n    get:\n      operationId: Retrieve Node\n      description: |-\n        Documents can be organized in folders. One folder can contain documents as\n        well as other folders. A node is a convinient abstraction of two concepts -\n        'folder' and 'document'. Each node has a type field with value either\n        'folders' or 'documents' depending on what kind of node it is.\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this Documents.\n        required: true\n      tags:\n      - nodes\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Node'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n          description: ''\n    patch:\n      operationId: nodes_partial_update\n      description: |-\n        Documents can be organized in folders. One folder can contain documents as\n        well as other folders. A node is a convinient abstraction of two concepts -\n        'folder' and 'document'. Each node has a type field with value either\n        'folders' or 'documents' depending on what kind of node it is.\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this Documents.\n        required: true\n      tags:\n      - nodes\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/PatchedNode'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedNode'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedNode'\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Node'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n          description: ''\n    delete:\n      operationId: nodes_destroy\n      description: |-\n        Documents can be organized in folders. One folder can contain documents as\n        well as other folders. A node is a convinient abstraction of two concepts -\n        'folder' and 'document'. Each node has a type field with value either\n        'folders' or 'documents' depending on what kind of node it is.\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this Documents.\n        required: true\n      tags:\n      - nodes\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '204':\n          description: No response body\n  /api/nodes/download/:\n    get:\n      operationId: nodes_download_retrieve\n      description: |-\n        Expects one or multiple of following HTTP GET parameters:\n        * node_ids (required) - a list of node IDs to download\n        * file_name - preferred file name for downloaded archive/document file\n        * include_version = 'only_last' or 'only_original'\n            In case when include_version == 'only_last', downloaded\n            archive/document file(s) will contain only last version\n            of the document\n            Respectively for include_version == 'only_original' downloaded\n            archive/document file(s) will contain only orignial version\n            of the document\n            Default value is 'only_last'\n        * archive_type = 'zip' or 'targz'\n            Applies only if there is more than one node to download.\n            Decides on type of archive to create.\n            Default value is 'zip'\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - nodes\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/NodesDownload'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodesDownload'\n          description: ''\n  /api/nodes/inboxcount/:\n    get:\n      operationId: nodes_inboxcount_retrieve\n      description: GET /nodes/inboxcount/\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - nodes\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          description: No response body\n  /api/nodes/move/:\n    post:\n      operationId: nodes_move_create\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - nodes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NodeMove'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/NodeMove'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeMove'\n          description: ''\n  /api/ocr/:\n    post:\n      operationId: ocr_create\n      description: Starts OCR for document version\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - ocr\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/Ocr'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Ocr'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Ocr'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Ocr'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ocr'\n          description: ''\n  /api/pages/:\n    delete:\n      operationId: pages_destroy\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - pages\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '204':\n          description: No response body\n  /api/pages/{id}/:\n    get:\n      operationId: pages_retrieve\n      description: |-\n        GET /pages/\u003cpk\u003e/\n        DELETE /pages/\u003cpk\u003e/\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - jpeg\n          - svg\n          - txt\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: string\n        required: true\n      tags:\n      - pages\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Page'\n            image/svg+xml:\n              schema:\n                $ref: '#/components/schemas/Page'\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Page'\n            image/jpeg:\n              schema:\n                $ref: '#/components/schemas/Page'\n          description: ''\n    delete:\n      operationId: pages_destroy_2\n      description: |-\n        GET /pages/\u003cpk\u003e/\n        DELETE /pages/\u003cpk\u003e/\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - jpeg\n          - svg\n          - txt\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: string\n        required: true\n      tags:\n      - pages\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '204':\n          description: No response body\n  /api/pages/move-to-document/:\n    post:\n      operationId: pages_move_to_document_create\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - pages\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/PagesMoveToDocument'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PagesMoveToDocument'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PagesMoveToDocument'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PagesMoveToDocument'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PagesMoveToDocument'\n          description: ''\n  /api/pages/move-to-folder/:\n    post:\n      operationId: pages_move_to_folder_create\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - pages\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/PagesMoveToFolder'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PagesMoveToFolder'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PagesMoveToFolder'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PagesMoveToFolder'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PagesMoveToFolder'\n          description: ''\n  /api/pages/reorder/:\n    post:\n      operationId: pages_reorder_create\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - pages\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PagesReorder'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PagesReorder'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PagesReorder'\n          description: ''\n  /api/pages/rotate/:\n    post:\n      operationId: pages_rotate_create\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - pages\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PagesRotate'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PagesRotate'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PagesRotate'\n          description: ''\n  /api/permissions/:\n    get:\n      operationId: permissions_list\n      parameters:\n      - name: filter[search]\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - name: sort\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      tags:\n      - permissions\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Permission'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Permission'\n          description: ''\n    post:\n      operationId: permissions_create\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - permissions\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/Permission'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Permission'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Permission'\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '201':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Permission'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Permission'\n          description: ''\n  /api/preferences/:\n    get:\n      operationId: preferences_list\n      description: |-\n        - list preferences\n        - detail given preference\n        - batch update preferences\n        - update a single preference\n      parameters:\n      - name: filter[search]\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - name: page[number]\n        required: false\n        in: query\n        description: A page number within the paginated result set.\n        schema:\n          type: integer\n      - name: page[size]\n        required: false\n        in: query\n        description: Number of results to return per page.\n        schema:\n          type: integer\n      - name: sort\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      tags:\n      - preferences\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PaginatedCustomUserPreferenceList'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaginatedCustomUserPreferenceList'\n          description: ''\n  /api/preferences/{id}/:\n    get:\n      operationId: preferences_retrieve\n      description: |-\n        - list preferences\n        - detail given preference\n        - batch update preferences\n        - update a single preference\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this user preference.\n        required: true\n      tags:\n      - preferences\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/CustomUserPreference'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomUserPreference'\n          description: ''\n    put:\n      operationId: preferences_update\n      description: |-\n        - list preferences\n        - detail given preference\n        - batch update preferences\n        - update a single preference\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this user preference.\n        required: true\n      tags:\n      - preferences\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/CustomUserPreference'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomUserPreference'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/CustomUserPreference'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/CustomUserPreference'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomUserPreference'\n          description: ''\n    patch:\n      operationId: preferences_partial_update\n      description: |-\n        - list preferences\n        - detail given preference\n        - batch update preferences\n        - update a single preference\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this user preference.\n        required: true\n      tags:\n      - preferences\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/PatchedCustomUserPreference'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedCustomUserPreference'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedCustomUserPreference'\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/CustomUserPreference'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomUserPreference'\n          description: ''\n  /api/preferences/bulk/:\n    post:\n      operationId: preferences_bulk_create\n      description: |-\n        Update multiple preferences at once\n\n        this is a long method because we ensure everything is valid\n        before actually persisting the changes\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - preferences\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/CustomUserPreference'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomUserPreference'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/CustomUserPreference'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/CustomUserPreference'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomUserPreference'\n          description: ''\n  /api/roles/:\n    get:\n      operationId: roles_list\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - name: filter[search]\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - name: page[number]\n        required: false\n        in: query\n        description: A page number within the paginated result set.\n        schema:\n          type: integer\n      - name: page[size]\n        required: false\n        in: query\n        description: Number of results to return per page.\n        schema:\n          type: integer\n      - name: sort\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      tags:\n      - roles\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PaginatedRoleList'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaginatedRoleList'\n          description: ''\n    post:\n      operationId: roles_create\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - roles\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/Role'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Role'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Role'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '201':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Role'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n          description: ''\n  /api/roles/{id}/:\n    get:\n      operationId: roles_retrieve\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this role.\n        required: true\n      tags:\n      - roles\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Role'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n          description: ''\n    patch:\n      operationId: roles_partial_update\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this role.\n        required: true\n      tags:\n      - roles\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/PatchedRole'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedRole'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedRole'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Role'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n          description: ''\n    delete:\n      operationId: roles_destroy\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this role.\n        required: true\n      tags:\n      - roles\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '204':\n          description: No response body\n  /api/schema/:\n    get:\n      operationId: schema_retrieve\n      description: |-\n        OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n        - YAML: application/vnd.oai.openapi\n        - JSON: application/vnd.oai.openapi+json\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - yaml\n      - in: query\n        name: lang\n        schema:\n          type: string\n          enum:\n          - de\n          - en\n          - fr\n      tags:\n      - schema\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/vnd.oai.openapi:\n              schema:\n                type: object\n                additionalProperties: {}\n            application/yaml:\n              schema:\n                type: object\n                additionalProperties: {}\n            application/vnd.oai.openapi+json:\n              schema:\n                type: object\n                additionalProperties: {}\n            application/json:\n              schema:\n                type: object\n                additionalProperties: {}\n          description: ''\n  /api/search/:\n    get:\n      operationId: Search\n      description: |-\n        Performs full text search on the documents and folders.\n\n        Folders are matched by their title. Documents are matched by title and\n        OCRed text.\n      parameters:\n      - in: query\n        name: q\n        schema:\n          type: string\n        description: text to search\n        required: true\n      tags:\n      - search\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResult'\n          description: ''\n  /api/tags/:\n    get:\n      operationId: tags_list\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - name: filter[search]\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - name: page[number]\n        required: false\n        in: query\n        description: A page number within the paginated result set.\n        schema:\n          type: integer\n      - name: page[size]\n        required: false\n        in: query\n        description: Number of results to return per page.\n        schema:\n          type: integer\n      - name: sort\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      tags:\n      - tags\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PaginatedTagList'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaginatedTagList'\n          description: ''\n    post:\n      operationId: tags_create\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - tags\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/Tag'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tag'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Tag'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '201':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n          description: ''\n  /api/tags/{id}/:\n    get:\n      operationId: tags_retrieve\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: string\n        required: true\n      tags:\n      - tags\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n          description: ''\n    patch:\n      operationId: tags_partial_update\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: string\n        required: true\n      tags:\n      - tags\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/PatchedTag'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedTag'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedTag'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n          description: ''\n    delete:\n      operationId: tags_destroy\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: string\n        required: true\n      tags:\n      - tags\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '204':\n          description: No response body\n  /api/tokens/:\n    get:\n      operationId: tokens_list\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - name: filter[search]\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - name: page[number]\n        required: false\n        in: query\n        description: A page number within the paginated result set.\n        schema:\n          type: integer\n      - name: page[size]\n        required: false\n        in: query\n        description: Number of results to return per page.\n        schema:\n          type: integer\n      - name: sort\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      tags:\n      - tokens\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PaginatedTokenList'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaginatedTokenList'\n          description: ''\n    post:\n      operationId: tokens_create\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - tokens\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/Token'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Token'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Token'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '201':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Token'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n          description: ''\n  /api/tokens/{digest}/:\n    get:\n      operationId: tokens_retrieve\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: path\n        name: digest\n        schema:\n          type: string\n        description: A unique value identifying this auth token.\n        required: true\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - tokens\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Token'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n          description: ''\n    delete:\n      operationId: tokens_destroy\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: path\n        name: digest\n        schema:\n          type: string\n        description: A unique value identifying this auth token.\n        required: true\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - tokens\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '204':\n          description: No response body\n  /api/users/:\n    get:\n      operationId: users_list\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - name: filter[search]\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - name: page[number]\n        required: false\n        in: query\n        description: A page number within the paginated result set.\n        schema:\n          type: integer\n      - name: page[size]\n        required: false\n        in: query\n        description: Number of results to return per page.\n        schema:\n          type: integer\n      - name: sort\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      tags:\n      - users\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/PaginatedUserList'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaginatedUserList'\n          description: ''\n    post:\n      operationId: users_create\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - users\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '201':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: ''\n  /api/users/{id}/:\n    get:\n      operationId: users_retrieve\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this user.\n        required: true\n      tags:\n      - users\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: ''\n    patch:\n      operationId: users_partial_update\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this user.\n        required: true\n      tags:\n      - users\n      requestBody:\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/PatchedUser'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedUser'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedUser'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: ''\n    delete:\n      operationId: users_destroy\n      description: |-\n        This mixin provides a helper attributes to select or prefetch related models\n        based on the include specified in the URL.\n\n        __all__ can be used to specify a prefetch which should be done regardless of the include\n\n\n        .. code:: python\n\n            # When MyViewSet is called with ?include=author it will prefetch author and authorbio\n            class MyViewSet(viewsets.ModelViewSet):\n                queryset = Book.objects.all()\n                prefetch_for_includes = {\n                    '__all__': [],\n                    'category.section': ['category']\n                }\n                select_for_includes = {\n                    '__all__': [],\n                    'author': ['author', 'author__authorbio'],\n                }\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this user.\n        required: true\n      tags:\n      - users\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '204':\n          description: No response body\n  /api/users/{id}/change-password/:\n    post:\n      operationId: users_change_password_create\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      - in: path\n        name: id\n        schema:\n          type: integer\n        required: true\n      tags:\n      - users\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Password'\n        required: true\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/Password'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Password'\n          description: ''\n  /api/users/me/:\n    get:\n      operationId: users_me_retrieve\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - vnd.api+json\n      tags:\n      - users\n      security:\n      - basicAuth: []\n      - cookieAuth: []\n      responses:\n        '200':\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: ''\ncomponents:\n  schemas:\n    ArchiveTypeEnum:\n      enum:\n      - targz\n      - zip\n      type: string\n    AuthToken:\n      type: object\n      properties:\n        username:\n          type: string\n          writeOnly: true\n        password:\n          type: string\n          writeOnly: true\n        token:\n          type: string\n          readOnly: true\n      required:\n      - password\n      - token\n      - username\n    Automate:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        name:\n          type: string\n          maxLength: 128\n        match:\n          type: string\n          maxLength: 256\n        matching_algorithm:\n          allOf:\n          - $ref: '#/components/schemas/MatchingAlgorithmEnum'\n          minimum: 0\n          maximum: 2147483647\n        is_case_sensitive:\n          type: boolean\n        dst_folder:\n          type: integer\n          nullable: true\n          title: Destination Folder\n      required:\n      - id\n      - name\n    ContentType:\n      type: object\n      description: |-\n        A `ModelSerializer` is just a regular `Serializer`, except that:\n\n        * A set of default fields are automatically populated.\n        * A set of default validators are automatically populated.\n        * Default `.create()` and `.update()` implementations are provided.\n\n        The process of automatically determining a set of serializer fields\n        based on the model fields is reasonably complex, but you almost certainly\n        don't need to dig into the implementation.\n\n        If the `ModelSerializer` class *doesn't* generate the set of fields that\n        you need you should either declare the extra/differing fields explicitly on\n        the serializer class, or simply use a `Serializer` class.\n\n\n        Included Mixins:\n\n        * A mixin class to enable sparse fieldsets is included\n        * A mixin class to enable validation of included resources is included\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        model:\n          type: string\n          title: Python model class name\n          maxLength: 100\n      required:\n      - id\n      - model\n    CustomUserPreference:\n      type: object\n      properties:\n        section:\n          type: string\n          readOnly: true\n        name:\n          type: string\n          readOnly: true\n        identifier:\n          type: string\n          readOnly: true\n        default:\n          type: string\n          readOnly: true\n        value:\n          type: string\n        verbose_name:\n          type: string\n          readOnly: true\n        help_text:\n          type: string\n          readOnly: true\n        additional_data:\n          type: string\n          readOnly: true\n        field:\n          type: string\n          readOnly: true\n        id:\n          type: string\n          readOnly: true\n      required:\n      - additional_data\n      - default\n      - field\n      - help_text\n      - id\n      - identifier\n      - name\n      - section\n      - value\n      - verbose_name\n    DocumentDetails:\n      type: object\n      description: |-\n        A `ModelSerializer` is just a regular `Serializer`, except that:\n\n        * A set of default fields are automatically populated.\n        * A set of default validators are automatically populated.\n        * Default `.create()` and `.update()` implementations are provided.\n\n        The process of automatically determining a set of serializer fields\n        based on the model fields is reasonably complex, but you almost certainly\n        don't need to dig into the implementation.\n\n        If the `ModelSerializer` class *doesn't* generate the set of fields that\n        you need you should either declare the extra/differing fields explicitly on\n        the serializer class, or simply use a `Serializer` class.\n\n\n        Included Mixins:\n\n        * A mixin class to enable sparse fieldsets is included\n        * A mixin class to enable validation of included resources is included\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        title:\n          type: string\n          maxLength: 200\n        lang:\n          type: string\n          title: Language\n          maxLength: 8\n        file_name:\n          type: string\n        ocr:\n          type: boolean\n        ocr_status:\n          $ref: '#/components/schemas/OcrStatusEnum'\n        parent:\n          type: integer\n        versions:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentVersion'\n          readOnly: true\n        size:\n          type: integer\n        page_count:\n          type: integer\n        created_at:\n          type: string\n          format: date-time\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          readOnly: true\n      required:\n      - created_at\n      - id\n      - parent\n      - title\n      - updated_at\n      - versions\n    DocumentVersion:\n      type: object\n      description: |-\n        A `ModelSerializer` is just a regular `Serializer`, except that:\n\n        * A set of default fields are automatically populated.\n        * A set of default validators are automatically populated.\n        * Default `.create()` and `.update()` implementations are provided.\n\n        The process of automatically determining a set of serializer fields\n        based on the model fields is reasonably complex, but you almost certainly\n        don't need to dig into the implementation.\n\n        If the `ModelSerializer` class *doesn't* generate the set of fields that\n        you need you should either declare the extra/differing fields explicitly on\n        the serializer class, or simply use a `Serializer` class.\n\n\n        Included Mixins:\n\n        * A mixin class to enable sparse fieldsets is included\n        * A mixin class to enable validation of included resources is included\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        number:\n          type: integer\n          maximum: 2147483647\n          minimum: -2147483648\n          title: Version number\n        lang:\n          type: string\n          title: Language\n          maxLength: 8\n        file_name:\n          type: string\n          nullable: true\n          maxLength: 1024\n        pages:\n          type: array\n          items:\n            type: integer\n        size:\n          type: integer\n          maximum: 9223372036854775807\n          minimum: -9223372036854775808\n          format: int64\n          description: Size of file_orig attached. Size is in Bytes\n        page_count:\n          type: integer\n          maximum: 2147483647\n          minimum: -2147483648\n        short_description:\n          type: string\n          maxLength: 128\n        document:\n          type: integer\n      required:\n      - document\n      - id\n      - pages\n    Folder:\n      type: object\n      description: |-\n        A `ModelSerializer` is just a regular `Serializer`, except that:\n\n        * A set of default fields are automatically populated.\n        * A set of default validators are automatically populated.\n        * Default `.create()` and `.update()` implementations are provided.\n\n        The process of automatically determining a set of serializer fields\n        based on the model fields is reasonably complex, but you almost certainly\n        don't need to dig into the implementation.\n\n        If the `ModelSerializer` class *doesn't* generate the set of fields that\n        you need you should either declare the extra/differing fields explicitly on\n        the serializer class, or simply use a `Serializer` class.\n\n\n        Included Mixins:\n\n        * A mixin class to enable sparse fieldsets is included\n        * A mixin class to enable validation of included resources is included\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        title:\n          type: string\n          maxLength: 200\n        parent:\n          type: integer\n        created_at:\n          type: string\n          format: date-time\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          readOnly: true\n      required:\n      - created_at\n      - id\n      - parent\n      - title\n      - updated_at\n    Group:\n      type: object\n      required:\n      - type\n      - id\n      additionalProperties: false\n      properties:\n        type:\n          $ref: '#/components/schemas/type'\n        id:\n          $ref: '#/components/schemas/id'\n        links:\n          type: object\n          properties:\n            self:\n              $ref: '#/components/schemas/link'\n        attributes:\n          type: object\n          properties:\n            id:\n              type: integer\n              readOnly: true\n            name:\n              type: string\n              maxLength: 150\n          required:\n          - name\n    IncludeVersionEnum:\n      enum:\n      - only_original\n      - only_last\n      type: string\n    MatchingAlgorithmEnum:\n      enum:\n      - 1\n      - 2\n      - 3\n      - 4\n      type: integer\n    Node:\n      type: object\n      description: |-\n        A serializer for polymorphic models.\n        Useful for \"lazy\" parent models. Leaves should be represented with a regular serializer.\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        title:\n          type: string\n          maxLength: 200\n        parent:\n          type: integer\n        created_at:\n          type: string\n          format: date-time\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          readOnly: true\n      required:\n      - created_at\n      - id\n      - parent\n      - title\n      - updated_at\n    NodeID:\n      type: object\n      properties:\n        id:\n          type: string\n          maxLength: 32\n      required:\n      - id\n    NodeMove:\n      type: object\n      properties:\n        source_parent:\n          $ref: '#/components/schemas/NodeID'\n        target_parent:\n          $ref: '#/components/schemas/NodeID'\n        nodes:\n          type: array\n          items:\n            $ref: '#/components/schemas/NodeID'\n      required:\n      - nodes\n      - source_parent\n      - target_parent\n    NodeTypeEnum:\n      enum:\n      - document\n      - folder\n      type: string\n    NodesDownload:\n      type: object\n      properties:\n        node_ids:\n          type: array\n          items:\n            type: string\n        file_name:\n          type: string\n          maxLength: 32\n        include_version:\n          allOf:\n          - $ref: '#/components/schemas/IncludeVersionEnum'\n          default: only_last\n        archive_type:\n          allOf:\n          - $ref: '#/components/schemas/ArchiveTypeEnum'\n          default: zip\n      required:\n      - node_ids\n    Ocr:\n      type: object\n      properties:\n        id:\n          type: string\n          title: Doc id\n          maxLength: 32\n        lang:\n          type: string\n      required:\n      - id\n      - lang\n    OcrStatusEnum:\n      enum:\n      - unknown\n      - received\n      - started\n      - succeeded\n      - failed\n      type: string\n    Page:\n      type: object\n      description: |-\n        A `ModelSerializer` is just a regular `Serializer`, except that:\n\n        * A set of default fields are automatically populated.\n        * A set of default validators are automatically populated.\n        * Default `.create()` and `.update()` implementations are provided.\n\n        The process of automatically determining a set of serializer fields\n        based on the model fields is reasonably complex, but you almost certainly\n        don't need to dig into the implementation.\n\n        If the `ModelSerializer` class *doesn't* generate the set of fields that\n        you need you should either declare the extra/differing fields explicitly on\n        the serializer class, or simply use a `Serializer` class.\n\n\n        Included Mixins:\n\n        * A mixin class to enable sparse fieldsets is included\n        * A mixin class to enable validation of included resources is included\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        number:\n          type: integer\n          maximum: 2147483647\n          minimum: -2147483648\n        text:\n          type: string\n        lang:\n          type: string\n          maxLength: 8\n        document_version:\n          type: integer\n      required:\n      - document_version\n      - id\n    PageReorder:\n      type: object\n      properties:\n        id:\n          type: string\n          maxLength: 32\n        old_number:\n          type: integer\n        new_number:\n          type: integer\n      required:\n      - id\n      - new_number\n      - old_number\n    PageRotate:\n      type: object\n      properties:\n        id:\n          type: string\n          maxLength: 32\n        angle:\n          type: integer\n      required:\n      - angle\n      - id\n    PagesMoveToDocument:\n      type: object\n      properties:\n        pages:\n          type: array\n          items:\n            type: string\n        dst:\n          type: string\n          maxLength: 32\n        position:\n          type: integer\n          default: -1\n      required:\n      - dst\n      - pages\n    PagesMoveToFolder:\n      type: object\n      properties:\n        pages:\n          type: array\n          items:\n            type: string\n        dst:\n          type: string\n          maxLength: 32\n        single_page:\n          type: boolean\n          default: false\n      required:\n      - dst\n      - pages\n    PagesReorder:\n      type: object\n      properties:\n        pages:\n          type: array\n          items:\n            $ref: '#/components/schemas/PageReorder'\n      required:\n      - pages\n    PagesRotate:\n      type: object\n      properties:\n        pages:\n          type: array\n          items:\n            $ref: '#/components/schemas/PageRotate'\n      required:\n      - pages\n    PaginatedAutomateList:\n      type: object\n      properties:\n        count:\n          type: integer\n          example: 123\n        next:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=4\n        previous:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=2\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/Automate'\n    PaginatedCustomUserPreferenceList:\n      type: object\n      properties:\n        count:\n          type: integer\n          example: 123\n        next:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=4\n        previous:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=2\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/CustomUserPreference'\n    PaginatedDocumentDetailsList:\n      type: object\n      properties:\n        count:\n          type: integer\n          example: 123\n        next:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=4\n        previous:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=2\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentDetails'\n    PaginatedFolderList:\n      type: object\n      properties:\n        count:\n          type: integer\n          example: 123\n        next:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=4\n        previous:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=2\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/Folder'\n    PaginatedGroupList:\n      type: object\n      properties:\n        count:\n          type: integer\n          example: 123\n        next:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=4\n        previous:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=2\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/Group'\n    PaginatedNodeList:\n      type: object\n      properties:\n        count:\n          type: integer\n          example: 123\n        next:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=4\n        previous:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=2\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/Node'\n    PaginatedRoleList:\n      type: object\n      properties:\n        count:\n          type: integer\n          example: 123\n        next:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=4\n        previous:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=2\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/Role'\n    PaginatedTagList:\n      type: object\n      properties:\n        count:\n          type: integer\n          example: 123\n        next:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=4\n        previous:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=2\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n    PaginatedTokenList:\n      type: object\n      properties:\n        count:\n          type: integer\n          example: 123\n        next:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=4\n        previous:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=2\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/Token'\n    PaginatedUserList:\n      type: object\n      properties:\n        count:\n          type: integer\n          example: 123\n        next:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=4\n        previous:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?page[number]=2\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n    Password:\n      type: object\n      properties:\n        password:\n          type: string\n          maxLength: 200\n      required:\n      - password\n    PatchedAutomate:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        name:\n          type: string\n          maxLength: 128\n        match:\n          type: string\n          maxLength: 256\n        matching_algorithm:\n          allOf:\n          - $ref: '#/components/schemas/MatchingAlgorithmEnum'\n          minimum: 0\n          maximum: 2147483647\n        is_case_sensitive:\n          type: boolean\n        dst_folder:\n          type: integer\n          nullable: true\n          title: Destination Folder\n    PatchedCustomUserPreference:\n      type: object\n      properties:\n        section:\n          type: string\n          readOnly: true\n        name:\n          type: string\n          readOnly: true\n        identifier:\n          type: string\n          readOnly: true\n        default:\n          type: string\n          readOnly: true\n        value:\n          type: string\n        verbose_name:\n          type: string\n          readOnly: true\n        help_text:\n          type: string\n          readOnly: true\n        additional_data:\n          type: string\n          readOnly: true\n        field:\n          type: string\n          readOnly: true\n        id:\n          type: string\n          readOnly: true\n    PatchedDocumentDetails:\n      type: object\n      description: |-\n        A `ModelSerializer` is just a regular `Serializer`, except that:\n\n        * A set of default fields are automatically populated.\n        * A set of default validators are automatically populated.\n        * Default `.create()` and `.update()` implementations are provided.\n\n        The process of automatically determining a set of serializer fields\n        based on the model fields is reasonably complex, but you almost certainly\n        don't need to dig into the implementation.\n\n        If the `ModelSerializer` class *doesn't* generate the set of fields that\n        you need you should either declare the extra/differing fields explicitly on\n        the serializer class, or simply use a `Serializer` class.\n\n\n        Included Mixins:\n\n        * A mixin class to enable sparse fieldsets is included\n        * A mixin class to enable validation of included resources is included\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        title:\n          type: string\n          maxLength: 200\n        lang:\n          type: string\n          title: Language\n          maxLength: 8\n        file_name:\n          type: string\n        ocr:\n          type: boolean\n        ocr_status:\n          $ref: '#/components/schemas/OcrStatusEnum'\n        parent:\n          type: integer\n        versions:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentVersion'\n          readOnly: true\n        size:\n          type: integer\n        page_count:\n          type: integer\n        created_at:\n          type: string\n          format: date-time\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          readOnly: true\n    PatchedFolder:\n      type: object\n      description: |-\n        A `ModelSerializer` is just a regular `Serializer`, except that:\n\n        * A set of default fields are automatically populated.\n        * A set of default validators are automatically populated.\n        * Default `.create()` and `.update()` implementations are provided.\n\n        The process of automatically determining a set of serializer fields\n        based on the model fields is reasonably complex, but you almost certainly\n        don't need to dig into the implementation.\n\n        If the `ModelSerializer` class *doesn't* generate the set of fields that\n        you need you should either declare the extra/differing fields explicitly on\n        the serializer class, or simply use a `Serializer` class.\n\n\n        Included Mixins:\n\n        * A mixin class to enable sparse fieldsets is included\n        * A mixin class to enable validation of included resources is included\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        title:\n          type: string\n          maxLength: 200\n        parent:\n          type: integer\n        created_at:\n          type: string\n          format: date-time\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          readOnly: true\n    PatchedGroup:\n      type: object\n      required:\n      - type\n      - id\n      additionalProperties: false\n      properties:\n        type:\n          $ref: '#/components/schemas/type'\n        id:\n          $ref: '#/components/schemas/id'\n        links:\n          type: object\n          properties:\n            self:\n              $ref: '#/components/schemas/link'\n        attributes:\n          type: object\n          properties:\n            id:\n              type: integer\n              readOnly: true\n            name:\n              type: string\n              maxLength: 150\n          required:\n          - name\n    PatchedNode:\n      type: object\n      description: |-\n        A serializer for polymorphic models.\n        Useful for \"lazy\" parent models. Leaves should be represented with a regular serializer.\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        title:\n          type: string\n          maxLength: 200\n        parent:\n          type: integer\n        created_at:\n          type: string\n          format: date-time\n          readOnly: true\n        updated_at:\n          type: string\n          format: date-time\n          readOnly: true\n    PatchedRole:\n      type: object\n      required:\n      - type\n      - id\n      additionalProperties: false\n      properties:\n        type:\n          $ref: '#/components/schemas/type'\n        id:\n          $ref: '#/components/schemas/id'\n        links:\n          type: object\n          properties:\n            self:\n              $ref: '#/components/schemas/link'\n        attributes:\n          type: object\n          properties:\n            id:\n              type: integer\n              readOnly: true\n            name:\n              type: string\n              maxLength: 64\n            created_at:\n              type: string\n              format: date-time\n              readOnly: true\n            updated_at:\n              type: string\n              format: date-time\n              readOnly: true\n          required:\n          - name\n        relationships:\n          type: object\n          properties:\n            permissions:\n              $ref: '#/components/schemas/reltomany'\n    PatchedTag:\n      type: object\n      required:\n      - type\n      - id\n      additionalProperties: false\n      properties:\n        type:\n          $ref: '#/components/schemas/type'\n        id:\n          $ref: '#/components/schemas/id'\n        links:\n          type: object\n          properties:\n            self:\n              $ref: '#/components/schemas/link'\n        attributes:\n          type: object\n          properties:\n            id:\n              type: integer\n              readOnly: true\n            name:\n              type: string\n              maxLength: 100\n            bg_color:\n              type: string\n              title: Background Color\n              maxLength: 7\n            fg_color:\n              type: string\n              title: Foreground Color\n              maxLength: 7\n            description:\n              type: string\n              nullable: true\n              title: Description (optional)\n              maxLength: 1024\n            pinned:\n              type: boolean\n              description: Pinned tag will be displayed under Documents menu. It serves\n                as shortcut to quickly filter folders/documents associated with this\n                tag\n          required:\n          - name\n    PatchedUser:\n      type: object\n      required:\n      - type\n      - id\n      additionalProperties: false\n      properties:\n        type:\n          $ref: '#/components/schemas/type'\n        id:\n          $ref: '#/components/schemas/id'\n        links:\n          type: object\n          properties:\n            self:\n              $ref: '#/components/schemas/link'\n        attributes:\n          type: object\n          properties:\n            id:\n              type: integer\n              readOnly: true\n            username:\n              type: string\n              description: Required. 150 characters or fewer. Letters, digits and\n                @/./+/-/_ only.\n              pattern: ^[\\w.@+-]+$\n              maxLength: 150\n            first_name:\n              type: string\n              maxLength: 150\n            last_name:\n              type: string\n              maxLength: 150\n            email:\n              type: string\n              format: email\n              title: Email address\n              maxLength: 254\n            is_active:\n              type: boolean\n              title: Active\n              description: Designates whether this user should be treated as active.\n                Unselect this instead of deleting accounts.\n            is_staff:\n              type: boolean\n              title: Staff status\n              description: Designates whether the user can log into this admin site.\n            is_superuser:\n              type: boolean\n              title: Superuser status\n              description: Designates that this user has all permissions without explicitly\n                assigning them.\n            date_joined:\n              type: string\n              format: date-time\n          required:\n          - username\n        relationships:\n          type: object\n          properties:\n            inbox_folder:\n              $ref: '#/components/schemas/reltoone'\n            home_folder:\n              $ref: '#/components/schemas/reltoone'\n    Permission:\n      type: object\n      description: |-\n        A `ModelSerializer` is just a regular `Serializer`, except that:\n\n        * A set of default fields are automatically populated.\n        * A set of default validators are automatically populated.\n        * Default `.create()` and `.update()` implementations are provided.\n\n        The process of automatically determining a set of serializer fields\n        based on the model fields is reasonably complex, but you almost certainly\n        don't need to dig into the implementation.\n\n        If the `ModelSerializer` class *doesn't* generate the set of fields that\n        you need you should either declare the extra/differing fields explicitly on\n        the serializer class, or simply use a `Serializer` class.\n\n\n        Included Mixins:\n\n        * A mixin class to enable sparse fieldsets is included\n        * A mixin class to enable validation of included resources is included\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        name:\n          type: string\n          readOnly: true\n        codename:\n          type: string\n          readOnly: true\n        content_type:\n          type: integer\n          readOnly: true\n      required:\n      - codename\n      - content_type\n      - id\n      - name\n    Role:\n      type: object\n      required:\n      - type\n      - id\n      additionalProperties: false\n      properties:\n        type:\n          $ref: '#/components/schemas/type'\n        id:\n          $ref: '#/components/schemas/id'\n        links:\n          type: object\n          properties:\n            self:\n              $ref: '#/components/schemas/link'\n        attributes:\n          type: object\n          properties:\n            id:\n              type: integer\n              readOnly: true\n            name:\n              type: string\n              maxLength: 64\n            created_at:\n              type: string\n              format: date-time\n              readOnly: true\n            updated_at:\n              type: string\n              format: date-time\n              readOnly: true\n          required:\n          - name\n        relationships:\n          type: object\n          properties:\n            permissions:\n              $ref: '#/components/schemas/reltomany'\n    SearchResult:\n      type: object\n      description: |-\n        A `Serializer` is a model-less serializer class with additional\n        support for JSON:API spec features.\n\n        As in JSON:API specification a type is always required you need to\n        make sure that you define `resource_name` in your `Meta` class\n        when deriving from this class.\n\n        Included Mixins:\n\n        * A mixin class to enable sparse fieldsets is included\n        * A mixin class to enable validation of included resources is included\n      properties:\n        id:\n          type: string\n        text:\n          type: string\n          default: ''\n        title:\n          type: string\n        highlight:\n          type: array\n          items:\n            type: string\n          default:\n          - ''\n        breadcrumb:\n          type: array\n          items:\n            type: string\n        node_type:\n          $ref: '#/components/schemas/NodeTypeEnum'\n        user_id:\n          type: string\n      required:\n      - breadcrumb\n      - id\n      - node_type\n      - title\n      - user_id\n    Tag:\n      type: object\n      required:\n      - type\n      - id\n      additionalProperties: false\n      properties:\n        type:\n          $ref: '#/components/schemas/type'\n        id:\n          $ref: '#/components/schemas/id'\n        links:\n          type: object\n          properties:\n            self:\n              $ref: '#/components/schemas/link'\n        attributes:\n          type: object\n          properties:\n            id:\n              type: integer\n              readOnly: true\n            name:\n              type: string\n              maxLength: 100\n            bg_color:\n              type: string\n              title: Background Color\n              maxLength: 7\n            fg_color:\n              type: string\n              title: Foreground Color\n              maxLength: 7\n            description:\n              type: string\n              nullable: true\n              title: Description (optional)\n              maxLength: 1024\n            pinned:\n              type: boolean\n              description: Pinned tag will be displayed under Documents menu. It serves\n                as shortcut to quickly filter folders/documents associated with this\n                tag\n          required:\n          - name\n    Token:\n      type: object\n      description: Serializer to list tokens\n      properties:\n        token:\n          type: string\n          maxLength: 256\n        digest:\n          type: string\n          maxLength: 128\n        created:\n          type: string\n          format: date-time\n          readOnly: true\n        expiry:\n          type: string\n          format: date-time\n          nullable: true\n      required:\n      - created\n      - digest\n    User:\n      type: object\n      required:\n      - type\n      - id\n      additionalProperties: false\n      properties:\n        type:\n          $ref: '#/components/schemas/type'\n        id:\n          $ref: '#/components/schemas/id'\n        links:\n          type: object\n          properties:\n            self:\n              $ref: '#/components/schemas/link'\n        attributes:\n          type: object\n          properties:\n            id:\n              type: integer\n              readOnly: true\n            username:\n              type: string\n              description: Required. 150 characters or fewer. Letters, digits and\n                @/./+/-/_ only.\n              pattern: ^[\\w.@+-]+$\n              maxLength: 150\n            first_name:\n              type: string\n              maxLength: 150\n            last_name:\n              type: string\n              maxLength: 150\n            email:\n              type: string\n              format: email\n              title: Email address\n              maxLength: 254\n            is_active:\n              type: boolean\n              title: Active\n              description: Designates whether this user should be treated as active.\n                Unselect this instead of deleting accounts.\n            is_staff:\n              type: boolean\n              title: Staff status\n              description: Designates whether the user can log into this admin site.\n            is_superuser:\n              type: boolean\n              title: Superuser status\n              description: Designates that this user has all permissions without explicitly\n                assigning them.\n            date_joined:\n              type: string\n              format: date-time\n          required:\n          - username\n        relationships:\n          type: object\n          properties:\n            inbox_folder:\n              $ref: '#/components/schemas/reltoone'\n            home_folder:\n              $ref: '#/components/schemas/reltoone'\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: sessionid\n"
		}
	},
	"Error": "parse: parse spec: paths: /api/users/me/: get: operation \"users_me_retrieve\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/User\": parse schema: id: parse schema: reference \"#/components/schemas/id\": resolve reference \"#/components/schemas/id\": unmarshal: unexpected end of JSON input"
}