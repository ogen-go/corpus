{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/snowyu/h2doc.js"
		},
		"file": {
			"name": "joplin-web-clipper.yaml",
			"size": 0,
			"path": "config/joplin-web-clipper.yaml",
			"byteSize": 5148,
			"content": "openapi: 3.0.0\ninfo:\n  title: Joplin API\n  version: '1.0'\n  description: 'Communicate With Web Clipper '\n  license:\n    name: MIT\n  termsOfService: 'https://joplinapp.org/api/'\nservers:\n  - url: 'http://localhost:41184'\ntags:\n  - name: joplinRest\n    description: joplin rest api server\n  - name: joplinSearch\n    description: joplin search api server\npaths:\n  /ping:\n    get:\n      summary: ''\n      tags:\n        - joplinRest\n      responses:\n        '200':\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: string\n                default: JoplinClipperServer\n              examples:\n                output:\n                  value: JoplinClipperServer\n      operationId: ping\n      description: ping the server\n  /folders:\n    get:\n      summary: get the folder info by id\n      tags:\n        - joplinRest\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Folder'\n              examples:\n                example: {}\n      operationId: listFolders\n      description: ''\n    parameters: []\n  /notes:\n    get:\n      summary: ''\n      tags:\n        - joplinRest\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Note'\n      operationId: listNotes\n      description: ''\n    post:\n      summary: ''\n      operationId: createNote\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Note'\n      description: create a new note\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Note'\n      tags:\n        - joplinRest\n  /tags:\n    get:\n      summary: ''\n      tags:\n        - joplinRest\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tag'\n      operationId: listTags\n      description: ''\n    post:\n      summary: ''\n      operationId: createTag\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n      description: ''\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tag'\n      security:\n        - 97f71c581f2e05f0f0d6fb274720f: []\n      tags:\n        - joplinRest\ncomponents:\n  schemas:\n    Tag:\n      title: Tag\n      type: object\n      properties:\n        id:\n          type: string\n        title:\n          type: string\n    Note:\n      title: Note\n      type: object\n      description: ''\n      properties:\n        parent_id:\n          description: ID of the notebook that contains this note. Change this ID to move the note to a different notebook.\n          type: string\n        title:\n          type: string\n          description: The note title.\n        markup_language:\n          type: integer\n          enum:\n            - 1\n            - 2\n          description: MARKDOWN = 1;HTML = 2\n          default: 1\n        author:\n          type: string\n        source_url:\n          type: string\n          description: The full URL where the note comes from.\n        body_html:\n          type: string\n          description: 'Note body, in HTML format'\n        base_url:\n          type: string\n          description: \"If `body_html` is provided and contains relative URLs, provide the `base_url` parameter too so that all the URLs can be converted to absolute ones. The base URL is basically where the HTML was fetched from, minus the query (everything after the '?'). For example if the original page was `https://stackoverflow.com/search?q=%5Bjava%5D+test`, the base URL is `https://stackoverflow.com/search`.\"\n        source_command:\n          type: object\n        tags:\n          type: string\n        convert_to:\n          type: string\n        image_sizes:\n          type: object\n        anchor_names:\n          type: array\n          items: {}\n    Folder:\n      title: Folder\n      type: object\n      description: 'This is actually a notebook. Internally notebooks are called \"folders\".'\n      x-examples: {}\n      properties:\n        id:\n          type: string\n        parent_id:\n          type: string\n        title:\n          type: string\n  securitySchemes:\n    f2e05f0f0d6fb274720f17918d:\n      name: token\n      type: apiKey\n      in: query\n      description: 'To prevent unauthorised applications from accessing the API, the calls must be authentified. To do so, you must provide a token as a query parameter for each API call. You can get this token from the Joplin desktop application, on the Web Clipper Options screen.'\nsecurity:\n  - token: []\n",
			"canonicalURL": "/github.com/snowyu/h2doc.js@c32422bf0a2e227a9a3b38e51c2fdc26de4ed8bf/-/blob/config/joplin-web-clipper.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/snowyu/h2doc.js/blob/c32422bf0a2e227a9a3b38e51c2fdc26de4ed8bf/config/joplin-web-clipper.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/folders\": get: operation \"listFolders\": security: at 1:3874: unknown security schema \"token\""
}