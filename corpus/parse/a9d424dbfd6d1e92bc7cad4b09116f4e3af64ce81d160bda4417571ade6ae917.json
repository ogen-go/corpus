{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/discord-gophers/goapi-gen"
		},
		"file": {
			"name": "schemas.yaml",
			"size": 0,
			"path": "internal/test/schemas/schemas.yaml",
			"byteSize": 4953,
			"content": "openapi: \"3.0.1\"\ninfo:\n  version: 1.0.0\n  title: Test Server\n  description: |\n    Test cases for various issues found over time. Please add a test case for\n    any bug fixed.\nservers:\n  - url: http://example.com\npaths:\n  /ensure-everything-is-referenced:\n    get:\n      operationId: ensureEverythingIsReferenced\n      description: |\n        This endpoint exists so that components can be created in this\n        spec and not be pruned\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  anyType1:\n                    $ref: \"#/components/schemas/AnyType1\"\n                  anyType2:\n                    $ref: \"#/components/schemas/AnyType2\"\n                  customStringType:\n                    $ref: \"#/components/schemas/CustomStringType\"\n  /issues/9:\n    get:\n      operationId: Issue9\n      description: |\n        Client params type incorrectly included for request with body and\n        parameters.\n      parameters:\n        - name: foo\n          in: query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Optional body\n        required: false\n        content:\n          application/json:\n            schema: {}\n  /issues/30/{fallthrough}:\n    get:\n      operationId: Issue30\n    description: |\n      Reserved keywords should be prefixed in variable names.\n    parameters:\n      - name: fallthrough\n        in: path\n        required: true\n        schema:\n          type: string\n  /issues/41/{1param}:\n    get:\n      operationId: Issue41\n      description: Parameter name starting with number\n      parameters:\n        - name: 1param\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/5StartsWithNumber\"\n  /issues/127:\n    get:\n      operationId: Issue127\n      description: |\n        Make sure unsupported context types don't preempt supported types.\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GenericObject\"\n            text/markdown:\n              schema:\n                $ref: \"#/components/schemas/GenericObject\"\n            text/yaml:\n              schema:\n                $ref: \"#/components/schemas/GenericObject\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/GenericObject\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GenericObject\"\n            text/markdown:\n              schema:\n                $ref: \"#/components/schemas/GenericObject\"\n  /issues/185:\n    get:\n      operationId: Issue185\n      description: |\n        Type generation when optional/required properties are nullable.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NullableProperties\"\n  /issues/209/${str}:\n    parameters:\n      - $ref: '#/components/parameters/StringInPath'\n    get:\n      operationId: Issue209\n      description: Checks if parameters are declared properly\n  /issues/375:\n    get:\n      description: |\n        Enum declaration was generated twice if the enum was in an object\n        which was inside of an array.\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EnumInObjInArray\"\ncomponents:\n  schemas:\n    GenericObject:\n      type: object\n    AnyType1: {}\n    AnyType2:\n      description: |\n        AnyType2 represents any type.\n\n        This should be an interface{}\n    CustomStringType:\n      type: string\n      format: custom\n      x-go-extra-tags:\n        foo: bar\n    NullableProperties:\n      type: object\n      properties:\n        optional:\n          type: string\n          nullable: false\n        optionalAndNullable:\n          type: string\n          nullable: true\n        required:\n          type: string\n          nullable: false\n        requiredAndNullable:\n          type: string\n          nullable: true\n      required: [required, requiredAndNullable]\n    5StartsWithNumber:\n      type: object\n      description: This schema name starts with a number\n    EnumInObjInArray:\n      type: array\n      items:\n        type: object\n        properties:\n          val:\n            type: string\n            enum:\n            - first\n            - second\n  parameters:\n    StringInPath:\n      name: str\n      description: A string path parameter\n      in: path\n      required: true\n      schema:\n        type: string\n  securitySchemes:\n    # This security scheme has a - in it, we need to make sure the name gets\n    # remapped to a valid Go id. See bug\n    access-token:\n      type: http\n      scheme: bearer\n      bearerFormat: |\n        JWT-format access token.\nsecurity:\n  - access-token: []\n\n",
			"canonicalURL": "/github.com/discord-gophers/goapi-gen@e7fa6cd101dbcb71ecf3759116d214c98730dbec/-/blob/internal/test/schemas/schemas.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/discord-gophers/goapi-gen/blob/e7fa6cd101dbcb71ecf3759116d214c98730dbec/internal/test/schemas/schemas.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /issues/185: get: operation \"Issue185\": responses: no responses"
}