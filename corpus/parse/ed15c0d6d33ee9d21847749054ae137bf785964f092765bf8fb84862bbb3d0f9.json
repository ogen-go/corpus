{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/onepassword/openapi.yaml",
			"byteSize": 41215,
			"content": "openapi: \"3.0.2\"\ninfo:\n  x-ballerina-display:\n    label: 1Password\n    iconPath: \"icon.png\"\n  title: 1Password Connect\n  description: \u003e\n    This is a generated connector from [1Password Connect API v1.0](https://1password.com/) OpenAPI specification.\n\n    1Password is the easiest way to store and use strong passwords. Log in to sites and fill forms securely with a single click.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials.\n\n    Create a [1Password account](https://1password.com/) and obtain OAuth tokens following [this guide](https://support.1password.com/manage-secrets-automation/#issue-revoke-or-rename-an-access-token).\n  version: \"1.3.0\"\n  contact:\n    name: 1Password Integrations\n    email: support@1password.com\n    url: https://support.1password.com/\nservers:\n  - url: http://localhost:8080/v1\n\nsecurity:\n- bearerAuth: []\n\ntags:\n  - name: Items\n    description: Access and manage items inside 1Password Vaults\n  - name: Vaults\n    description: Access 1Password Vaults\n  - name: Activity\n    description: Access API Request Activity\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    ErrorResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          description: HTTP Status Code\n        message:\n          type: string\n          description: A message detailing the error\n    File:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the file\n        name:\n          type: string\n          description: Name of the file\n        size:\n          type: integer\n          description: Size in bytes of the file\n        content_path:\n          type: string\n          description: Path of the Connect API that can be used to download the contents of this file.\n          readOnly: true\n        section:\n          type: object\n          description: For files that are in a section, this field describes the section.\n          properties:\n            id:\n              type: string\n              description: The UUID of a section in the item.\n        content:\n          type: string\n          format: byte\n          description: Base64-encoded contents of the file. Only set if size \u003c= OP_MAX_INLINE_FILE_SIZE_KB kb and `inline_files` is set to `true`.\n      example:\n        id: 6r65pjq33banznomn7q22sj44e\n        name: foo.txt\n        size: 35\n        content_path: v1/vaults/ionaiwtdvgclrixbt6ztpqcxnq/items/p7eflcy7f5mk7vg6zrzf5rjjyu/files/6r65pjq33banznomn7q22sj44e/content\n        content: VGhlIGZ1dHVyZSBiZWxvbmdzIHRvIHRoZSBjdXJpb3VzLgo=\n    Vault:\n      type: object\n      properties:\n        id:\n          description: The UUID of the vault.\n          type: string\n          pattern: '^[\\da-z]{26}$'\n        name:\n          description: The name of the vault.\n          type: string\n        description:\n          description: The description for the vault.\n          type: string\n        attributeVersion:\n          type: integer\n          description: The vault version\n        contentVersion:\n          type: integer\n          description: The version of the vault contents\n        items:\n          description: Number of active items in the vault\n          type: integer\n        type:\n          description: 'The type of vault. One of: \"EVERYONE\": The team Shared vault. \"PERSONAL\": The Private vault for the Connect server. \"USER_CREATED\": A vault created by a user.'\n          type: string\n          enum:\n            - USER_CREATED\n            - PERSONAL\n            - EVERYONE\n            - TRANSFER\n        createdAt:\n          description: Date and time when the vault was created.\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          description: Date and time when the vault or its contents were last changed.\n          type: string\n          format: date-time\n          readOnly: true\n    GeneratorRecipe:\n      description: The recipe is used in conjunction with the \"generate\" property to set the character set used to generate a new secure value\n      type: object\n      properties:\n        length:\n          type: integer\n          description: Length of the generated value\n          default: 32\n          minimum: 1\n          maximum: 64\n        characterSets:\n          description: 'An array containing of the kinds of characters to include. Optional. Possible values: \"LETTERS\" \"DIGITS\" \"SYMBOLS\"'\n\n          type: array\n          items:\n            type: string\n            enum:\n              - LETTERS\n              - DIGITS\n              - SYMBOLS\n          minimum: 0\n          maximum: 3\n          uniqueItems: true\n    Item:\n      type: object\n      required:\n        - vault\n        - category\n      properties:\n        id:\n          description: The UUID of the item.\n          type: string\n          pattern: '^[\\da-z]{26}$'\n        title:\n          description: The title of the item.\n          type: string\n        vault:\n          description: An object containing an id property whose value is the UUID of the vault the item is in.\n          type: object\n          required:\n            - id\n          properties:\n            id:\n              description: Id property whose value is the UUID of the vault the item is in.\n              type: string\n              pattern: '^[\\da-z]{26}$'\n        category:\n          description: The category of the item.\n          type: string\n          enum:\n            - \"LOGIN\"\n            - \"PASSWORD\"\n            - \"API_CREDENTIAL\"\n            - \"SERVER\"\n            - \"DATABASE\"\n            - \"CREDIT_CARD\"\n            - \"MEMBERSHIP\"\n            - \"PASSPORT\"\n            - \"SOFTWARE_LICENSE\"\n            - \"OUTDOOR_LICENSE\"\n            - \"SECURE_NOTE\"\n            - \"WIRELESS_ROUTER\"\n            - \"BANK_ACCOUNT\"\n            - \"DRIVER_LICENSE\"\n            - \"IDENTITY\"\n            - \"REWARD_PROGRAM\"\n            - \"DOCUMENT\"\n            - \"EMAIL_ACCOUNT\"\n            - \"SOCIAL_SECURITY_NUMBER\"\n            - \"CUSTOM\"\n        urls:\n          description: Array of URL objects containing URLs for the item.\n          type: array\n          items:\n            type: object\n            required:\n              - href\n            properties:\n              primary:\n                description: Whether this is the primary URL for the item.\n                type: boolean\n              href:\n                description: The address.\n                type: string\n                format: url\n          example:\n            - primary: true\n              href: https://example.com\n            - href: https://example.org\n        favorite:\n          description: Whether the item is marked as a favorite.\n          type: boolean\n          default: false\n        tags:\n          description: An array of strings of the tags assigned to the item.\n          type: array\n          items:\n            type: string\n        version:\n          description: The version of the item.\n          type: integer\n        state:\n          description: 'The state of the item. One of: \"ARCHIVED\" \"DELETED\"'\n          type: string\n          readOnly: true\n          enum:\n            - \"ARCHIVED\"\n            - \"DELETED\"\n        createdAt:\n          description: Date and time when the item was created.\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          description: Date and time when the vault or its contents were last changed.\n          type: string\n          format: date-time\n          readOnly: true\n        lastEditedBy:\n          description: UUID of the account that last changed the item.\n          type: string\n          readOnly: true\n    FullItem:\n      description: Object containing the item information.\n      allOf:\n        - $ref: \"#/components/schemas/Item\"\n        - type: object\n          properties:\n            sections:\n              type: array\n              description: An array of Section objects of the sections to include with the item.\n              items:\n                type: object\n                properties:\n                  id:\n                    description: A unique identifier for the section.\n                    type: string\n                  label:\n                    description: The label for the section.\n                    type: string\n            fields:\n              type: array\n              description: An array of Field objects of the fields to include with the item.\n              items:\n                $ref: '#/components/schemas/Field'\n            files:\n              type: array\n              description: Information about files.\n              items:\n                $ref: '#/components/schemas/File'\n    Field:\n      type: object\n      description: A field object which contain fields to include with the item.\n      required:\n        - id\n        - type\n      properties:\n        id:\n          description: Field ID.\n          type: string\n        section:\n          description: An object containing the UUID of a section in the item.\n          type: object\n          properties:\n            id:\n              description: The UUID of a section in the item.\n              type: string\n        type:\n          description: 'Use type for all other fields. Possible values are: \"STRING\" \"EMAIL\" \"CONCEALED\" \"URL\" \"OTP\" \"DATE\"'\n          type: string\n          default: \"STRING\"\n          enum:\n            - \"STRING\"\n            - \"EMAIL\"\n            - \"CONCEALED\"\n            - \"URL\"\n            - \"TOTP\"\n            - \"DATE\"\n            - \"MONTH_YEAR\"\n            - \"MENU\"\n        purpose:\n          description: Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.\n          type: string\n          enum:\n            - \"\"\n            - \"USERNAME\"\n            - \"PASSWORD\"\n            - \"NOTES\"\n        label:\n          description: The label for the field.\n          type: string\n        value:\n          description: The value of the field.\n          type: string\n        generate:\n          description: If value is not present then a new value should be generated for this field\n          type: boolean\n          default: false\n        recipe:\n          $ref: \"#/components/schemas/GeneratorRecipe\"\n        entropy:\n          description: For fields with a purpose of `PASSWORD` this is the entropy of the value\n          type: number\n          readOnly: true\n    APIRequest:\n      description: Represents a request that was made to the API. Including what Token was used and what resource was accessed.\n      type: object\n      properties:\n        requestId:\n          description: The unique id used to identify a single request.\n          type: string\n          format: uuid\n        timestamp:\n          description: The time at which the request was processed by the server.\n          type: string\n          format: date-time\n          readOnly: true\n        action:\n          description: 'The action taken. One of: \"READ\" \"CREATE\" \"UPDATE\" \"DELETE\"'\n          type: string\n          enum:\n            - READ\n            - CREATE\n            - UPDATE\n            - DELETE\n        result:\n          description: 'The result of the action. One of: \"SUCCESS\" \"DENY\"'\n          type: string\n          enum:\n            - SUCCESS\n            - DENY\n        actor:\n          description: An Actor object.\n          type: object\n          properties:\n            id:\n              description: The UUID of the Connect server that made the request.\n              type: string\n              format: uuid\n            account:\n              description: The UUID of the 1Password account the request went to.\n              type: string\n            jti:\n              description: The UUID of the access token used to authenticate the request.\n              type: string\n            userAgent:\n              description: The user agent string specified in the request.\n              type: string\n            requestIp:\n              description: The IP address the request originated from.\n              type: string\n        resource:\n          description: A Resource object.\n          type: object\n          properties:\n            type:\n              description: 'The resource requested. One of: \"ITEM\" \"VAULT\"'\n              type: string\n              enum:\n                - ITEM\n                - VAULT\n            vault:\n              description: An object containing an id property with the value of the UUID of the vault requested.\n              type: object\n              properties:\n                id:\n                  description: Id property with the value of the UUID of the vault requested.\n                  type: string\n                  pattern: '^[\\da-z]{26}$'\n            item:\n              description: An object containing an id property with the value of the UUID of the item requested.\n              type: object\n              properties:\n                id:\n                  description: Id property with the value of the UUID of the item requested.\n                  type: string\n                  pattern: '^[\\da-z]{26}$'\n            itemVersion:\n              description: The version of the item.\n              type: integer\n    Patch:\n      type: array\n      items:\n        type: object\n        properties:\n          op:\n            description: 'The kind of operation to perform. One of: add remove replace'\n            type: string\n            enum: [add, remove, replace]\n          path:\n            type: string\n            description: An RFC6901 JSON Pointer pointing to the Item document, an Item Attribute, and Item Field by Field ID, or an Item Field Attribute\n            example: \"/fields/06gnn2b95example10q91512p5/label\"\n          value:\n            description: The new value to apply at the path.\n            type: object\n        required:\n          - op\n          - path\npaths:\n  /activity:\n    get:\n      operationId: GetApiActivity\n      tags:\n        - Activity\n      summary: Retrieve a list of API Requests that have been made.\n      security:\n        - ConnectToken: []\n      parameters:\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            example: 10\n            default: 50\n          description: How many API Events should be retrieved in a single request.\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            example: 50\n            default: 0\n          description: How far into the collection of API Events should the response start\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Content-Range:\n              description: An decription of what part of the collection has been returned as well as the total size.\n              schema:\n                type: string\n                example: 1-50/1134\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/APIRequest\"\n        \"401\":\n          description: Invalid or missing token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 401\n                message: Invalid token signature\n  /vaults:\n    get:\n      operationId: GetVaults\n      tags:\n        - Vaults\n      summary: Get all Vaults\n      security:\n        - ConnectToken: []\n      parameters:\n        - in: query\n          name: filter\n          schema:\n            type: string\n            example: name eq \"Some Vault Name\"\n          description: Filter the Vault collection based on Vault name using SCIM eq filter\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Vault\"\n        \"401\":\n          description: Invalid or missing token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 401\n                message: Invalid token signature\n  /vaults/{vaultUuid}:\n    get:\n      operationId: GetVaultById\n      tags:\n        - Vaults\n      summary: Get Vault details and metadata\n      security:\n        - ConnectToken: []\n      parameters:\n        - in: path\n          name: vaultUuid\n          schema:\n            type: string\n            pattern: '^[\\da-z]{26}$'\n          required: true\n          description: The UUID of the Vault to fetch Items from\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Vault\"\n        \"401\":\n          description: Invalid or missing token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 401\n                message: Invalid token signature\n        \"403\":\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 403\n                message: vault {vaultUuid} is not in scope\n        \"404\":\n          description: Vault not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 404\n                message: vault {itemUuid} not found\n  /vaults/{vaultUuid}/items:\n    get:\n      operationId: GetVaultItems\n      tags:\n        - Items\n      summary: Get all items for inside a Vault\n      security:\n        - ConnectToken: []\n      parameters:\n        - in: path\n          name: vaultUuid\n          schema:\n            type: string\n            pattern: '^[\\da-z]{26}$'\n          required: true\n          description: The UUID of the Vault to fetch Items from\n        - in: query\n          name: filter\n          schema:\n            type: string\n            example: title eq \"Some Item Name\"\n          description: Filter the Item collection based on Item name using SCIM eq filter\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Item\"\n        \"401\":\n          description: Invalid or missing token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 401\n                message: Invalid token signature\n        \"404\":\n          description: Vault not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 404\n                message: vault {vaultUuid} not found\n    post:\n      operationId: CreateVaultItem\n      tags:\n        - Items\n      summary: Create a new Item\n      security:\n        - ConnectToken: []\n      parameters:\n        - in: path\n          name: vaultUuid\n          schema:\n            type: string\n            pattern: '^[\\da-z]{26}$'\n          required: true\n          description: The UUID of the Vault to create an Item in\n      requestBody:\n        description: Object containing the information to create the item.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FullItem\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullItem\"\n        \"400\":\n          description: Unable to create item due to invalid input\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 400\n                message: Invalid item category\n        \"401\":\n          description: Invalid or missing token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 401\n                message: Invalid token signature\n        \"403\":\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 403\n                message: vault {vaultUuid} is not in scope\n        \"404\":\n          description: Item not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              examples:\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    status: 404\n                    message: vault {vaultUuid} not found\n  /vaults/{vaultUuid}/items/{itemUuid}:\n    get:\n      operationId: GetVaultItemById\n      tags:\n        - Items\n      summary: Get the details of an Item\n      security:\n        - ConnectToken: []\n      parameters:\n        - in: path\n          name: vaultUuid\n          schema:\n            type: string\n            pattern: '^[\\da-z]{26}$'\n          required: true\n          description: The UUID of the Vault to fetch Item from\n        - in: path\n          name: itemUuid\n          schema:\n            type: string\n            pattern: '^[\\da-z]{26}$'\n          required: true\n          description: The UUID of the Item to fetch\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullItem\"\n        \"401\":\n          description: Invalid or missing token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 401\n                message: Invalid token signature\n        \"403\":\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 403\n                message: vault {vaultUuid} is not in scope\n        \"404\":\n          description: Item not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              examples:\n                itemNotFound:\n                  summary: Item not found\n                  value:\n                    status: 404\n                    message: item {itemUuid} not found\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    status: 404\n                    message: vault {vaultUuid} not found\n    put:\n      operationId: UpdateVaultItem\n      tags:\n        - Items\n      summary: Update an Item\n      security:\n        - ConnectToken: []\n      parameters:\n        - in: path\n          name: vaultUuid\n          schema:\n            type: string\n            pattern: '^[\\da-z]{26}$'\n          required: true\n          description: The UUID of the Item's Vault\n        - in: path\n          name: itemUuid\n          schema:\n            type: string\n            pattern: '^[\\da-z]{26}$'\n          required: true\n          description: The UUID of the Item to update\n      requestBody:\n        description: Object containing the information to update in item.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FullItem\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullItem\"\n        \"400\":\n          description: Unable to create item due to invalid input\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 400\n                message: The item doesn't have a {example field name} field.\n        \"401\":\n          description: Invalid or missing token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 401\n                message: Invalid token signature\n        \"403\":\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 403\n                message: vault {vaultUuid} is not in scope\n        \"404\":\n          description: Item not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              examples:\n                itemNotFound:\n                  summary: Item not found\n                  value:\n                    status: 404\n                    message: item {itemUuid} not found\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    status: 404\n                    message: vault {vaultUuid} not found\n    delete:\n      operationId: DeleteVaultItem\n      tags:\n        - Items\n      summary: Delete an Item\n      security:\n        - ConnectToken: []\n      parameters:\n        - in: path\n          name: vaultUuid\n          schema:\n            type: string\n            pattern: '^[\\da-z]{26}$'\n          required: true\n          description: The UUID of the Vault the item is in\n        - in: path\n          name: itemUuid\n          schema:\n            type: string\n            pattern: '^[\\da-z]{26}$'\n          required: true\n          description: The UUID of the Item to update\n      responses:\n        \"204\":\n          description: Successfully deleted an item\n        \"401\":\n          description: Invalid or missing token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 401\n                message: Invalid token signature\n        \"403\":\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 403\n                message: vault {vaultUuid} is not in scope\n        \"404\":\n          description: Item not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              examples:\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    status: 404\n                    message: vault {vaultUuid} not found\n    patch:\n      description: \u003e\n        Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.\n\n\n        When modifying a specific ItemField, the ItemField's ID in the `path` attribute of the operation object: `/fields/{fieldId}`\n\n      operationId: PatchVaultItem\n      tags:\n        - Items\n      summary: Update a subset of Item attributes\n      security:\n        - ConnectToken: [ ]\n      parameters:\n        - in: path\n          name: vaultUuid\n          schema:\n            type: string\n            pattern: '^[\\da-z]{26}$'\n          required: true\n          description: The UUID of the Vault the item is in\n        - in: path\n          name: itemUuid\n          schema:\n            type: string\n            pattern: '^[\\da-z]{26}$'\n          required: true\n          description: The UUID of the Item to update\n      requestBody:\n        description: Object containing the subset of information to patch the item.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n            examples:\n              ReplaceAllAttributes:\n                value:\n                  -\n                    op: replace\n                    path: \"/\"\n                    value: { \"title\": \"New Title\", \"favorite\": true, \"tags\": [\"tag1\", \"tag2\"], \"...\":\"Any attr from FullItem schema\" }\n                summary: Replace an entire Item with new fields. Equivalent to a PUT request.\n              PatchItemAttr:\n                value:\n                  -\n                    op: \"replace\"\n                    path: \"/favorite\"\n                    value: true\n                  -\n                    op: \"remove\"\n                    path: \"/tags/1\"\n                summary: Update specific Item attributes\n              PatchItemField:\n                value:\n                  -\n                    op: \"add\"\n                    path: \"/fields\"\n                    value: {\"label\": \"New Field\", \"type\": \"string\", \"value\": \"hunter2\"}\n                summary: Add a new ItemField to the Item\n              PatchItemFieldWithID:\n                value:\n                  -\n                    op: \"replace\"\n                    path: \"/fields/r9qxq7xnhfhukoxsc8ymqr0y11\"\n                    value: {\"label\": \"Replacement Title\", \"type\": \"string\", \"value\": \"new value\"}\n                  -\n                    op: \"remove\"\n                    path: \"/fields/h2nl155dshi043yse7wa3u1hs7\"\n                summary: Modify or remove an ItemField.\n              PatchItemFieldAttr:\n                value:\n                  -\n                    op: \"add\"\n                    path: \"/fields/s2ju540zlna8bdj4uro7sj64rk/label\"\n                    value: \"New field name\"\n                  - op: \"remove\"\n                    path: \"/fields/s2ju540zlna8bdj4uro7sj64rk/value\"\n                summary: Modify a specific ItemField attribute.\n\n      responses:\n        \"200\":\n          description: OK - Item updated. If no Patch operations were provided, Item is unmodified.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullItem\"\n        \"401\":\n          description: Invalid or missing token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 401\n                message: Invalid token signature\n        \"403\":\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 403\n                message: vault {vaultUuid} is not in scope\n        \"404\":\n          description: Item not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              examples:\n                itemNotFound:\n                  summary: Item not found\n                  value:\n                    status: 404\n                    message: item {itemUuid} not found\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    status: 404\n                    message: vault {vaultUuid} not found\n  /vaults/{vaultUuid}/items/{itemUuid}/files:\n    get:\n      operationId: GetItemFiles\n      tags:\n        - Files\n      summary: Get all the files inside an Item\n      security:\n        - ConnectToken: []\n      parameters:\n        - in: path\n          name: vaultUuid\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: The UUID of the Vault to fetch Items from\n        - in: path\n          name: itemUuid\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: The UUID of the Item to fetch files from\n        - in: query\n          name: inline_files\n          schema:\n            type: boolean\n            example: true\n          description: Tells server to return the base64-encoded file contents in the response.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/File\"\n        \"401\":\n          description: Invalid or missing token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 401\n                message: Invalid token signature\n        \"404\":\n          description: Item not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              examples:\n                itemNotFound:\n                  summary: Item not found\n                  value:\n                    status: 404\n                    message: item {itemUuid} not found\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    status: 404\n                    message: vault {vaultUuid} not found\n        \"413\":\n          description: File content too large to display\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              examples:\n                fileTooLarge:\n                  summary: File too large\n                  value:\n                    status: 413\n                    message: File is too large to inline in request. Use the /v1/vaults/{vaultUUID}/items/{itemUUID}/files/{fileUUID}/content endpoint instead.\n  /vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}:\n    get:\n      operationId: GetDetailsOfFileById\n      tags:\n        - Files\n      summary: Get the details of a File\n      security:\n        - ConnectToken: []\n      parameters:\n        - in: path\n          name: vaultUuid\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: The UUID of the Vault to fetch Item from\n        - in: path\n          name: itemUuid\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: The UUID of the Item to fetch File from\n        - in: path\n          name: fileUuid\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: The UUID of the File to fetch\n        - in: query\n          name: inline_files\n          schema:\n            type: boolean\n            example: true\n          description: Tells server to return the base64-encoded file contents in the response.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n        \"401\":\n          description: Invalid or missing token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 401\n                message: Invalid token signature\n        \"403\":\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 403\n                message: vault {vaultUuid} is not in scope\n        \"404\":\n          description: File not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              examples:\n                fileNotFound:\n                  summary: File not found\n                  value:\n                    status: 404\n                    message: file {fileUuid} not found\n                itemNotFound:\n                  summary: Item not found\n                  value:\n                    status: 404\n                    message: item {itemUuid} not found\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    status: 404\n                    message: vault {vaultUuid} not found\n        \"413\":\n          description: File content too large to display\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              examples:\n                fileTooLarge:\n                  summary: File too large\n                  value:\n                    status: 413\n                    message: File is too large to inline in request. Use the /v1/vaults/{vaultUUID}/items/{itemUUID}/files/{fileUUID}/content endpoint instead.\n  /vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content:\n    parameters:\n      - in: path\n        name: vaultUuid\n        schema:\n          type: string\n          format: uuid\n        required: true\n        description: The UUID of the Vault the item is in\n      - in: path\n        name: itemUuid\n        schema:\n          type: string\n          format: uuid\n        required: true\n        description: The UUID of the Item the File is in\n      - in: path\n        name: fileUuid\n        required: true\n        schema:\n          type: string\n        description: UUID of the file to get content from\n    get:\n      operationId: DownloadFileByID\n      tags:\n        - Files\n      summary: Get the content of a File\n      security:\n        - ConnectToken: [ ]\n      responses:\n        \"200\":\n          description: \"Success\"\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n          headers:\n            Content-Disposition:\n              schema:\n                type: string\n                example: attachment; filename=\"privkey.pem\"\n            Content-Length:\n              schema:\n                type: string\n                example: \"6432\"\n        \"401\":\n          description: Invalid or missing token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example:\n                status: 401\n                message: Invalid token signature\n        \"404\":\n          description: File not found\n          content: \n            application/json:\n                schema:\n                  $ref: \"#/components/schemas/ErrorResponse\"\n                examples:\n                  fileNotFound:\n                    summary: File not found\n                    value:\n                      status: 404\n                      message: file {fileUuid} not found\n                  itemNotFound:\n                    summary: Item not found\n                    value:\n                      status: 404\n                      message: item {itemUuid} not found\n                  vaultNotFound:\n                    summary: Vault not found\n                    value:\n                      status: 404\n                      message: vault {vaultUuid} not found\n  /heartbeat:\n    get:\n      operationId: GetHeartbeat\n      tags:\n        - Health\n      summary: Ping the server for liveness\n      servers:\n        - url: http://localhost:8080\n      responses:\n        \"200\":\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: .\n  /metrics:\n    get:\n      operationId: GetPrometheusMetrics\n      tags:\n        - Metrics\n      description: See Prometheus documentation for a complete data model.\n      summary: Query server for exposed Prometheus metrics\n      servers:\n        - url: http://localhost:8080\n      responses:\n        \"200\":\n          description: Successfully returned Prometheus metrics\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: |\n                  # HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.\n                  # TYPE go_gc_duration_seconds summary\n                  go_gc_duration_seconds{quantile=\"0\"} 2.9153e-05\n                  go_gc_duration_seconds{quantile=\"0.25\"} 6.2832e-05\n                  go_gc_duration_seconds{quantile=\"0.5\"} 9.7187e-05\n                  go_gc_duration_seconds{quantile=\"0.75\"} 0.000112967\n                  go_gc_duration_seconds{quantile=\"1\"} 0.000215819\n                  go_gc_duration_seconds_sum 0.001376862\n                  go_gc_duration_seconds_count 14\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /vaults/{vaultUuid}/items/{itemUuid}: get: operation \"GetVaultItemById\": security: unknown security schema \"ConnectToken\""
}