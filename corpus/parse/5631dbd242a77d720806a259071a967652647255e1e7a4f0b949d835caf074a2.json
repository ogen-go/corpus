{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws/aws-connected-device-framework"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "source/packages/services/greengrass2-provisioning/docs/swagger.yml",
			"byteSize": 59558,
			"content": "openapi: 3.0.0\ninfo:\n  title: \"Connected Device Framework: Greengrass V2 Provisioning\"\n  description: \u003e\n    Allows for management and bulk provisioning of Greengrass V2 core devices.\n\n  version: 1.0.0\n\ntags:\n  - name: Templates\n    description: \u003e\n      Templates represent the components (and their relevant configuration) to be deployed to a Greengrass core device. Templates are versioned to aid with managing how changes are rolled out to target core devices.\n\n  - name: Core Device Tasks\n    description: \u003e\n      Tasks are what manage the creation of Greengrass core devices.\n\n  - name: Core Devices\n    description: \u003e\n      Greengrass core devices are provisioned in prepartion for deploying compoonents via predefined templates.\n\n  - name: Client Device Tasks\n    description: \u003e\n      Tasks are what manage the creation of Greengrass client devices.\n\n  - name: Client Devices\n    description: \u003e\n      Client devices are associated with core devices.\n\n  - name: Deployments\n    description: \u003e\n      Once a Greengrass core device has been configured, a deployment may be executed.\n\n  - name: Deployment Tasks\n    description: \u003e\n      Tasks are what manage the creation of Greengrass core deployments.\n\n\npaths:\n  \"/templates\":\n    get:\n      parameters:\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/exclusiveStartName'\n      tags:\n        - Templates\n      summary: List all available templates.\n      operationId: listTemplates\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/TemplateList\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n    post:\n      tags:\n        - Templates\n      summary: Create a new template.\n      description: \u003e\n        Defines a new template comprised on the components, and their configuration, to construct a Greengrass core device from.\n\n      operationId: createTemplate\n      requestBody:\n        content:\n          application/vnd.aws-cdf-v1.0+json:\n            schema:\n              $ref: '#/components/schemas/Template'\n            examples:\n              Python:\n                description: The following example components object specifies to deploy a component, com.example.PythonRuntime, that expects a configuration parameter named pythonVersion.\n                value:\n                  name: edge_cameras\n                  components:\n                    - key: com.example.PythonRuntime\n                      version: 1.0.0\n                      configurationUpdate:\n                        merge: \"{\\\"pythonVersion\\\":\\\"3.7\\\"}\"\n              IncludingReset:\n                description: The following example components object specifies to deploy this industrial dashboard component and configuration update.\n                value:\n                  name: dashboards\n                  components:\n                    - key: com.example.IndustrialDashboard\n                      version: 1.0.0\n                      configurationUpdate:\n                        reset:\n                          - \"/network/useHttps\"\n                          - \"/tags\"\n                        merge: \"{\\\"tags\\\":[\\\"/boiler/1/temperature\\\",\\\"/boiler/1/pressure\\\",\\\"/boiler/2/temperature\\\",\\\"/boiler/2/pressure\\\"]}\"\n              JobConfig:\n                description: The following example request overrides any default job rollout config.\n                value:\n                  name: edge_cameras\n                  components:\n                    - key: com.example.PythonRuntime\n                      version: 1.0.0\n                      configurationUpdate:\n                        merge: \"{\\\"pythonVersion\\\":\\\"3.7\\\"}\"\n                  jobConfig:\n                    jobExecutionsRolloutConfig:\n                      exponentialRate:\n                        baseRatePerMinute: 100\n                        incrementFactor:\n                        rateIncreaseCriteria:\n                          numberOfNotifiedThings:\n                          numberOfSucceededThings:\n                      maximumPerMinute:\n                    abortConfig:\n                      criteriaList:\n                        - failureType:\n                          action:\n                          thresholdPercentage:\n                          minNumberOfExecutedThings:\n                    timeoutConfig:\n                      inProgressTimeoutInMinutes:\n              DeploymentPolicies:\n                description: The following example request specifies custom Greengrass deployment policies.\n                value:\n                  name: edge_cameras\n                  components:\n                    - key: com.example.PythonRuntime\n                      version: 1.0.0\n                      configurationUpdate:\n                        merge: \"{\\\"pythonVersion\\\":\\\"3.7\\\"}\"\n                  DeploymentPolicies:\n                    failureHandlingPolicy: ROLLBACK\n                    componentUpdatePolicy:\n                      timeoutInSeconds: 60\n                      action: NOTIFY_COMPONENTS\n                    configurationValidationPolicy:\n                      timeoutInSeconds: 60\n\n      responses:\n        \"201\":\n          description: Created\n          headers:\n            location:\n              schema:\n                type: string\n              description: URI of template created.\n            x-name:\n              schema:\n                type: string\n              description: Name of template created.\n            x-version:\n              schema:\n                type: integer\n              description: Version of template created.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"409\":\n          $ref: \"#/components/responses/Conflict\"\n\n  \"/templates/{templateName}\":\n    parameters:\n      - $ref: '#/components/parameters/templateName'\n    put:\n      tags:\n        - Templates\n      summary: Update an existing template.\n      description: \u003e\n        Updates an existing template, creating a new template version in the process.\n\n      operationId: updateTemplate\n      requestBody:\n        content:\n          application/vnd.aws-cdf-v1.0+json:\n            schema:\n              $ref: '#/components/schemas/EditableTemplate'\n      responses:\n        \"204\":\n          description: Updated\n          headers:\n            location:\n              schema:\n                type: string\n              description: URI of template updated.\n            x-name:\n              schema:\n                type: string\n              description: Name of template updated.\n            x-version:\n              schema:\n                type: integer\n              description: New latest version of template.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n\n    get:\n      tags:\n        - Templates\n      summary: Find a specific template\n      description: \u003e\n        Returns a specific template by template name.\n      operationId: getTemplate\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/Template\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n\n    delete:\n      tags:\n        - Templates\n      summary: Delete a specific template\n      description: \u003e\n        Deletes a template by template name.\n      operationId: deleteTemplate\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n\n  \"/templates/{templateName}/versions\":\n    parameters:\n      - $ref: '#/components/parameters/templateName'\n    get:\n      parameters:\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/exclusiveStartVersion'\n      tags:\n        - Templates\n      summary: List template versions.\n      description: \u003e\n        List all versions for a specific template.\n      operationId: listTemplateVersions\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/TemplateVersionList\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n    \n  \"/templates/{templateName}/versions/{templateVersion}\":\n    parameters:\n      - $ref: '#/components/parameters/templateName'\n      - $ref: '#/components/parameters/templateVersion'\n    get:\n      tags:\n        - Templates\n      summary: Retrieve a specific template version.\n      description: \u003e\n        Retrieve a specific template version.\n      operationId: getTemplateVersion\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/Template\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n\n  \"/coreTasks\":\n    post:\n      tags:\n        - Core Device Tasks\n      summary: Provision / delete Greengrass V2 cores.\n      description: \u003e\n        If `type` is `Create`, a task is created to provision 1 or more Greengrass V2 cores based on a predefined provisioning templates. If `type` is `Delete` then the task created is to delete 1 or more cores.\n\n        When `Create`, if the referenced `thingName` does not exist, an AWS IoT Thing is provisioned using the provided `provisioningTemplate`, then configured as a Greengrass V2 Core device. If it exists, the AWS IoT Thing is not updated but the Greengrass V2 Core device configuration is.\n\n        This is an asynchronous call, meaning that when submitted the call will return immediately with a `taskId` while the cores are being created/deleted in the background. Use the `GET /coreTasks/:taskId` to retrieve the status of the task.\n\n      operationId: createCoreTask\n      requestBody:\n        content:\n          application/vnd.aws-cdf-v1.0+json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/ProvisionCoresTask'\n                - $ref: '#/components/schemas/DeleteCoresTask'\n            examples:\n              provision_cores:\n                value:\n                  coreVersion: 2.5.1\n                  type: Create\n                  cores:\n                    - name: my-core-one\n                      templateName: my-template\n                    - name: my-core-two\n                      templateName: my-template\n                    - name: my-core-three\n                      templateName: my-other-template\n              delete_cores:\n                value:\n                  type: Delete\n                  cores:\n                    - name: my-core-one\n                    - name: my-core-two\n                    - name: my-core-three\n      responses:\n        \"202\":\n          description: Accepted\n          headers:\n            location:\n              schema:\n                type: string\n              description: URI of core task created.\n            x-taskid:\n              schema:\n                type: string\n              description: ID of core task created.\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/CoreTask\"\n\n    get:\n      parameters:\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/exclusiveStartTaskId'\n      tags:\n        - Core Device Tasks\n      summary: Lists core tasks.\n      description: \u003e\n        Lists all core tasks executed to create Greengrass V2 cores managed by this service. \n      operationId: listCoreTasks\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/CoreTaskList\"\n\n  \"/coreTasks/{taskId}\":\n    parameters:\n      - $ref: '#/components/parameters/taskId'\n    get:\n      tags:\n        - Core Device Tasks\n      summary: Retrieves a Greengrass Core device task.\n      description: \u003e\n        Retrieves the definition and status of the Greengrass Core device task.\n      operationId: getCoreTask\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/CoreTask\"\n\n  \"/cores\":\n    parameters:\n      - $ref: '#/components/parameters/templateNameQuery'\n      - $ref: '#/components/parameters/templateVersionQuery'\n      - $ref: '#/components/parameters/failedOnly'\n      - $ref: '#/components/parameters/count'\n      - $ref: '#/components/parameters/exclusiveStartThingName'\n\n    get:\n      tags:\n        - Core Devices\n      summary: Lists Greengrass V2 cores managed by this service.\n      description: \u003e\n        Lists all Greengrass V2 cores managed by this service. \n\n        May optionally filter by `templateName`, `templateVersion`, and `failedOnly`.\n\n      operationId: listCores\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/CoreList\"\n\n  \"/cores/{thingName}\":\n    parameters:\n      - $ref: '#/components/parameters/thingName'\n    get:\n      tags:\n        - Core Devices\n      summary: Retrieves a Greengrass Core device.\n      description: \u003e\n        Retrieves the definition of a specific Greengrass Core device.\n      operationId: getCore\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/Core\"\n\n  \"/cores/:thingName/deviceTasks\":\n    parameters:\n      - $ref: '#/components/parameters/thingName'\n    post:\n      tags:\n        - Client Device Tasks\n      summary: Associate client devices with the provided core.\n      description: \u003e\n        Associates 1 or more client devices with an existing Greengrass V2 core.\n\n        If the referenced `thingName` does not exist, an AWS IoT Thing is provisioned using the provided `provisioningTemplate`.\n\n        The AWS IoT thing is then associated with the Greengrass V2 core.\n\n        This is an asynchronous call, meaning that when submitted the call will return immediately with a `taskId` while the cores are being created in the background. Use the `GET /deviceTasks/:taskId` to retrieve the status of the task.\n\n      operationId: createDeviceTask\n      requestBody:\n        content:\n          application/vnd.aws-cdf-v1.0+json:\n            schema:\n              $ref: '#/components/schemas/DeviceTask'\n\n      responses:\n        \"202\":\n          description: Accepted\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/DeviceTask\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"409\":\n          $ref: \"#/components/responses/Conflict\"\n\n  \"/deviceTasks/:taskId\":\n    parameters:\n      - $ref: '#/components/parameters/taskId'\n    get:\n      tags:\n        - Client Device Tasks\n      summary: Retrieves a Greengrass client device task.\n      description: \u003e\n        Retrieves the definition and status of the Greengrass client device task.\n      operationId: getDeviceTask\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/DeviceTask\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n\n  \"/devices/:thingName\":\n    parameters:\n      - $ref: '#/components/parameters/thingName'\n    get:\n      tags:\n        - Client Devices\n      summary: Retrieves a Greengrass client device.\n      description: \u003e\n        Retrieves the definition of a specific Greengrass client device.\n      operationId: getDevice\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/Device\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n\n    delete:\n      parameters:\n        - $ref: '#/components/parameters/deprovision'\n      tags:\n        - Client Devices\n      summary: Deletes a Greengrass V2 client device.\n      description: \u003e\n        Deletes a Greengrass V2 client device.\n\n        Client devices are disassociated from its core with an option to delete their corresponding AWS IoT things.\n\n      operationId: deleteDevice\n      responses:\n        \"204\":\n          description: No content\n\n  \"/deploymentTasks\":\n    post:\n      tags:\n        - Deployment Tasks\n      summary: Create a deployment task.\n      description: \u003e\n        Deploy the components as configured per the template/version assigned to 1 or more Greengrass V2 cores.\n\n        This is an asynchronous call, meaning that when submitted the call will return immediately with a `taskId` while the deployments are being created in the background. Use the `GET /deployments/:taskId` to retrieve the status of the task.\n\n      operationId: createDeploymentTask\n      requestBody:\n        content:\n          application/vnd.aws-cdf-v1.0+json:\n            schema:\n              $ref: '#/components/schemas/NewDeploymentTask'\n\n      responses:\n        \"202\":\n          description: Accepted\n          headers:\n            location:\n              schema:\n                type: string\n              description: URI of deployment task created.\n            x-taskid:\n              schema:\n                type: string\n              description: ID of deployment task created.\n\n    get:\n      parameters:\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/exclusiveStartTaskId'\n      tags:\n        - Deployment Tasks\n      summary: Lists deployment tasks.\n      description: \u003e\n        Lists all deployment tasks managed by this service. \n      operationId: listDeployments\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/DeploymentTaskList\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n\n  \"/deploymentTasks/:taskId\":\n    parameters:\n      - $ref: '#/components/parameters/taskId'\n    get:\n      tags:\n        - Deployment Tasks\n      summary: Retrieves a deployment task.\n      description: \u003e\n        Retrieves the definition and status of a deployment task.\n      operationId: getDeploymentTask\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/DeploymentTask\"\n\n  \"/deploymentTasks/:taskId/cores\":\n    parameters:\n      - $ref: '#/components/parameters/taskId'\n    get:\n      parameters:\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/exclusiveStartThingName'\n      tags:\n        - Cores\n      summary: Lists all cores updated as part of a deployment task.\n      description: \u003e\n        Retrieves the definition and status of a deployment task.\n      operationId: listDeploymentTaskCores\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/CoreDeploymentList\"\n\n  \"/deploymentTasks/:taskId/cores/:thingName\":\n    parameters:\n      - $ref: '#/components/parameters/taskId'\n      - $ref: '#/components/parameters/thingName'\n    get:\n      tags:\n        - Deployment Tasks\n      summary: Retrieve core deployment status.\n      description: \u003e\n        Retrieves the status of a specific core of a specific deployment.\n      operationId: getDeploymentTaskCore\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/CoreDeployment\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n\n  \"/cores/:thingName/deployments\":\n    parameters:\n      - $ref: '#/components/parameters/thingName'\n    get:\n      parameters:\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/exclusiveStartTaskId'\n      tags:\n        - Deployments\n      summary: Lists core deployments.\n      description: \u003e\n        Lists details of all deployments a core has been part of.\n      operationId: listCoreDeployments\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/DeploymentTaskList\"\n\n  \"/fleet/summary\":\n    get:\n      tags:\n        - Summaries\n      summary: Returns fleet summary.\n      description: \u003e\n        Provides a summary of the entire fleet managed by this module.\n      operationId: getFleetSummary\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.aws-cdf-v1.0+json:\n              schema:\n                $ref: \"#/components/schemas/FleetSummary\"\n\n\ncomponents:\n\n  parameters:\n\n    templateName:\n      name: templateName\n      in: path\n      description: Name of template\n      required: true\n      schema:\n        type: string\n\n    templateVersion:\n      name: templateVersion\n      in: path\n      description: Template version number.\n      required: true\n      schema:\n        type: integer\n\n    templateNameQuery:\n      name: templateName\n      in: query\n      description: Name of template\n      schema:\n        type: string\n\n    templateVersionQuery:\n      name: templateVersion\n      in: query\n      description: Template version number.\n      schema:\n        type: integer\n\n    taskIdQuery:\n      name: taskId\n      in: query\n      description: Device creation task id.\n      schema:\n        type: integer\n\n    taskId:\n      name: taskId\n      in: path\n      description: Task ID\n      required: true\n      schema:\n        type: string\n\n    thingName:\n      name: thingName\n      in: path\n      description: Name of the thing within AWS IoT.\n      required: true\n      schema:\n        type: string\n\n    deprovision:\n      name: deprovision\n      in: query\n      description: If true, the devices corresponding AWS IoT Thing will be deprovisioned.\n      schema:\n        type: boolean\n        default: false\n\n    deprovisionClients:\n      name: deprovisionClients\n      in: query\n      description: If true, the cores corresponding AWS IoT Thing will be deprovisioned.\n      schema:\n        type: boolean\n        default: false\n\n    failedOnly:\n      name: failedOnly\n      in: query\n      description: Filters cores with failed deployments.\n      schema:\n        type: boolean\n        default: false\n\n    count:\n      name: count\n      in: query\n      description: Total number of results to return per paginated response.\n      schema:\n        type: integer\n        minimum: 1\n\n    exclusiveStartName:\n      name: exclusiveStartName\n      in: query\n      description: Paginated results to start from name (exclusive of).\n      schema:\n        type: string\n\n    exclusiveStartThingName:\n      name: exclusiveStartThingName\n      in: query\n      description: Paginated results to start from thing name (exclusive of).\n      schema:\n        type: string\n\n    exclusiveStartVersion:\n      name: exclusiveStartVersion\n      in: query\n      description: Paginated results to start from version (exclusive of).\n      schema:\n        type: integer\n        minimum: 1\n\n    exclusiveStartTaskId:\n      name: exclusiveStartTaskId\n      in: query\n      description: Paginated results to start from task id (exclusive of).\n      schema:\n        type: string\n\n\n  responses:\n\n    Created:\n      description: Created successfully\n      headers:\n        location:\n          schema:\n            type: string\n\n    Accepted:\n      description: Accepted for processing\n      headers:\n        location:\n          schema:\n            type: string\n\n    NoContent:\n      description: No content\n\n    BadRequest:\n      description: Invalid input\n      content:\n        application/vnd.aws-cdf-v1.0+json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n\n    NotFound:\n      description: Not found\n      content:\n        application/vnd.aws-cdf-v1.0+json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n\n    Conflict:\n      description: Conflict\n      content:\n        application/vnd.aws-cdf-v1.0+json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n\n\n  schemas:\n\n    EditableTemplate:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of template.\n        components:\n          type: array\n          description: A list of components\n          items:\n            $ref: \"#/components/schemas/Component\"\n        jobConfig:\n          $ref: \"#/components/schemas/JobConfig\"\n          description: Optional default job config to be applied to deployments created using this template. May be provided/overridden at time of creating the deployment.\n        deploymentPolicies:\n          $ref: \"#/components/schemas/DeploymentPolicy\"\n          description: Optional default policies to be applied to deployments created using this template. May be provided/overridden at time of creating the deployment.\n\n    Template:\n      allOf:\n        - $ref: \"#/components/schemas/EditableTemplate\"\n        - type: object\n          properties:\n            version:\n              type: number\n              description: Auto-incrementing template version number.\n              readOnly: true\n            enabled:\n              type: boolean\n              description: Whether the template is enabled for use.\n            createdAt:\n              type: string\n              format: 'date-time'\n              description: Date/time the template was created.\n              readOnly: true\n            updatedAt:\n              type: string\n              format: 'date-time'\n              description: Date/time the template was updated.\n              readOnly: true\n\n    TemplateList:\n      properties:\n        templates:\n          type: array\n          description: A list of templates\n          items:\n            $ref: \"#/components/schemas/Template\"\n        pagination:\n          type: object\n          properties:\n            lastEvaluated:\n              type: object\n              properties:\n                name:\n                  type: string\n            count:\n              type: integer\n\n    TemplateVersionList:\n      properties:\n        templates:\n          type: array\n          description: A list of templates\n          items:\n            $ref: \"#/components/schemas/Template\"\n        pagination:\n          type: object\n          properties:\n            lastEvaluated:\n              type: object\n              properties:\n                version:\n                  type: integer\n            count:\n              type: integer\n\n    Component:\n      type: object\n      properties:\n        key:\n          type: string\n          description: Unique ID of the component.\n        version:\n          type: number\n          description: Specific version of the component\n        configurationUpdate:\n          type: object\n          description: The configuration updates to deploy for the component. You can define reset updates and merge updates. A reset updates the keys that you specify to the default configuration for the component. A merge updates the core device’s component configuration with the keys and values that you specify. The AWS IoT Greengrass Core software applies reset updates before it applies merge updates. For more information, see Update component configurations in the AWS IoT Greengrass V2 Developer Guide.\n          properties:\n            merge:\n              type: string\n              description: A serialized JSON string that contains the configuration object to merge to target devices. The core device merges this configuration with the component’s existing configuration. If this is the first time a component deploys on a device, the core device merges this configuration with the component’s default configuration. This means that the core device keeps it’s existing configuration for keys and values that you don’t specify in this object. For more information, see Merge configuration updates in the AWS IoT Greengrass V2 Developer Guide.\n            reset:\n              type: array\n              description: The list of configuration nodes to reset to default values on target devices. Use JSON pointers to specify each node to reset. JSON pointers start with a forward slash (/ ) and use forward slashes to separate the key for each level in the object. For more information, see the JSON pointer specification and Reset configuration updates in the AWS IoT Greengrass V2 Developer Guide.\n              items:\n                type: string\n        runWith:\n          type: object\n          description: The system user and group that the AWS IoT Greengrass Core software uses to run component processes on the core device. If you omit this parameter, the AWS IoT Greengrass Core software uses the system user and group that you configure for the core device. For more information, see Configure the user and group that run components in the AWS IoT Greengrass V2 Developer Guide.\n          properties:\n            posixUser:\n              type: string\n              description: The POSIX system user and (optional) group to use to run this component. Specify the user and group separated by a colon. The group is optional. If you don’t specify a group, the AWS IoT Greengrass Core software uses the primary user for the group.\n\n    JobConfig:\n      properties:\n        jobExecutionsRolloutConfig:\n          type: object\n          description: The rollout configuration for the job. This configuration defines the rate at which the job rolls out to the fleet of target devices.\n          properties:\n            exponentialRate:\n              description: The exponential rate to increase the job rollout rate.\n              type: object\n              properties:\n                baseRatePerMinute:\n                  type: integer\n                  description: The minimum number of devices that receive a pending job notification, per minute, when the job starts. This parameter defines the initial rollout rate of the job.\n                incrementFactor:\n                  type: number\n                  description: The exponential factor (up to 1 dp) to increase the rollout rate for the job.\n                rateIncreaseCriteria:\n                  description: The criteria to increase the rollout rate for the job.\n                  type: object\n                  properties:\n                    numberOfNotifiedThings:\n                      type: integer\n                      description: The number of devices to receive the job notification before the rollout rate increases.\n                    numberOfSucceededThings:\n                      type: integer\n                      description: The number of devices to successfully run the configuration job before the rollout rate increases.\n            maximumPerMinute:\n              type: integer\n              description: The maximum number of devices that receive a pending job notification, per minute.\n        abortConfig:\n          description: The stop configuration for the job. This configuration defines when and how to stop a job rollout.\n          type: object\n          properties:\n            criteriaList:\n              description: The list of criteria that define when and how to cancel the configuration deployment. The deployment stops if the following conditions are true - The number of things that receive the deployment exceeds the `minNumberOfExecutedThings`, and/or the percentage of failures with type `failureType` exceeds the `thresholdPercentage`.\n\n              type: array\n              items:\n                type: object\n                properties:\n                  failureType:\n                    type: string\n                    enum:\n                    - FAILED\n                    - REJECTED\n                    - TIMED_OUT\n                    - ALL\n                    description: The type of job deployment failure that can cancel a job.\n                  action:\n                    type: string\n                    description: The action to perform when the criteria are met.\n                  thresholdPercentage:\n                    type: number\n                    description: The minimum percentage (up to 2 dp) of failureType failures that occur before the job can cancel.\n                  minNumberOfExecutedThings:\n                    type: integer\n                    description: The minimum number of things that receive the configuration before the job can cancel.\n        timeoutConfig:\n          description: The timeout configuration for the job. This configuration defines the amount of time each device has to complete the job.\n          type: object\n          properties:\n            inProgressTimeoutInMinutes:\n              type: integer\n              description: The amount of time, in minutes, that devices have to complete the job. The timer starts when the job status is set to IN_PROGRESS . If the job status does not change to a terminal state before the time expires, then the job status is set to TIMED_OUT. The timeout interval must be between 1 minute and 7 days (10080 minutes).\n\n    DeploymentPolicy:\n      description: The deployment policy for the deployment. These policies define how the deployment updates components and handles failure.\n      properties:\n        failureHandlingPolicy:\n          type: string\n          enum:\n          - ROLLBACK\n          - DO_NOTHING\n          description: The failure handling policy for the configuration deployment. This policy defines what to do if the deployment fails.\n        componentUpdatePolicy:\n          description: The component update policy for the configuration deployment. This policy defines when it’s safe to deploy the configuration to devices.\n          type: object\n          properties:\n            timeoutInSeconds:\n              type: integer\n              description: The amount of time in seconds that each component on a device has to report that it’s safe to update. If the component waits for longer than this timeout, then the deployment proceeds on the device.\n              default: 60\n            action:\n              type: string\n              enum:\n              - NOTIFY_COMPONENTS\n              - SKIP_NOTIFY_COMPONENTS\n              description: |\n                Whether or not to notify components and wait for components to become safe to update. Choose from the following options:\n                - `NOTIFY_COMPONENTS` – The deployment notifies each component before it stops and updates that component. Components can use the SubscribeToComponentUpdates IPC operation to receive these notifications. Then, components can respond with the DeferComponentUpdate IPC operation. For more information, see Create deployments in the AWS IoT Greengrass V2 Developer Guide .\n                - `SKIP_NOTIFY_COMPONENTS` – The deployment does not notify components or wait for them to be safe to update.\n              default: NOTIFY_COMPONENTS\n        configurationValidationPolicy:\n          description: The configuration validation policy for the configuration deployment. This policy defines how long each component has to validate its configure updates.\n          type: object\n          properties:\n            timeoutInSeconds:\n              type: integer\n              description: The amount of time in seconds that a component can validate its configuration updates. If the validation time exceeds this timeout, then the deployment proceeds for the device.\n              default: 30\n\n    ProvisionCoresTask:    \n      type: object\n      properties:\n        coreVersion:\n          type: string\n          description: Greengrass nucleus version to provision.\n        type:\n          type: string\n          enum:\n            - Create\n        cores:\n          type: array\n          items:\n            $ref: '#/components/schemas/NewCore'\n          description: Core devices managed via this task.\n\n    DeleteCoresTask:    \n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - Delete\n        cores:\n          type: array\n          items:\n            $ref: '#/components/schemas/DeleteCore'\n          description: Core devices managed via this task.\n\n    CoreTask:   \n      allOf:\n        - $ref: \"#/components/schemas/ProvisionCoresTask\"\n        - type: object\n          properties: \n            taskId:\n              type: string\n              description: Unique ID of the task.\n              readOnly: true\n            taskStatus:\n              type: string\n              enum: [Waiting, InProgress, Success, Failure]\n              description: The core task status.\n              readOnly: true\n            cores:\n              type: array\n              items:\n                $ref: '#/components/schemas/Core'\n              description: Core devices managed via this task.\n            statusMessage:\n              type: string\n              description: Descriptive message regarding the status, such as an error message.\n              readOnly: true\n            type:\n              type: string\n              enum: [Create, Update]\n              description: The core task type.\n              readOnly: true\n            createdAt:\n              type: string\n              format: 'date-time'\n              description: Date/time the task was created.\n              readOnly: true\n            updatedAt:\n              type: string\n              format: 'date-time'\n              description: Date/time the task was updated.\n              readOnly: true\n\n    CoreTaskList:\n      properties:\n        cores:\n          type: array\n          description: A list of core tasks.\n          items:\n            $ref: \"#/components/schemas/CoreTask\"\n        pagination:\n          type: object\n          properties:\n            lastEvaluated:\n              type: object\n              properties:\n                taskId:\n                  type: string\n            count:\n              type: integer\n\n    NewCore:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Thing name.\n        provisioningTemplate:\n          type: string\n          description: Name of provisioning template to use to create the AWS IoT Thing.\n        provisioningParameters:\n          type: object\n          additionalProperties:\n            type: string\n          description: Key value map of parameters required by the provisioning template.\n        cdfProvisioningParameters:\n          type: object\n          description: Key value map of CDF parameter extensions required by the provisioning template.\n          properties:\n            caId:\n              type: string\n              description: CA ID to use (if a certificate has been requested to be created by CDF on behalf of the device)\n            certInfo:\n              type: object\n              description: Certificate attributes (if a certificate has been requested to be created by CDF on behalf of the device)\n              properties:\n                commonName:\n                  type: string\n                organization:\n                  type: string\n                organizationalUnit:\n                  type: string\n                locality:\n                  type: string\n                stateName:\n                  type: string\n                country:\n                  type: string\n                emailAddress:\n                  type: string\n                daysExpiry:\n                  type: number\n        configFileGenerator:\n          type: string\n          description: Alias of config file generator lambda to use to generate the installer config. If not provided, no installer config is generated.\n\n    DeleteCore:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Thing name.\n\n    Core:\n      allOf:\n        - $ref: \"#/components/schemas/NewCore\"\n        - type: object\n          properties:\n            template: \n              type: object\n              properties:\n                desired:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                    version:\n                      type: integer\n                reported:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                    version:\n                      type: integer\n                    deploymentStatus:\n                      type: string\n                    deploymentStatusMessage:\n                      type: string\n                    jobStatus:\n                      type: string\n\n            greengrassTemplate:\n              type: string\n              description: Name of template to use to configure the Greengrass Core device.\n            greengrassTemplateVersion:\n              type: integer\n              description: Version of template to use to configure the Greengrass Core device.\n            provisioningTemplate:\n              type: string\n              description: Name of provisioning template to use to create the AWS IoT Thing.\n            provisioningParameters:\n              type: object\n              additionalProperties:\n                type: string\n              description: Key value map of parameters required by the provisioning template.\n            cdfProvisioningParameters:\n              type: object\n              description: Key value map of CDF parameter extensions required by the provisioning template.\n              properties:\n                caId:\n                  type: string\n                  description: CA ID to use (if a certificate has been requested to be created by CDF on behalf of the device)\n                certInfo:\n                  type: object\n                  description: Certificate attributes (if a certificate has been requested to be created by CDF on behalf of the device)\n                  properties:\n                    commonName:\n                      type: string\n                    organization:\n                      type: string\n                    organizationalUnit:\n                      type: string\n                    locality:\n                      type: string\n                    stateName:\n                      type: string\n                    country:\n                      type: string\n                    emailAddress:\n                      type: string\n                    daysExpiry:\n                      type: number\n            artifacts:\n              type: object\n              description: Any artifacts, such as certificates and keys, that may have been created by the device provisioning process.\n              additionalProperties:\n                type: object\n                properties:\n                  bucket:\n                    type: string\n                    description: Bucket where artifact is stored.\n                    readOnly: true\n                  key:\n                    type: string\n                    description: Key where artifact is stored.\n                    readOnly: true\n                  createdAt:\n                    type: string\n                    format: 'date-time'\n                    description: Date/time the artifact was created.\n                    readOnly: true\n              readOnly: true\n            deployed:\n              type: boolean\n              description: Whether the configured template version has been deployed to the Greengrass V2 core.\n              readOnly: true\n            coreVersion:\n              type: string\n              description: The version of the AWS IoT Greengrass Core software that the core device runs. This version is equivalent to the version of the AWS IoT Greengrass nucleus component that runs on the core device. For more information, see the AWS IoT Greengrass nucleus component in the AWS IoT Greengrass V2 Developer Guide.\n              readOnly: true\n            platform:\n              type: string\n              description: The operating system platform that the core device runs.\n              readOnly: true\n            architecture:\n              type: string\n              description: The computer architecture of the core device.\n              readOnly: true\n            status:\n              type: string\n              description: |\n                The status of the core device. The core device status can be:\n                  - `HEALTHY` – The AWS IoT Greengrass Core software and all components run on the core device without issue.\n                  - `UNHEALTHY` – The AWS IoT Greengrass Core software or a component is in a failed state on the core device.\n              readOnly: true\n            lastStatusUpdateTimestamp:\n              type: string\n              format: 'date-time'\n              description: The time at which the core device’s status last updated.\n              readOnly: true\n            createdAt:\n              type: string\n              format: 'date-time'\n              description: Date/time the core device was created.\n              readOnly: true\n            updatedAt:\n              type: string\n              format: 'date-time'\n              description: Date/time the core device was updated.\n              readOnly: true\n\n    CoreList:\n      properties:\n        cores:\n          type: array\n          description: A list of cores.\n          items:\n            $ref: \"#/components/schemas/Core\"\n        pagination:\n          type: object\n          properties:\n            lastEvaluated:\n              type: object\n              properties:\n                thingName:\n                  type: string\n            count:\n              type: integer\n\n    DeviceTask:    \n      type: object\n      properties:\n        taskId:\n          type: string\n          description: Unique ID of the task.\n          readOnly: true\n        taskStatus:\n          type: string\n          enum: [Waiting, InProgress, Success, Failure]\n          description: The core task status.\n          readOnly: true\n        statusMessage:\n          type: string\n          description: Descriptive message regarding the status, such as an error message.\n          readOnly: true\n        devices:\n          type: array\n          items:\n            $ref: '#/components/schemas/Device'\n          description: Client devices managed via this task.\n        createdAt:\n          type: string\n          format: 'date-time'\n          description: Date/time the task was created.\n          readOnly: true\n        updatedAt:\n          type: string\n          format: 'date-time'\n          description: Date/time the task was updated.\n          readOnly: true\n\n    Device:\n      type: object\n      properties:\n        thingName:\n          type: string\n          description: Thing name.\n        provisioningTemplate:\n          type: string\n          description: Name of provisioning template to use to create the AWS IoT Thing.\n        provisioningParameters:\n          type: object\n          additionalProperties:\n            type: string\n          description: Key value map of parameters required by the provisioning template.\n        cdfProvisioningParameters:\n          type: object\n          description: Key value map of CDF parameter extensions required by the provisioning template.\n          properties:\n            caId:\n              type: string\n              description: CA ID to use (if a certificate has been requested to be created by CDF on behalf of the device)\n            certInfo:\n              type: object\n              description: Certificate attributes (if a certificate has been requested to be created by CDF on behalf of the device)\n              properties:\n                commonName:\n                  type: string\n                organization:\n                  type: string\n                organizationalUnit:\n                  type: string\n                locality:\n                  type: string\n                stateName:\n                  type: string\n                country:\n                  type: string\n                emailAddress:\n                  type: string\n                daysExpiry:\n                  type: number\n        artifacts:\n          type: object\n          description: Any artifacts, such as certificates and keys, that may have been created by the device provisioning process.\n          additionalProperties:\n            type: object\n            properties:\n              bucket:\n                type: string\n                description: Bucket where artifact is stored.\n                readOnly: true\n              key:\n                type: string\n                description: Key where artifact is stored.\n                readOnly: true\n              createdAt:\n                type: string\n                format: 'date-time'\n                description: Date/time the artifact was created.\n                readOnly: true\n          readOnly: true\n        createdAt:\n          type: string\n          format: 'date-time'\n          description: Date/time the client device was created.\n          readOnly: true\n        updatedAt:\n          type: string\n          format: 'date-time'\n          description: Date/time the client device was updated.\n          readOnly: true\n\n    NewDeploymentTask:    \n      type: object\n      properties:\n        template:\n          type: object\n          properties:\n            name:\n              type: string\n              description: Name of template to deploy\n            version:\n              type: number\n              description: Version of template to deploy. If not provided, latest version will be deployed.\n          required:\n          - name\n        targets:\n          type: object\n          description: The Greengrass V2 cores to deploy.\n          properties:\n            thingNames:\n              type: array\n              items:\n                type: string\n              description: The Greengrass V2 core thing names to deploy. \n            thingGroups:\n              type: array\n              items:\n                type: string\n              description: A list of thing groups that contain Greengrass V2 core thing names to deploy. Only cores belonging to these groups will be deployed - all other things will be ignored. \n            assetLibraryDeviceIds:\n              type: array\n              items:\n                type: string\n              description: A list of Asset Library device ids, that represent Greengrass V2 cores, to deploy. Only cores will be deployed - all other things will be ignored.\n            assetLibraryGroupPaths:\n              type: array\n              items:\n                type: string\n              description: A list of Asset Library group paths, that are associated with devices representing Greengrass V2 cores, to deploy. Only cores will be deployed - all other things will be ignored.\n            assetLibraryQuery:\n              type: object\n              items:\n                type: string\n              description: An Asset Library query to use to generate a list of Asset Library devices associated with Greengrass V2 cores to deploy. Only cores will be deployed - all other things will be ignored.\n        iotJobConfig:\n          type: object\n          properties:\n            jobExecutionRolloutConfig:\n              type: object\n              description: Allows you to create a staged rollout of the command.\n              properties:\n                maximumPerMinute:\n                  type: number\n                  description: The maximum number of things that will be notified of a pending job, per minute. This parameter allows you to create a staged rollout.\n                exponentialRate:\n                  type: object\n                  description: The rate of increase for a job rollout. This parameter allows you to define an exponential rate for a job rollout.\n                  properties:\n                    baseRatePerMinute:\n                      type: number\n                      description: The minimum number of things that will be notified of a pending job, per minute at the start of job rollout. This parameter allows you to define the initial rate of rollout.\n                    incrementFactor:\n                      type: number\n                      description: The exponential factor to increase the rate of rollout for a job. AWS IoT supports up to one digit after the decimal (for example, 1.5, but not 1.55).\n                    rateIncreaseCriteria:\n                      type: object\n                      description: The criteria to initiate the increase in rate of rollout for a job.\n                      properties:\n                        numberOfNotifiedThings:\n                          type: number\n                          description: The threshold for number of notified things that will initiate the increase in rate of rollout.\n                        numberOfSucceededThings:\n                          type: number\n                          description: The threshold for number of succeeded things that will initiate the increase in rate of rollout.\n            abortConfig:\n              type: object\n              description: Allows you to create criteria to abort a command.\n              properties:\n                criteriaList:\n                  type: array\n                  description: The list of criteria that determine when and how to abort the command.\n                  items:\n                    type: object\n                    properties:\n                      failureType:\n                        type: string\n                        description: The type of job execution failures that can initiate a job abort.\n                      action:\n                        type: string\n                        description: The type of job action to take to initiate the job abort.\n                      thresholdPercentage:\n                        type: number\n                        description: The minimum percentage of job execution failures that must occur to initiate the job abort. AWS IoT supports up to two digits after the decimal (for example, 10.9 and 10.99, but not 10.999).\n                      minNumberOfExecutedThings:\n                        type: number\n                        description: The minimum number of things which must receive job execution notifications before the job can be aborted.\n            timeoutConfig:\n              type: object\n              description: Specifies the amount of time each device has to finish its execution of the job. The timer is started when the job execution status is set to IN_PROGRESS . If the job execution status is not set to another terminal state before the time expires, it will be automatically set to TIMED_OUT .\n              properties:\n                inProgressTimeoutInMinutes:\n                  type: number\n                  description: Specifies the amount of time, in minutes, this device has to finish execution of this job. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The in progress timer can't be updated and will apply to all job executions for the job. Whenever a job execution remains in the IN_PROGRESS status for longer than this interval, the job execution will fail and switch to the terminal TIMED_OUT status.\n      required:\n        - template\n        - targets\n    \n    DeploymentTask: \n      allOf:\n        - $ref: \"#/components/schemas/NewDeploymentTask\"\n        - type: object\n          properties: \n            taskId:\n              type: string\n              description: Unique ID of the task.\n              readOnly: true\n            taskStatus:\n              type: string\n              enum: [Waiting, InProgress, Success, Failure]\n              description: The core task status.\n              readOnly: true\n            statusMessage:\n              type: string\n              description: Descriptive message regarding the status, such as an error message.\n              readOnly: true\n            createdAt:\n              type: string\n              format: 'date-time'\n              description: Date/time the task was created.\n              readOnly: true\n            updatedAt:\n              type: string\n              format: 'date-time'\n              description: Date/time the task was updated.\n              readOnly: true\n\n    DeploymentTaskList:\n      properties:\n        deployments:\n          type: array\n          description: A list of deployment tasks.\n          items:\n            $ref: \"#/components/schemas/DeploymentTask\"\n        pagination:\n          type: object\n          properties:\n            lastEvaluated:\n              type: object\n              properties:\n                taskId:\n                  type: string\n            count:\n              type: integer\n\n    CoreDeployment:\n      type: object\n      properties:\n        core: \n          type: string\n          description: AWS IoT thing name of the Greengrass V2 core.\n          readOnly: true\n        status:\n          type: string\n          description: The AWS IoT Job execution status.\n          enum:\n          - SUCCEEDED\n          - FAILED\n          - REJECTED\n          - CANCELED\n          - REMOVED\n          - TIMED_OUT\n          readOnly: true\n\n    CoreDeploymentList:\n      properties:\n        cores:\n          type: array\n          description: A list of cores deployed.\n          items:\n            $ref: \"#/components/schemas/CoreDeployment\"\n        pagination:\n          type: object\n          properties:\n            count:\n              type: string\n            lastEvaluated:\n              type: object\n              properties:\n                thingName:\n                  type: string\n\n    FleetSummary:\n      type: object\n      properties:\n        templates: \n          type: object\n          additionalProperties:\n            type: object\n            properties:\n              latestVersion:\n                type: number\n              versions:\n                additionalProperties:\n                  type: object\n                  properties:\n                      desiredInUse:\n                        type: number\n                      reportedInUse:\n                        type: number\n                      lastDeploymentSuccess:\n                        type: number\n                      lastDeploymentFailed:\n                        type: number\n                      lastDeploymentInProgress:\n                        type: number\n      example:\n        templates:\n          - name: my-template\n            latestVersion: 2\n            versions:\n              \"1\":\n                desiredInUse: 0\n                reportedInUse: 1\n                lastDeploymentSuccess: 0\n                lastDeploymentFailed: 1\n                lastDeploymentInProgress: 0\n              \"2\":\n                desiredInUse: 3\n                reportedInUse: 2\n                lastDeploymentSuccess: 2\n                lastDeploymentFailed: 0\n                lastDeploymentInProgress: 0\n\n    Error:\n      type: object\n      properties:\n        message:\n          type: string\n",
			"canonicalURL": "/github.com/aws/aws-connected-device-framework@7bc7ac9bef5d8dcc582f9b461c7643bc2efe0df5/-/blob/source/packages/services/greengrass2-provisioning/docs/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/aws/aws-connected-device-framework/blob/7bc7ac9bef5d8dcc582f9b461c7643bc2efe0df5/source/packages/services/greengrass2-provisioning/docs/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"DeploymentTaskList\": parse schema: property \"deployments\": parse schema: parse schema: parse schema: parse schema: parse schema: property \"targets\": parse schema: property \"assetLibraryQuery\": parse schema: at 1:27150: object cannot contain 'items' field"
}