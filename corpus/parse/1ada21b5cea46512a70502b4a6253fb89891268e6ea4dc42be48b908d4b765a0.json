{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/hubspot.files/openapi.yaml",
			"byteSize": 50012,
			"content": "openapi: 3.0.1\ninfo:\n  x-ballerina-display:\n    label: HubSpot Files\n    iconPath: \"icon.png\"\n  title: Files\n  description: This is a generated connector from [HubSpot](https://www.hubspot.com/) OpenAPI specification.\n\n    These APIs allow to upload and manage files.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials.\n\n    Create a [HubSpot account](https://www.hubspot.com/) and obtain OAuth tokens following [this guide](https://developers.hubspot.com/docs/api/working-with-oauth4).\n  \n    During initialization you can pass either http:BearerTokenConfig if you have a bearer token or http:OAuth2RefreshTokenGrantConfig if you have Oauth tokens.\n  version: v3\nservers:\n  - url: 'https://api.hubapi.com'\ntags:\n  - name: Files\n    description: Operations to upload and edit files.\n  - name: Folders\n    description: Operations to create and edit folders.\npaths:\n  /files/v3/files:\n    post:\n      tags:\n        - Files\n      summary: Upload file\n      description: Upload a single file with content specified in request body.\n      operationId: files upload\n      requestBody:\n        description: File data\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                file:\n                  type: string\n                  description: File to be uploaded.\n                  format: binary\n                folderId:\n                  type: string\n                  description: Either 'folderId' or 'folderPath' is required. folderId is the ID of the folder the file will be uploaded to.\n                folderPath:\n                  type: string\n                  description: 'Either ''folderPath'' or ''folderId'' is required. This field represents the destination folder path for the uploaded file. If a path doesn''t exist, the system will try to create one.'\n                fileName:\n                  type: string\n                  description: Desired name for the uploaded file.\n                charsetHunch:\n                  type: string\n                  description: Character set of the uploaded file.\n                options:\n                  type: string\n                  description: JSON string representing FileUploadOptions.\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/File'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files\n  /files/v3/files/import-from-url/async:\n    post:\n      tags:\n        - Files\n      summary: Import a file from a URL into the file manager.\n      description: Asynchronously imports the file at the given URL into the file manager.\n      operationId: files/import from url\n      requestBody:\n        description: Import data input \n        content:\n          application/json:\n            schema:\n              description: Import information\n              $ref: '#/components/schemas/ImportFromUrlInput'\n        required: true\n      responses:\n        '202':\n          description: accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportFromUrlTaskLocator'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files\n  '/files/v3/files/import-from-url/async/tasks/{taskId}/status':\n    get:\n      tags:\n        - Files\n      summary: Check import status.\n      description: Check the status of requested import.\n      operationId: check Import Status\n      parameters:\n        - name: taskId\n          in: path\n          description: Import by URL task ID\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileActionResponse'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files.ui_hidden.read\n            - files\n  /files/v3/files/search:\n    get:\n      tags:\n        - Files\n      summary: Search files\n      description: Search through files in the file manager. Does not display hidden or archived files.\n      operationId: files/do Search\n      parameters:\n        - name: properties\n          in: query\n          description: Desired file properties in the return object.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: after\n          in: query\n          description: The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: before\n          in: query\n          description: The minimum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: Number of items to return. Maximum limit is 100.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: Sort files by a given field.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: id\n          in: query\n          description: Search files by given ID.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: createdAt\n          in: query\n          description: Search files by time of creation.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            format: date-time\n        - name: createdAtLte\n          in: query\n          description: Search files whose created time less than or equal to time\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            format: date-time\n        - name: createdAtGte\n          in: query\n          description: Search files whose created time greater than or equal to time\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            format: date-time\n        - name: updatedAt\n          in: query\n          description: Search files by time of latest updated.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            format: date-time\n        - name: updatedAtLte\n          in: query\n          description: Search files whose updated time less than or equal to time\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            format: date-time\n        - name: updatedAtGte\n          in: query\n          description: Search files whose updated time greater than or equal to time\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            format: date-time\n        - name: name\n          in: query\n          description: Search for files containing the given name.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: filePath\n          in: query\n          description: Search files by path.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: parentFolderId\n          in: query\n          description: Search files within given folder ID.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: integer\n            format: int64\n        - name: size\n          in: query\n          description: Query by file size.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: integer\n            format: int64\n        - name: height\n          in: query\n          description: Search files by height of image or video.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: integer\n            format: int32\n        - name: width\n          in: query\n          description: Search files by width of image or video.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: integer\n            format: int32\n        - name: encoding\n          in: query\n          description: Search files with specified encoding.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: Filter by provided file type.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: extension\n          in: query\n          description: Search files by given extension.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: url\n          in: query\n          description: Search for given URL\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: isUsableInContent\n          in: query\n          description: If true shows files that have been marked to be used in new content. It false shows files that should not be used in new content.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: boolean\n        - name: allowsAnonymousAccess\n          in: query\n          description: If 'true' will show private files; if 'false' will show public files\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionResponseFile'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files.ui_hidden.read\n            - files\n  '/files/v3/files/{fileId}':\n    get:\n      tags:\n        - Files\n      summary: Get file.\n      description: Get file by ID.\n      operationId: files/get By/Id\n      parameters:\n        - name: fileId\n          in: path\n          description: Id of the desired file\n          required: true\n          style: simple\n          explode: false\n          schema:\n            pattern: \\d+\n            type: string\n        - name: properties\n          description: File properties\n          in: query\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              description: File properties\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/File'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files.ui_hidden.read\n            - files\n    put:\n      tags:\n        - Files\n      summary: Replace file.\n      description: Replace existing file data with new file data. Can be used to change image content without having to upload a new file and update all references.\n      operationId: files replace\n      parameters:\n        - name: fileId\n          in: path\n          description: Id of the desired file\n          required: true\n          style: simple\n          explode: false\n          schema:\n            pattern: \\d+\n            type: string\n      requestBody:\n        description: File data\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                file:\n                  type: string\n                  description: File data that will replace existing file in the file manager.\n                  format: binary\n                charsetHunch:\n                  type: string\n                  description: Character set of given file data.\n                options:\n                  type: string\n                  description: JSON String representing FileReplaceOptions\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/File'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files\n    delete:\n      tags:\n        - Files\n      summary: Delete file\n      description: Delete file by ID\n      operationId: delete files\n      parameters:\n        - name: fileId\n          in: path\n          description: File ID to delete\n          required: true\n          style: simple\n          explode: false\n          schema:\n            pattern: \\d+\n            type: string\n      responses:\n        '204':\n          description: No content\n          content: {}\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files\n    patch:\n      tags:\n        - Files\n      summary: update file properties\n      description: Update properties of file by ID.\n      operationId: Update File Properties\n      parameters:\n        - name: fileId\n          in: path\n          description: ID of file to update\n          required: true\n          style: simple\n          explode: false\n          schema:\n            pattern: \\d+\n            type: string\n      requestBody:\n        description: Options to update\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FileUpdateInput'\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/File'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files\n  '/files/v3/files/{fileId}/gdpr-delete':\n    delete:\n      tags:\n        - Files\n      summary: GDPR delete\n      description: GDRP delete file\n      operationId: delete archive GDPR\n      parameters:\n        - name: fileId\n          in: path\n          description: ID of file to GDPR delete\n          required: true\n          style: simple\n          explode: false\n          schema:\n            pattern: \\d+\n            type: string\n      responses:\n        '204':\n          description: No content\n          content: {}\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files\n  '/files/v3/files/{fileId}/signed-url':\n    get:\n      tags:\n        - Files\n      summary: Get signed URL to access private file.\n      description: Generates signed URL that allows temporary access to a private file.\n      operationId: get Signed Url\n      parameters:\n        - name: fileId\n          in: path\n          description: ID of file.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            pattern: \\d+\n            type: string\n        - name: size\n          in: query\n          description: 'For image files. This will resize the image to the desired size before sharing. Does not affect the original file, just the file served by this signed URL.'\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            # enum:\n            #   - thumb\n            #   - icon\n            #   - medium\n            #   - preview\n        - name: expirationSeconds\n          in: query\n          description: How long in seconds the link will provide access to the file.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: integer\n            format: int64\n        - name: upscale\n          in: query\n          description: 'If size is provided, this will upscale the image to fit the size dimensions.'\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SignedUrl'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files.ui_hidden.read\n            - files\n  /files/v3/folders:\n    post:\n      tags:\n        - Folders\n      summary: Create folder.\n      description: Creates a folder.\n      operationId: folders create\n      requestBody:\n        description: Folder creation options\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FolderInput'\n        required: true\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files\n  /files/v3/folders/search:\n    get:\n      tags:\n        - Folders\n      summary: Search folders\n      description: Search for folders. Does not contain hidden or archived folders.\n      operationId:  do Search\n      parameters:\n        - name: properties\n          in: query\n          description: Properties that should be included in the returned folders.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: after\n          in: query\n          description: The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: before\n          in: query\n          description: The minimum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: Limit of results to return. Max limit is 100.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: 'Sort results by given property. For example -name sorts by name field descending, name sorts by name field ascending.'\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: id\n          in: query\n          description: Search folder by given ID.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: createdAt\n          in: query\n          description: Search for folders with the given creation timestamp.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            format: date-time\n        - name: createdAtLte\n          in: query\n          description: Search files whose created time less than or equal to time\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            format: date-time\n        - name: createdAtGte\n          in: query\n          description: Search files whose created time greater than or equal to time\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            format: date-time\n        - name: updatedAt\n          in: query\n          description: Search for folder at given update timestamp.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            format: date-time\n        - name: updatedAtLte\n          in: query\n          description: Search files whose updated time less than or equal to time\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            format: date-time\n        - name: updatedAtGte\n          in: query\n          description: Search files whose updated time greater than or equal to time\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            format: date-time\n        - name: name\n          in: query\n          description: Search for folders containing the specified name.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: folderPath\n          in: query\n          description: Search for folders by path.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: parentFolderId\n          in: query\n          description: Search for folders with the given parent folder ID.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionResponseFolder'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files.ui_hidden.read\n            - files\n  /files/v3/folders/update/async:\n    post:\n      tags:\n        - Folders\n      summary: Update folder properties\n      description: Update properties of folder by given ID. This action happens asynchronously and will update all of the folder's children as well.\n      operationId: update Folder Properties\n      requestBody:\n        description: Properties to change in the folder\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FolderUpdateInput'\n        required: true\n      responses:\n        '202':\n          description: accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FolderUpdateTaskLocator'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files\n  '/files/v3/folders/update/async/tasks/{taskId}/status':\n    get:\n      tags:\n        - Folders\n      summary: Check folder update status.\n      description: Check status of folder update. Folder updates happen asynchronously.\n      operationId: check Update Status\n      parameters:\n        - name: taskId\n          in: path\n          description: Task ID of folder update\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FolderActionResponse'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files\n  '/files/v3/folders/{folderId}':\n    get:\n      tags:\n        - Folders\n      summary: Get folder\n      description: Get folder by ID\n      operationId: folders get By Id\n      parameters:\n        - name: folderId\n          in: path\n          description: ID of desired folder\n          required: true\n          style: simple\n          explode: false\n          schema:\n            pattern: \\d+\n            type: string\n        - name: properties\n          in: query\n          description: Properties to set on returned folder.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files.ui_hidden.read\n            - files\n    delete:\n      tags:\n        - Folders\n      summary: Delete folder.\n      description: Delete folder by ID.\n      operationId: 'delete/folders'\n      parameters:\n        - name: folderId\n          in: path\n          description: ID of folder to delete.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            pattern: \\d+\n            type: string\n      responses:\n        '204':\n          description: No content\n          content: {}\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files\n  '/files/v3/folders/{folderPath}':\n    get:\n      tags:\n        - Folders\n      summary: Get folder.\n      description: Get folder by path.\n      operationId: folders/get By Path\n      parameters:\n        - name: folderPath\n          in: path\n          description: Path of desired folder.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            pattern: .+\n            type: string\n        - name: properties\n          in: query\n          description: Properties to set on returned folder.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files.ui_hidden.read\n            - files\n    delete:\n      tags:\n        - Folders\n      summary: Delete folder.\n      description: Delete folder by path.\n      operationId: folders/archive By Path\n      parameters:\n        - name: folderPath\n          in: path\n          description: Path of folder to delete\n          required: true\n          style: simple\n          explode: false\n          schema:\n            pattern: .+\n            type: string\n      responses:\n        '204':\n          description: No content\n          content: {}\n        default:\n          $ref: '#/components/responses/Error'\n      security:\n        - hapikey: []\n        - oauth2:\n            - files\ncomponents:\n  schemas:\n    CollectionResponseFile:\n      required:\n        - results\n      type: object\n      properties:\n        results:\n          description: Array of file info. \n          type: array\n          items:\n            $ref: '#/components/schemas/File'\n        paging:\n          description: Pagination info. \n          $ref: '#/components/schemas/Paging'\n      description: Collection of files\n    CollectionResponseFolder:\n      required:\n        - results\n      type: object\n      properties:\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/Folder'\n        paging:\n          $ref: '#/components/schemas/Paging'\n    Error:\n      required:\n        - category\n        - correlationId\n        - message\n      type: object\n      properties:\n        message:\n          type: string\n          description: A human readable message describing the error along with remediation steps where appropriate\n          example: An error occurred\n        correlationId:\n          type: string\n          description: A unique identifier for the request. Include this value with any error reports or support tickets\n          format: uuid\n          example: aeb5f871-7f07-4993-9211-075dc63e7cbf\n        category:\n          type: string\n          description: The error category\n        subCategory:\n          type: string\n          description: A specific category that contains more specific detail about the error\n        errors:\n          type: array\n          description: further information about the error\n          items:\n            $ref: '#/components/schemas/ErrorDetail'\n        context:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n          description: Context about the error condition\n          example:\n            invalidPropertyName:\n              - propertyValue\n            missingScopes:\n              - scope1\n              - scope2\n        links:\n          type: object\n          additionalProperties:\n            type: string\n          description: A map of link names to associated URIs containing documentation about the error or recommended remediation steps\n      example:\n        message: Invalid input (details will vary based on the error)\n        correlationId: aeb5f871-7f07-4993-9211-075dc63e7cbf\n        category: VALIDATION_ERROR\n        links:\n          knowledge-base: 'https://www.hubspot.com/products/service/knowledge-base'\n    ErrorCategory:\n      required:\n        - httpStatus\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n        httpStatus:\n          type: string\n          # enum:\n          #   - CONTINUE\n          #   - SWITCHING_PROTOCOLS\n          #   - PROCESSING\n          #   - OK\n          #   - CREATED\n          #   - ACCEPTED\n          #   - NON_AUTHORITATIVE_INFORMATION\n          #   - NO_CONTENT\n          #   - RESET_CONTENT\n          #   - PARTIAL_CONTENT\n          #   - MULTI_STATUS\n          #   - ALREADY_REPORTED\n          #   - IM_USED\n          #   - MULTIPLE_CHOICES\n          #   - MOVED_PERMANENTLY\n          #   - FOUND\n          #   - SEE_OTHER\n          #   - NOT_MODIFIED\n          #   - USE_PROXY\n          #   - TEMPORARY_REDIRECT\n          #   - PERMANENT_REDIRECT\n          #   - BAD_REQUEST\n          #   - UNAUTHORIZED\n          #   - PAYMENT_REQUIRED\n          #   - FORBIDDEN\n          #   - NOT_FOUND\n          #   - METHOD_NOT_ALLOWED\n          #   - NOT_ACCEPTABLE\n          #   - PROXY_AUTHENTICATION_REQUIRED\n          #   - REQUEST_TIMEOUT\n          #   - CONFLICT\n          #   - GONE\n          #   - LENGTH_REQUIRED\n          #   - PRECONDITION_FAILED\n          #   - REQUEST_ENTITY_TOO_LARGE\n          #   - REQUEST_URI_TOO_LONG\n          #   - UNSUPPORTED_MEDIA_TYPE\n          #   - REQUESTED_RANGE_NOT_SATISFIABLE\n          #   - EXPECTATION_FAILED\n          #   - IM_A_TEAPOT\n          #   - MISDIRECTED_REQUEST\n          #   - UNPROCESSABLE_ENTITY\n          #   - LOCKED\n          #   - FAILED_DEPENDENCY\n          #   - UPGRADE_REQUIRED\n          #   - PRECONDITION_REQUIRED\n          #   - TOO_MANY_REQUESTS\n          #   - REQUEST_HEADERS_FIELDS_TOO_LARGE\n          #   - INTERNAL_STALE_SERVICE_DISCOVERY\n          #   - UNAVAILABLE_FOR_LEGAL_REASONS\n          #   - INTERNAL_SERVER_ERROR\n          #   - NOT_IMPLEMENTED\n          #   - BAD_GATEWAY\n          #   - SERVICE_UNAVAILABLE\n          #   - GATEWAY_TIMEOUT\n          #   - HTTP_VERSION_NOT_SUPPORTED\n          #   - VARIANT_ALSO_NEGOTIATES\n          #   - INSUFFICIENT_STORAGE\n          #   - LOOP_DETECTED\n          #   - NOT_EXTENDED\n          #   - NETWORK_AUTHENTICATION_REQUIRED\n    ErrorDetail:\n      required:\n        - message\n      type: object\n      properties:\n        message:\n          type: string\n          description: A human readable message describing the error along with remediation steps where appropriate\n        in:\n          type: string\n          description: The name of the field or parameter in which the error was found.\n        code:\n          type: string\n          description: The status code associated with the error detail\n        subCategory:\n          type: string\n          description: A specific category that contains more specific detail about the error\n        context:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n          description: Context about the error condition\n          example:\n            missingScopes:\n              - scope1\n              - scope2\n    File:\n      required:\n        - access\n        - archived\n        - createdAt\n        - id\n        - updatedAt\n      type: object\n      properties:\n        id:\n          type: string\n          description: File ID.\n        createdAt:\n          type: string\n          description: Creation time of the file object.\n          format: date-time\n        archivedAt:\n          type: string\n          description: Deletion time of the file object.\n          format: date-time\n        updatedAt:\n          type: string\n          description: Timestamp of the latest update to the file.\n          format: date-time\n        archived:\n          type: boolean\n          description: If the file is deleted.\n        parentFolderId:\n          type: string\n          description: Id of the folder the file is in.\n        name:\n          type: string\n          description: Name of the file.\n        path:\n          type: string\n          description: Path of the file in the file manager.\n        size:\n          type: integer\n          description: Size in bytes of the file.\n          format: int64\n        height:\n          type: integer\n          description: 'For image and video files, the height of the content.'\n          format: int32\n        width:\n          type: integer\n          description: 'For image and video files, the width of the content.'\n          format: int32\n        encoding:\n          type: string\n          description: Encoding of the file.\n        type:\n          type: string\n          description: 'Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.'\n        extension:\n          type: string\n          description: Extension of the file. For example png.\n        defaultHostingUrl:\n          type: string\n          description: Default hosting URL of the file. This will use one of HubSpot's provided URLs to serve the file.\n        url:\n          type: string\n          description: URL of the given file. This URL can change depending on the domain settings of the account. Will use the select file hosting domain.\n        isUsableInContent:\n          type: boolean\n          description: Previously \"archied\". Indicates if the file should be used when creating new content like web pages.\n        access:\n          type: string\n          description: 'File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.'\n          # enum:\n          #   - PUBLIC_INDEXABLE\n          #   - PUBLIC_NOT_INDEXABLE\n          #   - HIDDEN_INDEXABLE\n          #   - HIDDEN_NOT_INDEXABLE\n          #   - HIDDEN_PRIVATE\n          #   - PRIVATE\n      description: File\n    FileActionResponse:\n      required:\n        - completedAt\n        - startedAt\n        - status\n        - taskId\n      type: object\n      description: File action response\n      properties:\n        status:\n          type: string\n          description: Current status of the task.\n          # enum:\n          #   - PENDING\n          #   - PROCESSING\n          #   - CANCELED\n          #   - COMPLETE\n        result:\n          $ref: '#/components/schemas/File'\n        numErrors:\n          type: integer\n          description: Number of errors resulting from the task.\n          format: int32\n        errors:\n          type: array\n          description: Descriptive error messages.\n          items:\n            $ref: '#/components/schemas/StandardError'\n        requestedAt:\n          type: string\n          description: Timestamp of when the task was requested.\n          format: date-time\n        startedAt:\n          type: string\n          description: Timestamp of when the task was started.\n          format: date-time\n        completedAt:\n          type: string\n          description: Time of completion of task.\n          format: date-time\n        links:\n          type: object\n          additionalProperties:\n            type: string\n          description: Link to check the status of the requested task.\n        taskId:\n          type: string\n          description: If of the requested task.\n    FileUpdateInput:\n      type: object\n      properties:\n        name:\n          type: string\n          description: New name for the file.\n        parentFolderId:\n          type: string\n          description: Folder ID where the file should be moved to.  folderId and folderPath cannot be set at the same time.\n        parentFolderPath:\n          type: string\n          description: Folder path where the file should be moved to. folderId and folderPath cannot be set at the same time.\n        isUsableInContent:\n          type: boolean\n          description: Mark weather the file should be used in new content or not.\n        access:\n          type: string\n          description: |\n            NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead.\n          # enum:\n          #   - PUBLIC_INDEXABLE\n          #   - PUBLIC_NOT_INDEXABLE\n          #   - HIDDEN_INDEXABLE\n          #   - HIDDEN_NOT_INDEXABLE\n          #   - HIDDEN_PRIVATE\n          #   - PRIVATE\n      description: Object for updating files.\n    Folder:\n      required:\n        - archived\n        - createdAt\n        - id\n        - updatedAt\n      type: object\n      description: Folder info\n      properties:\n        id:\n          type: string\n          description: Id of the folder.\n        createdAt:\n          type: string\n          description: Timestamp of folder creation.\n          format: date-time\n        archivedAt:\n          type: string\n          description: Timestamp of folder deletion.\n          format: date-time\n        updatedAt:\n          type: string\n          description: Timestamp of the latest update to the folder.\n          format: date-time\n        archived:\n          type: boolean\n          description: Marks weather the folder is deleted or not.\n        parentFolderId:\n          type: string\n          description: Id of the parent folder.\n        name:\n          type: string\n          description: Name of the folder.\n        path:\n          type: string\n          description: Path of the folder in the file manager.\n    FolderActionResponse:\n      required:\n        - completedAt\n        - startedAt\n        - status\n        - taskId\n      type: object\n      description: Folder action response\n      properties:\n        status:\n          type: string\n          description: Current status of the task.\n          # enum:\n          #   - PENDING\n          #   - PROCESSING\n          #   - CANCELED\n          #   - COMPLETE\n        result:\n          $ref: '#/components/schemas/Folder'\n        numErrors:\n          type: integer\n          description: Number of errors resulting from the requested changes.\n          format: int32\n        errors:\n          type: array\n          description: Detailed errors resulting from the task.\n          items:\n            $ref: '#/components/schemas/StandardError'\n        requestedAt:\n          type: string\n          description: Timestamp representing when the task was requested.\n          format: date-time\n        startedAt:\n          type: string\n          description: Timestamp representing when the task was started at.\n          format: date-time\n        completedAt:\n          type: string\n          description: When the requested changes have been completed.\n          format: date-time\n        links:\n          type: object\n          additionalProperties:\n            type: string\n          description: Link to check the status of the task.\n        taskId:\n          type: string\n          description: Id of the task.\n    FolderInput:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n          description: Desired name for the folder.\n        parentFolderId:\n          type: string\n          description: 'Folder ID of the parent of the created folder. If not specified, the folder will be created at the root level. parentFolderId and parentFolderPath cannot be set at the same time.'\n        parentPath:\n          type: string\n          description: Path of the parent of the created folder. If not specified the folder will be created at the root level. parentFolderPath and parentFolderId cannot be set at the same time.\n      description: Object for creating a folder.\n    FolderUpdateInput:\n      required:\n        - id\n      type: object\n      properties:\n        id:\n          type: string\n          description: Id of the folder to change.\n        name:\n          type: string\n          description: New name. If specified the folder's name and fullPath will change. All children of the folder will be updated accordingly.\n        parentFolderId:\n          type: integer\n          description: 'New parent folder ID. If changed, the folder and all it''s children will be moved into the specified folder. parentFolderId and parentFolderPath cannot be specified at the same time.'\n          format: int64\n      description: Object for updating folders.\n    FolderUpdateTaskLocator:\n      required:\n        - id\n      type: object\n      properties:\n        id:\n          type: string\n          description: The ID of the task\n        links:\n          type: object\n          additionalProperties:\n            type: string\n          description: Links for where to check information related to the task. The `status` link gives the URL for where to check the status of the task.\n      description: 'Information on the task that has been started, and where to check it''s status.'\n      example:\n        id: 57122e26-59f8-4cfc-ba53-96e30c816762\n        links:\n          - status: 'https://api.hubspot.com/files/v3/folders/update/async/tasks/57122e26-59f8-4cfc-ba53-96e30c816762/status'\n    ImportFromUrlInput:\n      required:\n        - access\n        - duplicateValidationScope\n        - duplicateValidationStrategy\n        - overwrite\n        - url\n      type: object\n      description: Import data input\n      properties:\n        access:\n          type: string\n          description: |\n            PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can't* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can't* index the file.\n          # enum:\n          #   - PUBLIC_INDEXABLE\n          #   - PUBLIC_NOT_INDEXABLE\n          #   - HIDDEN_INDEXABLE\n          #   - HIDDEN_NOT_INDEXABLE\n          #   - HIDDEN_PRIVATE\n          #   - PRIVATE\n        ttl:\n          type: string\n          description: Time to live. If specified the file will be deleted after the given time frame.\n        name:\n          type: string\n          description: Name to give the resulting file in the file manager.\n        url:\n          type: string\n          description: URL to download the new file from.\n        folderId:\n          type: string\n          description: One of folderId or folderPath is required. Destination folder ID for the uploaded file.\n        folderPath:\n          type: string\n          description: 'One of folderPath or folderId is required. Destination folder path for the uploaded file. If the folder path does not exist, there will be an attempt to create the folder path.'\n        duplicateValidationStrategy:\n          type: string\n          description: |\n            NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead.\n          # enum:\n          #   - NONE\n          #   - REJECT\n          #   - RETURN_EXISTING\n        duplicateValidationScope:\n          type: string\n          description: |\n            ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder.\n          # enum:\n          #   - ENTIRE_PORTAL\n          #   - EXACT_FOLDER\n        overwrite:\n          type: boolean\n          description: 'If true, it will overwrite existing files if a file with the same name exists in the given folder.'\n    ImportFromUrlTaskLocator:\n      required:\n        - id\n      type: object\n      properties:\n        id:\n          type: string\n          description: The ID of the task\n        links:\n          type: object\n          additionalProperties:\n            type: string\n          description: Links for where to check information related to the task. The `status` link gives the URL for where to check the status of the task.\n      description: 'Information on the task that has been started, and where to check it''s status.'\n      example:\n        id: 57122e26-59f8-4cfc-ba53-96e30c816762\n        links:\n          - status: 'https://api.hubspot.com/files/v3/files/import-from-url/async/tasks/57122e26-59f8-4cfc-ba53-96e30c816762/status'\n    NextPage:\n      required:\n        - after\n      type: object\n      description: Next page info\n      properties:\n        after:\n          type: string\n          description: After info\n        link:\n          type: string\n          description: Page link\n    Paging:\n      type: object\n      description: Pagination info.\n      properties:\n        next:\n          description: Next page\n          $ref: '#/components/schemas/NextPage'\n        prev:\n          description: Previous page\n          $ref: '#/components/schemas/PreviousPage'\n    PreviousPage:\n      required:\n        - before\n      type: object\n      description: Previous page info\n      properties:\n        before:\n          description: Before page\n          type: string\n        link:\n          description: Page link\n          type: string\n    SignedUrl:\n      required:\n        - expiresAt\n        - extension\n        - name\n        - size\n        - type\n        - url\n      type: object\n      properties:\n        expiresAt:\n          type: string\n          description: Timestamp of when the URL will no longer grant access to the file.\n          format: date-time\n        url:\n          type: string\n          description: Signed URL with access to the specified file. Anyone with this URL will be able to access the file until it expires.\n        name:\n          type: string\n          description: Name of the requested file.\n        extension:\n          type: string\n          description: Extension of the requested file.\n        type:\n          type: string\n          description: 'Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.'\n        size:\n          type: integer\n          description: Size in bytes of the requested file.\n          format: int32\n        height:\n          type: integer\n          description: For image and video files. The height of the file.\n          format: int32\n        width:\n          type: integer\n          description: For image and video files. The width of the file.\n          format: int32\n    StandardError:\n      required:\n        - category\n        - context\n        - errors\n        - links\n        - message\n        - status\n      type: object\n      properties:\n        status:\n          type: string\n        id:\n          type: string\n        category:\n          $ref: '#/components/schemas/ErrorCategory'\n        subCategory:\n          type: object\n          properties: {}\n        message:\n          type: string\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/ErrorDetail'\n        context:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        links:\n          type: object\n          additionalProperties:\n            type: string\n  responses:\n    Error:\n      description: An error occurred.\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/Error'\n  securitySchemes:\n    # hapikey:\n    #   type: apiKey\n    #   name: hapikey\n    #   in: query\n    oauth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: 'https://app.hubspot.com/oauth/authorize'\n          tokenUrl: 'https://api.hubapi.com/oauth/v1/token'\n          scopes:\n            files: Read from and write to my Files\n            files.ui_hidden.read: View hidden files\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/hubspot.files/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/hubspot.files/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/files/v3/folders/{folderPath}\": at 1:35150: get: operation \"folders/get By Path\": at 1:35635: at 1:36277: security: unknown security schema \"hapikey\""
}