{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bigcommerce/api-specs"
		},
		"file": {
			"name": "orders.v3.yml",
			"size": 0,
			"path": "reference/orders.v3.yml",
			"byteSize": 122564,
			"content": "openapi: 3.0.3\ninfo:\n  title: Orders V3\n  version: ''\n  description: Manage order settings of BigCommerce stores.\n  termsOfService: ''\n  license:\n    name: ''\nservers:\n  - url: 'https://api.bigcommerce.com'\nsecurity:\n  - X-Auth-Token: []\ntags:\n  - name: Metafields\n  - name: Payment Actions\n  - name: Transactions\n  - name: Order Settings\npaths:\n  '/stores/{store_hash}/v3/orders/{order_id}/payment_actions/capture':\n    post:\n      summary: Capture\n      description: |-\n        Capture the payment for an order updating the `payment_status` to `capture pending`.\n\n        Requires at least one of the following scopes:\n        * `store_v2_orders`\n        * `store_v2_transactions`\n      operationId: paymentactioncapture\n      parameters:\n        - name: order_id\n          in: path\n          description: ID of the order\n          required: true\n          schema:\n            type: integer\n        - $ref: '#/components/parameters/Accept'\n        - $ref: '#/components/parameters/Content-Type'\n      responses:\n        '201':\n          $ref: '#/components/responses/201_Created'\n        '400':\n          $ref: '#/components/responses/400_BadRequest'\n        '404':\n          $ref: '#/components/responses/404_NotFound'\n        '422':\n          $ref: '#/components/responses/422_UnprocessableEntity'\n        '502':\n          $ref: '#/components/responses/502_GatewayError'\n        '503':\n          $ref: '#/components/responses/503_ServiceUnavailable'\n        '504':\n          $ref: '#/components/responses/504_GatewayTimeout'\n      tags:\n        - Payment Actions\n    parameters:\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: order_id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/stores/{store_hash}/v3/orders/{order_id}/payment_actions/void':\n    post:\n      summary: Void\n      description: |-\n        Void the payment for an order updating the `payment_status` to `void pending`.\n\n        Requires at least one of the following scopes:\n        * `store_v2_orders`\n        * `store_v2_transactions`\n      operationId: paymentactionvoid\n      parameters:\n        - name: order_id\n          in: path\n          description: ID of the order\n          required: true\n          schema:\n            type: integer\n        - $ref: '#/components/parameters/Accept'\n        - $ref: '#/components/parameters/Content-Type'\n      responses:\n        '201':\n          $ref: '#/components/responses/201_Created'\n        '400':\n          $ref: '#/components/responses/400_BadRequest'\n        '404':\n          $ref: '#/components/responses/404_NotFound'\n        '422':\n          $ref: '#/components/responses/422_UnprocessableEntity'\n        '502':\n          $ref: '#/components/responses/502_GatewayError'\n        '503':\n          $ref: '#/components/responses/503_ServiceUnavailable'\n        '504':\n          $ref: '#/components/responses/504_GatewayTimeout'\n      tags:\n        - Payment Actions\n    parameters:\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: order_id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/stores/{store_hash}/v3/orders/{order_id}/transactions':\n    parameters:\n      - name: order_id\n        in: path\n        description: |\n          The ID of the `Order` to which the transactions belong.\n        required: true\n        schema:\n          type: integer\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Transactions\n      description: |-\n        Returns an **order's** transactions.\n\n        **Usage Notes**\n        * Depending on the payment method, different information will be available (not all payment gateways return full card or fraud detail).\n\n\n        Requires at least one of the following scopes:\n        * `store_v2_transactions_read_only`\n        * `store_v2_transactions`\n      operationId: getTransactions\n      responses:\n        '200':\n          $ref: '#/components/responses/TransactionCollection_Resp'\n        '204':\n          description: |\n            No content found to fulfill request.\n          content:\n            application/json:\n              schema:\n                description: No-content response for the BigCommerce API.\n                type: object\n                properties:\n                  status:\n                    description: |\n                      204 HTTP status code.\n                    type: integer\n                  title:\n                    description: The error title describing the situation.\n                    type: string\n                  type:\n                    type: string\n                  instance:\n                    type: string\n                title: No Content\n        '404':\n          description: |\n            The resource was not found.\n          content:\n            application/json:\n              schema:\n                description: Error payload for the BigCommerce API.\n                type: object\n                properties:\n                  status:\n                    description: |\n                      404 HTTP status code.\n                    type: integer\n                  title:\n                    description: The error title describing the particular error.\n                    type: string\n                  type:\n                    type: string\n                  instance:\n                    type: string\n                title: Not Found\n      summary: Get Transactions\n      parameters:\n        - name: order_id\n          in: path\n          description: |\n            The ID of the `Order` to which the transactions belong.\n          required: true\n          schema:\n            type: integer\n        - in: header\n          name: Accept\n          schema:\n            type: string\n            default: application/json\n        - name: Content-Type\n          in: header\n          schema:\n            type: string\n            default: application/json\n  '/stores/{store_hash}/v3/orders/{order_id}/payment_actions/refund_quotes':\n    post:\n      summary: Create a Refund Quote\n      description: |-\n        Calculate the tax amount, total refund amount and get available payment options for an order refund by providing items and costs or quantities to refund.\n\n        Requires at least one of the following scopes:\n        * `store_v2_orders`\n        * `store_v2_transactions`\n      operationId: postrefundquote\n      parameters:\n        - name: order_id\n          in: path\n          description: Order id\n          required: true\n          schema:\n            type: integer\n        - $ref: '#/components/parameters/Accept'\n        - $ref: '#/components/parameters/Content-Type'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RefundQuote_Post'\n        required: true\n        x-examples:\n          Quantity:\n            items:\n              - item_id: 75\n                item_type: PRODUCT\n                quantity: 1\n          Amount:\n            items:\n              - item_id: 79\n                item_type: SHIPPING\n                amount: 10\n          Tax Exempt (Order Level):\n            items:\n              - item_type: ORDER\n                item_id: 1234\n                amount: 1\n                reason: Overchaged $1.00\n          Multiple Items:\n            items:\n              - item_id: 75\n                item_type: PRODUCT\n                quantity: 1\n              - item_id: 79\n                item_type: SHIPPING\n                amount: 10\n      responses:\n        '201':\n          $ref: '#/components/responses/RefundQuote_Resp'\n        '422':\n          $ref: '#/components/responses/422_UnprocessableEntity'\n      tags:\n        - Payment Actions\n    parameters:\n      - name: order_id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n  '/stores/{store_hash}/v3/orders/{order_id}/payment_actions/refunds':\n    post:\n      summary: Create a Refund\n      description: |-\n        Creates a refund.\n\n        Requires at least one of the following scopes:\n        * `store_v2_orders`\n        * `store_v2_transactions`\n      operationId: postrefund\n      parameters:\n        - name: order_id\n          in: path\n          description: order id\n          required: true\n          schema:\n            type: integer\n        - $ref: '#/components/parameters/Accept'\n        - $ref: '#/components/parameters/Content-Type'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RefundRequest_Post'\n        required: true\n        x-examples:\n          Quantity:\n            items:\n              - item_id: 75\n                item_type: PRODUCT\n                quantity: 1\n            payments:\n              - provider_id: storecredit\n                amount: 232.75\n                offline: false\n          Amount:\n            order_id: 1\n            items:\n              - item_type: SHIPPING\n                item_id: 1\n                amount: 1.99\n                reason: string\n            reason: Wrong t-shirt size\n            payments:\n              - |-\n                {\n                    \"provider_id\": \"checkout_paypalexpress\",\n                    \"amount\": 9.99,\n                    \"offline\": true\n                }\n          Tax Exempt (Order Level):\n            order_id: 1234\n            items:\n              - item_type: ORDER\n                item_id: 1234\n                amount: 1\n                reason: overcharged\n            payments:\n              - provider_id: authorizenet\n                provider_description: Authorize.net\n                amount: 1\n                offline: false\n          Multiple Items:\n            items:\n              - item_id: 75\n                item_type: PRODUCT\n                quantity: 1\n              - item_id: 79\n                item_type: SHIPPING\n                amount: 10\n            tax_adjustment_amount: 0\n            payments:\n              - provider_id: storecredit\n                amount: 232.75\n                offline: false\n          Merchant Calculated Override:\n            order_id: 1234\n            items:\n              - item_type: ORDER\n                item_id: 1234\n                amount: 10\n                reason: overcharged\n            merchant_calculated_override:\n              total_amount: 10\n              tax_amount: 0\n            payments:\n              - provider_id: authorizenet\n                provider_description: Authorize.net\n                amount: 10\n                offline: false\n      responses:\n        '201':\n          $ref: '#/components/responses/Refund_Resp'\n        '422':\n          description: |\n            Unable to process a guest refund with store credit. \n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ErrorResponse'\n              examples:\n                response:\n                  value:\n                    data:\n                      - status: 422\n                        title: Unable to provide store credit for a guest customer.\n                        type: 'https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/FailedQuoteError'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n              examples:\n                response:\n                  value:\n                    data:\n                      - order_id: 1\n                        status: 503\n                        error: Tax service gone away\n                    meta: {}\n      tags:\n        - Payment Actions\n    get:\n      summary: Get Refunds for Order\n      description: |-\n        Returns a list of refunds ordered by refund ID in ascending order for the given order.\n\n        Requires at least one of the following scopes:\n        * `store_v2_transactions_read_only`\n        * `store_v2_transactions`\n        * `store_v2_orders_read_only`\n        * `store_v2_orders`\n      operationId: getorderrefunds\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n        - $ref: '#/components/parameters/Content-Type'\n      responses:\n        '200':\n          $ref: '#/components/responses/RefundCollection_Resp'\n      tags:\n        - Payment Actions\n    parameters:\n      - name: order_id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n  '/stores/{store_hash}/v3/orders/payment_actions/refunds/{refund_id}':\n    get:\n      summary: Get a Refund\n      description: Returns a refund by refund ID.\n      operationId: RefundID_Get\n      responses:\n        '200':\n          $ref: '#/components/responses/RefundID_Response'\n      tags:\n        - Payment Actions\n    parameters:\n      - name: refund_id\n        in: path\n        description: Refund ID.\n        required: true\n        schema:\n          type: integer\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n      - $ref: '#/components/parameters/Accept'\n      - $ref: '#/components/parameters/Content-Type'\n  '/stores/{store_hash}/v3/orders/payment_actions/refund_quotes':\n    post:\n      summary: Create Refund Quotes - BATCH\n      description: |-\n        Calculate the tax amount, total refund amount and get availble payment options for an order refund by providing items and costs or quantities to refund.\n\n        This endpoint will accept a batch of one or more.\n\n        Requires at least one of the following scopes:\n        * `store_v2_orders`\n        * `store_v2_transactions`\n      operationId: postrefundquotes\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n        - $ref: '#/components/parameters/Content-Type'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostRefundQuotesRequest'\n        required: true\n        x-examples:\n          application/json:\n            - items:\n                - item_id: 76\n                  item_type: PRODUCT\n                  quantity: 1\n              tax_adjustment_amount: 0\n      responses:\n        '201':\n          $ref: '#/components/responses/RefundQuotesBATCH_Resp'\n        '422':\n          description: Partial success/failure response. Status to roll up to the most severe individual failure to the whole request.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/RefundQuote_Full'\n                  errors:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/FailedQuoteError'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n            Example 1:\n              examples:\n                response:\n                  value: |-\n                    {\n                        \"data\": [\n                            {\n                                \"order_id\": 1,\n                                \"total_refund_amount\": 1.99,\n                                \"total_refund_tax_amount\": 1.95,\n                                \"rounding\": 1,\n                                \"adjustment\": 0.05,\n                                \"tax_inclusive\": true,\n                                \"refund_methods\": [\n                                    \"\"\n                                ]\n                            }\n                        ],\n                        \"errors\": [\n                            {\n                                \"order_id\": 1,\n                                \"status\": 422,\n                                \"error\": \"Refund amount is greater than remaining amount\"\n                            }\n                        ],\n                        \"meta\": {\n                            \"failure\": 1,\n                            \"success\": 1,\n                            \"total\": 2\n                        }\n                    }\n        '503':\n          description: Every request in the batch failed. The error object describes the failure for each component request.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/RefundQuote_Full'\n                  errors:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/FailedQuoteError'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n              examples:\n                response:\n                  value:\n                    data: []\n                    errors:\n                      - order_id: 1\n                        status: 503\n                        error: Tax service could not be contacted\n                      - order_id: 100\n                        status: 422\n                        error: Refund amount exceeds remaining amount\n                    meta:\n                      failure: 2\n                      success: 0\n                      total: 2\n      tags:\n        - Payment Actions\n      x-private: true\n    parameters:\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n  '/stores/{store_hash}/v3/orders/payment_actions/refunds':\n    get:\n      summary: Get All Refunds\n      description: |-\n        Returns a list of refunds ordered by refund ID in ascending order.\n\n        Requires at least one of the following scopes:\n        * `store_v2_transactions_read_only`\n        * `store_v2_transactions`\n        * `store_v2_orders_read_only`\n        * `store_v2_orders`\n      operationId: getrefunds\n      parameters:\n        - name: 'order_id:in'\n          in: query\n          description: Filter by `order_id`. Accepts multiple as comma-separated values.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: integer\n        - name: 'id:in'\n          in: query\n          description: Filter by refund `id`. Accepts multiple as comma-separated values.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: integer\n        - $ref: '#/components/parameters/Accept'\n        - $ref: '#/components/parameters/Content-Type'\n        - in: query\n          name: 'created:min'\n          description: |-\n            Filter results so they are later than or equal to provided date.\n\n\n            Must be in url-encoded RFC 3339 format.\n            e.g. `2020-01-15T01:02:34-01:00` is RFC 3339 format.\n            Url-encoded this will be `2020-01-15T01%3A02%3A34%2B01%3A00`\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: 'created:max'\n          description: |-\n            Filter results so they are earlier than or equal to provided date.\n\n\n            Must be in url-encoded RFC 3339 format.\n            e.g. `2020-01-15T01:02:34-01:00` is RFC 3339 format.\n            Url-encoded this will be `2020-01-15T01%3A02%3A34%2B01%3A00`\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: page\n          description: Specifies the page number in a limited (paginated) list of items.\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Controls the number of items per page in a limited (paginated) list of items.\n          schema:\n            type: integer\n      responses:\n        '200':\n          $ref: '#/components/responses/RefundCollection_Resp'\n      tags:\n        - Payment Actions\n    post:\n      summary: Create Refunds - BATCH\n      description: |-\n        Creates a refund.\n\n        This endpoint will accept a batch of one or more.\n\n        Requires at least one of the following scopes:\n        * `store_v2_orders`\n        * `store_v2_transactions`\n      operationId: postrefunds\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n        - $ref: '#/components/parameters/Content-Type'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostRefundsRequest'\n            examples: {}\n        required: true\n        x-examples:\n          application/json:\n            - items:\n                - item_id: 76\n                  item_type: PRODUCT\n                  quantity: 1\n              tax_adjustment_amount: 0\n              payments:\n                - provider_id: testgateway\n                  amount: 220.5\n                  offline: false\n                - provider_id: storecredit\n                  amount: 2.25\n                  offline: true\n      responses:\n        '201':\n          $ref: '#/components/responses/refundsBATCH_Resp'\n        '422':\n          description: Partial success/failure response. HTTP status for the entire response to roll up to the most severe individual failure to the whole request.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Refund'\n                  errors:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/FailedQuoteError'\n                  meta:\n                    type: object\n            Example 1:\n              examples:\n                response:\n                  value: |-\n                    {\n                        \"data\": [\n                            {\n                                \"id\": 1,\n                                \"order_id\": 100,\n                                \"user_id\": 1,\n                                \"created\": \"\",\n                                \"reason\": \"\",\n                                \"total_amount\": 0.05,\n                                \"total_tax\": 1,\n                                \"items\": [\n                                    {\n                                        \"item_type\": \"ORDER\",\n                                        \"item_id\": 1,\n                                        \"reason\": \"\",\n                                        \"quantity\": 1,\n                                        \"requested_amount\": 0.05\n                                    }\n                                ],\n                                \"payments\": [\n                                    {\n                                        \"id\": 1,\n                                        \"provider_id\": \"checkout_paypalexpress\",\n                                        \"amount\": 0.05,\n                                        \"offline\": true,\n                                        \"is_declined\": true,\n                                        \"declined_message\": \"\"\n                                    }\n                                ]\n                            }\n                        ],\n                        errors: [\n                            {\n                                \"order_id\": 1,\n                                \"status\": 422,\n                                \"error\": \"Refund amount was negative\"\n                            }\n                        ],\n                        \"meta\": {\n                            \"failure\": 1,\n                            \"success\": 1,\n                            \"total\": 2\n                        }\n                    }\n        '503':\n          description: Every request in the batch failed. The error object describes the failure for each component request.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Refund'\n                  errors:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/FailedQuoteError'\n                  meta:\n                    type: object\n            Example 1:\n              examples:\n                response:\n                  value: |-\n                    {\n                        \"data\": [\n                        ],\n                        \"errors\": [\n                            {\n                                \"order_id\": 1,\n                                \"status\": 422,\n                                \"error\": \"Refund amount was negative\"\n                            },\n                            {\n                                \"order_id\": 100,\n                                \"status\": 503,\n                                \"error\": \"Tax service could not be contacted\"\n                            }\n                        ],\n                        \"meta\": {\n                            \"failure\": 2,\n                            \"success\": 0,\n                            \"total\": 2\n                        }\n                    }\n      tags:\n        - Payment Actions\n      x-private: true\n    parameters:\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n  '/stores/{store_hash}/v3/orders/{order_id}/metafields':\n    parameters:\n      - name: order_id\n        in: path\n        description: |\n          The ID of the `Order` to which the transactions belong.\n        required: true\n        schema:\n          type: integer\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get Metafields\n      tags:\n        - Metafields\n      description: |\n        Gets a `Metafield` object list, by `order_id`.\n\n        The maxiumum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID.\n      operationId: getOrderMetafieldsByOrderId\n      parameters:\n        - $ref: '#/components/parameters/PageParam'\n        - $ref: '#/components/parameters/LimitParam'\n        - $ref: '#/components/parameters/MetafieldKeyParam'\n        - $ref: '#/components/parameters/MetafieldNamespaceParam'\n        - $ref: '#/components/parameters/DirectionParam'\n      responses:\n        '200':\n          description: |\n            An array of metafields and metadata.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetaFieldCollectionResponse'\n              examples: {}\n        '404':\n          description: |\n            The resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n              examples:\n                example-1:\n                  value:\n                    status: 404\n                    title: There was no order found with ID 1010\n                    type: 'https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes'\n    post:\n      summary: Create Metafields\n      tags:\n        - Metafields\n      description: |-\n        Creates an order `Metafield`.\n\n        The maxiumum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID.\n      operationId: createOrderMetafield\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetafieldPost'\n            examples: {}\n        description: |\n          A `Metafield` object.\n        required: true\n      responses:\n        '200':\n          description: |\n            A `Metafield` object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetafieldResponse'\n        '409':\n          description: |\n            The `Metafield` conflicts with another `Metafield`. This can be the result of duplicate unique key combinations of the app's client id, namespace, key, resource_type, and resource_id.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '422':\n          description: |\n            The `Metafield` is not valid. This is the result of missing required fields or of invalid data. See the response for more details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  '/stores/{store_hash}/v3/orders/{order_id}/metafields/{metafield_id}':\n    parameters:\n      - name: order_id\n        in: path\n        description: |\n          The ID of the `Order` to which the transactions belong.\n        required: true\n        schema:\n          type: integer\n      - name: metafield_id\n        in: path\n        description: |\n          The ID of the `Metafield`.\n        required: true\n        schema:\n          type: integer\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get a Metafield\n      tags:\n        - Metafields\n      description: |\n        Gets a `Metafield`, by `order_id`.\n      operationId: getOrderMetafieldByOrderIdAndMetafieldId\n      responses:\n        '200':\n          description: |\n            A `Metafield` object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetafieldResponse'\n        '404':\n          description: |\n            The resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n    put:\n      summary: Update a Metafield\n      tags:\n        - Metafields\n      description: |-\n        Updates a `Metafield` object.\n\n        The maxiumum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID.\n      operationId: updateOrderMetafield\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetafieldPut'\n        description: |\n          A `Metafield` object.\n        required: true\n      responses:\n        '200':\n          description: |\n            A metafield and metadata.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetafieldResponse'\n        '404':\n          description: |\n            The resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n    delete:\n      summary: Delete a Metafield\n      tags:\n        - Metafields\n      description: |\n        Deletes a `Metafield`.\n      operationId: deleteOrderMetafieldById\n      responses:\n        '204':\n          description: |\n            An empty response.\n  '/stores/{store_hash}/v3/orders/settings':\n    get:\n      summary: Get Global Order Settings\n      description: Returns global order settings.\n      operationId: GetGlobalOrderSettings\n      tags:\n        - Order Settings\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/GlobalOrderSettings'\n                  - $ref: '#/components/schemas/metaEmpty_Full'\n              examples: {}\n        '400':\n          description: Bad request. Authentication Required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n    put:\n      summary: Update Global Order Settings\n      description: Updates global order settings.\n      operationId: UpdateGlobalOrderSettings\n      tags:\n        - Order Settings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GlobalOrderSettings'\n            examples:\n              EnableMultipleOrderNotifications:\n                $ref: '#/components/examples/EnableMultipleOrderNotifications'\n              DisableOrderPlacedNotificatons:\n                $ref: '#/components/examples/GlobalOrderSettingsDisableOrderPlacedNotificatons'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/GlobalOrderSettings'\n                  - $ref: '#/components/schemas/metaEmpty_Full'\n        '400':\n          description: Bad request. Authentication Required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n        '422':\n          description: 'Order settings data is not valid. This is the result of missing required fields, or of invalid data. See the response for more details.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse422'\n    parameters:\n      - schema:\n          type: string\n        name: store_hash\n        in: path\n        required: true\n  '/stores/{store_hash}/v3/orders/settings/channels/{channel_id}':\n    get:\n      summary: Get Channel Order Settings\n      description: Returns order settings for a specific channel.\n      operationId: GetChannelOrderSettings\n      tags:\n        - Order Settings\n      parameters:\n        - schema:\n            type: integer\n            minimum: 1\n          in: path\n          name: channel_id\n          required: true\n          description: Channel Id\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/ChannelOrderSettings'\n                  - $ref: '#/components/schemas/metaEmpty_Full'\n              examples: {}\n        '400':\n          description: Bad request. Authentication Required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n    put:\n      summary: Update Channel Order Settings\n      description: |-\n        Updates order settings for a specific channel.\n\n         **Note:** You must override both notifications `email_addresses` or neither, i.e. either both notification `email_addresses` are an array of valid email addresses, or both `email_addresses` must be null. You may not have one set to an array of addesses and the other set to `null`.\n      operationId: UpdateChannelOrderSettings\n      tags:\n        - Order Settings\n      parameters:\n        - schema:\n            type: integer\n            minimum: 1\n          in: path\n          name: channel_id\n          required: true\n          description: Channel Id\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChannelOrderSettings'\n            examples:\n              OverrideOrderPlacedEmailAddressesAndDisableForwardEmailAddresses:\n                $ref: '#/components/examples/ChannelOrderSettingsOverrideOrderPlacedEmailAddressesAndDisableForwardEmail'\n              ResetChannelSettings:\n                $ref: '#/components/examples/ChannelOrderSettingsReset'\n              DisableMultipleNotificatonsForChannels:\n                $ref: '#/components/examples/ChannelOrderSettingsDisableBothNotifications'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/ChannelOrderSettings'\n                  - $ref: '#/components/schemas/metaEmpty_Full'\n        '400':\n          description: Bad request. Authentication Required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n        '422':\n          description: 'Order settings data is not valid. This is the result of missing required fields, or of invalid data. See the response for more details.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse422'\n    parameters:\n      - schema:\n          type: string\n        name: store_hash\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: channel_id\n        in: path\n        required: true\ncomponents:\n  schemas:\n    GetReturnsSettings:\n      type: object\n      properties:\n        reasons:\n          type: array\n          items:\n            $ref: '#/components/schemas/Reason'\n        preferred_outcomes:\n          type: array\n          items:\n            $ref: '#/components/schemas/PreferredOutcome'\n      x-internal: false\n    Reason:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        label:\n          type: string\n          description: A description of the reason\n        is_archived:\n          type: boolean\n          description: Indicates whether or not the reason has been archived\n      x-internal: false\n    PreferredOutcome:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        label:\n          type: string\n          description: A description of the outcome\n        is_archived:\n          type: boolean\n          description: Indicates whether or not the outcome has been archived\n      x-internal: false\n    CreateReturnRequest:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          description: A collection of items to be returned\n          type: array\n          items:\n            $ref: '#/components/schemas/CreateReturnRequestItem'\n        comment:\n          description: A comment provided to the merchant for review\n          type: string\n      title: CreateReturnRequest\n      x-internal: false\n    CreateReturnRequestItem:\n      type: object\n      required:\n        - reference_id\n        - quantity\n        - preferred_outcome_id\n        - reason_id\n      properties:\n        reference_id:\n          $ref: '#/components/schemas/ItemReferenceId'\n        quantity:\n          type: integer\n          minimum: 1\n        preferred_outcome_id:\n          type: integer\n          format: int64\n        reason_id:\n          type: integer\n          format: int64\n      x-internal: false\n    CreateReturn:\n      $ref: '#/components/schemas/Return_Full'\n    Return_Full:\n      type: object\n      description: A view of a return\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReturnItem'\n        total:\n          type: string\n          format: decimal\n          description: The total price of the items being returned\n        currency:\n          type: string\n          format: iso-4217\n          description: The transactional currency of the return and the associated order\n        customer:\n          type: object\n          properties:\n            id:\n              type: integer\n              format: int64\n            email:\n              type: string\n              format: email\n        comment:\n          type: string\n          description: A comment provided to the merchant for review\n        status:\n          $ref: '#/components/schemas/Status_Full'\n        date_modified:\n          type: string\n          format: date-time\n      x-internal: false\n    ReturnItem:\n      type: object\n      description: A view of a return item\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The unique identifier of this return item\n        reference_id:\n          $ref: '#/components/schemas/ItemReferenceId'\n        quantity:\n          type: integer\n          description: The quantity of items for which a return was requested\n        total:\n          type: string\n          format: decimal\n          description: The total price of the line item\n        preferred_outcome:\n          type: object\n          properties:\n            id:\n              type: integer\n              format: int64\n              description: Unique identifier of the preferred outcome\n            label:\n              type: string\n              description: A displayable label for the preferred outcome\n        reason:\n          type: object\n          properties:\n            id:\n              type: integer\n              format: int64\n              description: Unique identifier of the reason\n            label:\n              type: string\n              description: A displayable label for the reason\n        received_state:\n          type: object\n          properties:\n            received_quantity:\n              type: integer\n              description: The quantity of items marked as received by the merchant\n            pending_quantity:\n              type: integer\n              description: The quantity of items pending receipt by the merchant\n        review_state:\n          type: object\n          properties:\n            approved_quantity:\n              type: integer\n              description: The quantity of items approved for return by the merchant\n            pending_quantity:\n              type: integer\n              description: The quantity of items pending receipt by the merchant\n            rejected_quantity:\n              type: integer\n              description: The quantity of items rejected by the merchant\n      x-internal: false\n    StatusUpdate_Full:\n      type: object\n      properties:\n        return_id:\n          type: integer\n          format: int64\n          description: The ID of the return for which the status should be updated\n        new_status:\n          $ref: '#/components/schemas/Status_Full'\n      title: StatusUpdate_Full\n      x-internal: false\n    Status_Full:\n      type: string\n      enum:\n        - CLOSED\n        - OPEN\n        - REMOVED\n      description: The status of the return.\n      title: Status_Full\n      x-internal: false\n    UpdateReturnStatusesRequest:\n      type: array\n      items:\n        $ref: '#/components/schemas/StatusUpdate_Full'\n      title: UpdateReturnStatusesRequest\n      x-internal: false\n    UpdateReturnStatuses:\n      type: array\n      items:\n        type: object\n        properties:\n          id:\n            type: integer\n            format: int64\n            description: The ID of the return for which the status was updated\n          status:\n            $ref: '#/components/schemas/Status_Full'\n      x-internal: false\n    Problem:\n      type: object\n      properties:\n        status:\n          type: integer\n          description: Status code of the problem\n        title:\n          type: string\n          description: A short description of the problem\n        type:\n          type: string\n          format: url\n          description: A resource describing the problem\n      x-internal: false\n    BatchOperationMeta:\n      type: object\n      properties:\n        total:\n          type: integer\n          description: The total number of operations in the batch\n        success:\n          type: integer\n          description: The number of failed operations in the batch\n        failed:\n          type: integer\n          description: The number of failed operations in the batch\n      x-internal: false\n    Pagination:\n      type: object\n      description: 'Data about the response, including pagination and collection totals.'\n      title: Pagination\n      properties:\n        total:\n          type: integer\n          description: |\n            Total number of items in the result set.\n          example: 36\n        count:\n          type: integer\n          description: |\n            Total number of items in the collection response.\n          example: 36\n        per_page:\n          type: integer\n          description: |\n            The amount of items returned in the collection per page, controlled by the limit parameter.\n          example: 50\n        current_page:\n          type: integer\n          description: |\n            The page you are currently on within the collection.\n          example: 1\n        total_pages:\n          type: integer\n          description: |\n            The total number of pages in the collection.\n          example: 1\n        links:\n          type: object\n          description: |\n            Pagination links for the previous and next parts of the whole collection.\n          properties:\n            previous:\n              type: string\n              description: |\n                Link to the previous page returned in the response.\n            current:\n              type: string\n              description: |\n                Link to the current page returned in the response.\n              example: '?page=1\u0026limit=50'\n            next:\n              type: string\n              description: |\n                Link to the next page returned in the response.\n      x-internal: false\n    ReceivedItems_Put:\n      type: array\n      items:\n        type: object\n        required:\n          - item_id\n          - received_quantity\n          - pending_quantity\n        properties:\n          item_id:\n            type: integer\n            format: int64\n            description: The ID of the item for which to update the received state\n          received_quantity:\n            type: integer\n            description: The quantity of items to be marked as received\n          pending_quantity:\n            type: integer\n            description: The quantity of items to be marked as pending\n      title: ReceivedItems_Put\n      x-internal: false\n    ReceivedItems_Base:\n      type: array\n      items:\n        type: object\n        properties:\n          item_id:\n            type: integer\n            format: int64\n            description: The ID of the item for which received item status was updated\n          received_quantity:\n            type: integer\n            format: int64\n            description: The quantity of items marked as received\n          pending_quantity:\n            type: integer\n            format: int64\n            description: The quantity of items marked as pending\n      title: ReceivedItems_Base\n      x-internal: false\n    ReviewedItems_Put:\n      type: array\n      items:\n        type: object\n        required:\n          - item_id\n          - authorized_quantity\n          - rejected_quantity\n          - pending_quantity\n        properties:\n          item_id:\n            type: integer\n            format: int64\n            description: The ID of the item for which to update the reviewed state\n          authorized_quantity:\n            type: integer\n            description: The quantity of items to be marked as authorized\n          rejected_quantity:\n            type: integer\n            description: The quantity of items to be marked as rejected\n          pending_quantity:\n            type: integer\n            description: The quantity of items to be marked as pending\n      title: ReviewedItems_Put\n      x-internal: false\n    ReviewedItems_Base:\n      type: array\n      items:\n        type: object\n        properties:\n          item_id:\n            type: integer\n            format: int64\n            description: The ID of the item for which reviewed status was updated\n          authorized_quantity:\n            type: integer\n            format: int64\n            description: The quantity of items marked as authorized\n          rejected_quantity:\n            type: integer\n            format: int64\n            description: The quantity of items marked as rejected\n          pending_quantity:\n            type: integer\n            format: int64\n            description: The quantity of items marked as pending\n      title: ReviewedItems_Base\n      x-internal: false\n    GetReturnableItems:\n      type: array\n      items:\n        type: object\n        properties:\n          reference_id:\n            $ref: '#/components/schemas/ItemReferenceId'\n          name:\n            type: string\n            description: The name of the order product\n          returnable_quantity:\n            type: integer\n            description: The maximum quantity of this item that can presently be requested for return\n          total:\n            type: string\n            format: decimal\n            description: The total price of this line item\n          options:\n            type: array\n            items:\n              type: object\n              properties:\n                display_name:\n                  type: string\n                  description: A displayable name for the option\n                display_value:\n                  type: string\n                  description: A displayable value for the option\n              description: An item available for return\n            description: A collection of options configured for the order product\n      x-internal: false\n    ItemReferenceId:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The reference type\n          enum:\n            - ORDER_PRODUCT\n        value:\n          type: string\n          description: The value identifying the returned item\n      required:\n        - type\n        - value\n      x-internal: false\n    CollectionMeta:\n      type: object\n      description: 'Data about the response, including pagination and collection totals.'\n      properties:\n        pagination:\n          type: object\n          description: 'Data about the response, including pagination and collection totals.'\n          title: Pagination\n          properties:\n            total:\n              type: integer\n              description: |\n                Total number of items in the result set.\n              example: 36\n            count:\n              type: integer\n              description: |\n                Total number of items in the collection response.\n              example: 36\n            per_page:\n              type: integer\n              description: |\n                The amount of items returned in the collection per page, controlled by the limit parameter.\n              example: 50\n            current_page:\n              type: integer\n              description: |\n                The page you are currently on within the collection.\n              example: 1\n            total_pages:\n              type: integer\n              description: |\n                The total number of pages in the collection.\n              example: 1\n            links:\n              type: object\n              description: |\n                Pagination links for the previous and next parts of the whole collection.\n              properties:\n                previous:\n                  type: string\n                  description: |\n                    Link to the previous page returned in the response.\n                current:\n                  type: string\n                  description: |\n                    Link to the current page returned in the response.\n                  example: '?page=1\u0026limit=50'\n                next:\n                  type: string\n                  description: |\n                    Link to the next page returned in the response.\n      title: Collection Meta\n      x-internal: false\n    Meta:\n      type: object\n      title: Meta\n      properties:\n        meta:\n          type: object\n          description: 'Data about the response, including pagination and collection totals.'\n          title: Pagination\n          properties:\n            total:\n              type: integer\n              description: |\n                Total number of items in the result set.\n              example: 36\n            count:\n              type: integer\n              description: |\n                Total number of items in the collection response.\n              example: 36\n            per_page:\n              type: integer\n              description: |\n                The amount of items returned in the collection per page, controlled by the limit parameter.\n              example: 50\n            current_page:\n              type: integer\n              description: |\n                The page you are currently on within the collection.\n              example: 1\n            total_pages:\n              type: integer\n              description: |\n                The total number of pages in the collection.\n              example: 1\n            links:\n              type: object\n              description: |\n                Pagination links for the previous and next parts of the whole collection.\n              properties:\n                previous:\n                  type: string\n                  description: |\n                    Link to the previous page returned in the response.\n                current:\n                  type: string\n                  description: |\n                    Link to the current page returned in the response.\n                  example: '?page=1\u0026limit=50'\n                next:\n                  type: string\n                  description: |\n                    Link to the next page returned in the response.\n      x-internal: false\n    ErrorResponse:\n      allOf:\n        - $ref: '#/components/schemas/error_Base'\n        - type: object\n          properties:\n            errors:\n              type: object\n              additionalProperties:\n                type: string\n              title: DetailedErrors\n      title: ErrorResponse\n      x-internal: false\n    DetailedErrors:\n      type: object\n      additionalProperties:\n        type: string\n      title: DetailedErrors\n      x-internal: false\n    Transaction_Post:\n      type: object\n      title: Transaction_Post\n      properties:\n        event:\n          type: string\n          description: |\n            Store event that created the transaction.\n          enum:\n            - purchase\n            - authorization\n            - capture\n            - refund\n            - void\n            - pending\n            - settled\n        method:\n          type: string\n          description: |\n            The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site (e.g., PayPal); `offline` - payment method that takes place offline.\n          enum:\n            - credit_card\n            - electronic_wallet\n            - gift_certificate\n            - store_credit\n            - apple_pay_card\n            - apple_pay_token\n            - bigpay_token\n            - token\n            - custom\n            - offsite\n            - offline\n            - nonce\n        amount:\n          type: number\n          format: float\n          description: |\n            Amount of money in the transaction.\n        currency:\n          type: string\n          format: ISO-4217\n          description: |\n            Currency used for the transaction.\n        gateway:\n          type: string\n          description: |\n            The payment gateway, where applicable.\n          enum:\n            - 2checkout\n            - adyen\n            - amazon\n            - authorizenet\n            - bankdeposit\n            - braintree\n            - cheque\n            - cod\n            - custom\n            - firstdatagge4\n            - giftcertificate\n            - hps\n            - instore\n            - klarna\n            - migs\n            - moneyorder\n            - nmi\n            - paypalexpress\n            - paypalpaymentsprous\n            - paypalpaymentsprouk\n            - plugnpay\n            - qbmsv2\n            - securenet\n            - square\n            - storecredit\n            - stripe\n            - testgateway\n            - usaepay\n        gateway_transaction_id:\n          description: |\n            The transaction ID returned by the payment gateway for this transaction item.\n          type: string\n        date_created:\n          description: |\n            The datetime of the transaction.\n          type: string\n          format: date-time\n        test:\n          type: boolean\n          description: |\n            True if the transaction performed was a test, or if the gateway is in test mode.\n        status:\n          type: string\n          description: |\n            Status of the transaction.\n          enum:\n            - ok\n            - error\n        fraud_review:\n          type: boolean\n          description: |\n            Result of gateway fraud review, if any. Default is `false`.\n        reference_transaction_id:\n          type: integer\n          description: |\n            Identifier for an existing transaction upon which this transaction acts.\n        offline:\n          $ref: '#/components/schemas/Offline'\n        custom:\n          $ref: '#/components/schemas/Custom'\n      required:\n        - event\n        - method\n        - amount\n        - currency\n        - gateway\n      x-internal: false\n    NotFound:\n      description: Error payload for the BigCommerce API.\n      type: object\n      properties:\n        status:\n          description: |\n            404 HTTP status code.\n          type: integer\n        title:\n          description: The error title describing the particular error.\n          type: string\n        type:\n          type: string\n        instance:\n          type: string\n      title: Not Found\n      x-internal: false\n    Transaction:\n      allOf:\n        - title: Transaction Base\n          properties:\n            event:\n              type: string\n              description: |\n                Store event that created the transaction.\n              enum:\n                - purchase\n                - authorization\n                - capture\n                - refund\n                - void\n                - pending\n                - settled\n            method:\n              type: string\n              description: |\n                The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site; `offline` - payment method that takes place offline.\n              enum:\n                - credit_card\n                - electronic_wallet\n                - gift_certificate\n                - store_credit\n                - apple_pay_card\n                - bigpay_token\n                - apple_pay_token\n                - token\n                - custom\n                - offsite\n                - offline\n                - nonce\n            amount:\n              type: number\n              format: float\n              description: |\n                Amount of money in the transaction.\n            currency:\n              type: string\n              format: ISO-4217\n              description: |\n                Currency used for the transaction.\n            gateway:\n              type: string\n              description: |\n                The payment gateway, where applicable.\n              enum:\n                - 2checkout\n                - adyen\n                - amazon\n                - authorizenet\n                - bankdeposit\n                - braintree\n                - cheque\n                - cod\n                - custom\n                - firstdatagge4\n                - giftcertificate\n                - hps\n                - instore\n                - klarna\n                - migs\n                - moneyorder\n                - nmi\n                - paypalexpress\n                - paypalpaymentsprous\n                - paypalpaymentsprouk\n                - plugnpay\n                - qbmsv2\n                - securenet\n                - square\n                - storecredit\n                - stripe\n                - testgateway\n                - usaepay\n            gateway_transaction_id:\n              description: |\n                The transaction ID returned by the payment gateway for this transaction item.\n              type: string\n            date_created:\n              description: |\n                The datetime of the transaction.\n              type: string\n              format: date-time\n            test:\n              type: boolean\n              description: |\n                True if the transaction performed was a test, or if the gateway is in test mode.\n            status:\n              type: string\n              description: |\n                Status of the transaction.\n              enum:\n                - ok\n                - error\n            fraud_review:\n              type: boolean\n              description: |\n                Result of gateway fraud review, if any. Default is `false`.\n            reference_transaction_id:\n              type: integer\n              description: |\n                Identifier for an existing transaction upon which this transaction acts.\n            offline:\n              type: object\n              description: 'Offline payment (e.g., check or purchase order).'\n              title: Offline\n              properties:\n                display_name:\n                  description: |\n                    Display name for the offline payment.\n                  type: string\n            custom:\n              type: object\n              description: Custom payment from manual order.\n              title: Custom\n              properties:\n                payment_method:\n                  description: |\n                    Text entered for the payment method in the control panel.\n                  type: string\n            payment_method_id:\n              type: string\n              description: |\n                The payment method ID used for this transaction\n          required:\n            - event\n            - method\n            - amount\n            - currency\n            - gateway\n        - properties:\n            id:\n              type: integer\n              description: |\n                Unique identifier for the transaction.\n            order_id:\n              type: string\n              description: |\n                Identifier for the BigCommerce Order with which this transaction is associated.\n            date_created:\n              description: |\n                The datetime of the transaction.\n              type: string\n              format: date-time\n            payment_instrument_token:\n              type: string\n              description: This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment.\n            avs_result:\n              description: Address Verification Service (AVS) result from the payment gateway.\n              type: object\n              title: AVS Results\n              properties:\n                code:\n                  description: AVS code.\n                  type: string\n                message:\n                  description: AVS message.\n                  type: string\n                street_match:\n                  description: AVS Code for street matching result.\n                  type: string\n                postal_match:\n                  description: AVS Code for postal matching result.\n                  type: string\n            cvv_result:\n              description: Card Verification Value result from the payment gateway.\n              type: object\n              title: CVV Result\n              properties:\n                code:\n                  description: CVV code.\n                  type: string\n                message:\n                  description: CVV message.\n                  type: string\n            credit_card:\n              $ref: '#/components/schemas/CreditCard'\n            gift_certificate:\n              type: object\n              description: A gift-certificate model.\n              title: Gift Certificate\n              properties:\n                code:\n                  description: |\n                    The gift-certificate code.\n                  type: string\n                  example: MB345\n                original_balance:\n                  type: number\n                  description: |\n                    The balance on a gift certificate when it was purchased.\n                  format: float\n                  example: 100\n                  minimum: 0\n                  maximum: 21474836.47\n                starting_balance:\n                  description: |\n                    The balance on a gift certificate at the time of this purchase.\n                  type: number\n                  format: float\n                  example: 100\n                remaining_balance:\n                  description: |\n                    The remaining balance on a gift certificate.\n                  type: number\n                  format: float\n                  example: 35.42\n                status:\n                  description: |\n                    The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.\n                  type: string\n                  enum:\n                    - active\n                    - pending\n                    - disabled\n                    - expired\n            store_credit:\n              type: object\n              description: |\n                A store credit model.\n              properties:\n                remaining_balance:\n                  description: |\n                    Remaining balance of shopper's store credit.\n                  type: number\n                  format: float\n                  example: 35.42\n      type: object\n      title: ''\n      x-examples:\n        Example 1:\n          event: purchase\n          method: credit_card\n          amount: 3.4\n          currency: string\n          gateway: 2checkout\n          gateway_transaction_id: string\n          date_created: '2019-08-24T14:15:22Z'\n          test: true\n          status: ok\n          fraud_review: true\n          reference_transaction_id: 0\n          offline:\n            display_name: string\n          custom:\n            payment_method: string\n          payment_method_id: string\n          id: 0\n          order_id: string\n          payment_instrument_token: string\n          avs_result:\n            code: string\n            message: string\n            street_match: string\n            postal_match: string\n          cvv_result:\n            code: string\n            message: string\n          credit_card:\n            card_type: alelo\n            card_iin: string\n            card_last4: string\n            card_expiry_month: 1\n            card_expiry_year: 0\n          gift_certificate:\n            code: MB345\n            original_balance: 100\n            starting_balance: 100\n            remaining_balance: 35.42\n            status: active\n          store_credit:\n            remaining_balance: 35.42\n      description: ''\n    CreditCard:\n      type: object\n      description: A credit-card model.\n      title: Credit Card\n      properties:\n        card_type:\n          type: string\n          enum:\n            - alelo\n            - alia\n            - american_express\n            - cabal\n            - carnet\n            - dankort\n            - diners_club\n            - discover\n            - elo\n            - forbrugsforeningen\n            - jcb\n            - maestro\n            - master\n            - naranja\n            - sodexo\n            - unionpay\n            - visa\n            - vr\n          description: '**Allowed values**: alelo, alia, american_express, cabal, carnet, dankort, diners_club, discover, elo, forbrugsforeningen, jcb, maestro, master, naranja, sodexo, unionpay, visa, vr'\n        card_iin:\n          description: |\n            The IIN of a credit-card number.\n          type: string\n        card_last4:\n          description: |\n            The last 4 digits of a credit-card number.\n          type: string\n        card_expiry_month:\n          description: |\n            The expiry month of a credit-card.\n          type: integer\n          minimum: 1\n          maximum: 12\n        card_expiry_year:\n          description: |\n            The expiry year of a credit-card.\n          type: integer\n      x-internal: false\n    StoreCredit:\n      type: object\n      description: |\n        A store credit model.\n      properties:\n        remaining_balance:\n          description: |\n            Remaining balance of shopper's store credit.\n          type: number\n          format: float\n          example: 35.42\n      x-internal: false\n    Custom:\n      type: object\n      description: Custom payment from manual order.\n      properties:\n        payment_method:\n          description: |\n            Text entered for the payment method in the control panel.\n          type: string\n      title: Custom\n      x-internal: false\n    Offline:\n      type: object\n      description: 'Offline payment (e.g., check or purchase order).'\n      properties:\n        display_name:\n          description: |\n            Display name for the offline payment.\n          type: string\n      title: Offline\n      x-internal: false\n    GiftCertificate:\n      type: object\n      description: A gift-certificate model.\n      title: Gift Certificate\n      x-internal: false\n      properties:\n        code:\n          description: |\n            The gift-certificate code.\n          type: string\n          example: MB345\n        original_balance:\n          type: number\n          description: |\n            The balance on a gift certificate when it was purchased.\n          format: float\n          example: 100\n          minimum: 0\n          maximum: 21474836.47\n        starting_balance:\n          type: number\n          description: |\n            The balance on a gift certificate at the time of this purchase.\n          format: float\n          example: 100\n          minimum: 0\n        remaining_balance:\n          description: |\n            The remaining balance on a gift certificate.\n          type: number\n          format: float\n          example: 35.42\n        status:\n          description: |\n            The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.\n          type: string\n          enum:\n            - active\n            - pending\n            - disabled\n            - expired\n    AVSResult:\n      description: Address Verification Service (AVS) result from the payment gateway.\n      type: object\n      properties:\n        code:\n          description: AVS code.\n          type: string\n        message:\n          description: AVS message.\n          type: string\n        street_match:\n          description: AVS Code for street matching result.\n          type: string\n        postal_match:\n          description: AVS Code for postal matching result.\n          type: string\n      title: AVS Results\n      x-internal: false\n    CVVResult:\n      description: Card Verification Value result from the payment gateway.\n      type: object\n      properties:\n        code:\n          description: CVV code.\n          type: string\n        message:\n          description: CVV message.\n          type: string\n      title: CVV Result\n      x-internal: false\n    NoContent:\n      description: No-content response for the BigCommerce API.\n      type: object\n      properties:\n        status:\n          description: |\n            204 HTTP status code.\n          type: integer\n        title:\n          description: The error title describing the situation.\n          type: string\n        type:\n          type: string\n        instance:\n          type: string\n      title: No Content\n      x-internal: false\n    metaEmpty_Full:\n      type: object\n      title: metaEmpty_Full\n      x-internal: false\n      properties:\n        meta:\n          type: object\n    pagination_Full:\n      type: object\n      title: pagination_Full\n      properties:\n        total:\n          description: Total number of items in the result set.\n          type: integer\n          format: int32\n        count:\n          description: Total number of items in the collection response.\n          type: integer\n          format: int32\n        per_page:\n          description: 'The amount of items returned in the collection per page, controlled by the limit parameter.'\n          type: integer\n          format: int32\n        current_page:\n          description: The page you are currently on within the collection.\n          type: integer\n          format: int32\n        total_pages:\n          description: The total number of pages in the collection.\n          type: integer\n          format: int32\n        links:\n          $ref: '#/components/schemas/links_Full'\n      x-internal: false\n    metaCollection_Full:\n      type: object\n      title: metaCollection_Full\n      properties:\n        pagination:\n          $ref: '#/components/schemas/pagination_Full'\n      x-internal: false\n      x-examples:\n        example-1:\n          pagination:\n            total: 0\n            count: 0\n            per_page: 0\n            current_page: 0\n            total_pages: 0\n            links:\n              previous: string\n              current: '?page=1\u0026limit=50'\n              next: string\n    links_Full:\n      type: object\n      properties:\n        previous:\n          type: string\n          description: |\n            Link to the previous page returned in the response.\n        current:\n          type: string\n          description: |\n            Link to the current page returned in the response.\n          example: '?page=1\u0026limit=50'\n        next:\n          type: string\n          description: |\n            Link to the next page returned in the response.\n      title: links_Full\n      x-internal: false\n    error_Base:\n      type: object\n      title: error_Base\n      properties:\n        status:\n          description: |\n            The HTTP status code.\n          type: integer\n        title:\n          description: |\n            The error title describing the particular error.\n          type: string\n        type:\n          type: string\n      description: Error payload for the BigCommerce API.\n      x-internal: false\n    errorDetailed_Full:\n      type: object\n      properties:\n        errors:\n          type: object\n          additionalProperties:\n            type: string\n          title: DetailedErrors\n      title: errorDetailed_Full\n      x-internal: false\n    PostRefundQuotesRequest:\n      type: array\n      description: Request body for batch refund quotes.\n      title: Refund Quotes Request - BATCH\n      items:\n        $ref: '#/components/schemas/RefundQuote_Post'\n      x-internal: false\n    RefundQuote_Post:\n      type: object\n      title: RefundQuote_Post\n      description: Request body for refund quotes.\n      x-internal: false\n      x-examples: {}\n      properties:\n        order_id:\n          type: integer\n          description: Order ID against which this refund will be created. This is optional for creating a single refund request. The order ID is included in the request path.\n          example: 1\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ItemsRefund'\n      required:\n        - order_id\n        - items\n    RefundQuote_Full:\n      type: object\n      title: RefundQuote_Full\n      properties:\n        order_id:\n          type: integer\n          description: ID of the order to be refunded\n        total_refund_amount:\n          $ref: '#/components/schemas/Amount'\n        total_refund_tax_amount:\n          type: number\n          example: 1.95\n        rounding:\n          type: number\n          description: Indicates rounding value to bring refund_total to an amount refundable via payment providers (in this case to 2 decimal places)\n        adjustment:\n          $ref: '#/components/schemas/AdjustmentAmount'\n        tax_inclusive:\n          type: boolean\n          description: Indicate if total_refund_amount includes tax amount\n        refund_methods:\n          type: array\n          description: |\n            An array of available refund methods.\n\n            Note that `refund_methods` is an array of refund methods, with each refund method being an array of payment options.\n\n            For example, if the order was placed by a combination of store credit and bank deposit the refund methods would be:\n            ```json\n            {\n              \"refund_methods\": [\n                [\n                  {\n                    \"provider_id\": \"storecredit\",\n                    \"provider_description\": \"Store Credit\",\n                    \"amount\": 119.35,\n                    \"offline\": false,\n                    \"offline_provider\": false,\n                    \"offline_reason\": \"\"\n                  }\n                ],\n                [\n                  {\n                    \"provider_id\": \"custom\",\n                    \"provider_description\": \"Custom\",\n                    \"amount\": 119.35,\n                    \"offline\": true,\n                    \"offline_provider\": true,\n                    \"offline_reason\": \"This is an offline payment provider.\"\n                  }\n                ],\n                [\n                  {\n                    \"provider_id\": \"bankdeposit\",\n                    \"provider_description\": \"Bank Deposit\",\n                    \"amount\": 80.35,\n                    \"offline\": true,\n                    \"offline_provider\": true,\n                    \"offline_reason\": \"This is an offline payment provider.\"\n                  },\n                  {\n                    \"provider_id\": \"storecredit\",\n                    \"provider_description\": \"Store Credit\",\n                    \"amount\": 39,\n                    \"offline\": false,\n                    \"offline_provider\": false,\n                    \"offline_reason\": \"\"\n                  }\n                ]\n              ]\n            }\n            ```\n\n            In this case there are three refund methods available to the merchant:\n            1. Refund up to the entire order amount to store credit.\n            2. Mark an amount up to the full order amount as refunded externally, through a provider or means not represented directly in BC (\"custom\").\n            3. Refund the amount paid by store credit to store credit, and the amount paid by bank deposit via a manual refund, which will be recorded as being refunded against the bank deposit.\n\n            \u003e\n          items:\n            $ref: '#/components/schemas/RefundMethod'\n      x-internal: false\n    RefundRequest_Post:\n      type: object\n      description: Request body for refund requests.\n      title: RefundRequest_Post\n      x-internal: false\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ItemsRefund'\n        reason:\n          type: string\n          description: Reason for refund\n          example: Wrong t-shirt size\n        payments:\n          type: array\n          items:\n            $ref: '#/components/schemas/PaymentRequest'\n        merchant_calculated_override:\n          $ref: '#/components/schemas/MerchantOverride'\n      required:\n        - items\n        - payments\n      x-examples: {}\n    RefundID_Get:\n      type: object\n      x-examples:\n        Example:\n          data:\n            id: 12\n            order_id: 180\n            user_id: 0\n            created: '2022-06-16T16:44:15+00:00'\n            reason: ''\n            total_amount: 50\n            total_tax: 5\n            uses_merchant_override_values: false\n            payments:\n              - id: 13\n                provider_id: storecredit\n                amount: 50\n                offline: true\n                is_declined: false\n                declined_message: ''\n            items:\n              - item_type: PRODUCT\n                item_id: 87\n                quantity: 1\n                requested_amount: null\n                reason: incididunt exercitation enim\n          meta: {}\n      properties:\n        data:\n          type: object\n          properties:\n            id:\n              type: integer\n              description: |\n                Refund ID for the returned refund\n            order_id:\n              type: integer\n              description: Order ID associated with the refund\n            user_id:\n              type: integer\n              description: |\n                Reference to the user ID who created the refund. This is automatically populated by BigCommerce.\n            created:\n              type: string\n              description: |\n                Timestamp of when the refund was created\n              format: date-time\n            reason:\n              type: string\n              description: |\n                Reason for refund\n            total_amount:\n              type: number\n              description: |\n                A non-negative 2 decimal place rounded value that represents the amount that can be refunded with the correct payment provider(s).\n              example: 109.11\n            total_tax:\n              type: number\n              description: |\n                Total tax amount refunded back to the shopper. This can be a negative amount indicating we have collected tax by refunding less to the customer.\n            uses_merchant_override_values:\n              type: boolean\n              description: |\n                Whether refund amount and tax are provided explicitly by merchant override.\n            payments:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    description: |\n                      Reference to refund payment ID\n                  provider_id:\n                    type: string\n                    description: |\n                      Reference to payment provider\n                      example: storecredit\n                  amount:\n                    type: number\n                    description: |\n                      A non-negative two decimal place rounded value represents the amount that can be charged/refunded via payment providers.\n                    example: 109.11\n                  offline:\n                    type: boolean\n                    description: |\n                      Indicates whether the payment was offline\n                  is_declined:\n                    type: boolean\n                    description: |\n                      Indicates if this payment has been declined by the payment provider\n                  declined_message:\n                    type: string\n                    description: |\n                      Message indicates why the payment was declined\n            items:\n              type: array\n              items:\n                type: object\n                properties:\n                  item_type:\n                    type: string\n                    description: |\n                      Type of item that was refunded\n                    enum:\n                      - PRODUCT\n                      - GIFT_WRAPPING\n                      - SHIPPING\n                      - HANDLING\n                      - ORDER\n                  item_id:\n                    type: integer\n                    description: |\n                      `order_product.id` corresponding to the item_types of PRODUCT, GIFT_WRAPPING. `order_address.id` corresponding to the item_types of SHIPPING, HANDLING. `order.id` corresponding to the item_type of ORDER.\n                  quantity:\n                    type: integer\n                    description: |\n                      Quantity of item refunded. Note: this will only be populated for item_type PRODUCT\n                  requested_amount:\n                    type: string\n                    description: |\n                      A non-negative two decimal place rounded value that represents the amount that can be refunded with the payment provider(s).\n                    example: '109.11'\n                    nullable: true\n                  reason:\n                    type: string\n                    description: |\n                      Reason for refunding an item\n        meta:\n          type: object\n    PostRefundsRequest:\n      type: array\n      description: Request body for batch refunds\n      title: Refunds Request - BATCH\n      items:\n        $ref: '#/components/schemas/RefundRequest_Post'\n      x-internal: false\n      x-examples: {}\n    FailedQuoteError:\n      type: object\n      description: Failed quote response.\n      properties:\n        order_id:\n          type: integer\n        status:\n          type: integer\n          description: HTTP status code\n          example: 422\n        error:\n          type: string\n          description: details why the request failed\n      title: FailedQuoteError\n      x-internal: false\n    ItemsRefund:\n      title: ItemsRefund\n      x-internal: false\n      oneOf:\n        - $ref: '#/components/schemas/AmountBoundItem'\n        - $ref: '#/components/schemas/QuantityBoundItem'\n        - $ref: '#/components/schemas/TaxExemptItem'\n      x-examples: {}\n    PaymentRequest:\n      type: object\n      properties:\n        provider_id:\n          type: string\n          description: Reference to payment provider\n          example: checkout_paypalexpress\n        amount:\n          type: number\n          description: Amount refunded via this provider\n          example: 9.99\n        offline:\n          type: boolean\n          description: Whether the payment was marked as offline or performed through an online payment service.\n          example: true\n      title: Payment Request\n      x-internal: false\n    RefundMethod:\n      type: array\n      minItems: 1\n      items:\n        $ref: '#/components/schemas/PaymentOption'\n      title: Refund Method\n      x-internal: false\n    QuantityBoundItem:\n      type: object\n      title: Quantity Bound Item\n      description: |\n        Quantity Bound Item\n\n        Type of refund item that capture refunding of items in the order that are of type quantity.\n        * `PRODUCT`\n        * `GIFT_WRAPPING`\n      properties:\n        item_type:\n          type: string\n          enum:\n            - PRODUCT\n            - GIFT_WRAPPING\n          description: Type of refund.\n        item_id:\n          type: integer\n          example: 1\n          description: 'Order Product ID. '\n        quantity:\n          type: integer\n          example: 3\n        reason:\n          type: string\n          description: Reason for refund\n          minLength: 0\n          maxLength: 1000\n      x-internal: false\n    TaxExemptItem:\n      type: object\n      title: Tax Exempt (Order Level)\n      description: 'Use this to refund a custom value at the order level. When `item_type` is set to `ORDER`, tax is not re-calculated.'\n      properties:\n        item_type:\n          type: string\n          description: 'The type of refund. When `item_type` is set to `ORDER`, tax is not re-calculated.'\n          example: ORDER\n          enum:\n            - ORDER\n        amount:\n          $ref: '#/components/schemas/Amount'\n        reason:\n          type: string\n          description: Reason for the refund.\n          minLength: 0\n          maxLength: 1000\n      x-internal: false\n    AmountBoundItem:\n      type: object\n      title: Amount Bound Item\n      description: |\n        Amount Bound Item\n\n        Type of refund item that capture refunding of items in the order that are of type amount.\n        * `SHIPPING`\n        * `HANDLING`\n      properties:\n        item_type:\n          type: string\n          enum:\n            - SHIPPING\n            - HANDLING\n          example: SHIPPING\n          description: Type of refund.\n        item_id:\n          type: integer\n          example: 1\n          description: Order address ID.\n        amount:\n          $ref: '#/components/schemas/Amount'\n        reason:\n          type: string\n          minLength: 0\n          maxLength: 1000\n      x-internal: false\n    MerchantOverride:\n      type: object\n      title: Merchant Calculated Override\n      description: |\n        Merchant explicitly provided override based on their own calculation.\n\n        This override gives merchants the flexibility to\n        - bypass any tax correction due to tax rate/providers changes between when a customer places an order and a merchant initiates a refund\n        - use explicit values calculated by external systems (e.g., merchants' own Extended Producer Responsibility or Order Management System)\n\n        Note: when using the override, BC internal tax based refund calculation is skipped and therefore order/taxes records are not updated.\n      properties:\n        total_amount:\n          $ref: '#/components/schemas/Amount'\n        total_tax:\n          type: number\n          description: Total tax amount refunded back to the shopper. Use 0 value if there is no tax liability change for the refund or tax does not need to be recorded on the refund and would be handled externally.\n      required:\n        - total_amount\n        - total_tax\n      x-internal: false\n    Refund:\n      type: object\n      title: Refund\n      properties:\n        id:\n          type: integer\n          description: Refund resource ID\n          readOnly: true\n        order_id:\n          type: integer\n          description: Reference to order id\n        user_id:\n          type: integer\n          description: Reference to the user's id who create this refund. This is automatically populated by BigCommerce.\n          readOnly: true\n        created:\n          type: string\n          format: date-time\n          description: Timestamp of when this refund was created\n          readOnly: true\n        reason:\n          type: string\n          description: Reason for refund\n        total_amount:\n          $ref: '#/components/schemas/Amount'\n        total_tax:\n          type: number\n          description: 'Total tax amount refunded back to the shopper. Note: `order_level_amount` does not affect tax liability. This can be a negative amount indicating we have collected tax by refunding less to the customer.'\n        uses_merchant_override_values:\n          type: boolean\n          description: Whether refund amount and tax are provided explicitly by merchant override\n        items:\n          type: array\n          description: Array of items refunded\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/RefundItem'\n        payments:\n          type: array\n          description: An array of refund payments made to payment providers\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/RefundPayment'\n      x-internal: false\n    RefundItem:\n      type: object\n      properties:\n        item_type:\n          type: string\n          description: Type of item that was refunded\n          enum:\n            - PRODUCT\n            - GIFT_WRAPPING\n            - SHIPPING\n            - HANDLING\n            - ORDER\n        item_id:\n          type: integer\n          description: 'order_product.id corresponding to the item_types of PRODUCT, GIFT_WRAPPING. order_address.id corresponding to the item_types of SHIPPING, HANDLING. order.id corresponding to the item_type of ORDER.'\n        reason:\n          type: string\n          description: Reason for refunding an item\n        quantity:\n          type: integer\n          description: 'Quantity of item refunded. Note: this will only be populated for item_type PRODUCT'\n        requested_amount:\n          $ref: '#/components/schemas/Amount'\n      title: Refund Item\n      x-internal: false\n    RefundPayment:\n      type: object\n      title: Refund Payment\n      properties:\n        id:\n          type: integer\n          description: Reference to refund payment id\n          readOnly: true\n        provider_id:\n          type: string\n          description: Reference to payment provider\n          example: storecredit\n        amount:\n          $ref: '#/components/schemas/Amount'\n        offline:\n          type: boolean\n          description: Indicate whether payment was offline\n        is_declined:\n          type: boolean\n          description: Indicate if this payment has been declined by payment provider\n        declined_message:\n          type: string\n          description: Message indicate why payment was declined\n      x-internal: false\n    PaymentOption:\n      type: object\n      example:\n        provider_id: checkout_paypalexpress\n        provider_description: Paypal Express\n        amount: 9.99\n        offline: true\n        offline_provider: true\n        offline_reason: Multiple online refunds are not available\n      title: Payment Option\n      properties:\n        provider_id:\n          type: string\n          description: Name of the payment method\n          example: checkout_paypalexpress\n        provider_description:\n          type: string\n          description: Description for payment provider\n          example: Paypal Express\n        amount:\n          type: number\n          description: amount to be refunded via this payment provider\n          example: 9.99\n        offline:\n          type: boolean\n          description: 'Indicates the payment must be done offline due to constraints of the payment provider, such as partial refunds not being supported, or it being offline only such as cash on delivery of bank deposit.'\n          example: true\n        offline_provider:\n          type: boolean\n          description: 'Indicates if the payment provider is a strictly offline provider, such as cash on delivery or bank deposit.'\n          example: true\n        offline_reason:\n          type: string\n          description: 'Reason the payment option is offline only, if applicable.'\n          example: Multiple online refunds are not available\n      x-internal: false\n    Amount:\n      type: number\n      format: float\n      description: A non-negative 2 decimal place rounded value that represents the amount that can be charged/refunded via payment providers.\n      example: 1.99\n      title: Amount\n      x-internal: false\n    AdjustmentAmount:\n      type: number\n      format: float\n      description: 'A negative or positive 2 decimal place rounded value that represents the difference between the refund amount requested in the refund quote and the actual amount that is refundable on the order. This value is negative when the refund amount requested in the refund quote is more than the total refundable amount. This value is positive when the total refundable amount has increased, e.g. as a result of rounding.'\n      example: -10.2\n      title: Adjustment Amount\n      x-internal: false\n    MetaRefund:\n      type: object\n      title: MetaRefund\n      properties:\n        failure:\n          type: integer\n        success:\n          type: integer\n        total:\n          type: integer\n      description: 'Describes refund failures, success and totals.'\n      x-internal: false\n      x-examples:\n        example-1:\n          failure: 0\n          success: 0\n          total: 0\n    MetaFieldCollectionResponse:\n      type: object\n      description: |\n        Response payload for the BigCommerce API.\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/Metafield'\n        meta:\n          $ref: '#/components/schemas/CollectionMeta'\n      x-internal: false\n    MetafieldResponse:\n      description: |\n        Response payload for the BigCommerce API.\n      x-internal: false\n      x-examples: {}\n      allOf:\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/Metafield'\n        - $ref: '#/components/schemas/Meta'\n    MetafieldBase:\n      type: object\n      description: |\n        Common Metafield properties.\n      x-internal: false\n      properties:\n        permission_set:\n          type: string\n          description: |\n            Determines the visibility and writeability of the field by other API consumers.\n\n            |Value|Description\n            |-|-|\n            |`app_only`|Private to the app that owns the field|\n            |`read`|Visible to other API consumers|\n            |`write`|Open for reading and writing by other API consumers|\n            |`read_and_sf_access`|Visible to other API consumers, including on storefront|\n            |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|\n          enum:\n            - app_only\n            - read\n            - write\n            - read_and_sf_access\n            - write_and_sf_access\n        namespace:\n          type: string\n          description: |\n            Namespace for the metafield, for organizational purposes.\n          example: Sales Department\n          minLength: 1\n          maxLength: 64\n        key:\n          type: string\n          description: |\n            The name of the field, for example: `location_id`, `color`.\n          minLength: 1\n          maxLength: 64\n          example: Staff Name\n        value:\n          type: string\n          description: |\n            The value of the field, for example: `1`, `blue`.\n          minLength: 1\n          maxLength: 65535\n          example: Ronaldo\n        description:\n          type: string\n          description: |\n            Description for the metafields.\n          example: order\n          minLength: 0\n          maxLength: 255\n        resource_type:\n          type: string\n          description: |\n            The type of resource with which the metafield is associated.\n          enum:\n            - order\n            - brand\n            - product\n            - variant\n            - category\n          example: order\n        resource_id:\n          type: integer\n          description: |\n            The unique identifier for the resource with which the metafield is associated.\n          example: 0\n          readOnly: true\n      required:\n        - permission_set\n    MetafieldBase_Post:\n      type: object\n      description: |\n        Common Metafield properties.\n      x-internal: false\n      properties:\n        permission_set:\n          type: string\n          description: |\n            Determines the visibility and writeability of the field by other API consumers.\n\n            |Value|Description\n            |-|-|\n            |`app_only`|Private to the app that owns the field|\n            |`read`|Visible to other API consumers|\n            |`write`|Open for reading and writing by other API consumers|\n            |`read_and_sf_access`|Visible to other API consumers, including on storefront|\n            |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|\n          enum:\n            - app_only\n            - read\n            - write\n            - read_and_sf_access\n            - write_and_sf_access\n        namespace:\n          type: string\n          description: |\n            Namespace for the metafield, for organizational purposes.\n          example: Sales Department\n          minLength: 1\n          maxLength: 64\n        key:\n          type: string\n          description: |\n            The name of the field, for example: `location_id`, `color`.\n          minLength: 1\n          maxLength: 64\n          example: Staff Name\n        value:\n          type: string\n          description: |\n            The value of the field, for example: `1`, `blue`.\n          minLength: 1\n          maxLength: 65535\n          example: Ronaldo\n        description:\n          type: string\n          description: |\n            Description for the metafields.\n          minLength: 0\n          maxLength: 255\n          example: Name of Staff Member\n      required:\n        - permission_set\n        - namespace\n        - key\n        - value\n    Metafield:\n      description: |\n        Allows app partners to write custom data to various resources in the API.\n      allOf:\n        - $ref: '#/components/schemas/MetafieldBase'\n        - type: object\n          properties:\n            id:\n              type: integer\n              description: |\n                The unique identifier for the metafields.\n            date_created:\n              type: string\n              format: date-time\n              description: |\n                Date and time of the metafield's creation.\n              example: '2022-06-16T18:39:00+00:00'\n            date_modified:\n              type: string\n              format: date-time\n              description: |\n                Date and time when the metafield was last updated.\n              example: '2022-06-16T18:39:00+00:00'\n      x-internal: false\n      x-examples: {}\n    MetafieldPost:\n      description: |\n        The model for a POST to create metafield.\n      allOf:\n        - $ref: '#/components/schemas/MetafieldBase_Post'\n      x-internal: false\n      x-examples: {}\n    MetafieldPut:\n      description: |\n        The model for a PUT to update metafield.\n      allOf:\n        - $ref: '#/components/schemas/MetafieldBase_Post'\n      x-internal: false\n    GlobalOrderSettings:\n      type: object\n      properties:\n        notifications:\n          type: object\n          description: Global notification settings.\n          properties:\n            order_placed:\n              description: Global order notification settings.\n              type: object\n              properties:\n                email_addresses:\n                  description: Email addresses order notifications will be sent to. Empty array disables order notifications. Not nullable.\n                  type: array\n                  items:\n                    type: string\n            forward_invoice:\n              description: Global order invoice forward settings.\n              type: object\n              properties:\n                email_addresses:\n                  description: Email addresses order invoices will be forwarded to. Empty array disables forwarding order invoices. Not nullable.\n                  type: array\n                  items:\n                    type: string\n      example:\n        $ref: '#/components/examples/EnableMultipleOrderNotifications/value'\n      x-tags:\n        - Models\n      title: GlobalOrderSettings\n      x-examples:\n        example-1:\n          $ref: '#/components/examples/EnableMultipleOrderNotifications/value'\n    ChannelOrderSettings:\n      type: object\n      properties:\n        notifications:\n          type: object\n          description: Channel notification settings.\n          properties:\n            order_placed:\n              description: Channel order notification settings.\n              type: object\n              properties:\n                email_addresses:\n                  description: Email addresses channel order notifications will be sent to. If null will fall back to global value. Empty array disables order notifications for channel.\n                  type: array\n                  nullable: true\n                  items:\n                    type: string\n            forward_invoice:\n              description: Channel order invoice forward settings.\n              type: object\n              properties:\n                email_addresses:\n                  description: Email addresses channel order invoices will be forwarded to. If null will fall back to global value. Empty array disables forwarding order invoices for channel.\n                  type: array\n                  nullable: true\n                  items:\n                    type: string\n      x-tags:\n        - Models\n      title: ChannelOrderSettings\n    ErrorResponse400:\n      type: object\n      properties:\n        schema:\n          $ref: '#/components/schemas/betaErrorResponse'\n      x-tags:\n        - Models\n    ErrorResponse404:\n      type: object\n      properties:\n        schema:\n          $ref: '#/components/schemas/betaErrorResponse'\n      x-tags:\n        - Models\n    ErrorResponse422:\n      type: object\n      properties:\n        schema:\n          $ref: '#/components/schemas/betaErrorResponse'\n      x-tags:\n        - Models\n    betaErrorResponse:\n      allOf:\n        - $ref: '#/components/schemas/BaseError'\n        - type: object\n          properties:\n            errors:\n              type: object\n      x-tags:\n        - Models\n    BaseError:\n      type: object\n      description: |\n        Error payload for the BigCommerce API.\n      properties:\n        status:\n          description: |\n            The HTTP status code.\n          type: integer\n        title:\n          description: |\n            The error title describing the particular error.\n          type: string\n        type:\n          type: string\n      x-tags:\n        - Models\n    betaDetailedErrors:\n      type: object\n      x-tags:\n        - Models\n  responses:\n    Return_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                $ref: '#/components/schemas/Return_Full'\n              meta:\n                type: object\n                properties:\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n    ReturnStatus_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            properties:\n              data:\n                $ref: '#/components/schemas/UpdateReturnStatuses'\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Problem'\n              meta:\n                $ref: '#/components/schemas/BatchOperationMeta'\n    OrderReturnableItems_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                $ref: '#/components/schemas/GetReturnableItems'\n    CreateReturn_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                $ref: '#/components/schemas/CreateReturn'\n    ReceivedItems_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            properties:\n              data:\n                $ref: '#/components/schemas/ReceivedItems_Base'\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Problem'\n              meta:\n                $ref: '#/components/schemas/BatchOperationMeta'\n    ReviewedItems_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            properties:\n              data:\n                $ref: '#/components/schemas/ReviewedItems_Base'\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Problem'\n              meta:\n                $ref: '#/components/schemas/BatchOperationMeta'\n    StoreReturnSettings_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                $ref: '#/components/schemas/GetReturnsSettings'\n    502_GatewayError:\n      description: 'If something happens during the request that causes it to fail, a 502 response will be returned. A new request should be made; however, it could fail.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_Base'\n          examples:\n            response:\n              value:\n                status: 502\n                title: A login URL could not be generated. Please try another request.\n                type: /api-docs/getting-started/api-status-codes\n    504_GatewayTimeout:\n      description: 'If this occurs, you should retry the request. Typically retrying the request several times will result in a successful request; However, if you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually)'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/errorDetailed_Full'\n          examples:\n            response:\n              value:\n                status: 504\n                title: Gateway Timeout\n                type: /api-docs/getting-started/api-status-codes\n                errors: {}\n    403_Unauthorized:\n      description: ''\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_Base'\n          examples:\n            response:\n              value:\n                status: 403\n                title: Unauthorized Access. You do not have permission to make this request.\n                type: /api-docs/getting-started/api-status-codes\n    400_BadRequest:\n      description: |-\n        Malformed request syntax. Typically need to fix the JSON\n        Body to resend successfully.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_Base'\n          examples:\n            response:\n              value:\n                status: 400\n                title: Input is invalid.\n                type: /api-docs/getting-started/api-status-codes\n    404_NotFound:\n      description: The resource was not found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_Base'\n          examples:\n            response:\n              value:\n                status: 404\n                title: 'Account with {id} not found'\n                type: /api-docs/getting-started/api-status-codes\n    422_UnprocessableEntity:\n      description: This occurs when missing or unacceptable data is passed for one or more fields. Please correct the values for the fields listed in the errors object.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n          examples:\n            response:\n              value:\n                status: 422\n                title: JSON data is missing or invalid\n                type: /api-docs/getting-started/api-status-codes\n                errors:\n                  name: error.expected.jsstring\n                  primary_contact.district: error.expected.jsstring.\n    503_ServiceUnavailable:\n      description: 'If this occurs, you should retry the request. If you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually)'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_Base'\n          examples:\n            response:\n              value:\n                status: 503\n                title: Service Unavailable\n                type: /api-docs/getting-started/api-status-codes\n    paymentActionsCapture_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties: {}\n    paymentActionsVoid_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties: {}\n    201_Acknowledged:\n      description: Request acknowledged.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties: {}\n    201_Created:\n      description: Resource Created.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties: {}\n    RefundCollection_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            description: Response payload for Refund resource\n            properties:\n              data:\n                type: array\n                description: Collection of Refunds\n                items:\n                  $ref: '#/components/schemas/Refund'\n              meta:\n                type: object\n                description: Meta data collection\n    refundsBATCH_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Refund'\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FailedQuoteError'\n              meta:\n                $ref: '#/components/schemas/MetaRefund'\n    RefundQuote_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                $ref: '#/components/schemas/RefundQuote_Full'\n              meta:\n                type: object\n    Refund_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                $ref: '#/components/schemas/Refund'\n              meta:\n                type: object\n    TransactionCollection_Resp:\n      description: Response payload for the BigCommerce Order Transactions API.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Transaction'\n              meta:\n                $ref: '#/components/schemas/metaCollection_Full'\n    Transaction_Resp:\n      description: Response payload for the BigCommerce Order Transactions API single transaction.\n      content:\n        application/json:\n          schema:\n            allOf:\n              - properties:\n                  data:\n                    $ref: '#/components/schemas/Transaction_Post'\n              - properties:\n                  id:\n                    type: integer\n                    description: |\n                      Unique identifier for the transaction.\n                  order_id:\n                    type: string\n                    description: Identifier for the BigCommerce Order with which this transaction is associated.\n                  date_created:\n                    type: string\n                    format: date-time\n                    description: |\n                      The datetime of the transaction.\n                  payment_instrument_token:\n                    type: string\n                    description: This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment.\n                  avs_result:\n                    $ref: '#/components/schemas/AVSResult'\n                  cvv_result:\n                    $ref: '#/components/schemas/CVVResult'\n                  credit_card:\n                    $ref: '#/components/schemas/CreditCard'\n                  gift_certificate:\n                    $ref: '#/components/schemas/GiftCertificate'\n                  store_credit:\n                    $ref: '#/components/schemas/StoreCredit'\n              - properties:\n                  meta:\n                    $ref: '#/components/schemas/metaEmpty_Full'\n            type: object\n    RefundQuotesBATCH_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RefundQuote_Full'\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FailedQuoteError'\n              meta:\n                $ref: '#/components/schemas/Meta'\n    RefundID_Response:\n      description: ''\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/RefundID_Get'\n          examples:\n            Example:\n              value:\n                data:\n                  id: 12\n                  order_id: 180\n                  user_id: 0\n                  created: '2022-06-16T16:44:15+00:00'\n                  reason: ''\n                  total_amount: 50\n                  total_tax: 5\n                  uses_merchant_override_values: false\n                  payments:\n                    - id: 13\n                      provider_id: storecredit\n                      amount: 50\n                      offline: true\n                      is_declined: false\n                      declined_message: ''\n                  items:\n                    - item_type: PRODUCT\n                      item_id: 87\n                      quantity: 1\n                      requested_amount: null\n                      reason: incididunt exercitation enim\n                meta: {}\n  parameters:\n    OrderIdParam:\n      name: order_id\n      in: path\n      description: |\n        The ID of the `Order` to which the transactions belong.\n      required: true\n      schema:\n        type: integer\n    Accept:\n      in: header\n      name: Accept\n      schema:\n        type: string\n        default: application/json\n    Content-Type:\n      name: Content-Type\n      in: header\n      schema:\n        type: string\n        default: application/json\n    PageParam:\n      name: page\n      description: |\n        Specifies the page number in a limited (paginated) list of products.\n      required: false\n      in: query\n      schema:\n        type: integer\n    MetafieldIdParam:\n      name: metafield_id\n      in: path\n      description: |\n        The ID of the `Metafield`.\n      required: true\n      schema:\n        type: integer\n    MetafieldKeyParam:\n      name: key\n      in: query\n      description: |\n        Filter based on a metafield's key.\n      required: false\n      schema:\n        type: string\n    MetafieldNamespaceParam:\n      name: namespace\n      in: query\n      description: |\n        Filter based on a metafield's key.\n      required: false\n      schema:\n        type: string\n    LimitParam:\n      name: limit\n      description: |\n        Controls the number of items per page in a limited (paginated) list of products.\n      required: false\n      in: query\n      schema:\n        type: integer\n    DirectionParam:\n      name: direction\n      description: |\n        Sort direction. Acceptable values are: `asc`, `desc`.\n      required: false\n      in: query\n      schema:\n        type: string\n        enum:\n          - asc\n          - desc\n  securitySchemes:\n    X-Auth-Token:\n      type: apiKey\n      in: header\n      name: X-Auth-Token\n      description: |-\n        ### OAuth Scopes\n        |  **UI Name** | **Permission** | **Parameter** |\n        | --- | --- | --- |\n        |  Order Transactions | read and modify `transactions` and `payment_methods` | `store_v2_transactions` |\n        |  Order Transactions | read `transactions` and `payment_methods`  | `store_v2_transactions_read_only` |\n        |  Orders | read and modify `payment_methods` |`store_v2_orders`|\n        |  Orders | read `payment_methods` |`store_v2_orders_read_only`|\n\n        ### Headers\n\n        |Header|Parameter|Description|\n        |-|-|-|\n        |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n\n        ### Example\n\n        ```http\n        GET /stores/{store_hash}/v3/catalog/summary\n        host: api.bigcommerce.com\n        Content-Type: application/json\n        X-Auth-Token: {access_token}\n        ```\n\n        * For more information on Authenticating BigCommerce APIs, see: [Authentication](/api-docs/getting-started/authentication).\n  examples:\n    EnableMultipleOrderNotifications:\n      summary: Enable order placed and forward invoice notifications\n      value:\n        notifications:\n          order_placed:\n            email_addresses:\n              - admin@example.com\n              - another-email@example.com\n          forward_invoice:\n            email_addresses:\n              - admin@example.com\n              - another-email@example.com\n    GlobalOrderSettingsDisableOrderPlacedNotificatons:\n      summary: Disable order placed notifications at global level\n      value:\n        notifications:\n          order_placed:\n            email_addresses: []\n    ChannelOrderSettingsOverrideOrderPlacedEmailAddressesAndDisableForwardEmail:\n      summary: Override order placed email addresses and forward email addresses global value for channel\n      value:\n        notifications:\n          order_placed:\n            email_addresses:\n              - admin@example.com\n              - another-email@example.com\n          forward_invoice:\n            email_addresses: []\n    ChannelOrderSettingsReset:\n      summary: Reset order placed email addresses to global value for channel\n      value:\n        notifications:\n          order_placed:\n            email_addresses: null\n          forward_invoice:\n            email_addresses: null\n    ChannelOrderSettingsDisableBothNotifications:\n      summary: Disable order placed notifications for channel\n      value:\n        notifications:\n          order_placed:\n            email_addresses: []\n          forward_invoice:\n            email_addresses: []\nx-stoplight:\n  docs:\n    includeDownloadLink: true\n    showModels: false\n",
			"canonicalURL": "/github.com/bigcommerce/api-specs@d21002a77e702ec07a665745c23451742d79fa1e/-/blob/reference/orders.v3.yml",
			"externalURLs": [
				{
					"url": "https://github.com/bigcommerce/api-specs/blob/d21002a77e702ec07a665745c23451742d79fa1e/reference/orders.v3.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/stores/{store_hash}/v3/orders/payment_actions/refund_quotes\": post: operation \"postrefundquotes\": responses: 422: content: at reference/orders.v3.yml:510:13: content type \"Example 1\": mime: expected slash after first token"
}