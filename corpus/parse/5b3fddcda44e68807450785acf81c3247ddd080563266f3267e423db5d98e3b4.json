{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackql/stackql"
		},
		"file": {
			"name": "users.yaml",
			"size": 0,
			"path": "test/registry/src/sumologic/v0.1.0/services/users.yaml",
			"byteSize": 37771,
			"content": "paths:\n  /v1/users:\n    get:\n      tags:\n        - userManagement\n      summary: Get a list of users.\n      description: Get a list of all users in the organization. The response is paginated with a default limit of 100 users per page.\n      operationId: listUsers\n      parameters:\n        - name: limit\n          in: query\n          description: Limit the number of users returned in the response. The number of users returned may be less than the `limit`.\n          required: false\n          schema:\n            maximum: 1000\n            minimum: 1\n            type: integer\n            format: int32\n            default: 100\n        - name: token\n          in: query\n          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.\n          required: false\n          schema:\n            type: string\n        - name: sortBy\n          in: query\n          description: Sort the list of users by the `firstName`, `lastName`, or `email` field.\n          required: false\n          schema:\n            type: string\n        - name: email\n          in: query\n          description: Find user with the given email address.\n          required: false\n          schema:\n            minLength: 1\n            type: string\n      responses:\n        '200':\n          description: A paginated list of users in the organization.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListUserModelsResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    post:\n      tags:\n        - userManagement\n      summary: Create a new user.\n      description: Create a new user in the organization.\n      operationId: createUser\n      parameters: []\n      requestBody:\n        description: Information about the new user.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUserDefinition'\n        required: true\n      responses:\n        '200':\n          description: The user has been created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserModel'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/users/{id}:\n    get:\n      tags:\n        - userManagement\n      summary: Get a user.\n      description: Get a user with the given identifier from the organization.\n      operationId: getUser\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of user to return.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: User object that was requested.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserModel'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    put:\n      tags:\n        - userManagement\n      summary: Update a user.\n      description: Update an existing user in the organization.\n      operationId: updateUser\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of the user to update.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Information to update about the user.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUserDefinition'\n        required: true\n      responses:\n        '200':\n          description: The user was successfully modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserModel'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      tags:\n        - userManagement\n      summary: Delete a user.\n      description: Delete a user with the given identifier from the organization and transfer their content to the user with the identifier specified in \"transferTo\".\n      operationId: deleteUser\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of the user to delete.\n          required: true\n          schema:\n            type: string\n        - name: transferTo\n          in: query\n          description: Identifier of the user to receive the transfer of content from the deleted user. \u003cbr\u003e **Note:** If `deleteContent` is not set to `true`, and no user identifier is specified in `transferTo`, content from the deleted user is transferred to the executing user.\n          required: false\n          schema:\n            type: string\n        - name: deleteContent\n          in: query\n          description: Whether to delete content from the deleted user or not. \u003cbr\u003e **Warning:** If `deleteContent` is set to `true`, all of the content for the user being deleted is permanently deleted and cannot be recovered.\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '204':\n          description: User was deleted successfully.\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/users/{id}/email/requestChange:\n    post:\n      tags:\n        - userManagement\n      summary: Change email address.\n      description: An email with an activation link is sent to the userâ€™s new email address. The user must click the link in the email within seven days to complete the email address change, or the link will expire.\n      operationId: requestChangeEmail\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of the user to change email address.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: New email address of the user.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChangeEmailRequest'\n        required: true\n      responses:\n        '204':\n          description: Email change request was submitted successfully.\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/users/{id}/password/reset:\n    post:\n      tags:\n        - userManagement\n      summary: Reset password.\n      description: Reset a user's password.\n      operationId: resetPassword\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of the user to reset password.\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: User's password was reset successfully.\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/users/{id}/unlock:\n    post:\n      tags:\n        - userManagement\n      summary: Unlock a user.\n      description: Unlock another user's account.\n      operationId: unlockUser\n      parameters:\n        - name: id\n          in: path\n          description: The id of the user that needs to be unlocked.\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: User's account was unlocked successfully.\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/users/{id}/mfa/disable:\n    put:\n      tags:\n        - userManagement\n      summary: Disable MFA for user.\n      description: Disable multi-factor authentication for given user.\n      operationId: disableMfa\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of the user to disable MFA for.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Email and Password of the user to disable MFA for.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DisableMfaRequest'\n        required: true\n      responses:\n        '204':\n          description: User's MFA was disabled successfully.\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\ncomponents:\n  schemas:\n    ListUserModelsResponse:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: List of users.\n          items:\n            $ref: '#/components/schemas/UserModel'\n        next:\n          type: string\n          description: Next continuation token.\n          example: GDCiRv4vebF3UWFJQ1kySXBOR3Bzh69GR0RyWm9vCtc\n    ErrorResponse:\n      required:\n        - errors\n        - id\n      type: object\n      properties:\n        id:\n          type: string\n          description: An identifier for the error; this is unique to the specific API request.\n          example: IUUQI-DGH5I-TJ045\n        errors:\n          type: array\n          description: A list of one or more causes of the error.\n          example:\n            - code: auth:password_too_short\n              message: Your password was too short.\n            - code: auth:password_character_classes\n              message: Your password did not contain any non-alphanumeric characters\n          items:\n            $ref: '#/components/schemas/ErrorDescription'\n    UserModel:\n      allOf:\n        - $ref: '#/components/schemas/CreateUserDefinition'\n        - $ref: '#/components/schemas/MetadataModel'\n        - required:\n            - id\n          properties:\n            id:\n              type: string\n              description: Unique identifier for the user.\n              example: 000000000FE20FE2\n            isActive:\n              type: boolean\n              description: True if the user is active.\n              example: true\n            isLocked:\n              type: boolean\n              description: This has the value `true` if the user's account has been locked. If a user tries to log into their account several times and fails, his or her account will be locked for security reasons.\n              example: false\n            isMfaEnabled:\n              type: boolean\n              description: True if multi factor authentication is enabled for the user.\n              example: false\n            lastLoginTimestamp:\n              type: string\n              description: Timestamp of the last login for the user in UTC. Will be null if the user has never logged in.\n              format: date-time\n    ErrorDescription:\n      required:\n        - code\n        - message\n      type: object\n      properties:\n        code:\n          type: string\n          description: An error code describing the type of error.\n          example: auth:password_too_short\n        message:\n          type: string\n          description: A short English-language description of the error.\n          example: Your password was too short.\n        detail:\n          type: string\n          description: An optional fuller English-language description of the error.\n          example: Your password was 5 characters long, the minimum length is 12 characters. See http://example.com/password for more information.\n        meta:\n          type: object\n          description: An optional list of metadata about the error.\n          example:\n            minLength: 12\n            actualLength: 5\n    CreateUserDefinition:\n      required:\n        - email\n        - firstName\n        - lastName\n        - roleIds\n      type: object\n      properties:\n        firstName:\n          maxLength: 128\n          minLength: 1\n          type: string\n          description: First name of the user.\n          example: John\n        lastName:\n          maxLength: 128\n          minLength: 0\n          type: string\n          description: Last name of the user.\n          example: Doe\n        email:\n          maxLength: 255\n          type: string\n          description: Email address of the user.\n          format: email\n          example: johndoe@acme.com\n        roleIds:\n          type: array\n          description: List of roleIds associated with the user.\n          example:\n            - 00000000000001DF\n            - 00000000000002D2\n          items:\n            type: string\n    MetadataModel:\n      required:\n        - createdAt\n        - createdBy\n        - modifiedAt\n        - modifiedBy\n      type: object\n      properties:\n        createdAt:\n          type: string\n          description: Creation timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.\n          format: date-time\n          example: '2018-10-16T09:10:00Z'\n        createdBy:\n          type: string\n          description: Identifier of the user who created the resource.\n          example: 0000000006743FDD\n        modifiedAt:\n          type: string\n          description: Last modification timestamp in UTC.\n          format: date-time\n          example: '2018-10-16T09:10:00Z'\n        modifiedBy:\n          type: string\n          description: Identifier of the user who last modified the resource.\n          example: 0000000006743FE8\n    UpdateUserDefinition:\n      required:\n        - firstName\n        - isActive\n        - lastName\n        - roleIds\n      type: object\n      properties:\n        firstName:\n          maxLength: 128\n          minLength: 1\n          type: string\n          description: First name of the user.\n          example: John\n        lastName:\n          maxLength: 128\n          minLength: 0\n          type: string\n          description: Last name of the user.\n          example: Doe\n        isActive:\n          type: boolean\n          description: This has the value `true` if the user is active and `false` if they have been deactivated.\n          example: true\n        roleIds:\n          type: array\n          description: List of role identifiers associated with the user.\n          example:\n            - 00000000000001DF\n            - 00000000000002D2\n          items:\n            type: string\n    ChangeEmailRequest:\n      required:\n        - email\n      type: object\n      properties:\n        email:\n          maxLength: 255\n          type: string\n          description: New email address of the user.\n          format: email\n          example: johndoe@acme.com\n    DisableMfaRequest:\n      required:\n        - email\n        - password\n      type: object\n      properties:\n        email:\n          maxLength: 255\n          type: string\n          description: Email of user whose mfa is being disabled.\n          format: email\n          example: johndoe@cme.com\n        password:\n          type: string\n          description: Password of user whose mfa is being disabled.\n  parameters: {}\n  responses: {}\n  securitySchemes: {}\n  callbacks: {}\n  examples: {}\n  requestBodies: {}\n  headers: {}\n  links: {}\n  x-stackQL-resources:\n    users:\n      id: sumologic.users.users\n      name: users\n      title: Users\n      methods:\n        listUsers:\n          operation:\n            $ref: '#/paths/~1v1~1users/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        createUser:\n          operation:\n            $ref: '#/paths/~1v1~1users/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        getUser:\n          operation:\n            $ref: '#/paths/~1v1~1users~1{id}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        updateUser:\n          operation:\n            $ref: '#/paths/~1v1~1users~1{id}/put'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        deleteUser:\n          operation:\n            $ref: '#/paths/~1v1~1users~1{id}/delete'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/users/methods/getUser'\n          - $ref: '#/components/x-stackQL-resources/users/methods/listUsers'\n        insert:\n          - $ref: '#/components/x-stackQL-resources/users/methods/createUser'\n        update: []\n        delete:\n          - $ref: '#/components/x-stackQL-resources/users/methods/deleteUser'\n    email_request_change:\n      id: sumologic.users.email_request_change\n      name: email_request_change\n      title: Email_request_change\n      methods:\n        requestChangeEmail:\n          operation:\n            $ref: '#/paths/~1v1~1users~1{id}~1email~1requestChange/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\n    password_reset:\n      id: sumologic.users.password_reset\n      name: password_reset\n      title: Password_reset\n      methods:\n        resetPassword:\n          operation:\n            $ref: '#/paths/~1v1~1users~1{id}~1password~1reset/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\n    unlock:\n      id: sumologic.users.unlock\n      name: unlock\n      title: Unlock\n      methods:\n        unlockUser:\n          operation:\n            $ref: '#/paths/~1v1~1users~1{id}~1unlock/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\n    mfa_disable:\n      id: sumologic.users.mfa_disable\n      name: mfa_disable\n      title: Mfa_disable\n      methods:\n        disableMfa:\n          operation:\n            $ref: '#/paths/~1v1~1users~1{id}~1mfa~1disable/put'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\nopenapi: 3.0.0\nservers:\n  - url: https://api.au.sumologic.com/api/\n    description: AU deployment API server\n  - url: https://api.ca.sumologic.com/api/\n    description: CA deployment API server\n  - url: https://api.de.sumologic.com/api/\n    description: DE deployment API server\n  - url: https://api.eu.sumologic.com/api/\n    description: EU deployment API server\n  - url: https://api.fed.sumologic.com/api/\n    description: FED deployment API server\n  - url: https://api.jp.sumologic.com/api/\n    description: JP deployment API server\n  - url: https://api.in.sumologic.com/api/\n    description: IN deployment API server\n  - url: https://api.sumologic.com/api/\n    description: US1 deployment API server\n  - url: https://api.us2.sumologic.com/api/\n    description: US2 deployment API server\nsecurity:\n  - basicAuth: []\ntags:\n  - name: accountManagement\n    description: |\n      Account Management API.\n\n      Manage the custom subdomain for the URL used to access your Sumo Logic account. For more information see [Manage Organization](https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization).\n    x-displayName: Account\n  - name: appManagement\n    description: |\n      App installation API.\n\n      View and install Sumo Logic Applications that deliver out-of-the-box dashboards, saved searches, and field extraction for popular data sources. For more information see [Sumo Logic Apps](https://help.sumologic.com/07Sumo-Logic-Apps).\n    x-displayName: Apps (Beta)\n  - name: connectionManagement\n    description: |\n      Connection management API.\n\n      Set up connections to send alerts to other tools. For more information see [Connections and Integrations](https://help.sumologic.com/?cid=1044).\n    x-displayName: Connections\n  - name: contentManagement\n    description: |\n      Content management API.\n\n      You can export, import, delete and copy content in your organizationâ€™s Library. For more information see [Library](https://help.sumologic.com/?cid=5173). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).\n      \u003cbr/\u003e \u003cbr/\u003e\n      ### Example\n      The following example uses API endpoints in the US1 deployment. Sumo Logic has several deployments that are assigned depending on the geographic location and the date an account is created. For details determining your account's deployment see [API endpoints](https://help.sumologic.com/?cid=3011).\n      The [Content Import API](#operation/beginAsyncImport) can be used to create or update a Search, Scheduled Search, or Dashboard. Here is an example creating a Scheduled Search:\n      1. Get the identifier of your `Personal` folder.\n        ```bash\n        curl -X GET -u \"\u003caccessId\u003e:\u003caccessKey\u003e\" https://api.sumologic.com/api/v2/content/folders/personal\n        ```\n\n        Find the identifier of your `Personal` folder in the response.\n        ```json\n        {\n            ...\n            \"id\": \"0000000006A2E86F\", \u003c----\n            \"name\": \"Personal\",\n            \"itemType\": \"Folder\",\n            ...\n        }\n        ```\n\n        You can use [getFolder](#operation/getFolder), [getAdminRecommededFolder](#operation/getAdminRecommendedFolderAsync),\n        or [getGlobalFolder](#operation/getGlobalFolderAsync) endpoints to traverse the content tree and find the identifier of any\n        folder you want to manage.\n\n      2. Use the [Content Import API](#operation/beginAsyncImport) to create a new Scheduled Search inside your\n        `Personal` folder.\n        ```bash\n        curl -X POST -u \"\u003caccessId\u003e:\u003caccessKey\u003e\" -H \"Content-Type: application/json\" -d @search.json https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import\n        ```\n\n        The data file `search.json` in the above command has the following `SavedSearchWithScheduleSyncDefinition` object.\n        ```json\n        // file: search.json\n        {\n            \"type\": \"SavedSearchWithScheduleSyncDefinition\",\n            \"name\": \"demo-scheduled-search\",\n            \"description\": \"Runs every hour with timerange of 15m and sends email notifications\",\n            \"search\": {\n                \"queryText\": \"\\\"error\\\" and \\\"warn\\\"\",\n                \"defaultTimeRange\": \"-15m\",\n                \"byReceiptTime\": false,\n                \"viewName\": \"\",\n                \"viewStartTime\": null,\n                \"queryParameters\": []\n            },\n            \"searchSchedule\": {\n                \"cronExpression\": \"0 0/15 * * * ? *\",\n                \"displayableTimeRange\": \"-15m\",\n                \"parseableTimeRange\": {\n                    \"from\": {\n                        \"relativeTime\": \"-15m\",\n                        \"type\": \"RelativeTimeRangeBoundary\"\n                    },\n                    \"to\": null,\n                    \"type\": \"BeginBoundedTimeRange\"\n                },\n                \"timeZone\": \"America/Los_Angeles\",\n                \"threshold\": null,\n                \"notification\": {\n                    \"taskType\": \"EmailSearchNotificationSyncDefinition\",\n                    \"toList\": [\n                        \"ops@acme.org\"\n                    ],\n                    \"subjectTemplate\": \"Search Results: {{SearchName}}\",\n                    \"includeQuery\": true,\n                    \"includeResultSet\": true,\n                    \"includeHistogram\": true,\n                    \"includeCsvAttachment\": false\n                },\n                \"muteErrorEmails\": false,\n                \"scheduleType\": \"1Hour\",\n                \"parameters\": []\n            }\n        }\n        ```\n\n        The response of above request will have the job identifier that you can use to track the status of the import job.\n        ```json\n        {\n            \"id\": \"74DC17FA765C7443\"\n        }\n        ```\n\n      3. Use the job identifier from the import request to get the [status](#operation/getAsyncImportStatus) of the\n        import job.\n        ```bash\n        curl -X GET -u \"\u003caccessId\u003e:\u003caccessKey\u003e\" https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import/74DC17FA765C7443/status\n        ```\n\n        If you are importing a large item, you might have to wait for the import job to finish. The following is an\n        example response from a completed job.\n        ```json\n        {\n            \"status\": \"Success\",\n            \"statusMessage\": null,\n            \"error\": null\n        }\n        ```\n    x-displayName: Content\n  - name: contentPermissions\n    description: |\n      Content permissions API.\n\n      You can share your folders, searches, and dashboards with specific users or roles. For more information see [Share Content](https://help.sumologic.com/?cid=8675309). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).\n    x-displayName: Permissions\n  - name: dashboardManagement\n    description: |\n      Dashboard (New) management API.\n\n      Dashboard (New) allows you to analyze metric and log data on the same dashboard, in a seamless view. This gives you control over the visual display of metric and log data. Dashboard (New) streamlines dashboard configurations and on-the-fly analytic visualizations with its new templating features. For more information see [Dashboard (New)](https://help.sumologic.com/?cid=5500).\n    x-displayName: Dashboard (New)\n  - name: dynamicParsingRuleManagement\n    description: |\n      Dynamic Parsing management API.\n\n      Dynamic Parsing allows automatic field extraction from your log messages when you run a search.  This allows you to view fields from logs without having to manually specify parsing logic. For more information  see [Dynamic Parsing](https://help.sumologic.com/?cid=20011).\n    x-displayName: Dynamic Parsing\n  - name: extractionRuleManagement\n    description: |\n      Field Extraction Rule management API.\n\n      Field Extraction Rules allow you to parse fields from your log messages at the time the messages are ingested eliminating the need to parse fields in your query. For more information see [Manage Field Extraction](https://help.sumologic.com/?cid=5313).\n    x-displayName: Field Extraction Rules\n  - name: fieldManagementV1\n    description: |\n      Field management API.\n\n      Fields allow you to reference log data based on meaningful associations. They act as metadata tags that are assigned to your logs so you can search with them. Each field contains a key-value pair, where the field name is the key. Fields may be referred to as Log Metadata Fields. For more information see [Fields](https://help.sumologic.com/?cid=10116).\n    x-displayName: Field Management\n  - name: folderManagement\n    description: |\n      Folder management API.\n\n      You can add folders and subfolders to the Library in order to organize your content for easy access or to share content. For more information see [Add Folders to the Library](https://help.sumologic.com/?cid=5020). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).\n    x-displayName: Folders\n  - name: ingestBudgetManagementV1\n    description: |\n      Ingest Budget management API.\n\n      Ingest Budgets allow you to control the capacity of daily ingestion volume sent to Sumo Logic from Collectors. For more information see [Ingest Budgets](https://help.sumologic.com/?cid=5235).\n    x-displayName: Ingest Budgets\n  - name: ingestBudgetManagementV2\n    description: |\n      Ingest Budget management API V2.\n\n      Ingest Budgets V2 provide you the ability to create and assign budgets to your log data by Fields instead of using a Field Value. For more information see [Metadata Ingest Budgets](https://help.sumologic.com/?cid=52352).\n    x-displayName: Ingest Budgets V2\n  - name: partitionManagement\n    description: |\n      Partition management API.\n\n      Creating a Partition allows you to improve search performance by searching over a smaller number of messages. For more information see [Manage Partitions](https://help.sumologic.com/?cid=5231).\n    x-displayName: Partitions\n  - name: logsDataForwardingManagement\n    description: |\n      Logs Data Forwarding management API.\n\n      Logs Data Forwarding allows you to forward log data from a Partition or Scheduled View to an S3 bucket. For more information see [Forwarding Data to S3](https://help.sumologic.com/Manage/Data-Forwarding/Configure-Data-Forwarding-from-Sumo-Logic-to-S3).\n    x-displayName: Logs Data Forwarding\n  - name: roleManagement\n    description: |\n      Role management API.\n\n      Roles determine the functions that users are able to perform in Sumo Logic. To manage roles, you must have an administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Roles](https://help.sumologic.com/?cid=5234).\n    x-displayName: Roles\n  - name: lookupManagement\n    description: |\n      Lookup Table management API.\n\n      A Lookup Table is a table of data hosted on Sumo Logic that you can use to enrich the log and event data received by Sumo Logic. You must create a table schema before you can populate the table. For more information see [Lookup Tables](https://help.sumologic.com/?cid=10109).\n    x-displayName: Lookup Tables\n  - name: scheduledViewManagement\n    description: |\n      Scheduled View management API.\n\n      Scheduled Views speed the search process for small and historical subsets of your data by functioning as a pre-aggregated index. For more information see [Manage Scheduled Views](https://help.sumologic.com/?cid=5128).\n    x-displayName: Scheduled Views\n  - name: tokensLibraryManagement\n    description: |\n      Tokens management API.\n\n      Tokens are associated with your organization to authorize specific operations. Currently, we support collector registration tokens, which can be used to register Installed Collectors. Managing tokens requires the Manage Tokens role capability. For more information see [Installation Tokens](https://help.sumologic.com/?cid=0100).\n    x-displayName: Tokens\n  - name: transformationRuleManagement\n    description: |\n      Transformation Rule management API.\n      Metrics Transformation Rules allow you control how long raw metrics are retained. You can also aggregate metrics at collection time and specify a separate retention period for the aggregated metrics. For more information see [Metrics Transformation Rules](https://help.sumologic.com/?cid=10117).\n    x-displayName: Transformation Rules (Beta)\n  - name: userManagement\n    description: |\n      User management API.\n\n      To manage users, you must have the administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Users](https://help.sumologic.com/?cid=1006).\n    x-displayName: Users\n  - name: metricsSearchesManagement\n    description: |\n      Metrics Search management API.\n\n      Save metrics searches in the content library and organize them in a folder hierarchy. Share useful queries with users in your organization. For more information see [Sharing Metric Charts](https://help.sumologic.com/Metrics/03-Metric-Charts/Share_a_Metric_Chart).\n    x-displayName: Metrics Searches (Beta)\n  - name: metricsQuery\n    description: |\n      Metrics Query API.\n\n      The Metrics Query API allows you to execute queries on various metrics and retrieve multiple time-series (data-points) over time range(s). For more information see [Metrics - Classic](https://help.sumologic.com/?cid=1079).\n    x-displayName: Metrics Query\n  - name: accessKeyManagement\n    description: |\n      Access Key management API.\n\n      Access Keys allow you to securely register new Collectors and access Sumo Logic APIs. For more information see [Access Keys](https://help.sumologic.com/?cid=6690).\n    x-displayName: Access Keys\n  - name: samlConfigurationManagement\n    description: |\n      SAML configuration management API\n\n      Organizations with Enterprise accounts can provision Security Assertion Markup Language (SAML) 2.0 to enable Single Sign-On (SSO) for user access to Sumo Logic. For more information see [SAML Configuration](https://help.sumologic.com/?cid=4016).\n    x-displayName: SAML Configuration\n  - name: serviceAllowlistManagement\n    description: |\n      Service Allowlist management API\n\n      Service Allowlist Settings allow you to explicitly grant access to specific IP addresses and/or CIDR notations for logins, APIs, and dashboard access. For more information see [Service Allowlist Settings](https://help.sumologic.com/?cid=5454).\n    x-displayName: Service Allowlist\n  - name: healthEvents\n    description: |\n      Health Events management API.\n\n      Health Events allow you to keep track of the health of your Collectors and Sources. You can use them to find and investigate common errors and warnings that are known to cause collection issues. For more information see [Health Events](https://help.sumologic.com/?cid=0020).\n    x-displayName: Health Events\n  - name: archiveManagement\n    description: |-\n      Archive Ingestion Management API.\n\n      Archive Ingestion allows you to ingest data from Archive destinations. You can use this API to ingest data from your Archive with an existing AWS S3 Archive Source. You need the Manage or View Collectors role capability to manage or view ingestion jobs. For more information see [Archive](https://help.sumologic.com/?cid=10011).\n    x-displayName: Archive Ingestion Management\n  - name: logSearchesEstimatedUsage\n    description: |\n      Log Search Estimated Usage API.\n\n      Gets the estimated volume of data that would be scanned for a given log search in the Infrequent data tier, over a particular time range. In the Infrequent Data Tier, you pay per query, based on the amount data scanned. You can use this endpoint to get an estimate of the total data that would be scanned before running a query, and refine your query to scan less data, as necessary. For more information see [Infrequent data tier](https://help.sumologic.com/?cid=11987).\n    x-displayName: Log Search Estimated Usage\n  - name: passwordPolicy\n    description: |\n      Password Policy Management API\n\n      The password policy controls how user passwords are managed. The \"Manage Password Policy\" role capability is required to update the password policy. For more information see [how to set a password policy](https://help.sumologic.com/?cid=8595).\n    x-displayName: Password Policy\n  - name: policiesManagement\n    description: |\n      Policies management API.\n\n      Policies control the security and share settings of your organization. For more information see [Security](https://help.sumologic.com/?cid=4041).\n    x-displayName: Policies\n  - name: traces\n    description: |\n      Traces API\n\n      The Traces API allows you to browse traces collected in the system. You can execute queries to find traces matching provided search criteria as well as gather detailed information about individual traces and spans. For more information see [View and investigate traces](https://help.sumologic.com/Traces/View_and_investigate_traces).\n    x-displayName: Traces\n  - name: spanAnalytics\n    description: |\n      Span Analytics API\n\n      The Span Analytics API allows you to browse spans collected in the system. You can execute queries to find individual spans matching provided search criteria as well as run aggregated span queries and retrieve their results. For more information see [Spans](https://help.sumologic.com/Traces/Spans).\n    x-displayName: Span Analytics\n  - name: serviceMap\n    description: |\n      Service Map API\n\n      The Service Map API allows you to fetch a graph representation of the Service Map, which is a high-level view of your application environment, automatically derived from tracing data. For more information see [Service Map](https://help.sumologic.com/Traces/Service_Map_and_Dashboards#service-map).\n    x-displayName: Service Map\n  - name: slosLibraryManagement\n    description: |\n      SLO Management API.\n\n      SLOs are used to monitor and alert on KPIs for your most important services or user experience.\n    x-displayName: SLOs\n  - name: monitorsLibraryManagement\n    description: |\n      Monitor Management API.\n\n\n      Monitors continuously query your data to monitor and send notifications when specific events occur.\n      For more information see [Monitors](https://help.sumologic.com/?cid=10020).\n    x-displayName: Monitors\ninfo:\n  title: Sumo Logic API - users\n  description: users\n  version: 1.0.0\n  x-logo:\n    url: ./sumologic_logo.png\n",
			"canonicalURL": "/github.com/stackql/stackql@2887bc542abb18a5f70409f1641ad9e15b06428c/-/blob/test/registry/src/sumologic/v0.1.0/services/users.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stackql/stackql/blob/2887bc542abb18a5f70409f1641ad9e15b06428c/test/registry/src/sumologic/v0.1.0/services/users.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/v1/users\": get: operation \"listUsers\": security: at test/registry/src/sumologic/v0.1.0/services/users.yaml:622:5: unknown security scheme \"basicAuth\""
}