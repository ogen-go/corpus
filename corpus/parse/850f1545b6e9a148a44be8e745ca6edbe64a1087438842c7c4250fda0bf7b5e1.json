{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/serverless-coffee"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "backends/2-config-service/RestAPIs/api.yaml",
			"byteSize": 8916,
			"content": "openapi: \"3.0.1\"\ninfo:\n  title: \"ServerlesspressoConfigServiceRestApi\"\n  version: \"2021-12-21T15:32:58Z\"\npaths:\n  /config:\n    get:\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Empty\"\n\n      x-amazon-apigateway-integration:\n        credentials: \n          Fn::GetAtt: [ConfigRESTApiRole, Arn]\n        httpMethod: \"POST\"\n        uri: \n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'GET,OPTIONS'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            \n        requestTemplates:\n          application/json: \"#set($eventId = $input.params('eventId'))\\n#set ($PK\\\n            \\ = \\\"config-$eventId\\\")\\n {\\n   \\\"TableName\\\": \\\"serverlesspresso-config-table\\\"\\\n            ,\\n   \\\"Key\\\": {\\n      \\\"PK\\\": {\\n        \\\"S\\\":\\\"$PK\\\"\\n        }\\n\\\n            \\    }\\n}\\n\"\n        passthroughBehavior: \"when_no_templates\"\n        type: \"aws\"\n    options:\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n          content: {}\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'GET,OPTIONS'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            responseTemplates:\n              application/json: \"{}\\n\"\n        requestTemplates:\n          application/json: \"{\\n  \\\"statusCode\\\" : 200\\n}\\n\"\n        passthroughBehavior: \"when_no_match\"\n        type: \"mock\"\n  /admin-config:\n    get:\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Empty\"\n      security: [\n        {\n          \"ServerlespressoAuth\" : [\"openid\", \"aws.cognito.signin.user.admin\"]\n        }\n      ]\n      x-amazon-apigateway-integration:\n        credentials: \n          Fn::GetAtt: [ConfigRESTApiRole, Arn]\n        httpMethod: \"POST\"\n        uri: \n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'GET,OPTIONS'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            \n        requestTemplates:\n          application/json: \"#set($eventId = $input.params('eventId'))\\n#set ($PK\\\n            \\ = \\\"config-$eventId\\\")\\n {\\n   \\\"TableName\\\": \\\"serverlesspresso-config-table\\\"\\\n            ,\\n   \\\"Key\\\": {\\n      \\\"PK\\\": {\\n        \\\"S\\\":\\\"$PK\\\"\\n        }\\n\\\n            \\    }\\n}\\n\"\n        passthroughBehavior: \"when_no_templates\"\n        type: \"aws\"\n    options:\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n          content: {}\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'GET,OPTIONS'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            responseTemplates:\n              application/json: \"{}\\n\"\n        requestTemplates:\n          application/json: \"{\\n  \\\"statusCode\\\" : 200\\n}\\n\"\n        passthroughBehavior: \"when_no_match\"\n        type: \"mock\"\n  /store:\n    put:\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Empty\"\n      security: [\n        {\n          \"ServerlespressoAuth\" : [\"openid\", \"aws.cognito.signin.user.admin\"]\n        }\n      ]\n      x-amazon-apigateway-integration:\n        credentials: \n          Fn::GetAtt: [ConfigRESTApiRole, Arn]\n        httpMethod: \"POST\"\n        uri: \"arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem\"\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'GET,OPTIONS'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n        requestTemplates:\n          application/json: \"#set($state = $input.params('state'))\\n\\n#if( $state\\\n            \\ == 'open' )\\n  #set($stateBool = true)\\n#else\\n  #set($stateBool = false)\\n\\\n            #end\\n\\n#set($eventId = $input.params('eventId'))\\n#set ($PK = \\\"config-$eventId\\\"\\\n            )\\n\\n\\n\\n\\n\\n\\n{\\n    \\\"TableName\\\": \\\"serverlesspresso-config-table\\\"\\\n            ,\\n    \\\"Key\\\": {\\n      \\\"PK\\\": {\\n        \\\"S\\\":\\\"$PK\\\"\\n        }\\n\\\n            \\    },\\n    \\\"UpdateExpression\\\": \\\"set storeOpen = :openState\\\",\\n \\\n            \\   \\\"ExpressionAttributeValues\\\": {\\n    \\\":openState\\\": {\\n      \\\"\\\n            BOOL\\\": $stateBool\\n    }\\n    },\\n    \\\"ReturnValues\\\":\\\"ALL_NEW\\\"\\n}\"\n        passthroughBehavior: \"when_no_templates\"\n        type: \"aws\"\n    options:\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n          content: {}\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'PUT,OPTIONS'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            responseTemplates:\n              application/json: \"{}\\n\"\n        requestTemplates:\n          application/json: \"{\\n  \\\"statusCode\\\" : 200\\n}\\n\"\n        passthroughBehavior: \"when_no_match\"\n        type: \"mock\"\ncomponents:\n  schemas:\n    Empty:\n      title: \"Empty Schema\"\n      type: \"object\"\n  securitySchemes:\n    ServerlespressoAuth:\n      type: \"apiKey\"\n      name: \"Authorization\"\n      in: \"header\"\n      x-amazon-apigateway-authtype: \"cognito_user_pools\"\n      x-amazon-apigateway-authorizer:\n        providerARNs: \n        - Fn::Sub: ${UserPoolARNParameter}\n        type: \"cognito_user_pools\"\n",
			"canonicalURL": "/github.com/aws-samples/serverless-coffee@754b9d3abce743044b9d74719c72bd58c1332adb/-/blob/backends/2-config-service/RestAPIs/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/serverless-coffee/blob/754b9d3abce743044b9d74719c72bd58c1332adb/backends/2-config-service/RestAPIs/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/admin-config\": get: security: at backends/2-config-service/RestAPIs/api.yaml:97:36: list of scopes MUST be empty for \"type\" \"apiKey\""
}