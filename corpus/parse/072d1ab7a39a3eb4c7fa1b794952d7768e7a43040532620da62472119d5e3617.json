{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mainflux/mainflux"
		},
		"file": {
			"name": "bootstrap.yml",
			"size": 0,
			"path": "api/openapi/bootstrap.yml",
			"byteSize": 15771,
			"content": "openapi: 3.0.1\ninfo:\n  title: Mainflux Bootstrap service\n  description: HTTP API for managing platform things configuration.\n  version: \"1.0.0\"\n\npaths:\n  /things/configs:\n    post:\n      summary: Adds new config\n      description: |\n        Adds new config to the list of config owned by user identified using\n        the provided access token.\n      tags:\n        - configs\n      requestBody:\n        $ref: \"#/components/requestBodies/ConfigCreateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/ConfigCreateRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    get:\n      summary: Retrieves managed configs\n      description: |\n        Retrieves a list of managed configs. Due to performance concerns, data\n        is retrieved in subsets. The API configs must ensure that the entire\n        dataset is consumed either by making subsequent requests, or by\n        increasing the subset size of the initial request.\n      tags:\n        - configs\n      parameters:\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/State\"\n        - $ref: \"#/components/parameters/Name\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/ConfigListRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /things/configs/{configId}:\n    get:\n      summary: Retrieves config info (with channels).\n      tags:\n        - configs\n      parameters:\n        - $ref: \"#/components/parameters/ConfigId\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/ConfigRes\"\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Config does not exist.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    put:\n      summary: Updates config info\n      description: |\n        Update is performed by replacing the current resource data with values\n        provided in a request payload. Note that the owner, ID, external ID,\n        external key, Mainflux Thing ID and key cannot be changed.\n      tags:\n        - configs\n      parameters:\n        - $ref: \"#/components/parameters/ConfigId\"\n      requestBody:\n          $ref: \"#/components/requestBodies/ConfigUpdateReq\"\n      responses:\n        '200':\n          description: Config updated.\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Config does not exist.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    delete:\n      summary: Removes a Config\n      description: |\n        Removes a Config. In case of successful removal the service will ensure\n        that the removed config is disconnected from all of the Mainflux channels.\n      tags:\n        - configs\n      parameters:\n        - $ref: \"#/components/parameters/ConfigId\"\n      responses:\n        '204':\n          description: Config removed.\n        '400':\n          description: Failed due to malformed config ID.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /things/configs/certs/{configId}:\n    patch:\n      summary: Updates certs\n      description: |\n        Update is performed by replacing the current certificate data with values\n        provided in a request payload.\n      tags:\n        - configs\n      parameters:\n        - $ref: \"#/components/parameters/ConfigId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ConfigCertUpdateReq\"\n      responses:\n        '200':\n          description: Config updated.\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Config does not exist.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /things/configs/connections/{configId}:\n    put:\n      summary: Updates channels the thing is connected to\n      description: |\n        Update connections performs update of the channel list corresponding\n        Thing is connected to.\n      tags:\n        - configs\n      parameters:\n        - $ref: \"#/components/parameters/ConfigId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ConfigConnUpdateReq\"\n      responses:\n        '200':\n          description: Config updated.\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Config does not exist.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /things/bootstrap/{externalId}:\n    get:\n      summary: Retrieves configuration.\n      description: |\n        Retrieves a configuration with given external ID and external key.\n      tags:\n        - configs\n      security:\n        - bootstrapAuth: []\n      parameters:\n        - $ref: \"#/components/parameters/ExternalId\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/BootstrapConfigRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid external key provided.\n        '404':\n          description: Failed to retrieve corresponding config.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /things/bootstrap/secure/{externalId}:\n    get:\n      summary: Retrieves configuration.\n      description: |\n        Retrieves a configuration with given external ID and encrypted external key.\n      tags:\n        - configs\n      security:\n        - bootstrapEncAuth: []\n      parameters:\n        - $ref: \"#/components/parameters/ExternalId\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/BootstrapConfigRes\"\n        '404':\n          description: |\n            Failed to retrieve corresponding config.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /things/state/{configId}:\n    put:\n      summary: Updates Config state.\n      description: |\n        Updating state represents enabling/disabling Config, i.e. connecting\n        and disconnecting corresponding Mainflux Thing to the list of Channels.\n      tags:\n        - configs\n      parameters:\n        - $ref: \"#/components/parameters/ConfigId\"\n      requestBody:\n        $ref: '#/components/requestBodies/ConfigStateUpdateReq'\n      responses:\n        '204':\n          description: Config removed.\n        '400':\n          description: Failed due to malformed config's ID.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /health:\n    get:\n      summary: Retrieves service health check info.\n      tags:\n        - health\n      responses:\n        '200':\n          $ref: \"#/components/responses/HealthRes\"\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n\ncomponents:\n  schemas:\n    State:\n      type: integer\n      enum: [0, 1]\n    Config:\n      type: object\n      properties:\n        mainflux_id:\n          type: string\n          format: uuid\n          description: Corresponding Mainflux Thing ID.\n        mainflux_key:\n          type: string\n          format: uuid\n          description: Corresponding Mainflux Thing key.\n        mainflux_channels:\n          type: array\n          minItems: 0\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                format: uuid\n                description: Channel unique identifier.\n              name:\n                type: string\n                description: Name of the Channel.\n              metadata:\n                type: object\n                description: Custom metadata related to the Channel.\n        external_id:\n          type: string\n          description: External ID (MAC address or some unique identifier).\n        external_key:\n          type: string\n          description: External key.\n        content:\n          type: string\n          description: Free-form custom configuration.\n        state:\n          $ref: \"#/components/schemas/State\"\n      required:\n        - external_id\n        - external_key\n    ConfigList:\n      type: object\n      properties:\n        total:\n          type: integer\n          description: Total number of results.\n          minimum: 0\n        offset:\n          type: integer\n          description: Number of items to skip during retrieval.\n          minimum: 0\n          default: 0\n        limit:\n          type: integer\n          description: Size of the subset to retrieve.\n          maximum: 100\n          default: 10\n        configs:\n          type: array\n          minItems: 0\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/Config\"\n      required:\n        - configs\n    BootstrapConfig:\n      type: object\n      properties:\n        mainflux_id:\n          type: string\n          format: uuid\n          description: Corresponding Mainflux Thing ID.\n        mainflux_key:\n          type: string\n          format: uuid\n          description: Corresponding Mainflux Thing key.\n        mainflux_channels:\n          type: array\n          minItems: 0\n          items:\n            type: string\n        content:\n          type: string\n          description: Free-form custom configuration.\n        client_cert:\n          type: string\n          description: Client certificate.\n        client_key:\n          type: string\n          description: Key for the client_cert.\n        ca_cert:\n          type: string\n          description: Issuing CA certificate.\n      required:\n        - mainflux_id\n        - mainflux_key\n        - mainflux_channels\n        - content\n\n  parameters:\n    ConfigId:\n      name: configId\n      description: Unique Config identifier. It's the ID of the corresponding Thing.\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n    ExternalId:\n      name: externalId\n      description: Unique Config identifier provided by external entity.\n      in: path\n      schema:\n        type: string\n      required: true\n    Limit:\n      name: limit\n      description: Size of the subset to retrieve.\n      in: query\n      schema:\n        type: integer\n        default: 10\n        maximum: 100\n        minimum: 1\n      required: false\n    Offset:\n      name: offset\n      description: Number of items to skip during retrieval.\n      in: query\n      schema:\n        type: integer\n        default: 0\n        minimum: 0\n      required: false\n    State:\n      name: state\n      description: A state of items\n      in: query\n      schema:\n        $ref: \"#/components/schemas/State\"\n      required: false\n    Name:\n      name: name\n      description: Name of the config. Search by name is partial-match and case-insensitive.\n      in: query\n      schema:\n        type: string\n      required: false\n\n  requestBodies:\n    ConfigCreateReq:\n      description: JSON-formatted document describing the new config.\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              external_id:\n                type: string\n                description: External ID (MAC address or some unique identifier).\n              external_key:\n                type: string\n                description: External key.\n              thing_id:\n                type: string\n                description: ID of the corresponding Mainflux Thing.\n              channels:\n                type: array\n                minItems: 0\n                items:\n                  type: string\n              content:\n                type: string\n            required:\n              - external_id\n              - external_key\n    ConfigUpdateReq:\n      description: JSON-formatted document describing the updated thing.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              content:\n                type: string\n              name:\n                type: string\n            required:\n              - content\n              - name\n    ConfigCertUpdateReq:\n      description: JSON-formatted document describing the updated thing.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              client_cert:\n                type: string\n              client_key:\n                type: string\n              ca_cert:\n                type: string\n    ConfigConnUpdateReq:\n      description: Array if IDs the thing is be connected to.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              channels:\n                type: array\n                minItems: 0\n                items:\n                  type: string\n    ConfigStateUpdateReq:\n      description: Update the state of the Config.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              state:\n                $ref: \"#/components/schemas/State\"\n\n  responses:\n    ConfigCreateRes:\n     description: Config registered.\n     headers:\n       Location:\n         content:\n           text/plain:\n             schema:\n               type: string\n               description: Created configuration's relative URL (i.e. /things/configs/{configId}).\n    ConfigListRes:\n      description: Data retrieved. Configs from this list don't contain channels.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ConfigList\"\n    ConfigRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Config\"\n    BootstrapConfigRes:\n      description: |\n          Data retrieved. If secure, a response is encrypted using\n          the secret key, so the response is in the binary form.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/BootstrapConfig\"\n    ServiceError:\n      description: Unexpected server-side error occurred.\n    HealthRes:\n      description: Service Health Check.\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas/HealthInfo.yml\"\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: |\n        * Users access: \"Authorization: Bearer \u003cuser_token\u003e\"\n\n    bootstrapAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: string\n      description: |\n        * Things access: \"Authorization: Thing \u003cexternal_key\u003e\"\n\n    bootstrapEncAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: aes-sha256-uuid\n      description: |\n        * Things access: \"Authorization: Thing \u003cexternal_enc_key\u003e\"\n        Hex-encoded configuration external key encrypted using\n        the AES algorithm and SHA256 sum of the external key\n        itself as an encryption key.\n\nsecurity:\n  - bearerAuth: []\n",
			"canonicalURL": "/github.com/mainflux/mainflux@6bd745b658ff1e04c40394a732c731fa99882c32/-/blob/api/openapi/bootstrap.yml",
			"externalURLs": [
				{
					"url": "https://github.com/mainflux/mainflux/blob/6bd745b658ff1e04c40394a732c731fa99882c32/api/openapi/bootstrap.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"HealthRes\": content: application/json: schema: at 1:3367: parse schema: resolve \"./schemas/HealthInfo.yml\": external \"./schemas/HealthInfo.yml\": get: file: local file reference is not allowed"
}