{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/eeditiones/roaster"
		},
		"file": {
			"name": "api.json",
			"size": 0,
			"path": "test/app/api.json",
			"byteSize": 25361,
			"content": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n        \"version\": \"1.1.0\",\n        \"title\": \"Roasted API\",\n        \"description\": \"The API defined by the Roaster test application\"\n    },\n    \"servers\": [\n        {\n            \"url\": \"/exist/apps/roasted\",\n            \"description\": \"Relative URL using the current host and port\"\n        }\n    ],\n    \"tags\": [\n\t\t{\n\t\t\t\"name\": \"path\",\n\t\t\t\"description\": \"Route has special characters or parameters in path\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"query\",\n\t\t\t\"description\": \"Route specifies query parameters\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"body\",\n\t\t\t\"description\": \"Route specifies expected body\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"header\",\n\t\t\t\"description\": \"Route specifies header parameters\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"files\",\n\t\t\t\"description\": \"File up- and downloads of various kinds\"\n\t\t},\n        {\n            \"name\": \"errors\",\n            \"description\": \"Routes with custom error handling\"\n        },\n        {\n\t\t\t\"name\": \"auth\",\n\t\t\t\"description\": \"Authenticate, login or logout database user\"\n\t\t}\n\t],\n    \"security\": [\n        {\n            \"cookieAuth\": []\n        },\n        {\n            \"basicAuth\": []\n        }\n    ],\n    \"components\": {\n        \"securitySchemes\": {\n            \"basicAuth\": {\n                \"type\": \"http\",\n                \"scheme\": \"basic\"\n            },\n            \"cookieAuth\": {\n                \"type\": \"apiKey\",\n                \"name\": \"roasted.com.login\",\n                \"in\": \"cookie\"\n            }\n        }\n    },\n    \"paths\": {\n        \"/logout\": {\n            \"get\": {\n                \"summary\": \"User Logout\",\n                \"description\": \"End session of the current user\",\n                \"operationId\": \"auth:logout\",\n                \"tags\": [\"auth\", \"query\"],\n                \"parameters\": [\n                    {\n                        \"name\": \"logout\",\n                        \"in\": \"query\",\n                        \"description\": \"Set to some value to log out the current user\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"success\": { \"type\": \"boolean\" }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"301\": {\n                        \"description\": \"Redirect with the logout parameter set.\",\n                        \"content\": {\n                            \"text/plain\": {\n                                \"schema\": {\n                                    \"type\": \"string\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": { \"description\": \"unauthorized\" }\n                }\n            }\n        },\n        \"/login\": {\n            \"post\": {\n                \"summary\": \"User Login\",\n                \"description\": \"Start an authenticated session for the given user\",\n                \"tags\": [\"auth\", \"body\"],\n                \"operationId\": \"auth:login\",\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"multipart/form-data\": {\n                            \"schema\": {\n                                \"type\": \"object\",\n                                \"required\": [ \"user\" ],\n                                \"properties\": {\n                                    \"user\": {\n                                        \"description\": \"Name of the user\",\n                                        \"type\": \"string\"\n                                    },\n                                    \"password\": {\n                                        \"type\": \"string\",\n                                        \"format\": \"password\"\n                                    }\n                                }\n                            }\n                        },\n                        \"application/x-www-form-urlencoded\": {\n                            \"schema\": {\n                                \"type\": \"object\",\n                                \"required\": [ \"user\" ],\n                                \"properties\": {\n                                    \"user\": {\n                                        \"description\": \"Name of the user\",\n                                        \"type\": \"string\"\n                                    },\n                                    \"password\": {\n                                        \"type\": \"string\",\n                                        \"format\": \"password\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"user\": { \"type\": \"string\" },\n                                        \"groups\": {\n                                            \"type\": \"array\",\n                                            \"items\": { \"type\": \"string\" }\n                                        },\n                                        \"dba\": { \"type\": \"boolean\" },\n                                        \"domain\": { \"type\": \"string\" }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Wrong user or password\"\n                    }\n                },\n                \"security\": [{ \"cookieAuth\": [] }]\n            }\n        },\n        \"/api/parameters\": {\n            \"get\": {\n                \"description\": \"Parameters in URL and header (GET)\",\n                \"summary\": \"Test parameters of varying types passed in URL and header\",\n                \"operationId\": \"rutil:debug\",\n                \"tags\": [\"query\", \"header\"],\n                \"parameters\": [\n                    {\n                        \"name\": \"num\",\n                        \"in\": \"query\",\n                        \"schema\":{\n                            \"type\": \"number\"\n                        }\n                    },\n                    {\n                        \"name\": \"int\",\n                        \"in\": \"query\",\n                        \"schema\":{\n                            \"type\": \"integer\"\n                        }\n                    },\n                    {\n                        \"name\": \"bool\",\n                        \"in\": \"query\",\n                        \"schema\":{\n                            \"type\": \"boolean\"\n                        }\n                    },\n                    {\n                        \"name\": \"string\",\n                        \"in\": \"query\",\n                        \"schema\":{\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"defaultParam\",\n                        \"in\": \"query\",\n                        \"schema\":{\n                            \"type\": \"string\",\n                            \"default\": \"abcdefg\"\n                        }\n                    },\n                    {\n                        \"name\": \"X-start\",\n                        \"in\": \"header\",\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\":{\n                        \"description\": \"JSON dump of request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\":{\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"description\": \"Parameters in URL and header (POST)\",\n                \"summary\": \"Test parameters of varying types passed in URL and header\",\n                \"operationId\": \"rutil:debug\",\n                \"tags\": [\"query\", \"header\"],\n                \"parameters\": [\n                    {\n                        \"name\": \"num\",\n                        \"in\": \"query\",\n                        \"schema\":{\n                            \"type\": \"number\"\n                        }\n                    },\n                    {\n                        \"name\": \"int\",\n                        \"in\": \"query\",\n                        \"schema\":{\n                            \"type\": \"integer\"\n                        }\n                    },\n                    {\n                        \"name\": \"bool\",\n                        \"in\": \"query\",\n                        \"schema\":{\n                            \"type\": \"boolean\"\n                        }\n                    },\n                    {\n                        \"name\": \"string\",\n                        \"in\": \"query\",\n                        \"schema\":{\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"defaultParam\",\n                        \"in\": \"query\",\n                        \"schema\":{\n                            \"type\": \"string\",\n                            \"default\": \"abcdefg\"\n                        }\n                    },\n                    {\n                        \"name\": \"X-start\",\n                        \"in\": \"header\",\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\":{\n                        \"description\": \"JSON dump of request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\":{\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/dates\": {\n            \"get\": {\n                \"summary\": \"Dates in querystring\",\n                \"operationId\": \"api:date\",\n                \"tags\": [\"query\"],\n                \"parameters\": [\n                    {\n                        \"name\": \"date\",\n                        \"in\": \"query\",\n                        \"schema\":{\n                            \"type\": \"string\",\n                            \"format\": \"date\"\n                        }\n                    },\n                    {\n                        \"name\": \"dateTime\",\n                        \"in\": \"query\",\n                        \"schema\":{\n                            \"type\": \"string\",\n                            \"format\": \"date-time\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\":{\n                        \"description\": \"JSON dump of request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\":{\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/paths/{path}\":{\n            \"get\": {\n                \"summary\": \"Parameter specified in last path component\",\n                \"operationId\": \"api:get-uploaded-data\",\n                \"tags\": [\"path\", \"files\"],\n                \"parameters\": [\n                    {\n                        \"name\": \"path\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\":{\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\":{\n                        \"description\": \"file contents, if found\",\n                        \"content\": {\n                            \"application/octet-stream\": {\n                                \"schema\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"binary\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"File not found\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"string\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"summary\": \"Post body with several content-types\",\n                \"x-constraints\": {\n                    \"user\": \"admin\" \n                },\n                \"operationId\": \"api:upload-data\",\n                \"tags\": [\"path\", \"body\", \"files\", \"auth\"],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"*/*\": {\n                            \"schema\": {\n                                \"type\": \"string\",\n                                \"format\": \"binary\"\n                            }\n                        }\n                    }\n                },\n                \"parameters\": [\n                    {\n                        \"name\": \"path\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\":{\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Returns uploaded string\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"string\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Content was invalid\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"string\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/$op-er+ation*!\":{\n            \"get\": {\n                \"summary\": \"Get path using a $ character\",\n                \"operationId\": \"rutil:debug\",\n                \"tags\": [\"path\"],\n                \"responses\": {\n                    \"200\":{\n                        \"description\": \"JSON dump of request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\":{\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"summary\": \"Post to path using a $ character\",\n                \"operationId\": \"rutil:debug\",\n                \"tags\": [\"path\"],\n                \"responses\": {\n                    \"200\":{\n                        \"description\": \"JSON dump of request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\":{\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/errors\": {\n            \"get\": {\n                \"summary\": \"Reports an error via fn:error function\",\n                \"operationId\": \"api:error-triggered\",\n                \"tags\": [\"errors\"],\n                \"responses\": {\n                    \"404\": {\n                        \"description\": \"Not found\",\n                        \"content\": {\n                            \"application/json\":{\n                                \"schema\": {\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"summary\": \"Reports a dynamic XQuery error\",\n                \"operationId\": \"api:error-dynamic\",\n                \"tags\": [\"errors\"],\n                \"responses\": {\n                    \"500\": {\n                        \"description\": \"XQuery error\",\n                        \"content\": {\n                            \"application/json\":{\n                                \"schema\": {\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"delete\": {\n                \"summary\": \"Reports an explicit error\",\n                \"operationId\": \"api:error-explicit\",\n                \"tags\": [\"errors\"],\n                \"responses\": {\n                    \"500\": {\n                        \"description\": \"XQuery error\",\n                        \"content\": {\n                            \"application/xml\": {\n                                \"schema\": {\n                                    \"type\": \"string\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/avatar\": {\n            \"get\": {\n                \"summary\": \"Retrieve avatar as SVG\",\n                \"operationId\": \"api:avatar\",\n                \"tags\": [\"files\"],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Get file with a specific mime type\",\n                        \"content\": {\n                            \"image/svg+xml\":{\n                                \"schema\": {\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/errors/handle\": {\n            \"get\": {\n                \"summary\": \"Test error handler\",\n                \"operationId\": \"api:error-dynamic\",\n                \"x-error-handler\": \"api:handle-error\",\n                \"tags\": [\"errors\"],\n                \"responses\": {\n                    \"500\": {\n                        \"description\": \"XQuery error\",\n                        \"content\": {\n                            \"text/html\": {\n                                \"schema\": {\n                                    \"type\": \"string\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/upload/single/{path}\": {\n            \"post\": {\n                \"summary\": \"Upload a single file.\",\n                \"description\": \"In this example, the file path is part of the URL.\",\n                \"operationId\": \"upload:single\",\n                \"tags\": [\"path\", \"body\", \"files\"],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"multipart/form-data\": {\n                            \"schema\": {\n                                \"type\": \"object\",\n                                \"required\": [\"file\"],\n                                \"properties\": {\n                                    \"file\": {\n                                        \"type\": \"string\",\n                                        \"format\": \"binary\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"parameters\": [\n                    {\n                        \"name\": \"path\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\":{ \"type\": \"string\" }\n                    }\n                ],\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Created uploaded file\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": { \"type\": \"string\" }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Content was invalid\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": { \"type\": \"string\" }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/upload/batch\": {\n            \"post\": {\n                \"summary\": \"Upload a batch of files\",\n                \"operationId\": \"upload:batch\",\n                \"tags\": [\"body\", \"files\"],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"multipart/form-data\": {\n                            \"schema\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"file\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"binary\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"parameters\": [],\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Created uploaded file\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"uploaded\": { \"type\": \"array\" }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Content was invalid\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": { \"type\": \"string\" }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/upload/base64\": {\n            \"post\": {\n                \"summary\": \"Upload a base64-encoded file.\",\n                \"operationId\": \"upload:base64\",\n                \"tags\": [\"body\", \"files\"],\n                \"requestBody\": {\n                    \"content\": {\n                        \"multipart/form-data\": {\n                            \"schema\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"file\": {\n                                        \"type\": \"string\",\n                                        \"format\": \"binary\"\n                                    },\n                                    \"data\": {\n                                        \"type\": \"string\",\n                                        \"format\": \"base64\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"parameters\": [],\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Created uploaded file\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": { \"type\": \"string\" }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Content was invalid\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": { \"type\": \"string\" }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n",
			"canonicalURL": "/github.com/eeditiones/roaster@481d0d0a08b6348e496e963e4f5ef27c1815e9d9/-/blob/test/app/api.json",
			"externalURLs": [
				{
					"url": "https://github.com/eeditiones/roaster/blob/481d0d0a08b6348e496e963e4f5ef27c1815e9d9/test/app/api.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/api/$op-er+ation*!\": post: at test/app/api.json:456:32: duplicate operationId: \"rutil:debug\""
}