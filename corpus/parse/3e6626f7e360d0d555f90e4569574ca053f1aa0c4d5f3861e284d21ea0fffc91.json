{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Himenon/openapi-typescript-code-generator"
		},
		"file": {
			"name": "index.yml",
			"size": 0,
			"path": "test/ref.access/index.yml",
			"byteSize": 2755,
			"content": "openapi: 3.1.0\ninfo:\n  version: 1.0.0\n  title: ref.access\n  description: Library test schema\n  license:\n    name: MIT\n\nservers:\n  - url: \"http://dev.ref.access/\"\n    description: Development Environment\n  - url: \"https://ref.access/\"\n    description: Production Environment\n\ntags:\n  - name: test\n\ncomponents:\n  schemas:\n    Book:\n      type: object\n      required:\n        - metadata\n      properties:\n        author:\n          type: object\n          properties:\n            name:\n              type: string\n            age:\n              type: string\n        publisher:\n          type: object\n          properties:\n            name:\n              type: String\n            address:\n              type: string\n        metadata:\n          type: object\n          required:\n            - description\n          properties:\n            description:\n              type: string\n    Author:\n      $ref: \"#/components/schemas/Book/properties/author\"\n    Publisher:\n      $ref: \"#/components/schemas/Book/properties/publisher\"\n\npaths:\n  /get/book/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Book ID\n        schema:\n          type: string\n          format: uuid\n    get:\n      operationId: getBook\n      responses:\n        200:\n          description: Get Books\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Book\"\n  /get/book/{id}/description:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Book ID\n        schema:\n          type: string\n          format: uuid\n    get:\n      operationId: getDescription\n      responses:\n        200:\n          description: Get Book Description\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Book/properties/metadata/properties/description\"\n\n  /get/author/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Author Id\n        schema:\n          type: string\n          format: uuid\n    get:\n      operationId: getAuthor\n      responses:\n        200:\n          description: Get Author\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Book/properties/author\"\n  /get/publisher/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Publisher ID\n        schema:\n          type: string\n          format: uuid\n    get:\n      operationId: getPublisher\n      responses:\n        200:\n          description: Get Publisher\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Publisher\"\n"
		}
	},
	"Error": "parse: parse spec: paths: /get/publisher/{id}: get: operation \"getPublisher\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/Publisher\": parse schema: reference \"#/components/schemas/Book/properties/publisher\": resolve reference \"#/components/schemas/Book/properties/publisher\": schema not found"
}