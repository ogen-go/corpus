{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bcgov/queue-management"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "documentation/open-api/swagger.yaml",
			"byteSize": 17510,
			"content": "openapi: \"3.0.0\"\ninfo:\n  description: Room Bookings API and model definitions.\n  version: 1.0.0\n  title: Room Bookings\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n- url: http://localhost:5000/api/v1\ntags:\n- name: Exams\n  description: Everything about exams\n- name: Bookings\n  description: Everything about bookings\n- name: Invigilators\n  description: Everything about invigilators\n- name: Rooms\n  description: Everything about rooms\n- name: Appointments\n  description: Everything about appointments\n- name: ExamTypes\n  description: Everything about exam types\npaths:\n  /exams:\n    get:\n      tags:\n      - Exams\n      summary: Get a list of all exams\n      operationId: getExams\n      responses:\n        '200':\n          description: An array of Exams\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Exam\"\n    post:\n      tags:\n      - Exams\n      summary: Create a new exam\n      operationId: createExam\n      requestBody:\n        description: Exam to add to the database\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Exam'\n      responses:\n        '201':\n          description: Created\n          headers:\n            Location:\n              schema:\n                type: string\n                example: \"/exams/1\"\n              description: The URL of the created resource\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Exam\"\n  /exams/${id}:\n    get:\n      tags:\n      - Exams\n      summary: Get an exam by ID\n      operationId: getExamById\n      parameters:\n      - name: id\n        in: path\n        description: ID of exam to fetch\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '200':\n          description: The exam\n          content:\n            application/json:    \n              schema:\n                $ref: \"#/components/schemas/Exam\"\n    put:\n      tags:\n      - Exams\n      summary: Update an exam by ID\n      operationId: updateExamById\n      parameters:\n      - name: id\n        in: path\n        description: ID of exam to update\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '200':\n          description: The exam having been updated\n          content:\n            application/json:    \n              schema:\n                $ref: \"#/components/schemas/Exam\"\n    delete:\n      tags:\n      - Exams\n      summary: Get an exam by ID\n      operationId: deleteExamById\n      parameters:\n      - name: id\n        in: path\n        description: ID of exam to delete\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '204':\n          description: No Content\n  /exams/export:\n    get:\n      tags:\n        - Exams\n      summary: Get a list of all exams in CSV form\n      operationId: getExamsExport\n      responses:\n        '200':\n          description: An array of Exams\n          content:\n            application/json:\n              schema:\n                type: csv\n                items:\n                  $ref: \"#/components/schemas/Exam\"\n  /exams_types:\n    get:\n      tags:\n        - ExamTypes\n      summary: Get a list of all exam types\n      operationId: getExamTypes\n      responses:\n        '200':\n          description: An array of Exam Types\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ExamType\"\n  /bookings:\n    get:\n      tags:\n      - Bookings\n      summary: Get a list of all bookings\n      operationId: getBookings\n      responses:\n        '200':\n          description: An array of Bookings\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Booking\"\n    post:\n      tags:\n      - Bookings\n      summary: Create a new booking\n      operationId: createBooking\n      requestBody:\n        description: Booking to add to the database\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Booking'\n      responses:\n        '201':\n          description: Created\n          headers:\n            Location:\n              schema:\n                type: string\n                example: \"/bookings/1\"\n              description: The URL of the created resource\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Booking\"\n  /bookings/${id}:\n    get:\n      tags:\n      - Bookings\n      summary: Get an booking by ID\n      operationId: getBookingById\n      parameters:\n      - name: id\n        in: path\n        description: ID of booking to fetch\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '200':\n          description: The booking\n          content:\n            application/json:    \n              schema:\n                $ref: \"#/components/schemas/Booking\"\n    put:\n      tags:\n      - Bookings\n      summary: Update an booking by ID\n      operationId: updateBookingById\n      parameters:\n      - name: id\n        in: path\n        description: ID of booking to update\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '200':\n          description: The booking having been updated\n          content:\n            application/json:    \n              schema:\n                $ref: \"#/components/schemas/Booking\"\n    delete:\n      tags:\n      - Bookings\n      summary: Get an booking by ID\n      operationId: deleteBookingById\n      parameters:\n      - name: id\n        in: path\n        description: ID of booking to delete\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '204':\n          description: No Content\n  /invigilators:\n    get:\n      tags:\n      - Invigilators\n      summary: Get a list of all invigilators\n      operationId: getInvigilators\n      responses:\n        '200':\n          description: An array of Invigilators\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Invigilator\"\n  /rooms:\n    get:\n      tags:\n      - Rooms\n      summary: Get a list of all rooms\n      operationId: getRooms\n      responses:\n        '200':\n          description: An array of Rooms\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Room\"\n                \n  /appointments/:\n    get:\n      tags:\n        - Appointments\n      summary: Get a list of all appointments\n      operationId: getAppointments\n      responses:\n        '200':\n          description: An array of Appointments\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Appointment\"\n    post:\n      tags:\n        - Appointments\n      summary: Create a new appointment\n      operationId: createAppointment\n      requestBody:\n        description: Appointment to add to the database\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Appointment'\n      responses:\n        '201':\n          description: Created\n          headers:\n            Location:\n              schema:\n                type: string\n                example: \"/appointment/1/\"\n              description: The URL of the created resource\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Appointment\"\n  /appointment/${id}:\n    get:\n      tags:\n        - Appointments\n      summary: Get an appointment by ID\n      operationId: getAppointmentById\n      parameters:\n        - name: id\n          in: path\n          description: ID of appointment to fetch\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: The appointment\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Appointment\"\n    put:\n      tags:\n        - Appointments\n      summary: Update an appointment by ID\n      operationId: updateAppointmentById\n      parameters:\n        - name: id\n          in: path\n          description: ID of appointment to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: The appointment having been updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Appointment\"\n    delete:\n      tags:\n        - Appointments\n      summary: Get an appointment by ID\n      operationId: deleteAppointmentById\n      parameters:\n        - name: id\n          in: path\n          description: ID of appointment to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '204':\n          description: No Content\ncomponents:\n  schemas:\n    Booking:\n      type: object\n      properties:\n        booking_id:\n          type: integer\n          nullable: false\n          example: 1\n        room_id:\n          type: integer\n          nullable: true\n          example: 1\n        invigilator_id:\n          type: integer\n          nullable: true\n          example: 1\n        office_id:\n          type: integer\n          nullable: true\n          example: 1\n        start_time:\n          type: string\n          nullable: false\n          format: date-time\n        end_time:\n          type: string\n          nullable: false\n          format: date-time\n        fees:\n          type: string\n          nullable: true\n          example: false\n        booking_name:\n          type: string\n          nullable: true\n          example: Monthly Office Check In\n        sbc_staff_invigilated:\n          type: integer\n          nullable: false\n          example: 0\n        booking_contact_information:\n          type: string\n          nullable: true\n          example: \"555-555-5555\"\n        room:\n          readOnly: true\n          allOf:\n          - $ref: \"#/components/schemas/Room\"\n        invigilator:\n          allOf:\n            - $ref: \"#/components/schemas/Invigilator\"\n          readOnly: true\n        office:\n          allOf:\n          - $ref: \"#/components/schemas/Office\"\n    Exam:\n      type: object\n      properties:\n        exam_id:\n          type: integer\n          nullable: false\n          example: 1\n        booking_id:\n          type: integer\n          nullable: true\n          example: 1\n        exam_type_id:\n          type: integer\n          nullable: false\n          example: 1\n        office_id:\n          type: integer\n          nullable: false\n          example: 1\n        event_id:\n          type: string\n          nullable: false\n          example: 123456789\n        exam_name:\n          type: string\n          nullable: false\n        examinee_name:\n          nullable: true\n          type: string\n        expiry_date:\n          type: string\n          format: date-time\n          nullable: false\n        notes:\n          type: string\n          nullable: true\n          example: Helpful and specific notes about student/office\n        exam_received:\n          type: boolean\n          nullable: false\n          example: false\n        session_number:\n          type: integer\n          nullable: true\n          example: 1\n        number_of_students:\n          type: integer\n          nullable: true\n          example: 12\n        exam_method:\n          type: string\n          nullable: false\n          example: \"Written\"\n        deleted_date:\n          type: string\n          format: date-time\n          nullable: true\n        exam_received_date:\n          type: string\n          format: date-time\n          nullable: true\n        exams_returned_date:\n          type: datetime\n          nullable: true\n        exam_returned_tracking_number:\n          type: string\n          nullable: true\n        exam_written_ind:\n          type: integer\n          nullable: false\n          example: 0\n        offsite_location:\n          type: string\n          nullable: true\n        booking:\n          allOf:\n          - $ref: \"#/components/schemas/Booking\"\n          readOnly: true\n        exam_type:\n          allOf:\n          - $ref: \"#/components/schemas/ExamType\"\n          readOnly: true\n        office:\n          allOf:\n          - $ref: \"#/components/schemas/Office\"\n          readOnly: true\n    ExamType:\n      type: object\n      properties:\n        exam_type_id:\n          type: integer\n          nullable: false\n          example: 1\n        exam_type_name:\n          type: string\n          nullable: false\n          example: ITA Exam Type\n        exam_color:\n          type: string\n          nullable: false\n          example: red\n        number_of_hours:\n          type: int\n          nullable: false\n          example: 3\n        method_type:\n          type: string\n          nullable: false\n        ita_ind:\n          type: integer\n          nullable: false\n          example: 0\n        group_exam_ind:\n          type: number\n          nullable: false\n        exam:\n          allOf:\n          - $ref: \"#/components/schemas/Exam\"\n    Invigilator:\n      type: object\n      properties:\n        invigilator_id:\n          type: integer\n          nullable: false\n          example: 1\n        office_id:\n          type: integer\n          nullable: false\n          example: 1\n        invigilator_name:\n          type: string\n          nullable: false\n          example: Homer Simpson\n        invigilator_notes:\n          type: string\n          nullable: true\n        contact_phone:\n          type: string\n          nullable: true\n          format: phone\n        contact_email:\n          type: string\n          nullable: true\n          format: email\n        contract_number:\n          type: string\n          nullable: false\n          example: c-00001\n        contract_expiry_date:\n          type: string\n          nullable: false\n          format: date\n        office:\n          $ref: \"#/components/schemas/Office\"\n        exams:\n          $ref: \"#/components/schemas/Exam\"\n    Office:\n      type: object\n      properties:\n        office_id:\n          type: integer\n          example: 1\n          nullable: false\n        office_name:\n          type: string\n          example: Vernon\n          nullable: false\n        office_number:\n          type: integer\n          example: 1\n          nullable: false\n        sb_id:\n          type: integer\n          example: 1\n          nullable: false\n        deleted:\n          type: string\n          format: datetime\n          nullable: true\n        exams_enabled_ind:\n          type: integer\n          nullable: false\n          example: 0\n        appointments_enabled_ind:\n          type: integer\n          nullable: false\n          example: 0\n        timezone_id:\n          type: integer\n          nullable: false\n          example: 1\n        timezone:\n          allOf:\n            - $ref: \"#/components/schemas/Timezone\"\n    Room:\n      type: object\n      properties:\n        room_id:\n          type: integer\n          nullable: false\n          example: 1\n        office_id:\n          type: integer\n          nullable: false\n          example: 1\n        room_name:\n          type: string\n          nullable: false\n          example: \"Boardroom 1\"\n        capacity:\n          type: integer\n          nullable: false\n          example: 12\n        color:\n          type: string\n          nullable: false\n          example: red\n        office:\n          $ref: \"#/components/schemas/Office\"\n        booking:\n          $ref: \"#/components/schemas/Booking\"\n    Appointment:\n      type: object\n      properties:\n        appointment_id:\n          type: integer\n          nullable: false\n          example: 1\n        office_id:\n          type: integer\n          nullable: false\n          example: 1\n        start_time:\n          type: datetime\n          nullable: false\n          example: \"2019-03-28 09:00:00\"\n        end time:\n          type: datetime\n          nullable: false\n          example: \"2019-03-28 09:15:00\"\n        category:\n          type: string\n          nullable: false\n          example: \"Exam\"\n        checked_in_time:\n          type: datetime\n          nullable: false\n          example: \"2019-03-28 09:03:00\"\n        comments:\n          type: string\n          nullable: false\n          example: \"Wants to set up written exam booking.\"\n    Timezone:\n      type: object\n      properties:\n        timezone_id:\n          type: integer\n          nullable: false\n          example: 1\n        timezone_name:\n          type: string\n          nullable: false\n          example: \"America/Vancouver\"\n",
			"canonicalURL": "/github.com/bcgov/queue-management@43c5c634bba2dff5d07f46392bd2b8ab827f164b/-/blob/documentation/open-api/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/bcgov/queue-management/blob/43c5c634bba2dff5d07f46392bd2b8ab827f164b/documentation/open-api/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"ExamType\": parse schema: property \"exam\": parse schema: parse schema: parse schema: property \"exams_returned_date\": parse schema: at 1:2535: unexpected schema type: \"datetime\""
}