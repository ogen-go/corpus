{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tatumio/tatum-blockchain-connector"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "kcs-connector/module/openapi.yaml",
			"byteSize": 55662,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://api-eu1.tatum.io'\ninfo:\n  version: 1.0.1\n  title: Tatum Kcs (KCS) API\ntags:\n  - description: |\n      \u003cp\u003eKcs (KCS) is an Ethereum EVM 100% compatible blockchain, and is very good for decentralized application (Dapp) development within many possible verticals including DeFi, NFT, Gaming, and many others.\u003cbr/\u003e\n      Tatum supports 2 chains:\n      \u003cul\u003e\u003cli\u003eMainnet - a regular live chain\n      \u003cli\u003eMumbai Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from\n      a faucet, e.g. \u003ca target=\"_blank\" href=\"https://faucet-testnet.kcc.network/\"\u003ehttps://faucet-testnet.kcc.network/\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/p\u003e\n    name: Blockchain / Kcs (KCS)\npaths:\n  /v3/kcs/wallet:\n    get:\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eTatum supports BIP44 HD wallets. It is very convenient and secure, since it can generate 2^31 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 24 special words in defined order and can restore access to all generated addresses and private keys.\u003cbr/\u003eEach address is identified by 3 main values:\u003cul\u003e\u003cli\u003ePrivate Key - your secret value, which should never be revealed\u003c/li\u003e\u003cli\u003ePublic Key - public address to be published\u003c/li\u003e\u003cli\u003eDerivation index - index of generated address\u003c/li\u003e\u003c/ul\u003e\u003c/p\u003e\u003cp\u003eTatum follows BIP44 specification and generates for Kcs wallet with derivation path m'/44'/966'/0'/0. More about BIP44 HD wallets can be found here - \u003ca target=\"_blank\" href=\"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\"\u003ehttps://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\u003c/a\u003e.\n        Generate BIP44 compatible Kcs wallet.\u003c/p\u003e\n      operationId: KcsGenerateWallet\n      parameters:\n        - description: \"Mnemonic to use for generation of extended public and private keys.\"\n          in: query\n          name: mnemonic\n          required: false\n          schema:\n            type: string\n            maxLength: 500\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Wallet\"\n          description: OK\n        400: \u0026API400\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error400\"\n          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.\n        401: \u0026API401\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error401NotActive\"\n                  - $ref: \"#/components/schemas/Error401Invalid\"\n          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.\n        500: \u0026API500\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error500\"\n          description: Internal server error. There was an error on the server during the processing of the request.\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Generate Kcs wallet\n      tags:\n        - Blockchain / Kcs (KCS)\n  /v3/kcs/address/{xpub}/{index}:\n    get:\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eGenerate Kcs account deposit address from Extended public key. Deposit address is generated for the specific index - each extended public key can generate\n        up to 2^31 addresses starting from index 0 until 2^31.\u003c/p\u003e\n      operationId: KcsGenerateAddress\n      parameters:\n        - description: \"Extended public key of wallet.\"\n          in: path\n          name: xpub\n          required: true\n          schema:\n            type: string\n            example: xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid\n        - description: \"Derivation index of desired address to be generated.\"\n          in: path\n          name: index\n          example: 1\n          required: true\n          schema:\n            type: number\n            example: 0\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  address:\n                    type: string\n                    description: Kcs address\n                    example: \"0xa7673161CbfE0116A4De9E341f8465940c2211d4\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Generate Kcs account address from Extended public key\n      tags:\n        - Blockchain / Kcs (KCS)\n  /v3/kcs/wallet/priv:\n    post:\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eGenerate private key of address from mnemonic for given derivation path index. Private key is generated for the specific index - each mnemonic\n        can generate up to 2^31 private keys starting from index 0 until 2^31.\u003c/p\u003e\n      operationId: KcsGenerateAddressPrivateKey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PrivKeyRequest\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PrivKey\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Generate Kcs private key\n      tags:\n        - Blockchain / Kcs (KCS)\n  /v3/kcs/web3/{xApiKey}:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eUse this endpoint URL as a http-based web3 driver to connect directly to the Kcs node provided by Tatum.\n        To learn more about Kcs Web3, please visit \u003ca href=\"https://docs.kcc.io/\" target=\"_blank\"\u003eKcs developer's guide.\u003c/a\u003e\u003c/p\u003e\n      operationId: KcsWeb3Driver\n      parameters:\n        - description: \"Tatum X-API-Key used for authorization.\"\n          in: path\n          name: xApiKey\n          required: true\n          schema:\n            type: string\n            example: asdlkfjnqunalkwjfnq2oi303294857k\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: Any valid Web3 method content body.\n              example: { \"jsonrpc\": \"2.0\",\"method\": \"web3_clientVersion\",\"params\": [ ],\"id\": 2 }\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Any valid Web3 response.\n                example: { \"jsonrpc\": \"2.0\",\"id\": 2,\"result\": \"Geth/v1.9.9-omnibus-e320ae4c-20191206/linux-amd64/go1.13.4\" }\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      x-code-samples:\n      summary: Web3 HTTP driver\n      tags:\n        - Blockchain / Kcs (KCS)\n  /v3/kcs/block/current:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Kcs current block number. This is the number of the latest block in the blockchain.\u003c/p\u003e\"\n      operationId: KcsGetCurrentBlock\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: number\n                description: Current block number\n                example: 6491272\n          description: OK\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get current block number\n      tags:\n        - Blockchain / Kcs (KCS)\n  /v3/kcs/block/{hash}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Kcs block by block hash or block number.\u003c/p\u003e\"\n      operationId: KcsGetBlock\n      parameters:\n        - description: \"Block hash or block number\"\n          in: path\n          name: hash\n          required: true\n          schema:\n            type: string\n            example: '6470657'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EthBlock\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Kcs block by hash\n      tags:\n        - Blockchain / Kcs (KCS)\n  /v3/kcs/account/balance/{address}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Kcs account balance in KCS. This method does not prints any balance of the ERC20 or ERC721 tokens on the account.\u003c/p\u003e\"\n      operationId: KcsGetBalance\n      parameters:\n        - description: \"Account address\"\n          in: path\n          name: address\n          required: true\n          schema:\n            type: string\n            example: \"0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B\"\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  balance:\n                    type: string\n                    description: Balance in KCS\n                    example: \"10.52\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Kcs Account balance\n      tags:\n        - Blockchain / Kcs (KCS)\n  /v3/kcs/transaction/{hash}:\n    get:\n      description: \"\u003ch4\u003e2 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Kcs transaction by transaction hash.\u003c/p\u003e\"\n      operationId: KcsGetTransaction\n      parameters:\n        - description: \"Transaction hash\"\n          in: path\n          name: hash\n          required: true\n          schema:\n            type: string\n            example: \"0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7\"\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/KcsTx\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403TxNotFound\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Kcs Transaction\n      tags:\n        - Blockchain / Kcs (KCS)\n  /v3/kcs/transaction/count/{address}:\n    get:\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eGet a number of outgoing Kcs transactions for the address. When a transaction is sent, there can be multiple outgoing transactions,\n        which are not yet processed by the blockchain. To distinguish between them, there is a counter called a nonce, which represents\n        the order of the transaction in the list of outgoing transactions.\u003c/p\u003e\n      operationId: KcsGetTransactionCount\n      parameters:\n        - description: \"address\"\n          in: path\n          name: address\n          required: true\n          schema:\n            type: string\n            maxLength: 42\n            minLength: 42\n            example: \"0xdac17f958d2ee523a2206206994597c13d831ec7\"\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: number\n                example: 5\n                description: Number of transactions, that were made from this address. Can be used as a nonce parameter in send transaction calls.\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get count of outgoing Kcs transactions\n      tags:\n        - Blockchain / Kcs (KCS)\n  /v3/kcs/transaction:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eSend KCS from account to account.\u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: KcsBlockchainTransfer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/TransferKcsBlockchain\"\n                - $ref: \"#/components/schemas/TransferKcsBlockchainKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403KcsBroadcast\"\n                  - $ref: \"#/components/schemas/Error403KcsGasPrice\"\n                  - $ref: \"#/components/schemas/Error403KcsTxBody\"\n                  - $ref: \"#/components/schemas/Error403KcsGasCalculation\"\n                  - $ref: \"#/components/schemas/Error403KcsTxHash\"\n                  - $ref: \"#/components/schemas/Error403KcsTxSign\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Send KCS from account to account\n      tags:\n        - Blockchain / Kcs (KCS)\n  /v3/kcs/gas:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eEstimate gasLimit and gasPrice of the Kcs transaction.\n        \u003c/p\u003e\n      operationId: KcsEstimateGas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/KcsEstimateGas\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - gasLimit\n                  - gasPrice\n                properties:\n                  gasLimit:\n                    type: string\n                    description: Gas limit for transaction in gas price.\n                    example: \"40000\"\n                  gasPrice:\n                    type: string\n                    description: Gas price in wei.\n                    example: \"20\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403KcsTxBody\"\n                  - $ref: \"#/components/schemas/Error403KcsGasCalculation\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Estimate Kcs transaction fees\n      tags:\n        - Blockchain / Kcs (KCS)\n  /v3/kcs/smartcontract:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eInvoke any method on an existing Smart Contract. It is possible to call read or write method on the Smart Contract defined via contractAddress.\n        For read operations, data is returned, for write operations, transaction Id of the associated transaction is returned.\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\u003c/p\u003e\n      operationId: KcsBlockchainSmartContractInvocation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/CallKcsSmartContractReadMethod\"\n                - $ref: \"#/components/schemas/CallKcsSmartContractMethod\"\n                - $ref: \"#/components/schemas/CallKcsSmartContractMethodKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n                  - $ref: \"#/components/schemas/Data\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403KcsBroadcast\"\n                  - $ref: \"#/components/schemas/Error403KcsGasPrice\"\n                  - $ref: \"#/components/schemas/Error403KcsScBody\"\n                  - $ref: \"#/components/schemas/Error403KcsGasCalculation\"\n                  - $ref: \"#/components/schemas/Error403KcsTxHash\"\n                  - $ref: \"#/components/schemas/Error403KcsTxSign\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Invoke Smart Contract method\n      tags:\n        - Blockchain / Kcs (KCS)\n  /v3/kcs/broadcast:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eBroadcast signed transaction to Kcs blockchain. This method is used internally from Tatum KMS or Tatum client libraries.\n        It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.\u003c/p\u003e\n      operationId: KcsBroadcast\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BroadcastKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TransactionHashKMS\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403KcsBroadcast\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Broadcast signed Kcs transaction\n      tags:\n        - Blockchain / Kcs (KCS)\ncomponents:\n  securitySchemes:\n    X-Api-Key:\n      description: |\n        To maintain the highest security level, Tatum requires X-API-Key HTTP header.\n        This X-API-Key represents identification of the plan and can be used by 1 developer or per environment.\n        Each X-API-Key is bound to the test or production blockchains.\n      in: header\n      name: x-api-key\n      type: apiKey\n  schemas:\n    KcsBlock:\n      type: object\n      properties:\n        difficulty:\n          description: Difficulty for this block.\n          type: string\n          example: \"3296820833\"\n        extraData:\n          description: The 'extra data' field of this block.\n          type: string\n          example: \"0x\"\n        gasLimit:\n          description: The maximum gas allowed in this block.\n          type: number\n          example: 8000000\n        gasUsed:\n          description: The total used gas by all transactions in this block.\n          type: number\n          example: 7985124\n        hash:\n          description: Hash of the block. 'null' when its pending block.\n          type: string\n          example: \"0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc\"\n        logsBloom:\n          description: The bloom filter for the logs of the block. 'null' when its pending block.\n          type: string\n          example: \"0x042080004210492080800001610060ad9600005bc81502020800000043e302020381a404000100409102040240300641108004000400007000008000c049558055a800000a0001800748900806502004200400108205005418c0218802281a0408060000533210462021050470810a010140102809011814018281115020090201068401847000a04010000c00084062000485640d00020220181150020008589105a41c0880001112034100010882545410240011402a3480050104004c310204000002009490d0012022a040c20c20011020401020140250805100410060008280200008181a220114102800001648640828200c00a94c1003a2060e001000\"\n        miner:\n          description: The address of the beneficiary to whom the mining rewards were given.\n          type: string\n          example: \"0xD8869d9E3d497323561Fbca2319a9FC3F6f10c4B\"\n        mixHash:\n          description: ''\n          type: string\n          example: \"0x7a44a1f56f12ae825fdc04550d7c3af2344daab987691771c06235f25fafcaa6\"\n        nonce:\n          description: Hash of the generated proof-of-work. 'null' when its pending block.\n          type: string\n          example: \"0xfa1692f52a7ac672\"\n        number:\n          description: The block number. 'null' when its pending block.\n          type: number\n          example: 6470657\n        parentHash:\n          description: Hash of the parent block.\n          type: string\n          example: \"0xd34aab8a455027086ac54034e68608c84d984401a883b7b5d91f9ae0bbefda15\"\n        receiptsRoot:\n          description: ''\n          type: string\n          example: \"0x4a496b6b7f2a1c5850bf9eebbea7193807be0067b1c06f17b9dde4eef7b2f960\"\n        sha3Uncles:\n          description: SHA3 of the uncles data in the block.\n          type: string\n          example: \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\"\n        size:\n          description: The size of this block in bytes.\n          type: number\n          example: 15296\n        stateRoot:\n          description: The root of the final state trie of the block.\n          type: string\n          example: \"0x32757c92f10c6c5a106c6fb4b9ca3ff301e413a59ca3d0513b4bf98c72efddba\"\n        timestamp:\n          description: The unix timestamp for when the block was collated.\n          type: number\n          example: 1569600592\n        totalDifficulty:\n          description: Total difficulty of the chain until this block.\n          type: string\n          example: \"23329673338013873\"\n        transactions:\n          description: Array of transactions.\n          type: array\n          items:\n            $ref: \"#/components/schemas/KcsTx\"\n        transactionsRoot:\n          description: The root of the transaction trie of the block.\n          type: string\n          example: \"0x5990081ef8515d561b50255af03c5d505f7725ddef27405dc67d23bfd0f47704\"\n    KcsTx:\n      type: object\n      properties:\n        blockHash:\n          description: Hash of the block where this transaction was in.\n          type: string\n          example: \"0xcf2c40f475e78c7c19778e1ae999a0e371c9319b38182ea15dc94536f13f9137\"\n        status:\n          type: boolean\n          example: true\n          description: TRUE if the transaction was successful, FALSE, if the EVM reverted the transaction.\n        blockNumber:\n          type: number\n          description: Block number where this transaction was in.\n          example: 6470854\n        from:\n          type: string\n          description: Address of the sender.\n          example: \"0x81b7E08F65Bdf5648606c89998A9CC8164397647\"\n        gas:\n          type: number\n          description: Gas provided by the sender.\n          example: 21000\n        gasPrice:\n          type: string\n          description: Gas price provided by the sender in wei.\n          example: \"1000000000\"\n        transactionHash:\n          type: string\n          description: Hash of the transaction.\n          example: \"0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7\"\n        input:\n          type: string\n          description: The data sent along with the transaction.\n          example: \"0x\"\n        nonce:\n          type: number\n          description: The number of transactions made by the sender prior to this one.\n          example: 26836405\n        to:\n          type: string\n          description: Address of the receiver. 'null' when its a contract creation transaction.\n          example: \"0xbC546fa1716Ed886967cf73f40e8F2F5e623a92d\"\n        transactionIndex:\n          type: number\n          description: Integer of the transactions index position in the block.\n          example: 3\n        value:\n          type: string\n          description: Value transferred in wei.\n          example: \"1000000000000000000\"\n        gasUsed:\n          type: number\n          description: The amount of gas used by this specific transaction alone.\n          example: 21000\n        cumulativeGasUsed:\n          type: number\n          description: The total amount of gas used when this transaction was executed in the block.\n          example: 314159\n        contractAddress:\n          type: string\n          description: The contract address created, if the transaction was a contract creation, otherwise null.\n          example: \"0x81b7E08F65Bdf5648606c89998A9CC8164397647\"\n        logs:\n          type: array\n          description: Log events, that happened in this transaction.\n          items:\n            type: object\n            properties:\n              address:\n                type: string\n                description: From which this event originated from.\n                example: \"0x81b7E08F65Bdf5648606c89998A9CC8164397647\"\n              topics:\n                type: array\n                description: An array with max 4 32 Byte topics, topic 1-3 contains indexed parameters of the log.\n                items:\n                  type: string\n                  example: \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"\n              data:\n                type: string\n                description: The data containing non-indexed log parameter.\n              logIndex:\n                type: number\n                description: Integer of the event index position in the block.\n              blockNumber:\n                type: number\n                description: Block number where this transaction was in.\n                example: 6470854\n              blockHash:\n                description: Hash of the block.\n                type: string\n                example: \"0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc\"\n              transactionIndex:\n                type: number\n                description: Integer of the transaction’s index position, the event was created in.\n              transactionHash:\n                type: string\n                description: Hash of the transaction this event was created in.\n                example: \"0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7\"\n    Error403KcsBroadcast:\n      properties:\n        errorCode:\n          description: kcs.broadcast.failed\n          example: kcs.broadcast.failed\n          type: string\n        message:\n          description: Unable to broadcast transaction due to ${error}.\n          example: Unable to broadcast transaction due to ${error}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403KcsBep20NotFound:\n      properties:\n        errorCode:\n          description: erc20.token.notFound\n          example: erc20.token.notFound\n          type: string\n        message:\n          description: No such ERC20 currency ${name}.\n          example: No such ERC20 currency ${name}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxNotFound:\n      properties:\n        errorCode:\n          description: tx.missing\n          example: tx.missing\n          type: string\n        message:\n          description: No such tx.\n          example: No such tx.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403KcsBep20Set:\n      properties:\n        errorCode:\n          description: erc20.address.set\n          example: erc20.address.set\n          type: string\n        message:\n          description: ERC20 address was already set.\n          example: ERC20 address was already set.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403KcsMnemonicPrivateKey:\n      properties:\n        errorCode:\n          description: private.mnemonic.missing\n          example: private.mnemonic.missing\n          type: string\n        message:\n          description: Either mnemonic and index or private key must be present.\n          example: Either mnemonic and index or private key must be present.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403KcsBep20Unsupported:\n      properties:\n        errorCode:\n          description: kcs.bep20.unsupported\n          example: kcs.bep20.unsupported\n          type: string\n        message:\n          description: Unsupported ETH ERC20 blockchain.\n          example: Unsupported ETH ERC20 blockchain.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403KcsTxHash:\n      properties:\n        errorCode:\n          description: kcs.transaction.hash\n          example: kcs.transaction.hash\n          type: string\n        message:\n          description: Unable to calculate transaction hash. ${error}\n          example: Unable to calculate transaction hash. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403KcsTxSign:\n      properties:\n        errorCode:\n          description: kcs.transaction.sign\n          example: kcs.transaction.sign\n          type: string\n        message:\n          description: Unable to sign transaction. ${error}\n          example: Unable to sign transaction. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403KcsErc20TxSign:\n      properties:\n        errorCode:\n          description: kcs.bep20.sign\n          example: kcs.bep20.sign\n          type: string\n        message:\n          description: Unable to sign transaction for contract creation. ${error}\n          example: Unable to sign transaction for contract creation. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403KcsGasCalculation:\n      properties:\n        errorCode:\n          description: kcs.transaction.gas\n          example: kcs.transaction.gas\n          type: string\n        message:\n          description: Unable to calculate gas limit for transaction. ${error}\n          example: Unable to calculate gas limit for transaction. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403KcsTxBody:\n      properties:\n        errorCode:\n          description: kcs.transaction.body\n          example: kcs.transaction.body\n          type: string\n        message:\n          description: Either currency, or tokenAddress must be defined.\n          example: Either currency, or tokenAddress must be defined.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403KcsScBody:\n      properties:\n        errorCode:\n          description: kcs.sc.invalid\n          example: kcs.sc.invalid\n          type: string\n        message:\n          description: Invalid parameters for smart contract invocation.\n          example: Invalid parameters for smart contract invocation.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403KcsGasPrice:\n      properties:\n        errorCode:\n          description: gas.price.failed\n          example: gas.price.failed\n          type: string\n        message:\n          description: Unable to obtain current GAS price.\n          example: Unable to obtain current GAS price.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    TransferBep20Blockchain:\n      type: object\n      properties:\n        to:\n          maxLength: 50\n          minLength: 1\n          description: Blockchain address to send ERC20 token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        amount:\n          description: Amount to be sent.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        digits:\n          description: Number of decimal points that ERC20 token has.\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Kcs transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - contractAddress\n        - digits\n        - fromPrivateKey\n        - amount\n    TransferBep20BlockchainKMS:\n      type: object\n      properties:\n        to:\n          maxLength: 50\n          minLength: 1\n          description: Blockchain address to send ERC20 token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        amount:\n          description: Amount to be sent.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        digits:\n          description: Number of decimal points that ERC20 token has.\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Kcs transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - to\n        - contractAddress\n        - signatureId\n        - digits\n        - amount\n    CallKcsSmartContractMethod:\n      type: object\n      properties:\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        amount:\n          description: Amount of the assets to be sent.\n          example: \"100000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        methodName:\n          minLength: 1\n          maxLength: 500\n          description: Name of the method to invoke on smart contract.\n          type: string\n          example: transfer\n        methodABI:\n          type: object\n          example: {\n            \"inputs\": [\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n              }\n            ],\n            \"name\": \"stake\",\n            \"outputs\": [ ],\n            \"stateMutability\": \"nonpayable\",\n            \"type\": \"function\"\n          }\n          description: ABI of the method to invoke.\n        params:\n          type: array\n          example: [ '0x632' ]\n          items:\n            type: string\n            description: Parameters of the method to be invoked\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Kcs transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - contractAddress\n        - params\n        - methodABI\n        - fromPrivateKey\n        - methodName\n    CallKcsSmartContractReadMethod:\n      type: object\n      properties:\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        methodName:\n          minLength: 1\n          maxLength: 500\n          description: Name of the method to invoke on smart contract.\n          type: string\n          example: transfer\n        methodABI:\n          type: object\n          example: {\n            \"inputs\": [\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n              }\n            ],\n            \"name\": \"stake\",\n            \"outputs\": [ ],\n            \"stateMutability\": \"nonpayable\",\n            \"type\": \"function\"\n          }\n          description: ABI of the method to invoke.\n        params:\n          type: array\n          example: [ '0x632' ]\n          items:\n            type: string\n            description: Parameters of the method to be invoked\n      required:\n        - contractAddress\n        - params\n        - methodABI\n        - methodName\n    CallKcsSmartContractMethodKMS:\n      type: object\n      properties:\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        methodName:\n          minLength: 1\n          maxLength: 500\n          description: Name of the method to invoke on smart contract.\n          type: string\n          example: transfer\n        methodABI:\n          type: object\n          description: ABI of the method to invoke.\n        params:\n          type: array\n          example: [ '0x632' ]\n          items:\n            type: string\n          description: Parameters of the method to be invoked.\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Kcs transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - contractAddress\n        - params\n        - methodABI\n        - signatureId\n        - methodName\n    TransferKcsBlockchain:\n      type: object\n      properties:\n        data:\n          type: string\n          maxLength: 50000\n          description: Additinal data, that can be passed to blockchain transaction as data property. Only for ETH transactions.\n          example: My note to recipient.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Kcs transaction. If not present, last known nonce will be used.\n        to:\n          description: Blockchain address to send assets\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          maxLength: 42\n          minLength: 42\n          type: string\n        currency:\n          description: Currency to transfer from Kcs Blockchain Account. ERC20 tokens USDC and USDT are available only for mainnet use.\n          enum:\n            - KCS\n            - USDC_KCS\n            - USDT_KCS\n          example: KCS\n          type: string\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              example: \"40000\"\n              pattern: ^[+]?\\d+$\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              example: \"20\"\n              pattern: ^[+]?\\d+$\n        amount:\n          description: Amount to be sent in Ether.\n          example: \"100000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n      required:\n        - to\n        - amount\n        - currency\n        - fromPrivateKey\n    KcsEstimateGas:\n      type: object\n      properties:\n        from:\n          type: string\n          maxLength: 66\n          example: \"0xfb99f8ae9b70a0c8cd96ae665bbaf85a7e01a2ef\"\n          minLength: 66\n          description: Sender address.\n        to:\n          description: Blockchain address to send assets\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          maxLength: 42\n          minLength: 42\n          type: string\n        amount:\n          description: Amount to be sent in Ether.\n          example: \"100000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        data:\n          type: string\n          maxLength: 50000\n          description: Additinal data, that can be passed to blockchain transaction as data property. Only for ETH transactions.\n          example: My note to recipient.\n          pattern: ^(0x|0h)?[0-9A-F]+$\n      required:\n        - to\n        - amount\n        - from\n    TransferKcsBlockchainKMS:\n      type: object\n      properties:\n        data:\n          type: string\n          maxLength: 50000\n          description: Additinal data, that can be passed to blockchain transaction as data property. Only for ETH transactions.\n          example: My note to recipient.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Kcs transaction. If not present, last known nonce will be used.\n        to:\n          description: Blockchain address to send assets\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          maxLength: 42\n          minLength: 42\n          type: string\n        currency:\n          description: Currency to transfer from Kcs Blockchain Account. ERC20 tokens BETH, BBTC, BADA, WMATIC, BDOT, BXRP, BLTC, BBCH, KCS are available only for mainnet use.\n          enum:\n            - BETH\n            - BBTC\n            - BADA\n            - WMATIC\n            - BDOT\n            - BXRP\n            - BLTC\n            - BBCH\n            - MATIC\n            - KCS\n          example: KCS\n          type: string\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              example: \"40000\"\n              pattern: ^[+]?\\d+$\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              example: \"20\"\n              pattern: ^[+]?\\d+$\n        amount:\n          description: Amount to be sent in Ether.\n          example: \"100000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n      required:\n        - to\n        - amount\n        - currency\n        - signatureId\n    DeployBep20:\n      type: object\n      properties:\n        symbol:\n          description: Symbol of the ERC20 token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        name:\n          description: Name of the ERC20 token\n          example: MyERC20\n          maxLength: 100\n          minLength: 1\n          pattern: ^[a-zA-Z0-9_]+$\n          type: string\n        totalCap:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        supply:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        digits:\n          description: Number of decimal points\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        address:\n          description: Address on Kcs blockchain, where all created ERC20 tokens will be transferred.\n          maxLength: 42\n          minLength: 42\n          example: \"0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6\"\n          type: string\n        fromPrivateKey:\n          description: Private key of Kcs account address, from which the fee for the deployment of ERC20 will be paid. Private key, or signature Id must be present.\n          type: string\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          maxLength: 66\n          minLength: 66\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Kcs transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - name\n        - symbol\n        - address\n        - supply\n        - fromPrivateKey\n        - digits\n    DeployBep20KMS:\n      type: object\n      properties:\n        symbol:\n          description: Symbol of the ERC20 token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        name:\n          description: Name of the ERC20 token\n          example: MyERC20\n          maxLength: 100\n          minLength: 1\n          pattern: ^[a-zA-Z0-9_]+$\n          type: string\n        totalCap:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        supply:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        digits:\n          description: Number of decimal points\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        address:\n          description: Address on Kcs blockchain, where all created ERC20 tokens will be transferred.\n          maxLength: 42\n          minLength: 42\n          example: \"0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Kcs transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - name\n        - symbol\n        - address\n        - supply\n        - signatureId\n        - digits\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /v3/kcs/gas: post: operation \"KcsEstimateGas\": responses: 400: content: \"application/json\": schema: parse schema: resolve \"#/components/schemas/Error400\": find schema: resolve \"#/components/schemas/Error400\": can't find value for \"components/schemas/Error400\""
}