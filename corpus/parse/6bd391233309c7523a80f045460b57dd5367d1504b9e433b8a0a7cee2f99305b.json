{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/opentdf/opentdf"
		},
		"file": {
			"name": "openapi-aggregate.yaml",
			"size": 0,
			"path": "openapi/openapi-aggregate.yaml",
			"byteSize": 34252,
			"content": "openapi: 3.0.3\ninfo:\n  title: OpenTDF\n  license:\n    name: BSD 3-Clause Clear\n    url: 'https://github.com/opentdf/backend/blob/main/LICENSE'\n  version: 0.9.0\n  x-logo:\n    url: 'https://avatars.githubusercontent.com/u/90051847?s=200\u0026v=4'\nexternalDocs:\n  description: Developer Hub\n  url: 'https://developer.virtru.com/'\ntags:\n  - name: Attributes\n    description: \u003e-\n      Operations to view data attributes. TDF protocol supports ABAC (Attribute\n      Based Access Control). \n              This allows TDF protocol to implement policy driven and highly scalable access control mechanism.\n  - name: Authorities\n    description: Operations to view and create attribute authorities.\n  - name: Attributes Definitions\n    description: 'Operations to manage the rules and metadata of attributes. '\n  - name: Entitlements\n    description: Operations to manage entitlements entitled to entities.\npaths:\n  /api/attributes/attributes:\n    get:\n      tags:\n        - Attributes\n      summary: Read Attributes\n      operationId: read_attributes_attributes_get\n      parameters:\n        - required: false\n          schema:\n            title: Authority\n            maxLength: 2000\n            minLength: 1\n            type: string\n            format: uri\n          name: authority\n          in: query\n        - required: false\n          schema:\n            title: Name\n            type: string\n          name: name\n          in: query\n        - required: false\n          schema:\n            title: Rule\n            type: string\n          name: rule\n          in: query\n        - required: false\n          schema:\n            title: Order\n            type: string\n          name: order\n          in: query\n        - required: false\n          schema:\n            title: Sort\n            pattern: \u003e-\n              ^(-*((state)|(rule)|(name)|(values_array)),)*-*((state)|(rule)|(name)|(values_array))$\n            type: string\n            default: ''\n          name: sort\n          in: query\n        - required: false\n          schema:\n            title: Offset\n            minimum: 1\n            type: integer\n            default: 1\n          name: offset\n          in: query\n        - required: false\n          schema:\n            title: Limit\n            maximum: 1000\n            minimum: 1\n            type: integer\n            default: 100\n          name: limit\n          in: query\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: Response Read Attributes Attributes Get\n                type: array\n                items:\n                  maxLength: 65536\n                  minLength: 1\n                  type: string\n                  format: uri\n              example:\n                - 'https://opentdf.io/attr/IntellectualProperty/value/TradeSecret'\n                - 'https://opentdf.io/attr/ClassificationUS/value/Unclassified'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n  /api/attributes/definitions/attributes:\n    get:\n      tags:\n        - Attributes Definitions\n      summary: Read Attributes Definitions\n      operationId: read_attributes_definitions_definitions_attributes_get\n      parameters:\n        - required: false\n          schema:\n            title: Authority\n            maxLength: 2000\n            minLength: 1\n            type: string\n            format: uri\n          name: authority\n          in: query\n        - required: false\n          schema:\n            title: Name\n            type: string\n          name: name\n          in: query\n        - required: false\n          schema:\n            title: Rule\n            type: string\n          name: rule\n          in: query\n        - required: false\n          schema:\n            title: Order\n            type: string\n          name: order\n          in: query\n        - required: false\n          schema:\n            title: Sort\n            pattern: \u003e-\n              ^(-*((id)|(state)|(rule)|(name)|(values_array)),)*-*((id)|(state)|(rule)|(name)|(values_array))$\n            type: string\n            default: ''\n          name: sort\n          in: query\n        - required: false\n          schema:\n            title: Offset\n            minimum: 1\n            type: integer\n            default: 1\n          name: offset\n          in: query\n        - required: false\n          schema:\n            title: Limit\n            maximum: 1000\n            minimum: 1\n            type: integer\n            default: 100\n          name: limit\n          in: query\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: \u003e-\n                  Response Read Attributes Definitions Definitions Attributes\n                  Get\n                type: array\n                items:\n                  $ref: '#/components/schemas/AttributeDefinition'\n              example:\n                - authority: 'https://opentdf.io'\n                  name: IntellectualProperty\n                  rule: hierarchy\n                  state: published\n                  order:\n                    - TradeSecret\n                    - Proprietary\n                    - BusinessSensitive\n                    - Open\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n        - OAuth2AuthorizationCodeBearer: []\n    put:\n      tags:\n        - Attributes Definitions\n      summary: Update Attribute Definition\n      operationId: update_attribute_definition_definitions_attributes_put\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AttributeDefinition'\n            example:\n              authority: 'https://opentdf.io'\n              name: IntellectualProperty\n              rule: hierarchy\n              state: published\n              order:\n                - TradeSecret\n                - Proprietary\n                - BusinessSensitive\n                - Open\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttributeDefinition'\n              example:\n                authority: 'https://opentdf.io'\n                name: IntellectualProperty\n                rule: hierarchy\n                state: published\n                order:\n                  - TradeSecret\n                  - Proprietary\n                  - BusinessSensitive\n                  - Open\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n        - OAuth2AuthorizationCodeBearer: []\n    post:\n      tags:\n        - Attributes Definitions\n      summary: Create Attributes Definitions\n      operationId: create_attributes_definitions_definitions_attributes_post\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AttributeDefinition'\n            example:\n              authority: 'https://opentdf.io'\n              name: IntellectualProperty\n              rule: hierarchy\n              state: published\n              order:\n                - TradeSecret\n                - Proprietary\n                - BusinessSensitive\n                - Open\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttributeDefinition'\n              example:\n                authority: 'https://opentdf.io'\n                name: IntellectualProperty\n                rule: hierarchy\n                state: published\n                order:\n                  - TradeSecret\n                  - Proprietary\n                  - BusinessSensitive\n                  - Open\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n        - OAuth2AuthorizationCodeBearer: []\n    delete:\n      tags:\n        - Attributes Definitions\n      summary: Delete Attributes Definitions\n      operationId: delete_attributes_definitions_definitions_attributes_delete\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AttributeDefinition'\n            example:\n              authority: 'https://opentdf.io'\n              name: IntellectualProperty\n              rule: hierarchy\n              state: published\n              order:\n                - TradeSecret\n                - Proprietary\n                - BusinessSensitive\n                - Open\n        required: true\n      responses:\n        '202':\n          description: No Content\n          content:\n            application/json:\n              schema: {}\n              example:\n                detail: Item deleted\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n        - OAuth2AuthorizationCodeBearer: []\n  /api/attributes/authorities:\n    get:\n      tags:\n        - Authorities\n      summary: Read Authorities\n      operationId: read_authorities_authorities_get\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n              example:\n                - 'https://opentdf.io'\n      security:\n        - OAuth2AuthorizationCodeBearer: []\n    post:\n      tags:\n        - Authorities\n      summary: Create Authorities\n      operationId: create_authorities_authorities_post\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthorityDefinition'\n            example:\n              authority: 'https://opentdf.io'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n              example:\n                - 'https://opentdf.io'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n        - OAuth2AuthorizationCodeBearer: []\n  /api/entitlements/entitlements:\n    get:\n      tags:\n        - Entitlements\n      summary: Read Entitlements\n      operationId: read_entitlements_entitlements_get\n      parameters:\n        - required: false\n          schema:\n            title: Authority\n            maxLength: 2000\n            minLength: 1\n            type: string\n            format: uri\n          name: authority\n          in: query\n        - required: false\n          schema:\n            title: Name\n            type: string\n          name: name\n          in: query\n        - required: false\n          schema:\n            title: Entityid\n            type: string\n          name: entityId\n          in: query\n        - required: false\n          schema:\n            title: Order\n            type: string\n          name: order\n          in: query\n        - required: false\n          schema:\n            title: Sort\n            pattern: \u003e-\n              ^(-*((id)|(state)|(rule)|(name)|(values)),)*-*((id)|(state)|(rule)|(name)|(values))$\n            type: string\n            default: ''\n          name: sort\n          in: query\n        - required: false\n          schema:\n            title: Offset\n            minimum: 1\n            type: integer\n            default: 1\n          name: offset\n          in: query\n        - required: false\n          schema:\n            title: Limit\n            maximum: 1000\n            minimum: 1\n            type: integer\n            default: 100\n          name: limit\n          in: query\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                title: Response Read Entitlements Entitlements Get\n                type: array\n                items:\n                  $ref: '#/components/schemas/Entitlements'\n              example:\n                123e4567-e89b-12d3-a456-426614174000:\n                  - 'https://opentdf.io/attr/SecurityClearance/value/Unclassified'\n                  - 'https://opentdf.io/attr/OperationalRole/value/Manager'\n                  - 'https://opentdf.io/attr/OperationGroup/value/HR'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n        - OAuth2AuthorizationCodeBearer: []\n  '/api/entitlements/entitlements/{entityId}':\n    post:\n      tags:\n        - Entitlements\n      summary: Add Entitlements To Entity\n      operationId: add_entitlements_to_entity_entitlements__entityId__post\n      parameters:\n        - required: true\n          schema:\n            title: Entityid\n            type: string\n          example: tdf-client\n          name: entityId\n          in: path\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Request\n              type: array\n              items:\n                type: string\n            example:\n              - 'https://opentdf.io/attr/IntellectualProperty/value/TradeSecret'\n              - 'https://opentdf.io/attr/ClassificationUS/value/Unclassified'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n              example:\n                - 'https://opentdf.io/attr/IntellectualProperty/value/TradeSecret'\n                - 'https://opentdf.io/attr/ClassificationUS/value/Unclassified'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n        - OAuth2AuthorizationCodeBearer: []\n    delete:\n      tags:\n        - Entitlements\n      summary: Remove Entitlement From Entity\n      operationId: remove_entitlement_from_entity_entitlements__entityId__delete\n      parameters:\n        - required: true\n          schema:\n            title: Entityid\n            type: string\n          example: tdf-client\n          name: entityId\n          in: path\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Request\n              type: array\n              items:\n                type: string\n            example:\n              - 'https://opentdf.io/attr/IntellectualProperty/value/TradeSecret'\n              - 'https://opentdf.io/attr/ClassificationUS/value/Unclassified'\n        required: true\n      responses:\n        '202':\n          description: No Content\n          content:\n            application/json:\n              schema: {}\n              example:\n                detail: Item deleted\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n      security:\n        - OAuth2AuthorizationCodeBearer: []\n  /api/kas/:\n    get:\n      summary: Get the current version\n      description: |\n        This endpoint is for OPS so they have something to ping on to verify\n        that the server hasn't died.\n      operationId: tdf3_kas_core.web.heartbeat.ping\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  version:\n                    type: string\n                    example: 0.0.0\n  /api/kas/healthz:\n    get:\n      tags:\n        - heartbeat\n      summary: Return current version as semver; useful for liveness checks\n      operationId: tdf3_kas_core.web.heartbeat.healthz\n      parameters:\n        - name: probe\n          description: liveness or readiness\n          in: query\n          schema:\n            default: liveness\n            enum:\n              - liveness\n              - readiness\n            type: string\n      responses:\n        '200':\n          description: Success with a detail message\n        '204':\n          description: Success with no detail message\n        '500':\n          description: 'Unhealthy, per the requested probe'\n  /api/kas/kas_public_key:\n    get:\n      summary: Get the public key for KAS\n      deprecated: true\n      description: |\n        This endpoint provides a public key for the private key that the\n        kas has internally. The public key is used to wrap object keys in\n        the TDF3 or NanoTDF files.\n      operationId: tdf3_kas_core.web.public_key.get\n      parameters:\n        - name: algorithm\n          description: 'algorithm type rsa:\u003ckeysize\u003e or ec:\u003ccurvename\u003e'\n          in: query\n          schema:\n            default: 'rsa:2048'\n            type: string\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PublicKey'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KeyNotFoundError'\n  /api/kas/rewrap:\n    post:\n      summary: Request a rewrap\n      description: |\n        This endpoint performs the primary service of the KAS; to re-wrap\n        data keys as needed to provide access for entities with a TDF that they\n        would like to open.\n      operationId: tdf3_kas_core.web.rewrap.rewrap\n      requestBody:\n        $ref: '#/components/requestBodies/Rewrap'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  metadata:\n                    type: object\n                    default: {}\n                  kasWrappedKey:\n                    type: string\n                    nullable: true\n                  entityWrappedKey:\n                    type: string\n                    nullable: true\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/AdjudicatorError'\n                  - $ref: '#/components/schemas/AuthorizationError'\n                  - $ref: '#/components/schemas/EntityError'\n                  - $ref: '#/components/schemas/KeyAccessError'\n                  - $ref: '#/components/schemas/KeyNotFoundError'\n                  - $ref: '#/components/schemas/PluginFailedError'\n                  - $ref: '#/components/schemas/PolicyError'\n  /api/kas/v2/rewrap:\n    post:\n      summary: Request a rewrap\n      description: |\n        This endpoint performs the primary service of the KAS; to re-wrap\n        data keys as needed to provide access for entities with a TDF that they\n        would like to open.\n      operationId: tdf3_kas_core.web.rewrap.rewrap_v2\n      requestBody:\n        $ref: '#/components/requestBodies/RewrapV2'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  metadata:\n                    type: object\n                    default: {}\n                  kasWrappedKey:\n                    type: string\n                    nullable: true\n                  entityWrappedKey:\n                    type: string\n                    nullable: true\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/AdjudicatorError'\n                  - $ref: '#/components/schemas/AuthorizationError'\n                  - $ref: '#/components/schemas/EntityError'\n                  - $ref: '#/components/schemas/KeyAccessError'\n                  - $ref: '#/components/schemas/KeyNotFoundError'\n                  - $ref: '#/components/schemas/PluginFailedError'\n                  - $ref: '#/components/schemas/PolicyError'\n  /api/kas/upsert:\n    post:\n      summary: Request a upsert\n      description: |\n        The upsert service is a proxy to the back-end services that persist\n        policies and keys.\n      operationId: tdf3_kas_core.web.upsert.upsert\n      requestBody:\n        $ref: '#/components/requestBodies/Upsert'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                default: []\n                items: {}\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/AuthorizationError'\n                  - $ref: '#/components/schemas/EntityError'\n                  - $ref: '#/components/schemas/KeyAccessError'\n                  - $ref: '#/components/schemas/KeyNotFoundError'\n                  - $ref: '#/components/schemas/PluginFailedError'\n                  - $ref: '#/components/schemas/PolicyError'\n  /api/kas/v2/upsert:\n    post:\n      summary: Request a upsert\n      description: |\n        The upsert service is a proxy to the back-end services that persist\n        policies and keys.\n      operationId: tdf3_kas_core.web.upsert.upsert_v2\n      requestBody:\n        $ref: '#/components/requestBodies/UpsertV2'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                default: []\n                items: {}\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/AuthorizationError'\n                  - $ref: '#/components/schemas/EntityError'\n                  - $ref: '#/components/schemas/KeyAccessError'\n                  - $ref: '#/components/schemas/KeyNotFoundError'\n                  - $ref: '#/components/schemas/PluginFailedError'\n                  - $ref: '#/components/schemas/PolicyError'\ncomponents:\n  schemas:\n    AttributeDefinition:\n      title: AttributeDefinition\n      required:\n        - authority\n        - name\n        - order\n        - rule\n      type: object\n      properties:\n        authority:\n          title: Authority\n          maxLength: 2000\n          minLength: 1\n          type: string\n          format: uri\n        name:\n          title: Name\n          maxLength: 2000\n          type: string\n        order:\n          title: Order\n          maxLength: 2000\n          type: array\n          items:\n            maxLength: 2000\n            type: string\n        rule:\n          $ref: '#/components/schemas/RuleEnum'\n        state:\n          title: State\n          maxLength: 64\n          type: string\n      example:\n        authority: 'https://opentdf.io'\n        name: IntellectualProperty\n        rule: hierarchy\n        state: published\n        order:\n          - TradeSecret\n          - Proprietary\n          - BusinessSensitive\n          - Open\n    AuthorityDefinition:\n      title: AuthorityDefinition\n      required:\n        - authority\n      type: object\n      properties:\n        authority:\n          title: Authority\n          maxLength: 2000\n          minLength: 1\n          type: string\n          format: uri\n    HTTPValidationError:\n      title: HTTPValidationError\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: array\n          items:\n            $ref: '#/components/schemas/ValidationError'\n    RuleEnum:\n      title: RuleEnum\n      enum:\n        - hierarchy\n        - anyOf\n        - allOf\n      type: string\n      description: An enumeration.\n    ValidationError:\n      title: ValidationError\n      required:\n        - loc\n        - msg\n        - type\n      type: object\n      properties:\n        loc:\n          title: Location\n          type: array\n          items:\n            type: string\n        msg:\n          title: Message\n          type: string\n        type:\n          title: Error Type\n          type: string\n    Entitlements:\n      title: Entitlements\n      type: object\n      additionalProperties:\n        type: array\n        items:\n          type: string\n      example:\n        123e4567-e89b-12d3-a456-426614174000:\n          - 'https://opentdf.io/attr/SecurityClearance/value/Unclassified'\n          - 'https://opentdf.io/attr/OperationalRole/value/Manager'\n          - 'https://opentdf.io/attr/OperationGroup/value/HR'\n    Algorithm:\n      title: The algorithm used to encrypt the ciphertext\n      type: string\n      enum:\n        - AES-256-GCM\n    Aliases:\n      title: Array of userIds\n      type: array\n      items:\n        $ref: '#/components/schemas/UserId'\n    AuthToken:\n      $ref: '#/components/schemas/JWT'\n    Cert:\n      title: Entity certificate\n      type: string\n    Ciphertext:\n      title: Encrypted object\n      type: string\n    EncryptedMetadata:\n      title: Metadata in encrypted format\n      type: string\n    Entity:\n      description: Entity object\n      type: object\n      required:\n        - cert\n        - publicKey\n        - userId\n      maxProperties: 6\n      properties:\n        aliases:\n          $ref: '#/components/schemas/Aliases'\n        attributes:\n          $ref: '#/components/schemas/EntityAttributes'\n        cert:\n          $ref: '#/components/schemas/Cert'\n        exp:\n          $ref: '#/components/schemas/Exp'\n        publicKey:\n          $ref: '#/components/schemas/PublicKey'\n        userId:\n          $ref: '#/components/schemas/UserId'\n    EntityAttribute:\n      title: Entity attribute\n      required:\n        - jwt\n      properties:\n        jwt:\n          $ref: '#/components/schemas/JWT'\n    EntityAttributes:\n      title: Entity attributes\n      type: array\n      items:\n        $ref: '#/components/schemas/EntityAttribute'\n    Exp:\n      title: JWT expiration date\n      type: number\n    IV:\n      title: Initial vector used to encrypt the ciphertext\n      type: string\n    JWT:\n      title: JSON Web token\n      type: string\n      pattern: '^[a-zA-Z0-9\\-_]+?\\.[a-zA-Z0-9\\-_]+?\\.([a-zA-Z0-9\\-_]+)?$'\n    KeyAccess:\n      title: Key access object\n      type: object\n      required:\n        - type\n        - url\n        - protocol\n      properties:\n        encryptedMetadata:\n          $ref: '#/components/schemas/EncryptedMetadata'\n        policySyncOptions:\n          $ref: '#/components/schemas/Policy'\n        policyBinding:\n          $ref: '#/components/schemas/PolicyBinding'\n        protocol:\n          type: string\n          enum:\n            - kas\n        type:\n          type: string\n          enum:\n            - remote\n            - remoteWrapped\n            - wrapped\n        url:\n          type: string\n        wrappedKey:\n          $ref: '#/components/schemas/WrappedKey'\n    Policy:\n      title: Policy\n      type: string\n    PolicyBinding:\n      title: Policy binding\n      type: string\n    PolicySyncOptions:\n      title: Policy sync options\n      type: object\n      properties:\n        url:\n          type: string\n    PublicKey:\n      title: Public key\n      type: string\n      pattern: '-----BEGIN PUBLIC KEY-----(.|\\s)*-----END PUBLIC KEY-----(\\s)*'\n    UserId:\n      title: User id\n      type: string\n    WrappedKey:\n      title: Wrapped key\n      type: string\n    TDF_Algorithm:\n      description: \u003e-\n        String to define the type of algorithm the client performing the TDF\n        operations.\n      type: string\n      example: 'ec:secp256r1'\n    AttributePolicyConfigError:\n      title: Attribute policy config error (500)\n      type: string\n    AdjudicatorError:\n      title: Adjudicator error (403)\n      type: string\n    AuthorizationError:\n      title: Authorization error (403)\n      type: string\n    CryptoError:\n      title: Crypto error (403)\n      type: string\n    EntityError:\n      title: Entity error (400)\n      type: string\n    InvalidBindingError:\n      title: Invalid binding error (403)\n      type: string\n    JWTError:\n      title: JWT error (403)\n      type: string\n    KeyAccessError:\n      title: Key access error (403)\n      type: string\n    KeyNotFoundError:\n      title: Key not found error (403)\n      type: string\n    PluginFailedError:\n      title: Plugin failed error (403)\n      type: string\n    PluginIsBadError:\n      title: Plugin is bad error (403)\n      type: string\n    PolicyError:\n      title: Policy error (403)\n      type: string\n    PrivateKeyInvalidError:\n      title: Private key invalid error (403)\n      type: string\n    RequestError:\n      title: Invalid binding error (403)\n      type: string\n    ValidationError1:\n      title: Validation error (400)\n      type: string\n    UnknownAttributePolicyError:\n      title: Unknown attribute policy error (403)\n      type: string\n    RequestTimeoutError:\n      title: Request timeout error (503)\n      type: string\n    PolicyNotFoundError:\n      title: Policy not found error (404)\n      type: string\n    ContractNotFoundError:\n      title: Contract not found error (404)\n      type: string\n    PolicyCreateError:\n      title: Policy create error (403)\n      type: string\n  securitySchemes:\n    OAuth2AuthorizationCodeBearer:\n      type: oauth2\n      flows:\n        authorizationCode:\n          scopes: {}\n          authorizationUrl: ''\n          tokenUrl: ''\n  responses:\n    BadRequest:\n      description: 400 Bad request\n      content:\n        application/json:\n          schema:\n            properties:\n              detail:\n                type: string\n              status:\n                type: number\n                default: 400\n              title:\n                type: string\n                default: Bad request\n              type:\n                type: string\n                default: 'about:blank'\n    NotFound:\n      description: 404 Not found\n      content:\n        application/json:\n          schema:\n            type: string\n    ServerError:\n      description: Server error\n    PublicKey:\n      description: Public key response\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PublicKey'\n    Version:\n      description: Respond with current version\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              version:\n                type: string\n                example: 0.0.0\n  requestBodies:\n    Rewrap:\n      description: Rewrap request body\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - type: object\n                required:\n                  - authToken\n                  - entity\n                  - keyAccess\n                maxProperties: 5\n                properties:\n                  authToken:\n                    $ref: '#/components/schemas/AuthToken'\n                  entity:\n                    $ref: '#/components/schemas/Entity'\n                  keyAccess:\n                    $ref: '#/components/schemas/KeyAccess'\n                  policy:\n                    $ref: '#/components/schemas/Policy'\n                  algorithm:\n                    $ref: '#/components/schemas/TDF_Algorithm'\n              - type: object\n                required:\n                  - signedRequestToken\n                maxProperties: 1\n                properties:\n                  signedRequestToken:\n                    $ref: '#/components/schemas/JWT'\n    RewrapV2:\n      description: RewrapV2 request body\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - type: object\n                required:\n                  - signedRequestToken\n                maxProperties: 1\n                properties:\n                  signedRequestToken:\n                    $ref: '#/components/schemas/JWT'\n    Upsert:\n      description: Upsert request body\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - type: object\n                required:\n                  - authToken\n                  - entity\n                  - keyAccess\n                  - policy\n                maxProperties: 4\n                properties:\n                  authToken:\n                    $ref: '#/components/schemas/AuthToken'\n                  entity:\n                    $ref: '#/components/schemas/Entity'\n                  keyAccess:\n                    $ref: '#/components/schemas/KeyAccess'\n                  policy:\n                    $ref: '#/components/schemas/Policy'\n              - type: object\n                required:\n                  - signedRequestToken\n    UpsertV2:\n      description: Upsert request body\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - type: object\n                required:\n                  - signedRequestToken\n                maxProperties: 1\n                properties:\n                  signedRequestToken:\n                    $ref: '#/components/schemas/JWT'\n",
			"canonicalURL": "/github.com/opentdf/opentdf@258fee57a999e6dc9c54c9a92bd75c91121ed1ab/-/blob/openapi/openapi-aggregate.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/opentdf/opentdf/blob/258fee57a999e6dc9c54c9a92bd75c91121ed1ab/openapi/openapi-aggregate.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/api/attributes/authorities\": get: operation \"read_authorities_authorities_get\": security: parse security scheme \"OAuth2AuthorizationCodeBearer\": oauth2: flow \"authorizationCode\": at 1:8267: \"tokenUrl\" MUST be in the form of a URL: parse \"\": empty url"
}