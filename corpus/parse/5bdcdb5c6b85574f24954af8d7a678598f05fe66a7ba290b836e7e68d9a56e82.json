{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dstack-group/Butterfly"
		},
		"file": {
			"name": "user-manager-rest-api.yml",
			"size": 0,
			"path": "user-manager/user-manager-rest-api/openapi/user-manager-rest-api.yml",
			"byteSize": 40685,
			"content": "# @project:   Butterfly\n# @author:    DStack Group\n# @module:    user-manager-rest-api\n# @fileName:  user-manager-rest-api.yml\n# @created:   2019-03-07\n#\n# --------------------------------------------------------------------------------------------\n# Copyright (c) 2019 DStack Group.\n# Licensed under the MIT License. See License.txt in the project root for license information.\n# --------------------------------------------------------------------------------------------\n#\n# @description:\n\n# OpenAPI Specification version\nopenapi: 3.0.0\ninfo:\n\n  # arbitrary string that specifies the version of the API\n  version: 0.0.1\n\n  # API name\n  title: Butterfly User Manager API\n\n  # Extended information about the API\n  description: \u003e-\n    Butterfly User Manager REST API\n\n  contact:\n    name: DStack Group\n    email: dstackgroup@gmail.com\n    # url: https://example.com/\n\n# API server and base URL\nservers:\n  - url: http://localhost:5000\n    description: Development Server\n\n# tags are used for organizing operations\ntags:\n  - name: APIStatus\n    description: Non business operations related to the API health status and usage metrics\n  # - name: CRUD\n  #  description: Operations related to creating, reading, updating or deleting resources\n  - name: USERS\n    description: \u003e-\n      Operations that concern the User module. When a user is removed from the database,\n      its contact account and its subscriptions should be removed as well.\n  - name: USER-CONTACTS\n    description: \u003e-\n      Operations that link a user to a contaact account of a certain contact platform.\n      Before creating a user contact, it's necessary that a valid user exists.\n  - name: PROJECTS\n    description: Operations that concern the Project module\n  - name: SUBSCRIPTIONS\n    description: \u003e-\n      Operations that expresses the interest of a user for a particular event emitted by a project\n  - name: SEARCH\n    description: \u003e-\n      Operations which take in queries to perform a piece of work. For example matching users to alerts.\n\n# paths define the API exposed endpoints\npaths:\n  /health:\n    get:\n      operationId: getHealth\n      summary: Ensures the server is still alive\n      tags: [ 'APIStatus' ]\n      responses:\n        '204':\n          description: OK, no content to return\n\n  /health/metrics:\n    get:\n      operationId: getMetrics\n      summary: Returns some memory and platform metrics from the running server, for DevOps purposes\n      tags: [ 'APIStatus' ]\n      responses:\n        '200':\n          description: OK, returns the server metrics.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Metrics'\n\n  /users:\n    get:\n      operationId: getUsers\n      summary: Retrieves the list of registered users\n      tags: [ 'USERS' ]\n      responses:\n        '200':\n          description: OK, returns a list of user records.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n\n    post:\n      operationId: createUser\n      summary: Creates new user and returns the user record\n      tags: [ 'USERS' ]\n      requestBody:\n        description: User record\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUser'\n      responses:\n        '201':\n          description: OK, user inserted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/User'\n        '409':\n          description: Unique constraint violation, another user exists with the same email\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n  /users/{email}:\n    get:\n      operationId: getUserByEmail\n      summary: Searches a user by its email and returns its record data\n      tags: [ 'USERS' ]\n      parameters:\n        - in: path\n          name: email\n          schema:\n            type: string\n            format: email\n          required: true\n      responses:\n        '200':\n          description: OK, user found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/User'\n        '404':\n          description: Error, the user does not exist\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n    patch:\n      operationId: patchUserByEmail\n      summary: Updates the data of the user identified by the given email and returns the updated user record\n      tags: [ 'USERS' ]\n      parameters:\n      - in: path\n        name: email\n        schema:\n          type: string\n          format: email\n        required: true\n      requestBody:\n        description: User record\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUser'\n      responses:\n        '200':\n          description: OK, user updated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/User'\n        '404':\n          description: Error, the user does not exist\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n    delete:\n      operationId: deleteUserByEmail\n      summary: Removes the user that is registered with the given email\n      tags: [ 'USERS' ]\n      parameters:\n        - in: path\n          name: email\n          schema:\n            type: string\n            format: email\n          required: true\n      responses:\n        '200':\n          description: OK, user deleted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    nullable: true\n        '404':\n          description: Error, the user does not exist\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n  /user-contacts/{userEmail}:\n    get:\n      operationId: getUserContacts\n      summary: \u003e-\n        Lists all the contact platforms and accounts associated with the user identified by the given email.\n      tags: [ 'USER-CONTACTS' ]\n      parameters:\n        - in: path\n          name: userEmail\n          schema:\n            type: string\n            format: email\n          required: true\n      responses:\n        '200':\n          description: OK, returns the list of contacts available for the current user\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/UserContactMap'\n\n        '404':\n          description: Error, the user does not exist\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n  /user-contacts/{contactService}:\n    post:\n      operationId: createUserContact\n      summary: \u003e-\n        Creates a new association between an existing user and a new contact platform where the user wishes\n        to receive event notifications\n      tags: [ 'USER-CONTACTS' ]\n      parameters:\n        - in: path\n          name: contactService\n          schema:\n            $ref: '#/components/schemas/ThirdPartyContactService'\n          required: true\n      requestBody:\n        description: Contact account identifier for the given contact service\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - userEmail\n                - contactRef\n              properties:\n                userEmail:\n                  type: string\n                  format: email\n                  description: \u003e-\n                    the email that identifies the user which will have a new platform account\n                contactRef:\n                  type: string\n                  description: \u003e-\n                    the contact account id, such as the Telegram's bot chat id, the Slack's user id,\n                    or the Email address (possibly different from the currently registered email)\n      responses:\n        '201':\n          description: OK, new contact info added to the user identified by the given email\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/UserContact'\n\n        '404':\n          description: Error, the user does not exist\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n        '409':\n          description: Conflict error, there is already a contact defined for the given user and service\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n        '422':\n          description: Error, the chosen contact service isn't supported\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n  /user-contacts/{userEmail}/{contactService}:\n    put:\n      operationId: editUserContact\n      summary: \u003e-\n        Edits an existing association between a user and a contact platform where the user wishes\n        to receive event notifications\n      tags: [ 'USER-CONTACTS' ]\n      parameters:\n        - in: path\n          name: userEmail\n          schema:\n            type: string\n            format: email\n          required: true\n        - in: path\n          name: contactService\n          schema:\n            $ref: '#/components/schemas/ThirdPartyContactService'\n          required: true\n      requestBody:\n        description: Updated contact account identifier for the given contact service\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                contactRef:\n                  type: string\n                  description: \u003e-\n                    the new contact account id, such as the Telegram's bot chat id, the Slack's user id,\n                    or the Email address (possibly different from the currently registered email)\n      responses:\n        '200':\n          description: OK, new contact info updated for the user identified by the given email\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/UserContact'\n\n        '404':\n          description: Error, the user or the given contact association does not exist\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n        '422':\n          description: Error, the chosen contact service isn't supported\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n    delete:\n      operationId: deleteUserContact\n      summary: Removes the user contact specified by contact service. The user is identified by its email\n      tags: [ 'USER-CONTACTS' ]\n      parameters:\n        - in: path\n          name: userEmail\n          schema:\n            type: string\n            format: email\n          required: true\n        - in: path\n          name: contactService\n          schema:\n            $ref: '#/components/schemas/ThirdPartyContactService'\n          required: true\n      responses:\n        '200':\n          description: OK, contact info deleted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    nullable: true\n        '404':\n          description: Error, the contact info does not exist\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n  /projects:\n    get:\n      operationId: getProjects\n      summary: Retrieves the list of registered projects\n      tags: [ 'PROJECTS' ]\n      responses:\n        '200':\n          description: OK, returns a list of projects records.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Project'\n\n    post:\n      operationId: createProject\n      summary: Creates new project and returns the project record\n      tags: [ 'PROJECTS' ]\n      requestBody:\n        description: Project record\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateProject'\n      responses:\n        '201':\n          description: OK, project inserted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Project'\n        '409':\n          description: Unique constraint violation, another project exists with the same name\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n  /projects/{projectName}:\n    get:\n      operationId: getProjectByName\n      summary: Searches a project by its name and returns its record data\n      tags: [ 'PROJECTS' ]\n      parameters:\n        - in: path\n          name: projectName\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: OK, project found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Project'\n        '404':\n          description: Error, the project does not exist\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n    put:\n      operationId: updateProjectByName\n      summary: Updates the data of the project identified by the given project name and returns the updated project record\n      tags: [ 'PROJECTS' ]\n      parameters:\n      - in: path\n        name: projectName\n        schema:\n          type: string\n        required: true\n      requestBody:\n        description: Project record\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateProject'\n      responses:\n        '200':\n          description: OK, project updated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Project'\n        '404':\n          description: Error, the project does not exist\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n    delete:\n      operationId: deleteProjectByName\n      summary: Removes the project that is registered with the given project name\n      tags: [ 'PROJECTS' ]\n      parameters:\n        - in: path\n          name: projectName\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: OK, project deleted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    nullable: true\n        '404':\n          description: Error, the project does not exist\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n  /projects/{projectName}/{producerService}:\n    delete:\n      operationId: removeServiceURLByProjectNameAndProducerService\n      summary: Given a project name and a producer service name, removes the project URL associated with the specified producer service.\n      tags: [ 'PROJECTS' ]\n      parameters:\n        - in: path\n          name: projectName\n          schema:\n            type: string\n          required: true\n        - in: path\n          name: producerService\n          schema:\n            $ref: '#/components/schemas/ThirdPartyProducerService'\n          required: true\n      responses:\n        '200':\n          description: OK, the URL associated with the given producer service name has been removed. Returns the updated project record.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Project'\n\n        '404':\n          description: Error, the project does not exist\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n        '422':\n          description: Unprocessable Entity error, the given producer service name isn't valid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n  /subscriptions/users/{userEmail}/projects/{projectName}/event-types/{eventType}:\n    get:\n      operationId: getSubscription\n      summary: \u003e-\n        Given a user email, a project name, and a service event typology, it returns the subscription which associates the specified\n        user, project, and event type together, if any.\n      tags: [ 'SUBSCRIPTIONS' ]\n      parameters:\n        - in: path\n          name: userEmail\n          schema:\n            type: string\n            format: email\n          required: true\n          example: \"dstackgroup@gmail.com\"\n        - in: path\n          name: projectName\n          schema:\n            type: string\n          required: true\n          example: \"Butterfly\"\n        - in: path\n          name: eventType\n          schema:\n            $ref: '#/components/schemas/ServiceEventType'\n          required: true\n          example: GITLAB_COMMIT_CREATED\n\n      responses:\n        '200':\n          description: OK, subscription found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Subscription'\n\n        '404':\n          description: \u003e-\n            Error Not Found, the curren user never subscribed to the given project specifying the given event type.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n        '422':\n          description: \u003e-\n            Unprocessable Entity error, the given user email isn't valid, or the project name is either too long or contains special characters,\n            or the specified event type isn't supported.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n    patch:\n      operationId: updateSubscription\n      summary: \u003e-\n        Given a user email, a project name, and a service event typology, edits the existing subscription which associates the specified\n        user, project, and event type together, if any.\n      tags: [ 'SUBSCRIPTIONS' ]\n      parameters:\n        - in: path\n          name: userEmail\n          schema:\n            type: string\n            format: email\n          required: true\n          example: \"dstackgroup@gmail.com\"\n        - in: path\n          name: projectName\n          schema:\n            type: string\n          required: true\n          example: \"Butterfly\"\n        - in: path\n          name: eventType\n          schema:\n            $ref: '#/components/schemas/ServiceEventType'\n          required: true\n          example: GITLAB_COMMIT_CREATED\n      requestBody:\n        description: Subscription record\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateSubscription'\n      responses:\n        '200':\n          description: OK, subscription edited\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Subscription'\n\n        '404':\n          description: \u003e-\n            Error Not Found, the curren user never subscribed to the given project specifying the given event type.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n        '422':\n          description: \u003e-\n            Unprocessable Entity error, the given user email isn't valid, or the project name is either too long or contains special characters,\n            or the specified event type isn't supported.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n    delete:\n      operationId: deleteSubscription\n      summary: \u003e-\n        Removes a subscription that keeps the user identified by the given email notified about the given project and event type.\n      tags: [ 'SUBSCRIPTIONS' ]\n      parameters:\n        - in: path\n          name: userEmail\n          schema:\n            type: string\n            format: email\n          required: true\n          example: \"dstackgroup@gmail.com\"\n        - in: path\n          name: projectName\n          schema:\n            type: string\n          required: true\n          example: \"Butterfly\"\n        - in: path\n          name: eventType\n          schema:\n            $ref: '#/components/schemas/ServiceEventType'\n          required: true\n          example: GITLAB_COMMIT_CREATED\n      responses:\n        '200':\n          description: OK, subscription deleted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    nullable: true\n\n        '404':\n          description: \u003e-\n            Error Not Found, the curren subscription cannot be found.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n        '422':\n          description: \u003e-\n            Unprocessable Entity error, the given user email isn't valid, or the project name is either too long or contains special characters,\n            or the specified event type isn't supported.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n  /subscriptions:\n    post:\n      operationId: createSubscription\n      summary: \u003e-\n        Subscribes a user to a particular event of a project, sets the contact platform of choice to receive notifications\n        and a list of keywords to be compared with the contents of the future events.\n      tags: [ 'SUBSCRIPTIONS' ]\n      requestBody:\n        description: Subscription record\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateSubscription'\n      responses:\n        '201':\n          description: OK, subscription created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Subscription'\n\n        '404':\n          description: \u003e-\n            Error Not Found, may be due to the absence of an association between the user and the given contact platform,\n            due to the absence of a project with the given name, or maybe the chosen event isn't supported.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n        '409':\n          description: \u003e-\n            Unique constraint violation, another subscription which involves the same user, project and event type exists.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n  /search/receivers:\n    post:\n      operationId: searchEventMostLikelyReceivers\n      summary: \u003e-\n              Returns the list of users that have an interested in the current record,\n              and should thus get a notification from Butterfly.\n      tags: [ 'SEARCH' ]\n      requestBody:\n        description: Event record\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Event'\n      responses:\n        '201':\n          description: OK, the list of users which are most likely to be interested in the current\n                       event has been returned successfully. A copy of the current event has been saved\n                       to the database.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/UserContactInfoList'\n\n        '400':\n          description: \u003e-\n            Bad Request, cannot parse the given event structure.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\n        '422':\n          description: \u003e-\n            Unprocessable Entity error, the fields inside the event object aren't specified in a valid format.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: boolean\n                    description: error message\n\ncomponents:\n  schemas:\n    Metrics:\n      type: object\n      required:\n        - uptime\n        - platform\n        - freememory\n      properties:\n        uptime:\n          type: integer\n          format: int64\n        platform:\n          type: string\n        freememory:\n          type: integer\n          format: int64\n      example:\n        uptime: 15023\n        platform: \"Windows 10\"\n        freememory: 5000250\n\n    ThirdPartyProducerService:\n      type: string\n      enum:\n        - REDMINE\n        - GITLAB\n        - SONARQUBE\n\n    ThirdPartyContactService:\n      type: string\n      enum:\n        - TELEGRAM\n        - SLACK\n        - EMAIL\n\n    UserPriority:\n      type: string\n      enum:\n        - LOW\n        - MEDIUM\n        - HIGH\n\n    ServiceEventType:\n      type: string\n      enum:\n        - REDMINE_TICKET_CREATED\n        - REDMINE_TICKET_EDITED\n        - GITLAB_COMMIT_CREATED\n        - GITLAB_ISSUE_CREATED\n        - GITLAB_ISSUE_EDITED\n        - GITLAB_MERGE_REQUEST_CREATED\n        - GITLAB_MERGE_REQUEST_EDITED\n        - GITLAB_MERGE_REQUEST_MERGED\n        - GITLAB_MERGE_REQUEST_CLOSED\n        - SONARQUBE_PROJECT_ANALYSIS_COMPLETED\n\n    CreateUser:\n      type: object\n      required:\n        - email\n        - firstname\n        - lastname\n      properties:\n        email:\n          type: string\n        firstname:\n          type: string\n        lastname:\n          type: string\n        enabled:\n          type: boolean\n          default: true\n      example:\n        email: \"dstackgroup@gmail.com\"\n        firstname: \"DStack\"\n        lastname: \"Group\"\n\n    UpdateUser:\n      type: object\n      required:\n        - email\n      properties:\n        email:\n          type: string\n        firstname:\n          type: string\n        lastname:\n          type: string\n        enabled:\n          type: boolean\n          default: true\n      example:\n        email: \"dstackgroup@gmail.com\"\n        enabled: false\n\n    User:\n      type: object\n      required:\n        - userId\n        - email\n        - firstname\n        - lastname\n        - created\n      properties:\n        userId:\n          type: string\n        email:\n          type: string\n        firstname:\n          type: string\n        lastname:\n          type: string\n        enabled:\n          type: boolean\n        created:\n          type: string\n          format: date-time\n        modified:\n          type: string\n          format: date-time\n          nullable: true\n      example:\n        userId: \"1\"\n        email: \"dstackgroup@gmail.com\"\n        firstname: \"DStack\"\n        lastname: \"Group\"\n        enabled: true\n\n    UserContact:\n      type: object\n      required:\n        - userContactid\n        - userId\n        - contactType\n        - contactRef\n      properties:\n        userContactId:\n          type: string\n        userId:\n          type: string\n        contactType:\n          $ref: '#/components/schemas/ThirdPartyContactService'\n        contactRef:\n          type: string\n      example:\n        userContactId: \"23\"\n        userId: \"1\"\n        contactType: \"TELEGRAM\"\n        contactRef: \"12739814\"\n\n    UserContactMap:\n      type: object\n      properties:\n        TELEGRAM:\n          $ref: '#/components/schemas/UserContact'\n        SLACK:\n          $ref: '#/components/schemas/UserContact'\n        EMAIL:\n          $ref: '#/components/schemas/UserContact'\n      example:\n        TELEGRAM:\n          userContactId: \"23\"\n          userId: \"1\"\n          contactType: \"TELEGRAM\"\n          contactRef: \"12739814\"\n        EMAIL:\n          userContactId: \"24\"\n          userId: \"1\"\n          contactType: \"EMAIL\"\n          contactRef: \"someemail@gmail.com\"\n\n    ProjectURL:\n      type: object\n      properties:\n        REDMINE:\n          type: string\n          format: url\n          nullable: true\n        GITLAB:\n          type: string\n          format: url\n          nullable: true\n        SONARQUBE:\n          type: string\n          format: url\n          nullable: true\n      example:\n        REDMINE: \"http://redmine.dstack.unipd.it\"\n        GITLAB: \"http://gitlab.dstack.unipd.it\"\n\n    CreateProject:\n      type: object\n      required:\n        - projectName\n        - projectURL\n      properties:\n        projectName:\n          type: string\n        projectURL:\n          $ref: '#/components/schemas/ProjectURL'\n      example:\n        projectName: \"Butterfly\"\n        projectURL:\n          REDMINE: \"http://redmine.dstack.unipd.it\"\n          GITLAB: \"http://gitlab.dstack.unipd.it\"\n\n    UpdateProject:\n      type: object\n      required:\n        - projectName\n        - projectURL\n      properties:\n        projectName:\n          type: string\n        projectURL:\n          $ref: '#/components/schemas/ProjectURL'\n      example:\n        projectName: \"Butterfly\"\n        projectURL:\n          SONARQUBE: \"http://sonarqube.dstack.unipd.it\"\n\n    Project:\n      type: object\n      required:\n        - projectId\n        - projectName\n        - projectURL\n        - created\n      properties:\n        projectId:\n          type: string\n        projectName:\n          type: string\n        projectURL:\n          $ref: '#/components/schemas/ProjectURL'\n        created:\n          type: string\n          format: date-time\n        updated:\n          type: string\n          format: date-time\n          nullable: true\n      example:\n        projectId: \"2\"\n        projectName: \"Butterfly\"\n        projectURL:\n          REDMINE: \"http://redmine.dstack.unipd.it\"\n          GITLAB: \"http://gitlab.dstack.unipd.it\"\n          SONARQUBE: \"http://sonarqube.dstack.unipd.it\"\n\n    CreateSubscription:\n      type: object\n      required:\n        - userEmail\n        - projectName\n        - eventType\n        - contactServices\n        - userPriority\n        - keywords\n      properties:\n        userEmail:\n          type: string\n          format: email\n        projectName:\n          type: string\n        eventType:\n          $ref: '#/components/schemas/ServiceEventType'\n        contactServices:\n          type: array\n          items:\n            $ref: '#/components/schemas/ThirdPartyContactService'\n        userPriority:\n          $ref: '#/components/schemas/UserPriority'\n        keywords:\n          type: array\n          items:\n            type: string\n      example:\n        userEmail: \"dstackgroup@gmail.com\"\n        projectName: \"Butterfly\"\n        eventType: GITLAB_COMMIT_CREATED\n        contactServices:\n          - TELEGRAM\n          - SLACK\n        userPriority: HIGH\n        keywords:\n          - \"bug\"\n          - \"fix\"\n          - \"performance\"\n\n    UpdateSubscription:\n      type: object\n      properties:\n        contactType:\n          $ref: '#/components/schemas/ThirdPartyContactService'\n        userPriority:\n          $ref: '#/components/schemas/UserPriority'\n        keywords:\n          type: array\n          items:\n            type: string\n      example:\n        contactTypes:\n          - EMAIL\n          - SLACK\n        userPriority: HIGH\n        keywords:\n          - \"bug\"\n          - \"fix\"\n          - \"performance\"\n\n    Subscription:\n      type: object\n      required:\n        - subscriptionId\n        - userId\n        - projectId\n        - eventType\n        - contactType\n        - userPriority\n        - keywords\n      properties:\n        subscriptionId:\n          type: string\n        userId:\n          type: string\n        projectId:\n          type: string\n        eventType:\n          $ref: '#/components/schemas/ServiceEventType'\n        contactTypes:\n          type: object\n          properties:\n            '#/components/schemas/ThirdPartyContactService':\n              type: string\n        userPriority:\n          $ref: '#/components/schemas/UserPriority'\n        keywords:\n          type: array\n          items:\n            type: string\n      example:\n        subscriptionId: \"123\"\n        userEmail: \"1\"\n        projectName: \"2\"\n        eventType: GITLAB_COMMIT_CREATED\n        contactTypes:\n          TELEGRAM: \"1232398\"\n          EMAIL: \"dstackgroup@gmail.com\"\n        userPriority: HIGH\n        keywords:\n          - \"bug\"\n          - \"fix\"\n          - \"performance\"\n\n    UserContactInfo:\n      type: object\n      required:\n        - firstname\n        - lastname\n        - contacts\n      properties:\n        firstname:\n          type: string\n        lastname:\n          type: string\n        contactInfo:\n          type: array\n          items:\n            type: object\n            required:\n              - contactType\n              - contactRef\n            properties:\n              '#/components/schemas/ThirdPartyContactService':\n                type: string\n      example:\n        firstname: \"Jon\"\n        lastname: \"Snow\"\n        contactInfo:\n          TELEGRAM: \"120923823\"\n          EMAIL: \"jon.snow@got.co.uk\"\n\n    UserContactInfoList:\n      type: array\n      items:\n        $ref: '#/components/schemas/UserContactInfo'\n      example:\n        - firstname: \"Jon\"\n          lastname: \"Snow\"\n          contactInfo:\n            - contactType: TELEGRAM\n              contactRef: \"120923823\"\n            - contactType: EMAIL\n              contactRef: \"jon.snow@got.co.uk\"\n        - firstname: \"Sansa\"\n          lastname: \"Stark\"\n          contactInfo:\n            - contactType: SLACK\n              contactRef: \"23232nkn23\"\n\n    Event:\n      type: object\n      required:\n        - timestamp\n        - service\n        - projectName\n        - projectURL\n        - eventId\n        - eventType\n        - title\n        - description\n        - tags\n      properties:\n        timestamp:\n          type: string\n          format: date-time\n        service:\n          $ref: '#/components/schemas/ThirdPartyProducerService'\n        projectName:\n          type: string\n        projectURL:\n          type: string\n          nullable: true\n        eventId:\n          type: string\n        eventType:\n          $ref: '#/components/schemas/ServiceEventType'\n        userEmail:\n          type: string\n          format: email\n        title:\n          type: string\n        description:\n          type: string\n        tags:\n          type: array\n          items:\n            type: string\n      example:\n        service: GITLAB\n        projectName: Butterfly\n        projectURL: http://gitlab.dstack.unipd.it\n        eventId: \"1\"\n        eventType: GITLAB_ISSUE_CREATED\n        title: \"Fix kanban card\"\n        descripion: \"Todo kanban fixes for tomorrow\"\n        tags:\n          - BUG\n          - FIX\n\n  responses:\n    UserSuccessReturnRecord:\n        description: OK, user processed correctly\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                message:\n                  type: string\n                data:\n                  $ref: '#/components/schemas/User'\n\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n\n  parameters:\n    skip:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limit:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n\n",
			"canonicalURL": "/github.com/dstack-group/Butterfly@87952e4222e52db8511ef5f1ee4b6c0cd01a4ec5/-/blob/user-manager/user-manager-rest-api/openapi/user-manager-rest-api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/dstack-group/Butterfly/blob/87952e4222e52db8511ef5f1ee4b6c0cd01a4ec5/user-manager/user-manager-rest-api/openapi/user-manager-rest-api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:21905: duplicate path: \"/user-contacts/{userEmail}\""
}