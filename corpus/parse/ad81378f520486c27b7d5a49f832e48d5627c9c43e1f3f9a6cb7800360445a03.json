{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kvikuz/sls-web-application"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "openapi/api.yaml",
			"byteSize": 6882,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Movies API\nx-yc-apigateway:\n  service_account_id: ${MOVIES_API_SA_ID}\n\npaths:\n  /{file+}:\n    options:\n      parameters:\n        - name: file\n          in: path\n          description: greedy param\n          required: false\n          schema:\n            type: string\n      description: Greedy options\n      operationId: greedyOptions\n      x-yc-apigateway-integration:\n        type: dummy\n        http_code: 200\n        content:\n          \"*\": \"\"\n        http_headers:\n          Allow: OPTIONS, GET, HEAD, POST\n          Access-Control-Allow-Origin: '*'\n          Access-Control-Allow-Headers: Content-Type, Authorization\n  /movies:\n    get:\n      description: Returns movies sorted by popularity\n      operationId: getMovies\n      #security:\n      #  - httpBearerAuth: [ ]\n      parameters:\n        - name: limit\n          in: query\n          description: maximum number of results to return\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: movies response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Movie'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-yc-apigateway-integration:\n        type: serverless_containers\n        container_id: ${MOVIES_API_CONTAINER_ID}\n    post:\n      description: Upsert movie\n      operationId: postMovie\n      #security:\n      #  - httpBearerAuth: [ ]\n      requestBody:\n        description: Movie to upsert\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Movie'\n      responses:\n        '200':\n          description: movie response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Movie'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-yc-apigateway-integration:\n        type: serverless_containers\n        container_id: ${MOVIES_API_CONTAINER_ID}\n  /movies/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: ID of movie to delete\n        required: true\n        schema:\n          type: integer\n    get:\n      description: Returns movie based on the ID supplied\n      operationId: getMovieById\n      #security:\n      #  - httpBearerAuth: [ ]\n      responses:\n        '200':\n          description: movie response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Movie'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-yc-apigateway-integration:\n        type: serverless_containers\n        container_id: ${MOVIES_API_CONTAINER_ID}\n    delete:\n      description: deletes a single movie based on the ID supplied\n      operationId: deleteMovieById\n      #security:\n      #  - httpBearerAuth: [ ]\n      responses:\n        '204':\n          description: movie deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-yc-apigateway-integration:\n        type: serverless_containers\n        container_id: ${MOVIES_API_CONTAINER_ID}\n  /users/{userId}/votes:\n    post:\n      description: Post vote\n      operationId: postVote\n      #security:\n      #  - httpBearerAuth: [ ]\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Vote to post\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Vote'\n      responses:\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-yc-apigateway-integration:\n        type: cloud_datastreams\n        action: PutRecord\n        stream_name: ${MOVIES_DATABASE_PATH}/votes-stream\n        partition_key: '{userId}'\n    get:\n      description: Get vote\n      operationId: getVote\n      #security:\n      #  - httpBearerAuth: [ ]\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user\n          required: true\n          schema:\n            type: string\n        - name: movieId\n          in: query\n          description: ID of movie\n          required: true\n          schema:\n            type: number\n      responses:\n        '200':\n          description: vote response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Vote'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-yc-apigateway-integration:\n        type: serverless_containers\n        container_id: ${MOVIES_API_CONTAINER_ID}\ncomponents:\n  schemas:\n    Movie:\n      type: object\n      required:\n        - id\n        - original_title\n        - type\n      properties:\n        id:\n          type: integer\n        title:\n          type: string\n        type:\n          type: string\n        original_title:\n          type: string\n        original_language:\n          type: string\n        release_date:\n          type: string\n        poster_path:\n          type: string\n        popularity:\n          type: number\n        video:\n          type: string\n        vote_count:\n          type: integer\n        vote_average:\n          type: number\n        rating:\n          type: number\n        genres:\n          type: string\n        backdrop_path:\n          type: string\n        adult:\n          type: string\n        overview:\n          type: string\n\n    Error:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          type: string\n    Vote:\n      type: object\n      required:\n        - movie_id\n        - user_id\n        - value\n      properties:\n        movie_id:\n          type: integer\n        user_id:\n          type: string\n        value:\n          type: integer\n  securitySchemes:\n    httpBearerAuth:\n      type: http\n      scheme: bearer\n#      x-yc-apigateway-authorizer:\n#        type: function\n#        function_id: ${AUTHORIZER_FUNCTION_ID}\n#        authorizer_result_ttl_in_seconds: 7200",
			"canonicalURL": "/github.com/kvikuz/sls-web-application@1cbf2aab96a1ccf48440cd37cee6ad3b68a7e24f/-/blob/openapi/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/kvikuz/sls-web-application/blob/1cbf2aab96a1ccf48440cd37cee6ad3b68a7e24f/openapi/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/{file+}\": options: operation \"greedyOptions\": parameters: parse parameter \"file\": at 1:4630: path parameters must be required"
}