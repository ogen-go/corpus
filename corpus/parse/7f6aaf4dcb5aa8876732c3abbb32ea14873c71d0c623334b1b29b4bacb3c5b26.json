{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/egovernments/DIGIT-OSS"
		},
		"file": {
			"name": "dcrasservice.yaml",
			"size": 0,
			"path": "edcr/service/egov/egov-edcr/dcrasservice.yaml",
			"byteSize": 56095,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: eDCR as service\n  description: Service to scrutinize plan in dxf file format and generate report. Use the transaction number to track the status/retrieve saved information.\n  contact:\n    name: Egovernments Foundation\n    email: contact@egovernments.org\nservers:\n  - url: https://egov-micro-dev.egovernments.org/edcr\n    description: Development server\n\npaths:\n  /rest/dcr/scrutinize:\n    post:\n      summary: This API will scrutinize the building plan drawing(dxf) file send along and gives the plan scrutiny result as response along with a unique eDCR number on successful processing.\n      requestBody:\n        content:\n          multipart/mixed:\n            schema:\n              $ref: '#/components/schemas/ScrutinizePlanReq'\n            encoding:\n              dxfFile:\n                contentType: application/dxf\n      responses:\n        '200':\n          description: Plan scrutanized successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScrutinizePlanResponse'\n        '400':\n          description: Invalid Input\n          content:\n            application/json:\n              schema:\n                $ref: 'https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml#/definitions/ErrorRes'\n      tags:\n        - Scrutinize Plan\n                \n  /rest/dcr/scrutinydetails:\n    post:\n      summary:  This API is used to fetch the details of the plan that is already scrutinized in the system by providing a transaction number or a eDCR number.\n      requestBody:\n        description: Send the unique transaction number that was used for plan scrutiny or the system generated eDCR number that was received as part of the scrutiny response for getting the details of scrutiny.\n        content:\n          application/json:\n            schema:\n              $ref: 'https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml#/definitions/RequestInfo'\n      parameters:\n        - name: tenantId\n          in: query\n          description: Unique identifier of the city/state for which the record belong to.\n          required: true\n          schema:\n            type: string\n        - name: edcrNumber\n          in: query\n          description: edcr Number that was generated by the system as part of plan scrutiny.\n          required: false\n          schema:\n            type: string\n        - name: transactionNumber\n          in: query\n          description: Transaction Number number that was orignially sent to the system along with the drawing for scrutiny.\n          required: false\n          schema:\n            type: string\n        - name: appliactionType\n          in: query\n          description: Application type of application, either permit or occupancy certificate.\n          required: false\n          schema:\n            type: string\n        - name: applicationSubType\n          in: query\n          description: Service type of application .\n          required: false\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: Status of the application .\n          required: false\n          schema:\n            type: string\n            maxLength: 16\n        - name: fromDate\n          in: query\n          description: Search from a particular date submitted applications.\n          required: false\n          schema:\n            type: integer\n            format: int64\n            x-displayformat: 'dd/MM/yyyy'\n        - name: toDateDate\n          in: query\n          description: Search till a particular date submitted applications.\n          required: false\n          schema:\n            type: integer\n            format: int64\n            x-displayformat: 'dd/MM/yyyy'                   \n      responses:\n        '200':\n          description: Successfully list the details of the plan scrutiny if the system can identify the plan as per the details send. In case where system does not find the scrutiny details based on the input send, it will send a message back as \"Invalid Input- Record not found\".\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScrutinizePlanResponse'\n      tags:\n        - Search Scrutiny Details\n        \n  /rest/dcr/extractplan:\n    post:\n      summary: This API will extract the dcr data.\n      requestBody:\n        content:\n          multipart/mixed:\n            schema:\n              $ref: '#/components/schemas/ExtractPlanReq'\n            encoding:\n              dxfFile:\n                contentType: application/dxf\n      responses:\n        '200':\n          description: Plan extracted successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtractPlanResponse'\n        '400':\n          description: Invalid Input\n          content:\n            application/json:\n              schema:\n                $ref: 'https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml#/definitions/ErrorRes'\n      tags:\n        - Extract Plan\n\n  /rest/dcr/occomparison:\n    post:\n      summary:  This API is used to generate occupancy cetificate comparison report.\n      requestBody:\n        description: Send the unique edcr number and ocDcr number for getting the comparison report.\n        content:\n          application/json:\n            schema:\n              $ref: 'https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml#/definitions/RequestInfo'\n      parameters:\n        - name: tenantId\n          in: query\n          description: Unique identifier of the city/state for which the record belong to.\n          required: true\n          schema:\n            type: string\n        - name: edcrNumber\n          in: query\n          description: edcr Number that was generated by the system as part of plan scrutiny.\n          required: true\n          schema:\n            type: string\n        - name: ocdcrNumber\n          in: query\n          description: dcr Number that was generated by the system as part of oc plan scrutiny.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successfully get the comparison report.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ComparisonResponse'\n      tags:\n        - Generate/Fetch comparison report\n                \ncomponents:\n  schemas:\n    EdcrDetail:\n      type: object\n      description: EncrReqObject contains data to be encrypted and meta-data required to perform the encryption.\n      properties:\n        transactionNumber:\n          type: string\n          maxLength: 32\n          description: Unique Transaction Number for each request.\n        planDetail:\n          $ref: '#/components/schemas/PlanDetail'\n        edcrNumber:\n          type: string\n          maxLength: 32\n          description: If the plan is approved, eDCR number will be generated by the system.\n        comparisonEdcrNumber:\n          type: string\n          maxLength: 32\n          description: Used during oc scrutiny, comparisonEdcrNumber passed to the system for generating oc comparison report.          \n        planPdfs:\n          type: array\n          items:\n            type: string\n            format: url \n            description: System generated pdfs of the drawings(dxf) uploaded.\n        dxfFile:\n          type: string\n          format: url\n          description: Plan drawing file that is scrutinized which is of .dxf extension.\n          maximum: 23333\n        updatedDxfFile:\n          type: string\n          format: url\n          description: System upgraded version of the uploaded dxf file.\n          maximum: 23333\n        planReport:\n          type: string\n          format: url\n          description: System generated scrutiny report for the uploaded drawing(dxf). This will be a pdf file \n        status:\n          type: string\n          description: Status of the plan after the scrutiny process. If all the rules are passed the status will be \"Accepted\". If one of the rules is failed the status will be \"Not Accepted\".If there is issue in reading drawing or drawing not defined in standard format, then status will be \"Aborted\"\n          enum:\n            - Accepted\n            - Not Accepted\n            - Aborted\n        permitNumber:\n          type: string\n          maxLength: 32\n          description: Permit number.\n        permitDate:\n          type: integer\n          format: int64\n          x-displayformat: 'dd/MM/yyyy'\n          description: Plan permit date of application  \n        appliactionType:\n          type: string\n          maxLength: 32\n          description: Application Type of application.\n        applicationSubType:\n          type: string\n          maxLength: 32\n          description: Service Type of application.      \n        tenantId:\n          $ref: 'https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml#/parameters/tenantId'\n\n    ComparisonDetail:\n      type: object\n      description: Contains data of the comparison.\n      properties:\n        edcrNumber:\n          type: string\n          maxLength: 32\n          description: eDcr number passed to the system to generate comparison report.\n        ocdcrNumber:\n          type: string\n          maxLength: 32\n          description: ocDcr number passed to the system to generate comparison report.\n        comparisonReport:\n          type: string\n          format: url\n          description: System generated comparison report. This will be a pdf file\n        status:\n          type: string\n          maxLength: 32\n          description: status of comparison report.\n          example: Accepted or Not Accepted\n        tenantId:\n          $ref: 'https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml#/parameters/tenantId'\n\n    ScrutinizePlanReq:\n      type: object\n      description: This object contains data to be submitted for scrutanizing a plan drawing.\n      properties:\n        tenantId:\n          $ref: 'https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml#/parameters/tenantId'\n        applicantName:\n          type: string\n        transactionNumber:\n          type: string\n          maxLength: 32\n          description: Unique Transaction Number for each request.\n        appliactionType:\n          type: string\n          maxLength: 32\n          description: Application type \n        applicationSubType:\n          type: string\n          maxLength: 32\n          description: Service type   \n        requestInfo:\n          $ref: '#/components/schemas/RequestInfo'\n        dxfFile:\n          type: string\n          x-mimetype: application/dxf\n          description: The builing plan drawing file, in .dxf format, which needs to be scrutinized.\n        permitNumber:\n          type: string\n          maxLength: 32\n          description: Permit number.\n        permitDate:\n          type: integer\n          format: int64\n          x-displayformat: 'dd/MM/yyyy'\n          description: Plan permit date of application   \n      example:\n        tenantId: sonpur\n        transactionNumber: '1'\n        requestInfo: {}\n        dxfFile: ''\n        appliactionType: 'BUILDING_PLAN_SCRUTINY'\n        applicationSubType: 'NEW_CONSTRUCTION'\n      required:\n        - tenantId\n        - transactionNumber\n        - dxfFile\n        - appliactionType\n        - applicationSubType\n                \n    ScrutinizePlanResponse:\n      description: This object contains the response of a file scrutiny along with all the reports and status. \n      properties:\n        responseInfo:\n          $ref: 'https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml#/definitions/ResponseInfo'\n        edcrDetail:\n          description: Used for search result and create only\n          type: array\n          items:\n            $ref: '#/components/schemas/EdcrDetail'\n        \n    ComparisonResponse:\n      description: This object contains the response comparison. \n      properties:\n        responseInfo:\n          $ref: 'https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml#/definitions/ResponseInfo'\n        comparisonDetail:\n          description: Used to generate or fetch comparison report\n          type: object\n          items:\n            $ref: '#/components/schemas/ComparisonDetail'\n                        \n    planInformation:\n      type: object\n      description: Planinformation captures the declarations of the plan.Plan information captures the boundary, building location details,surrounding building NOC's etc. User will assert the details about the plot. The same will be used to print in plan report.\n      properties:\n        ownerName:\n          type: string\n          maxLength: 32\n          description: Temporary field used to capture Owner Name\n        plotArea:\n          type: number\n        occupancy:\n          type: string\n          maxLength: 32\n          description: Temporary field used to auto populate occupancy detail\n        serviceType:\n          type: string\n          maxLength: 32\n          description: Temporary field used for service type.\n        amenities: \n          type: string\n          maxLength: 32\n          description: Temporary field used to show amenities used in application.\n        architectInformation: \n          type: string\n          maxLength: 32\n          description: Save architect who submitted application mentioned in plan info.\n        applicantName:  \n          type: string\n          maxLength: 32\n          description: Applicant Name\n        crzZoneArea:  \n          type: boolean\n          description: Extracted from Plan info. Whether plot present in CRZ zone. Expecting default value as NO. \n        demolitionArea:\n          type: number\n          description: Extracted from Plan info. Demolition area to be mentioned in the plan info\n        depthCutting:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA. Extracted from Plan info. Depth cutting more than 1.5 Meter flag. \n        governmentOrAidedSchool:\n          type: string\n          maxLength: 3\n          description:  YES/NO/NA.Extracted from Plan info. Is building of type government or aided school.\n        securityZone:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Is plot comes under security zone flag.\n        accessWidth:\n          type: number\n          description: Extracted from Plan info.  Access width to the plot.\n        noOfBeds:\n          type: number\n          description: Extracted from Plan info.  In case of medical occupancy, capture number of beds present in the building. Sanitation details are decided based on number of beds present.\n        nocToAbutSideDesc:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. NOC received from the side owner\n        nocToAbutRearDesc:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. NOC received from the rear owner.\n        openingOnSide:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Any opening on sides of building.\n        openingOnRear:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Any opening on rear side of building.\n        noOfSeats:\n          type: number\n          description: Extracted from Plan info. Number of seats present in special occupancy \n        noOfMechanicalParking:\n          type: number\n          description: Extracted from Plan info. Number of mechanical parking declared in the plan\n        singleFamilyBuilding:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info.Is plan belongs to single family building. There are few rules relaxed for single family building \n        reSurveyNo:\n          type: string\n          maxLength: 32\n          description: Extracted from Plan info. Revenue survey number declared in the plan\n        revenueWard:\n          type: string\n          maxLength: 32\n          description: Extracted from Plan info. Revenue ward name declared in the plan\n        desam:\n          type: string\n          maxLength: 32\n          description: Extracted from Plan info. Desam name declared in the plan\n        village:\n          type: string\n          maxLength: 32\n          description: Extracted from Plan info. Village name declared in the plan\n        landUseZone:\n          type: string\n          maxLength: 32\n          description: Extracted from Plan info. Land Use zone. The value should be standard like RESIDENTIAL,COMMERCIAL,INDUSTRIAL,PUBLICANDSEMIPUBLIC etc.\n        leaseHoldLand:\n          type: string\n          maxLength: 32\n          description: YES/NO/NA. Extracted from Plan info. Is lease hold land\n        roadWidth:\n          type: number\n          description: Extracted from Plan info. Road width declared in the plan.\n        roadLength:\n          type: number\n          description: Extracted from Plan info. Road length declared in the plan.\n        typeOfArea:\n          type: string\n          maxLength: 32\n          description: Extracted from Plan info. Type of area. Whether old or new area.\n        depthOfPlot:\n          type: number\n          description: Extracted from Plan info. Average plot depth.\n        widthOfPlot:\n          type: number\n          description: Extracted from Plan info. Average plot width\n        buildingNearMonument:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA. Extracted from Plan info. Is building near to monument.\n        buildingNearGovtBuilding:\n          type: string\n          maxLength: 3 \n          description: YES/NO/NA.Extracted from Plan info. Is building near to government building\n        nocNearMonument: \n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Building near monument and permitted with NOC\n        nocNearAirport:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Building near airport and permitted with airport authority\n        nocNearDefenceAerodomes:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Building near defence aerodrome and permitted with NOC\n        nocStateEnvImpact:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Permitted with state Environmental impact assessment study report\n        nocRailways:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Permitted with railway NOC\n        nocCollectorGvtLand:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Permitted with noc issued by collector on govt. land\n        nocIrrigationDept:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Permitted with irrigation report NOC\n        nocFireDept:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Permitted with fire department NOC\n        buildingNearToRiver:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Building near the river flag\n        barrierFreeAccessForPhyChlngdPpl:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Barrier free access for physically handicapped person provided.\n        provisionsForGreenBuildingsAndSustainability:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Provision for green building and sustainability provided in plan.Rainwater harvesting,solar,segregation of waste etc.\n        fireProtectionAndFireSafetyRequirements:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Fire Protection And Fire Safety Requirements declared in the plan.\n        plotNo:\n          type: string\n          maxLength: 32\n          description: Extracted from Plan info.Plot number\n        khataNo:\n          type: string\n          maxLength: 32\n          description: Extracted from Plan info.Khata number.\n        mauza:\n          type: string\n          maxLength: 32\n          description: Extracted from Plan info.Mauza number.\n        district:\n          type: string\n          maxLength: 32\n          description: Extracted from Plan info.District name\n        rwhDeclared:\n          type: string\n          maxLength: 3\n          description: YES/NO/NA.Extracted from Plan info. Rain water declared in plan\n    Yard: \n      type: object\n      description: Plot and Set back details.\n      allOf:     # Combines the plot and measurement model\n        - $ref: '#/components/schemas/Measurement'\n      properties:\n        level:\n          type: number\n          format : int32\n          description: Each yard can at different level eg.Level 0 is considered ground Level -1 is basement. Based on type of building, levels used to define yards. The set of floors of similar shapre group under single level.\n        dimensions:\n          type:  array\n          items:\n            type: number\n          description: Different dimensions defined in the plan\n    SetBack: \n      type: object\n      description: Set back details.\n      properties:\n        frontYard:\n          $ref: '#/components/schemas/Yard'   \n          description: Front setback defined the plan\n        rearYard:\n          $ref: '#/components/schemas/Yard'             \n          description: Rear setback defined the plan\n        sideYard1:\n          $ref: '#/components/schemas/Yard'   \n          description: one side setback defined the plan\n        sideYard2:\n          $ref: '#/components/schemas/Yard'             \n          description: another side setback defined the plan  \n        level:\n          type: number\n          format : int32\n          description: setback defined for each level.  \n        buildingFootPrint:\n          $ref: '#/components/schemas/Measurement'\n    Plot: \n      type: object\n      description: Plot and Set back details.\n      allOf:     # Combines the plot and measurement model\n        - $ref: '#/components/schemas/Measurement'\n      properties:\n        name:\n          type: string\n          maxLength: 32\n          description: name of measurement field         \n        frontYard:\n          $ref: '#/components/schemas/Yard'   \n          description: Front setback defined the plan\n        rearYard:\n          $ref: '#/components/schemas/Yard'             \n          description: Rear setback defined the plan\n        sideYard1:\n          $ref: '#/components/schemas/Yard'   \n          description: one side setback defined the plan\n        sideYard2:\n          $ref: '#/components/schemas/Yard'             \n          description: another side setback defined the plan  \n        setBacks:\n          type:  array\n          items:\n            $ref: '#/components/schemas/SetBack'  \n        buildingFootPrint:\n          $ref: '#/components/schemas/Measurement'    \n        bsmtFrontYard:\n          $ref: '#/components/schemas/Yard'   \n          description: Basement Front setback defined the plan\n        bsmtRearYard:\n          $ref: '#/components/schemas/Yard'             \n          description: Basement Rear setback defined the plan\n        bsmtSideYard1:\n          $ref: '#/components/schemas/Yard'   \n          description: Basement one side setback defined the plan\n        bsmtSideYard2:\n          $ref: '#/components/schemas/Yard'             \n          description: Basement another side setback defined the plan \n        plotBndryArea:\n          type: number\n          format: double\n          description: Plot boundary area\n        smallPlot:\n          type: boolean\n          description: Small plot condition check flag          \n    Measurement: \n      type: object\n      description: Common object used to save measurement detail.\n      properties:\n        name:\n          type: string\n          maxLength: 32\n          description: name of measurement field \n        presentInDxf:\n          type: string\n          description: boolean to check whether defined in dxf file \n        minimumDistance:\n          type: number\n          format: double\n          description: Minimum distance \n        minimumSide: \n          type: number\n          format: double\n          description: Minimum side distance \n        length: \n          type: number\n          format: double\n          description: length of measurement   \n        width: \n          type: number\n          format: double\n          description: width of measurement    \n        height: \n          type: number\n          format: double\n          description: height of measurement  \n        mean: \n          type: number\n          format: double\n          description: mean area               \n        area: \n          type: number\n          format: double\n          description: area of measurement\n        colorCode: \n          type: number\n          format: int32\n          description: color code \n        isValid: \n          type: boolean\n          description: is valid flag. Use if required.            \n      \n    AccessoryBuilding:\n      type: object\n      description: Accessory buildings are outdoor structures such as attached or detached garages, sheds, playhouses, storage buildings, pergolas, garden structures, greenhouses, private studios, boathouses, pool houses, cabanas, and other similar residential buildings.\n      allOf:     # Combines the plot and measurement model\n        - $ref: '#/components/schemas/Measurement'\n      properties:\n        number:\n          type: string\n          maxLength: 32\n          description: Block number\n        distanceFromPlotBoundary:\n          type:  array\n          items:\n            type: number\n    \n    AccessoryBlock: \n      type: object\n      description: Accessory blocks are outdoor building which present with residential buildings used like attached garage, storage etc.\n      allOf:     # Combines the plot and measurement model\n        - $ref: '#/components/schemas/Measurement'\n      properties:\n        number:\n          type: string\n          maxLength: 32\n          description: Block number\n        accessoryBuilding:\n          $ref: '#/components/schemas/AccessoryBuilding'   \n        measurements:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'\n    Block: \n      type: object\n      description: Single plan contain multiple block/building information. Records Existing and proposed block information.  \n      allOf:     \n        - $ref: '#/components/schemas/Measurement'\n      properties:\n        name:\n          type: string\n          maxLength: 32\n          description: Block name\n        number:\n          type: string\n          maxLength: 32\n          description: Block number\n        numberOfLifts:\n          type: string\n          maxLength: 32\n          description: Number of lifts present in block         \n        building:\n          $ref: '#/components/schemas/Building'  \n        setBacks:\n          type:  array\n          items:\n            $ref: '#/components/schemas/SetBack'          \n        coverage:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'\n        coverageDeductions:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'\n        typicalFloor:\n          type:  array\n          items:\n            $ref: '#/components/schemas/TypicalFloor'    \n        disBetweenBlocks:\n          type:  array\n          items:\n            $ref: '#/components/schemas/BlockDistances'   \n        hallAreas:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Hall'               \n        diningSpaces:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'          \n        sanityDetails:\n          $ref: '#/components/schemas/SanityDetails'           \n        singleFamilyBuilding:  \n          type: boolean\n          description: Single family flag.\n        residentialBuilding:  \n          type: boolean\n          description: Residential building flag. Default value false   \n        residentialOrCommercialBuilding:  \n          type: boolean\n          description: Residential or commercial building flag. Default value false   \n        highRiseBuilding:  \n          type: boolean\n          description: High rise building flag. Default value false   \n        completelyExisting:  \n          type: boolean\n          description: Completely existing building flag. Default value false           \n        daRamps:\n          type:  array\n          items:\n            $ref: '#/components/schemas/DARamp'     \n        openStairs:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n        protectedBalconies:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n        plantationGreenStripes:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'                   \n        plinthHeight:\n          type:  array\n          items:\n            type: number\n          description: plint heights\n        interiorCourtYard:\n          type:  array\n          items:\n            type: number\n          description: Interior court yard details       \n        roofTanks:\n          type:  array\n          items:\n            type: number\n          description: Roof tanks dimensions in meter\n        stairCovers:\n          type:  array\n          items:\n            type: number\n          description: Stair covers  dimensions in meter    \n        chimneys:\n          type:  array\n          items:\n            type: number\n          description: Chimneys dimensions in meter\n        parapets:\n          type:  array\n          items:\n            type: number\n          description: parapet  dimensions in meter         \n        fireTenderMovement:\n          $ref: '#/components/schemas/FireTenderMovement'           \n    TypicalFloor:\n      type: object\n      description: Typical floor case handle using this object \n      properties:\n        modelFloorNo:\n          type: number\n          description: Model floor number. \n        repetitiveFloorNos:\n          type:  array\n          items:\n            type: number\n    BlockDistances:\n      type: object\n      description: Block distances \n      properties:\n        blockNumber:\n          type: string\n          description: Block number. \n        distances:\n          type:  array\n          items:\n            type: number\n    Hall:\n      type: object\n      allOf:     \n        - $ref: '#/components/schemas/Measurement'      \n      description: Hall details required in commercial cases\n      properties:\n        number:\n          type: string\n          description: Hall number. \n        builtUpArea:\n          type: number\n          format: double\n          description: Build up area of a hall. \n        deductions:\n          type: number\n          format : double\n          description: buildup area deductions\n\n    SanityDetails: \n      type: object\n      description: Sanitary details\n      properties:\n        totalSPWC:\n          type: number\n          format: int32\n          description: Total Special water closets\n        totalwashBasins:\n          type: number\n          format : int32\n          description: Total wash basins      \n        maleWaterClosets:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n        femaleWaterClosets:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n        commonWaterClosets:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n        urinals:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n        maleBathRooms:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n        femaleBathRooms:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n        commonBathRooms:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n        maleRoomsWithWaterCloset:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n        femaleRoomsWithWaterCloset:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n        commonRoomsWithWaterCloset:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n        drinkingWater:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n        totalSpecialWC:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'       \n    DARamp: \n      type: object\n      description: Disabled facility ramp details\n      allOf:     \n        - $ref: '#/components/schemas/Measurement'\n      properties:\n        number:\n          type: number\n          format: int32\n          description: Ramp number\n        slope:\n          type: number\n          format: double\n          description: Slope number\n        measurements:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'\n    FireTenderMovement: \n      type: object\n      description: Fire tender movement\n      properties:\n        errors:\n          type:  array\n          items:\n            type: string\n        fireTenderMovements:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'\n    Building: \n      type: object\n      description: Building details\n      allOf:     \n        - $ref: '#/components/schemas/Measurement'\n      properties:\n        buildingHeight:\n          type: number\n          format: double\n          description: building height as per measurement\n        declaredBuildingHeight:\n          type: number\n          format: double\n          description: building height as per declared in planinfo\n        heightIncreasedBy:\n          type: string\n          description: Flag used to check whether height increased by chimney,roof tank or stair cover calculation\n        buildingTopMostHeight:\n          type: number\n          format: double\n          description: building height to topmost level\n        totalFloorArea:\n          type: number\n          format: double\n          description: Total floor area \n        totalExistingFloorArea:\n          type: number\n          format: double\n          description: Total existing building floor area\n        far:\n          type: number\n          format: double\n          description: FSI area\n        coverage:\n          type: number\n          format: double\n          description: Coverage in percentage\n        coverageArea:\n          type: number\n          format: double\n          description:  Coverage area\n        maxFloor:\n          type: number\n          format: double\n          description:  Maximum floor\n        totalFloors:\n          type: number\n          format: double\n          description: Total floors   \n        floorsAboveGround:\n          type: number\n          format: double\n          description: Floor above ground\n        exteriorWall:\n          $ref: '#/components/schemas/Measurement'   \n        shade:\n          $ref: '#/components/schemas/Measurement' \n        floors:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Floor'          \n        distanceFromBuildingFootPrintToRoadEnd:\n          type:  array\n          items:\n            type:  number\n        distanceFromSetBackToBuildingLine:\n          type:  array\n          items:\n            type:  number\n        totalBuitUpArea:\n          type: number\n          format: double\n          description: Total build up area   \n        totalExistingBuiltUpArea:\n          type: number\n          format: double\n          description: Total existing build up area   \n        mostRestrictiveOccupancy:\n          $ref: '#/components/schemas/OccupancyType'               \n        mostRestrictiveOccupancyType:\n          $ref: '#/components/schemas/OccupancyType'          \n        mostRestrictiveFarHelper:\n          $ref: '#/components/schemas/OccupancyTypeHelper'       \n        occupancies:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Occupancy'   \n          description: The list of occupancies present in the building. The occupancies are grouped by combining with different floor/ conversion logic.           \n        totalArea:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Occupancy'\n          description: This would be plain sum of occupancies without converting. Occupancies as declared in plan   \n        isHighRise:\n          type: boolean\n          description: Flag used to check high rise building\n        passage:\n          $ref: '#/components/schemas/Passage'      \n        headRoom:\n          $ref: '#/components/schemas/HeadRoom'                \n    Passage:\n      type: object\n      description: Passage details in the building\n      allOf:     \n        - $ref: '#/components/schemas/Measurement'\n      properties:\n        passageDimensions:\n          type:  array\n          items:\n            type:  number\n        passageStairDimensions:\n          type:  array\n          items:\n            type:  number            \n    HeadRoom:\n      type: object\n      description: Head room details of the building      \n      allOf:     \n        - $ref: '#/components/schemas/Measurement'\n      properties:\n        headRoomDimensions:\n          type:  array\n          items:\n            type:  number      \n    OccupancyType:\n      type: object\n      description: Electric lines which are passed through plot\n      properties:\n        occupancyTypeVal:\n          type:  string\n          description: List of occupancies defined    \n\n    OccupancyTypeHelper:\n      type: object\n      description: Electric lines which are passed through plot\n    Floor: \n      type: object\n      description: Electric lines which are passed through plot\n      allOf:     \n        - $ref: '#/components/schemas/Measurement'\n      properties:\n        units:\n          type:  array\n          items:\n            $ref: '#/components/schemas/FloorUnit'     \n        daRooms:\n          type:  array\n          items:\n            $ref: '#/components/schemas/DARoom'     \n        vehicleRamps:\n          type:  array\n          items:\n            $ref: '#/components/schemas/VehicleRamp'    \n        ramps:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Ramp'  \n        lifts:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Lift' \n        daLifts:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Lift'  \n        exterior:    \n          $ref: '#/components/schemas/Measurement'  \n        parking:    \n          $ref: '#/components/schemas/ParkingDetails'            \n        specialWaterClosets:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'    \n        coverageDeduct:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'   \n        name:\n          type: string\n          description: Floor name.       \n        number:\n          type: string\n          description: Floor number.                 \n        occupancies:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Occupancy'   \n        mezzanineFloor:\n          type:  array\n          items:\n            $ref: '#/components/schemas/MezzanineFloor'               \n        exitWidthDoor:\n          type:  array\n          items:\n            type:  number\n        exitWidthStair:\n          type:  array\n          items:\n            type:  number\n        halls:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Hall'              \n        convertedOccupancies:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Occupancy' \n        generalStairs:\n          type:  array\n          items:\n            $ref: '#/components/schemas/GeneralStair'  \n        fireStairs:\n          type:  array\n          items:\n            $ref: '#/components/schemas/FireStair'  \n        spiralStairs:\n          type:  array\n          items:\n            $ref: '#/components/schemas/SpiralStair'  \n        acRoom:\n            $ref: '#/components/schemas/Room'  \n        regularRoom:\n            $ref: '#/components/schemas/Room'              \n        kitchen:\n            $ref: '#/components/schemas/Room'               \n        bathRoom:\n            $ref: '#/components/schemas/Room'                \n        waterClosets:\n            $ref: '#/components/schemas/Room'                \n        bathRoomWaterClosets:\n            $ref: '#/components/schemas/Room'   \n        heightFromTheFloorToCeiling:\n          type:  array\n          items:\n            type: number\n        heightOfTheCeilingOfUpperBasement:\n          type:  array\n          items:\n            type: number\n        interiorOpenSpace:\n            $ref: '#/components/schemas/InteriorOpenSpace'                           \n        verandah:\n            $ref: '#/components/schemas/MeasurementWithHeight'   \n        lightAndVentilation:\n            $ref: '#/components/schemas/MeasurementWithHeight'   \n        balconies:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Balcony'  \n        overHangs:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Measurement'              \n        floorHeights:\n          type:  array\n          items:\n            type:  number\n    Balcony:\n      type: object\n      description: Balcony detail           \n    MeasurementWithHeight:\n      type: object\n      description: Measurement with height detail   \n    InteriorOpenSpace:\n      type: object\n      description: Interior open space object     \n    Room:\n      type: object\n      description: Room object          \n    MezzanineFloor:\n      type: object\n      description: Mezzanine floor detail\n    ParkingDetails:   \n      type: object\n      description: Parking detail\n    GeneralStair:   \n      type: object\n      description: General stair detail\n    FireStair:   \n      type: object\n      description: Fire stair detail\n    SpiralStair:   \n      type: object\n      description: Spiral stair detail      \n    FloorUnit:   \n      type: object\n      description: Number of units present in each floor. Used in apartment, lodge etc use cases.\n    DARoom:   \n      type: object\n      description: DA Rooms\n    Lift:   \n      type: object\n      description: Lift details\n\n    VehicleRamp:\n      type: object\n      description: Vehicle ramp details    \n    Ramp:   \n      type: object\n      description: Ramps details    \n    virtualBuilding: \n      type: object\n      description: Temporary building object used to validate rules based on overall plot/buildings details. Example Total buildup area of all the blocks, Unique occupancies present in this plot etc.      \n    electricLine: \n      type: object\n      description: Electric lines which are passed through plot\n    nonNotifiedRoad:  \n      type: object\n      description: Non notified road like municipal road etc which are present next to plot\n    notifiedRoad:  \n      type: object\n      description: Notified road like highway road etc which are present next to plot\n    culdeSacRoad:  \n      type: object\n      description: Irregular shape roads which are present next to plot\n    laneRoad:  \n      type: object\n      description: Lane road which are present next to plot\n    parkingDetails:  \n      type: object\n      description: Parking facilities provided in the plot. Includes visitor, two wheeler, four wheeler etc\n    Occupancy:  \n      type: object\n      description: List of occupancies present in the plot inclusive of all the blocks.\n    utility:  \n      type: object\n      description: Utilities of building like solar,waste disposal plant, watertank, rain water harvesting etc\n    farDetails:  \n      type: object\n      description: Calculated Permissible FSI and provided FSI details\n    drawingPreference:  \n      type: object\n      description: Drawing standard parameters required to process dxf file    \n    septicTank:  \n      type: object\n      description: List of Septic tanks defined in the plan\n    plantation:  \n      type: object\n      description: Trees and plant defined in the plan\n    guardRoom:  \n      type: object\n      description: Guard room details\n    segregatedToilet:  \n      type: object\n      description: Segregated toilet facilities for visitors in Public Buildings (within the premises of the building, but outside the building block)      \n    distanceToExternalEntity:  \n      type: object\n      description: Distance of plot with external entities like rive, lake, monuments, government building etc are grouped    \n    measurement:  \n      type: object\n      description: Common object used to capture length,width,height,mean etc\n    reportOutput:  \n      type: object\n      description: The report output object. Based on type of building and occupancies,the rules are validated and rules which are considered for the submitted plan are recorded in this object             \n    \n    PlanDetail:\n      type: object\n      description: All the details extracted from the plan are referred in this object\n      properties:\n        edcrPassed:\n          type: boolean\n          description: Plan scrutiny report status. Values true mean \"Accepted\" and False mean \"Not Accepted\". Default value false. On plan scrutiny, if all the rules are success then value is true. \n        applicationDate:\n          type: integer\n          format: int64\n          x-displayformat: 'dd/MM/yyyy'\n          description: Submission date of plan scrutiny\n        planInformation:\n          $ref: '#/components/schemas/planInformation'  \n        plot:\n          $ref: '#/components/schemas/Plot'    \n        block:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Block'  \n        accessoryBlocks:\n          type:  array\n          items:\n            $ref: '#/components/schemas/AccessoryBlock'    \n        virtualBuilding:   \n          $ref: '#/components/schemas/virtualBuilding'    \n        electricLine:\n          type:  array\n          items:\n            $ref: '#/components/schemas/electricLine'   \n        nonNotifiedRoads:\n          type:  array\n          items:\n            $ref: '#/components/schemas/nonNotifiedRoad'   \n        notifiedRoads:\n          type:  array\n          items:\n            $ref: '#/components/schemas/notifiedRoad' \n        culdeSacRoads:\n          type:  array\n          items:\n            $ref: '#/components/schemas/culdeSacRoad' \n        laneRoads:\n          type:  array\n          items:\n            $ref: '#/components/schemas/laneRoad'     \n        travelDistancesToExit:\n          type:  array\n          items:\n            type: number\n          description: Travel distance to exit from the buildings\n        parkingDetails:  \n          type:  array\n          items:\n            $ref: '#/components/schemas/parkingDetails' \n        canopyDistanceFromPlotBoundary:\n          type:  array\n          items:\n            type: number\n          description: If canopy present, capture distance from the plot boundary  to canopy.   \n        occupancies:\n          type:  array\n          items:\n            $ref: '#/components/schemas/Occupancy'  \n        utility:\n          $ref: '#/components/schemas/utility'   \n        coverage:\n          type: number\n          format: BigDecimal\n          description: coverage Overall Coverage of all the block. Total area of all the floor/plot area.\n        farDetails:\n          $ref: '#/components/schemas/farDetails'   \n        drawingPreference:\n          $ref: '#/components/schemas/drawingPreference'     \n        septicTank:\n          type:  array\n          items:\n            $ref: '#/components/schemas/septicTank'    \n        plantation:\n          $ref: '#/components/schemas/plantation'   \n        guardRoom:\n          $ref: '#/components/schemas/guardRoom'             \n        segregatedToilet:\n          $ref: '#/components/schemas/segregatedToilet'  \n        surrenderRoads:\n          type:  array\n          items:\n            $ref: '#/components/schemas/measurement'  \n          description: surrendered roads with width detail\n        totalSurrenderRoadArea:\n          type: number\n          format: BigDecimal\n          description: For proposed road widening, surrendered road area.This area will be used to calculate FAR,setback and permissible buildup area  \n        distanceToExternalEntity:\n          $ref: '#/components/schemas/distanceToExternalEntity'            \n        errors:\n          type: array\n          items:\n            type: array\n            items:\n              type: string\n          description: Used to show drawing mistakes, General errors, mistakes in following layer/color coding standard etc        \n        reportOutput:\n          $ref: '#/components/schemas/reportOutput'           \n        noObjectionCertificates:\n          type: array\n          items:\n            type: array\n            items:\n              type: string\n          description: System will evaluate the list of noc's required based on the plan input\n          \n    ExtractPlanReq:\n      type: object\n      description: This object contains data to be submitted for extracting a plan drawing.\n      properties:\n        tenantId:\n          $ref: 'https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml#/parameters/tenantId'\n        applicantName:\n          type: string\n        requestInfo:\n          $ref: '#/components/schemas/RequestInfo'\n        dxfFile:\n          type: string\n          x-mimetype: application/dxf\n          description: The builing plan drawing file, in .dxf format, which needs to be scrutinized.\n      example:\n        tenantId: sonpur\n        transactionNumber: '1'\n        requestInfo: {}\n        dxfFile: ''\n      required:\n        - tenantId\n        - dxfFile          \n            \n    ExtractPlanResponse:\n      description: This object contains the response of a file scrutiny along with all the reports and status. \n      properties:\n        responseInfo:\n          $ref: 'https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml#/definitions/ResponseInfo'\n        planDetail:\n          type: string\n          description: Data extracted from drawing in json\n          \n    RequestInfo:\n      type: object\n      description: RequestInfo should be used to carry meta information about the requests to the server as described in the fields below. All eGov APIs will use requestinfo as a part of the request body to carry this meta information. Some of this information will be returned back from the server as part of the ResponseInfo in the response body to ensure correlation.\n      properties:\n        apiId:\n          type: string\n          description: unique API ID\n          maxLength: 128\n        ver:\n          type: string\n          description: API version - for HTTP based request this will be same as used in path\n          maxLength: 32\n        ts:\n          type: integer\n          format: int64\n          description: time in epoch\n        action:\n          type: string\n          description: API action to be performed like _create, _update, _search (denoting POST, PUT, GET) or _oauth etc\n          maxLength: 32\n        did:\n          type: string\n          description: Device ID from which the API is called\n          maxLength: 1024\n        key:\n          type: string\n          description: API key (API key provided to the caller in case of server to server communication)\n          maxLength: 256\n        msgId:\n          type: string\n          description: Unique request message id from the caller\n          maxLength: 256\n        requesterId:\n          type: string\n          description: UserId of the user calling\n          maxLength: 256\n        authToken:\n          type: string\n          description: //session/jwt/saml token/oauth token - the usual value that would go into HTTP bearer token\n        userInfo:\n          $ref: '#/components/schemas/UserInfo'\n        correlationId:\n          type: string\n          readOnly: true\n      required:\n        - apiId\n        - ver\n        - ts\n        - msgId\n        - action      \n          \n    UserInfo:\n      type: object\n      description: This is acting ID token of the authenticated user on the server. Any value provided by the clients will be ignored and actual user based on authtoken will be used on the server. \n      readOnly: true\n      properties:\n        tenantId:\n          type: string\n          description: Unique Identifier of the tenant to which user primarily belongs\n        uuid: \n          type: string\n          description: System Generated User id of the authenticated user.\n        userName: \n          type: string\n          description: Unique user name of the authenticated user\n        password: \n          type: string\n          description: password of the user.  \n        idToken: \n          type: string\n          description: This will be the OTP.\n        mobile:\n          type: string\n          description: mobile number of the autheticated user\n        email: \n          type: string\n          description: email address of the authenticated user\n        primaryrole:\n          type: array\n          description: List of all the roles for the primary tenant\n          items:\n            $ref: '#/components/schemas/Role'\n        additionalroles:\n          type: array\n          description: array of additional tenantids authorized for the authenticated user\n          items:\n            $ref: '#/components/schemas/TenantRole'\n            \n    TenantRole:\n      type: object\n      description: User role carries the tenant related role information for the user. A user can have multiple roles per tenant based on the need of the tenant. A user may also have multiple roles for multiple tenants.\n      properties:\n        tenantId: \n          type: string\n          description: tenantid for the tenant\n        roles:\n          type: array\n          description: Roles assigned for a particular tenant - array of role codes/names\n          items: \n            $ref: \"#/components/schemas/Role\"\n      required:\n        - tenantId\n        - roles             \n            \n    Role:\n      type: object\n      description: |\n        minimal representation of the Roles in the system to be carried along in UserInfo with RequestInfo meta data. Actual authorization service to extend this to have more role related attributes\n      properties:\n        name:  \n          type: string\n          description: Unique name of the role\n          maxLength: 64\n        code: \n          type: string\n          description: Unique code of the role\n          maxLength: 64\n        description:\n          type: string\n          description: brief description of the role\n      required:\n        - name\n          \n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"ScrutinizePlanResponse\": parse schema: property \"edcrDetail\": parse schema: item: parse schema: resolve \"#/components/schemas/EdcrDetail\": parse schema: property \"tenantId\": parse schema: resolve \"https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml#/parameters/tenantId\": find schema: external base \"https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml\" is not supported"
}