{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/belbio/bel_api"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "app/swagger.yaml",
			"byteSize": 53584,
			"content": "openapi: 3.0.0\n\nservers:\n  - description: Production server V1\n    url: https://api.bel.bio/v1\n\ninfo:\n  title: BELBio REST API\n  description: |\n\n    ## BEL Bio REST API\n\n    [More BEL API documentation](http://bel-api.readthedocs.io/en/latest/), installation, etc\n\n    ## Security\n\n    This API can be secured via JSON Web Token passed\n    in the Authorization header, but it is currently disabled. Since\n    only GETs are allowed at this point, it does not appear necessary\n    to restrict access.\n\n    The terminology services and some utility API endpoints have been\n    created at this point.  The BEL, Nanopubs and Edges endpoints\n    are to be implemented in the future.\n\n    **Note the Endpoints in the TODO section are only documented and\n    not yet implemented**\n\n  version: 0.2.5\n  contact:\n    name: whayes@adsworks.com\n    url: https://bel.bio\n\nsecurity:\n- JwtApiKey: []\n\ntags:\n- name: BEL\n  description: BEL Language endpoints\n- name: Terminologies\n  description: Namespace and Annotation terminology endpoints\n- name: Nanopubs\n  description: Nanopub endpoints\n- name: Edges\n  description: Edge endpoints\n- name: Utility\n  description: Utility endpoints\n- name: TODO\n  description: These endpoints not implemented, only documented\n\npaths:\n\n  /bel/versions:\n    get:\n      summary: BEL Versions\n      tags:\n        - BEL\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n\n  /bel/{version}/specification:\n    get:\n      summary: BEL Specification\n      tags:\n        - BEL\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /bel/{version}/completion/{text}:\n    get:\n      summary: BEL Assertion Completion\n      description: |\n        BEL completion will provide synactically and semantically valid suggestions for\n        functions, namespace arguments (NSArgs) and string arguments (StrArg) if\n        that StrArg is a default namespace type argument.\n\n        ## Notes\n\n        * Namespace value completions will only be returned after at least two characters\n        are provided.\n\n        * If a completion has both functions and namespaces, it can be up to 2X the\n        size parameter as both returned completion lists are added together with\n        the function completion list taking priority. The function list,\n        given at least two characters for filtering, will be very small or empty.\n\n        ## Examples:\n\n        * completion_text=\"\" - provide list of all primary functions for completion\n        * ='p' - only provide functions starting with 'p'\n        * ='p(' - provide fus() as the only completion since it is the only function that can be in position 1 of the proteinAbundance() function\n        * ='p(AK' - no functions match so only namespace values will be returned\n        * ='p(HGNC:AKT1)' cursor_loc=3  completion_text = 'HG' completions will be returned for all values that have the Protein entity type based on the p() function signature specification. HG will NOT be considered part of the namespace to limit to the HGNC namespace.\n        * ='p(HGNC:AKT1)' cursor_loc=8 completion_text = 'AK' completions will use HGNC namespace and the entity type Protein to filter the results.\n        * ='p(HGNC:AKT1) in' completion_text = 'in', relation replacement found will be 'increases'\n\n        Note: Any forward slashes '/' in the completion text need to be replaced\n          with _FORWARDSLASH_ otherwise it will get interpreted as\n          another path component and will likely not match a valid\n          url path (e.g. if gene_id=\"stupid/name\" - this will look like\n          /bel/{version}/completion/stupid/name and not match /bel/{version}/completion/{text} since there is\n          an extra path component.\n      tags:\n        - BEL\n      operationId: getBelCompletion\n      parameters:\n      - name: version\n        in: path\n        required: true\n        description: BEL Version\n        schema:\n          type: string\n      - name: text\n        in: path\n        required: true\n        description: Completion text\n        schema:\n          type: string\n      - name: cursor_loc\n        in: query\n        required: false\n        description: |\n          Cursor location in completion text. First char is 0. If not provided, it will default\n          to the end of the string which is what is usually desired.\n        schema:\n          type: integer\n      - name: bel_comp\n        in: query\n        required: false\n        description: |\n          Can be used to enhance validation. Values can be\n          either 'subject', 'object' or 'full'.\n        schema:\n          type: string\n      - name: bel_fmt\n        in: query\n        required: false\n        description: |\n          Used to select short, medium or long BEL formatting for\n          BEL Completions. Defaults to medium.\n\n          * short: short format for BEL Functions and Relations\n          * medium: short format for BEL Functions and long format for Relations\n          * long: long format for BEL Functions and Relations\n        schema:\n          type: string\n          enum: [short, medium, long]\n      - name: species_id\n        in: query\n        required: false\n        description: |\n          Species ID which can be used to filter possible completions. For example,\n          if the part of the BEL Assertion to complete is a proteinAbundance function\n          and the part to complete is the first argument of that function, the\n          completions provided will be Proteins associated with the given species_id.\n        schema:\n          type: string\n      - name: size\n        in: query\n        required: false\n        description: How many completions to return, defaults to 10\n        schema:\n          type: integer\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BelCompletion'\n\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /bel/{version}/validate/{statement}:\n    get:\n      summary: Validate\n      description: |\n        Validate BEL\n\n        Note: Any forward slashes '/' in the subject|statement\n          or object need to be replaced with _FORWARDSLASH_\n          otherwise it will get interpreted as another path\n          component and will likely not match a valid\n          url path (e.g. if subject=\"p(GO:\\\"stupid/name\\\")\" -\n          this will add an extra path parameter by mistake by\n          mis-interpreting the '/'.\n\n      tags:\n      - TODO\n      operationId: getBelValidate\n      parameters:\n      - name: subject\n        in: path\n        required: true\n        description: BEL Subject\n        schema:\n          type: string\n      - name: relation\n        in: path\n        required: true\n        description: BEL Relationship\n        schema:\n          type: string\n      - name: object\n        in: path\n        required: true\n        description: BEL Object\n        schema:\n          type: string\n      - name: ast\n        in: query\n        required: false\n        description: |\n          If AST is requested, the abstract syntax tree of the\n          BEL Edges will be provided in the response.\n        schema:\n          type: boolean\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  valid:\n                    type: boolean\n                  bel:\n                    type: object\n                    properties:\n                      subject:\n                        type: string\n                      relation:\n                        type: string\n                      object:\n                        type: string\n                  ast:\n                    type: object\n                    description: |\n                      If AST is requested (by query param), provide\n                      the AST along with the Edge subject, relation, and\n                      objects.\n                    additionalProperties:\n                      type: object\n                  messages:\n                    type: array\n                    items:\n                      type: string\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /bel/{version}/canonicalize/{bel_string}:\n    get:\n      summary: Canonicalize BEL\n      description: |\n        Canonicalize BEL\n\n        Note: Any forward slashes '/' in the bel_string\n          need to be replaced with _FORWARDSLASH_\n          otherwise it will get interpreted as another path\n          component and will likely not match a valid\n          url path (e.g. if bel_string=\"p(GO:\\\"stupid/name\\\")\" -\n          this will add an extra path parameter by mistake by\n          mis-interpreting the '/'.\n      tags:\n        - BEL\n      operationId: getBelCanonicalize\n      parameters:\n      - name: bel_string\n        in: path\n        required: true\n        description: BEL String\n        schema:\n          type: string\n      - name: namespace_targets\n        in: query\n        required: false\n        description: |\n          string serialization of List[Map[str,List[str]]]\n          e.g. [{\"HGNC\": [\"EG\", \"SP\"]}] to indicate HGNC should be canonicalized\n          into the EG or SP namespace returning original term if no canonical form\n          exists. Priority of namespace conversion is determined by the order of the\n          target namespaces listed.\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  canonicalized:\n                    type: string\n                  original:\n                    type: string\n                  messages:\n                    type: array\n                    items:\n                      type: string\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /bel/{version}/decanonicalize/{bel_string}:\n    get:\n      summary: Decanonicalize BEL\n      description: |\n        Decanonicalize BEL\n\n        Note: Any forward slashes '/' in the bel_string\n          need to be replaced with _FORWARDSLASH_\n          otherwise it will get interpreted as another path\n          component and will likely not match a valid\n          url path (e.g. if subject=\"p(GO:\\\"stupid/name\\\")\" -\n          this will add an extra path parameter by mistake by\n          mis-interpreting the '/'.\n      tags:\n      - BEL\n      operationId: getBelDecanonicalize\n      parameters:\n      - name: bel_string\n        in: path\n        required: true\n        description: BEL String\n        schema:\n          type: string\n      - name: namespace_targets\n        in: query\n        required: false\n        description: |\n          string serialization of List[Map[str,List[str]]]\n          e.g. [{\"HGNC\": [\"EG\", \"SP\"]}] to indicate HGNC should be canonicalized\n          into the EG or SP namespace returning original term if no canonical form\n          exists. Priority of namespace conversion is determined by the order of the\n          target namespaces listed.\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  decanonicalized:\n                    type: string\n                  original:\n                    type: string\n                  messages:\n                    type: array\n                    items:\n                      type: string\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /bel/{version}/orthologize/{species_id}/{bel_string}:\n    get:\n      summary: Orthologize BEL\n      description: |\n        Orthologize BEL\n\n        These common species names can be used in place of the TAX:\u003cid\u003e form:\n        - human (TAX:9606)\n        - mouse (TAX:10090)\n        - rat  (TAX:10116)\n        - zebrafish (TAX:7955)\n\n        Note: Any forward slashes '/' in the bel_string\n          need to be replaced with _FORWARDSLASH_\n          otherwise it will get interpreted as another path\n          component and will likely not match a valid\n          url path (e.g. if subject=\"p(GO:\\\"stupid/name\\\")\" -\n          this will add an extra path parameter by mistake by\n          mis-interpreting the '/'.\n      tags:\n      - TODO\n      operationId: getBelOrthologize\n      parameters:\n      - name: bel_string\n        in: path\n        required: true\n        description: BEL String\n        schema:\n          type: string\n      - name: species_id\n        in: path\n        required: true\n        description: |\n          Orthologize BEL into Species ID. Species ID is either TAX:\u003cinteger\u003e\n          format from the NCBI Taxonomy namespace or using the\n          common labels:\n            * human\n            * mouse\n            * rat\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  orthologized:\n                    type: object\n                    properties:\n                      bel_string:\n                        type: string\n                  messages:\n                    type: array\n                    items:\n                      type: string\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /bel/{version}/edges/{bel_string}:\n    get:\n      summary: BEL Edges\n      description: |\n        Create BEL Edges\n\n        The call will create BEL Edges from the BEL string which can\n        be loaded into the edge store.\n\n        Note: Any forward slashes '/' in the bel_string\n          need to be replaced with _FORWARDSLASH_\n          otherwise it will get interpreted as another path\n          component and will likely not match a valid\n          url path (e.g. if subject=\"p(GO:\\\"stupid/name\\\")\" -\n          this will add an extra path parameter by mistake by\n          mis-interpreting the '/'.\n      tags:\n      - TODO\n      operationId: getBelEdges\n      parameters:\n      - name: bel_string\n        in: path\n        required: true\n        description: BEL String\n        schema:\n          type: string\n      - name: computed_signatures\n        in: query\n        required: false\n        description: |\n          Default is to create all of the defined computed edges as\n          specified in the BEL Language Specification file.\n\n          You can specify which computed_signature steps will be performed\n          by specifying a comma-delimited list of computed_signature\n          keys. Example:\n\n              computed_signatures=componentOf,degradation,activity\n        schema:\n          type: string\n      - name: ast\n        in: query\n        required: false\n        description: |\n          If AST is requested, the abstract syntax tree of the\n          BEL Edges will be provided in the response.\n        schema:\n          type: boolean\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  edges:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        subject:\n                          type: string\n                        relation:\n                          type: string\n                        object:\n                          type: string\n                        ast:\n                          type: object\n                          description: |\n                            If AST is requested (by query param), provide\n                            the AST along with the Edge subject, relation, and\n                            objects.\n                          additionalProperties:\n                            type: object\n                  messages:\n                    type: array\n                    items:\n                      type: string\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /bel/{version}/editor/list:\n    get:\n      summary: Transform list of terms into BEL functions\n      description: |\n        Given list of terms, retrieve valid Namespaced term or message\n        that original term in list was not found and wrap in given BEL function.\n\n        This specific endpoint is for the BEL Editor Assertion bulk\n        input field to allow inserting many BEL Objects or Subjects at once.\n\n        An example would be given gene expression perturbation such as a drug,\n        one could list the mRNA's increased due to the drug as BEL objects and\n        wrap them in r() functions after validating them as known terms.\n      tags:\n        - TODO\n      operationId: getBelEditorList\n      parameters:\n      - name: list\n        required: true\n        in: query\n        description: URL encoded list of terms, each separated by a comma\n        schema:\n          type: string\n      - name: function\n        required: true\n        in: query\n        description: Wrap valid terms in this function\n        schema:\n          type: string\n      - name: namespace\n        in: query\n        required: false\n        description: Prefix terms in list with namespace before term validation\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    result:\n                      type: string\n                      description: Valid namespaced term wrapped in given function, null if not found\n                    term:\n                      type: string\n                      description: initial term given to be transformed\n                    message:\n                      type: string\n                      description: Error or warning message associated with term, optional\n\n  /nanopubs/validate:\n    post:\n      summary: Nanopub Validate\n      description: Validate the nanopub structure, assertions and annotations\n      tags:\n        - Nanopubs\n      operationId: validateNanopub\n      requestBody:\n        description: Submit Nanopub for validation\n        required: true\n        content:\n          application/json:\n            schema:\n              required:\n                - \"nanopub\"\n              properties:\n                error_level:\n                  type: \"string\"\n                  enum: [ERROR, WARNING]\n                  default: WARNING\n                  description: |\n                    Default is WARNING which will also check to see if the namespace values are in the Namespace database\n                    and whether they are the correct entity or annotation type.\n\n                    ERROR will only check the nanopub structure and assertion syntax.\n                nanopub:\n                  required:\n                    - \"type\"\n                    - \"assertions\"\n                    - \"citation\"\n                  properties:\n                    type:\n                      required:\n                        - \"name\"\n                        - \"version\"\n                      properties:\n                        name:\n                          type: \"string\"\n                        version:\n                          type: \"string\"\n                      type: \"object\"\n                    schema_uri:\n                      type: \"string\"\n                    assertions:\n                      type: \"array\"\n                      items:\n                        type: \"object\"\n                        properties:\n                          object:\n                            type: \"string\"\n                          relation:\n                            type: \"string\"\n                          subject:\n                            type: \"string\"\n                    evidence:\n                      type: \"string\"\n                    annotations:\n                      type: \"array\"\n                      items:\n                        type: \"object\"\n                        properties:\n                          type:\n                            type: \"string\"\n                          id:\n                            type: \"string\"\n                          label:\n                            type: \"string\"\n                    citation:\n                      type: \"object\"\n                    metadata:\n                      type: \"object\"\n                  type: \"object\"\n            example:\n              error_level: WARNING\n              nanopub:\n                type:\n                  ame: BEL\n                  version: 2.0.0\n                schema_uri: http://json.schemastore.org/nanopub_bel-1.0.0.json\n                assertions:\n                - object: bo(GO:\"lipid oxidation\")\n                  relation: positiveCorrelation\n                  subject: path(MESH:therosclerosis\n                evidence: Oxidation and nitration of macromolecules, such as proteins, DNA and lipids,\n                  are prominent in atherosclerotic arteries.\n                annotations:\n                - type: Anatomy\n                  id: MESH:artery\n                  label: artery\n                - type: Disease\n                  id: DO:atherosclerosis\n                  label: atherosclerosis\n                - type: TextLocation\n                  id: Review\n                citation:\n                  authors:\n                  - de Nigris F\n                  - Lerman A\n                  - Ignarro LJ\n                  - Williams-Ignarro S\n                  - Sica V\n                  - Baker AH\n                  - Lerman LO\n                  - Geng YJ\n                  - Napoli C\n                  comments: ''\n                  date_published: ''\n                  source_name: Trends in molecular medicine\n                  database:\n                    name: PubMed\n                    id: '12928037'\n                metadata:\n                  stmt_group: Group 1\n\n      responses:\n        '200':\n          description: Successful response returns the nanopub object with nanopub.metadata.gd_validation = [\\\u003clist of validation messages\\\u003e]\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    level:\n                      type: string\n                      enum: [Error, Warning]\n                      default: WARNING\n                    section:\n                      type: string\n                      enum: [Assertion, Annotation, Structure]\n                    label:\n                      type: string\n                      description: Label which can be used in Elasticsearch faceting\n                    index:\n                      type: integer\n                      description: Index of Assertion or Annotation in Nanopub so one can associate an error with a specific Assertion or Annotation\n                    msg:\n                      type: string\n                example:\n                  nanopub:\n                    metadata:\n                      gd_validation:\n                      - level: Error\n                        section: Structure\n                        label: Error-Structure\n                        msg: 'Missing or badly formed type - must have nanopub[\"type\"] = {\"name\": \u003cname\u003e,\n                          \"version\": \u003cversion}'\n                        msg_html: 'Missing or badly formed type - must have nanopub[\"type\"] = {\"name\": \u003cname\u003e,\n                          \"version\": \u003cversion}'\n                      - level: Error\n                        section: Assertion\n                        label: Error-Assertion\n                        index: 0\n                        msg: \"Failed parse at position 25. Check that you have have closed your parenthesis\\\n                          \\ correctly before this point.\\npath(MESH:therosclerosis positiveCorrelation bo(GO:\\\"\\\n                          lipid oxidation\\\")\\n                         ^\"\n                        msg_html: Failed parse at position 25. Check that you have have closed your parenthesis\n                          correctly before this point.\u003cbr /\u003epath(MESH:therosclerosis positiveCorrelation\n                          bo(GO:\"lipid oxidation\")\u003cbr /\u003e                         ^\n                      - level: Warning\n                        section: Annotation\n                        index: 0\n                        label: Warning-Annotation\n                        msg: 'Annotation term: MESH:artery not found in database'\n                        msg_html: 'Annotation term: MESH:artery not found in database'\n                      - level: Warning\n                        section: Annotation\n                        index: 2\n                        label: Warning-Annotation\n                        msg: 'Annotation term: Review not found in database'\n                        msg_html: 'Annotation term: Review not found in database'\n\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /terms:\n    get:\n      summary: Terms\n      description: Not implemented - will eventually provide term search functionality\n      tags:\n      - Terminologies\n      operationId: getTerms\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /terms/{term_id}:\n    get:\n      summary: Get Term record\n      description: |\n        Get Term record, example term_id=HGNC:391\n      tags:\n      - Terminologies\n      operationId: getTerm\n      parameters:\n      - name: term_id\n        in: path\n        required: true\n        description: |\n          Term ID (or alternate Term ID)\n\n          Note: Any forward slashes '/' in term need to be replaced\n            with _FORWARDSLASH_ otherwise it will get interpreted as\n            another path component and will likely not match a valid\n            url path (e.g. if term_id=\"stupid/name\" - this will look like\n            /terms/stupid/name and not match /terms/{term_id} since there is\n            an extra path component.\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response\n            statistics\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Term'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /terms/completions/{completion_text}:\n    get:\n      summary: Term Completion\n      description: |\n        Get term completion suggestions filtered by species_id, entity_types\n        annotation_types or namespaces.  You many use as many filters as desired.\n        Each filter type must be present, but you can submit multiple\n        entity_types, etc and the query must match 1 or more of the given\n        entity_types but is not required to match all of them.\n\n      tags:\n      - Terminologies\n      operationId: getTermCompletion\n      parameters:\n      - name: completion_text\n        in: path\n        required: true\n        description: |\n          Partial term to complete, example completion 'AKT'\n\n          Note: Any forward slashes '/' in term need to be replaced\n            with _FORWARDSLASH_ otherwise it will get interpreted as\n            another path component and will likely not match a valid\n            url path (e.g. if completion_text=\"stupid/name\" - this will look like\n            /terms/completions/stupid/name and not match /terms/completions/{completion_text} since there is\n            an extra path component.\n        schema:\n          type: string\n      - name: species_id\n        required: false\n        in: query\n        description: |\n          Species ID, will accept TAX:\\\u003cinteger\\\u003e, human, mouse or rat\n\n          Example query would be complete_term: AKT and species_id: TAX:9606 or human\n        style: form\n        schema:\n          type: array\n          items:\n            type: string\n      - name: entity_types\n        required: false\n        in: query\n        description: |\n          Entity Types will accept any of the values listed in the /term/types result.\n\n          Example query would be complete_term: apop and entity_type: BiologicalProcess\n        style: form\n        schema:\n          type: array\n          items:\n            type: string\n      - name: annotation_types\n        required: false\n        in: query\n        description: |\n          Annotation Types will accept any of the values listed in the /term/types result.\n\n          Example query would be complete_term: scler and annotation_type: Disease\n        style: form\n        schema:\n          type: array\n          items:\n            type: string\n      - name: namespaces\n        required: false\n        in: query\n        description: |\n          Namespaces will accept any of the namespace values listed in the /term/types result.\n\n          Example query would be complete_term: scler and namespace: DO\n        style: form\n        schema:\n          type: array\n          items:\n            type: string\n      - name: size\n        required: false\n        in: query\n        description: Number of completions to return\n        schema:\n          type: string\n          default: 10\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TermCompletion'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /terms/{term_id}/equivalents:\n    get:\n      summary: Term Equivalents\n      description: Get Term equivalents, example term_id=HGNC:AKT1\n      tags:\n      - Terminologies\n      operationId: getTermEquivalents\n      parameters:\n      - name: term_id\n        in: path\n        required: true\n        description: |\n          Term ID (or alternate Term ID)\n\n          Note: Any forward slashes '/' in term need to be replaced\n            with _FORWARDSLASH_ otherwise it will get interpreted as\n            another path component and will likely not match a valid\n            url path (e.g. if term_id=\"stupid/name\" - this will look like\n            /terms/stupid/name and not match /terms/{term_id} since there is\n            an extra path component.\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n                example:\n                  EG: EG:207\n                  UP: UP:P31749\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /terms/{term_id}/canonicalized:\n    get:\n      summary: Term Canonicalization\n      description: |\n        Canonicalize the term into the standard namespaces used in the\n        EdgeStore. This is to keep duplicate edges from being introduced\n        when equivalent BEL Entities but in different namespaces are\n        used.\n\n        If a canonical term cannot be found, the query term_id will be\n        returned.\n\n        An example term_id to use is HGNC:AKT1 which will result in EG:207\n        being returned.\n      tags:\n      - Terminologies\n      operationId: getTermCanonicalized\n      parameters:\n      - name: term_id\n        in: path\n        required: true\n        description: |\n          Term ID (or alternate Term ID)\n\n          Note: Any forward slashes '/' in term need to be replaced\n            with _FORWARDSLASH_ otherwise it will get interpreted as\n            another path component and will likely not match a valid\n            url path (e.g. if term_id=\"stupid/name\" - this will look like\n            /terms/stupid/name and not match /terms/{term_id} since there is\n            an extra path component.\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  term_id:\n                    type: string\n                example:\n                  term_id: EG:207\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /terms/{term_id}/decanonicalized:\n    get:\n      summary: Term Decanonicalization\n      description: |\n        Decanonicalize the term into the human friendly namespaces.\n        This is typically used when extracting a Term from an edge extracted\n        from the EdgeStore.\n\n        If a decanonical term cannot be found, the query term_id will be\n        returned.\n\n        An example term_id to use is EG:207 which will result in HGNC:AKT1\n        being returned.\n      tags:\n      - Terminologies\n      operationId: getTermDecanonicalized\n      parameters:\n      - name: term_id\n        in: path\n        required: true\n        description: |\n          Term ID (or alternate Term ID)\n\n          Note: Any forward slashes '/' in term need to be replaced\n            with _FORWARDSLASH_ otherwise it will get interpreted as\n            another path component and will likely not match a valid\n            url path (e.g. if term_id=\"stupid/name\" - this will look like\n            /terms/stupid/name and not match /terms/{term_id} since there is\n            an extra path component.\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  term_id:\n                    type: string\n                example:\n                  term_id: HGNC:AKT1\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /terms/types:\n    get:\n      summary: Term Types\n      description: |\n        Get:\n          * term namespaces and associated term counts\n          * entity_types and associated term counts\n          * context_types and associated term counts\n      tags:\n      - Terminologies\n      - Utility\n      operationId: getTermTypes\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  namespaces:\n                    type: object\n                    additionalProperties:\n                      type: integer\n                  entity_types:\n                    type: object\n                    additionalProperties:\n                      type: integer\n                  context_types:\n                    type: object\n                    additionalProperties:\n                      type: integer\n                example:\n                  namespaces:\n                    EG: 19725818\n                    TAX: 1645046\n                    SP: 555594\n                    CHEBI: 115240\n                    MGI: 56177\n                    GO: 44979\n                    RGD: 44972\n                    HGNC: 41254\n                    MESH: 18187\n                    DO: 8507\n                  entity_types:\n                    Gene: 20423815\n                    RNA: 20372645\n                    Protein: 17852293\n                    Abundance: 124989\n                    Micro_RNA: 4320\n                    BiologicalProcess: 2029\n                    Location: 237\n                  context_types:\n                    Species: 1294116\n                    Disease: 4860\n                    Anatomy: 1506\n                    Cell: 351\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n\n  /orthologs/{gene_id}:\n    get:\n      summary: Orthologs for given gene\n      description: |\n        Get orthologs for given gene_id for all species\n\n        Example query gene_id=HGNC:AKT1\n        Result: MGI:AKT1, TAX:10090\n                RGD:AKT1, TAX:10116\n      tags:\n      - Terminologies\n      operationId: getOrthologs\n      parameters:\n      - name: gene_id\n        in: path\n        required: true\n        description: |\n          Gene or Protein ID\n\n          Note: Any forward slashes '/' in term need to be replaced\n            with _FORWARDSLASH_ otherwise it will get interpreted as\n            another path component and will likely not match a valid\n            url path (e.g. if gene_id=\"stupid/name\" - this will look like\n            /orthologs/stupid/name and not match /orthologs/{gene_id} since there is\n            an extra path component.\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  orthologs:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: string\n                        species_id:\n                          type: string\n                example:\n                  orthologs:\n                    - id: MGI:Akt1\n                      species_id: TAX:10090\n                    - id: RGD:Akt1\n                      species_id: TAX:10116\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /orthologs/{gene_id}/{species_id}:\n    get:\n      summary: Ortholog\n      description: |\n        Get ortholog for given gene_id from species_id\n\n        Example query gene_id=HGNC:A1BG  species_id: TAX:10090\n        Result: MGI:A1bg\n      tags:\n      - Terminologies\n      operationId: getOrthologsSpeciesId\n      parameters:\n      - name: gene_id\n        in: path\n        required: true\n        description: |\n          Gene or Protein ID\n\n          Note: Any forward slashes '/' in term need to be replaced\n            with _FORWARDSLASH_ otherwise it will get interpreted as\n            another path component and will likely not match a valid\n            url path (e.g. if gene_id=\"stupid/name\" - this will look like\n            /orthologs/stupid/name and not match /orthologs/{gene_id} since there is\n            an extra path component.\n        schema:\n          type: string\n      - name: species_id\n        in: path\n        required: true\n        description: Get orthologs with species_id for gene_id\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  orthologs:\n                    type: array\n                    items:\n                      type: string\n                example:\n                  orthologs:\n                    - MGI:A1bg\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n\n  /text/pubmed:\n    get:\n      summary: Pubmed Info\n      description: |\n        Get Pubmed Info from NLM and Pubtator annotations to enhance the\n        Pubmed information.\n      tags:\n        - Utility\n      operationId: getPubmed\n      parameters:\n      - name: pmid\n        in: path\n        required: true\n        description: Pubmed ID\n        schema:\n          type: integer\n      - name: pubmed_only\n        in: query\n        required: false\n        description: |\n          Only retrieve Pubmed data and not Pubtator annotations.\n          Pubmed responds in \u003c100ms. Pubtator annotations may take\n          several seconds.\n        schema:\n          type: boolean\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  pmid:\n                    type: string\n                  title:\n                    type: string\n                  abstract:\n                    type: string\n                  authors:\n                    type: array\n                    items:\n                      type: string\n                  pub_date:\n                    type: string\n                    description: ISOdate format YYYY-MM-DD or null if unknown\n                  journal_title:\n                    type: string\n                  journal_iso_title:\n                    type: string\n                  doi:\n                    type: string\n                  compounds:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: string\n                        name:\n                          type: string\n                  mesh:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: string\n                        name:\n                          type: string\n                  annotations:\n                    description: |\n                      Pubtator BioConcept annotations against Pubmed Title and Abstract.\n                      This is an object of multiple annotated terms using valid namespaces\n                      with an object containing the spans it was extracted from\n                      the text of the extracted string, the name and label of the\n                      term and the entity and annotation types if available.\n                    type: object\n                    additionalProperties:\n                      type: object\n                    example:\n                      \"HGNC:ABCC1\":\n                        spans:\n                          - begin: 315\n                            end: 326\n                            text: Multidrug resistance-associated protein 1\n                          - begin: 299\n                            end: 310\n                            text: MRP-1\n                        entity_types:\n                          - Protein\n                          - Gene\n                          - RNA\n                        annotations_types:\n                          - null\n                        name: ATP binding cassette subfamily C member 1\n                        label: ABCC1\n\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /simple_status:\n    get:\n      summary: Simple Status\n      description: Simple unauthenticated status check of API\n      tags:\n      - Utility\n      security: []\n      operationId: getSimpleStatus\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                example:\n                  message: Simple unauthenticated status API endpoint works\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /status:\n    get:\n      summary: Status (authenticated)\n      description: Authenticated response with API settings and database content statistics\n      tags:\n      - Utility\n      operationId: getStatus\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /healthcheck:\n    get:\n      summary: Service Healthcheck\n      description: Simple unauthenticated health status check\n      tags:\n      - Utility\n      security: []\n      operationId: getHealthStatus\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                example:\n                  message: Simple unauthenticated health status API endpoint works\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /ping:\n    get:\n      summary: Ping Server\n      description: Is server up and running - unauthenticated\n      tags:\n      - Utility\n      security: []\n      operationId: getPing\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                example:\n                  message: Simple unauthenticated API endpoint works\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n\n  /version:\n    get:\n      summary: Version\n      description: Get version of API\n      tags:\n      - Utility\n      security: []\n      operationId: getVersion\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  version:\n                    type: string\n                example:\n                  version: 0.1.2\ncomponents:\n  schemas:\n\n    Term:\n      type: object\n      properties:\n        namespace:\n          type: string\n        src_id:\n          type: string\n        id:\n          type: string\n        alt_ids:\n          type: array\n          items:\n            type: string\n        label:\n          type: string\n        name:\n          type: string\n        species_id:\n          type: string\n        species_label:\n          type: string\n        description:\n          type: string\n        entity_types:\n          type: array\n          items:\n            type: string\n        context_types:\n          type: array\n          items:\n            type: string\n        equivalences:\n          type: array\n          items:\n            type: string\n        synonyms:\n          type: array\n          items:\n            type: string\n        children:\n          type: array\n          items:\n            type: string\n        obsolete_ids:\n          type: array\n          items:\n            type: string\n      example:\n        namespace: HGNC\n        src_id: '391'\n        id: HGNC:AKT1\n        alt_ids:\n        - HGNC:391\n        label: AKT1\n        name: AKT serine/threonine kinase 1\n        species_id: TAX:9606\n        species_label: human\n        description: ''\n        entity_types:\n        - Gene\n        - RNA\n        - Protein\n        equivalences:\n        - SP:P31749\n        - EG:207\n        synonyms:\n        - RAC\n        - PKB\n        - PRKBA\n        - AKT\n        children: []\n        obsolete_ids: []\n\n    BelCompletion:\n      type: object\n      description: Completion object for BEL Assertions\n      properties:\n        completion_text:\n          type: string\n          description: Text to submit for completion\n        completions:\n          type: array\n          items:\n            type: object\n            properties:\n              replacement:\n                type: string\n                description: Replace the BEL input given with this if this completion is selected.\n              cursor_loc:\n                type: integer\n                description: |\n                  Provide a cursor location in the input field to select part of the\n                  BEL assertion provided to complete on.\n              label:\n                type: string\n                description: Human friendly label of what was found to use for the completion\n              highlight:\n                type: string\n                description: |\n                  Presents the matched text with \\\u003cem\\\u003e\\\u003c/em\\\u003e tags wrapping the\n                  completion text for the ID or synonym\n                  found. The ID or synonym found will often not be the same as the\n                  official Namespace ID inserted into the BEL assertion.\n      example:\n        completion_text: EGF\n        completions:\n        - replacement: p(SP:Q0D2K5\n          cursor_loc: 11\n          highlight: \u003cem\u003eEGFEM1P\u003c/em\u003e\n          label: EGFEM1P\n        - replacement: p(EG:51162\n          cursor_loc: 10\n          highlight: \u003cem\u003eEGF\u003c/em\u003e like domain multiple 7\n          label: EGFL7\n\n    TermCompletion:\n      type: object\n      description: Completion object for Terms\n      properties:\n        completion_text:\n          type: string\n          description: Text to submit for completion\n        completions:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                description: Term ID with namespace prefix\n              name:\n                type: string\n                description: official name of term\n              label:\n                type: string\n                description: human friendly label for term\n              description:\n                type: string\n              species:\n                type: object\n                properties:\n                  id:\n                    type: string\n                  label:\n                    type: string\n              highlight:\n                type: array\n                items:\n                  type: string\n                description: |\n                  List of ID's or synonyms with \\\u003cem\\\u003e\\\u003c/em\\\u003e tags wrapping the\n                  completion text that was matched.\n\n      example:\n        completion_text: AKT\n        completions:\n          - id: HGNC:AKT1\n            name: AKT serine/threonine kinase 1\n            label: AKT1\n            description: ''\n            species:\n              id: TAX:9606\n              label: human\n            highlight:\n            - \u003cem\u003eAKT1\u003c/em\u003e\n            - \u003cem\u003eAKT\u003c/em\u003e serine/threonine kinase 1\n            - \u003cem\u003eAKT\u003c/em\u003e\n          - id: HGNC:AKT1S1\n            name: AKT1 substrate 1\n            label: AKT1S1\n            description: ''\n            species:\n              id: TAX:9606\n              label: human\n            highlight:\n            - \u003cem\u003eAKT1S1\u003c/em\u003e\n            - \u003cem\u003eAKT1\u003c/em\u003e substrate 1\n\n\n    ErrorModel:\n      type: object\n      required:\n      - title\n      - message\n      properties:\n        title:\n          type: string\n        message:\n          type: string\n      example:\n        title: Short descriptive title\n        message: Longer error message with more details on what went wrong\n\n  securitySchemes:\n    JwtApiKey:\n      description: |\n        For accessing the API, a valid JWT token must be passed in the\n        Authorization' header. The following syntax must be used for the value\n        of the 'Authorization' header:\\n  JWT xxxxxx.yyyyyyy.zzzzzz\n      type: apiKey\n      name: Authorization\n      in: header\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /bel/{version}/editor/list: get: operation \"getBelEditorList\": parse path \"/bel/{version}/editor/list\": path parameter not specified: \"version\""
}