{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/haiku/haikudepotserver"
		},
		"file": {
			"name": "authorization.yaml",
			"size": 0,
			"path": "haikudepotserver-api2/src/main/resources/api2/authorization.yaml",
			"byteSize": 8394,
			"content": "# Copyright 2022, Andrew Lindesay\n# Distributed under the terms of the MIT License.\n\nopenapi: 3.0.3\ninfo:\n  title: HDS Authorization API\n  version: \"2.0\"\n  description: \u003e\n    API related to authorization.\ntags:\n  - name: authorization\npaths:\n  /__api/v2/authorization/check-authorization:\n    description: \u003e\n      This method will take in a list of permissions with targets and will return the list of those that\n      pass authorization checks against the presently authenticated user.\n    post:\n      tags:\n        - authorization\n      operationId: checkAuthorization\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/checkAuthorizationRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The results of checking the authorization.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/checkAuthorizationResponseEnvelope\"\n  /__api/v2/authorization/create-authorization-pkg-rule:\n    description: \u003e\n      This method will create a new authorization rule.  It will do this based on the data encapsulated in\n      the request.\n    post:\n      tags:\n        - authorization\n      operationId: createAuthorizationPkgRule\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createAuthorizationPkgRuleRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The results of creating the authorization pkg rule\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/createAuthorizationPkgRuleResponseEnvelope\"\n  /__api/v2/authorization/remove-authorization-pkg-rule:\n    description: \u003e\n      This method will delete an authorization rule identified by the coordinates in the request.  If it\n      was not able to find the rule to delete then it will thrown an instance of\n      {@link ObjectNotFoundException}.\n    post:\n      tags:\n        - authorization\n      operationId: removeAuthorizationPkgRule\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/removeAuthorizationPkgRuleRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The results of removing the authorization pkg rule\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/removeAuthorizationPkgRuleResponseEnvelope\"\n  /__api/v2/authorization/search-authorization-pkg-rules:\n    post:\n      tags:\n        - authorization\n      operationId: searchAuthorizationPkgRules\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/searchAuthorizationPkgRulesRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The results of searching for a authorization pkg rule\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/searchAuthorizationPkgRulesResponseEnvelope\"\n\ncomponents:\n  schemas:\n    checkAuthorizationRequestEnvelope:\n      type: object\n      properties:\n        targetAndPermissions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/authorizationTargetAndPermissionRequest\"\n    checkAuthorizationResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/checkAuthorizationResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    checkAuthorizationResult:\n      type: object\n      properties:\n        targetAndPermissions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/authorizationTargetAndPermissionResult\"\n    authorizationTargetAndPermissionRequest:\n      type: object\n      required:\n        - targetIdentifier\n        - permissionCode\n      properties:\n        targetType:\n          $ref: \"#/components/schemas/authorizationTargetType\"\n        targetIdentifier:\n          type: string\n          description: \u003e\n            This identifier will identify an instance of the #targetType that has the authorization applied to it.  Some\n            permissions may not require a target identifier; in which case this value can be supplied as null.\n        permissionCode:\n          type: string\n          description: \u003e\n            This is a list of permissions that the client would like to check for in the context of the target\n            identified by other parameters in this request.\n    authorizationTargetAndPermissionResult:\n      type: object\n      required:\n        - targetIdentifier\n        - permissionCode\n        - authorized\n      properties:\n        targetType:\n          $ref: \"#/components/schemas/authorizationTargetType\"\n        targetIdentifier:\n          type: string\n          description: \u003e\n            This identifier will identify an instance of the #targetType that has the authorization applied to it.  Some\n            permissions may not require a target identifier; in which case this value can be supplied as null.\n        permissionCode:\n          type: string\n          description: \u003e\n            This is a list of permissions that the client would like to check for in the context of the target\n            identified by other parameters in this request.\n        authorized:\n          type: boolean\n          description: \u003e\n            This boolean will be true if the target is authorized; false if not.\n    authorizationTargetType:\n      type: string\n      enum:\n        - PKG\n        - USER\n        - REPOSITORY\n        - USERRATING\n      description: \u003e\n        The target type defines what sort of object you want to check your authorization for.  The #targetIdentifier\n        then identifies an instance of that type.\n\n    createAuthorizationPkgRuleRequestEnvelope:\n      type: object\n      properties:\n        userNickname:\n          type: string\n        pkgName:\n          type: string\n        permissionCode:\n          type: string\n    createAuthorizationPkgRuleResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/createAuthorizationPkgRuleResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    createAuthorizationPkgRuleResult:\n      type: object\n\n    removeAuthorizationPkgRuleRequestEnvelope:\n      type: object\n      properties:\n        userNickname:\n          type: string\n        pkgName:\n          type: string\n        permissionCode:\n          type: string\n    removeAuthorizationPkgRuleResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/removeAuthorizationPkgRuleResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    removeAuthorizationPkgRuleResult:\n      type: object\n\n    searchAuthorizationPkgRulesRequestEnvelope:\n      allOf:\n        - $ref: \"./common.yaml#/components/schemas/abstractSearchRequest\"\n        - type: object\n          properties:\n            userNickname:\n              type: string\n            pkgName:\n              type: string\n            permissionCodes:\n              type: array\n              description: \u003e\n                If permission codes are supplied then only rules related to those permission codes will be shown.  If this\n                field is blank then all permissions will be considered.\n              items:\n                type: string\n    searchAuthorizationPkgRulesResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/searchAuthorizationPkgRulesResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    searchAuthorizationPkgRulesResult:\n      type: object\n      properties:\n        total:\n          type: integer\n          format: int64\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/searchAuthorizationPkgRulesResultItem\"\n    searchAuthorizationPkgRulesResultItem:\n      type: object\n      properties:\n        userNickname:\n          type: string\n        pkgName:\n          type: string\n        permissionCode:\n          type: string\n",
			"canonicalURL": "/github.com/haiku/haikudepotserver@dd5578708900ed39398e07e0d688010044376c0c/-/blob/haikudepotserver-api2/src/main/resources/api2/authorization.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/haiku/haikudepotserver/blob/dd5578708900ed39398e07e0d688010044376c0c/haikudepotserver-api2/src/main/resources/api2/authorization.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"createAuthorizationPkgRuleResponseEnvelope\": parse schema: property \"error\": parse schema: at 1:2542: external \"./error.yaml\": get: file: local file reference is not allowed"
}