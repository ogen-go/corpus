{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Reckless-Satoshi/robosats"
		},
		"file": {
			"name": "api-v0.1.yaml",
			"size": 0,
			"path": "docs/assets/schemas/api-v0.1.yaml",
			"byteSize": 55854,
			"content": "openapi: 3.0.3\ninfo:\n  title: RoboSats REST API v0\n  version: 0.1.0\n  description: |2+\n\n    REST API Documentation for [RoboSats](https://learn.robosats.com) - A Simple and Private LN P2P Exchange\n\n    \u003cp style='background-color:#fff0f0;padding:16px;border-radius:6px;border:2px solid #ffd3d3'\u003e\n    \u003cspan style='color:#f31f1f;font-weight:bold'\u003eNote:\u003c/span\u003e\n    The RoboSats REST API is on v0, which in other words, is beta.\n    We recommend that if you don't have time to actively maintain\n    your project, do not build it with v0 of the API. A refactored, simpler\n    and more stable version - v1 will be released soonâ„¢.\n    \u003c/p\u003e\n\npaths:\n  /api/book/:\n    get:\n      operationId: book_list\n      description: Get public orders in the book.\n      summary: Get public orders\n      parameters:\n      - in: query\n        name: currency\n        schema:\n          type: integer\n        description: The currency id to filter by. Currency IDs can be found [here](https://github.com/Reckless-Satoshi/robosats/blob/main/frontend/static/assets/currencies.json).\n          Value of `0` means ANY currency\n      - in: query\n        name: type\n        schema:\n          type: integer\n          enum:\n          - 0\n          - 1\n          - 2\n        description: |-\n          Order type to filter by\n          - `0` - BUY\n          - `1` - SELL\n          - `2` - ALL\n      tags:\n      - book\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrderPublic'\n          description: ''\n  /api/historical/:\n    get:\n      operationId: historical_list\n      description: Get historical exchange activity. Currently, it lists each day's\n        total contracts and their volume in BTC since inception.\n      summary: Get historical exchange activity\n      tags:\n      - historical\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: object\n                    properties:\n                      volume:\n                        type: integer\n                        description: Total Volume traded on that particular date\n                      num_contracts:\n                        type: number\n                        description: Number of successful trades on that particular\n                          date\n              examples:\n                TruncatedExample:\n                  value:\n                  - \u003cdate\u003e:\n                      code: USD\n                      price: '42069.69'\n                      min_amount: '4.2'\n                      max_amount: '420.69'\n                      max_bondless_amount: '10.1'\n                  summary: Truncated example\n          description: ''\n  /api/info/:\n    get:\n      operationId: info_list\n      description: \"\\nGet general info (overview) about the exchange.\\n\\n**Info**:\\n\\\n        - Current market data\\n  - num. of orders\\n  - book liquidity\\n  - 24h active\\\n        \\ robots \\n  - 24h non-KYC premium\\n  - 24h volume\\n  - all time volume\\n\\\n        - Node info \\n  - lnd version\\n  - node id\\n  - node alias\\n  - network\\n\\\n        - Fees\\n  - maker and taker fees\\n  - on-chain swap fees\\n- Robot (If autheticated)\\n\\\n        \\  - nickname\\n  - referral code\\n  - earned rewards\\n\"\n      summary: Get info\n      tags:\n      - info\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Info'\n          description: ''\n  /api/limits/:\n    get:\n      operationId: limits_list\n      description: Get a list of order limits for every currency pair available.\n      summary: List order limits\n      tags:\n      - limits\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: object\n                    properties:\n                      code:\n                        type: string\n                        description: Three letter currency symbol\n                      price:\n                        type: integer\n                      min_amount:\n                        type: integer\n                        description: Minimum amount allowed in an order in the particular\n                          currency\n                      max_amount:\n                        type: integer\n                        description: Maximum amount allowed in an order in the particular\n                          currency\n                      max_bondless_amount:\n                        type: integer\n                        description: Maximum amount allowed in a bondless order\n              examples:\n                TruncatedExample.RealResponseContainsAllTheCurrencies:\n                  value:\n                  - \u003ccurrency number\u003e:\n                      code: USD\n                      price: '42069.69'\n                      min_amount: '4.2'\n                      max_amount: '420.69'\n                      max_bondless_amount: '10.1'\n                  summary: Truncated example. Real response contains all the currencies\n          description: ''\n  /api/make/:\n    post:\n      operationId: make_create\n      description: |2\n\n        Create a new order as a maker.\n\n\n        Default values for the following fields if not specified:\n        - `public_duration` - **86399**\n        - `escrow_duration` - **1800**\n        - `bond_size` -  **3**\n        - `bondless_taker` - **false**\n        - `has_range` - **false**\n        - `premium` - **0**\n      summary: Create a maker order\n      tags:\n      - make\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MakeOrder'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/MakeOrder'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/MakeOrder'\n        required: true\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListOrder'\n          description: ''\n        '400':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bad_request:\n                    type: string\n                    description: Reason for the failure\n          description: ''\n        '409':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bad_request:\n                    type: string\n                    description: Reason for the failure\n          description: ''\n  /api/order/:\n    get:\n      operationId: order_retrieve\n      description: |2+\n\n        Get the order details. Details include/exclude attributes according to what is the status of the order\n\n        The following fields are available irrespective of whether you are a participant or not (A participant is either a taker or a maker of an order)\n        All the other fields are only available when you are either the taker or the maker of the order:\n\n        - `id`\n        - `status`\n        - `created_at`\n        - `expires_at`\n        - `type`\n        - `currency`\n        - `amount`\n        - `has_range`\n        - `min_amount`\n        - `max_amount`\n        - `payment_method`\n        - `is_explicit`\n        - `premium`\n        - `satoshis`\n        - `bondless_taker`\n        - `maker`\n        - `taker`\n        - `escrow_duration`\n        - `total_secs_exp`\n        - `penalty`\n        - `is_maker`\n        - `is_taker`\n        - `is_participant`\n        - `maker_status`\n        - `taker_status`\n        - `price_now`\n\n        ### Order Status\n\n        The response of this route changes according to the status of the order. Some fields are documented below (check the 'Responses' section)\n        with the status code of when they are available and some or not. With v1 API we aim to simplify this\n        route to make it easier to understand which fields are available on which order status codes.\n\n        `status` specifies the status of the order. Below is a list of possible values (status codes) and what they mean:\n        - `0` \"Waiting for maker bond\"\n        - `1` \"Public\"\n        - `2` \"Paused\"\n        - `3` \"Waiting for taker bond\"\n        - `4` \"Cancelled\"\n        - `5` \"Expired\"\n        - `6` \"Waiting for trade collateral and buyer invoice\"\n        - `7` \"Waiting only for seller trade collateral\"\n        - `8` \"Waiting only for buyer invoice\"\n        - `9` \"Sending fiat - In chatroom\"\n        - `10` \"Fiat sent - In chatroom\"\n        - `11` \"In dispute\"\n        - `12` \"Collaboratively cancelled\"\n        - `13` \"Sending satoshis to buyer\"\n        - `14` \"Sucessful trade\"\n        - `15` \"Failed lightning network routing\"\n        - `16` \"Wait for dispute resolution\"\n        - `17` \"Maker lost dispute\"\n        - `18` \"Taker lost dispute\"\n\n\n        Notes:\n        - both `price_now` and `premium_now` are always calculated irrespective of whether `is_explicit` = true or false\n\n      summary: Get order details\n      parameters:\n      - in: query\n        name: order_id\n        schema:\n          type: integer\n        required: true\n      tags:\n      - order\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderDetail'\n          description: ''\n        '400':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bad_request:\n                    type: string\n                    description: Reason for the failure\n              examples:\n                OrderCancelled:\n                  value:\n                    bad_request: This order has been cancelled collaborativelly\n                  summary: Order cancelled\n                WhenTheOrderIsNotPublicAndYouNeitherTheTakerNorMaker:\n                  value:\n                    bad_request: This order is not available\n                  summary: When the order is not public and you neither the taker\n                    nor maker\n                WhenMakerBondExpires(asMaker):\n                  value:\n                    bad_request: Invoice expired. You did not confirm publishing the\n                      order in time. Make a new order.\n                  summary: When maker bond expires (as maker)\n                WhenRobosatsNodeIsDown:\n                  value:\n                    bad_request: The Lightning Network Daemon (LND) is down. Write\n                      in the Telegram group to make sure the staff is aware.\n                  summary: When Robosats node is down\n          description: ''\n        '403':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bad_request:\n                    type: string\n                    description: Reason for the failure\n                    default: This order is not available\n          description: ''\n        '404':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bad_request:\n                    type: string\n                    description: Reason for the failure\n                    default: Invalid order Id\n          description: ''\n    post:\n      operationId: order_create\n      description: |2+\n\n        Update an order\n\n        `action` field is required and determines what is to be done. Below\n        is an explaination of what each action does:\n\n        - `take`\n          - If the order has not expired and is still public, on a\n            successful take, you get the same response as if `GET /order`\n            was called and the status of the order was `3` (waiting for\n            taker bond) which means `bond_satoshis` and `bond_invoice` are\n            present in the response as well. Once the `bond_invoice` is\n            paid, you successfully become the taker of the order and the\n            status of the order changes.\n        - `pause`\n          - Toggle the status of an order from `1` to `2` and vice versa. Allowed only if status is `1` (Public) or `2` (Paused)\n        - `update_invoice`\n          - This action only is valid if you are the buyer. The `invoice`\n            field needs to be present in the body and the value must be a\n            valid LN invoice. Make sure to perform this action only when\n            both the bonds are locked. i.e The status of your order is\n            atleast `6` (Waiting for trade collateral and buyer invoice)\n        - `update_address`\n          - This action is only valid if you are the buyer. This action is\n            used to set an on-chain payout address if you wish to have your\n            payout be recieved on-chain. This enables on-chain swap for the\n            order, so even if you earlier had submitted a LN invoice, it\n            will be ignored. You get to choose the `mining_fee_rate` as\n            well. Mining fee rate is specified in sats/vbyte.\n        - `cancel`\n          - This action is used to cancel an existing order. You cannot cancel an order if it's in one of the following states:\n            - `1` - Cancelled\n            - `5` - Expired\n            - `11` - In dispute\n            - `12` - Collaboratively cancelled\n            - `13` - Sending satoshis to buyer\n            - `14` - Sucessful trade\n            - `15` - Failed lightning network routing\n            - `17` - Maker lost dispute\n            - `18` - Taker lost dispute\n\n            Note that there are penalties involved for cancelling a order\n            mid-trade so use this action carefully:\n\n            - As a maker if you cancel an order after you have locked your\n              maker bond, you are returend your bond. This may change in\n              the future to prevent DDoSing the LN node and you won't be\n              returend the maker bond.\n            - As a taker there is a time penalty involved if you `take` an\n              order and cancel it without locking the taker bond.\n            - For both taker or maker, if you cancel the order when both\n              have locked thier bonds (status = `6` or `7`), you loose your\n              bond and a percent of it goes as \"rewards\" to your\n              counterparty and some of it the platform keeps. This is to\n              discourage wasting time and DDoSing the platform.\n            - For both taker or maker, if you cancel the order when the\n              escrow is locked (status = `8` or `9`), you trigger a\n              collaborative cancel request. This sets\n              `(m|t)aker_asked_cancel` field to `true` depending on whether\n              you are the maker or the taker respectively, so that your\n              counterparty is informed that you asked for a cancel.\n            - For both taker or maker, and your counterparty asked for a\n              cancel (i.e `(m|t)aker_asked_cancel` is true), and you cancel\n              as well, a collaborative cancel takes place which returns\n              both the bonds and escrow to the respective parties. Note\n              that in the future there will be a cost for even\n              collaborativelly cancelling orders for both parties.\n        - `confirm`\n          - This is a **crucial** action. This confirms the sending and\n            recieving of fiat depending on whether you are a buyer or\n            seller. There is not much RoboSats can do to actually confirm\n            and verify the fiat payment channel. It is up to you to make\n            sure of the correct amount was recieved before you confirm.\n            This action is only allowed when status is either `9` (Sending\n            fiat - In chatroom) or `10` (Fiat sent - In chatroom)\n            - If you are the buyer, it simply sets `fiat_sent` to `true`\n              which means that you have sent the fiat using the payment\n              method selected by the seller and signals the seller that the\n              fiat payment was done.\n            - If you are the seller, be very careful and double check\n              before perorming this action. Check that your fiat payment\n              method was successful in recieving the funds and whether it\n              was the correct amount. This action settles the escrow and\n              pays the buyer and sets the the order status to `13` (Sending\n              satohis to buyer) and eventually to `14` (successful trade).\n        - `dispute`\n          - This action is allowed only if status is `9` or `10`. It sets\n            the order status to `11` (In dispute) and sets `is_disputed` to\n            `true`. Both the bonds and the escrow are settled (i.e RoboSats\n            takes custody of the funds). Disputes can take long to resolve,\n            it might trigger force closure for unresolved HTLCs). Dispute\n            winner will have to submit a new invoice for value of escrow +\n            bond.\n        - `submit_statement`\n          - This action updates the dispute statement. Allowed only when\n            status is `11` (In dispute). `satement` must be sent in the\n            request body and should be a string. 100 chars \u003c length of\n            `statement` \u003c 5000 chars. You need to discribe the reason for\n            raising a dispute. The `(m|t)aker_statement` field is set\n            respectively. Only when both parties have submitted thier\n            dispute statement, the order status changes to `16` (Waiting\n            for dispute resolution)\n        - `rate_user`\n          - You can rate your counterparty using this action. You can rate\n            your user from `1-5` using the `rate` field in the request\n            body. Only allowed in the following states:\n            - `13` - Sending satoshis to buyer\n            - `14` - Sucessful trade\n            - `15` - Failed lightning network routing\n            - `17` - Maker lost dispute\n            - `18` - Taker lost dispute\n        - `rate_platform`\n          - Let us know how much you love (or hate ðŸ˜¢) RoboSats.\n            You can rate the platform from `1-5` using the `rate` field in the request body\n\n      summary: Update order\n      parameters:\n      - in: query\n        name: order_id\n        schema:\n          type: integer\n        required: true\n      tags:\n      - order\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateOrder'\n            examples:\n              UserNotAuthenticated:\n                value:\n                  bad_request: Woops! It seems you do not have a robot avatar\n                summary: User not authenticated\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/UpdateOrder'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/UpdateOrder'\n        required: true\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  oneOf:\n                  - type: str\n                  - type: number\n                  - type: object\n                  - type: boolean\n          description: ''\n        '400':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bad_request:\n                    type: string\n                    description: Reason for the failure\n              examples:\n                UserNotAuthenticated:\n                  value:\n                    bad_request: Woops! It seems you do not have a robot avatar\n                  summary: User not authenticated\n          description: ''\n  /api/price/:\n    get:\n      operationId: price_list\n      description: Get the last market price for each currency. Also, returns some\n        more info about the last trade in each currency.\n      summary: Get last market prices\n      tags:\n      - price\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: object\n                    properties:\n                      price:\n                        type: integer\n                      volume:\n                        type: integer\n                      premium:\n                        type: integer\n                      timestamp:\n                        type: string\n                        format: date-time\n              examples:\n                TruncatedExample.RealResponseContainsAllTheCurrencies:\n                  value:\n                  - \u003ccurrency symbol\u003e:\n                      price: 21948.89\n                      volume: 0.01366812\n                      premium: 3.5\n                      timestamp: '2022-09-13T14:32:40.591774Z'\n                  summary: Truncated example. Real response contains all the currencies\n          description: ''\n  /api/reward/:\n    post:\n      operationId: reward_create\n      description: Withdraw user reward by submitting an invoice\n      summary: Withdraw reward\n      tags:\n      - reward\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClaimReward'\n            examples:\n              UserNotAuthenticated:\n                value:\n                  bad_request: Woops! It seems you do not have a robot avatar\n                summary: User not authenticated\n              WhenNoRewardsEarned:\n                value:\n                  successful_withdrawal: false\n                  bad_invoice: You have not earned rewards\n                summary: When no rewards earned\n              BadInvoiceOrInCaseOfPaymentFailure:\n                value:\n                  successful_withdrawal: false\n                  bad_invoice: Does not look like a valid lightning invoice\n                summary: Bad invoice or in case of payment failure\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/ClaimReward'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/ClaimReward'\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  successful_withdrawal:\n                    type: boolean\n                    default: true\n          description: ''\n        '400':\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - type: object\n                  properties:\n                    successful_withdrawal:\n                      type: boolean\n                      default: false\n                    bad_invoice:\n                      type: string\n                      description: More context for the reason of the failure\n                - type: object\n                  properties:\n                    successful_withdrawal:\n                      type: boolean\n                      default: false\n                    bad_request:\n                      type: string\n                      description: More context for the reason of the failure\n              examples:\n                UserNotAuthenticated:\n                  value:\n                    bad_request: Woops! It seems you do not have a robot avatar\n                  summary: User not authenticated\n                WhenNoRewardsEarned:\n                  value:\n                    successful_withdrawal: false\n                    bad_invoice: You have not earned rewards\n                  summary: When no rewards earned\n                BadInvoiceOrInCaseOfPaymentFailure:\n                  value:\n                    successful_withdrawal: false\n                    bad_invoice: Does not look like a valid lightning invoice\n                  summary: Bad invoice or in case of payment failure\n          description: ''\n  /api/stealth/:\n    put:\n      operationId: stealth_update\n      description: Update stealth invoice option for the user\n      summary: Update stealth option\n      tags:\n      - stealth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Stealth'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Stealth'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Stealth'\n        required: true\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stealth'\n          description: ''\n        '400':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bad_request:\n                    type: string\n                    description: Reason for the failure\n          description: ''\n    patch:\n      operationId: stealth_partial_update\n      tags:\n      - stealth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedStealth'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PatchedStealth'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedStealth'\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stealth'\n          description: ''\n  /api/ticks/:\n    get:\n      operationId: ticks_list\n      description: |-\n        Get all market ticks. Returns a list of all the market ticks since inception.\n        CEX price is also recorded for useful insight on the historical premium of Non-KYC BTC. Price is set when taker bond is locked.\n      summary: Get market ticks\n      tags:\n      - ticks\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tick'\n          description: ''\n  /api/user/:\n    post:\n      operationId: user_create\n      description: |-\n        Get a new user derived from a high entropy token\n\n        - Request has a hash of a high-entropy token\n        - Request includes pubKey and encrypted privKey\n        - Generates new nickname and avatar.\n        - Creates login credentials (new User object)\n\n        Response with Avatar, Nickname, pubKey, privKey.\n      tags:\n      - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserGen'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/UserGen'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/UserGen'\n        required: true\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserGen'\n          description: ''\n    delete:\n      operationId: user_destroy\n      description: |2\n\n        Delete a Robot. Deleting a robot is not allowed if the robot has an active order, has had completed trades or was created more than 30 mins ago.\n        Mainly used on the frontend to \"Generate new Robot\" without flooding the DB with discarded robots.\n      summary: Delete user\n      tags:\n      - user\n      security:\n      - cookieAuth: []\n      - basicAuth: []\n      - {}\n      responses:\n        '403':\n          description: No response body\n        '400':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bad_request:\n                    type: string\n                    description: Reason for the failure\n          description: ''\n        '301':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user_deleted:\n                    type: string\n                    default: User deleted permanently\n          description: ''\ncomponents:\n  schemas:\n    ActionEnum:\n      enum:\n      - pause\n      - take\n      - update_invoice\n      - update_address\n      - submit_statement\n      - dispute\n      - cancel\n      - confirm\n      - rate_user\n      - rate_platform\n      type: string\n    BlankEnum:\n      enum:\n      - ''\n    ClaimReward:\n      type: object\n      properties:\n        invoice:\n          type: string\n          nullable: true\n          description: A valid LN invoice with the reward amount to withdraw\n          maxLength: 2000\n    CurrencyEnum:\n      enum:\n      - 1\n      - 2\n      - 3\n      - 4\n      - 5\n      - 6\n      - 7\n      - 8\n      - 9\n      - 10\n      - 11\n      - 12\n      - 13\n      - 14\n      - 15\n      - 16\n      - 17\n      - 18\n      - 19\n      - 20\n      - 21\n      - 22\n      - 23\n      - 24\n      - 25\n      - 26\n      - 27\n      - 28\n      - 29\n      - 30\n      - 31\n      - 32\n      - 33\n      - 34\n      - 35\n      - 36\n      - 37\n      - 38\n      - 39\n      - 40\n      - 41\n      - 42\n      - 43\n      - 44\n      - 45\n      - 46\n      - 47\n      - 48\n      - 49\n      - 50\n      - 51\n      - 52\n      - 53\n      - 54\n      - 55\n      - 56\n      - 57\n      - 58\n      - 59\n      - 60\n      - 61\n      - 62\n      - 63\n      - 64\n      - 65\n      - 66\n      - 67\n      - 68\n      - 69\n      - 300\n      - 1000\n      type: integer\n    ExpiryReasonEnum:\n      enum:\n      - 0\n      - 1\n      - 2\n      - 3\n      - 4\n      type: integer\n    Info:\n      type: object\n      properties:\n        num_public_buy_orders:\n          type: integer\n        num_public_sell_orders:\n          type: integer\n        book_liquidity:\n          type: integer\n          description: Total amount of BTC in the order book\n        active_robots_today:\n          type: string\n        last_day_nonkyc_btc_premium:\n          type: number\n          format: double\n          description: Average premium (weighted by volume) of the orders in the last\n            24h\n        last_day_volume:\n          type: number\n          format: double\n          description: Total volume in BTC in the last 24h\n        lifetime_volume:\n          type: number\n          format: double\n          description: Total volume in BTC since exchange's inception\n        lnd_version:\n          type: string\n        robosats_running_commit_hash:\n          type: string\n        alternative_site:\n          type: string\n        alternative_name:\n          type: string\n        node_alias:\n          type: string\n        node_id:\n          type: string\n        network:\n          type: string\n        maker_fee:\n          type: number\n          format: double\n          description: Exchange's set maker fee\n        taker_fee:\n          type: number\n          format: double\n          description: 'Exchange''s set taker fee '\n        bond_size:\n          type: number\n          format: double\n          description: Default bond size (percent)\n        current_swap_fee_rate:\n          type: number\n          format: double\n          description: Swap fees to perform on-chain transaction (percent)\n        nickname:\n          type: string\n          description: Currenlty logged in Robot name\n        referral_code:\n          type: string\n          description: Logged in users's referral code\n        earned_rewards:\n          type: integer\n          description: Logged in user's earned rewards in satoshis\n      required:\n      - active_robots_today\n      - alternative_name\n      - alternative_site\n      - bond_size\n      - book_liquidity\n      - current_swap_fee_rate\n      - earned_rewards\n      - last_day_nonkyc_btc_premium\n      - last_day_volume\n      - lifetime_volume\n      - lnd_version\n      - maker_fee\n      - network\n      - nickname\n      - node_alias\n      - node_id\n      - num_public_buy_orders\n      - num_public_sell_orders\n      - referral_code\n      - robosats_running_commit_hash\n      - taker_fee\n    ListOrder:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        status:\n          allOf:\n          - $ref: '#/components/schemas/StatusEnum'\n          minimum: 0\n          maximum: 32767\n        created_at:\n          type: string\n          format: date-time\n        expires_at:\n          type: string\n          format: date-time\n        type:\n          allOf:\n          - $ref: '#/components/schemas/TypeEnum'\n          minimum: 0\n          maximum: 32767\n        currency:\n          type: integer\n          nullable: true\n        amount:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,8})?$\n          nullable: true\n        has_range:\n          type: boolean\n        min_amount:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,8})?$\n          nullable: true\n        max_amount:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,8})?$\n          nullable: true\n        payment_method:\n          type: string\n          maxLength: 70\n        is_explicit:\n          type: boolean\n        premium:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,3}(?:\\.\\d{0,2})?$\n          nullable: true\n        satoshis:\n          type: integer\n          maximum: 4000000\n          minimum: 20000\n          nullable: true\n        bondless_taker:\n          type: boolean\n        maker:\n          type: integer\n          nullable: true\n        taker:\n          type: integer\n          nullable: true\n        escrow_duration:\n          type: integer\n          maximum: 28800\n          minimum: 1800\n        bond_size:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,2}(?:\\.\\d{0,2})?$\n      required:\n      - expires_at\n      - id\n      - type\n    MakeOrder:\n      type: object\n      properties:\n        type:\n          allOf:\n          - $ref: '#/components/schemas/TypeEnum'\n          minimum: 0\n          maximum: 32767\n        currency:\n          type: integer\n          description: Currency id. See [here](https://github.com/Reckless-Satoshi/robosats/blob/main/frontend/static/assets/currencies.json)\n            for a list of all IDs\n        amount:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,8})?$\n          nullable: true\n        has_range:\n          type: boolean\n          default: false\n          description: |-\n            Whether the order specifies a range of amount or a fixed amount.\n\n            If `true`, then `min_amount` and `max_amount` fields are **required**.\n\n             If `false` then `amount` is **required**\n        min_amount:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,8})?$\n          nullable: true\n        max_amount:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,8})?$\n          nullable: true\n        payment_method:\n          type: string\n          default: not specified\n          description: Can be any string. The UI recognizes [these payment methods](https://github.com/Reckless-Satoshi/robosats/blob/main/frontend/src/components/payment-methods/Methods.js)\n            and displays them with a logo.\n          maxLength: 70\n        is_explicit:\n          type: boolean\n          default: false\n          description: Whether the order is explicitly priced or not. If set to `true`\n            then `satoshis` need to be specified\n        premium:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,3}(?:\\.\\d{0,2})?$\n          nullable: true\n        satoshis:\n          type: integer\n          maximum: 4000000\n          minimum: 20000\n          nullable: true\n        public_duration:\n          type: integer\n          maximum: 86400.0\n          minimum: 597.6\n        escrow_duration:\n          type: integer\n          maximum: 28800\n          minimum: 1800\n        bond_size:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,2}(?:\\.\\d{0,2})?$\n        bondless_taker:\n          type: boolean\n          default: false\n          description: Whether bondless takers are allowed for this order or not\n      required:\n      - currency\n      - type\n    Nested:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        currency:\n          allOf:\n          - $ref: '#/components/schemas/CurrencyEnum'\n          minimum: 0\n          maximum: 32767\n        exchange_rate:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,4})?$\n          nullable: true\n        timestamp:\n          type: string\n          format: date-time\n      required:\n      - currency\n      - id\n    NullEnum:\n      enum:\n      - null\n    OrderDetail:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        status:\n          allOf:\n          - $ref: '#/components/schemas/StatusEnum'\n          minimum: 0\n          maximum: 32767\n        created_at:\n          type: string\n          format: date-time\n        expires_at:\n          type: string\n          format: date-time\n        type:\n          allOf:\n          - $ref: '#/components/schemas/TypeEnum'\n          minimum: 0\n          maximum: 32767\n        currency:\n          type: integer\n          nullable: true\n        amount:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,8})?$\n          nullable: true\n        has_range:\n          type: boolean\n        min_amount:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,8})?$\n          nullable: true\n        max_amount:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,8})?$\n          nullable: true\n        payment_method:\n          type: string\n          maxLength: 70\n        is_explicit:\n          type: boolean\n        premium:\n          type: integer\n          description: Premium over the CEX price at the current time\n        satoshis:\n          type: integer\n          maximum: 4000000\n          minimum: 20000\n          nullable: true\n        bondless_taker:\n          type: boolean\n        maker:\n          type: integer\n          nullable: true\n        taker:\n          type: integer\n          nullable: true\n        escrow_duration:\n          type: integer\n          maximum: 28800\n          minimum: 1800\n        total_secs_exp:\n          type: integer\n          description: Duration of time (in seconds) to expire, according to the current\n            status of order.This is duration of time after `created_at` (in seconds)\n            that the order will automatically expire.This value changes according\n            to which stage the order is in\n        penalty:\n          type: string\n          format: date-time\n          description: Time when the user penalty will expire. Penalty applies when\n            you create orders repeatedly without commiting a bond\n        is_maker:\n          type: boolean\n          description: Whether you are the maker or not\n        is_taker:\n          type: boolean\n          description: Whether you are the taker or not\n        is_participant:\n          type: boolean\n          description: True if you are either a taker or maker, False otherwise\n        maker_status:\n          type: string\n          description: |-\n            Status of the maker:\n            - **'Active'** (seen within last 2 min)\n            - **'Seen Recently'** (seen within last 10 min)\n            - **'Inactive'** (seen more than 10 min ago)\n\n            Note: When you make a request to this route, your own status get's updated and can be seen by your counterparty\n        taker_status:\n          type: boolean\n          description: True if you are either a taker or maker, False otherwise\n        price_now:\n          type: integer\n          description: Price of the order in the order's currency at the time of request\n            (upto 5 significant digits)\n        premium_percentile:\n          type: integer\n          description: (Only if `is_maker`) Premium percentile of your order compared\n            to other public orders in the same currency currently in the order book\n        num_similar_orders:\n          type: integer\n          description: (Only if `is_maker`) The number of public orders of the same\n            currency currently in the order book\n        tg_enabled:\n          type: boolean\n          description: (Only if `is_maker`) Whether Telegram notification is enabled\n            or not\n        tg_token:\n          type: string\n          description: (Only if `is_maker`) Your telegram bot token required to enable\n            notifications.\n        tg_bot_name:\n          type: string\n          description: (Only if `is_maker`) The Telegram username of the bot\n        is_buyer:\n          type: boolean\n          description: Whether you are a buyer of sats (you will be receiving sats)\n        is_seller:\n          type: boolean\n          description: Whether you are a seller of sats or not (you will be sending\n            sats)\n        maker_nick:\n          type: string\n          description: Nickname (Robot name) of the maker\n        taker_nick:\n          type: string\n          description: Nickname (Robot name) of the taker\n        status_message:\n          type: string\n          description: The current status of the order corresponding to the `status`\n        is_fiat_sent:\n          type: boolean\n          description: Whether or not the fiat amount is sent by the buyer\n        is_disputed:\n          type: boolean\n          description: Whether or not the counterparty raised a dispute\n        ur_nick:\n          type: string\n          description: Your Nick\n        maker_locked:\n          type: boolean\n          description: True if maker bond is locked, False otherwise\n        taker_locked:\n          type: boolean\n          description: True if taker bond is locked, False otherwise\n        escrow_locked:\n          type: boolean\n          description: True if escrow is locked, False otherwise. Escrow is the sats\n            to be sold, held by Robosats until the trade is finised.\n        trade_satoshis:\n          type: integer\n          description: 'Seller sees the amount of sats they need to send. Buyer sees\n            the amount of sats they will receive '\n        bond_invoice:\n          type: string\n          description: When `status` = `0`, `3`. Bond invoice to be paid\n        bond_satoshis:\n          type: integer\n          description: The bond amount in satoshis\n        escrow_invoice:\n          type: string\n          description: For the seller, the escrow invoice to be held by RoboSats\n        escrow_satoshis:\n          type: integer\n          description: The escrow amount in satoshis\n        invoice_amount:\n          type: integer\n          description: The amount in sats the buyer needs to submit an invoice of\n            to receive the trade amount\n        swap_allowed:\n          type: boolean\n          description: Whether on-chain swap is allowed\n        swap_failure_reason:\n          type: string\n          description: Reason for why on-chain swap is not available\n        suggested_mining_fee_rate:\n          type: integer\n          description: fee in sats/vbyte for the on-chain swap\n        swap_fee_rate:\n          type: number\n          format: double\n          description: in percentage, the swap fee rate the platform charges\n        pending_cancel:\n          type: boolean\n          description: Your counterparty requested for a collaborative cancel when\n            `status` is either `8`, `9` or `10`\n        asked_for_cancel:\n          type: boolean\n          description: You requested for a collaborative cancel `status` is either\n            `8`, `9` or `10`\n        statement_submitted:\n          type: boolean\n          description: True if you have submitted a statement. Available when `status`\n            is `11`\n        retries:\n          type: integer\n          description: Number of times ln node has tried to make the payment to you\n            (only if you are the buyer)\n        next_retry_time:\n          type: string\n          format: date-time\n          description: The next time payment will be retried. Payment is retried every\n            1 sec\n        failure_reason:\n          type: string\n          description: The reason the payout failed\n        invoice_expired:\n          type: boolean\n          description: True if the payout invoice expired. `invoice_amount` will be\n            re-set and sent which means the user has to submit a new invoice to be\n            payed\n        public_duration:\n          type: integer\n          maximum: 86400.0\n          minimum: 597.6\n        bond_size:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,2}(?:\\.\\d{0,2})?$\n        trade_fee_percent:\n          type: integer\n          description: The fee for the trade (fees differ for maker and taker)\n        bond_size_sats:\n          type: integer\n          description: The size of the bond in sats\n        bond_size_percent:\n          type: integer\n          description: same as `bond_size`\n        maker_summary:\n          $ref: '#/components/schemas/Summary'\n        taker_summary:\n          $ref: '#/components/schemas/Summary'\n        platform_summary:\n          $ref: '#/components/schemas/PlatformSummary'\n        expiry_reason:\n          nullable: true\n          minimum: 0\n          maximum: 32767\n          oneOf:\n          - $ref: '#/components/schemas/ExpiryReasonEnum'\n          - $ref: '#/components/schemas/NullEnum'\n        expiry_message:\n          type: string\n          description: The reason the order expired (message associated with the `expiry_reason`)\n        num_satoshis:\n          type: integer\n          description: only if status = `14` (Successful Trade) and is_buyer = `true`\n        sent_satoshis:\n          type: integer\n          description: only if status = `14` (Successful Trade) and is_buyer = `true`\n        txid:\n          type: string\n          description: Transaction id of the on-chain swap payout. Only if status\n            = `14` (Successful Trade) and is_buyer = `true`\n        network:\n          type: string\n          description: The network eg. 'testnet', 'mainnet'. Only if status = `14`\n            (Successful Trade) and is_buyer = `true`\n      required:\n      - expires_at\n      - id\n      - platform_summary\n      - type\n    OrderPublic:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        created_at:\n          type: string\n          format: date-time\n        expires_at:\n          type: string\n          format: date-time\n        type:\n          allOf:\n          - $ref: '#/components/schemas/TypeEnum'\n          minimum: 0\n          maximum: 32767\n        currency:\n          type: integer\n          nullable: true\n        amount:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,8})?$\n          nullable: true\n        has_range:\n          type: boolean\n        min_amount:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,8})?$\n          nullable: true\n        max_amount:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,8})?$\n          nullable: true\n        payment_method:\n          type: string\n          maxLength: 70\n        is_explicit:\n          type: boolean\n        premium:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,3}(?:\\.\\d{0,2})?$\n          nullable: true\n        satoshis:\n          type: integer\n          maximum: 4000000\n          minimum: 20000\n          nullable: true\n        bondless_taker:\n          type: boolean\n        maker:\n          type: integer\n          nullable: true\n        maker_nick:\n          type: string\n        maker_status:\n          type: string\n          description: Status of the nick - \"Active\" or \"Inactive\"\n        price:\n          type: integer\n          description: Price in order's fiat currency\n        escrow_duration:\n          type: integer\n          maximum: 28800\n          minimum: 1800\n      required:\n      - expires_at\n      - id\n      - type\n    PatchedStealth:\n      type: object\n      properties:\n        wantsStealth:\n          type: boolean\n    PlatformSummary:\n      type: object\n      properties:\n        contract_timestamp:\n          type: string\n          format: date-time\n          description: Timestamp of when the contract was finalized (price and sats\n            fixed)\n        contract_total_time:\n          type: number\n          format: double\n          description: The time taken for the contract to complete (from taker taking\n            the order to completion of order) in seconds\n        routing_fee_sats:\n          type: integer\n          description: Sats payed by the exchange for routing fees. Mining fee in\n            case of on-chain swap payout\n        trade_revenue_sats:\n          type: integer\n          description: The sats the exchange earned from the trade\n    RatingEnum:\n      enum:\n      - '1'\n      - '2'\n      - '3'\n      - '4'\n      - '5'\n      type: string\n    StatusEnum:\n      enum:\n      - 0\n      - 1\n      - 2\n      - 3\n      - 4\n      - 5\n      - 6\n      - 7\n      - 8\n      - 9\n      - 10\n      - 11\n      - 12\n      - 13\n      - 14\n      - 15\n      - 16\n      - 17\n      - 18\n      type: integer\n    Stealth:\n      type: object\n      properties:\n        wantsStealth:\n          type: boolean\n      required:\n      - wantsStealth\n    Summary:\n      type: object\n      properties:\n        sent_fiat:\n          type: integer\n          description: same as `amount` (only for buyer)\n        received_sats:\n          type: integer\n          description: same as `trade_satoshis` (only for buyer)\n        is_swap:\n          type: boolean\n          description: True if the payout was on-chain (only for buyer)\n        received_onchain_sats:\n          type: integer\n          description: The on-chain sats received (only for buyer and if `is_swap`\n            is `true`)\n        mining_fee_sats:\n          type: integer\n          description: Mining fees paid in satoshis (only for buyer and if `is_swap`\n            is `true`)\n        swap_fee_sats:\n          type: integer\n          description: Exchange swap fee in sats (i.e excluding miner fees) (only\n            for buyer and if `is_swap` is `true`)\n        swap_fee_percent:\n          type: number\n          format: double\n          description: same as `swap_fee_rate` (only for buyer and if `is_swap` is\n            `true`\n        sent_sats:\n          type: integer\n          description: The total sats you sent (only for seller)\n        received_fiat:\n          type: integer\n          description: same as `amount` (only for seller)\n        trade_fee_sats:\n          type: integer\n          description: Exchange fees in sats (Does not include swap fee and miner\n            fee)\n    Tick:\n      type: object\n      properties:\n        timestamp:\n          type: string\n          format: date-time\n        currency:\n          allOf:\n          - $ref: '#/components/schemas/Nested'\n          readOnly: true\n        volume:\n          type: string\n          format: decimal\n          nullable: true\n        price:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,14}(?:\\.\\d{0,2})?$\n          nullable: true\n        premium:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,3}(?:\\.\\d{0,2})?$\n          nullable: true\n        fee:\n          type: string\n          format: decimal\n      required:\n      - currency\n    TypeEnum:\n      enum:\n      - 0\n      - 1\n      type: integer\n    UpdateOrder:\n      type: object\n      properties:\n        invoice:\n          type: string\n          nullable: true\n          maxLength: 2000\n        address:\n          type: string\n          nullable: true\n          maxLength: 100\n        statement:\n          type: string\n          nullable: true\n          maxLength: 10000\n        action:\n          $ref: '#/components/schemas/ActionEnum'\n        rating:\n          nullable: true\n          oneOf:\n          - $ref: '#/components/schemas/RatingEnum'\n          - $ref: '#/components/schemas/BlankEnum'\n          - $ref: '#/components/schemas/NullEnum'\n        amount:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,10}(?:\\.\\d{0,8})?$\n          nullable: true\n        mining_fee_rate:\n          type: string\n          format: decimal\n          pattern: ^-?\\d{0,3}(?:\\.\\d{0,3})?$\n          nullable: true\n      required:\n      - action\n    UserGen:\n      type: object\n      properties:\n        token_sha256:\n          type: string\n          description: SHA256 of user secret\n          maxLength: 64\n          minLength: 64\n        public_key:\n          type: string\n          description: Armored ASCII PGP public key block\n          maxLength: 2000\n        encrypted_private_key:\n          type: string\n          description: Armored ASCII PGP encrypted private key block\n          maxLength: 2000\n        ref_code:\n          type: string\n          nullable: true\n          description: Referal code\n          maxLength: 30\n        counts:\n          type: array\n          items:\n            type: integer\n          nullable: true\n          description: Counts of the unique characters in the token\n        length:\n          type: integer\n          minimum: 1\n          nullable: true\n          description: Length of the token\n        unique_values:\n          type: integer\n          minimum: 1\n          nullable: true\n          description: Number of unique values in the token\n      required:\n      - encrypted_private_key\n      - public_key\n      - token_sha256\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: sessionid\n",
			"canonicalURL": "/github.com/Reckless-Satoshi/robosats@f290fef0fd97af94b623dd3c352debfb10c2fe58/-/blob/docs/assets/schemas/api-v0.1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Reckless-Satoshi/robosats/blob/f290fef0fd97af94b623dd3c352debfb10c2fe58/docs/assets/schemas/api-v0.1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"UpdateOrder\": resolve \"#/components/schemas/UpdateOrder\": property \"rating\": oneOf: at docs/assets/schemas/api-v0.1.yaml:1711:19: $ref: resolve \"#/components/schemas/NullEnum\": infer enum type: cannot infer type from \"null\""
}