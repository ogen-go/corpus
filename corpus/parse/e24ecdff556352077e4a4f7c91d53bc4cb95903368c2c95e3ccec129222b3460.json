{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nicumicle/simple-jwt-login"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "postman/openapi.yaml",
			"byteSize": 27816,
			"content": "openapi: 3.0.1\nx-servers:\n  - url: \"{protocol}://{domain}/{APIPath}/{simplejwtloginprefix}\"\n    variables:\n      protocol:\n        enum:\n          - 'http'\n          - 'https'\n        default: 'http'\n      domain:\n        default: 'localhost'\n        description: Website Domain\n      APIPath:\n        enum:\n          - \"wp-json\"\n          - \"?rest_route=\"\n        default: '/wp-json'\n      simplejwtloginprefix:\n        default: \"simple-jwt-login/v1\"\nservers:\n  - url: \"{protocol}://{domain}/{APIPath}/{simplejwtloginprefix}\"\n    variables:\n      protocol:\n        enum:\n          - 'http'\n          - 'https'\n        default: 'http'\n      domain:\n        default: 'localhost'\n        description: Website Domain\n      APIPath:\n        enum:\n          - \"wp-json\"\n          - \"?rest_route=\"\n        default: '/wp-json'\n      simplejwtloginprefix:\n        default: \"simple-jwt-login/v1\"\ninfo:\n  title: Simple-JWT-Login\n  description: |\n    This is the Simple-JWT-Login WordPress plugin API Documentation.\n\n    ## Introduction\n\n    This API is documented in **OpenAPI format**. You can either open it in [swagger editor](https://editor.swagger.io/) or you can view it on this website.\n\n    Also, you open it in postman, and you will be able to do local tests.\n\n    ## Server\n\n    You can access the Simple-JWT-Login API in two modes:\n      - using permalink: https://{domain}/wp-json/simple-jwt-login/v1/{endpoint}\n      - using rest_route: https://{domain}/?rest_route=/simple-jwt-login/v1/{endpoint}\n    ## Cross-Origin Resource Sharing\n    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\n    And that allows cross-domain communication from the browser.\n    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n  contact:\n    email: contact@simplejwtlogin.com\n  license:\n    name: GLP 2.0\n    url: https://github.com/nicumicle/simple-jwt-login/blob/master/LICENSE\n  version: 1.0.0\n  x-logo:\n    url: 'https://redocly.github.io/redoc/petstore-logo.png'\n    altText: Simple-Jwt-Login Logo\nexternalDocs:\n  description: Find out more about Simple-JWT-Login\n  url: https://simplejwtlogin.com/docs\ntags:\n  - name: login_user\n    description: Login user in WordPress\n    externalDocs:\n      description: Find out more\n      url: https://www.simplejwtlogin.com/docs/autologin\n  - name: register_user\n    description: Register WordPress user\n    externalDocs:\n      description: Find out more\n      url: https://www.simplejwtlogin.com/docs/register-user\n  - name: delete_user\n    description: Delete WordPress user\n    externalDocs:\n      description: Find out more\n      url: https://www.simplejwtlogin.com/docs/delete_user\n  - name: reset_password\n    description: Reset User Password\n    externalDocs:\n      description: Find out more\n      url: https://www.simplejwtlogin.com/docs/change-password\n  - name: authenticate_user\n    description: Authenticate user\n    externalDocs:\n      description: Find out more\n      url: https://www.simplejwtlogin.com/docs/authentication\nx-tags:\n  - name: login_user\n    description: Login user in WordPress\n    externalDocs:\n      description: Find out more\n      url: https://www.simplejwtlogin.com/docs/autologin\n  - name: register_user\n    description: Register WordPress user\n    externalDocs:\n      description: Find out more\n      url: https://www.simplejwtlogin.com/docs/register-user\n  - name: delete_user\n    description: Delete WordPress user\n    externalDocs:\n      description: Find out more\n      url: https://www.simplejwtlogin.com/docs/delete_user\n  - name: reset_password\n    description: Reset User Password\n    externalDocs:\n      description: Find out more\n      url: https://www.simplejwtlogin.com/docs/change-password\n  - name: authenticate_user\n    description: Authenticate user\n    externalDocs:\n      description: Find out more\n      url: https://www.simplejwtlogin.com/docs/authentication\npaths:\n  /autologin:\n    get:\n      tags:\n        - login_user\n      summary: Autologin user into WordPress\n      operationId: autologin\n      parameters:\n        - name: JWT\n          in: query\n          description: JWT\n          required: true\n          example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n          schema:\n            type: string\n        - name: AUTH_CODE\n          in: query\n          example: \"MY_SUPER_SECRET_AUTH_CODE\"\n          description: Required when \"Auto-Login Requires Auth Code\" is enabled\n          schema:\n            type: string\n        - name: redirectUrl\n          in: query\n          example: \"https://simplejwtlogin.com\"\n          description: If this parameter is provided, this will overwrite the redirect URL set in the plugin settings. Also, please make sure you check the option from plugin settings.\n          schema:\n            type: string\n      responses:\n        400:\n          description: Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n        200:\n          description: Successfully login. You will be redirected to the WordPress website\n          content:\n            application/html:\n              example: \"\"\n  /users:\n    post:\n      tags:\n        - register_user\n      summary: Register WordPress user\n      requestBody:\n        description: Register WordPress user\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/registerUserBody'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/registerUserBody'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/registerUserBody'\n        required: true\n      responses:\n        400:\n          description: Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n        200:\n          description: User Registered\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n                    description: Action status\n                  id:\n                    type: number\n                    description: User ID\n                    example: 1\n                  message:\n                    type: string\n                    description: User register message\n                    example: User was successfully created.\n                  user:\n                    type: object\n                    properties:\n                      ID:\n                        type: number\n                        example: 1\n                        description: User ID\n                      user_login:\n                        type: string\n                        example: \"myusser\"\n                      user_nicename:\n                        type: string\n                        example: \"My  User\"\n                      user_email:\n                        type: string\n                        example: \"myuser@simplejwtlogin.com\"\n                      user_url:\n                        type: string\n                        example: \"https://simplejwtlogin.com/myuser\"\n                      user_registered:\n                        type: string\n                        example: \"2021-01-01 23:31:50\"\n                      user_activation_key:\n                        type: string\n                        example: \"test\"\n                      user_status:\n                        type: string\n                        example: \"0\"\n                      display_name:\n                        type: string\n                        example: \"myuser\"\n                      user_level:\n                        type: number\n                        example: 10\n                  roles:\n                    type: array\n                    items:\n                      type: string\n                      example: \"administrator\"\n                  jwt:\n                    type: string\n                    example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n    delete:\n      tags:\n        - delete_user\n      summary: Delete WordPress user\n      operationId: deleteUser\n      parameters:\n        - name: JWT\n          in: query\n          description: JWT\n          required: true\n          example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n          schema:\n            type: string\n        - name: AUTH_CODE\n          in: query\n          example: \"MY_SUPER_SECRET_AUTH_CODE\"\n          description: Required when \"Delete User Requires Auth Code\" is enabled\n          schema:\n            type: string\n      responses:\n        400:\n          description: Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n        200:\n          description: Successfully deleted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: User deleted\n                    example: User was successfully deleted.\n                  id:\n                    type: number\n                    description: User ID\n                    example: 1\n  /users/reset_password:\n    post:\n      tags:\n        - reset_password\n      operationId: sendResetPasswordCode\n      summary: Send reset password code\n      requestBody:\n        description: Send an email with the reset pasword code to the user\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/resetPasswordBody'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/resetPasswordBody'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/resetPasswordBody'\n        required: true\n      responses:\n        200:\n          description: Successfully send the reset password code\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n                  message:\n                    type: string\n                    example: Reset password email has been sent.\n        400:\n          description: Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n    put:\n      tags:\n        - reset_password\n      operationId: changeUserPassword\n      summary: Change user password\n      requestBody:\n        description: Change the user password\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/changePasswordBody'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/changePasswordBody'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/changePasswordBody'\n        required: true\n      responses:\n        200:\n          description: User password has been changed.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n                  message:\n                    type: string\n                    example: User password has been changed.\n        400:\n          description: Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n  /auth:\n    post:\n      tags:\n        - authenticate_user\n      summary: Authenticate to your WordPress website\n      operationId: getJWT\n      requestBody:\n        description: Authenticate user in order to obtain a valid JWT\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/authBody'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/authBody'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/authBody'\n        required: true\n      responses:\n        400:\n          description: Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n        200:\n          description: Successfully authenticated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: Action status\n                    example: true\n                  data:\n                    type: object\n                    properties:\n                      jwt:\n                        type: string\n                        description: JWT\n                        example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n  /auth/refresh:\n    post:\n      tags:\n        - authenticate_user\n      summary: Refresh expired JWT\n      operationId: refreshJWT\n      requestBody:\n        description: Refresh expired JWT\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/authRefreshBody'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/authRefreshBody'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/authRefreshBody'\n        required: true\n      responses:\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n        200:\n          description: Token has been refreshed succcessfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: Action status\n                    example: true\n                  data:\n                    type: object\n                    properties:\n                      jwt:\n                        type: string\n                        description: New refreshed JWT\n                        example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n  /auth/validate:\n    get:\n      tags:\n        - authenticate_user\n      summary: Validate JWT\n      operationId: validateJWT\n      parameters:\n        - name: JWT\n          in: query\n          description: JWT\n          required: true\n          example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n          schema:\n            type: string\n        - name: AUTH_CODE\n          in: query\n          example: \"MY_SUPER_SECRET_AUTH_CODE\"\n          description: Required when \"Authentication Requires Auth Code\" is enabled\n          schema:\n            type: string\n      responses:\n        400:\n          description: Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n        200:\n          description: Validate token\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n                  data:\n                    type: object\n                    properties:\n                      user:\n                        type: object\n                        properties:\n                          ID:\n                            type: string\n                            example: \"1\"\n                          user_login:\n                            type: string\n                            example: \"myusser\"\n                          user_nicename:\n                            type: string\n                            example: \"My  User\"\n                          user_email:\n                            type: string\n                            example: \"myuser@simplejwtlogin.com\"\n                          user_url:\n                            type: string\n                            example: \"https://simplejwtlogin.com/myuser\"\n                          user_registered:\n                            type: string\n                            example:  \"2021-01-01 23:31:50\"\n                          user_activation_key:\n                            type: string\n                            example: \"test\"\n                          user_status:\n                            type: string\n                            example: \"0\"\n                          display_name:\n                            type: string\n                            example: \"myuser\"\n                      roles:\n                        type: array\n                        items:\n                          type: string\n                          example: \"administrator\"\n                      jwt:\n                        type: array\n                        items :\n                          type: object\n                          properties:\n                            token:\n                              type: string\n                              example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n                            header:\n                              type: object\n                              properties:\n                                typ:\n                                  type: string\n                                  example: \"JWT\"\n                                alg:\n                                  type: string\n                                  example: \"HS256\"\n                            payload:\n                              type: object\n                              properties:\n                                iat:\n                                  type: number\n                                  example: 123123\n                                email:\n                                  type: string\n                                  example: \"myuser@simplejwtlogin.com\"\n                                id:\n                                  type: number\n                                  example: 1\n                                site:\n                                  type: string\n                                  example: \"https://simplejwtlogin.com\"\n                                username:\n                                  type: string\n                                  example: \"myuser\"\n  /auth/revoke:\n    post:\n      tags:\n        - authenticate_user\n      summary: Revoke JWT\n      operationId: revokeJWT\n      requestBody:\n        description: Revoke JWT. When a JWT is revoken, it will be marked as invalid in future request.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/authRevokeBody'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/authRevokeBody'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/authRevokeBody'\n        required: true\n      responses:\n        400:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n        200:\n          description: Token has been revoked\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: Action status\n                    example: true\n                  data:\n                    type: object\n                    properties:\n                      jwt:\n                        type: string\n                        description: Revoked token\n                        example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\ncomponents:\n  schemas:\n    ResponseError:\n      type: object\n      properties:\n        succes:\n          type: boolean\n          example: false\n          description: \"Status of the request\"\n        data:\n          type: object\n          properties:\n            message:\n              type: string\n            errorCode:\n              type: number\n    registerUserBody:\n      type: object\n      properties:\n        email:\n          type: string\n          example: test@simplejwtlogin.com\n          description: User email address\n        password:\n          type: string\n          description: User password\n        user_login:\n          type: string\n          description: The user's login username.\n          example: myuser\n        user_nicename:\n          type: string\n          description: User URL-friendly username\n          example: myuser\n        user_url:\n          type: string\n          description: User URL\n          example: https://simplejwtlogin.com\n        display_name:\n          type: string\n          description: The user's display name. Default is the user's username.\n          example: myuser\n        nickname:\n          type: string\n          description: The user's nickname. Default is the user's username.\n          example: myuser\n        first_name:\n          type: string\n          description: The user's first name. For new users, will be used to build the first part of the user's display name if \"display_name\" is not specified.\n          example: myuser\n        last_name:\n          type: string\n          description: The user's last name. For new users, will be used to build the second part of the user's display name if \"display_name\" is not specified.\n          example: myuser\n        description:\n          type: string\n          description: The user's biographical description.\n          example: This is a sample description\n        rich_editing:\n          type: string\n          description: Whether to enable the rich-editor for the user. Accepts 'true' or 'false' as a string literal, not boolean. Default 'true'.\n          example: true\n        syntax_highlighting:\n          type: string\n          description: Whether to enable the rich code editor for the user. Accepts 'true' or 'false' as a string literal, not boolean. Default 'true'.\n          example: true\n        comment_shortcuts:\n          type: string\n          description: Whether to enable comment moderation keyboard shortcuts for the user. Accepts 'true' or 'false' as a string literal, not boolean. Default 'false'.\n          example: falsec\n        admin_color:\n          type: string\n          description: Admin color scheme for the user. Default 'fresh'.\n          example: fresh\n        use_ssl:\n          type: boolean\n          description: Whether the user should always access the admin over https. Default false.\n          example: true\n        user_registered:\n          type: string\n          description: Date the user registered. Format is 'Y-m-d H:m:s'.\n          example: \"2022-01-31 23:15:30\"\n        user_activation_key:\n          type: string\n          description: Password reset key. Default empty.\n        spam:\n          type: boolean\n          description: Multisite only. Whether the user is marked as spam. Default false.\n          example: false\n        show_admin_bar_front:\n          type: string\n          description: Whether to display the Admin Bar for the user on the site's front end.Accepts 'true' or 'false' as a string literal, not boolean. Default 'true'.\n          example: true\n        locale:\n          type: string\n          description:  User's locale. Default empty.\n          example: \"\"\n      required:\n        - email\n        - password\n    authBody:\n      type: object\n      properties:\n        email:\n          type: string\n          example: john@doe.com\n          description: Required when username is not provided.\n        username:\n          type: string\n          example: myuser\n          description: Required when email is not provided.\n        password:\n          type: string\n          description: User plain password. Required when pass_hash is not provided.\n        password_hash:\n          type: string\n          description: User hashed password from Database. Required when password is not provided.\n        AUTH_CODE:\n          type: string\n          example: \"MY_SUPER_SECRET_AUTH_CODE\"\n          description: Required when \"Authentication Requires Auth Code\" is enabled\n    authRefreshBody:\n      type: object\n      properties:\n        JWT:\n          type: string\n          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n          description: Expired JWT.\n        AUTH_CODE:\n          type: string\n          example: \"MY_SUPER_SECRET_AUTH_CODE\"\n          description: Required when \"Authentication Requires Auth Code\" is enabled\n      required:\n        - JWT\n    authRevokeBody:\n      type: object\n      properties:\n        JWT:\n          type: string\n          example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n          description: Expired JWT.\n        AUTH_CODE:\n          type: string\n          example: \"MY_SUPER_SECRET_AUTH_CODE\"\n          description: Required when \"Authentication Requires Auth Code\" is enabled\n      required:\n        - JWT\n    resetPasswordBody:\n      type: object\n      properties:\n        email:\n          type: string\n          example: contact@simplejwtlogin.com\n        AUTH_CODE:\n          type: string\n          example: \"MY_SUPER_SECRET_AUTH_CODE\"\n          description: Required when \"AuthenticationReset Password Requires Auth Code\" is enabled\n    changePasswordBody:\n      type: object\n      properties:\n        email:\n          type: string\n          example: contact@simplejwtlogin.com\n        code:\n          type: string\n          example: MY_SECRED_CODE_RECEIVED_BY_EMAIL\n        new_password:\n          type: string\n          example: New user password\n        JWT:\n          example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n          description: In order to reset password with JWT, you need to check \"Allow Reset password with JWT\". If a JWT is provided, the `code` parameter is no loger required.\n        AUTH_CODE:\n          type: string\n          example: \"MY_SUPER_SECRET_AUTH_CODE\"\n          description: Required when \"AuthenticationReset Password Requires Auth Code\" is enabled\n",
			"canonicalURL": "/github.com/nicumicle/simple-jwt-login@3769fff64a518f76c3526a0d64f04f1a9fdb3821/-/blob/postman/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nicumicle/simple-jwt-login/blob/3769fff64a518f76c3526a0d64f04f1a9fdb3821/postman/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse servers: at 1:18110: the default value \"/wp-json\" MUST exist in the enum's values"
}