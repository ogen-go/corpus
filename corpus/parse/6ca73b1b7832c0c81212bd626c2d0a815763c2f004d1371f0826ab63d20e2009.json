{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kubeshop/tracetest"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/openapi.yaml",
			"byteSize": 14659,
			"content": "openapi: 3.0.0\ninfo:\n  version: 0.0.1\n  title: TraceTest\n  description: OpenAPI definition for TraceTest endpoint and resources\nservers:\n  - url: /api\npaths:\n  /tests:\n    get:\n      tags:\n        - api\n      summary: \"Get tests\"\n      description: \"get tests\"\n      operationId: getTests\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Test\"\n        500:\n          description: \"problem with getting tests\"\n          # content:\n          #   application/problem+json:\n          #     schema:\n          #       type: array\n          #       items:\n          #         $ref: \"#/components/schemas/Problem\"\n    post:\n      tags:\n        - api\n      summary: \"Create new test\"\n      description: \"Create new test action\"\n      operationId: createTest\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Test\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Test\"\n        500:\n          description: \"problem with creating test\"\n          # content:\n          #   application/problem+json:\n          #     schema:\n          #       type: array\n          #       items:\n          #         $ref: \"#/components/schemas/Problem\"\n  /tests/{testId}:\n    get:\n      tags:\n        - api\n      parameters:\n        - in: path\n          name: testId\n          schema:\n            type: string\n            format: uuid\n          required: true\n      summary: \"get test\"\n      description: \"get test\"\n      operationId: getTest\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Test\"\n        500:\n          description: \"problem with getting a test\"\n    put:\n      tags:\n        - api\n      parameters:\n        - in: path\n          name: testId\n          schema:\n            type: string\n            format: uuid\n          required: true\n      summary: \"update test\"\n      description: \"update test action\"\n      operationId: updateTest\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Test\"\n      responses:\n        204:\n          description: successful operation\n        500:\n          description: \"problem with updating test\"\n  /tests/{testId}/run:\n    post:\n      tags:\n        - api\n      parameters:\n        - in: path\n          name: testId\n          schema:\n            type: string\n            format: uuid\n          required: true\n      summary: \"run test\"\n      description: \"run a particular test\"\n      operationId: runTest\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestRunResult\"\n\n  /tests/{testId}/results/{resultId}:\n    get:\n      tags:\n        - api\n      parameters:\n        - in: path\n          name: testId\n          schema:\n            type: string\n            format: uuid\n          required: true\n        - in: path\n          name: resultId\n          schema:\n            type: string\n            format: uuid\n          required: true\n      summary: \"get test result\"\n      description: \"get a particular test result\"\n      operationId: getTestResult\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestRunResult\"\n    put:\n      tags:\n        - api\n      parameters:\n        - in: path\n          name: testId\n          schema:\n            type: string\n            format: uuid\n          required: true\n        - in: path\n          name: resultId\n          schema:\n            type: string\n            format: uuid\n          required: true\n      summary: \"update test result state\"\n      description: \"update test result state for a particular test\"\n      operationId: updateTestResult\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestAssertionResult\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TestRunResult\"\n  /tests/{testId}/results:\n    get:\n      tags:\n        - api\n      parameters:\n        - in: path\n          name: testId\n          schema:\n            type: string\n            format: uuid\n          required: true\n      summary: \"get the results for a test\"\n      description: \"get the results from a particular test\"\n      operationId: getTestResults\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TestRunResult\"\n  /tests/{testId}/assertions:\n    get:\n      tags:\n        - api\n      parameters:\n        - in: path\n          name: testId\n          schema:\n            type: string\n            format: uuid\n          required: true\n      operationId: getAssertions\n      summary: \"Get assertions for a test\"\n      description: \"Gets all assertions associated to a particular test\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Assertion\"\n    post:\n      tags:\n        - api\n      parameters:\n        - in: path\n          name: testId\n          schema:\n            type: string\n            format: uuid\n          required: true\n      summary: \"Create an assertion for a test\"\n      description: \"Create an assertion for a particular test\"\n      operationId: createAssertion\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Assertion\"\n      responses:\n        \"200\":\n          description: OK\n  /tests/{testId}/assertions/{assertionId}:\n    put:\n      tags:\n        - api\n      parameters:\n        - in: path\n          name: testId\n          schema:\n            type: string\n            format: uuid\n          required: true\n        - in: path\n          name: assertionId\n          schema:\n            type: string\n            format: uuid\n          required: true\n      summary: \"update an assertion\"\n      description: \"update an assertion\"\n      operationId: updateAssertion\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Assertion\"\n      responses:\n        \"204\":\n          description: OK\n    delete:\n      tags:\n        - api\n      parameters:\n        - in: path\n          name: testId\n          schema:\n            type: string\n            format: uuid\n          required: true\n        - in: path\n          name: assertionId\n          schema:\n            type: string\n            format: uuid\n          required: true\n      summary: \"delete an assertion\"\n      description: \"delete an assertion\"\n      operationId: deleteAssertion\n      responses:\n        \"204\":\n          description: OK\ncomponents:\n  schemas:\n    Test:\n      type: object\n      properties:\n        testId:\n          type: string\n          description: ID\n          format: uuid\n          readOnly: true\n        name:\n          type: string\n        description:\n          type: string\n        serviceUnderTest:\n          type: object\n          properties:\n            id:\n              type: string\n              description: ID\n              format: uuid\n              readOnly: true\n            request:\n              $ref: \"#/components/schemas/HTTPRequest\"\n        assertions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Assertion\"\n          description: Definition of assertions that are going to be made\n        referenceTestRunResult:\n          $ref: \"#/components/schemas/TestRunResult\"\n    Assertion:\n      type: object\n      properties:\n        assertionId:\n          type: string\n          description: ID\n          format: uuid\n          readOnly: true\n        selectors:\n          type: array\n          items:\n            $ref: \"#/components/schemas/SelectorItem\"\n        spanAssertions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/SpanAssertion\"\n    TestRunResult:\n      type: object\n      properties:\n        resultId:\n          type: string\n          description: ID\n          format: uuid\n          readOnly: true\n        testId:\n          type: string\n          description: test ID\n          format: uuid\n          readOnly: true\n        traceId:\n          type: string\n          description: trace ID\n          readOnly: true\n        spanId:\n          type: string\n          description: parent span ID\n          readOnly: true\n        state:\n          type: string\n          enum: [CREATED, EXECUTING, AWAITING_TRACE, FAILED, FINISHED, AWAITING_TEST_RESULTS]\n          description: Current execution state\n        lastErrorState:\n          type: string\n          description: Details of the cause for the last `FAILED` state\n        createdAt:\n          type: string\n          format: date-time\n        completedAt:\n          type: string\n          format: date-time\n        response:\n          $ref: \"#/components/schemas/HTTPResponse\"\n          description: TODO(pov) This is HTTP Response object for now, at some point it might be GRPC/SOAP/...\n        trace:\n          $ref: \"./trace.yaml#/definitions/api_v3SpansResponseChunk\"\n        assertionResultState:\n          type: boolean\n          description: True if all trace spans passed the assertion test\n        assertionResult:\n          type: array\n          description: List of all tested span assertions\n          items:\n            $ref: \"#/components/schemas/AssertionResult\"\n    TestAssertionResult:\n      type: object\n      properties:\n        assertionResultState:\n            type: boolean\n            description: True if all trace spans passed the assertion test\n        assertionResult:\n          type: array\n          description: List of all tested span assertions\n          items:\n            $ref: \"#/components/schemas/AssertionResult\"\n    Attribute:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID\n          readOnly: true\n        key:\n          type: string\n        value:\n          type: string\n    SelectorItem:\n      type: object\n      properties:\n        locationName:\n          type: string\n          enum: [RESOURCE_ATTRIBUTES, INSTRUMENTATION_LIBRARY, SPAN, SPAN_ATTRIBUTES]\n          description: Example \"SPAN\"\n        propertyName:\n          type: string\n          description: Example \"operation\"\n        value:\n          type: string\n          description: Example \"POST /users/verify\"\n        valueType:\n          type: string\n          description: TODO(pov) think about value types?\n          enum: [stringValue, intValue]\n    SpanAssertion:\n      type: object\n      properties:\n        spanAssertionId:\n          type: string\n          description: ID\n          readOnly: true\n        locationName:\n          type: string\n          enum: [RESOURCE_ATTRIBUTES, INSTRUMENTATION_LIBRARY, SPAN, SPAN_ATTRIBUTES]\n          description: Example \"SPAN_ATTRIBUTES\"\n        propertyName:\n          type: string\n          description: Example \"http.status.code\"\n        valueType:\n          type: string\n          description: Example \"intValue\"\n          enum: [stringValue, intValue]\n        operator:\n          type: string\n          description: Example \"EQUALS\"\n          enum: [EQUALS, LESSTHAN, GREATERTHAN, NOTEQUALS]\n        comparisonValue:\n          type: string\n          description: Example \"200\"\n    HTTPResponse:\n      type: object\n      properties:\n        status:\n          type: string\n        statusCode:\n          type: integer\n        headers:\n          type: array\n          items:\n            type: object\n            properties:\n              key:\n                type: string\n              value:\n                type: string\n        body:\n          type: string\n          format: byte\n    AssertionResult:\n      type: object\n      properties:\n        assertionId:\n          type: string\n          description: ID\n        spanAssertionResults:\n          type: array\n          items:\n            $ref: \"#/components/schemas/SpanAssertionResult\"\n    SpanAssertionResult:\n      type: object\n      properties:\n        spanAssertionId:\n          type: string\n          description: ID\n        spanId:\n          type: string\n          description: ID\n        passed:\n          type: boolean\n          description: True if the span passed the assertion test\n        observedValue:\n          type: string\n          description: 'value that the trace for this test run contained'\n          readOnly: true\n    HTTPRequest:\n      type: object\n      properties:\n        url:\n          type: string\n        method:\n          type: string\n          enum: [GET, PUT, POST, PATCH, DELETE, COPY, HEAD, OPTIONS, LINK, UNLINK, PURGE, LOCK, UNLOCK, PROPFIND, VIEW]\n        headers:\n          type: array\n          items:\n            type: object\n            properties:\n              key:\n                type: string\n              value:\n                type: string\n        body:\n          type: string\n          format: byte\n        auth:\n          $ref: \"#/components/schemas/HTTPAuth\"\n        proxy:\n          type: object\n          description: TODO\n        certificate:\n          type: object\n          description: TODO\n    HTTPAuth:\n      type: object\n      properties:\n        type:\n          type: string\n          enum: [apiKey, basic, bearer]\n        apiKey:\n          type: object\n          properties:\n            key:\n              type: string\n            value:\n              type: string\n            in:\n              type: string\n              enum: [query, header]\n        basic:\n          type: object\n          properties:\n            username:\n              type: string\n            password:\n              type: string\n        bearer:\n          type: object\n          properties:\n            token:\n              type: string\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Test\": parse schema: property \"referenceTestRunResult\": parse schema: resolve \"#/components/schemas/TestRunResult\": parse schema: property \"trace\": parse schema: resolve \"./trace.yaml#/definitions/api_v3SpansResponseChunk\": find schema: external base \"./trace.yaml\" is not supported"
}