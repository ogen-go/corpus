{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rapi-doc/RapiDoc"
		},
		"file": {
			"name": "oneof.yaml",
			"size": 0,
			"path": "docs/specs/oneof.yaml",
			"byteSize": 5254,
			"content": "openapi: 3.0.0\r\ninfo:\r\n  title: one-of Models\r\n  version: 1.0.0\r\n  description: Spec containing model composition using one-of. Checkout the model\r\n    definition under the RESPONSE section\r\npaths:\r\n  /one-of/employee:\r\n    get:\r\n      tags:\r\n        - One Of Schema Model\r\n      summary: Schema defined using one-of\r\n      operationId: empDetails\r\n      responses:\r\n        \"200\":\r\n          description: Checkout the model tab to view object schemas defined using one-of\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: \"#/components/schemas/employee\"\r\n  /one-of/schema:\r\n    get:\r\n      tags:\r\n        - One Of Schema Model\r\n      summary: ONE-OF schema example generation test\r\n      operationId: empDetails\r\n      responses:\r\n        \"200\":\r\n          description: Should generate 2 examples one with each option and the properties\r\n          content:\r\n            application/json:\r\n              schema:\r\n                oneOf:\r\n                  - type: object\r\n                    properties:\r\n                      option1_PropA:\r\n                        type: string\r\n                      option1_PropB:\r\n                        type: string\r\n                  - type: object\r\n                    properties:\r\n                      option2_PropX:\r\n                        type: string\r\n                properties:\r\n                  prop1:\r\n                    type: string\r\n                  prop2:\r\n                    type: string\r\n                    minLength: 10\r\n  /one-of/schema/senseless-options:\r\n    get:\r\n      tags:\r\n        - One Of Schema Model\r\n      summary: ONE-OF schema example generation test but with senseless options\r\n      operationId: empDetails\r\n      responses:\r\n        \"200\":\r\n          description: Should only generate examples for options that are objects\r\n          content:\r\n            application/json:\r\n              schema:\r\n                oneOf:\r\n                  - type: 'null'\r\n                  - type: string\r\n                  - type: object\r\n                    properties:\r\n                      option2_PropX:\r\n                        type: string\r\n                  - type: object\r\n                    properties:\r\n                      option1_PropA:\r\n                        type: string\r\n                      option1_PropB:\r\n                        type: string\r\n                properties:\r\n                  prop1:\r\n                    type: string\r\n                  prop2:\r\n                    type: string\r\n                    minLength: 10\r\n  /one-of/schema/root:\r\n    get:\r\n      tags:\r\n        - One Of Schema Model\r\n      summary: ONE-OF schema example generation with object and primitives at the root level (no common properties)\r\n      operationId: empDetails\r\n      responses:\r\n        \"200\":\r\n          description: Should generate examples for both the object and primitive options, but not for null\r\n          content:\r\n            application/json:\r\n              schema:\r\n                oneOf:\r\n                  - type: 'null'\r\n                  - type: string\r\n                  - type: object\r\n                    properties:\r\n                      option2_PropX:\r\n                        type: string\r\n                  - type: object\r\n                    properties:\r\n                      option1_PropA:\r\n                        type: string\r\n                      option1_PropB:\r\n                        type: string\r\n\r\ntags:\r\n  - name: Employee Details\r\n    description: Employee Details\r\ncomponents:\r\n  schemas:\r\n    employee:\r\n      type: object\r\n      additionalProperties: false\r\n      properties:\r\n        id:\r\n          type: string\r\n          description: Employee ID\r\n        employee:\r\n          description: Employee Details (Worker or Manager)\r\n          oneOf:\r\n            - $ref: \"#/components/schemas/manager\"\r\n            - $ref: \"#/components/schemas/worker\"\r\n    manager:\r\n      title: Manager\r\n      type: object\r\n      additionalProperties: false\r\n      properties:\r\n        name:\r\n          type: string\r\n          description: Name of employee\r\n        directReports:\r\n          type: integer\r\n          description: Count of direct reports\r\n        managePower:\r\n          oneOf:\r\n            - $ref: \"#/components/schemas/peopleManager\"\r\n            - $ref: \"#/components/schemas/costManager\"\r\n    worker:\r\n      title: Worker\r\n      type: object\r\n      additionalProperties: false\r\n      properties:\r\n        name:\r\n          type: string\r\n          description: Name of employee\r\n        managerName:\r\n          type: string\r\n          description: Name of manager\r\n    peopleManager:\r\n      title: People Manager\r\n      type: object\r\n      additionalProperties: false\r\n      properties:\r\n        level:\r\n          type: integer\r\n        maxDirectReportsAllowed:\r\n          type: string\r\n          description: No of people the level can manage\r\n    costManager:\r\n      title: Cost Manager\r\n      type: object\r\n      additionalProperties: false\r\n      properties:\r\n        level:\r\n          type: integer\r\n        canAuthorizeMaxAmount:\r\n          type: number\r\n          description: Maximum amount that this level can authorize\r\n",
			"canonicalURL": "/github.com/rapi-doc/RapiDoc@5243197b47f23dbf2923a0fdef50e4c4231419c0/-/blob/docs/specs/oneof.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/rapi-doc/RapiDoc/blob/5243197b47f23dbf2923a0fdef50e4c4231419c0/docs/specs/oneof.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/one-of/schema\": at 1:1866: get: duplicate operationId: \"empDetails\""
}