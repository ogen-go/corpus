{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vrchatapi/specification"
		},
		"file": {
			"name": "users.yaml",
			"path": "openapi/components/paths/users.yaml",
			"content": "openapi: 3.0.3\ninfo:\n  title: users\n  version: '1.0'\n  description: Users Docs Here\npaths:\n  /users:\n    get:\n      summary: Search All Users\n      tags:\n        - users\n      responses:\n        '200':\n          $ref: ../responses/users/LimitedUserListResponse.yaml\n        '400':\n          $ref: ../responses/users/UsersInvalidSearchError.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n      operationId: searchUsers\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      parameters:\n        - schema:\n            type: string\n            minLength: 0\n          in: query\n          name: search\n          description: Searches by `displayName`. Will return empty array if search query is empty or missing.\n        - schema:\n            type: string\n          in: query\n          name: developerType\n          description: 'Active user by developer type, none for normal users and internal for moderators'\n        - $ref: ../parameters.yaml#/number\n        - $ref: ../parameters.yaml#/offset\n      description: Search and list any users by text query\n  '/users/{username}/name':\n    parameters:\n      - schema:\n          type: string\n        name: username\n        in: path\n        required: true\n    get:\n      summary: Get User by Username\n      tags:\n        - users\n      responses:\n        '200':\n          $ref: ../responses/users/UserResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n      operationId: getUserByName\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: Get public user information about a specific user using their name.\n  '/users/{userId}':\n    parameters:\n      - $ref: ../parameters.yaml#/userId\n    get:\n      summary: Get User by ID\n      tags:\n        - users\n      responses:\n        '200':\n          $ref: ../responses/users/UserResponse.yaml\n        '401':\n          $ref: ../responses/MissingCredentialsError.yaml\n      operationId: getUser\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      description: Get public user information about a specific user using their ID.\n    put:\n      summary: Update User Info\n      operationId: updateUser\n      responses:\n        '200':\n          $ref: ../responses/users/CurrentUserResponse.yaml\n      description: Update a users information such as the email and birthday.\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ../requests/UpdateUserRequest.yaml\n      tags:\n        - users\n  /users/active:\n    get:\n      summary: Search Active Users\n      tags:\n        - users\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: ../schemas/LimitedUser.yaml\n        '403':\n          $ref: ../responses/InvalidAdminCredentialsError.yaml\n      operationId: searchActiveUsers\n      security:\n        - apiKeyCookie: []\n          authCookie: []\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: search\n          required: true\n          description: Username to search for\n        - schema:\n            type: string\n          in: query\n          name: developerType\n          description: 'Active user by developer type, none for normal users and internal for moderators'\n        - $ref: ../parameters.yaml#/offset\n        - $ref: ../parameters.yaml#/number\n      x-internal: true\n      deprecated: true\n      description: '**REQUIRES ADMIN CREDENTIALS**. Search and list any Active users by text query.'\ntags:\n  $ref: ../tags.yaml\ncomponents:\n  securitySchemes:\n    $ref: ../securitySchemes.yaml\n"
		}
	},
	"Error": "json: cannot unmarshal object into Go struct field Spec.tags of type []ogen.Tag"
}