{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/GroupePSA/groupepsa.github.io"
		},
		"file": {
			"name": "api-b2c-webhook-template.yaml",
			"size": 0,
			"path": "assets/openapi/api-b2c-webhook-template.yaml",
			"byteSize": 9221,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://client.base.uri/root'\ninfo:\n  version: '2.0'\n  title: Groupe PSA Connected Car API\n  description: | \n              # \u003c\u003c*Monitor Webhook template*\u003e\u003e\n\n              # Introduction\n\n                \n                This is the description of the *Groupe PSA Connected Car V2 API*. The\n                speccification is  is based on **OpenAPI Specification version 3** and can\n                be displayed via [ReDoc](https://github.com/Rebilly/ReDoc)a or\n                [Swagger](http://swagger.io).\n                 The REST API allows  applications to fetch data from the connected Vehicles data  platform.\n               .\n              # Authentication\n                TBD.\n\n    \n  license:\n    name: Groupe PSA Licence\n    url: 'https://www.psa-peugeot-citroen.com/'\ntags:\n  - name: Webhook\n    description: Monitor webhook model.\n \npaths:\n\n  '/monitors/webhook':\n    post:\n      tags:\n        - Webhook\n      summary: Post a list of monitor events.\n      description: |\n                    Post a a list of avent raised by a a registered monitor.\n      operationId: set\n      parameters:\n        - $ref: '#/components/parameters/headerAttribute'\n      requestBody:\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/MonitorEvents'\n      responses:\n        201:\n         description: Post Ok.\n        default:\n          $ref: '#/components/responses/PostErrorResponse'\n\n \ncomponents:\n  securitySchemes:\n    basicAuth:     # \u003c-- arbitrary name for the security scheme\n      type: http\n      scheme: basic\n  schemas:\n    Attributes:\n          type: array\n          description: \u003e-\n            Additional attribute set that was defined when registering the monitor (a set of key / values)\n          items:\n            type: object\n            properties:\n              key:\n                type: string\n              value:\n                type: string\n            required:\n              - key\n              - value  \n   \n  \n    MonitorId:\n      type: string\n      description: The identifier of monitor that raised the event.\n      \n    MonitorEvents:\n      title: MonitorEvents\n      description: Monitor event list. This list will contain only one item when the batch-notify (see Monitor API) is not set.\n      type: object\n      properties:\n        monitorId:\n           $ref: '#/components/schemas/MonitorId'\n        attributes:   \n            $ref: '#/components/schemas/Attributes'\n       \n        events:\n              type: array\n              items:\n                $ref: '#/components/schemas/MonitorEvent'\n    \n    MonitorEvent:\n      title: MonitorEvent\n      type: object\n      properties:\n      \n        vin:\n          description: Vehicle identifier for which the event was raised.\n          type: string  \n        eventDate:\n          description: The date on which the event was raised..\n          type: string\n          format: dateTime\n       # position:\n        #  $ref: '#/components/schemas/Position'\n       \n        values:\n          type: array\n          description: Values that caused the trigger. If subscribed monitor trigger is not a compound one then the array will contain only one item.\n          items:\n            type: object\n            description: Values pairs that caused the event.\n            properties:\n              data:\n                  type: string\n                  enum:\n                    - vehicle.alert\n                    - vehicle.odometer\n                    - vehicle.engines.running\n                    - vehicle.engines.thermic.oil.temp\n                    - vehicle.energy.electric.level\n                    - vehicle.energy.fuel.level\n                    - vehicle.energy.fuel.autonomy\n                    - vehicle.autonomy\n                    - vehicle.energy.charging.status\n                    - vehicle.energy.charging.plugged\n                    - vehicle.doorsState.lockedState\n                    - vehicle.doorsState.opening\n                    - vehicle.kinetic.moving\n                    - vehicle.kinetic.speed\n                    - vehicle.trip\n                    - vehicle.maintenance.daysBeforeMaintenance\n                    - vehicle.maintenance.mileageBeforeMaintenance\n                    - vehicle.safety.beltWarning\n                    - environment.air.temp\n                    - privacy.status\n                \n                  description: The monitored data (operand of a trigger).\n              value: \n                description: Values that caused the trigger. Could be a list of data values in case of 'includedIn' operation is used\n                type: object\n                properties:\n                      type:\n                        type: string\n                        enum: [string, obj.alert]\n                      body:\n                        type: object\n                        properties:\n                        \n                          literalValue :\n                            type: string\n                            description: a literal representation of the primitive data value. The client application should be aware of that and should convert it regarding the trigger data type.  \n                          objectValues:\n                            type: array \n                            items:\n                              type: object\n                              description: For this object schema definition (based on the type of field), refere to the API Spec definition.\n                    \n        extensions:\n          description: Defines the extra vehicle data as specified in the monitor extended eventparam file (see Monitor paramaeter objecrt definition in the API Spec)\n          type: array\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n                description: Speficies the data type of body items. \n                enum: [vehicle.doorsState, vehicle.status, vehicle.maintenance,vehicle.position, vehicle.telemetry, vehicle.alerts]\n              body:\n                type: array\n                description: \n                  Extended data can be expressed as a list of objects because in some case, a vehicle data state should be expressed as a list of value (such as active alerts at a given time). In this spec, those data are expressed as generic object and the type is provided (see type field) and so  the client application should be aware of that and should convert it regarding this data type.\n                items:\n                  type: object\n                  properties:\n                    doorState:\n                      type: object\n                    status:\n                      type: object\n                    maintenance:\n                      type: object\n                    position:\n                      type: object  \n                    telemetry:\n                      type: object\n                    alert:\n                        type: object\n                  \n        \n        refresh:\n          description: |\n              Indicates whether the event is a refresh (reminder) one or not.\n              * ```false``` means entering the context of the trigger (1st time the trigger evaluated true). \n              * ```true```means that is it a reminder event (already within trigger satisfied context).\n          type: boolean\n\n    xError:\n      type: object\n      description: Detailed error\n      properties:\n        code:\n          description: The application error code (do not confuse with http response code which is handled in http headed)\n          type: integer\n        debug:\n          description: To investigate potential mismatches (such as the soft version or component name..). \n          type: string\n        message:\n          description: A human-readable error message.\n          type: string\n      example:\n        code: 1001\n        debug: CMP_001234\n        message: Not able to process the post.\n        \n   \n\n  ########################### RESPONSES\n  \n  \n  responses:\n    PostErrorResponse:\n      description: Post event error\n      content:\n       application/json:\n        schema:\n          $ref: '#/components/schemas/xError'     \n          \n          \n          \n          ################### PARMS\n          \n          \n          \n  parameters:\n    headerAttribute:\n      name: \u003cattribute-key\u003e \n      description: |\n         An attribute key as specified in the registered monitor additional attributes set that can be used as http header (_can also be used as an **Authorization** parameter specified by the registerer_). The provided attribute value is also set when calling this api. \n         \n         **Note**:  This parameter is repeated as many times as attributes in the attribute-set declared when registring of the monitor.\n      in: header\n      required: true\n      schema:\n        type: string\n        \n    tokenAuth:\n      name: authorization\n      description: \u003e-\n        HTTP token authentication (Bearer authentication) that should be\n        retrived using PSA connection API.\n      in: header\n      required: true\n      schema:\n        type: string\n        pattern: Bearer (\\w|-|=)*\n\n \n  \n    \n   \n  \n    \n",
			"canonicalURL": "/github.com/GroupePSA/groupepsa.github.io@362f9744774fd676bd99c6d3d1119683d9b4702e/-/blob/assets/openapi/api-b2c-webhook-template.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/GroupePSA/groupepsa.github.io/blob/362f9744774fd676bd99c6d3d1119683d9b4702e/assets/openapi/api-b2c-webhook-template.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"headerAttribute\": at 1:482: invalid header name \"\u003cattribute-key\u003e\""
}