{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/NCATS-Tangerine/translator-api-registry"
		},
		"file": {
			"name": "smartapi.yaml",
			"size": 0,
			"path": "go_bp/smartapi.yaml",
			"byteSize": 19860,
			"content": "openapi: 3.0.3\ninfo:\n  contact:\n    email: help@biothings.io\n    name: BioThings Team\n    x-id: https://github.com/biothings\n    x-role: responsible developers\n  description: Documentation of the Gene Ontology Biological Process query web services.\n  termsOfService: https://biothings.io/about\n  title: Gene Ontology Biological Process API\n  version: '2020.07'\n  x-translator:\n    infores: \"infores:biothings-go-bp\"\n    component: KP\n    team:\n      - Service Provider\n    biolink-version: \"2.2.13\"\nservers:\n- description: Encrypted Production server\n  url: https://biothings.ncats.io/go_bp\n  x-maturity: production\n- description: Production server\n  url: http://biothings.ncats.io/go_bp\n  x-maturity: production\ntags:\n- name: ontology\n- name: biological process\n- name: geneset\n- name: query\n- name: translator\n- name: biothings\npaths:\n  \"/geneset/{id}\":\n    get:\n      parameters:\n      - name: id\n        in: path\n        required: true\n        example: \"GO:0009809\"\n        schema:\n          type: string\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      responses:\n        '200':\n          description: \"Success\"\n      #     content:\n      #       application/json:\n      #         schema:\n      #           $ref: '#/components/schemas/Geneset'\n      #   '404':\n      #     description: A response indicating an unknown geneset ID\n      # summary: Retrieve geneset objects based on ID\n      tags:\n      - geneset\n  \"/geneset\":\n    post:\n      parameters:\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      requestBody:\n        content:\n          application/json:\n            example:\n              ids:\n              - \"GO:0009809\"\n              - \"GO:1901428\"\n            schema:\n              type: object\n              properties:\n                ids:\n                  description: 'multiple GO geneset IDs separated by comma. Note that\n                    currently we only take the input ids up to 1000 maximum, the rest\n                    will be omitted. Type: string (list). Max: 1000.'\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '200':\n          description: \"Success\"\n      tags:\n      - geneset\n  \"/metadata\":\n    get:\n      parameters:\n      - \"$ref\": \"#/components/parameters/format\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/dev\"\n      responses:\n        '200':\n          description: Success\n      summary: Get metadata about the data available from the API\n      tags:\n      - metadata\n  \"/metadata/fields\":\n    get:\n      parameters:\n      - \"$ref\": \"#/components/parameters/format\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/search\"\n      - \"$ref\": \"#/components/parameters/prefix\"\n      responses:\n        '200':\n          description: Success\n      summary: Get metadata about the data fields available from a record\n      tags:\n      - metadata\n  \"/query\":\n    get:\n      parameters:\n      - name: q\n        description: Query string.\n        in: query\n        required: true\n        example: go:\"GO:0010596\"\n        schema:\n          type: string\n      - \"$ref\": \"#/components/parameters/aggs\"\n      - \"$ref\": \"#/components/parameters/facet_size\"\n      - \"$ref\": \"#/components/parameters/from\"\n      - \"$ref\": \"#/components/parameters/userquery\"\n      - \"$ref\": \"#/components/parameters/sort\"\n      - \"$ref\": \"#/components/parameters/explain\"\n      - \"$ref\": \"#/components/parameters/fetch_all\"\n      - \"$ref\": \"#/components/parameters/scroll_id\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      responses:\n        '200':\n          description: Success\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/QueryResult\"\n      #   '400':\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/ErrorResult\"\n      #     description: A response indicating an improperly formatted query\n      # summary: Make queries and return matching gene hits. Supports JSONP and CORS\n      #   as well.\n      tags:\n      - query\n    post:\n      parameters:\n      - name: q\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: scopes\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n            default:\n            - _id\n      - \"$ref\": \"#/components/parameters/from\"\n      - \"$ref\": \"#/components/parameters/sort\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      requestBody:\n        content:\n          application/json:\n            example:\n              q:\n              - \"GO:0009809\"\n              - \"GO:1901428\"\n              scopes:\n              - \"go\"\n            schema:\n              type: object\n              properties:\n                q:\n                  type: array\n                  items:\n                    type: string\n                scopes:\n                  type: array\n                  items:\n                    type: string\n                from:\n                  type: integer\n                sort:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '200':\n          description: Success\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/QueryPOSTResult\"\n      #   '400':\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/ErrorResult\"\n      #     description: A response indicating an improperly formatted query\n      # summary: Make batch gene queries and return matching gene hits\n      tags:\n      - query\n      x-bte-kgs-operations:\n      - $ref: '#/components/x-bte-kgs-operations/has_subclass'\n      - $ref: '#/components/x-bte-kgs-operations/subclass_of'\n      - $ref: '#/components/x-bte-kgs-operations/negatively_regulates'\n      - $ref: '#/components/x-bte-kgs-operations/negatively_regulated_by'\n      - $ref: '#/components/x-bte-kgs-operations/positively_regulates'\n      - $ref: '#/components/x-bte-kgs-operations/positively_regulated_by'\n      - $ref: '#/components/x-bte-kgs-operations/regulates'\n      - $ref: '#/components/x-bte-kgs-operations/regulated_by'\n      - $ref: '#/components/x-bte-kgs-operations/has_part'\n      - $ref: '#/components/x-bte-kgs-operations/part_of'\ncomponents:\n  parameters:\n    _sorted:\n      name: _sorted\n      in: query\n      required: false\n      schema:\n        type: boolean\n        default: true\n    _source:\n      name: _source\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    aggs:\n      name: aggs\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    allow_null:\n      name: allow_null\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    always_list:\n      name: always_list\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    dev:\n      name: dev\n      in: query\n      required: false\n      schema:\n        type: boolean\n    dotfield:\n      name: dotfield\n      in: query\n      required: false\n      schema:\n        type: boolean\n    explain:\n      name: explain\n      in: query\n      required: false\n      schema:\n        type: boolean\n    facet_size:\n      name: facet_size\n      in: query\n      required: false\n      schema:\n        type: integer\n        default: 10\n    fetch_all:\n      name: fetch_all\n      in: query\n      required: false\n      schema:\n        type: boolean\n    format:\n      name: format\n      description: 'controls output format of server response, currently supports:\n        \"json\", \"jsonld\", \"html\". Type: string. Default: json.'\n      in: query\n      required: false\n      schema:\n        type: string\n        default: json\n    from:\n      name: from\n      in: query\n      required: false\n      schema:\n        type: integer\n    prefix:\n      name: prefix\n      in: query\n      required: false\n      schema:\n        type: string\n    raw:\n      name: raw\n      in: query\n      required: false\n      schema:\n        type: boolean\n    rawquery:\n      name: rawquery\n      in: query\n      required: false\n      schema:\n        type: boolean\n    scroll_id:\n      name: scroll_id\n      in: query\n      required: false\n      schema:\n        type: string\n    search:\n      name: search\n      in: query\n      required: false\n      schema:\n        type: string\n    size:\n      name: size\n      description: \"default: 10 objects/records in response\"\n      in: query\n      required: false\n      schema:\n        type: integer\n    sort:\n      name: sort\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    userquery:\n      name: userquery\n      in: query\n      required: false\n      schema:\n        type: string\n  # schemas:\n  #   Geneset:\n  #     properties:\n  #       _id:\n  #         type: string\n  #     required:\n  #     - _id\n  #     type: object\n  #   ErrorResult:\n  #     properties:\n  #       message:\n  #         type: string\n  #       success:\n  #         type: boolean\n  #     type: object\n  #   QueryPOSTResult:\n  #     items:\n  #       allOf:\n  #       - $ref: '#/components/schemas/Geneset'\n  #       - properties:\n  #           _score:\n  #             format: float\n  #             type: number\n  #           query:\n  #             type: string\n  #         type: object\n  #     type: array\n  #   QueryResult:\n  #     properties:\n  #       hits:\n  #         items:\n  #           $ref: '#/components/schemas/Geneset'\n  #         type: array\n  #       max_score:\n  #         format: float\n  #         type: number\n  #       took:\n  #         type: integer\n  #       total:\n  #         type: integer\n  #     type: object\n  #   int64_or_array:\n  #     oneOf:\n  #     - items:\n  #         format: int64\n  #         type: integer\n  #       type: array\n  #     - format: int64\n  #       type: integer\n  #   string_or_array:\n  #     oneOf:\n  #     - items:\n  #         type: string\n  #       type: array\n  #     - type: string\n  x-bte-kgs-operations:\n    has_subclass:\n    ## 16883 records have children: https://pending.biothings.io/go_bp/query?q=_exists_:children\n    - supportBatch: true\n      useTemplating: true\n      inputs:\n      - id: GO\n        semantic: BiologicalProcess\n      requestBody:\n        body:\n          q: \"{{ queryInputs }}\"\n          scopes: _id\n      outputs:\n      - id: GO\n        semantic: BiologicalProcess\n      parameters:\n        fields: children\n      predicate: superclass_of  ## this is the inverse of subclass_of right now\n      source: \"infores:go\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/has_subclass'\n      # testExamples:\n      #   - qInput: \"GO:0089722\"       ## phosphoenolpyruvate transmembrane transport\n      #     oneOutput: \"GO:1990536\"    ## phosphoenolpyruvate transmembrane import into Golgi lumen\n    subclass_of:\n    ## all records but one have a \"parents\" field\n    - supportBatch: true\n      useTemplating: true\n      inputs:\n      - id: GO\n        semantic: BiologicalProcess\n      requestBody:\n        body:\n          q: \"{{ queryInputs }}\"\n          scopes: _id\n      outputs:\n      - id: GO\n        semantic: BiologicalProcess\n      parameters:\n        fields: parents\n      predicate: subclass_of\n      source: \"infores:go\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/subclass_of'\n      # testExamples:\n      #   - qInput: \"GO:0150068\"       ## positive regulation of tubulin deacetylase activity\n      #     oneOutput: \"GO:0090044\"    ## positive regulation of tubulin deacetylation\n    negatively_regulates:\n    ## 2774 records https://pending.biothings.io/go_bp/query?q=_exists_:negatively_regulates\n    - supportBatch: true\n      useTemplating: true\n      inputs:\n      - id: GO\n        semantic: BiologicalProcess\n      requestBody:\n        body:\n          q: \"{{ queryInputs }}\"\n          scopes: _id\n      outputs:\n      - id: GO\n        semantic: BiologicalProcess\n      parameters:\n        fields: negatively_regulates.go\n      predicate: process_negatively_regulates_process\n      source: \"infores:go\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/negatively_regulates'\n      # testExamples:\n      #   - qInput: \"GO:0090272\"       ## negative regulation of fibroblast growth factor production\n      #     oneOutput: \"GO:0090269\"    ## fibroblast growth factor production\n    negatively_regulated_by:\n      - supportBatch: true\n        useTemplating: true\n        inputs:\n        - id: GO\n          semantic: BiologicalProcess\n        requestBody:\n          body:\n            q: \"{{ queryInputs }}\"\n            scopes: negatively_regulates.go\n        outputs:\n        - id: GO\n          semantic: BiologicalProcess\n        parameters:\n          fields: _id\n        predicate: process_negatively_regulated_by_process\n        source: \"infores:go\"\n        response_mapping:\n          $ref: '#/components/x-bte-response-mapping/negatively_regulated_by'\n      # testExamples:\n      #   - qInput: \"GO:0016126\"       ## sterol biosynthetic process\n      #     oneOutput: \"GO:0106119\"    ## negative regulation of sterol biosynthetic process\n    positively_regulates:\n    ## 2761 records https://pending.biothings.io/go_bp/query?q=_exists_:positively_regulates\n    - supportBatch: true\n      useTemplating: true\n      inputs:\n      - id: GO\n        semantic: BiologicalProcess\n      requestBody:\n        body:\n          q: \"{{ queryInputs }}\"\n          scopes: _id\n      outputs:\n      - id: GO\n        semantic: BiologicalProcess\n      parameters:\n        fields: positively_regulates.go\n      predicate: process_positively_regulates_process\n      source: \"infores:go\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/positively_regulates'\n      # testExamples:\n      #   - qInput: \"GO:0090129\"       ## positive regulation of synapse maturation\n      #     oneOutput: \"GO:0060074\"    ## synapse maturation\n    positively_regulated_by:\n    - supportBatch: true\n      useTemplating: true\n      inputs:\n      - id: GO\n        semantic: BiologicalProcess\n      requestBody:\n        body:\n          q: \"{{ queryInputs }}\"\n          scopes: positively_regulates.go\n      outputs:\n      - id: GO\n        semantic: BiologicalProcess\n      parameters:\n        fields: _id\n      predicate: process_positively_regulated_by_process\n      source: \"infores:go\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/positively_regulated_by'\n      # testExamples:\n      #   - qInput: \"GO:0006641\"       ## triglyceride metabolic process\n      #     oneOutput: \"GO:0090208\"    ## positive regulation of triglyceride metabolic process\n    regulates:\n    ## 3207 records https://pending.biothings.io/go_bp/query?q=_exists_:regulates\n    - supportBatch: true\n      useTemplating: true\n      inputs:\n      - id: GO\n        semantic: BiologicalProcess\n      requestBody:\n        body:\n          q: \"{{ queryInputs }}\"\n          scopes: _id\n      outputs:\n      - id: GO\n        semantic: BiologicalProcess\n      parameters:\n        fields: regulates.go\n      predicate: process_regulates_process\n      source: \"infores:go\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/regulates'\n      # testExamples:\n      #   - qInput: \"GO:0090016\"        ## regulation of leaflet formation \n      #     oneOutput: \"GO:0090014\"     ## leaflet formation\n    regulated_by:\n    - supportBatch: true\n      useTemplating: true\n      inputs:\n      - id: GO\n        semantic: BiologicalProcess\n      requestBody:\n        body:\n          q: \"{{ queryInputs }}\"\n          scopes: regulates.go\n      outputs:\n      - id: GO\n        semantic: BiologicalProcess\n      parameters:\n        fields: _id\n      predicate: process_regulated_by_process\n      source: \"infores:go\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/regulated_by'\n      # testExamples:\n      #   - qInput: \"GO:0001822\"        ## kidney development\n      #     oneOutput: \"GO:0090183\"     ## regulation of kidney development\n    part_of:\n    ## 4928 records https://pending.biothings.io/go_bp/query?q=_exists_:part_of\n    - supportBatch: true\n      useTemplating: true\n      inputs:\n      - id: GO\n        semantic: BiologicalProcess\n      requestBody:\n        body:\n          q: \"{{ queryInputs }}\"\n          scopes: _id\n      outputs:\n      - id: GO\n        semantic: BiologicalProcess\n      parameters:\n        fields: part_of.go\n      predicate: part_of\n      source: \"infores:go\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/part_of'\n      # testExamples:\n      #   - qInput: \"GO:0090010\"        ## transforming growth factor beta receptor signaling pathway involved in primitive streak formation\n      #     oneOutput: \"GO:0090009\"     ## primitive streak formation\n    has_part:\n    - supportBatch: true\n      useTemplating: true\n      inputs:\n      - id: GO\n        semantic: BiologicalProcess\n      requestBody:\n        body:\n          q: \"{{ queryInputs }}\"\n          scopes: part_of.go\n      outputs:\n      - id: GO\n        semantic: BiologicalProcess\n      parameters:\n        fields: _id\n      predicate: has_part\n      source: \"infores:go\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/has_part'\n      # testExamples:\n      #   - qInput: \"GO:0048313\"        ## Golgi inheritance\n      #     oneOutput: \"GO:0090168\"     ## Golgi reassembly\n  x-bte-response-mapping:\n    has_subclass:\n      GO: children\n    subclass_of:\n      GO: parents\n    negatively_regulates:\n      GO: negatively_regulates.go\n    positively_regulates:\n      GO: positively_regulates.go\n    regulates:\n      GO: regulates.go\n    negatively_regulated_by:\n      GO: _id\n    positively_regulated_by:\n      GO: _id\n    regulated_by:\n      GO: _id\n    part_of:\n      GO: part_of.go\n    has_part:\n      GO: _id\n",
			"canonicalURL": "/github.com/NCATS-Tangerine/translator-api-registry@5925bba6420fb77fa3e54d9258970431e340e092/-/blob/go_bp/smartapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/NCATS-Tangerine/translator-api-registry/blob/5925bba6420fb77fa3e54d9258970431e340e092/go_bp/smartapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/query\": at 1:9331: post: at 1:10286: parameters: parse parameter \"scopes\": at 1:10396: at 1:10452: schema: at 1:10452: parse schema: item: at 1:10461: parse default: expected type \"string\", got \"array\""
}