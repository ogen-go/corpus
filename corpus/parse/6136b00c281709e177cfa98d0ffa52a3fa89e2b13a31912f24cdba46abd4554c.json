{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dev-mansonthomas/RedCrossQuest"
		},
		"file": {
			"name": "rcq-openapi.yaml",
			"size": 0,
			"path": "server/openapi/rcq-openapi.yaml",
			"byteSize": 125680,
			"content": "openapi: 3.0.0\ninfo:\n  title: 'RedCrossQuest API'\n  description: 'API for the angular application RedCrossQuest'\n  contact:\n    name: cv@mansonthomas.com\n  license:\n    name: GPLv3\n  version: 1.0.0\nservers:\n  -\n    url: redcrossquest.croix-rouge.fr\n    description: 'RedCrossQuest API'\npaths:\n  /firebase-authenticate:\n    post:\n      tags:\n        - Authentication\n      summary: 'Returns a JWT Token for RedCrossQuest API if the firebase JWT is validated'\n      description: 'In the context of a firebase application, this method validate the firebase JWT and genenrate an RCQ JWT'\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                email:\n                  description: 'email of the person being authenticated'\n                  type: string\n                token:\n                  description: 'firebase JWT'\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticationResponse'\n        '401':\n          description: 'Authorisation denied'\n  /authenticate:\n    post:\n      tags:\n        - Authentication\n      summary: 'Authenticate a RCQ user'\n      description: 'Returns a JWT Token for RedCrossQuest API if the credentials are validated \u0026 the reCapcha  is validated'\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                username:\n                  description: 'user''s nivol'\n                  type: string\n                password:\n                  description: 'user''s password'\n                  type: string\n                token:\n                  description: 'ReCapcha Token to be validated'\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticationResponse'\n        '401':\n          description: 'Authorisation denied'\n  /sendInit:\n    post:\n      tags:\n        - Authentication\n      summary: 'user''s password reinitialization'\n      description: 'Send an email to the user with a link to reinitialize his password'\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                username:\n                  description: 'user''s nivol'\n                  type: string\n                token:\n                  description: 'ReCapcha Token to be validated'\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SendPasswordInitializationMailResponse'\n        '401':\n          description: 'Authorisation denied - recaptcha validation fails'\n  /getInfoFromUUID:\n    get:\n      tags:\n        - Authentication\n      summary: 'fetch user info from UUID for password reinitialisation'\n      description: 'When a user click on the link in the email to reinitialize its email, there''s a UUID passed in the URL. From it, the process of reinitialization is validated and the username of the user is fetch'\n      parameters:\n        -\n          name: uuid\n          in: query\n          description: 'The UUID'\n          required: true\n          schema:\n            type: string\n        -\n          name: token\n          in: query\n          description: 'recaptcha token'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetUserInfoFromUUIDResponse'\n        '401':\n          description: 'Authorisation denied - recaptcha validation fails'\n  /resetPassword:\n    post:\n      tags:\n        - Authentication\n      summary: 'save the new password of the user'\n      description: 'Check ReCaptcha and save the new password for the user'\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                uuid:\n                  description: 'user''s UUID for password reset request (recieved by email)'\n                  type: string\n                password:\n                  description: 'the new password'\n                  type: string\n                token:\n                  description: 'ReCapcha Token to be validated'\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResetPasswordResponse'\n        '401':\n          description: 'Authorisation denied - recaptcha validation fails'\n  '/{role-id:[1-9]}/ul/{ul-id}/troncs':\n    get:\n      tags:\n        - Troncs\n      summary: 'Fetch the list of tronc with search criteria'\n      description: 'List all tronc by default. If filters are specified, the list can be filter by type, active state, and tronc id'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: active\n          in: query\n          description: 'filter tronc by active criteria (boolean)'\n          required: false\n          schema:\n            type: boolean\n        -\n          name: type\n          in: query\n          description: 'filter by type of tronc : {id:1,label:''Tronc''},{id:2,label:''Tronc chez un commer√ßant''},{id:3,label:''Autre''}'\n          required: false\n          schema:\n            type: string\n        -\n          name: q\n          in: query\n          description: 'Filter by tronc id. Only one tronc id value is supported. The query is implemented this way : AND CONVERT(id, CHAR) like concat(:query,''%'')'\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TroncEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/troncs/{id}':\n    get:\n      tags:\n        - Troncs\n      summary: 'Get a specific Tronc'\n      description: 'When a user click on the link in the email to reinitialize its email, there''s a UUID passed in the URL. From it, the process of reinitialization is validated and the username of the user is fetch'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'the id of the tronc you''re trying to get'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/TroncEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{ul-id}/troncs/{id}':\n    put:\n      tags:\n        - Troncs\n      summary: 'Update a tronc, only for admin role (4)'\n      description: 'Update type, notes, enabled status'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'the id of the tronc you''re trying to update'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TroncEntity'\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{ul-id}/troncs':\n    post:\n      tags:\n        - Troncs\n      summary: 'Insert new TroncS'\n      description: 'Only for admin role (4). Insert X troncs in the DB, where X=nombreTronc in TroncEntity'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'the id of the tronc you''re trying to update'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TroncEntity'\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/tronc_queteur/nonReturnedTroncQueteur/{tronc_id}':\n    delete:\n      tags:\n        - TroncsQueteurs\n      summary: 'Mark as deleted unused tronc_queteur that is linked to the {tronc_id}'\n      description: 'When doing a preparation, a check is done, to see if the queteur is not already linked to another tronc_id or the tronc_id to another queteur in a tronc_queteur row, and that tronc_queteur has depart or retour = null. If it''s the case, a popup is shown offering to mark the existing tronc_queteur as deleted. The deletion is performed by this method, on the specified tronc_id'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: tronc_id\n          in: path\n          description: 'The ID of the Tronc, used as search criteria on TroncQueteur that have retour or depart = null, to set them as deleted'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/tronc_queteur/{id}/saveReturnDate':\n    patch:\n      tags:\n        - TroncsQueteurs\n      summary: 'Update the TroncQueteur with money details'\n      description: 'Update TroncQueteur with coins, bills, credit card, bank notes details, set the ''comptage'' date and publish a message on PubSub'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'The ID of the TroncQueteur'\n          required: true\n          schema:\n            type: integer\n        -\n          name: dateDepartIsMissing\n          in: query\n          description: 'When scanning a Tronc for a ''Retour'' and the Depart date is missing, the user can fill the missing departure date and record the return date at the same time. If so, we add a parameter dateDepartIsMissing=true to notify backend that the depart must be updated'\n          required: true\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/tronc_queteur/{id}/saveCoins':\n    patch:\n      tags:\n        - TroncsQueteurs\n      summary: 'Update the TroncQueteur with money details'\n      description: 'Update TroncQueteur with coins, bills, credit card, bank notes details, set the ''comptage'' date and publish a message on PubSub'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'The ID of the TroncQueteur'\n          required: true\n          schema:\n            type: integer\n        -\n          name: adminMode\n          in: query\n          description: 'If set to true, the comptage date is not updated to now'\n          required: true\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/tronc_queteur/{id}/saveAsAdmin':\n    patch:\n      tags:\n        - TroncsQueteurs\n      summary: 'Update the TroncQueteur as admin'\n      description: 'Outside of the normal lifecycle, edit the TroncQueteur to correct dates, money etc...'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'The ID of the TroncQueteur'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/tronc_queteur/{id}/cancelDepart':\n    patch:\n      tags:\n        - TroncsQueteurs\n      summary: 'Cancel the ''Depart'''\n      description: 'Cancel the Depart (Volunteer start collecting money) by setting the ''depart'' date to null'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'The ID of the TroncQueteur'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/tronc_queteur/{id}/cancelRetour':\n    patch:\n      tags:\n        - TroncsQueteurs\n      summary: 'Cancel the ''Retour'''\n      description: 'Cancel the Retour (Return of the volunteer) by setting the ''retour'' date to null'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'The ID of the TroncQueteur'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/tronc_queteur/getTroncQueteurForTroncIdAndSetDepart':\n    patch:\n      tags:\n        - TroncsQueteurs\n      summary: 'Record Depart (start of collecting money) for a tronc ID'\n      description: 'Retrieve the correct TroncQueteur from the Tronc ID (decoded from the QRCode) and record the depart'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: tronc_id\n          in: query\n          description: 'The ID of the Tronc (scan with QRCode or hand typed)'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/TroncQueteurEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/tronc_queteur':\n    post:\n      tags:\n        - TroncsQueteurs\n      summary: 'Record a preparation or preparation and departure'\n      description: 'Record the fact that queteur queteur_id=X will use the Tronc tronc_id=Y at a specific time (preparation date) and place (PointQueteId). The departure can be recorded with this operation as well if Troncqueteur-\u003epreparationAndDepart is set to true'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TroncQueteurEntity'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/PrepareTroncQueteurResponse'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/tronc_queteur/getLastTroncQueteurFromTroncId':\n    get:\n      tags:\n        - TroncsQueteurs\n      summary: 'Get the last recored TroncQueteur linked to the passed TroncID'\n      description: 'Get the last recored TroncQueteur linked to the passed TroncID. Queteur and PointQuete object are fully retrieved. If not found, empty TroncQueteur is returned with numRows=0, and tronc_id = value passed'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: tronc_id\n          in: query\n          description: 'The ID of the Tronc'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/TroncQueteurEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/tronc_queteur/getTroncsQueteurForTroncId':\n    get:\n      tags:\n        - TroncsQueteurs\n      summary: 'Get all the TroncQueteur linked to a Tronc'\n      description: 'Get the last recored TroncQueteur linked to the passed TroncID. Queteur and PointQuete object are fully retrieved. If not found, empty TroncQueteur is returned with numRows=0, and tronc_id = value passed'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: tronc_id\n          in: query\n          description: 'The ID of the Tronc'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TroncQueteurEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/tronc_queteur/getTroncsOfQueteur':\n    get:\n      tags:\n        - TroncsQueteurs\n      summary: 'Get all the TroncQueteur linked to a Queteur'\n      description: 'Get the last recored TroncQueteur linked to the passed QueteurID. Queteur and PointQuete object are fully retrieved. If not found, empty TroncQueteur is returned with numRows=0, and tronc_id = value passed'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: queteur_id\n          in: query\n          description: 'The ID of the Queteur'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TroncQueteurEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/tronc_queteur/{id}':\n    get:\n      tags:\n        - TroncsQueteurs\n      summary: 'Get a TroncQueteur from its ID '\n      description: 'Get A TroncQueteur from its ID (TroncQueteur-\u003eid) and get the full objects for Queteur, Tronc, PointQuete'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'The ID of the TroncQueteur'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/TroncQueteurEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/pointQuetes/{id:\\d+}':\n    get:\n      tags:\n        - PointQuete\n      summary: 'Get a specific PointDeQuete'\n      description: 'Get a specific PointDeQuete (Geographical location where Queteur ask for money)'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'The ID of the PointDeQuete'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/PointQueteEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/pointQuetes':\n    get:\n      tags:\n        - PointQuete\n      summary: 'Get the list of PointDeQuete of an UL (the full list)'\n      description: 'Get the full list of PointDeQuete of an UL. Used by the frontend to put it in cache and a dropdown with local autocomplete'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PointQueteEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/pointQuetes/search':\n    get:\n      tags:\n        - PointQuete\n      summary: 'Search PointDeQuete of an UL'\n      description: 'Search Point de Quete. The Query string (q) is match against name, code, adress, city. Filter by type \u0026 active state. Search in the current UL, except for the super admin that can override the ULID'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: q\n          in: query\n          description: 'The string that is searched'\n          required: true\n          schema:\n            type: string\n        -\n          name: point_quete_type\n          in: query\n          description: 'The type of point de quete {id:1,label:''Voie Publique / Feux Rouge''},{id:2,label:''Pi√©ton''},{id:3,label:''Commer√ßant''},{id:4,label:''Base UL''},{id:5,label:''Autre''}'\n          required: true\n          schema:\n            type: integer\n        -\n          name: active\n          in: query\n          description: 'Search of active/inactive pointDeQuete'\n          required: true\n          schema:\n            type: boolean\n        -\n          name: admin_ul_id\n          in: query\n          description: 'Search a specific ULID. Available only for super admin'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PointQueteEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/pointQuetes/{id}':\n    post:\n      tags:\n        - PointQuete\n      summary: 'Record a preparation or preparation and departure'\n      description: 'Record the fact that queteur queteur_id=X will use the Tronc tronc_id=Y at a specific time (preparation date) and place (PointQueteId). The departure can be recorded with this operation as well if Troncqueteur-\u003epreparationAndDepart is set to true'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'Id of the Point de Quete we want to update'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PointQueteEntity'\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/pointQuetes':\n    post:\n      tags:\n        - PointQuete\n      summary: 'Create a pointDeQuete'\n      description: 'Create a pointDeQuete :  ie a specific location where queteur go asking for money'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PointQueteEntity'\n      responses:\n        '200':\n          description: Success\n          $ref: '#/components/schemas/CreatePointQueteResponse'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/queteurs':\n    get:\n      tags:\n        - Qu√™teurs\n      summary: 'Search the Queteur of an UL'\n      description: 'Multiple type of search are available. If anonymization_token is present, only search for queteur matching this token. Some queries are fundRaising Related and return extra info, like where should the queteur go, how much time he is out. There''s a simple search used for autocomplete search.'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: q\n          in: query\n          description: 'The string that is searched. It''s matched against NIVOL, first name, last name, and id (queteur primary key)'\n          required: false\n          schema:\n            type: string\n        -\n          name: searchType\n          in: query\n          description: 'The type of query that is being made : {0: ''search all queteur'', 1: ''Search Queteur that have a TroncQueteur Prepared but have not yet left (preparation is not null and depart is null)'', 2:''Search Queteur currently on the street asking for money (retour is null)'', 3:''Simple search for autocomplete search}'\n          required: false\n          schema:\n            type: integer\n        -\n          name: secteur\n          in: query\n          description: 'Search a specific type of queteur : {id:1,label:''Action Sociale''},{id:2,label:''Secours''},{id:3,label:''B√©n√©vole d\\''un Jour''},{id:4,label:''Ancien B√©n√©vole, Inactif ou Adh√©rent''},{id:5,label:''Commer√ßant''},{id:6,label:''Sp√©cial''}'\n          required: false\n          schema:\n            type: integer\n        -\n          name: admin_ul_id\n          in: query\n          description: 'Search a specific ULID. Available only for super admin'\n          required: false\n          schema:\n            type: integer\n        -\n          name: active\n          in: query\n          description: 'Search only for active/inactive queteurs'\n          required: false\n          schema:\n            type: boolean\n        -\n          name: rcqUser\n          in: query\n          description: 'Search only for Queteur that are also RedCrossQuest users'\n          required: false\n          schema:\n            type: boolean\n        -\n          name: rcqUserActif\n          in: query\n          description: 'if rcqUser=true, search for RCQUser depending on their active status'\n          required: false\n          schema:\n            type: boolean\n        -\n          name: benevoleOnly\n          in: query\n          description: 'Search for queteur that are registered volunteers'\n          required: false\n          schema:\n            type: boolean\n        -\n          name: queteurIds\n          in: query\n          description: 'Search of queteur matching this ID list'\n          required: false\n          schema:\n            type: string\n        -\n          name: QRSearchType\n          in: query\n          description: 'Search of queteur where the QRCode has been printed or not'\n          required: false\n          schema:\n            type: integer\n        -\n          name: anonymization_token\n          in: query\n          description: 'If this argument is present other search field are ignored. Only queteur rows that match this token will be returned'\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/QueteurEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/queteurs/countPendingQueteurRegistration':\n    get:\n      tags:\n        - Qu√™teurs\n      summary: 'Count pending registration (via RedQuest)'\n      description: 'Count pending registration (via RedQuest)'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/CountPendingRegistrationResponse'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/queteurs/listPendingQueteurRegistration':\n    get:\n      tags:\n        - Qu√™teurs\n      summary: 'List pending registration'\n      description: 'List pending registration (where validation has not been made) or list the one that have been accepted or refused.'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: registration_status\n          in: path\n          description: 'If registration_status is null or 0, list all registration that has not validation (granted/refused), registration_status=1 : list approved registration, registration_status:2 list refused registration'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/QueteurEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/queteurs/searchSimilarQueteurs':\n    get:\n      tags:\n        - Qu√™teurs\n      summary: 'Search Similar Queteur'\n      description: 'Search Queteur that have a first name, last name, nivol that are like what has been typed. At least one parameter must be given. If mutliple argument is given, the search is done with an ''OR'''\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: first_name\n          in: query\n          description: 'Search for matching first name'\n          required: false\n          schema:\n            type: string\n        -\n          name: last_name\n          in: query\n          description: 'Search for matching last name'\n          required: false\n          schema:\n            type: string\n        -\n          name: first_name\n          in: query\n          description: 'Search for matching nivol'\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/QueteurEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/queteurs/{id}':\n    get:\n      tags:\n        - Qu√™teurs\n      summary: 'Get a Queteur by its ID'\n      description: 'The queteur must belong to the RCQ user''s UL (except for super admin). If the current RCQ User is admin, the queteur''s user details is also fetched.'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'ID of the queteur'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/QueteurEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/queteurs/{id}/getQueteurRegistration':\n    get:\n      tags:\n        - Qu√™teurs\n      summary: 'Get a Queteur Registration by its registration ID'\n      description: 'Get a Queteur Registration by its ID, and if the registration_approved is null and from the same UL as the connected user.'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'ID of the queteur registration'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/QueteurEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    put:\n      tags:\n        - Qu√™teurs\n      summary: 'Get a Queteur Registration by its registration ID'\n      description: 'Get a Queteur Registration by its ID, and if the registration_approved is null and from the same UL as the connected user.'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'ID of the queteur'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/QueteurEntity'\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/queteurs/markAllAsPrinted':\n    put:\n      tags:\n        - Qu√™teurs\n      summary: 'Mark all QRCode as printed'\n      description: 'Mark all QRCode as printed for the user''s UL'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/queteurs/{id}/anonymize':\n    put:\n      tags:\n        - Qu√™teurs\n      summary: 'Anonymize a queteur and send the queteur an email'\n      description: 'This method retrieve the current queteur data, anonymize the queteur data in DB and set a GUID token on that row. Then the queteur is sent an email with the token. If the queteur return the next year with that token, his queteur row can be re-valueated with nomminative data. His previous fundraising details can be retrieved and used in gamification. The anonymized data is returned for display'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'ID of the queteur'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/QueteurEntity'\n      responses:\n        '200':\n          description: Success\n          $ref: '#/components/schemas/QueteurEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/queteurs/{id}/associateRegistrationWithExistingQueteur':\n    put:\n      tags:\n        - Qu√™teurs\n      summary: 'Associate an existing queteur with a queteur registration'\n      description: 'If an existing queteur wants to use RedQuest, he must register to RedQuest, and this registration must be approved and do not generate a duplicate. When the registration is opened, a searchSimilarQueteur is performed, and similar queteur are displayed. The user have a button to associate the registration to the existing RCQ Queteur. This button call this function, and pass the queteurEntity. But before that : the queteur registration id, must be copied in queteur-\u003eregistration_id, and the  selected QueteurId must be set in queteur-\u003eid. ul_registration_token is validated. A confirmation email is sent, and a pub_sub message is sent to RedQuest.'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'ID of the queteur (the existing one in RCQ)'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'The queteur Entity that contains the registration_id (the primary key of queteur_registration table)'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/QueteurEntity'\n      responses:\n        '200':\n          description: Success\n          $ref: '#/components/schemas/AssociateRegistrationWithExistingQueteurResponse'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/queteurs':\n    post:\n      tags:\n        - Qu√™teurs\n      summary: 'Create a new Queteur'\n      description: 'Create a queteur in current queteur''s UL. Super admin can create queteur on other Uls (for first RCQ User or debug)'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'The queteur Entity that contains queteur''s info except id. User is created later with another method'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/QueteurEntity'\n      responses:\n        '200':\n          description: Success\n          $ref: '#/components/schemas/CreateQueteurResponse'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[2-9]}/ul/{ul-id}/queteurs/approveQueteurRegistration':\n    post:\n      tags:\n        - Qu√™teurs\n      summary: 'Accept or refuse a queteur registration.'\n      description: 'ul_registration_token is validated. Create a new Queteur from a Registration and send an email if the registration is approved, or send an email to inform of the refusal. QueteurRegistration is updated and linked to the queteur if approved. A message is also sent to RedQuest via pubSub'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'The queteur Entity that contains queteur''s info except id. User is created later with another method'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/QueteurEntity'\n      responses:\n        '200':\n          description: Success\n          $ref: '#/components/schemas/ApproveQueteurRegistrationResponse'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{ul-id}/dailyStats':\n    get:\n      tags:\n        - DailyStatsBeforeRCQ\n      summary: 'Get the daily stats of a specific year'\n      description: 'Get the daily stats of a specific year. That is the amount of money collected on each day of the fundraising of that year'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: year\n          in: query\n          description: 'The year we want the daily stats'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/DailyStatsBeforeRCQEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    post:\n      tags:\n        - DailyStatsBeforeRCQ\n      summary: 'Create the rows of stats for a specific year'\n      description: 'Insert a row per day of fundraising on that specific year. Amount is set to 0. Dates per year is configured on the server side configuration'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: year\n          in: query\n          description: 'Year to be created'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{ul-id}/dailyStats/{id}':\n    put:\n      tags:\n        - DailyStatsBeforeRCQ\n      summary: 'Get the daily stats of a specific year'\n      description: 'Get the daily stats of a specific year. That is the amount of money collected on each day of the fundraising of that year'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'ID of the stat to update'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/DailyStatsBeforeRCQEntity'\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{ul-id}/users/{id}':\n    put:\n      tags:\n        - Users\n      summary: 'Update the active/inactive status and role of the user'\n      description: 'Before reactivating a user that was previously disabled, a check is done to see if an active user already exists with that nivol, whatever the UL. If it''s the case, and error is raised.'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'Id of the user'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/UserEntity'\n      responses:\n        '200':\n          description: Success\n          $ref: '#/components/schemas/UserEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{ul-id}/users/{id}/reInitPassword':\n    put:\n      tags:\n        - Users\n      summary: 'Initiate the reset password procedure'\n      description: 'Generate a GUID with an expiry date of 48h for the first init, 4h for subsequent init and send an email to the user (it''s email is taken from the corresponding queteur object) and return the updated UserEntityObject'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'Id of the user'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/UserEntity'\n      responses:\n        '200':\n          description: Success\n          $ref: '#/components/schemas/UserEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{ul-id}/users':\n    put:\n      tags:\n        - Users\n      summary: 'Create a user'\n      description: 'Create a new User. Check that NIVOL or UL_ID is not changed. Check if an active user with that NIVOL exists in any UL, if so it raises an error. '\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'Id of the user'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/UserEntity'\n      responses:\n        '200':\n          description: Success\n          $ref: '#/components/schemas/UserEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/graph':\n    get:\n      tags:\n        - SpotfireAccess\n      summary: 'Get the users its spotfire token'\n      description: 'Check if a valid spotfire token exist. If so it returns it. if not it creates a new one. The Spotfire Access Token is a GUID that allow to display the appropriate data in spotfire graphs'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/SpotfireAccessEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/tronc_queteur_history':\n    get:\n      tags:\n        - TroncsQueteurs\n      summary: 'Get the history of modification of a TroncQueteur'\n      description: 'Get the history of modification of a TroncQueteur. it''s ordered by id desc'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: tronc_queteur_id\n          in: query\n          description: 'The ID of the TroncQueteur'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TroncQueteurEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/settings/ul/{ul-id}':\n    get:\n      tags:\n        - RCQSettings\n      summary: 'Get the UL details'\n      description: 'Get the UL details'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/GetULSettingsResponse'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/settings/ul/{ul-id}/getSetupStatus':\n    get:\n      tags:\n        - RCQSettings\n      summary: 'Get the UL Setup Status'\n      description: 'Get the UL Setup Status'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/GetULSetupStatusResponse'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/settings/ul/{ul-id}/getAllSettings':\n    get:\n      tags:\n        - RCQSettings\n      summary: 'Get All the UL settings'\n      description: 'Get All the UL settings'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/GetAllULSettingsResponse'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    put:\n      tags:\n        - RCQSettings\n      summary: 'Get All the UL settings'\n      description: 'Get All the UL settings'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/GetAllULSettingsResponse'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{id}':\n    get:\n      tags:\n        - Unit√©Locale\n      summary: 'Get the UL details'\n      description: 'Get the UL details'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/UniteLocaleEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[9]}/ul':\n    get:\n      tags:\n        - Unit√©Locale\n      summary: 'Search for UL'\n      description: 'Search for UL against those fields : against `name`, `postal_code`, `city`, `president_first_name`, `president_last_name`, `admin_first_name`, `admin_last_name`, `tresorier_first_name`, `tresorier_last_name`. only for super admin.'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: q\n          in: query\n          description: 'String to search '\n          required: true\n          schema:\n            type: String\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UniteLocaleEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{ul-id}':\n    put:\n      tags:\n        - Unit√©Locale\n      summary: 'Update Unit√© Locale Settings'\n      description: 'Update Unit√© Locale Settings'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/UniteLocaleEntity'\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{ul-id}/yearlyGoals':\n    get:\n      tags:\n        - YearlyGoals\n      summary: 'Get the list of YearlyGoals'\n      description: 'Get the list of YearlyGoals of an UL for a specific year. '\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: year\n          in: query\n          description: 'The year which we want to get'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/YearlyGoalEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    post:\n      tags:\n        - YearlyGoals\n      summary: 'Create goals for a year'\n      description: 'Update FundRaising goals in ‚Ç¨ and the percentage split over each days'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'Only the year is required, other fields are ignored'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{ul-id}/yearlyGoals/{id}':\n    put:\n      tags:\n        - YearlyGoals\n      summary: 'Update the yearly goals'\n      description: 'Update FundRaising goals in ‚Ç¨ and the percentage split over each days'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'The ID of the yearly goal (row primary key, not the year)'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/YearlyGoalEntity'\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{ul-id}/namedDonations':\n    get:\n      tags:\n        - NamedDonation\n      summary: 'Get the list of NamedDonation of an UL (the full list)'\n      description: 'Get the full list of NamedDonation of an UL. Used by the frontend to put it in cache and a dropdown with local autocomplete'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: q\n          in: query\n          description: 'Searched String. Matched against these fields : `first_name`, `last_name`, `email`, `phone`, `ref_recu_fiscal`'\n          required: true\n          schema:\n            type: string\n        -\n          name: deleted\n          in: query\n          description: 'Search for deleted named donation'\n          required: true\n          schema:\n            type: boolean\n        -\n          name: year\n          in: query\n          description: 'Search NamedDonation of a specific year'\n          required: true\n          schema:\n            type: integer\n        -\n          name: admin_ul_id\n          in: query\n          description: 'For super admin, search named donation for other UL'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NamedDonationEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    post:\n      tags:\n        - NamedDonation\n      summary: 'Create one specific NamedDonation'\n      description: 'Create one specific NamedDonation'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/NamedDonationEntity'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/NamedDonationEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{ul-id}/namedDonations/{id}':\n    get:\n      tags:\n        - NamedDonation\n      summary: 'Get one specific NamedDonation'\n      description: 'Get one specific NamedDonation'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'The ID of the Name Parameter'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/NamedDonationEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    put:\n      tags:\n        - NamedDonation\n      summary: 'Update one specific NamedDonation'\n      description: 'Update one specific NamedDonation'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'The ID of the Name Parameter'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/NamedDonationEntity'\n      responses:\n        '200':\n          description: Success\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[4-9]}/ul/{ul-id}/exportData':\n    get:\n      tags:\n        - ExportData\n      summary: 'Export UL''s data'\n      description: 'Export UL''s data as several CSV files, packed in a zip file protected by password'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: password\n          in: query\n          description: 'Password of the file'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/NamedDonationEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/moneyBag':\n    get:\n      tags:\n        - MoneyBag\n      summary: 'Search for existing money bag IDs'\n      description: 'Search money bag IDs by type (coins, bills) and a query string'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: q\n          in: query\n          description: 'The searched string'\n          required: true\n          schema:\n            type: string\n        -\n          name: type\n          in: query\n          description: 'Type of Moneybag Id search :  ''bill'' or ''coin'''\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/moneyBag/coins/{id}':\n    get:\n      tags:\n        - MoneyBag\n      summary: 'Get Bank Bag details '\n      description: 'Get Bank Bag details (current amount and weight, coins count)'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'The ID of the Bank Bag'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/CoinsMoneyBagSummaryEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/{role-id:[1-9]}/ul/{ul-id}/moneyBag/bills/{id}':\n    get:\n      tags:\n        - MoneyBag\n      summary: 'Get Bank Bag details '\n      description: 'Get Bank Bag details (current amount and weight, coins count)'\n      parameters:\n        -\n          name: role-id\n          in: path\n          description: 'Current User Role'\n          required: true\n          schema:\n            type: integer\n        -\n          name: ul-id\n          in: path\n          description: 'User''s Unite Locale ID'\n          required: true\n          schema:\n            type: integer\n        -\n          name: id\n          in: path\n          description: 'The ID of the Bank Bag'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/BillsMoneyBagSummaryEntity'\n        '500':\n          description: 'General Error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\ncomponents:\n  schemas:\n    BillsMoneyBagSummaryEntity:\n      required:\n        - type\n      properties:\n        amount:\n          description: '$amount total amount of money in the bag'\n          type: number\n          format: float\n        weight:\n          description: '$weight total weight of money in the bag'\n          type: number\n          format: float\n        total_euro5:\n          description: '$total_euro2 Sum in ‚Ç¨ of coins of 5‚Ç¨'\n          type: integer\n        total_euro10:\n          description: '$total_euro10 Sum in ‚Ç¨ of coins of 10‚Ç¨'\n          type: integer\n        total_euro20:\n          description: '$total_euro20 Sum in ‚Ç¨ of coins of 20‚Ç¨'\n          type: integer\n        total_euro50:\n          description: '$total_euro50 Sum in ‚Ç¨ of coins of 50‚Ç¨'\n          type: integer\n        total_euro100:\n          description: '$total_euro100 Sum in ‚Ç¨ of coins of 100‚Ç¨'\n          type: integer\n        total_euro200:\n          description: '$total_euro200 Sum in ‚Ç¨ of coins of 200‚Ç¨'\n          type: integer\n        total_euro500:\n          description: '$total_euro500 Sum in ‚Ç¨ of coins of 500‚Ç¨'\n          type: integer\n        count_euro5:\n          description: '$count_euro5 Count of bills of 5‚Ç¨'\n          type: integer\n        count_euro10:\n          description: '$count_euro10 Count of bills of 10‚Ç¨'\n          type: integer\n        count_euro20:\n          description: '$count_euro20 Count of bills of 20‚Ç¨'\n          type: integer\n        count_euro50:\n          description: '$count_euro50 Count of bills of 50‚Ç¨'\n          type: integer\n        count_euro100:\n          description: '$count_euro100 Count of bills of 100‚Ç¨'\n          type: integer\n        count_euro200:\n          description: '$count_euro200 Count of bills of 200‚Ç¨'\n          type: integer\n        count_euro500:\n          description: '$count_euro500 Count of bills of 500‚Ç¨'\n          type: integer\n        bills_money_bag_id:\n          description: '$bills_money_bag_id The ID of the MoneyBag'\n          type: string\n      type: object\n    CoinsMoneyBagSummaryEntity:\n      required:\n        - type\n      properties:\n        amount:\n          description: '$amount total amount of money in the bag'\n          type: number\n          format: float\n        weight:\n          description: '$weight total weight of money in the bag'\n          type: number\n          format: float\n        total_euro2:\n          description: '$total_euro2 Sum in ‚Ç¨ of coins of 2‚Ç¨'\n          type: number\n          format: float\n        total_euro1:\n          description: '$total_euro1 Sum in ‚Ç¨ of coins of 1‚Ç¨'\n          type: number\n          format: float\n        total_cents50:\n          description: '$total_cents50 Sum in ‚Ç¨ of coins of 50cts'\n          type: number\n          format: float\n        total_cents20:\n          description: '$total_cents20 Sum in ‚Ç¨ of coins of 20cts'\n          type: number\n          format: float\n        total_cents10:\n          description: '$total_cents10 Sum in ‚Ç¨ of coins of 10cts'\n          type: number\n          format: float\n        total_cents5:\n          description: '$total_cents5 Sum in ‚Ç¨ of coins of 5cts'\n          type: number\n          format: float\n        total_cents2:\n          description: '$total_cents2 Sum in ‚Ç¨ of coins of 2cts'\n          type: number\n          format: float\n        total_cent1:\n          description: '$total_cent1 Sum in ‚Ç¨ of coins of 1ct'\n          type: number\n          format: float\n        count_euro2:\n          description: '$count_euro2 Number of coins of 2‚Ç¨'\n          type: integer\n        count_euro1:\n          description: '$count_euro1 Number of coins of 1‚Ç¨'\n          type: integer\n        count_cents50:\n          description: '$count_cents50 Number of coins of 50cts'\n          type: integer\n        count_cents20:\n          description: '$count_cents20 Number of coins of 20cts'\n          type: integer\n        count_cents10:\n          description: '$count_cents10 Number of coins of 10cts'\n          type: integer\n        count_cents5:\n          description: '$count_cents5 Number of coins of 5cts'\n          type: integer\n        count_cents2:\n          description: '$count_cents2 Number of coins of 2cts'\n          type: integer\n        count_cent1:\n          description: '$count_cent1 Number of coins of 1ct'\n          type: integer\n        coins_money_bag_id:\n          description: '$coins_money_bag_id The ID of the MoneyBag'\n          type: string\n      type: object\n    DailyStatsBeforeRCQEntity:\n      required:\n        - id\n        - ul_id\n        - date\n        - amount\n      properties:\n        id:\n          description: '$id Id of the stat'\n          type: integer\n        ul_id:\n          description: '$ul_id UL ID of the stat'\n          type: integer\n        date:\n          description: '$date The day of the stats'\n        amount:\n          description: '$amount total amount of money collected on that day'\n          type: number\n          format: float\n      type: object\n    NamedDonationEntity:\n      required:\n        - ul_id\n        - first_name\n        - last_name\n        - address\n        - postal_code\n        - city\n        - type\n        - forme\n      properties:\n        id:\n          description: '$id NamedDonation ID'\n          type: integer\n        ul_id:\n          description: '$ul_id UL ID'\n          type: integer\n        ref_recu_fiscal:\n          description: '$ref_recu_fiscal The business ID of the NamedDonation. It''s the official id from the RedCross, used as reference for tax deduction'\n          type: string\n        first_name:\n          description: '$first_name Donor first name'\n          type: string\n        last_name:\n          description: '$first_name Donor last name'\n          type: string\n        donation_date:\n          description: '$first_name Donation date'\n          type: string\n        address:\n          description: '$first_name Donor address'\n          type: string\n        postal_code:\n          description: '$first_name Donor postal code'\n          type: string\n        city:\n          description: '$first_name Donor city'\n          type: string\n        phone:\n          description: '$first_name Donor Phone'\n          type: string\n        email:\n          description: '$first_name Donor email'\n          type: string\n        euro500:\n          description: '$euro500 Number of 500‚Ç¨ bills'\n          type: integer\n        euro200:\n          description: '$euro200 Number of 200‚Ç¨ bills'\n          type: integer\n        euro100:\n          description: '$euro100 Number of 100‚Ç¨ bills'\n          type: integer\n        euro50:\n          description: '$euro50 Number of 50‚Ç¨ bills'\n          type: integer\n        euro20:\n          description: '$euro20 Number of 20‚Ç¨ bills'\n          type: integer\n        euro10:\n          description: '$euro10 Number of 10‚Ç¨ bills'\n          type: integer\n        euro5:\n          description: '$euro5 Number of 5‚Ç¨ bills'\n          type: integer\n        euro2:\n          description: '$euro2 Number of 2‚Ç¨ coins'\n          type: integer\n        euro1:\n          description: '$euro1 Number of 1‚Ç¨ coins'\n          type: integer\n        cents50:\n          description: '$cents50 Number of 50cts coins'\n          type: integer\n        cents20:\n          description: '$cents20 Number of 20cts coins'\n          type: integer\n        cents10:\n          description: '$cents10 Number of 10cts coins'\n          type: integer\n        cents5:\n          description: '$cents5 Number of 5cts coins'\n          type: integer\n        cents2:\n          description: '$cents2 Number of 2cts coins'\n          type: integer\n        cent1:\n          description: '$cent1 Number of 1ct coins'\n          type: integer\n        don_cheque:\n          description: '$don_cheque total amount of bank note collected'\n          type: number\n          format: float\n        don_creditcard:\n          description: '$don_cheque total amount of credit card payment collected'\n          type: number\n          format: float\n        notes:\n          description: '$notes notes about the donation'\n          type: string\n        type:\n          description: '$type {id:1,label:''Esp√®ce''}, {id:2,label:''Ch√®que''}, {id:3,label:''Virement, Pr√©l√®vement, Carte Bancaire''}'\n          type: string\n        forme:\n          description: '$forme {id:1,label:''D√©claration de don manuel''},{id:2,label:''Acte sous seing priv√©''}'\n          type: string\n        deleted:\n          description: '$deleted if the NamedDonation is marked as deleted or not'\n          type: boolean\n        coins_money_bag_id:\n          description: '$coins_money_bag_id Identifier of the bag that contains the coins of this troncQueteur. It''s used to track the total amount and weight of the bag. The amount must be exact to avoid bank penalty. The bank is also setting limits so that the bag is not teared apart with an excess of weight.'\n          type: string\n        bills_money_bag_id:\n          description: '$bills_money_bag_id Identifier of the bag that contains the bills of this troncQueteur. It''s used to track the total amount and weight of the bag. The amount must be exact to avoid bank penalty. The bank is also setting limits so that the bag is not teared apart with an excess of weight.'\n          type: string\n        last_update:\n          description: '$last_update Last time the NamedDonation row is updated'\n        last_update_user_id:\n          description: '$last_update_user_id UserId of the user that performed the last update on this NamedDonation'\n          type: integer\n      type: object\n    PointQueteEntity:\n      required:\n        - name\n        - latitude\n        - longitude\n        - address\n        - postal_code\n        - city\n        - minor_allowed\n        - enabled\n        - type\n      properties:\n        id:\n          description: '$id pointQuete Id'\n          type: integer\n        ul_id:\n          description: '$ul_id UniteLocal ID'\n          type: integer\n        code:\n          description: '$code Code for the point de Quete: short string'\n          type: string\n        name:\n          description: '$name Name identifying the point de Quete'\n          type: string\n        latitude:\n          description: '$latitude GPS latitude (get from google maps API)'\n          type: number\n          format: float\n        longitude:\n          description: '$id GPS longitude (get from google maps API)'\n          type: number\n          format: float\n        address:\n          description: '$address Street number and name of the address'\n          type: string\n        postal_code:\n          description: '$postal_code Postal code part of the address'\n          type: string\n        city:\n          description: '$city City part of the address'\n          type: string\n        max_people:\n          description: '$max_people Maximum number of people advised to go on PointDeQuete.(no control are done on this, it''s advisory)'\n          type: integer\n        advice:\n          description: '$advice Advise on the PointDeQuete'\n          type: string\n        localization:\n          description: '$localization notes on how to reach the PointDeQuete location'\n          type: string\n        minor_allowed:\n          description: '$minor_allowed are underage'\n          type: boolean\n        created:\n          description: '$created when was the pointDeQuete created'\n        enabled:\n          description: '$enabled Is the pointDeQuete enabled or not'\n          type: boolean\n        type:\n          description: '$type id of the type of PointQuete        {id:1,label:''Voie Publique / Feux Rouge''},{id:2,label:''Pi√©ton''},{id:3,label:''Commer√ßant''},{id:4,label:''Base UL''},{id:5,label:''Autre''}'\n          type: integer\n        time_to_reach:\n          description: '$time_to_reach number of minutes required to reached the pointDeQuete'\n          type: integer\n        transport_to_reach:\n          description: '$transport_to_reach id of the transport type  {id:1,label:''A Pied''},{id:2,label:''Voiture''}{id:3,label:''V√©lo''},{id:4,label:''Train/Tram''},{id:5,label:''Autre''}'\n          type: integer\n      type: object\n    QueteurEntity:\n      required:\n        - email\n        - first_name\n        - last_name\n        - secteur\n        - mobile\n        - created\n        - ul_id\n        - active\n        - man\n        - birthdate\n      properties:\n        id:\n          description: '$id queteur Id'\n          type: integer\n        email:\n          description: '$email email of the queteur'\n          type: string\n        first_name:\n          description: '$first_name first name of the queteur'\n          type: string\n        last_name:\n          description: '$last_name last name of the queteur'\n          type: string\n        secteur:\n          description: '$secteur id of the secteur : \"1\"\u003eAction Sociale  \"2\"\u003eSecours \"3\"\u003eNon B√©n√©vole \"4\"\u003eAncien B√©n√©vole, Inactif ou Adh√©rent \"5\"\u003eCommer√ßant \"6\"\u003eSpecial'\n          type: integer\n        nivol:\n          description: '$nivol NIVOL of the queteur (Business ID for red cross volunteer)'\n          type: string\n        mobile:\n          description: '$mobile mobile phone of the queteur (starts with 336 or 337)'\n          type: string\n        created:\n          description: '$created queteur creation date'\n        updated:\n          description: '$updated queteur last update date'\n        notes:\n          description: '$notes notes about the queteur (deprecated). Originally target to describe food allergy, and specifics about the queteur. But the RGPD risk (health data, bad usage of free text field), made the Red Cross to ask to remove this field.'\n          type: string\n        ul_id:\n          description: '$ul_id Id of the UL to which the queteur belongs'\n          type: integer\n        ul_name:\n          description: '$ul_name Name of the UL to which the queteur belongs'\n          type: string\n        ul_longitude:\n          description: '$ul_longitude Longitude of the UL'\n          type: number\n          format: float\n        ul_latitude:\n          description: '$ul_latitude Latitude of the UL'\n          type: number\n          format: float\n        point_quete_id:\n          description: '$point_quete_id Current Point De Quete ID  (when searching queteur, search can be perform by status (about to leave, on the street, returned))'\n          type: integer\n        point_quete_name:\n          description: '$point_quete_name  Current Point De Quete name   (when searching queteur, search can be perform by status (about to leave, on the street, returned))'\n          type: string\n        depart_theorique:\n          description: '$depart_theorique Theoretical Start date of going on the streets    (when searching queteur, search can be perform by status (about to leave, on the street, returned))'\n        depart:\n          description: '$depart Real start date of going on the streets.  (when searching queteur, search can be perform by status (about to leave, on the street, returned))'\n        retour:\n          description: '$retour Return date from the streets.      (when searching queteur, search can be perform by status (about to leave, on the street, returned))'\n        active:\n          description: '$active Is the queteur still marked as active'\n          type: boolean\n        man:\n          description: '$man Is the queteur a man'\n          type: boolean\n        birthdate:\n          description: '$birthdate Queteur Birthdate. It''s used to determine if the queteur is underage or not. Some PointDeQuete a restricted to adults.'\n        qr_code_printed:\n          description: '$qr_code_printed Is the Queteur QRCode printed or not'\n          type: boolean\n        referent_volunteer:\n          description: '$referent_volunteer Who has referred the queteur (non red cross volunteer helping for the fund raising)'\n          type: string\n        referent_volunteer_entity: {  }\n        user:\n          $ref: '#/components/schemas/UserEntity'\n        anonymization_token: {  }\n        anonymization_date: {  }\n        ul_registration_token: {  }\n        queteur_registration_token: {  }\n        registration_approved: {  }\n        reject_reason: {  }\n        queteur_id: {  }\n        registration_id: {  }\n      type: object\n    SpotfireAccessEntity:\n      required:\n        - id\n        - token\n        - token_expiration\n        - ul_id\n        - user_id\n      properties:\n        id:\n          description: '$id the SpotfireAccess ID'\n          type: integer\n        token:\n          description: '$token the token'\n          type: string\n        token_expiration:\n          description: '$token_expiration the token expiration date'\n        ul_id:\n          description: '$ul_id the current user''s UL ID'\n          type: integer\n        user_id:\n          description: '$user_id the current user''s ID'\n          type: integer\n      type: object\n    TroncEntity:\n      required:\n        - type\n      properties:\n        id:\n          description: '$id tronc ID'\n          type: integer\n        ul_id:\n          description: '$ul_id unite local ID'\n          type: integer\n        created:\n          description: '$created Time of creation of the tronc'\n        enabled:\n          description: '$enabled Tronc is enabled or not'\n          type: boolean\n        notes:\n          description: '$notes textual notes about the tronc'\n          type: string\n        type:\n          description: '$type Type of tronc {id:1,label:''Tronc''},{id:2,label:''Tronc chez un commer√ßant''},{id:3,label:''Autre''}'\n          type: integer\n        nombreTronc:\n          description: '$nombreTronc Used at creation only, specify the number of tronc to create'\n          type: integer\n      type: object\n    TroncInUseEntity:\n      required:\n        - id\n        - depart_theorique\n        - queteur_id\n        - tronc_id\n        - first_name\n        - last_name\n        - email\n        - mobile\n        - nivol\n        - status\n      properties:\n        id:\n          description: '$id TroncQueteur ID'\n          type: integer\n        queteur_id:\n          description: '$queteur_id queteur ID'\n          type: integer\n        tronc_id:\n          description: '$tronc_id Tronc ID'\n          type: integer\n        first_name:\n          description: '$first_name Queteur First Name'\n          type: string\n        last_name:\n          description: '$last_name Queteur Last Name'\n          type: string\n        email:\n          description: '$email Queteur email'\n          type: string\n        mobile:\n          description: '$mobile Queteur mobile'\n          type: string\n        nivol:\n          description: '$nivol Queteur Nivol'\n          type: string\n        status:\n          description: '$status Status of the check : TRONC_IN_USE (other people have this tronc assigned (and depart or retour is null, deleted=false)) or QUETEUR_HAS_ALREADY_HAS_A_TRONC (a tronc_queteur row exist and have the queteur_id)'\n          type: string\n      type: object\n    TroncQueteurEntity:\n      required:\n        - ul_id\n      properties:\n        id:\n          description: '$id TroncQueteur ID'\n          type: integer\n        ul_id:\n          description: '$ul_id UL ID'\n          type: integer\n        queteur_id:\n          description: '$queteur_id queteur ID'\n          type: integer\n        queteur:\n          $ref: '#/components/schemas/QueteurEntity'\n        point_quete:\n          $ref: '#/components/schemas/PointQueteEntity'\n        point_quete_id:\n          description: '$point_quete_id Point de Quete ID'\n          type: integer\n        tronc_id:\n          description: '$tronc_id Tronc ID'\n          type: integer\n        depart_theorique:\n          description: '$depart_theorique theoretical Departure Date of the volunteer'\n        depart:\n          description: '$depart Real departure date'\n        retour:\n          description: '$retour Return date'\n        comptage:\n          description: '$comptage Coins \u0026 Bills counting date'\n        last_update:\n          description: '$last_update Last time the TroncQueteur row is updated'\n        last_update_user_id:\n          description: '$last_update_user_id UserId of the user that performed the last update on this object'\n          type: integer\n        euro500:\n          description: '$euro500 Number of 500‚Ç¨ bills'\n          type: integer\n        euro200:\n          description: '$euro200 Number of 200‚Ç¨ bills'\n          type: integer\n        euro100:\n          description: '$euro100 Number of 100‚Ç¨ bills'\n          type: integer\n        euro50:\n          description: '$euro50 Number of 50‚Ç¨ bills'\n          type: integer\n        euro20:\n          description: '$euro20 Number of 20‚Ç¨ bills'\n          type: integer\n        euro10:\n          description: '$euro10 Number of 10‚Ç¨ bills'\n          type: integer\n        euro5:\n          description: '$euro5 Number of 5‚Ç¨ bills'\n          type: integer\n        euro2:\n          description: '$euro2 Number of 2‚Ç¨ coins'\n          type: integer\n        euro1:\n          description: '$euro1 Number of 1‚Ç¨ coins'\n          type: integer\n        cents50:\n          description: '$cents50 Number of 50cts coins'\n          type: integer\n        cents20:\n          description: '$cents20 Number of 20cts coins'\n          type: integer\n        cents10:\n          description: '$cents10 Number of 10cts coins'\n          type: integer\n        cents5:\n          description: '$cents5 Number of 5cts coins'\n          type: integer\n        cents2:\n          description: '$cents2 Number of 2cts coins'\n          type: integer\n        cent1:\n          description: '$cent1 Number of 1ct coins'\n          type: integer\n        don_cheque:\n          description: '$don_cheque total amount of bank note collected'\n          type: number\n          format: float\n        don_creditcard:\n          description: '$don_cheque total amount of credit card payment collected'\n          type: number\n          format: float\n        foreign_coins:\n          description: '$foreign_coins Number of foreign coins'\n          type: integer\n          deprecated: true\n        foreign_banknote:\n          description: '$foreign_banknote Number of foreign bills'\n          type: integer\n          deprecated: true\n        notes_depart_theorique:\n          description: '$notes_depart_theorique Textual notes about the start'\n          type: string\n        notes_retour:\n          description: '$notes_depart_theorique Textual notes about the return'\n          type: string\n        notes_retour_comptage_pieces:\n          description: '$notes_retour_comptage_pieces Textual notes about the counting of money'\n          type: string\n        notes_update:\n          description: '$notes_update Textual notes about the update of a tronc'\n          type: string\n        last_name:\n          description: '$last_name Queteur Last Name  (only used when getting tronc_queteur for a tronc)'\n          type: string\n        first_name:\n          description: '$first_name Queteur first name  (only used when getting tronc_queteur for a tronc)'\n          type: string\n        deleted:\n          description: '$deleted if true, the troncQueteur is marked as deleted and does not count in the stats.'\n          type: boolean\n        tronc_queteur_id:\n          description: '$tronc_queteur_id TroncQueteur ID (when this object is used to retrieve data from tronc_queteur_historique, this ID refers to the current row in tronc_queteur table)'\n          type: integer\n        insert_date:\n          description: '$insert_date When this historic version of the TroncQueteur has been inserted (when this object is used to retrieve data from tronc_queteur_historique)'\n        preparationAndDepart:\n          description: '$preparationAndDepart If it''s a preparation and depart (that is: the troncqueteur is stored and the depart is right now) this property must be set to true.'\n          type: boolean\n        coins_money_bag_id:\n          description: '$coins_money_bag_id Identifier of the bag that contains the coins of this troncQueteur. It''s used to track the total amount and weight of the bag. The amount must be exact to avoid bank penalty. The bank is also setting limits so that the bag is not teared apart with an excess of weight.'\n          type: string\n        bills_money_bag_id:\n          description: '$bills_money_bag_id Identifier of the bag that contains the bills of this troncQueteur. It''s used to track the total amount and weight of the bag. The amount must be exact to avoid bank penalty. The bank is also setting limits so that the bag is not teared apart with an excess of weight.'\n          type: string\n        don_cb_total_number:\n          description: '$don_cb_total_number Number of donation per credit card'\n          type: integer\n        don_cheque_number:\n          description: '$don_cheque_number Number of donation per bank note'\n          type: integer\n        amount:\n          description: '$amount Sum in ‚Ç¨ of coins, bill, credit card \u0026 bank note. Used when Extracting Data of an UL.'\n          type: number\n          format: float\n        weight:\n          description: '$weight Sum in kg of coins, bill. Used when Extracting Data of an UL. Used when Extracting Data of an UL.'\n          type: number\n          format: float\n        time_spent_in_hours:\n          description: '$time_spent_in_hours number of hours spent on the street collecting money. Used when Extracting Data of an UL.'\n          type: number\n          format: float\n        troncFromPreviousYear:\n          description: '$troncFromPreviousYear if true, the troncQueteur retrieved by the scan of the Tronc QRCode (or tronc id input) retrieve a tronc from the previous year.when searching for a tronc on Depart screen'\n          type: boolean\n        troncQueteurIsInAnIncorrectState:\n          description: '$troncQueteurIsInAnIncorrectState  the current state of the tronc is not compatible with a Depart. when searching for a tronc on Depart screen'\n          type: boolean\n        queteHasNotStartedYet:\n          description: '$queteHasNotStartedYet Flag set to true if a user tries to prepare a tronc for a date that is before the official start of the qu√™te.'\n          type: boolean\n        departAlreadyRegistered:\n          description: '$departAlreadyRegistered the depart has already been recorded. The QRCode scan multiple time per second (sometime with incorrect reading, so we can''t slow it down)'\n          type: boolean\n      type: object\n    UniteLocaleEntity:\n      required:\n        - name\n        - phone\n        - latitude\n        - longitude\n        - address\n        - postal_code\n        - city\n        - external_id\n        - email\n        - id_structure_rattachement\n        - date_demarrage_activite\n      properties:\n        id:\n          description: '$id UL ID'\n          type: integer\n        name:\n          description: '$name Name of the UL'\n          type: string\n        phone:\n          description: '$phone phone to contact the UL'\n          type: string\n        latitude:\n          description: '$latitude latitude of the base of the UL'\n          type: number\n          format: float\n        longitude:\n          description: '$longitude Longitude of the base of UL'\n          type: number\n          format: float\n        address:\n          description: '$address Street number and name of the UL'\n          type: string\n        postal_code:\n          description: '$postal_code Postal code of the UL'\n          type: string\n        city:\n          description: '$city City of the UL'\n          type: string\n        external_id:\n          description: '$external_id Id of the UL in the RedCross Ref'\n          type: integer\n        email:\n          description: '$email email to contact the UL'\n          type: string\n        id_structure_rattachement:\n          description: '$id_structure_rattachement ID of the parent structure of the UL'\n          type: integer\n        date_demarrage_activite:\n          description: '$date_demarrage_activite Date of creation of the UL'\n        date_demarrage_rcq:\n          description: '$date_demarrage_rcq Date of the first use of RCQ'\n        mode:\n          description: '$mode Mode of use of RCQ. Might be deprecated.'\n          type: integer\n        publicDashboard:\n          description: '$publicDashboard Which Spotfire public Dashboard is used. The one with the total amount (RCQ-Public-MontantsVisibles) or without (RCQ-Public-MontantsCach√©s)'\n          type: string\n        president_man:\n          description: '$president_man Is the President a Man'\n          type: boolean\n        president_nivol:\n          description: '$president_nivol Nivol of the president'\n          type: string\n        president_first_name:\n          description: '$president_first_name first name of the President'\n          type: string\n        president_last_name:\n          description: '$president_last_name last name of the President'\n          type: string\n        president_email:\n          description: '$president_email email of the President'\n          type: string\n        president_mobile:\n          description: '$president_mobile mobile of the President'\n          type: string\n        tresorier_man:\n          description: '$tresorier_man Is the Treasurer a Man'\n          type: boolean\n        tresorier_nivol:\n          description: '$tresorier_nivol Nivol of the treasurer'\n          type: string\n        tresorier_first_name:\n          description: '$tresorier_first_name first name of the Treasurer'\n          type: string\n        tresorier_last_name:\n          description: '$tresorier_last_name last name of the Treasurer'\n          type: string\n        tresorier_email:\n          description: '$tresorier_email email of the Treasurer'\n          type: string\n        tresorier_mobile:\n          description: '$tresorier_mobile mobile of the Treasurer'\n          type: string\n        admin_man:\n          description: '$admin_man Is the Admin a Man'\n          type: boolean\n        admin_nivol:\n          description: '$admin_nivol Nivol of the admin'\n          type: string\n        admin_first_name:\n          description: '$admin_first_name first name of the Admin'\n          type: string\n        admin_last_name:\n          description: '$admin_last_name last name of the Admin'\n          type: string\n        admin_email:\n          description: '$admin_email email of the Admin'\n          type: string\n        admin_mobile:\n          description: '$admin_mobile mobile of the Admin'\n          type: string\n      type: object\n    UserEntity:\n      required:\n        - nivol\n        - queteur_id\n        - password_defined\n        - role\n        - created\n        - active\n        - nb_of_failure\n      properties:\n        id:\n          description: '$id user Id'\n          type: integer\n        nivol:\n          description: '$nivol nivol of the user that is used as login with angularjs app. (Angular 8+ will use firebase and email)'\n          type: string\n        queteur_id:\n          description: '$queteur_id Queteur ID (where name, email, mobile is stored)'\n          type: integer\n        password:\n          description: '$password hash of the use password'\n          type: integer\n        password_defined:\n          description: '$password_defined true if the password has been defined. when we don''t need the password, but just to know if it''s defined (queteurEdit)'\n          type: boolean\n        role:\n          description: '$role Role of the user : {id:1,label:''Lecture Seule'' },{id:2,label:''Op√©rateur''},{id:3,label:''Compteur''},{id:4,label:''Administrateur''}'\n          type: integer\n        created:\n          description: '$created user creation date'\n        updated:\n          description: '$updated user last update date'\n        active:\n          description: '$active is the user active or not'\n          type: boolean\n        last_failure_login_date:\n          description: '$last_failure_login_date last login failure'\n        nb_of_failure:\n          description: '$nb_of_failure number of failure since last login'\n          type: integer\n        last_successful_login_date:\n          description: '$last_successful_login_date last successfull login date'\n        init_password_date:\n          description: '$init_password_date when the password was last reinitiated'\n          type: integer\n        first_name:\n          description: '$first_name first name of the user'\n          type: string\n        last_name:\n          description: '$last_name last name of the user'\n          type: string\n      type: object\n    YearlyGoalEntity:\n      required:\n        - id\n        - ul_id\n        - year\n        - amount\n        - day_1_percentage\n        - day_2_percentage\n        - day_3_percentage\n        - day_4_percentage\n        - day_5_percentage\n        - day_6_percentage\n        - day_7_percentage\n        - day_8_percentage\n        - day_9_percentage\n      properties:\n        id:\n          description: '$id user Id'\n          type: integer\n        ul_id:\n          description: '$ul_id Yearly Goals UL''s id'\n          type: integer\n        year:\n          description: '$year The year of this goals'\n          type: integer\n        amount:\n          description: '$amount The total amount of money that is targeted to be raised'\n          type: number\n          format: float\n        day_1_percentage:\n          description: '$day_1_percentage percentage of the total amount of money that should be raised on day 1'\n          type: integer\n        day_2_percentage:\n          description: '$day_2_percentage percentage of the total amount of money that should be raised on day 2'\n          type: integer\n        day_3_percentage:\n          description: '$day_3_percentage percentage of the total amount of money that should be raised on day 3'\n          type: integer\n        day_4_percentage:\n          description: '$day_4_percentage percentage of the total amount of money that should be raised on day 4'\n          type: integer\n        day_5_percentage:\n          description: '$day_5_percentage percentage of the total amount of money that should be raised on day 5'\n          type: integer\n        day_6_percentage:\n          description: '$day_6_percentage percentage of the total amount of money that should be raised on day 6'\n          type: integer\n        day_7_percentage:\n          description: '$day_7_percentage percentage of the total amount of money that should be raised on day 7'\n          type: integer\n        day_8_percentage:\n          description: '$day_8_percentage percentage of the total amount of money that should be raised on day 8'\n          type: integer\n        day_9_percentage:\n          description: '$day_9_percentage percentage of the total amount of money that should be raised on day 9'\n          type: integer\n      type: object\n    ErrorModel:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n      type: object\n    AuthenticationResponse:\n      required:\n        - token\n      properties:\n        token:\n          description: 'token  JWT'\n          type: string\n      type: object\n    GetUserInfoFromUUIDResponse:\n      required:\n        - success\n      properties:\n        success:\n          description: '$success the action did succeed or not'\n          type: boolean\n        nivol:\n          description: '$nivol The nivol corresponding to the UUID'\n          type: string\n      type: object\n    ResetPasswordResponse:\n      required:\n        - success\n      properties:\n        success:\n          description: '$success the action did succeed or not'\n          type: boolean\n        email:\n          description: '$email The email of the resetted password'\n          type: string\n      type: object\n    SendPasswordInitializationMailResponse:\n      required:\n        - success\n      properties:\n        success:\n          description: '$success the action did succeed or not'\n          type: boolean\n        email:\n          description: '$email The email of the resetted password'\n          type: string\n      type: object\n    ExportDataResponse:\n      required:\n        - status\n        - email\n        - fileName\n        - numberOfRows\n      properties:\n        status:\n          description: '$status mail api status code'\n          type: integer\n        email:\n          description: '$email The email where the export has been sent'\n          type: string\n        fileName:\n          description: '$fileName the name of the export file'\n          type: string\n        numberOfRows:\n          description: '$numberOfRows The email where the export has been sent'\n          type: integer\n      type: object\n    CreatePointQueteResponse:\n      required:\n        - pointQueteId\n      properties:\n        pointQueteId:\n          description: '$pointQueteId the id of the newly created pointQuete'\n          type: integer\n      type: object\n    ApproveQueteurRegistrationResponse:\n      required:\n        - queteurId\n      properties:\n        queteurId:\n          description: '$queteurId the id of the newly created pointQuete'\n          type: integer\n      type: object\n    AssociateRegistrationWithExistingQueteurResponse:\n      required:\n        - queteurId\n      properties:\n        queteurId:\n          description: '$queteurId the id of the newly created pointQuete'\n          type: integer\n      type: object\n    CountPendingRegistrationResponse:\n      required:\n        - count\n      properties:\n        count:\n          description: '$count the count of pending registration'\n          type: integer\n      type: object\n    CreateQueteurResponse:\n      required:\n        - queteurId\n      properties:\n        queteurId:\n          description: '$queteurId the id of the newly created queteur'\n          type: integer\n      type: object\n    GetAllULSettingsResponse:\n      required:\n        - mapKey\n        - RGPDVideo\n        - RedQuestDomain\n        - RCQVersion\n        - FirstDay\n        - ul\n        - ul_settings\n        - user\n      properties:\n        mapKey:\n          description: '$mapKey Google Maps API Key'\n          type: string\n        RGPDVideo:\n          description: '$RGPDVideo Link to the RGPD Vid√©o'\n          type: string\n        RedQuestDomain:\n          description: '$RedQuestDomain Domain name of the RedQuest application'\n          type: string\n        RCQVersion:\n          description: '$RCQVersion Version of RCQ Backend'\n          type: string\n        FirstDay:\n          description: '$FirstDay date of the first day of the fundraising of this year. Format YYYY-MM-DD.'\n          type: string\n        ul:\n          $ref: '#/components/schemas/UniteLocaleEntity'\n        ul_settings:\n          description: '$ul_settings Settings of user''s UL'\n        user:\n          $ref: '#/components/schemas/UserEntity'\n      type: object\n    GetULSettingsResponse:\n      required:\n        - mapKey\n        - RGPDVideo\n        - RedQuestDomain\n        - RCQVersion\n        - FirstDay\n        - ul\n        - ul_settings\n        - user\n      properties:\n        ul_settings:\n          description: '$ul_settings Settings of user''s UL'\n      type: object\n    GetULSetupStatusResponse:\n      required:\n        - mapKey\n        - RGPDVideo\n        - RedQuestDomain\n        - RCQVersion\n        - FirstDay\n        - ul\n        - ul_settings\n        - user\n      properties:\n        numberOfQueteur:\n          description: '$numberOfQueteur Number of Queteur currently in DB'\n          type: integer\n        numberOfUser:\n          description: '$numberOfUser Number of User currently in DB'\n          type: integer\n        numberOfPointQuete:\n          description: '$numberOfPointQuete Number of PointQuete currently in DB'\n          type: integer\n        numberOfDailyStats:\n          description: '$numberOfDailyStats Number of DailyStats currently in DB'\n          type: integer\n        numberOfTroncs:\n          description: '$numberOfTroncs Number of Troncs currently in DB'\n          type: integer\n        queteurIncomplete:\n          description: '$queteurIncomplete Is setup of Queteur considered as completed'\n          type: boolean\n        userIncomplete:\n          description: '$userIncomplete Is setup of User considered as completed'\n          type: boolean\n        pointQueteIncomplete:\n          description: '$pointQueteIncomplete Is setup of PointQuete considered as completed'\n          type: boolean\n        dailyStatsIncomplete:\n          description: '$dailyStatsIncomplete Is setup of dailyStats considered as completed'\n          type: boolean\n        troncsIncomplete:\n          description: '$troncsIncomplete Is setup of Troncs considered as completed'\n          type: boolean\n        BasePointQueteCreated:\n          description: '$BasePointQueteCreated Has the Base being automatically created as a ''Point de Quete'''\n          type: boolean\n      type: object\n    PrepareTroncQueteurResponse:\n      required:\n        - troncInUse\n      properties:\n        troncInUse:\n          description: '$troncInUse set to true if a tronc_id is already linked to a tronc_queteur row that has retour or depart set to null and not marked as deleted'\n          type: boolean\n        troncInUseInfo:\n          description: '$troncInUseInfo An array of TroncInUse objects'\n          type: array\n          items:\n            $ref: '#/components/schemas/TroncInUseEntity'\n        lastInsertId:\n          description: '$lastInsertId the id of the last inserted TroncQueteur'\n          type: integer\n      type: object\ntags:\n  -\n    name: Authentication\n    description: 'Authentication related API.'\n  -\n    name: Troncs\n    description: 'Methods that apply to a Tronc. Tronc is a french word for a sealed metal box used to collect money (collection box). (it has also other meaning).'\n  -\n    name: TroncsQueteurs\n    description: 'Methods that apply to the TroncQueteur object. Which hold the information of Who(Queteur) goes where, at what time and with What(Tronc).'\n  -\n    name: PointQuete\n    description: 'PointQuete is the location where people go ask money on the street.'\n  -\n    name: Qu√™teurs\n    description: 'Queteur is the person who goes asking money on the streets.'\n  -\n    name: DailyStatsBeforeRCQ\n    description: 'Methods that store/retrieve/update daily collection figures of previous years, so UL new to RCQ can compare the current year with the past'\n  -\n    name: Users\n    description: 'Users of RCQ. The ''Get'' is automatically done if the queteur is also a user of RCQ'\n  -\n    name: SpotfireAccess\n    description: 'TIBCO Spotfire is a Business Intelligence cloud solution used by RCQ to analyse the data.'\n  -\n    name: RCQSettings\n    description: 'Methods related to the settings of one UniteLocal in RCQ.'\n  -\n    name: Unit√©Locale\n    description: 'UniteLocale is the smallest structure in the RedCross. There''s usually one Unit per city or District of big city.'\n  -\n    name: YearlyGoals\n    description: 'Each year, each Unit√©Locale must define a budget in which the fundraising objective is set. The data is used in Spotfire graphs.'\n  -\n    name: NamedDonation\n    description: 'When a person give some money and ask for a fiscal receipt, it''s stored here. It''s usually larger amount.'\n  -\n    name: ThanksMailing\n    description: 'Once the fundraising is done, a Thank You mailing is sent. This methods starts the mailing and monitor its progress. A method tracks if the graph has been seen or not'\n  -\n    name: ExportData\n    description: 'The UL can export all its data in CSV format.'\n  -\n    name: MoneyBag\n    description: 'Methods related to Bank Bags that holds coins or bills.'\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /{role-id:[1-9]}/ul/{ul-id}/tronc_queteur/getLastTroncQueteurFromTroncId: get: parse path: path parameter not specified: \"role-id:[1-9]\""
}