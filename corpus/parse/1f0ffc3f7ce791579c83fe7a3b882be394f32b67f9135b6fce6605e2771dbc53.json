{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/influxdata/openapi"
		},
		"file": {
			"name": "unity.yml",
			"size": 0,
			"path": "contracts/priv/unity.yml",
			"byteSize": 67499,
			"content": "openapi: 3.0.0\ninfo:\n  title: Unity API Service\n  version: 0.1.0\nservers:\n  - url: /api/v2/quartz\npaths:\n  /me:\n    get:\n      operationId: GetMe\n      tags:\n        - Accounts\n        - Operators\n        - Regions\n        - Organizations\n      responses:\n        '200':\n          description: congregated meta data for an individual account and org\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Me'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Cannot get account or organization for user\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/users/{userIdpeId}':\n    get:\n      operationId: GetUser\n      tags:\n        - User\n      parameters:\n        - in: path\n          name: userIdpeId\n          schema:\n            type: string\n          required: true\n          description: The IDPE ID of the user\n      summary: Get the profile for the current user\n      responses:\n        '200':\n          description: User\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /account:\n    delete:\n      operationId: DeleteAccount\n      summary: Self-delete account\n      requestBody:\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n      responses:\n        '204':\n          description: Account deleted\n        '401':\n          description: Unauthorized/Account doesn't exist\n          $ref: '#/components/responses/ServerError'\n        '405':\n          description: Account is not deletable\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /accounts:\n    get:\n      operationId: GetAccounts\n      tags:\n        - Accounts\n      summary: Get the list of accounts for the current user\n      responses:\n        '200':\n          description: Accounts\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserAccount'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/accounts/{accountId}':\n    get:\n      operationId: GetAccountsId\n      tags:\n        - Accounts\n      summary: Get an account\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: accountId\n          schema:\n            type: string\n          required: true\n          description: The ID of the account to get.\n      responses:\n        '200':\n          description: The Account\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    patch:\n      operationId: PatchAccountsId\n      tags:\n        - Accounts\n      summary: Update an account\n      requestBody:\n        description: Account update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  type: string\n                  description: name of the account\n              required:\n                - name\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: accountId\n          schema:\n            type: string\n          required: true\n          description: The ID of the account to update.\n      responses:\n        '200':\n          description: Account updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserAccount'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '422':\n          description: Missing or invalid information\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /accounts/default:\n    put:\n      operationId: PutDefaultAccount\n      tags:\n        - Accounts\n      requestBody:\n        description: The account to set as the user's default account\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                id:\n                  type: number\n                  description: account id in quartz\n              required:\n                - id\n      responses:\n        '204':\n          description: default account set\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /billing:\n    get:\n      operationId: GetBilling\n      tags:\n        - Billing\n      responses:\n        '200':\n          description: Billing information for account\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BillingInfo'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /identity:\n    get:\n      operationId: GetIdentity\n      tags:\n        - Identity\n        - User\n        - Account\n        - Organization\n      responses:\n        '200':\n          description: 'identity represented by the active user, account, and org'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Identity'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /marketplace:\n    get:\n      operationId: GetMarketplace\n      tags:\n        - Marketplace\n      responses:\n        '200':\n          description: Marketplace information for account\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Marketplace'\n        '401':\n          description: Not Authorized or Invalid Session\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Marketplace not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /billing/start_date:\n    get:\n      operationId: GetBillingStartDate\n      tags:\n        - Billing\n      responses:\n        '200':\n          description: Start of the current billing period for the Account\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BillingDate'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /usage/vectors:\n    get:\n      operationId: GetUsageVectors\n      tags:\n        - Usage\n      responses:\n        '200':\n          description: List of usage vectors for the account\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UsageVectors'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Pricing version not 4 or User/Org not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/usage/{vector_name}':\n    get:\n      operationId: GetUsagetype\n      tags:\n        - Usage\n      parameters:\n        - in: path\n          name: vector_name\n          required: true\n          schema:\n            $ref: '#/components/schemas/VectorName'\n          description: The name of the UsageVector to query.\n          example: reads_gb\n        - in: query\n          name: range\n          schema:\n            $ref: '#/components/schemas/TimeRange'\n      responses:\n        '200':\n          description: Usage history for account\n          content:\n            application/csv:\n              schema:\n                type: string\n                example: |\n                  #group,false,false,true,false,false\n                  #datatype,string,long,string,dateTime:RFC3339,long\n                  #default,reads_gb,,,,\n                  ,result,table,_field,_time,_value\n                  ,,0,reads_gb,2021-01-13T22:05:00Z,120\n        '400':\n          description: Invalid query param name - Bad request\n          $ref: '#/components/responses/ServerError'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Invalid vector_name or start or User/Org not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /usage/billing_stats:\n    get:\n      operationId: GetUsageBilling\n      tags:\n        - Usage\n      responses:\n        '200':\n          description: Billing stats for Account current billing period\n          content:\n            text/csv:\n              schema:\n                type: string\n                example: |\n                  #group,false,false,true,false,false\n                  #datatype,string,long,string,dateTime:RFC3339,long\n                  #default,billing_stats,,,,\n                  ,result,table,_field,_time,_value\n                  ,,0,billing_stats,2021-01-13T22:05:00Z,120\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /usage/rate_limits:\n    get:\n      operationId: GetUsageLimits\n      tags:\n        - Usage\n      parameters:\n        - in: query\n          name: range\n          schema:\n            $ref: '#/components/schemas/TimeRange'\n      responses:\n        '200':\n          description: Limit history for Account\n          content:\n            application/csv:\n              schema:\n                type: string\n                example: |\n                  #group,false,false,true,false,false\n                  #datatype,string,long,string,dateTime:RFC3339,long\n                  #default,rate_limits,,,,\n                  ,result,table,_field,_time,_value\n                  ,,0,rate_limits,2021-01-13T22:05:00Z,120\n        '400':\n          description: Invalid query param name - Bad request\n          $ref: '#/components/responses/ServerError'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Invalid vector_name or start or User/Org not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /settings/notifications:\n    get:\n      operationId: GetSettingsNotifications\n      tags:\n        - Settings\n      responses:\n        '200':\n          description: Settings for billing notifications\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BillingNotifySettings'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Notification Settings nil or User/Org not found\n          $ref: '#/components/responses/ServerError'\n        '406':\n          description: Not Acceptable\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    put:\n      operationId: PutSettingsNotifications\n      tags:\n        - Settings\n      requestBody:\n        description: Update to notify setting\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BillingNotifySettings'\n      responses:\n        '200':\n          description: billing notification settings updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BillingNotifySettings'\n        '400':\n          description: Bad Request\n          $ref: '#/components/responses/ServerError'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /billing/contact:\n    put:\n      operationId: PutBillingContact\n      tags:\n        - Billing\n      requestBody:\n        description: BillingContact to update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BillingContact'\n      responses:\n        '200':\n          description: billing contact updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BillingContact'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/payment_form/{form}':\n    get:\n      operationId: GetPaymentForm\n      tags:\n        - PaymentGateway\n      parameters:\n        - in: path\n          name: form\n          required: true\n          schema:\n            $ref: '#/components/schemas/PaymentFormType'\n          example: checkout\n      responses:\n        '200':\n          description: A CreditCard Form parameter object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreditCardParams'\n        '400':\n          description: Bad Request\n          $ref: '#/components/responses/ServerError'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: User or Form not found\n          $ref: '#/components/responses/ServerError'\n        '406':\n          description: Not Acceptable\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /billing/payment_method:\n    put:\n      operationId: PutPaymentMethod\n      tags:\n        - Billing\n      requestBody:\n        description: PaymentMethod to update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PaymentMethodPut'\n      responses:\n        '200':\n          description: Payment method updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaymentMethod'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /billing/invoices:\n    get:\n      operationId: GetInvoices\n      tags:\n        - Billing\n      responses:\n        '200':\n          description: A list of invoices\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Invoices'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/billing/invoices/{invoiceId}':\n    get:\n      operationId: GetInvoicesId\n      tags:\n        - Billing\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: invoiceId\n          schema:\n            type: string\n          required: true\n          description: The ID of the invoice to get.\n      responses:\n        '200':\n          description: Returns the raw binary for the json pdf\n          content:\n            application/pdf:\n              schema:\n                type: string\n                format: binary\n        '401':\n          description: Not Authorized or Invalid Session\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Invoice not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /orgs:\n    get:\n      operationId: GetOrganizations\n      tags:\n        - Organizations\n      summary: Get the list of Organizations for the current user and account\n      responses:\n        '200':\n          description: Organizations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrganizationSummaries'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/orgs/{orgId}':\n    get:\n      operationId: GetOrgsId\n      tags:\n        - Organizations\n      summary: Get an organization\n      parameters:\n        - in: path\n          name: orgId\n          schema:\n            type: string\n          required: true\n          description: The IDPE ID of the organization to get.\n      responses:\n        '200':\n          description: Organization returned successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    patch:\n      operationId: PatchOrgsId\n      tags:\n        - Organizations\n      summary: Update an organization\n      requestBody:\n        description: Organization update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  type: string\n                  description: Name of the organization\n                description:\n                  type: string\n                  description: Description of the organization\n      parameters:\n        - in: path\n          name: orgId\n          schema:\n            type: string\n          required: true\n          description: The IDPE ID of the organization to update.\n      responses:\n        '200':\n          description: Organization updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '422':\n          description: Missing or invalid information\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /orgs/default:\n    put:\n      operationId: PutDefaultOrganization\n      tags:\n        - Organization\n      requestBody:\n        description: The organization to set as the user's default organization\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrganizationDefaultRequest'\n      responses:\n        '204':\n          description: default account set\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/orgs/{orgId}/invites':\n    get:\n      operationId: GetInvites\n      tags:\n        - Invites\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgId\n          description: Specifies the organization ID of the Invite.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of cloud invites\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Invites'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Session user not owner or Org not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    post:\n      operationId: PostOrgsIdInvites\n      tags:\n        - Invites\n        - Organizations\n      summary: Creates an invite to an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgId\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      requestBody:\n        description: Invite to be sent\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Invite'\n      responses:\n        '201':\n          description: Invite sent\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Invite'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Session user not owner or Org not found\n          $ref: '#/components/responses/ServerError'\n        '409':\n          description: Conflict with invite email\n          $ref: '#/components/responses/ServerError'\n        '422':\n          description: Missing information\n          $ref: '#/components/responses/ServerError'\n        '429':\n          description: Too many requests\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/orgs/{orgId}/invites/{inviteId}':\n    delete:\n      operationId: DeleteOrgsIdInviteId\n      tags:\n        - Invites\n        - Organizations\n      summary: Remove an invite to an organization\n      requestBody:\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: inviteId\n          schema:\n            type: number\n          required: true\n          description: The ID of the invite to remove.\n        - in: path\n          name: orgId\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '204':\n          description: Invite removed\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/orgs/{orgId}/invites/{inviteId}/resend':\n    post:\n      operationId: PostOrgsIdInvitesId\n      tags:\n        - Invites\n        - Organizations\n      summary: Re-sends an invite\n      requestBody:\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: inviteId\n          schema:\n            type: number\n          required: true\n          description: The ID of the invite to resend.\n        - in: path\n          name: orgId\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '200':\n          description: Invite resent\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Invite'\n        '401':\n          description: Not Authorized or Invalid Session\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Session user not owner or Invite/Org not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/orgs/{orgId}/users':\n    get:\n      operationId: GetUsers\n      tags:\n        - Users\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgId\n          description: Specifies the organization ID of the User.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of users\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrgUsers'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Org or Users not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/orgs/{orgId}/users/{userId}':\n    delete:\n      operationId: DeleteOrgsIdUserId\n      tags:\n        - Users\n        - Organizations\n      summary: Removes a user from an organization and account\n      requestBody:\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userId\n          schema:\n            type: string\n          required: true\n          description: The ID of the user to remove.\n        - in: path\n          name: orgId\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '204':\n          description: User removed\n        '400':\n          description: User trying to remove self\n          $ref: '#/components/responses/ServerError'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Session user not owner or User/Org not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/orgs/{orgId}/limits':\n    get:\n      operationId: GetOrgsIdLimits\n      tags:\n        - Organizations\n        - Operators\n      summary: Get the limits of an organization\n      parameters:\n        - in: path\n          name: orgId\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization\n      responses:\n        '200':\n          description: Organization limits\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrgLimits'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    put:\n      operationId: PutOrgsIdLimits\n      tags:\n        - Organizations\n        - Operators\n      summary: Update the limits of an organization\n      requestBody:\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n      parameters:\n        - in: path\n          name: orgId\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization\n      responses:\n        '200':\n          description: Organization limits\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrgLimits'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /checkout:\n    post:\n      operationId: PostCheckout\n      tags:\n        - Accounts\n      requestBody:\n        description: Information for Upgrading Account\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CheckoutRequest'\n      responses:\n        '201':\n          description: Created\n        '400':\n          description: Bad Request\n          $ref: '#/components/responses/ServerError'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Org/User not found or Beta region\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /cancel:\n    post:\n      operationId: PostCancel\n      description: Cancel an account\n      requestBody:\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n      tags:\n        - Accounts\n      responses:\n        '204':\n          description: Account cancelled\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /operator/accounts:\n    get:\n      operationId: GetAccountsForOperator\n      tags:\n        - Accounts\n        - Operators\n      summary: Get the list of accounts by search term\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: query\n          schema:\n            type: string\n          required: false\n          description: The partial email of any user in an account\n        - in: query\n          name: accountTypes\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/AccountType'\n          required: false\n          description: A list of account types to filter on\n      responses:\n        '200':\n          description: Account\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OperatorAccounts'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/operator/accounts/{accountId}':\n    get:\n      operationId: GetAccountById\n      tags:\n        - Accounts\n        - Operators\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: accountId\n          schema:\n            type: string\n          required: true\n          description: The ID of the account to get.\n      responses:\n        '200':\n          description: the account\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/OperatorAccount'\n                  - properties:\n                      organizations:\n                        type: array\n                        description: organizations in the account\n                        $ref: '#/components/schemas/OperatorOrganizations'\n                  - required:\n                      - organizations\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Account not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    delete:\n      operationId: DeleteAccountById\n      requestBody:\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n      tags:\n        - Accounts\n        - Operators\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: accountId\n          schema:\n            type: string\n          required: true\n          description: The ID of the account to delete.\n      responses:\n        '204':\n          description: Account deleted\n        '400':\n          description: Account is not deletable\n          $ref: '#/components/responses/ServerError'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/operator/accounts/{accountId}/users/{userId}':\n    delete:\n      operationId: RemoveUserFromAccount\n      tags:\n        - Accounts\n        - Users\n        - Operators\n      summary: Removes a user from an account\n      requestBody:\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: accountId\n          schema:\n            type: string\n          required: true\n          description: The ID of the account to remove user from.\n        - in: path\n          name: userId\n          schema:\n            type: string\n          required: true\n          description: The ID of the user to remove from the account.\n      responses:\n        '204':\n          description: User removed from account\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /operator/orgs:\n    get:\n      operationId: GetOrganizations\n      tags:\n        - Organizations\n        - Operators\n      summary: Get the list of orgs by search term\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: query\n          schema:\n            type: string\n          required: false\n          description: The partial idpe id of the org being searched\n        - in: query\n          name: accountTypes\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/AccountType'\n          required: false\n          description: A list of account types to filter on\n      responses:\n        '200':\n          description: Organization\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OperatorOrganizations'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/operator/orgs/{orgId}':\n    get:\n      operationId: GetOrganizationById\n      tags:\n        - Organizations\n        - Operators\n      summary: Get organization by id\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgId\n          schema:\n            type: string\n          required: true\n          description: the idpe id of the org\n      responses:\n        '200':\n          description: Organization\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/OperatorOrganization'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Org not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/operator/orgs/{orgId}/limits':\n    get:\n      operationId: GetOrganizationLimitsById\n      tags:\n        - Organizations\n        - Operators\n      summary: Get the org's limits\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgId\n          schema:\n            type: string\n          required: true\n          description: The IDPE id of the org\n      responses:\n        '200':\n          description: Organization Limits\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OperatorOrgLimits'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Org not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    put:\n      operationId: UpdateOrganizationLimitsById\n      tags:\n        - Organizations\n        - Operators\n      summary: Update the org's limits\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgId\n          schema:\n            type: string\n          required: true\n          description: The IDPE id of the org\n      requestBody:\n        description: Updated limits for an organization\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OperatorOrgLimits'\n      responses:\n        '200':\n          description: Organization Limits\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OperatorOrgLimits'\n        '400':\n          description: Invalid request\n          $ref: '#/components/responses/ServerError'\n        '401':\n          description: Unauthorized\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Org not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  /auth/connection:\n    get:\n      operationId: GetConnection\n      tags:\n        - Connection\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: email\n          schema:\n            type: string\n            format: email\n          required: true\n          description: The email to get connection for.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: string\n                example: connection\n          description: Connection name as string\n        '204':\n          description: No connection for the specified email\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n      summary: Get connection  for the specified email\ncomponents:\n  parameters:\n    TraceSpan:\n      in: header\n      name: Zap-Trace-Span\n      description: OpenTracing span context\n      example:\n        trace_id: '1'\n        span_id: '1'\n        baggage:\n          key: value\n      required: false\n      schema:\n        type: string\n  schemas:\n    Error:\n      properties:\n        code:\n          description: code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - unprocessable entity\n            - empty value\n            - unavailable\n            - forbidden\n            - too many requests\n            - unauthorized\n            - method not allowed\n            - request too large\n            - unsupported media type\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: Describes the logical code operation when the error occurred. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: Stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n      required:\n        - code\n    Account:\n      properties:\n        id:\n          type: number\n          description: account id in quartz\n        name:\n          type: string\n          description: name of the account\n        type:\n          type: string\n          enum:\n            - contract\n            - free\n            - pay_as_you_go\n          description: the type of the account\n        billing_provider:\n          type: string\n          nullable: true\n          enum:\n            - aws\n            - azure\n            - gcm\n            - zuora\n          description: the billing provider of the account. null if a free account\n      required:\n        - id\n        - name\n    UserAccount:\n      properties:\n        id:\n          type: number\n          description: account id in quartz\n        isActive:\n          type: boolean\n          description: is this the currently active account in the session?\n        isDefault:\n          type: boolean\n          description: is this the user's default account?\n        name:\n          type: string\n          description: name of the account\n      required:\n        - id\n        - isActive\n        - isDefault\n        - name\n    Marketplace:\n      properties:\n        name:\n          description: full name of the marketplace\n          type: string\n          example: Google Cloud Marketplace\n        shortName:\n          description: marketplace acronyms\n          $ref: '#/components/schemas/MarketplaceType'\n          example: gcm\n        url:\n          description: link to marketplace\n          type: string\n      required:\n        - name\n        - shortName\n        - url\n    OperatorAccount:\n      properties:\n        id:\n          type: number\n          description: account id in quartz\n        name:\n          type: string\n          description: account name\n        type:\n          $ref: '#/components/schemas/AccountType'\n        zuoraAccountId:\n          type: string\n          description: Zuora ID associated with the account\n        deletable:\n          type: boolean\n          description: flag whether the account can be deleted or not\n        balance:\n          type: number\n          description: 'remaining balance on the account, nil if none'\n        billingContact:\n          $ref: '#/components/schemas/BillingContact'\n          description: billing contact for the account\n        users:\n          type: array\n          $ref: '#/components/schemas/OperatorUsers'\n        marketplaceSubscription:\n          $ref: '#/components/schemas/MarketplaceSubscription'\n          description: 'which marketplace, nil if none'\n      required:\n        - id\n        - name\n        - account\n        - balance\n        - billingContact\n        - marketplaceSubscription\n        - type\n        - users\n    OperatorAccounts:\n      type: array\n      items:\n        $ref: '#/components/schemas/OperatorAccount'\n    OperatorOrgLimits:\n      type: object\n      properties:\n        orgID:\n          type: string\n          readOnly: true\n          description: ID of the org for which these rates apply\n        rate:\n          $ref: '#/components/schemas/OperatorRateLimits'\n        bucket:\n          $ref: '#/components/schemas/BucketLimits'\n        task:\n          $ref: '#/components/schemas/TaskLimits'\n        dashboard:\n          $ref: '#/components/schemas/DashboardLimits'\n        check:\n          $ref: '#/components/schemas/CheckLimits'\n        notificationRule:\n          $ref: '#/components/schemas/NotificationRuleLimits'\n        notificationEndpoint:\n          $ref: '#/components/schemas/NotificationEndpointLimits'\n      required:\n        - orgID\n        - rate\n        - bucket\n        - task\n        - dashboard\n        - check\n        - notificationRule\n        - notificationEndpoint\n    OperatorRateLimits:\n      description: Usage rate limits\n      type: object\n      properties:\n        queryTime:\n          description: Query Time limit in nanoseconds\n          example: 1500000000000\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Limit'\n              maximum: 3000000000000\n        readKBs:\n          description: KB of data query'd per second\n          example: 1000\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Limit'\n              maximum: 10000\n        writeKBs:\n          description: KB of data written per second\n          example: 17\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Limit'\n              maximum: 10000\n        cardinality:\n          description: Max cardinality of data\n          example: 10000\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Limit'\n              maximum: 1000000\n    MarketplaceSubscription:\n      properties:\n        marketplace:\n          $ref: '#/components/schemas/MarketplaceType'\n        status:\n          type: string\n          enum:\n            - pending\n            - subscribed\n            - unsubscribed\n            - failed\n          description: status of the marketplace\n        subscriberId:\n          type: string\n      required:\n        - marketplace\n        - status\n        - subscriberId\n    User:\n      properties:\n        email:\n          type: string\n          description: user's email\n        firstName:\n          type: string\n          description: user's first name\n        id:\n          type: string\n          description: user's id in quartz\n        idpeId:\n          type: string\n          description: user's id in idpe\n        lastName:\n          type: string\n          description: user's last name\n      required:\n        - firstName\n        - id\n        - idpeId\n        - lastName\n    Users:\n      type: array\n      items:\n        $ref: '#/components/schemas/User'\n    MarketplaceType:\n      type: string\n      description: marketplace acronym or name\n      enum:\n        - aws\n        - gcm\n        - azure\n    TimeRange:\n      type: string\n      description: The timerange options for usage information\n      enum:\n        - 24h\n        - 7d\n        - 30d\n      default: 24h\n    VectorName:\n      type: string\n      description: Name of the usage vector\n      enum:\n        - storage_gb\n        - writes_mb\n        - reads_gb\n        - query_count\n    Role:\n      type: string\n      description: Role of the User\n      enum:\n        - owner\n        - member\n    PaymentFormType:\n      type: string\n      description: The name of the PaymentForm to query.\n      example: checkout\n      enum:\n        - checkout\n        - billing\n    AccountType:\n      type: string\n      description: type of the account\n      enum:\n        - cancelled\n        - contract\n        - free\n        - pay_as_you_go\n    BillingInfo:\n      properties:\n        balance:\n          type: number\n          description: account balance\n        region:\n          type: string\n        paymentMethod:\n          $ref: '#/components/schemas/PaymentMethod'\n        balanceUpdatedAt:\n          type: string\n          description: date of last update to account\n        contact:\n          $ref: '#/components/schemas/BillingContact'\n      required:\n        - balance\n        - balanceUpdatedAt\n        - contact\n    Region:\n      properties:\n        title:\n          type: string\n          description: title of the region\n      required:\n        - title\n    BillingDate:\n      properties:\n        dateTime:\n          type: string\n          description: UTC datetime representing the start of the billing period for the account\n      required:\n        - dateTime\n    BillingContact:\n      properties:\n        companyName:\n          type: string\n          description: name of the company billed\n        email:\n          type: string\n          description: billing email\n        firstName:\n          type: string\n          description: first name of billing contact\n        lastName:\n          type: string\n          description: last name of billing contact\n        country:\n          type: string\n          description: country of billing contact\n        street1:\n          type: string\n          description: street of billing contact\n        street2:\n          type: string\n          description: additional street info\n        city:\n          type: string\n          description: city of billing contact\n        subdivision:\n          type: string\n          description: subdivision\n        postalCode:\n          type: string\n          description: postal code of billing contact\n      required:\n        - companyName\n        - email\n        - firstName\n        - lastName\n        - country\n        - city\n        - postalCode\n    BillingNotifySettings:\n      properties:\n        isNotify:\n          description: opt in to threshold notifications\n          type: boolean\n        balanceThreshold:\n          type: number\n          description: threshold that when passed will trigger a notification\n        notifyEmail:\n          type: string\n          description: email to send notification\n      required:\n        - isNotify\n        - balanceThreshold\n        - notifyEmail\n    CheckoutRequest:\n      properties:\n        paymentMethodId:\n          type: string\n          description: id from submitting the zuora form\n        street1:\n          description: for billing address\n          type: string\n        street2:\n          description: for billing address\n          type: string\n        city:\n          description: for billing address\n          type: string\n        country:\n          description: for billing address\n          type: string\n        subdivision:\n          description: for billing address (state in US)\n          type: string\n        postalCode:\n          description: for billing address\n          type: string\n        notifyEmail:\n          description: the email for the notification\n          type: string\n        balanceThreshold:\n          description: threshold for notification\n          type: number\n        isNotify:\n          description: whether the user will be notified about their balance\n          type: boolean\n        isPaygCreditActive:\n          description: whether the user is a part of the payg credit\n          type: boolean\n    Identity:\n      properties:\n        user:\n          $ref: '#/components/schemas/IdentityUser'\n        account:\n          $ref: '#/components/schemas/IdentityAccount'\n        org:\n          $ref: '#/components/schemas/IdentityOrganization'\n      required:\n        - user\n        - account\n        - org\n    IdentityUser:\n      properties:\n        id:\n          type: string\n          description: user's id in idpe\n        email:\n          type: string\n          description: user's email\n        firstName:\n          type: string\n          nullable: true\n          description: user's first name\n        lastName:\n          type: string\n          nullable: true\n          description: user's last name\n        operatorRole:\n          type: string\n          nullable: true\n          enum:\n            - read-only\n            - read-write\n          description: role permission whether this operator is \"read-only\" | \"read-write\"\n        accountCount:\n          type: integer\n          description: number of accounts the user belongs to\n        orgCount:\n          type: integer\n          description: number of orgs the user belongs to within their active account\n      required:\n        - id\n        - email\n        - accountCount\n        - orgCount\n    IdentityAccount:\n      properties:\n        id:\n          type: number\n          description: account id in quartz\n        name:\n          type: string\n          description: name of the account\n        type:\n          $ref: '#/components/schemas/AccountType'\n        accountCreatedAt:\n          type: string\n          description: an ISO8601 timestamp that indicates when the account was created\n        paygCreditStartDate:\n          type: string\n          nullable: true\n          description: 'an ISO8601 timestamp indicating if an account is part of the payg credit experiment, nil if not'\n      required:\n        - id\n        - accountCreatedAt\n        - name\n        - type\n    IdentityOrganization:\n      properties:\n        id:\n          type: string\n          description: idpe ID of the org\n        name:\n          type: string\n          description: name of the org\n        clusterHost:\n          type: string\n          description: the url of the current cluster\n      required:\n        - id\n        - name\n        - clusterHost\n    Invite:\n      properties:\n        id:\n          description: the quartz id of the invite\n          readOnly: true\n          type: number\n        email:\n          type: string\n        role:\n          $ref: '#/components/schemas/Role'\n        expiresAt:\n          description: when the invite will expire\n          readOnly: true\n          format: date-time\n          type: string\n      required:\n        - email\n        - role\n    Invites:\n      type: array\n      items:\n        $ref: '#/components/schemas/Invite'\n    PaymentMethodPut:\n      properties:\n        paymentMethodId:\n          type: string\n          description: ref id from Zuora\n          readOnly: true\n    CreditCardParams:\n      properties:\n        id:\n          description: id of the page displayed\n          readOnly: true\n          type: string\n        tenantId:\n          description: id of our account with the payment processor\n          type: string\n          readOnly: true\n        key:\n          description: payment processor secret key\n          readOnly: true\n          type: string\n        signature:\n          description: signature of the key or token\n          readOnly: true\n          type: string\n        token:\n          description: api token of the payment processor\n          readOnly: true\n          type: string\n        style:\n          description: way payment form gets displayed\n          type: string\n          readOnly: true\n        submitEnabled:\n          description: boolean string 'true' or 'false' which allows us to handle submits from our form\n          type: string\n          enum:\n            - 'true'\n            - 'false'\n          readOnly: true\n        url:\n          type: string\n          readOnly: true\n          description: uri of the embedded iframe\n      required:\n        - id\n        - tenantId\n        - key\n        - signature\n        - token\n        - style\n        - submitEnabled\n        - url\n    PaymentMethod:\n      properties:\n        cardType:\n          description: name of credit card vendor\n          type: string\n        cardNumber:\n          description: masked credit card number\n          type: string\n        expirationMonth:\n          description: month of expiration\n          type: string\n        expirationYear:\n          description: year of expiration\n          type: string\n        defaultPaymentMethod:\n          description: this the default payment method\n          type: boolean\n      required:\n        - cardType\n        - cardNumber\n        - expirationMonth\n        - expirationYear\n    UsageVectors:\n      type: array\n      items:\n        $ref: '#/components/schemas/UsageVector'\n    UsageVector:\n      properties:\n        name:\n          description: name of usage vector\n          type: string\n          example: storage\n        unit:\n          description: unit for usage vector\n          type: string\n          example: GB-hr\n        fluxKey:\n          description: key in flux response\n          type: string\n          example: storage_gb\n      required:\n        - name\n        - unit\n        - fluxKey\n    Invoice:\n      properties:\n        id:\n          description: id of the invoice\n          type: string\n        status:\n          description: status of the invoice\n          readOnly: true\n          type: string\n        amount:\n          description: amount of invoice in dollars\n          type: number\n          readOnly: true\n        targetDate:\n          description: date of invoice\n          readOnly: true\n          type: string\n      required:\n        - id\n        - status\n        - amount\n        - targetDate\n    Invoices:\n      type: array\n      items:\n        $ref: '#/components/schemas/Invoice'\n    OrgUser:\n      properties:\n        id:\n          description: the idpe id of the user\n          readOnly: true\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        role:\n          $ref: '#/components/schemas/Role'\n      required:\n        - id\n        - firstName\n        - lastName\n        - email\n        - role\n    Me:\n      properties:\n        id:\n          type: string\n          description: the idpe id of the user\n        email:\n          type: string\n          description: the email associated with the user\n        accountType:\n          $ref: '#/components/schemas/AccountType'\n        billingProvider:\n          type: string\n          description: 'the billing provider for the account, nil if none'\n          enum:\n            - zuora\n            - aws\n            - gcm\n            - azure\n        clusterHost:\n          type: string\n          description: the url of the current cluster\n        isRegionBeta:\n          type: boolean\n          description: whether the region associated with the account is a beta region\n        regionCode:\n          type: string\n          description: the code associated with the region\n        regionName:\n          type: string\n          description: the name of the region\n        isOperator:\n          type: boolean\n          description: whether the user is an operator\n        operatorRole:\n          type: string\n          nullable: true\n          enum:\n            - read-only\n            - read-write\n          description: role permission whether this operator is \"read-only\" | \"read-write\"\n        accountCreatedAt:\n          type: string\n          description: an ISO8601 timestamp that indicates when the account was created\n        paygCreditStartDate:\n          type: string\n          nullable: true\n          description: 'an ISO8601 timestamp indicates if an account is part of the payg credit experiment, nil if not'\n      required:\n        - id\n        - accountCreatedAt\n        - accountType\n        - billingProvider\n        - clusterHost\n        - email\n        - isOperator\n        - isRegionBeta\n        - regionCode\n        - regionName\n    OrgUsers:\n      type: array\n      items:\n        $ref: '#/components/schemas/OrgUser'\n    OperatorOrganization:\n      type: object\n      properties:\n        idpeId:\n          type: string\n          description: idpe ID of the org\n        id:\n          type: number\n          description: quartz ID of the org\n        name:\n          type: string\n          description: name of the org\n        region:\n          type: string\n          description: region of the org\n        provider:\n          type: string\n          description: provider of the org\n        date:\n          type: string\n          description: date org was created\n        account:\n          $ref: '#/components/schemas/RelatedAccount'\n      required:\n        - account\n        - id\n        - idpeId\n        - region\n        - provider\n        - date\n    OperatorOrganizations:\n      type: array\n      items:\n        $ref: '#/components/schemas/OperatorOrganization'\n    OperatorUser:\n      properties:\n        email:\n          type: string\n          description: user's email\n        firstName:\n          type: string\n          description: user's first name\n        id:\n          type: string\n          description: user's id in quartz\n        idpeId:\n          type: string\n          description: user's id in idpe\n        lastName:\n          type: string\n          description: user's last name\n        operator:\n          type: boolean\n          description: whether or not the user is an operator\n        sfdcContactId:\n          type: string\n          description: the contact id of the user in salesforce\n      required:\n        - firstName\n        - id\n        - idpeId\n        - lastName\n    OperatorUsers:\n      type: array\n      items:\n        $ref: '#/components/schemas/OperatorUser'\n    RelatedAccount:\n      description: Subset of Account data related to the organization\n      type: object\n      properties:\n        id:\n          type: number\n          description: account id in quartz\n        type:\n          $ref: '#/components/schemas/AccountType'\n        balance:\n          type: number\n          description: 'remaining balance on the account, nil if none'\n        billingContact:\n          $ref: '#/components/schemas/BillingContact'\n          description: billing contact for the account\n        updatedAt:\n          type: string\n          description: date of last update to account\n      required:\n        - id\n        - balance\n        - type\n        - updatedAt\n    Organization:\n      type: object\n      properties:\n        id:\n          type: string\n          description: IDPE Id of the org\n        name:\n          type: string\n          description: name of the org\n        description:\n          type: string\n          description: the description of the organization\n        creationDate:\n          type: string\n          format: date-time\n          description: the date the organization was created\n        regionCode:\n          type: string\n          description: the canonical code for the region where the organization is hosted\n        regionName:\n          type: string\n          description: the name of the region where the organization is hosted\n        provider:\n          type: string\n          description: provider of the org\n        isRegionBeta:\n          type: boolean\n          description: is the region of the organization in beta\n        clusterHost:\n          type: string\n          description: the url of the current cluster\n      required:\n        - id\n        - clusterHost\n        - isRegionBeta\n        - regionCode\n        - regionName\n    OrganizationSummaries:\n      type: array\n      items:\n        type: object\n        properties:\n          id:\n            type: string\n            description: IDPE ID of the org\n          name:\n            type: string\n            description: name of the org\n          isActive:\n            type: boolean\n            description: is this the currently active organization in the session?\n          isDefault:\n            type: boolean\n            description: is this the user's default organization in this account?\n        required:\n          - id\n          - name\n          - isActive\n          - isDefault\n    OrganizationDefaultRequest:\n      properties:\n        id:\n          type: string\n          description: IDPE id of the organization\n      required:\n        - id\n    OrgLimits:\n      type: object\n      properties:\n        orgID:\n          type: string\n          readOnly: true\n          description: ID of the org for which these rates apply\n        rate:\n          $ref: '#/components/schemas/RateLimits'\n        bucket:\n          $ref: '#/components/schemas/BucketLimits'\n        task:\n          $ref: '#/components/schemas/TaskLimits'\n        dashboard:\n          $ref: '#/components/schemas/DashboardLimits'\n        check:\n          $ref: '#/components/schemas/CheckLimits'\n        notificationRule:\n          $ref: '#/components/schemas/NotificationRuleLimits'\n        notificationEndpoint:\n          $ref: '#/components/schemas/NotificationEndpointLimits'\n      required:\n        - orgID\n        - rate\n        - bucket\n        - task\n        - dashboard\n        - check\n        - notificationRule\n        - notificationEndpoint\n    RateLimits:\n      description: Usage rate limits\n      type: object\n      properties:\n        readKBs:\n          description: KB of data query'd per second\n          example: 1000\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Limit'\n              maximum: 10000\n        writeKBs:\n          description: KB of data written per second\n          example: 17\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Limit'\n              maximum: 10000\n        cardinality:\n          description: Max cardinality of data\n          example: 10000\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Limit'\n              maximum: 1000000\n    Limit:\n      description: Limit of at least 1\n      type: integer\n      minimum: 1\n    BucketLimits:\n      description: Bucket limits\n      type: object\n      properties:\n        maxBuckets:\n          example: 2\n          description: Number of buckets allowed\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Unlimited'\n            - $ref: '#/components/schemas/Limit'\n        maxRetentionDuration:\n          description: Retention duration limits in nanoseconds\n          example: 2592000000000000\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Unlimited'\n            - $ref: '#/components/schemas/Limit'\n    TaskLimits:\n      description: Task limits\n      type: object\n      properties:\n        maxTasks:\n          description: Number of tasks allowed\n          example: 5\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Unlimited'\n            - $ref: '#/components/schemas/Limit'\n    DashboardLimits:\n      description: Dashboard limits\n      type: object\n      properties:\n        maxDashboards:\n          description: Number of dashboards allowed\n          example: 5\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Unlimited'\n            - $ref: '#/components/schemas/Limit'\n    CheckLimits:\n      description: Check limits\n      type: object\n      properties:\n        maxChecks:\n          description: Number of checks allowed\n          example: 2\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Unlimited'\n            - $ref: '#/components/schemas/Limit'\n    NotificationRuleLimits:\n      description: Notification rule limits\n      type: object\n      properties:\n        maxNotifications:\n          description: Number of notifications allowed\n          example: 2\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Unlimited'\n            - $ref: '#/components/schemas/Limit'\n        blockedNotificationRules:\n          description: Notification rules not allowed CSV\n          example: 'http,pagerduty'\n          type: string\n    NotificationEndpointLimits:\n      description: Notification endpoint limits\n      type: object\n      properties:\n        blockedNotificationEndpoints:\n          description: Notification endpoints not allowed CSV\n          example: 'http,pagerduty'\n          type: string\n    RestrictedLimit:\n      description: Restrict access entirely\n      type: integer\n      enum:\n        - -1\n    Unlimited:\n      description: Unbounded limit\n      type: integer\n      enum:\n        - 0\n  responses:\n    ServerError:\n      description: Non 2XX error response from server.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /orgs: get: duplicate operationId: \"GetOrganizations\""
}