{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/craftercms/studio"
		},
		"file": {
			"name": "studio-api-3.yaml",
			"size": 0,
			"path": "src/main/api/3/studio-api-3.yaml",
			"byteSize": 22842,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'http://localhost:8080/studio/api/3'\ninfo:\n  description: |-\n    Crafter Studio API v3\n    https://docs.craftercms.org/en/3.0/developers/projects/studio/index.html\n  version: '3'\n  title: Crafter Studio\n  termsOfService: ''\n  contact:\n    email: info@craftercms.org\n  license:\n    name: GPL 3.0\n    url: 'https://www.gnu.org/licenses/gpl-3.0.en.html'\nexternalDocs:\n  description: CrafterCMS - Studio\n  url: 'https://docs.craftercms.org/en/3.0/developers/projects/studio/index.html'\ntags:\n  - name: user\n    description: User management operations\n  - name: organization\n    description: Organization management operations\n  - name: lov\n    description: List of values management operations\npaths:\n  /user:\n    get:\n      tags:\n        - user\n      summary: Get user(s) by username or userId\n      description: 'Required Permission: \"READ_USER\"'\n      operationId: getUser\n      parameters:\n        - name: username\n          in: query\n          description: The username(s) that needs to be fetched.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            minItems: 0\n        - name: userId\n          in: query\n          description: The userId(s) that needs to be fetched.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            minItems: 0\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records in this response\n                  entities:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        response:\n                          $ref: '#/components/schemas/ApiResponse'\n                        entity:\n                          $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    post:\n      tags:\n        - user\n      summary: Create user(s)\n      description: 'Required Permission: \"CREATE_USER\"'\n      operationId: createUser\n      requestBody:\n        description: List of users to create\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                entities:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      user:\n                        $ref: '#/components/schemas/User'\n                      organizations:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            organizationId:\n                              type: integer\n                              format: int64\n                              description: \u003e-\n                                Organization(s) to add the user to during\n                                creation\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records in this response\n                  entities:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        response:\n                          $ref: '#/components/schemas/ApiResponse'\n                        entity:\n                          $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    patch:\n      tags:\n        - user\n      summary: Update user(s)\n      description: 'Required Permission: \"UPDATE_USER\"'\n      operationId: updateUser\n      requestBody:\n        description: List of users to create\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                entities:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      user:\n                        $ref: '#/components/schemas/User'\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records in this response\n                  entities:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        response:\n                          $ref: '#/components/schemas/ApiResponse'\n                        entity:\n                          $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n\n    delete:\n      tags:\n        - user\n      summary: Delete user(s)\n      description: 'Required Permission: \"DELETE_USER\"'\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: query\n          description: The username(s) that needs to be fetched.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            minItems: 0\n        - name: userId\n          in: query\n          description: The userId(s) that needs to be fetched.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            minItems: 0\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n\n  /user/enable:\n    patch:\n      tags:\n        - user\n      summary: Enable user(s)\n      description: 'Required Permission: \"UPDATE_USER\"'\n      operationId: enableUser\n      parameters:\n        - name: username\n          in: query\n          description: The username(s) that needs to be fetched.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            minItems: 0\n        - name: userId\n          in: query\n          description: The userId(s) that needs to be fetched.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            minItems: 0\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records in this response\n                  entities:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        response:\n                          $ref: '#/components/schemas/ApiResponse'\n                        entity:\n                          $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n\n  /user/disable:\n    patch:\n      tags:\n        - user\n      summary: Disable user(s)\n      description: 'Required Permission: \"UPDATE_USER\"'\n      operationId: disableUser\n      parameters:\n        - name: username\n          in: query\n          description: The username(s) that needs to be fetched.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            minItems: 0\n        - name: userId\n          in: query\n          description: The userId(s) that needs to be fetched.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            minItems: 0\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records in this response\n                  entities:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        response:\n                          $ref: '#/components/schemas/ApiResponse'\n                        entity:\n                          $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n\n  /org:\n    get:\n      tags:\n        - organization\n      summary: Get user(s) by username or userId\n      description: 'Required Permission: \"READ_USER\"'\n      operationId: getUser\n      parameters:\n        - name: username\n          in: query\n          description: The username(s) that needs to be fetched.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            minItems: 0\n        - name: userId\n          in: query\n          description: The userId(s) that needs to be fetched.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            minItems: 0\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records in this response\n                  entities:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        response:\n                          $ref: '#/components/schemas/ApiResponse'\n                        entity:\n                          $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: 'User ID, unique user-identifier, immutable'\n        username:\n          type: string\n          description: 'Username, unique but can be changed'\n        firstName:\n          type: string\n          description: User's first name\n        lastName:\n          type: string\n          description: User's last name\n        email:\n          type: string\n          description: User's email address\n        password:\n          type: string\n          description: User's password\n        avatar:\n          type: string\n          description: 'User''s avatar, base64 encoded image @128x128 pixel PNG'\n        status:\n          type: string\n          description: User status. See relevant LoV for user status.\n    LoV:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: List of Values ID\n        lov:\n          description: List of key-value pairs\n          type: array\n          items:\n            type: object\n            properties:\n              key:\n                type: string\n              value:\n                type: string\n    Organization:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: 'Organization ID, unique and immutable'\n        name:\n          type: string\n          description: 'Organization name, unique and can be changed'\n        desc:\n          type: string\n          description: Organization description\n        url:\n          type: string\n          description: Organization URL (usually the organization WebSite)\n        logo:\n          type: string\n          description: 'Organization logo, base64 encoded image @128x128 pixel PNG'\n    Group:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: 'Group ID, unique and immutable'\n        name:\n          type: string\n          description: 'Group name, unique within an organization and can be changed'\n        desc:\n          type: string\n          description: Group description\n    Project:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: 'Project ID, unique and immutable'\n        name:\n          type: string\n          description: 'Project name, unique within an organization and can be changed'\n        desc:\n          type: string\n          description: Project description\n        liveUrl:\n          type: string\n          description: \u003e-\n            Project live URL, where is project can be accessed or downloaded (if\n            app)\n        previewUrl:\n          type: string\n          description: Project preview URL in Crafter Studio\n        stagingUrl:\n          type: string\n          description: \u003e-\n            Project staging URL, where major update can be staged before pushing\n            live\n    Item:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: 'Item ID, unique and immutable'\n        orgId:\n          type: string\n          description: The organization to which the project that holds the item blongs\n        projectId:\n          type: string\n          description: Project ID to which this item belongs\n        path:\n          type: string\n          description: Path of item in the project's repository\n        state:\n          type: string\n          description: Item state. See relevant LoV for item states.\n        type:\n          type: string\n          description: Item type. See relevant LoV for item types.\n        mimetype:\n          type: string\n          description: \u003e-\n            MIME-Type if the item is a file. See relevant LoV for item\n            MIME-Types.\n        createdBy:\n          type: string\n          description: UserId of creator\n        createdOn:\n          type: string\n          description: Date of creation\n        lastModifiedBy:\n          type: string\n          description: UserId of last modifier\n        lastModifiedOn:\n          type: string\n          description: Date of last modification\n        commitId:\n          type: string\n          description: Last repository commit_id\n    Policy:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: Policy ID\n        version:\n          type: string\n          description: Policy version number\n        statements:\n          type: array\n          items:\n            type: object\n            properties:\n              effect:\n                type: string\n                enum:\n                  - allow\n                  - deny\n                example: allow\n                description: Allow or Deny\n              actions:\n                type: array\n                items:\n                  type: string\n                  description: \u003e-\n                    See relevant LoV for actions using\n                    system:service:resourcetype [TODO explain]\n              resource:\n                type: string\n                example: \u003e-\n                  crn:studio:content:0284a098aab7c7:130880c018310810b:item:static-assets/*\n                description: crn:system:service:organization:project:type:regex\n    Role:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: 'Role ID, unique and immutable'\n        name:\n          type: string\n          description: 'Role name, unique within ?? TODO'\n        policies:\n          type: array\n          items:\n            $ref: '#/components/schemas/Policy'\n    ApiResponse:\n      type: object\n      description: |-\n            The response of an API operation. Possible responses are:\n              * `CODE:` 0, `MESSAGE:` OK\n              * `CODE:` 1, `MESSAGE:` Created\n              * `CODE:` 2, `MESSAGE:` Deleted\n              * `CODE:` 1000, `MESSAGE:` Internal system failure, `REMEDIAL ACTION:` Contact support\n              * `CODE:` 1001, `MESSAGE:` Invalid parameter(s), `REMEDIAL ACTION:` Check API and make sure you're sending the correct parameters\n              * `CODE:` 2000, `MESSAGE:` Unauthenticated, `REMEDIAL ACTION:` Please login first\n              * `CODE:` 2001, `MESSAGE:` Unauthorized, `REMEDIAL ACTION:` You don't have permission to perform this task, please contact your administrator\n              * `CODE:` 3000, `MESSAGE:` Organization not found, `REMEDIAL ACTION:` Check if you sent in the right Org Id\n              * `CODE:` 3000, `MESSAGE:` Organization already exists, `REMEDIAL ACTION:` Try a different organization name\n              * `CODE:` 4000, `MESSAGE:` Group not found, `REMEDIAL ACTION:` Check if you sent in the right Group Id\n              * `CODE:` 5000, `MESSAGE:` Project not found, `REMEDIAL ACTION:` Check if you sent in the right Project Id\n              * `CODE:` 5001, `MESSAGE:` Project already exists, `REMEDIAL ACTION:` Try a different project name\n              * `CODE:` 6000, `MESSAGE:` User not found, `REMEDIAL ACTION:` Check if you're using the correct User ID or username\n              * `CODE:` 6001, `MESSAGE:` User already exists, `REMEDIAL ACTION:` Try a different username\n              * `CODE:` 6002, `MESSAGE:` User is externally managed, `REMEDIAL ACTION:` Update the user in the main identity system (e.g. LDAP)\n              * `CODE:` 7000, `MESSAGE:` Content not found, `REMEDIAL ACTION:` Check if you sent in the right Content Id\n              * `CODE:` 7001, `MESSAGE:` Content already exists, `REMEDIAL ACTION:` Advise the user that the content already exists\n              * `CODE:` 8000, `MESSAGE:` Publishing is disabled, `REMEDIAL ACTION:` Advise the user to enable publishing\n              * `CODE:` 9000, `MESSAGE:` Search is unreachable, `REMEDIAL ACTION:` Advise the user that the search engine is not reachable\n              * `CODE:` 10000, `MESSAGE:` LoV not found, `REMEDIAL ACTION:` Check if you sent in the right LoV Id\n              * `CODE:` 50000, `MESSAGE:` CMIS server is unreachable, `REMEDIAL ACTION:` Advise the user that the CMIS server is not reachable\n              * `CODE:` 51000, `MESSAGE:` Box is unreachable, `REMEDIAL ACTION:` Advise the user that Box is not reachable\n              * `CODE:` 52000, `MESSAGE:` AWS is unreachable, `REMEDIAL ACTION:` Advise the user that AWS engine is not reachable\n      properties:\n        code:\n          type: integer\n          format: int32\n          description: The response code\n        message:\n          type: string\n          description: The detailed message of the response\n        remedialAction:\n          type: string\n          description: What the user can do in order to address the issue indicated by the response\n        documentationUrl:\n          type: string\n          description: A URL to documentation related to the response\n      required:\n        - code\n        - message\n  parameters:\n    offsetParam:\n      name: offset\n      in: query\n      description: Number of items to skip before returning the results.\n      required: false\n      schema:\n        type: integer\n        format: int32\n        minimum: 0\n        default: 0\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/User'\n      description: List of user object\n      required: true\n  responses:\n    NotFound:\n      description: The specified entity was not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n  securitySchemes: null\n  links: {}\n  callbacks: {}\nsecurity: []\n",
			"canonicalURL": "/github.com/craftercms/studio@37f1ecf111ede8978b040e8a6253d99b4eeaaac9/-/blob/src/main/api/3/studio-api-3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/craftercms/studio/blob/37f1ecf111ede8978b040e8a6253d99b4eeaaac9/src/main/api/3/studio-api-3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/user\": at 1:9669: get: duplicate operationId: \"getUser\""
}