{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/networknt/openapi-bundler"
		},
		"file": {
			"name": "openapi.spec.yaml",
			"size": 0,
			"path": "src/test/resources/openapi.spec.yaml",
			"byteSize": 11388,
			"content": "openapi: 3.0.0\ninfo:\n  version: 01.01.00\n  title: APITest API documentation.\n  termsOfService: http://api.apitest.com/party/tos/\nservers:\n- url: https://api.apitest.com/v1\npaths:\n  /party/APITest:\n    x-description: Test API Interface Definition.  NOT for use in production.\n    post:\n      security:\n      - party_auth:\n        - party.APITest\n      tags:\n      - Validate\n      deprecated: false\n      description: |\n        Test API Interface Definition.  NOT for use in production.\n\n        ### Change Summary\n\n        * 1.0.0\n          * Initial implementation of the general APITest Operation.\n      summary: Test API Interface Definition.\n      operationId: Test-API-Interface-Definition\n      parameters:\n      - in: header\n        name: X-Correlation-Id\n        description: The correlation ID for this API.\n        required: true\n        schema:\n          type: string\n          maxLength: 1024\n          minLength: 1\n      - in: header\n        name: X-Traceability-Id\n        description: Unique ID created by the client of the API. To be persisted in the Book of Record\n        required: true\n        schema:\n          type: string\n          maxLength: 1024\n          minLength: 1\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                APITest:\n                  $ref: '#/components/schemas/ValidateAPITest'\n      responses:\n        200:\n          description: Successful Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardResponse'\n        default:\n          description: An unexpected error has occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardErrors'\ncomponents:\n  securitySchemes:\n    party_auth:\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: http://localhost:8888/oauth2/token\n          scopes:\n            party.APITest: Validate access - grant to party/test interface definition operation\n  schemas:\n    ValidateAPITest:\n      type: object\n      properties:\n        APITestAllOf:\n          description: Definition using only the allOf structure\n          type: array\n          items:\n            $ref: '#/components/schemas/APITestAllOf'\n        APITestNestedAllOf:\n          description: This structure demonstrates the use of allOf in a nest and also the use of a single structure (the GetAmount structure) combined with different descriptions using allOf.  It's not a particularly good use of allOf but is supported within the specification and does have some merit over creating identical structures with different descriptions.\n          allOf:\n          - $ref: '#/components/schemas/FundsManaged'\n          - $ref: '#/components/schemas/InFlow'\n          - $ref: '#/components/schemas/OutFlow'\n        APITestOneOf:\n          description: Definition using only the oneOf structure\n          type: array\n          items:\n            $ref: '#/components/schemas/APITestOneOf'\n        APITestAllOfWithOneOfOne:\n          description: Definition using only both the oneOf and allOf structures\n          type: array\n          items:\n            $ref: '#/components/schemas/APITestAllOfWithOneOfOne'\n        APITestAllOfWithOneOfTwo:\n          description: Definition using only both the oneOf and allOf structures\n          type: array\n          items:\n            $ref: '#/components/schemas/APITestAllOfWithOneOfTwo'\n    APITestAllOf:\n      description: Any or all of the elements should be allowed.\n      allOf:\n      - type: object\n        properties:\n          testID:\n            description: The Internal ID of a Party that uniquely identifies the specific party record.\n            type: integer\n            format: int64\n            example: 911015108012\n      - $ref: '#/components/schemas/PartySelection'\n    APITestOneOf:\n      description: Only one of the linkID or testID elements should be allowed\n      type: object\n      oneOf:\n      - $ref: '#/components/schemas/LinkID'\n      - $ref: '#/components/schemas/TestID'\n    APITestAllOfWithOneOfOne:\n      type: object\n      allOf:\n      - type: object\n        properties:\n          operationMetaData:\n            $ref: '#/components/schemas/StandardResponse'\n      - $ref: '#/components/schemas/APITestOneOf'\n    APITestAllOfWithOneOfTwo:\n      type: object\n      allOf:\n      - description: Any or all of the elements should be allowed.\n        allOf:\n        - type: object\n          properties:\n            testID:\n              description: The Internal ID of a Party that uniquely identifies the specific party record.\n              type: integer\n              format: int64\n              example: 911015108012\n        - $ref: '#/components/schemas/PartySelection'\n      - $ref: '#/components/schemas/APITestOneOf'\n    NestedAllOf:\n      description: This structure demonstrates the use of allOf in a nest and also the use of a single structure (the GetAmount structure) combined with different descriptions using allOf.  It's not a particularly good use of allOf but is supported within the specification and does have some merit over creating identical structures with different descriptions.\n      allOf:\n      - $ref: '#/components/schemas/FundsManaged'\n      - $ref: '#/components/schemas/InFlow'\n      - $ref: '#/components/schemas/OutFlow'\n    LinkID:\n      type: object\n      properties:\n        linkID:\n          type: string\n          maxLength: 15\n          description: A unique ID that is used to link information together. When sent by a consumer, the consumer should ensure that it is unique within the message.\n    TestID:\n      type: object\n      properties:\n        testID:\n          description: The Internal ID of a Party that uniquely identifies the specific party record.\n          type: integer\n          format: int64\n          example: 911015108012\n    PartySelection:\n      type: object\n      properties:\n        accessCard:\n          description: An APITest Access card number.  Can be either a VISA, MasterCard or Convenience Card number. Must be left zero filled with leading zeros to a length of 20.\n          type: string\n          minLength: 20\n          maxLength: 20\n          example: 00004506445636341032\n        crossReference:\n          $ref: '#/components/schemas/PSCrossReference'\n    FundsManaged:\n      type: object\n      properties:\n        fundsManaged:\n          description: The aggregation of the account balances of each of the party's accounts.\n          type: object\n          allOf:\n          - $ref: '#/components/schemas/GetAmount'\n    InFlow:\n      type: object\n      properties:\n        inFlow:\n          description: The non-prorated amount reflecting incoming funds to the party for the month.\n          type: object\n          allOf:\n          - $ref: '#/components/schemas/GetAmount'\n    OutFlow:\n      type: object\n      properties:\n        outFlow:\n          description: The non-prorated amount reflecting funds paid out by the party for the month.\n          type: object\n          allOf:\n          - $ref: '#/components/schemas/GetAmount'\n    GetAmount:\n      type: object\n      properties:\n        amount:\n          type: string\n        asOfDate:\n          type: string\n          format: date\n          nullable: true\n          description: the date at which the information was current.\n    StandardErrors:\n      type: object\n      properties:\n        error:\n          $ref: 'error.yaml#/Error'\n        operationMetaData:\n          $ref: '#/components/schemas/StandardResponse'\n    StandardResponse:\n      type: object\n      properties:\n        context:\n          $ref: '#/components/schemas/ServiceContext'\n        status:\n          type: array\n          items:\n            $ref: 'status.yaml#/StatusItem'\n    PSCrossReference:\n      type: object\n      description: A unique identifier for a client record.\n      required:\n      - externalSystemID\n      - referenceType\n      - ID\n      properties:\n        externalSystemID:\n          description: The ID used to uniquely identify the external system to which this Cross Reference belongs\n          type: integer\n          format: int32\n        referenceType:\n          description: Identifies the type of the Cross Reference.\n          type: integer\n          format: int32\n        ID:\n          type: string\n          maxLength: 40\n          minLength: 1\n    ServiceContext:\n      type: object\n      description: Provides the information required to uniquely identify this service execution instance.\n      required:\n      - transactionID\n      - timeStamp\n      properties:\n        transactionID:\n          description: Provides a unique transaction Identifer with this layer.  Not required to be unique across the enterprise, only within this application.\n          type: string\n        timeStamp:\n          description: Indicates the current system-time of the request.\n          type: string\n          format: date-time\n    # Error:\n    #   type: object\n    #   required:\n    #   - statusCode\n    #   - code\n    #   - message\n    #   - description\n      properties:\n        statusCode:\n          type: integer\n          format: int32\n        code:\n          type: string\n        severityCode:\n          description: This code identifies the severity of an API error.  This code indicates whether there is an API-level error, warning, information message that might need to be communicated to the client or if a severe error has occurred.\n          type: string\n          enum:\n          - INFO\n          - WARN\n          - ERROR\n          - SEVERE\n        message:\n          type: string\n        description:\n          type: string\n    # StatusItem:\n    #   required:\n    #   - statusCode\n    #   - message\n    #   type: object\n    #   properties:\n    #     statusCode:\n    #       type: string\n    #     topic:\n    #       description: The general subject to which the the statusCode applies.\n    #       type: string\n    #     severityCode:\n    #       description: This code identifies the severity of an API error.  This code indicates whether there is an API-level error, warning, information message that might need to be communicated to the client or if a severe error has occurred.\n    #       type: string\n    #       enum:\n    #       - INFO\n    #       - WARN\n    #       - ERROR\n    #       - SEVERE\n    #     message:\n    #       description: A human-readable, language-dependent short description of the error.  Must not be used for automated processing.\n    #       type: string\n    #     description:\n    #       description: A human-readable, longer description that is specific to the nature of the problem or issue encountered.  Must not be used for automated processing.\n    #       type: string\n    #     source:\n    #       $ref: '#/components/schemas/StatusSource'\n    # StatusSource:\n    #   description: The source member is used to indicate which part of the service execution caused an error.  When POINTER is populated, it refers to an item within the request.  Typically only one of 'pointer' or 'parameter' will be populated.\n    #   type: object\n    #   properties:\n    #     pointer:\n    #       description: a JSON Pointer to the specific associated entry in the request document.\n    #       type: string\n    #     parameter:\n    #       type: string\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"StandardErrors\": parse schema: property \"error\": parse schema: resolve \"error.yaml#/Error\": external \"error.yaml\": file: local file reference is not allowed"
}