{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/go-language-server/api"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/openapi.yaml",
			"byteSize": 166606,
			"content": "# Generated with protoc-gen-openapi\n# https://github.com/googleapis/gnostic/tree/master/apps/protoc-gen-openapi\n\nopenapi: 3.0.3\ninfo:\n    title: LanguageServerProtocol\n    description: Language Server Protocol API.\n    version: 0.0.1\npaths:\n    /$/cancelRequest/*:cancel:\n        post:\n            summary: Cancel notification is the base protocol offers support for request cancellation. To cancel a request, a CancelRequest notification message is sent. A request that got canceled still needs to return from the server and send a response back. It can not be left open / hanging. This is in line with the JSON RPC protocol that requires that every request sends a response back. In addition it allows for returning partial results on cancel. If the request returns an error response on cancellation it is advised to set the error code to [Codes.RequestCancelled][protocol.Codes].\n            operationId: LanguageServerProtocol_Cancel\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CancelRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /$/logTrace/*:logTrace:\n        post:\n            summary: LogTrace notification to log the trace of the server’s execution. The amount and content of these notifications depends on the current `trace` configuration. If `trace` is `'off'`, the server should not send any `logTrace` notification. If `trace` is `'message'`, the server should not add the `'verbose'` field in the logTraceRequest. `$/logTrace` should be used for systematic trace reporting. For single debugging messages, the server should send window/logMessage notifications.\n            operationId: LanguageServerProtocol_LogTrace\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/LogTraceRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /$/progress/*:progress:\n        post:\n            summary: Progress notification is the base protocol offers also support to report progress in a generic fashion. This mechanism can be used to report any kind of progress including work done progress (usually used to report progress in the user interface using a progress bar) and partial result progress to support streaming of results. Progress is reported against a token. The token is different than the request ID which allows to report progress out of band and also for notification. @since 3.15.0\n            operationId: LanguageServerProtocol_Progress\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ProgressRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /$/setTrace:setTrace:\n        post:\n            summary: SetTrace notification that should be used by the client to modify the trace setting of the server.\n            operationId: LanguageServerProtocol_SetTrace\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/SetTraceRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /callHierarchy/incomingCalls:callHierarchyIncomingCalls:\n        post:\n            summary: CallHierarchyIncomingCalls request is sent from the client to the server to resolve incoming calls for a given call hierarchy item. The request doesn’t define its own client and server capabilities. It is only issued if a server registers for the `textDocument/prepareCallHierarchy` request. @since 3.16.0\n            operationId: LanguageServerProtocol_CallHierarchyIncomingCalls\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CallHierarchyIncomingCallsRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CallHierarchyIncomingCallsResponse'\n    /callHierarchy/outgoingCalls:callHierarchyOutgoingCalls:\n        post:\n            summary: CallHierarchyOutgoingCalls is the request is sent from the client to the server to resolve outgoing calls for a given call hierarchy item. The request doesn’t define its own client and server capabilities. It is only issued if a server registers for the textDocument/prepareCallHierarchy request. @since 3.16.0\n            operationId: LanguageServerProtocol_CallHierarchyOutgoingCalls\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CallHierarchyOutgoingCallsRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CallHierarchyOutgoingCallsResponse'\n    /codeLens/resolve:codeLensResolve:\n        post:\n            summary: CodeLensResolve request is the code lens resolve request is sent from the client to the server to resolve the command for a given code lens item.\n            operationId: LanguageServerProtocol_CodeLensResolve\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CodeLensResolveRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CodeLensResolveResponse'\n    /completionItem/resolve:completionItemResolve:\n        post:\n            summary: CompletionItemResolve request is the request is sent from the client to the server to resolve additional information for a given completion item.\n            operationId: LanguageServerProtocol_CompletionItemResolve\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CompletionItemResolveRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CompletionItemResolveResponse'\n    /documentLink/resolve:documentLinkResolve:\n        post:\n            summary: DocumentLinkResolve request is the document link resolve request is sent from the client to the server to resolve the target of a given document link.\n            operationId: LanguageServerProtocol_DocumentLinkResolve\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DocumentLinkResolveRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DocumentLinkResolveResponse'\n    /exit/*:exit:\n        post:\n            summary: Exit notification to ask the server to exit its process. The server should exit with `success` code 0 if the shutdown request has been received before; otherwise with `error` code 1.\n            operationId: LanguageServerProtocol_Exit\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Empty'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /initialize/*:initialize:\n        post:\n            summary: 'Initialize request is sent as the first request from the client to the server. If the server receives a request or notification before the initialize request it should act as follows: - For a request the response should be an error with `code: -32002`. The message can be picked by the server. - Notifications should be dropped, except for the exit notification. This will allow the exit of a server without an initialize request. Until the server has responded to the `initialize` request with an `InitializeResponse`, the client must not send any additional requests or notifications to the server. In addition the server is not allowed to send any requests or notifications to the client until it has responded with an `InitializeResponse`, with the exception that during the initialize request the server is allowed to send the notifications `window/showMessage`, `window/logMessage` and `telemetry/event` as well as the `window/showMessageRequest` request to the client. In case the client sets up a progress token in the initialize params (e.g. property `workDoneToken`) the server is also allowed to use that token (and only that token) using the `$/progress` notification sent from the server to the client. The initialize request may only be sent once.'\n            operationId: LanguageServerProtocol_Initialize\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/InitializeRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/InitializeResponse'\n    /initialized/*:initialized:\n        post:\n            summary: Initialized notification is sent from the client to the server after the client received the result of the `initialize` request but before the client is sending any other request or notification to the server. The server can use the `initialized` notification for example to dynamically register capabilities. The `initialized` notification may only be sent once.\n            operationId: LanguageServerProtocol_Initialized\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/InitializedRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /shutdown/*:shutdown:\n        post:\n            summary: Shutdown request is sent from the client to the server. It asks the server to shut down, but to not exit (otherwise the response might not be delivered correctly to the client). There is a separate exit notification that asks the server to exit. Clients must not send any notifications other than exit or requests to a server to which they have sent a shutdown request. If a server receives requests after a shutdown request those requests should error with `InvalidRequest`.\n            operationId: LanguageServerProtocol_Shutdown\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Empty'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Error'\n    /telemetry/event:telemetry:\n        post:\n            summary: Telemetry notification is the telemetry notification is sent from the server to the client to ask the client to log a telemetry event.\n            operationId: LanguageServerProtocol_Telemetry\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Any'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /textDocument/Completion:completion:\n        post:\n            summary: 'Completion request is the Completion request is sent from the client to the server to compute completion items at a given cursor position. Completion items are presented in the IntelliSense user interface. If computing full completion items is expensive, servers can additionally provide a handler for the completion item resolve request (‘completionItem/resolve’). This request is sent when a completion item is selected in the user interface. A typical use case is for example: the `textDocument/completion` request doesn’t fill in the documentation property for returned completion items since it is expensive to compute. When the item is selected in the user interface then a `completionItem/resolve` request is sent with the selected completion item as a parameter. The returned completion item should have the documentation property filled in. The request can only delay the computation of the `detail` and `documentation` properties. Other properties like `sortText`, `filterText`, `insertText`, `textEdit` and `additionalTextEdits` must be provided in the `textDocument/completion` response and must not be changed during resolve.'\n            operationId: LanguageServerProtocol_Completion\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CompletionRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CompletionResponse'\n    /textDocument/codeAction:codeAction:\n        post:\n            summary: 'CodeAction request is the code action request is sent from the client to the server to compute commands for a given text document and range. These commands are typically code fixes to either fix problems or to beautify/refactor code. The result of a `textDocument/codeAction` request is an array of `Command` literals which are typically presented in the user interface. To ensure that a server is useful in many clients the commands specified in a code actions should be handled by the server and not by the client (see `workspace/executeCommand` and `ServerCapabilities.executeCommandProvider`). If the client supports providing edits with a code action then the mode should be used. When the command is selected the server should be contacted again (via the `workspace/executeCommand`) request to execute the command. Since version 3.8.0: support for CodeAction literals to enable the following scenarios: - the ability to directly return a workspace edit from the code action request. This avoids having another server roundtrip to execute an actual code action. However server providers should be aware that if the code action is expensive to compute or the edits are huge it might still be beneficial if the result is simply a command and the actual edit is only computed when needed. - the ability to group code actions using a kind. Clients are allowed to ignore that information. However it allows them to better group code action for example into corresponding menus (e.g. all refactor code actions into a refactor menu). Clients need to announce their support for code action literals (e.g. literals of type `CodeAction`) and code action kinds via the corresponding client capability `codeAction.codeActionLiteralSupport`.'\n            operationId: LanguageServerProtocol_CodeAction\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CodeActionRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CodeActionResponse'\n    /textDocument/codeLens:codeLens:\n        post:\n            summary: CodeLens request is the code lens request is sent from the client to the server to compute code lenses for a given text document.\n            operationId: LanguageServerProtocol_CodeLens\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CodeLensRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CodeLensResponse'\n    /textDocument/colorPresentation:colorPresentation:\n        post:\n            summary: ColorPresentation request is the color presentation request is sent from the client to the server to obtain a list of presentations for a color value at a given location. Clients can use the result to - modify a color reference. - show in a color picker and let users pick one of the presentations This request has no special capabilities and registration options since it is send as a resolve request for the `textDocument/documentColor` request. @since 3.6.0\n            operationId: LanguageServerProtocol_ColorPresentation\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ColorPresentationRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ColorPresentationResponse'\n    /textDocument/declaration:declaration:\n        post:\n            summary: GotoDeclaration request is the go to declaration request is sent from the client to the server to resolve the declaration location of a symbol at a given text document position. The result type [LocationLinks][LocationLinks] got introduced with version 3.14.0 and depends on the corresponding client capability `textDocument.declaration.linkSupport`. @since 3.14.0\n            operationId: LanguageServerProtocol_GotoDeclaration\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DeclarationRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DeclarationResponse'\n    /textDocument/definition:definition:\n        post:\n            summary: GotoTypeDefinition request is the go to type definition request is sent from the client to the server to resolve the type definition location of a symbol at a given text document position. The result type [LocationLinks][LocationLinks] got introduced with version 3.14.0 and depends on the corresponding client capability `textDocument.typeDefinition.linkSupport`. @since 3.6.0\n            operationId: LanguageServerProtocol_GotoTypeDefinition\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/TypeDefinitionRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/TypeDefinitionResponse'\n    /textDocument/didChange:didChangeTextDocument:\n        post:\n            summary: DidChangeTextDocument notification is the document change notification is sent from the client to the server to signal changes to a text document. Before a client can change a text document it must claim ownership of its content using the textDocument/didOpen notification. In 2.0 the shape of the params has changed to include proper version numbers and language ids.\n            operationId: LanguageServerProtocol_DidChangeTextDocument\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DidChangeTextDocumentRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /textDocument/didClose:didCloseTextDocument:\n        post:\n            summary: DidCloseTextDocument notification is the document close notification is sent from the client to the server when the document got closed in the client. The document’s master now exists where the document’s Uri points to (e.g. if the document’s Uri is a file Uri the master now exists on disk). As with the open notification the close notification is about managing the document’s content. Receiving a close notification doesn’t mean that the document was open in an editor before. A close notification requires a previous open notification to be sent. Note that a server’s ability to fulfill requests is independent of whether a text document is open or closed.\n            operationId: LanguageServerProtocol_DidCloseTextDocument\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DidCloseTextDocumentRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /textDocument/didOpen:didOpenTextDocument:\n        post:\n            summary: DidOpenTextDocument notification is the `DidOpenTextDocumentRequest` contain the language id the document is associated with. If the language Id of a document changes, the client needs to send a `textDocument/didClose` to the server followed by a `textDocument/didOpen` with the new language id if the server handles the new language id as well.\n            operationId: LanguageServerProtocol_DidOpenTextDocument\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DidOpenTextDocumentRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /textDocument/didSave:didSaveTextDocument:\n        post:\n            summary: DidSaveTextDocument notification is the document save notification is sent from the client to the server when the document was saved in the client.\n            operationId: LanguageServerProtocol_DidSaveTextDocument\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DidSaveTextDocumentRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /textDocument/documentColor:documentColor:\n        post:\n            summary: 'DocumentColor request is the document color request is sent from the client to the server to list all color references found in a given text document. Along with the range, a color value in RGB is returned. Clients can use the result to decorate color references in an editor. For example: - Color boxes showing the actual color next to the reference - Show a color picker when a color reference is edited @since 3.6.0'\n            operationId: LanguageServerProtocol_DocumentColor\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DocumentColorRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DocumentColorResponse'\n    /textDocument/documentHighlight:documentHighlight:\n        post:\n            summary: DocumentHighlights request is the document highlight request is sent from the client to the server to resolve a document highlights for a given text document position. For programming languages this usually highlights all references to the symbol scoped to this file. However we kept `textDocument/documentHighlight` and `textDocument/references` separate requests since the first one is allowed to be more fuzzy. Symbol matches usually have a DocumentHighlightKind of `Read` or `Write` whereas fuzzy or textual matches use `Text` as the kind.\n            operationId: LanguageServerProtocol_DocumentHighlights\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DocumentHighlightRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DocumentHighlightsResponse'\n    /textDocument/documentLink:documentLink:\n        post:\n            summary: DocumentLink request is the document links request is sent from the client to the server to request the location of links in a document.\n            operationId: LanguageServerProtocol_DocumentLink\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DocumentLinkRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DocumentLinkResponse'\n    /textDocument/documentSymbol:documentSymbol:\n        post:\n            summary: DocumentSymbols request is the document symbol request is sent from the client to the server. The returned result is either - SymbolInformation[] which is a flat list of all symbols found in a given text document. Then neither the symbol’s location range nor the symbol’s container name should be used to infer a hierarchy. - DocumentSymbol[] which is a hierarchy of symbols found in a given text document.\n            operationId: LanguageServerProtocol_DocumentSymbols\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DocumentSymbolRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DocumentSymbolResponse'\n    /textDocument/foldingRange:foldingRange:\n        post:\n            summary: FoldingRange request is the folding range request is sent from the client to the server to return all folding ranges found in a given text document. @since 3.10.0\n            operationId: LanguageServerProtocol_FoldingRange\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/FoldingRangeRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/FoldingRangeResponse'\n    /textDocument/formatting:formatting:\n        post:\n            summary: DocumentFormatting request is the document formatting request is sent from the client to the server to format a whole document.\n            operationId: LanguageServerProtocol_DocumentFormatting\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DocumentFormattingRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DocumentFormattingResponse'\n    /textDocument/hover:hover:\n        post:\n            summary: Hover Request is the hover request is sent from the client to the server to request hover information at a given text document position.\n            operationId: LanguageServerProtocol_Hover\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/HoverRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/HoverResponse'\n    /textDocument/implementation:implementation:\n        post:\n            summary: GotoImplementation request is the go to implementation request is sent from the client to the server to resolve the implementation location of a symbol at a given text document position. The result type [LocationLinks][LocationLinks] got introduced with version 3.14.0 and depends on the corresponding client capability `textDocument.implementation.linkSupport`. @since 3.6.0\n            operationId: LanguageServerProtocol_GotoImplementation\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ImplementationRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ImplementationResponse'\n    /textDocument/onTypeFormatting:onTypeFormatting:\n        post:\n            summary: OnTypeFormatting request is the document on type formatting request is sent from the client to the server to format parts of the document during typing.\n            operationId: LanguageServerProtocol_OnTypeFormatting\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DocumentOnTypeFormattingRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DocumentOnTypeFormattingResponse'\n    /textDocument/prepareCallHierarchy:prepareCallHierarchy:\n        post:\n            summary: 'PrepareCallHierarchy request is the call hierarchy request is sent from the client to the server to return a call hierarchy for the language element of given text document positions. The call hierarchy requests are executed in two steps: - first a call hierarchy item is resolved for the given text document position - for a call hierarchy item the incoming or outgoing call hierarchy items are resolved. @since 3.16.0'\n            operationId: LanguageServerProtocol_PrepareCallHierarchy\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CallHierarchyPrepareRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CallHierarchyPrepareResponse'\n    /textDocument/prepareRename:prepareRename:\n        post:\n            summary: PrepareRename request is the prepare rename request is sent from the client to the server to setup and test the validity of a rename operation at a given location. @since 3.12.0\n            operationId: LanguageServerProtocol_PrepareRename\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/PrepareRenameRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/PrepareRenameResponse'\n    /textDocument/publishDiagnostics:publishDiagnostics:\n        post:\n            summary: PublishDiagnostics notification is the diagnostics notification are sent from the server to the client to signal results of validation runs.\n            operationId: LanguageServerProtocol_PublishDiagnostics\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/PublishDiagnosticsRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /textDocument/rangeFormatting:rangeFormatting:\n        post:\n            summary: DocumentRangeFormatting Request is the document range formatting request is sent from the client to the server to format a given range in a document.\n            operationId: LanguageServerProtocol_DocumentRangeFormatting\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DocumentRangeFormattingRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DocumentRangeFormattingResponse'\n    /textDocument/references:references:\n        post:\n            summary: FindReferences request is the references request is sent from the client to the server to resolve project-wide references for the symbol denoted by the given text document position.\n            operationId: LanguageServerProtocol_FindReferences\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ReferenceRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ReferenceResponse'\n    /textDocument/rename:rename:\n        post:\n            summary: Rename request is the rename request is sent from the client to the server to ask the server to compute a workspace change so that the client can perform a workspace-wide rename of a symbol.\n            operationId: LanguageServerProtocol_Rename\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/RenameRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/RenameResponse'\n    /textDocument/selectionRange:selectionRange:\n        post:\n            summary: SelectionRange request is the selection range request is sent from the client to the server to return suggested selection ranges at an array of given positions. A selection range is a range around the cursor position which the user might be interested in selecting. A selection range in the return array is for the position in the provided parameters at the same index. Therefore positions[i] must be contained in result[i].range. Typically, but not necessary, selection ranges correspond to the nodes of the syntax tree. @since 3.15.0\n            operationId: LanguageServerProtocol_SelectionRange\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/SelectionRangeRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SelectionRangeResponse'\n    /textDocument/signatureHelp:signatureHelp:\n        post:\n            summary: SignatureHelp request is the signature help request is sent from the client to the server to request signature information at a given cursor position.\n            operationId: LanguageServerProtocol_SignatureHelp\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/SignatureHelpRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SignatureHelpResponse'\n    /textDocument/willSave:willSaveTextDocument:\n        post:\n            summary: WillSaveTextDocument notification is the document will save notification is sent from the client to the server before the document is actually saved.\n            operationId: LanguageServerProtocol_WillSaveTextDocument\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/WillSaveTextDocumentRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /textDocument/willSaveWaitUntil:willSaveWaitUntilTextDocument:\n        post:\n            summary: WillSaveWaitUntilTextDocument request is the document will save request is sent from the client to the server before the document is actually saved. The request can return an array of TextEdits which will be applied to the text document before it is saved. Please note that clients might drop results if computing the text edits took too long or if a server constantly fails on this request. This is done to keep the save fast and reliable.\n            operationId: LanguageServerProtocol_WillSaveWaitUntilTextDocument\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/WillSaveTextDocumentRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/WillSaveTextDocumentResponse'\n    /window/logMessage:logMessage:\n        post:\n            summary: LogMessage notification is the log message notification is sent from the server to the client to ask the client to log a particular message.\n            operationId: LanguageServerProtocol_LogMessage\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/LogMessageRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /window/showMessage:showMessage:\n        post:\n            summary: ShowMessage notification is the show message notification is sent from a server to a client to ask the client to display a particular message in the user interface.\n            operationId: LanguageServerProtocol_ShowMessage\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ShowMessageRequestParams'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /window/showMessageRequest:showMessageRequest:\n        post:\n            summary: ShowMessageRequest request is the show message request is sent from a server to a client to ask the client to display a particular message in the user interface. In addition to the show message notification the request allows to pass actions and to wait for an answer from the client.\n            operationId: LanguageServerProtocol_ShowMessageRequest\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ShowMessageRequestRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ShowMessageResponse'\n    /window/workDoneProgress/cancel:cancelWorkDoneProgress:\n        post:\n            summary: CancelWorkDoneProgress is the `window/workDoneProgress/cancel` notification is sent from the client to the server to cancel a progress initiated on the server side using the `window/workDoneProgress/create`.\n            operationId: LanguageServerProtocol_CancelWorkDoneProgress\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/WorkDoneProgressCancelRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Error'\n    /window/workDoneProgress/create:createWorkDoneProgress:\n        post:\n            summary: CreateWorkDoneProgress is the `window/workDoneProgress/create` request is sent from the server to the client to ask the client to create a work done progress.\n            operationId: LanguageServerProtocol_CreateWorkDoneProgress\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/WorkDoneProgressCreateRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Error'\n    /workspace/applyEdit:applyEdit:\n        post:\n            summary: ApplyEdit request is sent from the server to the client to modify resource on the client side.\n            operationId: LanguageServerProtocol_ApplyEdit\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ApplyWorkspaceEditRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ApplyWorkspaceEditResponse'\n    /workspace/configuration:configuration:\n        post:\n            summary: Configuration request is the `workspace/configuration` request is sent from the server to the client to fetch configuration settings from the client. The request can fetch several configuration settings in one roundtrip. The order of the returned configuration settings correspond to the order of the passed `ConfigurationItems` (e.g. the first item in the response is the result for the first configuration item in the params). @since 3.6.0\n            operationId: LanguageServerProtocol_Configuration\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ConfigurationRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ConfigurationResponse'\n    /workspace/didChangeConfiguration:didChangeConfiguration:\n        post:\n            summary: DidChangeConfiguration a notification sent from the client to the server to signal the change of configuration settings.\n            operationId: LanguageServerProtocol_DidChangeConfiguration\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DidChangeConfigurationRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /workspace/didChangeWatchedFiles:didChangeWatchedFiles:\n        post:\n            summary: DidChangeWatchedFiles notification is the watched files notification is sent from the client to the server when the client detects changes to files watched by the language client. It is recommended that servers register for these file events using the registration mechanism. In former implementations clients pushed file events without the server actively asking for it.\n            operationId: LanguageServerProtocol_DidChangeWatchedFiles\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DidChangeWatchedFilesRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /workspace/didChangeWorkspaceFolders:didChangeWorkspaceFolders:\n        post:\n            summary: 'DidChangeWorkspaceFolders notification is the `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server to inform the server about workspace folder configuration changes. The notification is sent by default if both client capability `workspace.workspaceFolders` and the server capability `workspace.workspaceFolders.supported` are true; or if the server has registered itself to receive this notification. To register for the `workspace/didChangeWorkspaceFolders` send a client/registerCapability request from the server to the client. The `registration` parameter must have a registrations item of the following form, where id is a unique id used to unregister the capability (the example uses a UUID): @since 3.6.0'\n            operationId: LanguageServerProtocol_DidChangeWorkspaceFolders\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DidChangeWorkspaceFoldersRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Empty'\n    /workspace/executeCommand:executeCommand:\n        post:\n            summary: ExecuteCommand is the `workspace/executeCommand` request is sent from the client to the server to trigger command execution on the server. In most cases the server creates a `WorkspaceEdit` structure and applies the changes to the workspace using the request `workspace/applyEdit` which is sent from the server to the client.\n            operationId: LanguageServerProtocol_ExecuteCommand\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ExecuteCommandParams'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ExecuteCommandResponse'\n    /workspace/symbols:workspaceSymbols:\n        post:\n            summary: WorkspaceSymbols request is the workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.\n            operationId: LanguageServerProtocol_WorkspaceSymbols\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ConfigurationRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/WorkspaceSymbolsResponse'\n    /workspace/workspaceFolders:workspaceFolders:\n        post:\n            summary: WorkspaceFolders request is the workspace/workspaceFolders request is sent from the server to the client to fetch the current open list of workspace folders. Returns null in the response if only a single file is open in the tool. Returns an empty array if a workspace is open but no folders are configured. @since 3.6.0\n            operationId: LanguageServerProtocol_WorkspaceFolders\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Empty'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/WorkspaceFoldersResponse'\ncomponents:\n    schemas:\n        Any:\n            properties:\n                type_url:\n                    type: string\n                    description: 'A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL''s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.'\n                value:\n                    type: string\n                    description: Must be a valid serialized protocol buffer of the above specified type.\n                    format: bytes\n            description: '`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++.     Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(\u0026foo)) {       ...     } Example 2: Pack and unpack a message in Java.     Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }  Example 3: Pack and unpack a message in Python.     foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  Example 4: Pack and unpack a message in Go      foo := \u0026pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := \u0026pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      } The pack methods provided by protobuf library will by default use ''type.googleapis.com/full.type.name'' as the type URL and the unpack methods only use the fully qualified type name after the last ''/'' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\". JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:     package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }     {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": \u003cstring\u003e,       \"lastName\": \u003cstring\u003e     } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):     {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }'\n        ApplyWorkspaceEditRequest:\n            properties:\n                label:\n                    $ref: '#/components/schemas/StringValue'\n                edit:\n                    $ref: '#/components/schemas/WorkspaceEdit'\n            description: ApplyWorkspaceEditRequest is the parameters of a `workspace/applyEdit` request.\n        ApplyWorkspaceEditResponse:\n            properties:\n                applied:\n                    type: boolean\n                    description: Indicates whether the edit was applied or not.\n                failure_reason:\n                    $ref: '#/components/schemas/StringValue'\n            description: ApplyWorkspaceEditResponse is the parameters of a ApplyWorkspaceEdit response.\n        CallHierarchyIncomingCallsRequest:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n                item:\n                    $ref: '#/components/schemas/CallHierarchyItem'\n            description: CallHierarchyIncomingCallsRequest is the parameters of a `textDocument/incomingCalls` request. @since 3.16.0\n        CallHierarchyIncomingCallsResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: CallHierarchyIncomingCallsResponse represents a CallHierarchyIncomingCalls response.\n        CallHierarchyItem:\n            properties:\n                name:\n                    type: string\n                    description: The name of this item.\n                kind:\n                    type: integer\n                    description: The kind of this item.\n                    format: enum\n                tags:\n                    type: array\n                    items:\n                        type: integer\n                    description: Tags for this item.\n                detail:\n                    $ref: '#/components/schemas/StringValue'\n                uri:\n                    $ref: '#/components/schemas/DocumentURI'\n                range:\n                    $ref: '#/components/schemas/Range'\n                selection_range:\n                    $ref: '#/components/schemas/Range'\n            description: CallHierarchyItem represents a item of call hierarchy. @since 3.16.0\n        CallHierarchyOutgoingCallsRequest:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n                item:\n                    $ref: '#/components/schemas/CallHierarchyItem'\n            description: CallHierarchyOutgoingCallsRequest is the parameters of a `callHierarchy/outgoingCalls` request. @since 3.16.0\n        CallHierarchyOutgoingCallsResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: CallHierarchyIncomingCallsResponse represents a CallHierarchyOutgoingCalls response.\n        CallHierarchyPrepareRequest:\n            properties:\n                text_document_position_params:\n                    $ref: '#/components/schemas/TextDocumentPositionParams'\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n            description: CallHierarchyPrepareRequest is the parameters of a `textDocument/prepareCallHierarchy` request. @since 3.16.0\n        CallHierarchyPrepareResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: CallHierarchyPrepareResponse represents a PrepareCallHierarchy response.\n        CancelRequest:\n            properties:\n                id:\n                    type: integer\n                    description: Required. The request id to cancel.\n                    format: int32\n            description: CancelRequest represents a cancel notification params.\n        ClientCapabilities:\n            properties:\n                workspace:\n                    $ref: '#/components/schemas/Workspace'\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentClientCapabilities'\n                window:\n                    $ref: '#/components/schemas/Window'\n                experimental:\n                    $ref: '#/components/schemas/Any'\n            description: ClientCapabilities define capabilities for dynamic registration, workspace and text document features the client supports. The experimental can be used to pass experimental capabilities under development. For future compatibility a ClientCapabilities object literal can have more properties set than currently defined. Servers receiving a ClientCapabilities object literal with unknown properties should ignore these properties. A missing property should be interpreted as an absence of the capability. If a missing property normally defines sub properties, all missing sub properties should be interpreted as an absence of the corresponding capability. Client capabilities got introduced with version 3.0 of the protocol. They therefore only describe capabilities that got introduced in 3.x or later. Capabilities that existed in the 2.x version of the protocol are still mandatory for clients. Clients cannot opt out of providing them. So even if a client omits the ClientCapabilities.textDocument.synchronization it is still required that the client provides text document synchronization (e.g. open, changed and close notifications).\n        CodeActionClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether code action supports dynamic registration.\n                code_action_literal_support:\n                    $ref: '#/components/schemas/CodeActionLiteralSupport'\n                is_preferred_support:\n                    type: boolean\n                    description: Optional. Whether code action supports the `isPreferred` property. @since 3.15.0\n            description: CodeActionClientCapabilities represents a client capabilities of `textDocument/codeAction` request.\n        CodeActionContext:\n            properties:\n                diagnostics:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Diagnostic'\n                    description: An array of diagnostics known on the client side overlapping the range provided to the `textDocument/codeAction` request. They are provided so that the server knows which errors are currently presented to the user for the given range. There is no guarantee that these accurately reflect the error state of the resource. The primary parameter to compute code actions is the provided range.\n                only:\n                    type: array\n                    items:\n                        type: integer\n                    description: Requested kind of actions to return. Actions not of this kind are filtered out by the client before being shown. So servers can omit computing them.\n            description: CodeActionContext contains additional diagnostic information about the context in which a code action is run.\n        CodeActionOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n                code_action_kinds:\n                    type: array\n                    items:\n                        type: integer\n                    description: CodeActionKinds that this server may return. The list of kinds may be generic, such as `CodeActionKind.Refactor`, or the server may list out every specific kind they provide.\n            description: CodeActionOptions represents a server capabilities option of codeActionProvider.\n        CodeActionRequest:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n                range:\n                    $ref: '#/components/schemas/Range'\n                context:\n                    $ref: '#/components/schemas/CodeActionContext'\n            description: CodeActionRequest params for the CodeActionRequest.\n        CodeActionResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: CodeActionResponse represents a CodeAction response.\n        CodeLens:\n            properties:\n                range:\n                    $ref: '#/components/schemas/Range'\n                command:\n                    $ref: '#/components/schemas/Command'\n                data:\n                    $ref: '#/components/schemas/Any'\n            description: CodeLens is a code lens represents a command that should be shown along with source text, like the number of references, a way to run tests, etc. A code lens is _unresolved_ when no command is associated to it. For performance reasons the creation of a code lens and resolving should be done in two stages.\n        CodeLensClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether code lens supports dynamic registration.\n            description: CodeLensClientCapabilities represents a client capabilities of `textDocument/codeLens` request.\n        CodeLensOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n                resolve_provider:\n                    type: boolean\n                    description: Optional. Code lens has a resolve provider as well.\n            description: CodeLensOptions represents a server capabilities option of codeLensProvider.\n        CodeLensRequest:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n            description: CodeLensRequest is the parameters of a `textDocument/codeLens` request.\n        CodeLensResolveRequest:\n            properties:\n                code_lens:\n                    $ref: '#/components/schemas/CodeLens'\n            description: CodeLensResolveRequest represents a CodeLensResolveRequest request.\n        CodeLensResolveResponse:\n            properties:\n                code_lens:\n                    $ref: '#/components/schemas/CodeLens'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: CodeLensResolveResponse represents a CodeLensResolve response.\n        CodeLensResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: CodeLensResponse represents a CodeLens response.\n        Color:\n            properties:\n                red:\n                    readOnly: true\n                    type: integer\n                    description: The red component of this color in the range [0-1]. readonly\n                    format: int32\n                green:\n                    readOnly: true\n                    type: integer\n                    description: The green component of this color in the range [0-1]. readonly\n                    format: int32\n                blue:\n                    readOnly: true\n                    type: integer\n                    description: The blue component of this color in the range [0-1]. readonly\n                    format: int32\n                alpha:\n                    readOnly: true\n                    type: integer\n                    description: The alpha component of this color in the range [0-1]. readonly\n                    format: int32\n            description: Color represents a color in RGBA space.\n        ColorPresentationRequest:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n                color:\n                    $ref: '#/components/schemas/Color'\n                range:\n                    $ref: '#/components/schemas/Range'\n            description: ColorPresentationRequest is the parameters of a `textDocument/colorPresentation` request.\n        ColorPresentationResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: ColorPresentationResponse represents a ColorPresentation response.\n        Command:\n            properties:\n                title:\n                    type: string\n                    description: Title of the command, like `save`.\n                command:\n                    type: string\n                    description: The identifier of the actual command handler.\n                arguments:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Any'\n                    description: Arguments that the command handler should be invoked with.\n            description: Command represents a reference to a command. Provides a title which will be used to represent a command in the UI. Commands are identified by a string identifier. The recommended way to handle commands is to implement their execution on the server side if the client and server provides the corresponding capabilities. Alternatively the tool extension code could handle the command. The protocol currently doesn’t specify a set of well-known commands.\n        CompletionClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Whether completion supports dynamic registration.\n                completion_item:\n                    $ref: '#/components/schemas/CompletionItem'\n                completion_item_kind:\n                    $ref: '#/components/schemas/CompletionItemKind'\n                context_support:\n                    type: boolean\n                    description: Optional. The client supports to send additional context information for a `textDocument/completion` request.\n            description: CompletionClientCapabilities represents a client capabilities of `textDocument/completion` request.\n        CompletionContext:\n            properties:\n                trigger_kind:\n                    type: integer\n                    description: How the completion was triggered.\n                    format: enum\n                trigger_character:\n                    $ref: '#/components/schemas/StringValue'\n            description: CompletionContext contains additional information about the context in which a completion request is triggered.\n        CompletionItem:\n            properties:\n                label:\n                    type: string\n                    description: The label of this completion item. By default also the text that is inserted when selecting this completion.\n                kind:\n                    type: integer\n                    description: The kind of this completion item. Based of the kind an icon is chosen by the editor. The standardized set of available values is defined in `CompletionItemKind`.\n                    format: enum\n                tags:\n                    type: array\n                    items:\n                        type: integer\n                    description: Tags for this completion item. @since 3.15.0\n                detail:\n                    $ref: '#/components/schemas/StringValue'\n                markup_content:\n                    $ref: '#/components/schemas/MarkupContent'\n                content:\n                    type: string\n                deprecated:\n                    type: boolean\n                    description: Indicates if this item is deprecated. Use tags instead if supported.\n                preselect:\n                    type: boolean\n                    description: Optional. Select this item when showing. *Note* that only one completion item can be selected and that the tool / client decides which item that is. The rule is that the *first* item of those that match best is selected.\n                sort_text:\n                    $ref: '#/components/schemas/StringValue'\n                filter_text:\n                    $ref: '#/components/schemas/StringValue'\n                insert_text:\n                    $ref: '#/components/schemas/StringValue'\n                insert_text_format:\n                    type: integer\n                    description: The format of the insert text. The format applies to both the `insertText` property and the `newText` property of a provided `textEdit`. If omitted defaults to `InsertTextFormat.PlainText`.\n                    format: enum\n                text_edit:\n                    $ref: '#/components/schemas/TextEdit'\n                additional_text_edits:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/TextEdit'\n                    description: An optional array of additional text edits that are applied when selecting this completion. Edits must not overlap (including the same insert position) with the main edit nor with themselves. Additional text edits should be used to change text unrelated to the current cursor position (for example adding an import statement at the top of the file if the completion item will insert an unqualified type).\n                commit_characters:\n                    type: array\n                    items:\n                        type: string\n                    description: An optional set of characters that when pressed while this completion is active will accept it first and then type that character. *Note* that all commit characters should have `length=1` and that superfluous characters will be ignored.\n                command:\n                    $ref: '#/components/schemas/Command'\n                data:\n                    $ref: '#/components/schemas/Any'\n            description: CompletionItem is the completion items.\n        CompletionItemResolveRequest:\n            properties:\n                completion_items:\n                    $ref: '#/components/schemas/CompletionItems'\n            description: CompletionItemResolveRequest represents a CompletionItemResolve request.\n        CompletionItemResolveResponse:\n            properties:\n                completion_items:\n                    $ref: '#/components/schemas/CompletionItems'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: CompletionItemResolveRequest represents a CompletionItemResolve response.\n        CompletionItems:\n            properties:\n                completion_items:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/CompletionItems'\n            description: CompletionItems represents a list of CompletionItem.\n        CompletionList:\n            properties:\n                is_incomplete:\n                    type: boolean\n                    description: Optional. This list it not complete. Further typing should result in recomputing this list.\n                items:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/CompletionItem'\n                    description: The completion items.\n            description: CompletionList represents a collection of [completion items](#CompletionItem) to be presented in the editor.\n        CompletionOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n                trigger_characters:\n                    type: array\n                    items:\n                        type: string\n                    description: Most tools trigger completion request automatically without explicitly requesting it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user starts to type an identifier. For example if the user types `c` in a JavaScript file code complete will automatically pop up present `console` besides others as a completion item. Characters that make up identifiers don't need to be listed here. If code complete should automatically be trigger on characters not being valid inside an identifier (for example `.` in JavaScript) list them in `triggerCharacters`.\n                all_commit_characters:\n                    type: array\n                    items:\n                        type: string\n                    description: The list of all possible characters that commit a completion. This field can be used if clients don't support individual commit characters per completion item. See `ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`. If a server provides both `allCommitCharacters` and commit characters on an individual completion item the ones on the completion item win. @since 3.2.0\n                resolve_provider:\n                    type: boolean\n                    description: Optional. The server provides support to resolve additional information for a completion item.\n            description: CompletionOptions represents a server capabilities option of completionProvider.\n        CompletionRequest:\n            properties:\n                text_document_position_params:\n                    $ref: '#/components/schemas/TextDocumentPositionParams'\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n                context:\n                    $ref: '#/components/schemas/CompletionContext'\n            description: CompletionRequest is the parameters of a `textDocument/completion` request.\n        CompletionResponse:\n            properties:\n                completion_items:\n                    $ref: '#/components/schemas/CompletionItems'\n                completion_list:\n                    $ref: '#/components/schemas/CompletionList'\n                empty:\n                    type: integer\n                    format: enum\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: CompletionResponse represents a Completion response.\n        ConfigurationItem:\n            properties:\n                scope_uri:\n                    $ref: '#/components/schemas/DocumentURI'\n                section:\n                    $ref: '#/components/schemas/StringValue'\n            description: ConfigurationItem represents a configuration section to ask for and an additional scope URI.\n        ConfigurationRequest:\n            properties:\n                items:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/ConfigurationItem'\n            description: ConfigurationRequest represents a Configuration request params. @since 3.6.0\n        ConfigurationResponse:\n            properties:\n                anys:\n                    $ref: '#/components/schemas/Anys'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: ConfigurationResponse represents a Configuration response.\n        DeclarationClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether declaration supports dynamic registration. If this is set to `true` the client supports the new `DeclarationRegistrationOptions` return value for the corresponding server capability as well.\n                link_support:\n                    type: boolean\n                    description: Optional. The client supports additional metadata in the form of declaration links.\n            description: DeclarationClientCapabilities represents a client capabilities of `textDocument/declaration` request.\n        DeclarationOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n            description: DeclarationOptions represents a server capabilities option of declarationProvider.\n        DeclarationRegistrationOptions:\n            properties:\n                declaration_options:\n                    $ref: '#/components/schemas/DeclarationOptions'\n                text_document_registration_options:\n                    $ref: '#/components/schemas/TextDocumentRegistrationOptions'\n                static_registration_options:\n                    $ref: '#/components/schemas/StaticRegistrationOptions'\n            description: SignatureHelpRegistrationOptions represents a registration option of Declaration.\n        DeclarationRequest:\n            properties:\n                text_document_position_params:\n                    $ref: '#/components/schemas/TextDocumentPositionParams'\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n            description: DeclarationRequest is the parameters of a `textDocument/declaration` request.\n        DeclarationResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: DeclarationResponse represents a Declaration response.\n        DefinitionClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether definition supports dynamic registration.\n                link_support:\n                    type: boolean\n                    description: Optional. The client supports additional metadata in the form of definition links. @since 3.14.0\n            description: DefinitionClientCapabilities represents a client capabilities of `textDocument/definition` request.\n        DefinitionOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n            description: DefinitionOptions represents a server capabilities option of definitionProvider.\n        DefinitionRequest:\n            properties:\n                text_document_position_params:\n                    $ref: '#/components/schemas/TextDocumentPositionParams'\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n            description: DefinitionRequest is the parameters of a `textDocument/definition` request.\n        DefinitionResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: DefinitionResponse represents a Definition response.\n        Diagnostic:\n            properties:\n                range:\n                    $ref: '#/components/schemas/Range'\n                severity:\n                    type: integer\n                    description: Optional. The diagnostic's severity. Can be omitted. If omitted it is up to the client to interpret diagnostics as error, warning, info or hint.\n                    format: enum\n                code:\n                    $ref: '#/components/schemas/Int32Value'\n                source:\n                    $ref: '#/components/schemas/StringValue'\n                message:\n                    type: string\n                    description: The diagnostic's message.\n                tags:\n                    type: array\n                    items:\n                        type: integer\n                    description: Optional. Additional metadata about the diagnostic. @since 3.15.0\n                related_information:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/DiagnosticRelatedInformation'\n                    description: Optional. An array of related diagnostic information, e.g. when symbol-names within a scope collide all definitions can be marked via this property.\n            description: Diagnostic represents a diagnostic, such as a compiler error or warning. Diagnostic objects are only valid in the scope of a resource.\n        DiagnosticRelatedInformation:\n            properties:\n                location:\n                    $ref: '#/components/schemas/Location'\n                message:\n                    type: string\n                    description: The message of this related diagnostic information.\n            description: DiagnosticRelatedInformation represents a related message and source code location for a diagnostic. This should be used to point to code locations that cause or are related to a diagnostics, e.g when duplicating a symbol in a scope.\n        DidChangeConfigurationRequest:\n            properties:\n                settings:\n                    $ref: '#/components/schemas/Any'\n            description: DidChangeConfigurationRequest represents a `workspace/didChangeConfiguration` notification params.\n        DidChangeTextDocumentRequest:\n            properties:\n                text_document:\n                    $ref: '#/components/schemas/VersionedTextDocumentIdentifier'\n                content_changes:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/TextDocumentContentChangeEvent'\n                    description: 'The actual content changes. The content changes describe single state changes to the document. So if there are two content changes c1 (at array index 0) and c2 (at array index 1) for a document in state S then c1 moves the document from S to S'' and c2 from S'' to S''''. So c1 is computed on the state S and c2 is computed on the state S''. To mirror the content of a document using change events use the following approach: - start with the same initial content - apply the ''textDocument/didChange'' notifications in the order you receive them. - apply the `TextDocumentContentChangeEvent`s in a single notification in the order   you receive them.'\n            description: DidChangeTextDocumentRequest is the parameters of a `textDocument/didChange` notification.\n        DidChangeWatchedFilesRequest:\n            properties:\n                changes:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/FileEvent'\n                    description: The actual file events.\n            description: DidChangeWatchedFilesRequest is the parameters of a `workspace/didChangeWatchedFiles` notification.\n        DidChangeWorkspaceFoldersRequest:\n            properties:\n                event:\n                    $ref: '#/components/schemas/WorkspaceFoldersChangeEvent'\n            description: DidChangeWorkspaceFoldersRequest represents a `workspace/didChangeWorkspaceFolders` notification params.\n        DidCloseTextDocumentRequest:\n            properties:\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n            description: DidCloseTextDocumentRequest is the parameters of a `textDocument/didClose` notification.\n        DidOpenTextDocumentRequest:\n            properties:\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentItem'\n            description: DidOpenTextDocumentRequest is the parameters of a `textDocument/didOpen` notification.\n        DidSaveTextDocumentRequest:\n            properties:\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n                text:\n                    $ref: '#/components/schemas/StringValue'\n            description: DidSaveTextDocumentRequest is the parameters of a `textDocument/didSave` notification.\n        DocumentColorClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether document color supports dynamic registration.\n            description: DocumentColorClientCapabilities represents a client capabilities of `textDocument/documentColor` request.\n        DocumentColorOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n            description: DocumentColorOptions represents a server capabilities option of documentColorProvider.\n        DocumentColorRegistrationOptions:\n            properties:\n                text_document_registration_options:\n                    $ref: '#/components/schemas/TextDocumentRegistrationOptions'\n                static_registration_options:\n                    $ref: '#/components/schemas/StaticRegistrationOptions'\n                document_color_options:\n                    $ref: '#/components/schemas/DocumentColorOptions'\n            description: DocumentColorRegistrationOptions represents a registration option of DocumentColor.\n        DocumentColorRequest:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n            description: DocumentColorRequest is the parameters of a `textDocument/documentColor` request.\n        DocumentColorResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: DocumentColorResponse represents a DocumentColor response.\n        DocumentFormattingClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether formatting supports dynamic registration.\n            description: DocumentFormattingClientCapabilities represents a client capabilities of `textDocument/formatting` request.\n        DocumentFormattingOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n            description: DocumentFormattingOptions represents a server capabilities option of documentFormattingProvider.\n        DocumentFormattingRequest:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n                options:\n                    $ref: '#/components/schemas/FormattingOptions'\n            description: DocumentFormattingRequest is the parameters of a `textDocument/formatting` request.\n        DocumentFormattingResponse:\n            properties:\n                text_edit:\n                    $ref: '#/components/schemas/TextEdit'\n                empty:\n                    type: integer\n                    format: enum\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: DocumentFormattingResponse represents a DocumentFormatting response.\n        DocumentHighlightClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether document highlight supports dynamic registration.\n            description: DocumentHighlightClientCapabilities represents a client capabilities of `textDocument/documentHighlight` request.\n        DocumentHighlightOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n            description: DocumentHighlightOptions represents a server capabilities option of documentHighlightProvider.\n        DocumentHighlightRequest:\n            properties:\n                text_document_position_params:\n                    $ref: '#/components/schemas/TextDocumentPositionParams'\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n            description: DocumentHighlightRequest is the parameters of a `textDocument/documentHighlight` request.\n        DocumentHighlightsResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: DocumentHighlightsResponse represents a DocumentHighlights response.\n        DocumentLink:\n            properties:\n                range:\n                    $ref: '#/components/schemas/Range'\n                target:\n                    $ref: '#/components/schemas/DocumentURI'\n                tooltip:\n                    $ref: '#/components/schemas/StringValue'\n                data:\n                    $ref: '#/components/schemas/Any'\n            description: DocumentLink is a document link is a range in a text document that links to an internal or external resource, like another text document or a web site.\n        DocumentLinkClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether document link supports dynamic registration.\n                tooltip_support:\n                    type: boolean\n                    description: Optional. Whether the client supports the `tooltip` property on `DocumentLink`. @since 3.15.0\n            description: DocumentLinkClientCapabilities represents a client capabilities of `textDocument/documentLink` request.\n        DocumentLinkOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n                resolve_provider:\n                    type: boolean\n                    description: Optional. Document links have a resolve provider as well.\n            description: DocumentLinkOptions represents a server capabilities option of documentLinkProvider.\n        DocumentLinkRequest:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n            description: DocumentLinkRequest is the parameters of a `textDocument/documentLink` request.\n        DocumentLinkResolveRequest:\n            properties:\n                document_link:\n                    $ref: '#/components/schemas/DocumentLink'\n            description: DocumentLinkResolveRequest represents a DocumentLinkResolveRequest request.\n        DocumentLinkResolveResponse:\n            properties:\n                document_link:\n                    $ref: '#/components/schemas/DocumentLink'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: DocumentLinkResolveResponse represents a DocumentLinkResolve response.\n        DocumentLinkResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: DocumentLinkResponse represents a DocumentLink response.\n        DocumentOnTypeFormattingClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether on type formatting supports dynamic registration.\n            description: DocumentOnTypeFormattingClientCapabilities represents a client capabilities of `textDocument/onTypeFormatting` request.\n        DocumentOnTypeFormattingOptions:\n            properties:\n                first_trigger_character:\n                    type: string\n                    description: A character on which formatting should be triggered, like `}`.\n                more_trigger_character:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/StringValue'\n                    description: More trigger characters.\n            description: DocumentOnTypeFormattingOptions represents a server capabilities option of documentOnTypeFormattingProvider.\n        DocumentOnTypeFormattingRequest:\n            properties:\n                text_document_position_params:\n                    $ref: '#/components/schemas/TextDocumentPositionParams'\n                ch:\n                    type: string\n                    description: The character that has been typed.\n                options:\n                    $ref: '#/components/schemas/FormattingOptions'\n            description: DocumentOnTypeFormattingRequest is the parameters of a `textDocument/onTypeFormatting` request.\n        DocumentOnTypeFormattingResponse:\n            properties:\n                text_edit:\n                    $ref: '#/components/schemas/TextEdit'\n                empty:\n                    type: integer\n                    format: enum\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: DocumentOnTypeFormattingResponse represents a OnTypeFormatting response.\n        DocumentRangeFormattingClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether formatting supports dynamic registration.\n            description: DocumentRangeFormattingClientCapabilities represents a client capabilities of `textDocument/rangeFormatting` request.\n        DocumentRangeFormattingOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n            description: DocumentRangeFormattingOptions represents a server capabilities option of documentRangeFormattingProvider.\n        DocumentRangeFormattingRequest:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n                range:\n                    $ref: '#/components/schemas/Range'\n                options:\n                    $ref: '#/components/schemas/FormattingOptions'\n            description: DocumentRangeFormattingRequest is the parameters of a `textDocument/rangeFormatting` request.\n        DocumentRangeFormattingResponse:\n            properties:\n                text_edit:\n                    $ref: '#/components/schemas/TextEdit'\n                empty:\n                    type: integer\n                    format: enum\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: DocumentRangeFormattingResponse represents a DocumentRangeFormatting response.\n        DocumentSymbolClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether document symbol supports dynamic registration.\n                symbol_kind:\n                    $ref: '#/components/schemas/SymbolKind'\n                hierarchical_document_symbol_support:\n                    type: boolean\n                    description: Optional. The client supports hierarchical document symbols.\n            description: DocumentSymbolClientCapabilities represents a client capabilities of `textDocument/documentSymbol` request.\n        DocumentSymbolOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n            description: DocumentSymbolOptions represents a server capabilities option of documentSymbolProvider.\n        DocumentSymbolRequest:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n            description: DocumentSymbolRequest is the parameters of a `textDocument/documentSymbol` request.\n        DocumentSymbolResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: DocumentSymbolResponse represents a DocumentSymbol response.\n        DocumentURI:\n            properties:\n                document_uri:\n                    type: string\n            description: DocumentURI are transferred as strings. The URI’s format is defined in http://tools.ietf.org/html/rfc3986.\n        Empty:\n            properties: {}\n            description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:     service Foo {       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);     } The JSON representation for `Empty` is empty JSON object `{}`.'\n        Error:\n            properties:\n                code:\n                    type: integer\n                    description: A number indicating the error type that occurred. Which may an enum value of [Code][#code].\n                    format: int32\n                message:\n                    type: string\n                    description: A string providing a short description of the error.\n                data:\n                    type: string\n                    description: A primitive or structured value that contains additional information about the error. Can be omitted.\n            description: Error represents a JSON-RPC error.\n        ExecuteCommandOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n                commands:\n                    type: array\n                    items:\n                        type: string\n                    description: The commands to be executed on the server\n        ExecuteCommandParams:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                command:\n                    type: string\n                    description: The identifier of the actual command handler.\n                arguments:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Any'\n                    description: Arguments that the command should be invoked with.\n            description: ExecuteCommandParams is the parameters of a `workspace/executeCommand` request.\n        ExecuteCommandResponse:\n            properties:\n                any:\n                    $ref: '#/components/schemas/Any'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: ExecuteCommandResponse represents a ExecuteCommand response.\n        FileEvent:\n            properties:\n                uri:\n                    $ref: '#/components/schemas/DocumentURI'\n                type:\n                    type: integer\n                    description: The change type.\n                    format: enum\n            description: FileEvent an event describing a file change.\n        FoldingRangeClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether implementation supports dynamic registration for folding range providers. If this is set to `true` the client supports the new `FoldingRangeRegistrationOptions` return value for the corresponding server capability as well.\n                range_limit:\n                    $ref: '#/components/schemas/Int32Value'\n                line_folding_only:\n                    type: boolean\n                    description: Optional. If set, the client signals that it only supports folding complete lines. If set, client will ignore specified `startCharacter` and `endCharacter` properties in a FoldingRange.\n            description: FoldingRangeClientCapabilities represents a client capabilities of `textDocument/foldingRange` request.\n        FoldingRangeOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n            description: FoldingRangeOptions represents a server capabilities option of foldingRangeProvider.\n        FoldingRangeRegistrationOptions:\n            properties:\n                text_document_registration_options:\n                    $ref: '#/components/schemas/TextDocumentRegistrationOptions'\n                folding_range_options:\n                    $ref: '#/components/schemas/FoldingRangeOptions'\n                static_registration_options:\n                    $ref: '#/components/schemas/StaticRegistrationOptions'\n            description: FoldingRangeRegistrationOptions represents a registration option of FoldingRange.\n        FoldingRangeRequest:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n            description: FoldingRangeRequest is the parameters of a `textDocument/foldingRange` request.\n        FoldingRangeResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: FoldingRangeResponse represents a FoldingRange response.\n        FormattingOptions:\n            properties:\n                tab_size:\n                    type: integer\n                    description: Size of a tab in spaces.\n                    format: int32\n                insert_spaces:\n                    type: boolean\n                    description: Prefer spaces over tabs.\n                trim_trailing_whitespace:\n                    type: boolean\n                    description: Optional. Trim trailing whitespace on a line. @since 3.15.0\n                insert_final_newline:\n                    type: boolean\n                    description: Optional. Insert a newline character at the end of the file if one does not exist. @since 3.15.0\n                trim_final_newlines:\n                    type: boolean\n                    description: Optional. Trim all newlines after the final newline at the end of the file. @since 3.15.0\n                key:\n                    $ref: '#/components/schemas/KeyEntry'\n            description: FormattingOptions value-object describing what options formatting should use.\n        Hover:\n            properties:\n                marked_string:\n                    $ref: '#/components/schemas/MarkedString'\n                marked_strings:\n                    $ref: '#/components/schemas/MarkedStrings'\n                markup_content:\n                    $ref: '#/components/schemas/MarkupContent'\n                range:\n                    $ref: '#/components/schemas/Range'\n            description: Hover is the result of a hover request.\n        HoverClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether hover supports dynamic registration.\n                content_format:\n                    type: array\n                    items:\n                        type: integer\n                    description: Client supports the follow content formats for the content property. The order describes the preferred format of the client.\n            description: HoverClientCapabilities represents a client capabilities of `textDocument/hover` request.\n        HoverOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n            description: HoverOptions represents a server capabilities option of hoverProvider.\n        HoverRequest:\n            properties:\n                text_document_position_params:\n                    $ref: '#/components/schemas/TextDocumentPositionParams'\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n            description: HoverRequest is the parameters of a `textDocument/hover` request.\n        HoverResponse:\n            properties:\n                hover:\n                    $ref: '#/components/schemas/Hover'\n                empty:\n                    type: integer\n                    format: enum\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: HoverResponse represents a Hover response.\n        ImplementationClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether implementation supports dynamic registration. If this is set to `true` the client supports the new `ImplementationRegistrationOptions` return value for the corresponding server capability as well.\n                link_support:\n                    type: boolean\n                    description: Optional. The client supports additional metadata in the form of definition links. @since 3.14.0\n            description: ImplementationClientCapabilities represents a client capabilities of `textDocument/implementation` request.\n        ImplementationOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n            description: ImplementationOptions represents a server capabilities option of implementationProvider.\n        ImplementationRegistrationOptions:\n            properties:\n                text_document_registration_options:\n                    $ref: '#/components/schemas/TextDocumentRegistrationOptions'\n                implementation_options:\n                    $ref: '#/components/schemas/ImplementationOptions'\n                static_registration_options:\n                    $ref: '#/components/schemas/StaticRegistrationOptions'\n            description: ImplementationRegistrationOptions represents a registration option of Implementation.\n        ImplementationRequest:\n            properties:\n                text_document_position_params:\n                    $ref: '#/components/schemas/TextDocumentPositionParams'\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n            description: ImplementationRequest is the parameters of a `textDocument/implementation` request.\n        ImplementationResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: ImplementationResponse represents a Implementation response.\n        InitializeRequest:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                process_id:\n                    type: integer\n                    description: Required. The process Id of the parent process that started the server. Is null if the process has not been started by another process. If the parent process is not alive then the server should exit (see exit notification) its process.\n                    format: int32\n                client_info:\n                    $ref: '#/components/schemas/ClientInfo'\n                root_path:\n                    $ref: '#/components/schemas/StringValue'\n                root_uri:\n                    $ref: '#/components/schemas/DocumentURI'\n                initialization_options:\n                    $ref: '#/components/schemas/Any'\n                capabilities:\n                    $ref: '#/components/schemas/ClientCapabilities'\n                trace:\n                    type: integer\n                    description: Optional. The initial trace setting. If omitted trace is disabled ('off').\n                    format: enum\n                workspace_folders:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/WorkspaceFolder'\n                    description: Optional. The workspace folders configured in the client when the server starts. This property is only available if the client supports workspace folders. It can be `null` if the client supports workspace folders but none are configured. @since 3.6.0 nullable\n            description: 'InitializeRequest is the sent as the first request from the client to the server. If the server receives a request or notification before the initialize request it should act as follows: - For a request the response should be an error with code: -32002. The message can be picked by the server. - Notifications should be dropped, except for the exit notification. This will allow the exit of a server without an initialize request. Until the server has responded to the initialize request with an InitializeResponse, the client must not send any additional requests or notifications to the server. In addition the server is not allowed to send any requests or notifications to the client until it has responded with an InitializeResponse, with the exception that during the initialize request the server is allowed to send the notifications window/showMessage, window/logMessage and telemetry/event as well as the window/showMessageRequest request to the client. In case the client sets up a progress token in the initialize params (e.g. property workDoneToken) the server is also allowed to use that token (and only that token) using the $/progress notification sent from the server to the client. The initialize request may only be sent once.'\n        InitializeResponse:\n            properties:\n                capabilities:\n                    $ref: '#/components/schemas/ServerCapabilities'\n                server_info:\n                    $ref: '#/components/schemas/ServerInfo'\n            description: InitializeResponse result of Initialize.\n        InitializedRequest:\n            properties: {}\n            description: InitializedRequest is the initialized notification is sent from the client to the server after the client received the result of the initialize request but before the client is sending any other request or notification to the server. The server can use the initialized notification for example to dynamically register capabilities. The initialized notification may only be sent once.\n        Int32Value:\n            properties:\n                value:\n                    type: integer\n                    description: The int32 value.\n                    format: int32\n            description: Wrapper message for `int32`. The JSON representation for `Int32Value` is JSON number.\n        Location:\n            properties:\n                uri:\n                    $ref: '#/components/schemas/URI'\n                range:\n                    $ref: '#/components/schemas/Range'\n            description: Location represents a location inside a resource, such as a line inside a text file.\n        LogMessageRequest:\n            properties:\n                type:\n                    type: integer\n                    description: The message type. See [MessageType][MessageType].\n                    format: enum\n                message:\n                    type: string\n                    description: The actual message\n            description: LogMessageRequest represents a notification params.\n        LogTraceRequest:\n            properties:\n                message:\n                    type: string\n                    description: The message to be logged.\n                verbose:\n                    $ref: '#/components/schemas/StringValue'\n            description: LogTraceRequest represents a `$/logTrace` notification params.\n        MarkedString:\n            properties:\n                text:\n                    type: string\n                code_block:\n                    $ref: '#/components/schemas/CodeBlock'\n            description: 'MarkedString can be used to render human readable text. It is either a markdown string or a code-block that provides a language and a code snippet. The language identifier is semantically equal to the optional language identifier in fenced code blocks in GitHub issues. See https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting The pair of a language and a value is an equivalent to markdown: ```${language} ${value} ``` Note that markdown strings will be sanitized - that means html will be escaped. Deprecated: use MarkupContent instead.'\n        MarkupContent:\n            properties:\n                kind:\n                    type: integer\n                    description: The type of the Markup.\n                    format: enum\n                value:\n                    type: string\n                    description: The content itself.\n            description: \"MarkupContent is a MarkupContent literal represents a string value which content can be represented in different formats. Currently plaintext and markdown are supported formats. A MarkupContent is usually used in documentation properties of result literals like CompletionItem or SignatureInformation. A `MarkupContent` literal represents a string value which content is interpreted base on its kind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds. If the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues. See https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting Here is an example how such a string can be constructed using JavaScript / TypeScript: ```markdown ```typescript let markdown: MarkdownContent = {  kind: MarkupKind.Markdown,      value: [      \\t'# Header',      \\t'Some text',      \\t'```typescript',      \\t'someCode();',      \\t'```'      ].join('\\\\n') }; ``` ``` NOTE: clients might sanitize the return markdown. A client could decide to remove HTML from the markdown to avoid script execution.\"\n        MessageActionItem:\n            properties:\n                title:\n                    type: string\n                    description: A short title like 'Retry', 'Open Log' etc.\n            description: MessageActionItem is the message action items to present.\n        ParameterInformation:\n            properties:\n                name:\n                    type: string\n                offset:\n                    $ref: '#/components/schemas/Offset'\n                markup:\n                    type: string\n                markup_content:\n                    $ref: '#/components/schemas/MarkupContent'\n            description: ParameterInformation represents a parameter of a callable-signature. A parameter can have a label and a doc-comment.\n        PartialResultParams:\n            properties:\n                partial_result_token:\n                    type: integer\n                    description: An optional token that a server can use to report partial results (e.g. streaming) to the client.\n                    format: int32\n            description: PartialResultParams a parameter literal used to pass a partial result token.\n        Position:\n            properties:\n                line:\n                    type: integer\n                    description: Line position in a document (zero-based).\n                    format: int32\n                character:\n                    type: integer\n                    description: Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`. If the character value is greater than the line length it defaults back to the line length. The offsets are based on a UTF-16 string representation.\n                    format: int32\n            description: Position in a text document expressed as zero-based line and zero-based character offset. A position is between two characters like an ‘insert’ cursor in a editor. Special values like for example -1 to denote the end of a line are not supported.\n        PrepareRenameRequest:\n            properties:\n                text_document_position_params:\n                    $ref: '#/components/schemas/TextDocumentPositionParams'\n            description: PrepareRenameRequest is the parameters of a `textDocument/prepareRename` request.\n        PrepareRenameResponse:\n            properties:\n                range:\n                    $ref: '#/components/schemas/Range'\n                result:\n                    $ref: '#/components/schemas/Result'\n                empty:\n                    type: integer\n                    format: enum\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: PrepareRenameResponse represents a PrepareRename response.\n        ProgressRequest:\n            properties:\n                token:\n                    $ref: '#/components/schemas/ProgressToken'\n                value:\n                    $ref: '#/components/schemas/Any'\n            description: ProgressRequest represents a progress notification params. @since 3.15.0\n        ProgressToken:\n            properties:\n                token:\n                    type: integer\n                    description: Required.\n                    format: int32\n            description: ProgressToken is the report progress token.\n        PublishDiagnosticsClientCapabilities:\n            properties:\n                related_information:\n                    type: boolean\n                    description: Optional. Whether the clients accepts diagnostics with related information.\n                tag_support:\n                    $ref: '#/components/schemas/TagSupport'\n                version_support:\n                    type: boolean\n                    description: Optional. Whether the client interprets the version property of the `textDocument/publishDiagnostics` notification's parameter. @since 3.15.0\n            description: PublishDiagnosticsClientCapabilities represents a client capabilities of `textDocument/publishDiagnostics` notification.\n        PublishDiagnosticsRequest:\n            properties:\n                uri:\n                    $ref: '#/components/schemas/DocumentURI'\n                version:\n                    type: integer\n                    description: Optional the version number of the document the diagnostics are published for. @since 3.15.0\n                    format: int32\n                diagnostics:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Diagnostic'\n                    description: An array of diagnostic information items.\n            description: PublishDiagnosticsRequest is the parameters of a `textDocument/publishDiagnostics` notification.\n        Range:\n            properties:\n                start:\n                    $ref: '#/components/schemas/Position'\n                end:\n                    $ref: '#/components/schemas/Position'\n            description: Range in a text document expressed as (zero-based) start and end positions. A range is comparable to a selection in an editor. Therefore the end position is exclusive. If you want to specify a range that contains a line including the line ending character(s) then use an end position denoting the start of the next line.\n        ReferenceClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether references supports dynamic registration.\n            description: ImplementationClientCapabilities represents a client capabilities of `textDocument/references` request.\n        ReferenceContext:\n            properties:\n                include_declaration:\n                    type: boolean\n                    description: Include the declaration of the current symbol.\n            description: ReferenceContext whether the references supports include the declaration\n        ReferenceOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n            description: ReferenceOptions represents a server capabilities option of referenceProvider.\n        ReferenceRequest:\n            properties:\n                text_document_position_params:\n                    $ref: '#/components/schemas/TextDocumentPositionParams'\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n                context:\n                    $ref: '#/components/schemas/ReferenceContext'\n            description: ReferenceRequest is the parameters of a `textDocument/references` request.\n        ReferenceResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: ReferenceResponse represents a Reference response.\n        RenameClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether rename supports dynamic registration.\n                prepare_support:\n                    type: boolean\n                    description: Optional. Client supports testing for validity of rename operations before execution. @since version 3.12.0\n            description: RenameClientCapabilities represents a client capabilities of `textDocument/rename` request.\n        RenameOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n                prepare_provider:\n                    type: boolean\n                    description: Optional. Renames should be checked and tested before being executed.\n            description: RenameOptions represents a server capabilities option of renameProvider.\n        RenameRequest:\n            properties:\n                text_document_position_params:\n                    $ref: '#/components/schemas/TextDocumentPositionParams'\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                new_name:\n                    type: string\n                    description: The new name of the symbol. If the given name is not valid the request must return a [ResponseError](#ResponseError) with an appropriate message set.\n            description: RenameRequest is the parameters of a `textDocument/rename` request.\n        RenameResponse:\n            properties:\n                workspace_edit:\n                    $ref: '#/components/schemas/WorkspaceEdit'\n                empty:\n                    type: integer\n                    format: enum\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: RenameResponse represents a Rename response.\n        SaveOptions:\n            properties:\n                include_text:\n                    type: boolean\n                    description: Optional. The client is supposed to include the content on save.\n            description: SaveOptions represents a server capabilities option of textDocumentSync.save.\n        SelectionRangeClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether implementatirn supports dynamic registration for selection range providers. If this is set to `true` the client supports the new `SelectionRangeRegistrationOptions` return value for the corresponding server capability as well.\n            description: FoldingRangeClientCapabilities represents a client capabilities of `textDocument/selectionRange` request.\n        SelectionRangeOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n            description: SelectionRangeOptions represents a server capabilities option of selectionRangeProvider.\n        SelectionRangeRegistrationOptions:\n            properties:\n                selection_range_options:\n                    $ref: '#/components/schemas/SelectionRangeOptions'\n                text_document_registration_options:\n                    $ref: '#/components/schemas/TextDocumentRegistrationOptions'\n                static_registration_options:\n                    $ref: '#/components/schemas/StaticRegistrationOptions'\n            description: SelectionRangeRegistrationOptions represents a registration option of SelectionRange.\n        SelectionRangeRequest:\n            properties:\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n                positions:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Position'\n                    description: The positions inside the text document.\n            description: SelectionRangeRequest is the parameters of a `textDocument/selectionRange` request.\n        SelectionRangeResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: SelectionRangeResponse represents a SelectionRangeResponse response.\n        ServerCapabilities:\n            properties:\n                text_document_sync_options:\n                    $ref: '#/components/schemas/TextDocumentSyncOptions'\n                text_document_sync_kind:\n                    type: integer\n                    format: enum\n                completion_provider:\n                    $ref: '#/components/schemas/CompletionOptions'\n                enable_hover_provider:\n                    type: boolean\n                hover_options:\n                    $ref: '#/components/schemas/HoverOptions'\n                signature_help_provider:\n                    $ref: '#/components/schemas/SignatureHelpOptions'\n                enable_declaration_provider:\n                    type: boolean\n                declaration_options:\n                    $ref: '#/components/schemas/DeclarationOptions'\n                declaration_registration_options:\n                    $ref: '#/components/schemas/DeclarationRegistrationOptions'\n                enable_definition_provider:\n                    type: boolean\n                definition_options:\n                    $ref: '#/components/schemas/DefinitionOptions'\n                enable_type_definition_provider:\n                    type: boolean\n                type_definition_options:\n                    $ref: '#/components/schemas/TypeDefinitionOptions'\n                type_definition_registration_options:\n                    $ref: '#/components/schemas/TypeDefinitionRegistrationOptions'\n                enable_implementation_provider:\n                    type: boolean\n                implementation_options:\n                    $ref: '#/components/schemas/ImplementationOptions'\n                implementation_registration_options:\n                    $ref: '#/components/schemas/ImplementationRegistrationOptions'\n                enable_references_provider:\n                    type: boolean\n                reference_options:\n                    $ref: '#/components/schemas/ReferenceOptions'\n                enable_document_highlight_provider:\n                    type: boolean\n                document_highlight_options:\n                    $ref: '#/components/schemas/DocumentHighlightOptions'\n                enable_document_symbol_provider:\n                    type: boolean\n                document_symbol_options:\n                    $ref: '#/components/schemas/DocumentSymbolOptions'\n                enable_code_action_provider:\n                    type: boolean\n                code_action_options:\n                    $ref: '#/components/schemas/CodeActionOptions'\n                codelens_provider:\n                    $ref: '#/components/schemas/CodeLensOptions'\n                document_link_provider:\n                    $ref: '#/components/schemas/DocumentLinkOptions'\n                enable_color_provider:\n                    type: boolean\n                document_color_options:\n                    $ref: '#/components/schemas/DocumentColorOptions'\n                document_color_registration_options:\n                    $ref: '#/components/schemas/DocumentColorRegistrationOptions'\n                enable_document_formatting_provider:\n                    type: boolean\n                document_formatting_options:\n                    $ref: '#/components/schemas/DocumentFormattingOptions'\n                enable_document_range_formatting_provider:\n                    type: boolean\n                document_range_formatting_options:\n                    $ref: '#/components/schemas/DocumentRangeFormattingOptions'\n                document_on_type_formatting_provider:\n                    $ref: '#/components/schemas/DocumentOnTypeFormattingOptions'\n                enable_rename_provider:\n                    type: boolean\n                rename_options:\n                    $ref: '#/components/schemas/RenameOptions'\n                enable_folding_range_provider:\n                    type: boolean\n                folding_range_options:\n                    $ref: '#/components/schemas/FoldingRangeOptions'\n                folding_range_registration_options:\n                    $ref: '#/components/schemas/FoldingRangeRegistrationOptions'\n                execute_command_provider:\n                    $ref: '#/components/schemas/ExecuteCommandOptions'\n                enable_selection_range_provider:\n                    type: boolean\n                selection_range_options:\n                    $ref: '#/components/schemas/SelectionRangeOptions'\n                selection_range_registration_options:\n                    $ref: '#/components/schemas/SelectionRangeRegistrationOptions'\n                workspace_symbol_provider:\n                    type: boolean\n                    description: The server provides workspace symbol support.\n                workspace:\n                    $ref: '#/components/schemas/Workspace'\n                experimental:\n                    $ref: '#/components/schemas/Any'\n            description: ServerCapabilities is the signal of server capabilities.\n        SetTraceRequest:\n            properties:\n                value:\n                    type: integer\n                    description: The new value that should be assigned to the trace setting.\n                    format: enum\n            description: SetTraceRequest represents a `$/setTrace` notification params.\n        ShowMessageRequestParams:\n            properties:\n                type:\n                    type: integer\n                    description: The message type. See [MessageType][MessageType].\n                    format: enum\n                message:\n                    type: string\n                    description: The actual message.\n            description: ShowMessageRequestParams represents a `window/showMessage` notification params.\n        ShowMessageRequestRequest:\n            properties:\n                type:\n                    type: integer\n                    description: The message type. See [MessageType][MessageType].\n                    format: enum\n                message:\n                    type: string\n                    description: The actual message.\n                actions:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/MessageActionItem'\n                    description: The message action items to present.\n            description: ShowMessageRequestRequest represents a `window/showMessageRequest` request params.\n        ShowMessageResponse:\n            properties:\n                message_action_item:\n                    $ref: '#/components/schemas/MessageActionItem'\n                empty:\n                    type: integer\n                    format: enum\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: ShowMessageResponse represents a ShowMessage response.\n        SignatureHelp:\n            properties:\n                signatures:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/SignatureInformation'\n                    description: One or more signatures. If no signatures are available the signature help request should return `null`.\n                active_signature:\n                    $ref: '#/components/schemas/Int32Value'\n                active_parameter:\n                    $ref: '#/components/schemas/Int32Value'\n            description: SignatureHelp represents the signature of something callable. There can be multiple signature but only one active and only one active parameter.\n        SignatureHelpClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether signature help supports dynamic registration.\n                signature_information:\n                    $ref: '#/components/schemas/SignatureInformation'\n                context_support:\n                    type: boolean\n                    description: Optional. The client supports to send additional context information for a `textDocument/signatureHelp` request. A client that opts into contextSupport will also support the `retriggerCharacters` on `SignatureHelpOptions`. @since 3.15.0\n            description: SignatureHelpClientCapabilities represents a client capabilities of `textDocument/signatureHelp` request.\n        SignatureHelpContext:\n            properties:\n                trigger_kind:\n                    type: integer\n                    description: Action that caused signature help to be triggered.\n                    format: enum\n                trigger_character:\n                    type: string\n                    description: Character that caused signature help to be triggered. This is undefined when `trigger_kind !== SignatureHelpTriggerKind.TriggerCharacter`\n                is_retrigger:\n                    type: boolean\n                    description: '`true` if signature help was already showing when it was triggered. Retriggers occur when the signature help is already active and can be caused by actions such as typing a trigger character, a cursor move, or document content changes.'\n                active_signature_help:\n                    $ref: '#/components/schemas/SignatureHelp'\n            description: Additional information about the context in which a signature help request was triggered. @since 3.15.0\n        SignatureHelpOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n                trigger_characters:\n                    type: array\n                    items:\n                        type: string\n                    description: The characters that trigger signature help automatically.\n                retrigger_characters:\n                    type: array\n                    items:\n                        type: string\n                    description: List of characters that re-trigger signature help. These trigger characters are only active when signature help is already showing. All trigger characters are also counted as re-trigger characters. @since 3.15.0\n            description: SignatureHelpOptions represents a server capabilities option of signatureHelpProvider.\n        SignatureHelpRequest:\n            properties:\n                text_document_position_params:\n                    $ref: '#/components/schemas/TextDocumentPositionParams'\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                context:\n                    $ref: '#/components/schemas/SignatureHelpContext'\n            description: SignatureHelpRequest is the parameters of a `textDocument/signatureHelp` request.\n        SignatureHelpResponse:\n            properties:\n                signature_help:\n                    $ref: '#/components/schemas/SignatureHelp'\n                empty:\n                    type: integer\n                    format: enum\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: SignatureHelpResponse represents a SignatureHelp response.\n        SignatureInformation:\n            properties:\n                label:\n                    type: string\n                    description: The label of this signature. Will be shown in the UI.\n                markup:\n                    type: string\n                markup_content:\n                    $ref: '#/components/schemas/MarkupContent'\n                parameters:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/ParameterInformation'\n                    description: The parameters of this signature.\n                active_parameter:\n                    $ref: '#/components/schemas/Int32Value'\n            description: SignatureInformation represents the signature of something callable. A signature can have a label, like a function-name, a doc-comment, and a set of parameters.\n        StaticRegistrationOptions:\n            properties:\n                id:\n                    $ref: '#/components/schemas/StringValue'\n            description: StaticRegistrationOptions can be used to register a feature in the initialize result with a given server control ID to be able to un-register the feature later on. Static registration options to be returned in the initialize request.\n        StringValue:\n            properties:\n                value:\n                    type: string\n                    description: The string value.\n            description: Wrapper message for `string`. The JSON representation for `StringValue` is JSON string.\n        TextDocumentClientCapabilities:\n            properties:\n                synchronization:\n                    $ref: '#/components/schemas/TextDocumentSyncClientCapabilities'\n                completion:\n                    $ref: '#/components/schemas/CompletionClientCapabilities'\n                hover:\n                    $ref: '#/components/schemas/HoverClientCapabilities'\n                signature_help:\n                    $ref: '#/components/schemas/SignatureHelpClientCapabilities'\n                declaration:\n                    $ref: '#/components/schemas/DeclarationClientCapabilities'\n                definition:\n                    $ref: '#/components/schemas/DefinitionClientCapabilities'\n                type_definition:\n                    $ref: '#/components/schemas/TypeDefinitionClientCapabilities'\n                implementation:\n                    $ref: '#/components/schemas/ImplementationClientCapabilities'\n                references:\n                    $ref: '#/components/schemas/ReferenceClientCapabilities'\n                document_highlight:\n                    $ref: '#/components/schemas/DocumentHighlightClientCapabilities'\n                document_symbol:\n                    $ref: '#/components/schemas/DocumentSymbolClientCapabilities'\n                code_action:\n                    $ref: '#/components/schemas/CodeActionClientCapabilities'\n                code_lens:\n                    $ref: '#/components/schemas/CodeLensClientCapabilities'\n                document_link:\n                    $ref: '#/components/schemas/DocumentLinkClientCapabilities'\n                color_provider:\n                    $ref: '#/components/schemas/DocumentColorClientCapabilities'\n                formatting:\n                    $ref: '#/components/schemas/DocumentFormattingClientCapabilities'\n                range_formatting:\n                    $ref: '#/components/schemas/DocumentRangeFormattingClientCapabilities'\n                on_type_formatting:\n                    $ref: '#/components/schemas/DocumentOnTypeFormattingClientCapabilities'\n                rename:\n                    $ref: '#/components/schemas/RenameClientCapabilities'\n                publish_diagnostics:\n                    $ref: '#/components/schemas/PublishDiagnosticsClientCapabilities'\n                folding_range:\n                    $ref: '#/components/schemas/FoldingRangeClientCapabilities'\n                selection_range:\n                    $ref: '#/components/schemas/SelectionRangeClientCapabilities'\n            description: TextDocumentClientCapabilities define capabilities the editor / tool provides on text documents.\n        TextDocumentContentChangeEvent:\n            properties:\n                content_change_event:\n                    $ref: '#/components/schemas/ContentChangeEvent'\n                text:\n                    type: string\n                    description: The new text of the whole document.\n            description: TextDocumentContentChangeEvent an event describing a change to a text document. If range and rangeLength are omitted the new text is considered to be the full content of the document.\n        TextDocumentIdentifier:\n            properties:\n                uri:\n                    $ref: '#/components/schemas/URI'\n            description: 'TextDocumentIdentifier text documents are identified using a URI. On the protocol level, URIs are passed as strings. The corresponding JSON structure looks like this:'\n        TextDocumentItem:\n            properties:\n                uri:\n                    $ref: '#/components/schemas/URI'\n                language_id:\n                    type: string\n                    description: The text document's language identifier.\n                version:\n                    type: integer\n                    description: The version number of this document (it will increase after each change, including undo/redo).\n                    format: int32\n                text:\n                    type: string\n                    description: The content of the opened text document.\n            description: TextDocumentItem an item to transfer a text document from the client to the server.\n        TextDocumentPositionParams:\n            properties:\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n                position:\n                    $ref: '#/components/schemas/Position'\n            description: TextDocumentPositionParams was TextDocumentPosition in 1.0 with inlined parameters. A parameter literal used in requests to pass a text document and a position inside that document.\n        TextDocumentRegistrationOptions:\n            properties:\n                selector:\n                    $ref: '#/components/schemas/DocumentSelector'\n                empty:\n                    type: integer\n                    format: enum\n            description: TextDocumentRegistrationOptions options to dynamically register for requests for a set of text documents.\n        TextDocumentSyncClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether text document synchronization supports dynamic registration.\n                will_save:\n                    type: boolean\n                    description: Optional. The client supports sending will save notifications.\n                will_save_wait_until:\n                    type: boolean\n                    description: Optional. The client supports sending a will save request and waits for a response providing text edits which will be applied to the document before it is saved.\n                did_save:\n                    type: boolean\n                    description: Optional. The client supports did save notifications.\n            description: TextDocumentSyncClientCapabilities represents a client capabilities of `textDocument/didXXX` notification.\n        TextDocumentSyncOptions:\n            properties:\n                open_close:\n                    type: boolean\n                    description: Optional. Open and close notifications are sent to the server. If omitted open close notification should not be sent.\n                change:\n                    type: integer\n                    description: Optional. Change notifications are sent to the server. See [TextDocumentSyncKind][TextDocumentSyncKind]. If omitted it defaults to TextDocumentSyncKind.None.\n                    format: enum\n                will_save:\n                    type: boolean\n                    description: Optional. If present will save notifications are sent to the server. If omitted the notification should not be sent.\n                will_save_wait_until:\n                    type: boolean\n                    description: Optional. If present will save wait until requests are sent to the server. If omitted the request should not be sent.\n                enable:\n                    type: boolean\n                save_options:\n                    $ref: '#/components/schemas/SaveOptions'\n            description: TextDocumentSyncOptions represents a server capabilities option of textDocumentSync.\n        TextEdit:\n            properties:\n                range:\n                    $ref: '#/components/schemas/Range'\n                new_text:\n                    type: string\n                    description: The string to be inserted. For delete operations use an empty string.\n            description: TextEdit is a textual edit applicable to a text document.\n        TextEdits:\n            properties:\n                text_edit:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/TextEdit'\n            description: TextEdits represents a list of TextEdit.\n        TypeDefinitionClientCapabilities:\n            properties:\n                dynamic_registration:\n                    type: boolean\n                    description: Optional. Whether implementation supports dynamic registration. If this is set to `true` the client supports the new `TypeDefinitionRegistrationOptions` return value for the corresponding server capability as well.\n                link_support:\n                    type: boolean\n                    description: Optional. The client supports additional metadata in the form of definition links. @since 3.14.0\n            description: TypeDefinitionClientCapabilities represents a client capabilities of `textDocument/typeDefinition` request.\n        TypeDefinitionOptions:\n            properties:\n                work_done_progress_options:\n                    $ref: '#/components/schemas/WorkDoneProgressOptions'\n            description: TypeDefinitionOptions represents a server capabilities option of typeDefinitionProvider.\n        TypeDefinitionRegistrationOptions:\n            properties:\n                text_document_registration_options:\n                    $ref: '#/components/schemas/TextDocumentRegistrationOptions'\n                type_definition_options:\n                    $ref: '#/components/schemas/TypeDefinitionOptions'\n                static_registration_options:\n                    $ref: '#/components/schemas/StaticRegistrationOptions'\n            description: TypeDefinitionRegistrationOptions represents a registration option of TypeDefinition.\n        TypeDefinitionRequest:\n            properties:\n                text_document_position_params:\n                    $ref: '#/components/schemas/TextDocumentPositionParams'\n                work_done_progress_params:\n                    $ref: '#/components/schemas/WorkDoneProgressParams'\n                partial_result_params:\n                    $ref: '#/components/schemas/PartialResultParams'\n            description: TypeDefinitionRequest is the parameters of a `textDocument/typeDefinition` request.\n        TypeDefinitionResponse:\n            properties:\n                result:\n                    $ref: '#/components/schemas/Result'\n                partial_result:\n                    $ref: '#/components/schemas/PartialResult'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: TypeDefinitionResponse represents a TypeDefinition response.\n        URI:\n            properties:\n                uri:\n                    type: string\n            description: URI Uniform Resource Identifier (URI) https://tools.ietf.org/html/rfc3986. This class is a simple parser which creates the basic component parts (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation and encoding.        foo://example.com:8042/over/there?name=ferret#nose        \\_/   \\______________/\\_________/ \\_________/ \\__/         |           |            |            |        |      scheme     authority       path        query   fragment         |   _____________________|__        / \\ /                        \\        urn:example:animal:ferret:nose\n        VersionedTextDocumentIdentifier:\n            properties:\n                text_document_identifier:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n                version:\n                    type: boolean\n                    description: Optional. The version number of this document. If a versioned text document identifier is sent from the server to the client and the file is not open in the editor (the server has not received an open notification before) the server can send `null` to indicate that the version is known and the content on disk is the master (as speced with document content ownership). The version number of a document will increase after each change, including undo/redo. The number doesn't need to be consecutive.\n        WillSaveTextDocumentRequest:\n            properties:\n                text_document:\n                    $ref: '#/components/schemas/TextDocumentIdentifier'\n                reason:\n                    type: integer\n                    description: The [TextDocumentSaveReason][TextDocumentSaveReason].\n                    format: enum\n            description: WillSaveTextDocumentRequest is the parameters send in a will save `textDocument/willSave` notification.\n        WillSaveTextDocumentResponse:\n            properties:\n                text_edits:\n                    $ref: '#/components/schemas/TextEdits'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: WillSaveTextDocumentResponse represents a WillSaveTextDocument response.\n        WorkDoneProgressCancelRequest:\n            properties:\n                token:\n                    $ref: '#/components/schemas/ProgressToken'\n            description: WorkDoneProgressCancelRequest represents a canceling a work done progress notification params.\n        WorkDoneProgressCreateRequest:\n            properties:\n                token:\n                    $ref: '#/components/schemas/ProgressToken'\n            description: WorkDoneProgressCreateRequest represents a Creating Work Done Progress request params.\n        WorkDoneProgressOptions:\n            properties:\n                work_done_progress:\n                    type: boolean\n                    description: Optional.\n            description: WorkDoneProgressOptions options to signal work done progress support in server capabilities.\n        WorkDoneProgressParams:\n            properties:\n                work_done_token:\n                    $ref: '#/components/schemas/ProgressToken'\n            description: WorkDoneProgressParams a parameter literal used to pass a work done progress token.\n        WorkspaceEdit:\n            properties:\n                changes:\n                    $ref: '#/components/schemas/ChangesEntry'\n                text_document_edits:\n                    $ref: '#/components/schemas/TextDocumentEdits'\n                create_files:\n                    $ref: '#/components/schemas/CreateFiles'\n                rename_files:\n                    $ref: '#/components/schemas/RenameFiles'\n                delete_files:\n                    $ref: '#/components/schemas/DeleteFiles'\n            description: WorkspaceEdit a workspace edit represents changes to many resources managed in the workspace. The edit should either provide changes or documentChanges. If the client can handle versioned document edits and if documentChanges are present, the latter are preferred over changes.\n        WorkspaceFolder:\n            properties:\n                uri:\n                    $ref: '#/components/schemas/DocumentURI'\n                name:\n                    type: string\n                    description: The name of the workspace folder. Used to refer to this workspace folder in the user interface.\n            description: WorkspaceFolder represents a workspace root folder.\n        WorkspaceFoldersChangeEvent:\n            properties:\n                added:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/WorkspaceFolder'\n                    description: The array of added workspace folders.\n                removed:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/WorkspaceFolder'\n                    description: The array of the removed workspace folders.\n            description: WorkspaceFoldersChangeEvent is the workspace folder change event.\n        WorkspaceFoldersResponse:\n            properties:\n                workspace_folders:\n                    $ref: '#/components/schemas/WorkspaceFolders'\n                empty:\n                    type: integer\n                    format: enum\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: WorkspaceFoldersResponse represents a WorkspaceFolders response.\n        WorkspaceSymbolsResponse:\n            properties:\n                symbol_informations:\n                    $ref: '#/components/schemas/SymbolInformations'\n                error:\n                    $ref: '#/components/schemas/Error'\n            description: WorkspaceSymbolsResponse represents a WorkspaceSymbols response.\n"
		}
	},
	"Error": "parse: parse spec: paths: /workspace/workspaceFolders:workspaceFolders: post: operation \"LanguageServerProtocol_WorkspaceFolders\": responses: 200: content: \"application/json\": schema: parse schema: resolve \"#/components/schemas/WorkspaceFoldersResponse\": parse schema: property \"workspace_folders\": parse schema: resolve \"#/components/schemas/WorkspaceFolders\": find schema: resolve \"#/components/schemas/WorkspaceFolders\": can't find value for \"components/schemas/WorkspaceFolders\""
}