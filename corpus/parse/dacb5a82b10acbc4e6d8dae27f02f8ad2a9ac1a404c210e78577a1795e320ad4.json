{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/TabbycatDebate/tabbycat"
		},
		"file": {
			"name": "api-schema.yml",
			"size": 0,
			"path": "docs/api-schema.yml",
			"byteSize": 118971,
			"content": "openapi: 3.0.0\ninfo:\n  title: Tabbycat API\n  description: Parliamentary debate tabulation software\n  termsOfService: 'https://tabbycat.readthedocs.io/en/stable/'\n  contact:\n    email: ebeaule@tabbycat-debate.org\n    name: Étienne Beaulé\n  license:\n    name: Tabbycat\n    url: 'https://tabbycat.readthedocs.io/en/stable/about/licence.html'\n  version: 1.2.0\nsecurity:\n  - Token: []\npaths:\n  /:\n    get:\n      operationId: _list\n      description: API Root\n      security: []\n      responses:\n        '200':\n          description: ''\n        '401':\n          description: The API has been disabled on this site.\n    parameters: []\n  /v1:\n    get:\n      operationId: v1_list\n      description: API Version 1 Root\n      security: []\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _links:\n                    title: links\n                    type: object\n                    readOnly: true\n                    properties:\n                      v1:\n                        title: v1\n                        type: string\n                        format: uri\n                        readOnly: true\n                  version:\n                    title: Tabbycat version\n                    type: string\n                    readOnly: true\n      tags:\n        - v1\n    parameters: []\n  /v1/institutions:\n    get:\n      operationId: v1_institutions_list\n      description: List all institutions\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n        - name: region\n          in: query\n          description: Name of the region to include.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Institution'\n      tags:\n        - v1\n        - institutions\n    post:\n      operationId: v1_institutions_create\n      description: Create an institution\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Institution'\n      tags:\n        - v1\n        - institutions\n      requestBody:\n        $ref: '#/components/requestBodies/Institution'\n    parameters: []\n  '/v1/institutions/{id}':\n    get:\n      operationId: v1_institutions_read\n      description: Retrieve an institution\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Institution'\n      tags:\n        - v1\n        - institutions\n    post:\n      operationId: v1_institutions_update\n      description: Modify an institution\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Institution'\n      tags:\n        - v1\n        - institutions\n      requestBody:\n        $ref: '#/components/requestBodies/Institution'\n    delete:\n      operationId: v1_institutions_delete\n      description: Delete an institution\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - institutions\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n  /v1/tournaments:\n    get:\n      operationId: v1_tournaments_list\n      description: List all tournaments\n      security: []\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tournament'\n      tags:\n        - v1\n        - tournaments\n    post:\n      operationId: v1_tournaments_create\n      description: Create a tournament\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tournament'\n      tags:\n        - v1\n        - tournaments\n      requestBody:\n        $ref: '#/components/requestBodies/Tournament'\n    parameters: []\n  '/v1/tournaments/{tournament_slug}':\n    get:\n      operationId: v1_tournaments_read\n      description: Retrieve a tournament\n      security: []\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tournament'\n      tags:\n        - v1\n        - tournaments\n    post:\n      operationId: v1_tournaments_update\n      description: Modify a tournament\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tournament'\n      tags:\n        - v1\n        - tournaments\n      requestBody:\n        $ref: '#/components/requestBodies/Tournament'\n    delete:\n      operationId: v1_tournaments_delete\n      description: Delete a tournament\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - tournaments\n    patch:\n      operationId: v1_tournaments_partial_update\n      description: Update a tournament\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tournament'\n      tags:\n        - v1\n        - tournaments\n      requestBody:\n        $ref: '#/components/requestBodies/Tournament'\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/adjudicators':\n    get:\n      operationId: v1_tournaments_adjudicators_list\n      description: List adjudicators of a tournament\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n        - name: break\n          in: query\n          description: \u003e-\n            If present, only show breaking adjudicators, if permissions allow.\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Adjudicator'\n      tags:\n        - v1\n        - adjudicators\n    post:\n      operationId: v1_tournaments_adjudicators_create\n      description: Create an adjudicator for the tournament\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Adjudicator'\n      tags:\n        - v1\n        - adjudicators\n      requestBody:\n        $ref: '#/components/requestBodies/Adjudicator'\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/adjudicators/{id}':\n    get:\n      operationId: v1_tournaments_adjudicators_read\n      description: Retrieve an adjudicator\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Adjudicator'\n      tags:\n        - v1\n        - adjudicators\n    post:\n      operationId: v1_tournaments_adjudicators_update\n      description: Modify an adjudicator\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Adjudicator'\n      tags:\n        - v1\n        - adjudicators\n      requestBody:\n        $ref: '#/components/requestBodies/Adjudicator'\n    delete:\n      operationId: v1_tournaments_adjudicators_delete\n      description: Delete an adjudicator\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - adjudicators\n    patch:\n      operationId: v1_tournaments_adjudicators_partial_update\n      description: Update an adjudicator\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Adjudicator'\n      tags:\n        - v1\n        - adjudicators\n      requestBody:\n        $ref: '#/components/requestBodies/Adjudicator'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/adjudicators/{id}/checkin':\n    get:\n      operationId: v1_tournaments_adjudicators_checkin_list\n      description: Check if adjudicator is currently checked in\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checkin'\n        '404':\n          description: 'No identifier. Use POST to generate.'\n      tags:\n        - v1\n        - adjudicators\n        - checkins\n    post:\n      operationId: v1_tournaments_adjudicators_checkin_create\n      description: Create an check-in identifier for the adjudicator\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checkin'\n      tags:\n        - v1\n        - adjudicators\n        - checkins\n    put:\n      operationId: v1_tournaments_adjudicators_checkin_update\n      description: Check in the adjudicator\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checkin'\n        '404':\n          description: 'No identifier. Use POST to generate.'\n      tags:\n        - v1\n        - adjudicators\n        - checkins\n    patch:\n      operationId: v1_tournaments_adjudicators_checkin_partial_update\n      description: Toggle the adjudicator''s check-in status\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checkin'\n        '404':\n          description: 'No identifier. Use POST to generate.'\n      tags:\n        - v1\n        - adjudicators\n        - checkins\n    delete:\n      operationId: v1_tournaments_adjudicators_checkin_delete\n      description: Check out the adjudicator\n      responses:\n        '204':\n          description: ''\n        '404':\n          description: 'No identifier. Use POST to generate.'\n      tags:\n        - v1\n        - adjudicators\n        - checkins\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/break-categories':\n    get:\n      operationId: v1_tournaments_break-categories_list\n      description: List the tournament''s break categories.\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BreakCategory'\n      tags:\n        - v1\n        - break-categories\n    post:\n      operationId: v1_tournaments_break-categories_create\n      description: Create a break category\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BreakCategory'\n      tags:\n        - v1\n        - break-categories\n      requestBody:\n        $ref: '#/components/requestBodies/BreakCategory'\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/break-categories/{id}':\n    get:\n      operationId: v1_tournaments_break-categories_read\n      description: Retrieve a break category\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BreakCategory'\n      tags:\n        - v1\n        - break-categories\n    post:\n      operationId: v1_tournaments_break-categories_update\n      description: Modify a break category\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BreakCategory'\n      tags:\n        - v1\n        - break-categories\n      requestBody:\n        $ref: '#/components/requestBodies/BreakCategory'\n    delete:\n      operationId: v1_tournaments_break-categories_delete\n      description: Delete a break category\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - break-categories\n    patch:\n      operationId: v1_tournaments_break-categories_partial_update\n      description: Update a break category\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BreakCategory'\n      tags:\n        - v1\n        - break-categories\n      requestBody:\n        $ref: '#/components/requestBodies/BreakCategory'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/break-categories/{id}/eligibility':\n    get:\n      operationId: v1_tournaments_break-categories_eligibility_read\n      description: Get team eligibility for all the break category\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BreakEligibility'\n      tags:\n        - v1\n        - break-categories\n        - eligibility\n    put:\n      operationId: v1_tournaments_break-categories_eligibility_update\n      description: Set the teams eligible for the break category\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BreakEligibility'\n      tags:\n        - v1\n        - break-categories\n        - eligibility\n      requestBody:\n        $ref: '#/components/requestBodies/BreakEligibility'\n    patch:\n      operationId: v1_tournaments_break-categories_eligibility_partial_update\n      description: Add eligible teams to the break category\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BreakEligibility'\n      tags:\n        - v1\n        - break-categories\n        - eligibility\n      requestBody:\n        $ref: '#/components/requestBodies/BreakEligibility'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/break-categories/{id}/break':\n    get:\n      operationId: v1_tournaments_break-categories_break_read\n      description: Get team breaks for the break category\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BreakingTeam'\n      tags:\n        - v1\n        - break-categories\n    post:\n      operationId: v1_tournaments_break-categories_break_create\n      description: Create a break for a break category\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BreakingTeam'\n      tags:\n        - v1\n        - break-categories\n    delete:\n      operationId: v1_tournaments_break-categories_break_delete\n      description: Delete a break category''s break\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - break-categories\n    patch:\n      operationId: v1_tournaments_break-categories_break_partial_update\n      description: Update remark on team and regenerate break\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BreakingTeam'\n      tags:\n        - v1\n        - break-categories\n      requestBody:\n        $ref: '#/components/requestBodies/PartialBreakingTeam'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/feedback':\n    get:\n      operationId: v1_tournaments_feedback_list\n      description: \u003e-\n        List all adjudicator feedback for a tournament.\n        Warning: Expensive operation.\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n        - name: source_type\n          in: query\n          description: The type of participant submitter of the feedback\n          required: false\n          schema:\n            type: string\n            enum:\n              - adjudicator\n              - team\n        - name: source\n          in: query\n          description: \u003e-\n            The ID of the participant submitting feedback; must be used in\n            conjunction with `source_type`\n          required: false\n          schema:\n            type: integer\n        - name: target\n          in: query\n          description: The ID of the adjudicator receiving feedback\n          required: false\n          schema:\n            type: integer\n        - name: round\n          in: query\n          description: The sequence of the round of the submitted feedback.\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Feedback'\n      tags:\n        - v1\n        - feedback\n    post:\n      operationId: v1_tournaments_feedback_create\n      description: Submit feedback on an adjudicator\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feedback'\n      tags:\n        - v1\n        - feedback\n      requestBody:\n        $ref: '#/components/requestBodies/Feedback'\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/feedback-questions':\n    get:\n      operationId: v1_tournaments_feedback-questions_list\n      description: List questions posed in adjudicator feedback\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n        - name: from_adj\n          in: query\n          description: \u003e-\n            Filter to the questions posed to adjudicators. (Determined by\n            presence of parameter)\n          required: false\n          schema:\n            type: boolean\n        - name: from_team\n          in: query\n          description: \u003e-\n            Filter by whether the question is posed to teams. (Determined by\n            presence of parameter)\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FeedbackQuestion'\n      tags:\n        - v1\n        - questions\n    post:\n      operationId: v1_tournaments_feedback-questions_create\n      description: Create a question for adjudicator feedback\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeedbackQuestion'\n      tags:\n        - v1\n        - questions\n      requestBody:\n        $ref: '#/components/requestBodies/FeedbackQuestion'\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/feedback-questions/{id}':\n    get:\n      operationId: v1_tournaments_feedback-questions_read\n      description: Retrieve a question for adjudicator feedback\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeedbackQuestion'\n      tags:\n        - v1\n        - questions\n    post:\n      operationId: v1_tournaments_feedback-questions_update\n      description: Modify a question for adjuicator feedback\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeedbackQuestion'\n      tags:\n        - v1\n        - questions\n      requestBody:\n        $ref: '#/components/requestBodies/FeedbackQuestion'\n    delete:\n      operationId: v1_tournaments_feedback-questions_delete\n      description: Delete an adjudicator feedback question including answers\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - questions\n    patch:\n      operationId: v1_tournaments_feedback-questions_partial_update\n      description: Update a feedback question\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeedbackQuestion'\n      tags:\n        - v1\n        - questions\n      requestBody:\n        $ref: '#/components/requestBodies/FeedbackQuestion'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/feedback/{id}':\n    get:\n      operationId: v1_tournaments_feedback_read\n      description: Retrieve submitted feedback\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feedback'\n      tags:\n        - v1\n        - feedback\n    post:\n      operationId: v1_tournaments_feedback_update\n      description: \u003e-\n        Modify feedback. Only the confirmed and ignored fields can be updated;\n        all other fields are ignored.\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feedback'\n      tags:\n        - v1\n        - feedback\n      requestBody:\n        $ref: '#/components/requestBodies/Feedback'\n    delete:\n      operationId: v1_tournaments_feedback_delete\n      description: Delete feedback\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - feedback\n    patch:\n      operationId: v1_tournaments_feedback_partial_update\n      description: Update feedback\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feedback'\n      tags:\n        - v1\n        - feedback\n      requestBody:\n        $ref: '#/components/requestBodies/Feedback'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/institutions':\n    get:\n      operationId: v1_tournaments_institutions_list\n      description: \u003e-\n        List all institutions with an affiliated participant in the tournament\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n        - name: region\n          in: query\n          description: Name of the region to include.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TournamentInstitution'\n      tags:\n        - v1\n        - institutions\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/motions':\n    get:\n      operationId: v1_tournaments_motions_list\n      description: List motions of a tournament\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Motion'\n      tags:\n        - v1\n        - motions\n    post:\n      operationId: v1_tournaments_motions_create\n      description: Create a motion\n      responses:\n        '201':\n          description: ''\n      tags:\n        - v1\n        - motions\n      requestBody:\n        $ref: '#/components/requestBodies/Motion'\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/motions/{id}':\n    get:\n      operationId: v1_tournaments_motions_read\n      description: Retrieve a motion\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Motion'\n      tags:\n        - v1\n        - motions\n    post:\n      operationId: v1_tournaments_motions_update\n      description: Modify a motion\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Motion'\n      tags:\n        - v1\n        - motions\n      requestBody:\n        $ref: '#/components/requestBodies/Motion'\n    delete:\n      operationId: v1_tournaments_motions_delete\n      description: Delete a motion\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - motions\n    patch:\n      operationId: v1_tournaments_motions_partial_update\n      description: Update a motion\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Motion'\n      tags:\n        - v1\n        - motions\n      requestBody:\n        $ref: '#/components/requestBodies/Motion'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/preferences':\n    get:\n      operationId: v1_tournaments_preferences_list\n      description: List tournament preferences\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Preference'\n      tags:\n        - v1\n        - preferences\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/preferences/bulk':\n    post:\n      operationId: v1_tournaments_preferences_bulk\n      summary: Update multiple preferences at once\n      description: |-\n        this is a long method because we ensure everything is valid\n        before actually persisting the changes\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Preference'\n      tags:\n        - v1\n        - preferences\n      requestBody:\n        $ref: '#/components/requestBodies/Preference'\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/preferences/{id}':\n    get:\n      operationId: v1_tournaments_preferences_read\n      description: Retrieve specific tournament preference\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Preference'\n      tags:\n        - v1\n        - preferences\n    put:\n      operationId: v1_tournaments_preferences_update\n      description: Update a tournament preference\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Preference'\n      tags:\n        - v1\n        - preferences\n      requestBody:\n        $ref: '#/components/requestBodies/Preference'\n    patch:\n      operationId: v1_tournaments_preferences_partial_update\n      description: Partially update tournament preference\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Preference'\n      tags:\n        - v1\n        - preferences\n      requestBody:\n        $ref: '#/components/requestBodies/Preference'\n    parameters:\n      - name: id\n        in: path\n        description: \u003e-\n          A unique integer value identifying this tournament preference.\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/rounds':\n    get:\n      operationId: v1_tournaments_rounds_list\n      description: List rounds of the tournament\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Round'\n      tags:\n        - v1\n        - rounds\n    post:\n      operationId: v1_tournaments_rounds_create\n      description: Create round in tournament\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Round'\n      tags:\n        - v1\n        - rounds\n      requestBody:\n        $ref: '#/components/requestBodies/Round'\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/rounds/{round_seq}':\n    get:\n      operationId: v1_tournaments_rounds_read\n      description: Retrieve a round\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Round'\n      tags:\n        - v1\n        - rounds\n    post:\n      operationId: v1_tournaments_rounds_update\n      description: \u003e-\n        Modify a round. Motions are modified by sequence, so their text fields\n        can be modified. To move motions, placeholder sequences are needed\n        through Motion endpoints, as well as for deleting motions. Motions can\n        be appended through this method. An empty field has no effect.\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Round'\n      tags:\n        - v1\n        - rounds\n      requestBody:\n        $ref: '#/components/requestBodies/Round'\n    delete:\n      operationId: v1_tournaments_rounds_delete\n      description: Delete a round\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - rounds\n    patch:\n      operationId: v1_tournaments_rounds_partial_update\n      description: Update a round\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Round'\n      tags:\n        - v1\n        - rounds\n      requestBody:\n        $ref: '#/components/requestBodies/Round'\n    parameters:\n      - name: round_seq\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/rounds/{round_seq}/pairings':\n    get:\n      operationId: v1_tournaments_rounds_pairings_list\n      description: List debates in the round\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Debate'\n      tags:\n        - v1\n        - debates\n    post:\n      operationId: v1_tournaments_rounds_pairings_create\n      description: Create a debate between teams with adjudicators in the round\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Debate'\n      tags:\n        - v1\n        - debates\n      requestBody:\n        $ref: '#/components/requestBodies/Debate'\n    delete:\n      operationId : v1_tournaments_rounds_pairings_delete_all\n      description: Delete all pairings of the round\n      responses:\n        '204':\n          description: 'All pairings have been deleted'\n      tags:\n        - v1\n        - debates\n    parameters:\n      - name: round_seq\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/rounds/{round_seq}/pairings/{debate_pk}':\n    get:\n      operationId: v1_tournaments_rounds_pairings_read\n      description: Retrieve a debate in the round\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Debate'\n      tags:\n        - v1\n        - debates\n    post:\n      operationId: v1_tournaments_rounds_pairings_update\n      description: \u003e-\n        Modify a pairing in the round. Teams can be modified, but cannot be\n        moved between sides. This method thus cannot be used when confirming\n        sides. An empty field has no effect.\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Debate'\n      tags:\n        - v1\n        - debates\n      requestBody:\n        $ref: '#/components/requestBodies/Debate'\n    delete:\n      operationId: v1_tournaments_rounds_pairings_delete\n      description: Delete a matchup including panel\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - debates\n    patch:\n      operationId: v1_tournaments_rounds_pairings_partial_update\n      description: Update a pairing\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Debate'\n      tags:\n        - v1\n        - debates\n      requestBody:\n        $ref: '#/components/requestBodies/Debate'\n    parameters:\n      - name: debate_pk\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: round_seq\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/rounds/{round_seq}/pairings/{debate_pk}/ballots':\n    get:\n      operationId: v1_tournaments_rounds_pairings_ballots_list\n      description: Retrieve ballots for a debate\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DebateResult'\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n        - name: confirmed\n          in: query\n          description: Whether to include unconfirmed ballots\n          required: false\n          schema:\n            type: boolean\n      tags:\n        - v1\n        - results\n    post:\n      operationId: v1_tournaments_rounds_pairings_ballots_create\n      description: Create a result for a debate\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DebateResult'\n      tags:\n        - v1\n        - results\n      requestBody:\n        $ref: '#/components/requestBodies/DebateResult'\n    parameters:\n      - name: debate_pk\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: round_seq\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/rounds/{round_seq}/pairings/{debate_pk}/ballots/{id}':\n    get:\n      operationId: v1_tournaments_rounds_pairings_ballots_read\n      description: Retrieve a ballot of a debate\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DebateResult'\n      tags:\n        - v1\n        - results\n    post:\n      operationId: v1_tournaments_rounds_pairings_ballots_update\n      description: Modify a debate ballot. Cannot re-edit scores.\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DebateResult'\n      tags:\n        - v1\n        - results\n      requestBody:\n        $ref: '#/components/requestBodies/DebateResult'\n    delete:\n      operationId: v1_tournaments_rounds_pairings_ballots_delete\n      description: Delete a ballot of the debate\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - results\n    patch:\n      operationId: v1_tournaments_rounds_pairings_ballots_partial_update\n      description: Update a ballot\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DebateResult'\n      tags:\n        - v1\n        - results\n      requestBody:\n        $ref: '#/components/requestBodies/DebateResult'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: debate_pk\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: round_seq\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/rounds/{round_seq}/availabilities':\n    get:\n      operationId: v1_tournaments_rounds_availabilities_list\n      description: List all participants marked as available for the round\n      parameters:\n        - name: adjudicators\n          in: query\n          description: Whether to list available adjudicators\n          required: false\n          schema:\n            type: boolean\n        - name: teams\n          in: query\n          description: Whether to list available teams\n          required: false\n          schema:\n            type: boolean\n        - name: venues\n          in: query\n          description: Whether to list available rooms\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  title: Participant\n                  type: string\n                  format: uri\n      tags:\n        - v1\n        - availabilities\n    post:\n      operationId: v1_tournaments_rounds_availabilities_post\n      description: Marks participants as unavailable for a round\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  title: Participant\n                  type: string\n                  format: uri\n      tags:\n        - v1\n        - availabilities\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                title: Participant\n                type: string\n                format: uri\n    put:\n      operationId: v1_tournaments_rounds_availabilities_put\n      description: Marks participants as available for a round\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  title: Participant\n                  type: string\n                  format: uri\n      tags:\n        - v1\n        - availabilities\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                title: Participant\n                type: string\n                format: uri\n    patch:\n      operationId: v1_tournaments_rounds_availabilities_patch\n      description: Toggles participants' availabilities for a round\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  title: Participant\n                  type: string\n                  format: uri\n      tags:\n        - v1\n        - availabilities\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                title: Participant\n                type: string\n                format: uri\n    delete:\n      operationId: v1_tournaments_rounds_availabilities_delete\n      description: \u003e-\n        Marks all participants of specified type as unavailable for the round\n      parameters:\n        - name: adjudicators\n          in: query\n          description: Whether to unmark available adjudicators\n          required: false\n          schema:\n            type: boolean\n        - name: teams\n          in: query\n          description: Whether to unmark available teams\n          required: false\n          schema:\n            type: boolean\n        - name: venues\n          in: query\n          description: Whether to unmark available rooms\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - availabilities\n    parameters:\n      - name: round_seq\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/speaker-categories':\n    get:\n      operationId: v1_tournaments_speaker-categories_list\n      description: List all speaker categories of the tournament\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SpeakerCategory'\n      tags:\n        - v1\n        - speaker-categories\n    post:\n      operationId: v1_tournaments_speaker-categories_create\n      description: Create a speaker category\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpeakerCategory'\n      tags:\n        - v1\n        - speaker-categories\n      requestBody:\n        $ref: '#/components/requestBodies/SpeakerCategory'\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/speaker-categories/{id}':\n    get:\n      operationId: v1_tournaments_speaker-categories_read\n      description: Retrieve a speaker category\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpeakerCategory'\n      tags:\n        - v1\n        - speaker-categories\n    post:\n      operationId: v1_tournaments_speaker-categories_update\n      description: Modify a speaker category\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpeakerCategory'\n      tags:\n        - v1\n        - speaker-categories\n      requestBody:\n        $ref: '#/components/requestBodies/SpeakerCategory'\n    delete:\n      operationId: v1_tournaments_speaker-categories_delete\n      description: Delete a speaker category with eligibilities\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - speaker-categories\n    patch:\n      operationId: v1_tournaments_speaker-categories_partial_update\n      description: Update a speaker category\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpeakerCategory'\n      tags:\n        - v1\n        - speaker-categories\n      requestBody:\n        $ref: '#/components/requestBodies/SpeakerCategory'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/speaker-categories/{id}/eligibility':\n    get:\n      operationId: v1_tournaments_speaker-categories_eligibility_read\n      description: List speakers included in the category\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpeakerEligibility'\n      tags:\n        - v1\n        - speaker-categories\n        - eligibility\n    put:\n      operationId: v1_tournaments_speaker-categories_eligibility_update\n      description: Set eligible speakers of the category\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpeakerEligibility'\n      tags:\n        - v1\n        - speaker-categories\n        - eligibility\n      requestBody:\n        $ref: '#/components/requestBodies/SpeakerEligibility'\n    patch:\n      operationId: v1_tournaments_speaker-categories_eligibility_partial_update\n      description: Add speakers to the category\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpeakerEligibility'\n      tags:\n        - v1\n        - speaker-categories\n        - eligibility\n      requestBody:\n        $ref: '#/components/requestBodies/SpeakerEligibility'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/speakers':\n    get:\n      operationId: v1_tournaments_speakers_list\n      description: List speakers of tournament teams\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Speaker'\n      tags:\n        - v1\n        - speakers\n    post:\n      operationId: v1_tournaments_speakers_create\n      description: Create new speaker to team\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Speaker'\n      tags:\n        - v1\n        - speakers\n      requestBody:\n        $ref: '#/components/requestBodies/Speaker'\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/speakers/standings':\n    get:\n      operationId: v1_tournaments_speakers_standings_list\n      description: Get speaker standings in the tournament\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n        - name: category\n          in: query\n          description: Restrict the standings to a speaker category\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpeakerStandings'\n      tags:\n        - v1\n        - speakers\n        - standings\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/speakers/{id}':\n    get:\n      operationId: v1_tournaments_speakers_read\n      description: Retrieve a speaker\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Speaker'\n      tags:\n        - v1\n        - speakers\n    post:\n      operationId: v1_tournaments_speakers_update\n      description: Modify a speaker\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Speaker'\n      tags:\n        - v1\n        - speakers\n      requestBody:\n        $ref: '#/components/requestBodies/Speaker'\n    delete:\n      operationId: v1_tournaments_speakers_delete\n      description: Delete a speaker\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - speakers\n    patch:\n      operationId: v1_tournaments_speakers_partial_update\n      description: Update a speaker\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Speaker'\n      tags:\n        - v1\n        - speakers\n      requestBody:\n        $ref: '#/components/requestBodies/Speaker'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/speakers/{id}/checkin':\n    get:\n      operationId: v1_tournaments_speakers_checkin_list\n      description: Check if speaker is currently checked in\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checkin'\n        '404':\n          description: 'No identifier. Use POST to generate.'\n      tags:\n        - v1\n        - speakers\n        - checkins\n    post:\n      operationId: v1_tournaments_speakers_checkin_create\n      description: Create an check-in identifier for the speaker\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checkin'\n      tags:\n        - v1\n        - speakers\n        - checkins\n    put:\n      operationId: v1_tournaments_speakers_checkin_update\n      description: Check in the speaker\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checkin'\n        '404':\n          description: 'No identifier. Use POST to generate.'\n      tags:\n        - v1\n        - speakers\n        - checkins\n    patch:\n      operationId: v1_tournaments_speakers_checkin_partial_update\n      description: Toggle the speaker''s check-in status\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checkin'\n        '404':\n          description: 'No identifier. Use POST to generate.'\n      tags:\n        - v1\n        - speakers\n        - checkins\n    delete:\n      operationId: v1_tournaments_speakers_checkin_delete\n      description: Check out the speaker\n      responses:\n        '204':\n          description: ''\n        '404':\n          description: 'No identifier. Use POST to generate.'\n      tags:\n        - v1\n        - speakers\n        - checkins\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/teams':\n    get:\n      operationId: v1_tournaments_teams_list\n      description: List teams in the tournament\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Team'\n      tags:\n        - v1\n        - teams\n    post:\n      operationId: v1_tournaments_teams_create\n      description: Create team in the tournament\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Team'\n      tags:\n        - v1\n        - teams\n      requestBody:\n        $ref: '#/components/requestBodies/Team'\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/teams/standings':\n    get:\n      operationId: v1_tournaments_teams_standings_list\n      description: Get the team standings\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n        - name: category\n          in: query\n          description: Restrict the standings to a break category\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeamStandings'\n      tags:\n        - v1\n        - teams\n        - standings\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/teams/{id}':\n    get:\n      operationId: v1_tournaments_teams_read\n      description: Retrieve a team\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Team'\n      tags:\n        - v1\n        - teams\n    post:\n      operationId: v1_tournaments_teams_update\n      description: \u003e-\n        Modify a team. The speakers field can only create speakers, not\n        modify or remove them. Leave empty if none are being added.\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Team'\n      tags:\n        - v1\n        - teams\n      requestBody:\n        $ref: '#/components/requestBodies/Team'\n    delete:\n      operationId: v1_tournaments_teams_delete\n      description: Delete a team\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - teams\n    patch:\n      operationId: v1_tournaments_team_partial_update\n      description: Update a team\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Team'\n      tags:\n        - v1\n        - teams\n      requestBody:\n        $ref: '#/components/requestBodies/Team'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/venue-categories':\n    get:\n      operationId: v1_tournaments_venue-categories_list\n      description: List venue categories\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VenueCategory'\n      tags:\n        - v1\n        - venue-categories\n    post:\n      operationId: v1_tournaments_venue-categories_create\n      description: Create a venue category\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VenueCategory'\n      tags:\n        - v1\n        - venue-categories\n      requestBody:\n        $ref: '#/components/requestBodies/VenueCategory'\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/venue-categories/{id}':\n    get:\n      operationId: v1_tournaments_venue-categories_read\n      description: Retrieve venue category\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VenueCategory'\n      tags:\n        - v1\n        - venue-categories\n    post:\n      operationId: v1_tournaments_venue-categories_update\n      description: Modify a venue category\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VenueCategory'\n      tags:\n        - v1\n        - venue-categories\n      requestBody:\n        $ref: '#/components/requestBodies/VenueCategory'\n    delete:\n      operationId: v1_tournaments_venue-categories_delete\n      description: Delete a venue category\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - venue-categories\n    patch:\n      operationId: v1_tournaments_venue-categories_partial_update\n      description: Update a venue category\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VenueCategory'\n      tags:\n        - v1\n        - venue-categories\n      requestBody:\n        $ref: '#/components/requestBodies/VenueCategory'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/venues':\n    get:\n      operationId: v1_tournaments_venues_list\n      description: List venues added for the tournament\n      parameters:\n        - name: limit\n          in: query\n          description: Number of results to return per page.\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The initial index from which to return the results.\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Venue'\n      tags:\n        - v1\n        - venues\n    post:\n      operationId: v1_tournaments_venues_create\n      description: Add a venue to the tournament\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Venue'\n      tags:\n        - v1\n        - venues\n      requestBody:\n        $ref: '#/components/requestBodies/Venue'\n    parameters:\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/venues/{id}':\n    get:\n      operationId: v1_tournaments_venues_read\n      description: Retrieve a venue\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Venue'\n      tags:\n        - v1\n        - venues\n    post:\n      operationId: v1_tournaments_venues_update\n      description: Modify a venue\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Venue'\n      tags:\n        - v1\n        - venues\n      requestBody:\n        $ref: '#/components/requestBodies/Venue'\n    delete:\n      operationId: v1_tournaments_venues_delete\n      description: Delete a venue\n      responses:\n        '204':\n          description: ''\n      tags:\n        - v1\n        - venues\n    patch:\n      operationId: v1_tournaments_venues_partial_update\n      description: Update a venue\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Venue'\n      tags:\n        - v1\n        - venues\n      requestBody:\n        $ref: '#/components/requestBodies/Venue'\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\n  '/v1/tournaments/{tournament_slug}/venues/{id}/checkin':\n    get:\n      operationId: v1_tournaments_venues_checkin_list\n      description: Check if venue is currently checked in\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checkin'\n        '404':\n          description: 'No identifier. Use POST to generate.'\n      tags:\n        - v1\n        - venues\n        - checkins\n    post:\n      operationId: v1_tournaments_venues_checkin_create\n      description: Create an check-in identifier for the venue\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checkin'\n      tags:\n        - v1\n        - venues\n        - checkins\n    put:\n      operationId: v1_tournaments_venues_checkin_update\n      description: Check in the venue\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checkin'\n        '404':\n          description: 'No identifier. Use POST to generate.'\n      tags:\n        - v1\n        - venues\n        - checkins\n    patch:\n      operationId: v1_tournaments_venues_checkin_partial_update\n      description: Toggle the venue''s check-in status\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Checkin'\n        '404':\n          description: 'No identifier. Use POST to generate.'\n      tags:\n        - v1\n        - venues\n        - checkins\n    delete:\n      operationId: v1_tournaments_venues_checkin_delete\n      description: Check out the venue\n      responses:\n        '204':\n          description: ''\n        '404':\n          description: 'No identifier. Use POST to generate.'\n      tags:\n        - v1\n        - venues\n        - checkins\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: tournament_slug\n        in: path\n        required: true\n        schema:\n          type: string\nservers:\n  - url: 'https://{server}/api'\n    variables:\n      server:\n        default: localhost\ncomponents:\n  requestBodies:\n    TournamentInstitution:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/TournamentInstitution'\n      required: true\n    Venue:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Venue'\n      required: true\n    FeedbackQuestion:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/FeedbackQuestion'\n      required: true\n    Preference:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Preference'\n      required: true\n    Motion:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Motion'\n      required: true\n    SpeakerEligibility:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SpeakerEligibility'\n      required: true\n    Feedback:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Feedback'\n      required: true\n    VenueCategory:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/VenueCategory'\n      required: true\n    Institution:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Institution'\n      required: true\n    Tournament:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Tournament'\n      required: true\n    Adjudicator:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Adjudicator'\n      required: true\n    BreakCategory:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BreakCategory'\n      required: true\n    BreakEligibility:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BreakEligibility'\n      required: true\n    Round:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Round'\n      required: true\n    Debate:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Debate'\n      required: true\n    SpeakerCategory:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SpeakerCategory'\n      required: true\n    Speaker:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Speaker'\n      required: true\n    Team:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Team'\n      required: true\n    DebateResult:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DebateResult'\n      required: true\n    PartialBreakingTeam:\n      content:\n        application/json:\n          schema:\n            required:\n              - team\n            type: object\n            properties:\n              team:\n                title: Team\n                type: string\n                format: uri\n              remark:\n                title: Remark\n                type: string\n                nullable: true\n                enum:\n                  - C\n                  - I\n                  - D\n                  - d\n                  - t\n                  - w\n                  - null\n  securitySchemes:\n    Token:\n      type: apiKey\n      name: Authorization\n      in: header\n  schemas:\n    VenueConstraint:\n      required:\n        - category\n        - priority\n      type: object\n      properties:\n        category:\n          title: Category\n          description: The venue category to constrain to\n          type: string\n          format: uri\n        priority:\n          title: Priority\n          description: How important is the constraint\n          type: integer\n    Institution:\n      required:\n        - name\n        - code\n      type: object\n      properties:\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        name:\n          title: Name\n          description: \u003e-\n            The institution's full name, e.g., \"University of Cambridge\",\n            \"Victoria University of Wellington\"\n          type: string\n          maxLength: 100\n          minLength: 1\n        code:\n          title: Code\n          description: \u003e-\n            What the institution is typically called for short, e.g.,\n            \"Cambridge\", \"Vic Wellington\"\n          type: string\n          maxLength: 20\n          minLength: 1\n        region:\n          title: Region\n          type: string\n          maxLength: 100\n          nullable: true\n        venue_constraints:\n          type: array\n          items:\n            $ref: '#/components/schemas/VenueConstraint'\n    TournamentInstitution:\n      required:\n        - name\n        - code\n      type: object\n      properties:\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        name:\n          title: Name\n          description: \u003e-\n            The institution's full name, e.g., \"University of Cambridge\",\n            \"Victoria University of Wellington\"\n          type: string\n          maxLength: 100\n          minLength: 1\n        code:\n          title: Code\n          description: \u003e-\n            What the institution is typically called for short, e.g.,\n            \"Cambridge\", \"Vic Wellington\"\n          type: string\n          maxLength: 20\n          minLength: 1\n        region:\n          title: Region\n          type: string\n          maxLength: 100\n          nullable: true\n        teams:\n          title: Teams\n          type: array\n          items:\n            type: string\n            format: uri\n        adjudicators:\n          title: Adjudicators\n          type: array\n          items:\n            type: string\n            format: uri\n        venue_constraints:\n          type: array\n          items:\n            $ref: '#/components/schemas/VenueConstraint'\n    Tournament:\n      required:\n        - name\n        - slug\n      type: object\n      properties:\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        current_rounds:\n          type: array\n          items:\n            type: string\n            format: uri\n          readOnly: true\n          uniqueItems: true\n        _links:\n          title: links\n          type: object\n          readOnly: true\n          properties:\n            rounds:\n              title: Rounds\n              type: string\n              format: uri\n              readOnly: true\n            break_categories:\n              title: Break categories\n              type: string\n              format: uri\n              readOnly: true\n            speaker_categories:\n              title: Speaker categories\n              type: string\n              format: uri\n              readOnly: true\n            institutions:\n              title: Institutions\n              type: string\n              format: uri\n              readOnly: true\n            teams:\n              title: Teams\n              type: string\n              format: uri\n              readOnly: true\n            adjudicators:\n              title: Adjudicators\n              type: string\n              format: uri\n              readOnly: true\n            speakers:\n              title: Speakers\n              type: string\n              format: uri\n              readOnly: true\n            venues:\n              title: Venues\n              type: string\n              format: uri\n              readOnly: true\n            venue_categories:\n              title: Venue categories\n              type: string\n              format: uri\n              readOnly: true\n            motions:\n              title: Motions\n              type: string\n              format: uri\n              readOnly: true\n            feedback:\n              title: Feedback\n              type: string\n              format: uri\n              readOnly: true\n            feedback_questions:\n              title: Feedback questions\n              type: string\n              format: uri\n              readOnly: true\n            preferences:\n              title: Preferences\n              type: string\n              format: uri\n              readOnly: true\n        name:\n          title: Name\n          description: \u003e-\n            The full name, e.g. \"Australasian Intervarsity Debating\n            Championships 2016\"\n          type: string\n          maxLength: 100\n          minLength: 1\n        short_name:\n          title: Short name\n          description: 'The name used in the menu, e.g. \"Australs 2016\"'\n          type: string\n          maxLength: 25\n        seq:\n          title: Sequence number\n          description: \u003e-\n            A number that determines the relative order in which tournaments\n            are displayed on the homepage.\n          type: integer\n          maximum: 2147483647\n          minimum: -2147483648\n          nullable: true\n        slug:\n          title: Slug\n          description: \u003e-\n            The sub-URL of the tournament, cannot have spaces, e.g.\n            \"australs2016\"\n          type: string\n          format: slug\n          pattern: '^[-a-zA-Z0-9_]+$'\n          maxLength: 50\n          minLength: 1\n        active:\n          title: Active\n          type: boolean\n    Preference:\n      required:\n        - value\n      type: object\n      properties:\n        section:\n          title: Section\n          type: string\n          readOnly: true\n          minLength: 1\n        name:\n          title: Name\n          type: string\n          readOnly: true\n          minLength: 1\n        identifier:\n          title: Identifier\n          type: string\n          readOnly: true\n        default:\n          title: Default\n          type: string\n          readOnly: true\n        value:\n          title: Value\n          type: string\n        verbose_name:\n          title: Verbose name\n          type: string\n          readOnly: true\n        help_text:\n          title: Help text\n          type: string\n          readOnly: true\n        additional_data:\n          title: Additional data\n          type: string\n          readOnly: true\n        field:\n          title: Field\n          type: string\n          readOnly: true\n    Checkin:\n      type: object\n      properties:\n        object:\n          title: object\n          type: string\n          format: uri\n          readOnly: true\n        barcode:\n          title: barcode\n          type: integer\n          pattern: '^[1-9]\\d*$'\n          readOnly: true\n          nullable: true\n        checked:\n          title: Checked\n          type: boolean\n          readOnly: true\n        timestamp:\n          title: Timestamp\n          type: string\n          format: date-time\n          readOnly: true\n          nullable: true\n    Adjudicator:\n      required:\n        - name\n        - institution\n        - institution_conflicts\n        - team_conflicts\n        - adjudicator_conflicts\n      type: object\n      properties:\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        name:\n          title: Name\n          type: string\n          maxLength: 70\n        gender:\n          title: Gender\n          description: \u003e-\n            Gender is displayed in the adjudicator allocation interface, and\n            nowhere else\n          enum:\n            - M\n            - F\n            - O\n        email:\n          title: E-mail address\n          type: string\n          format: email\n          maxLength: 254\n          nullable: true\n        phone:\n          title: Phone\n          type: string\n          maxLength: 40\n        anonymous:\n          title: Anonymous\n          description: \u003e-\n            Anonymous persons will have their name and team redacted on public\n            tab releases\n          type: boolean\n        pronoun:\n          title: Pronoun\n          description: \u003e-\n            If printing ballots using Tabbycat, there is the option to\n            pre-print pronouns\n          type: string\n          maxLength: 10\n        institution:\n          title: Institution\n          type: string\n          format: uri\n          nullable: true\n        base_score:\n          title: Base score\n          type: number\n          format: float\n        breaking:\n          title: Breaking\n          type: boolean\n        trainee:\n          title: Always trainee\n          description: \u003e-\n            If checked, this adjudicator will never be auto-allocated a voting\n            position, regardless of their score\n          type: boolean\n        independent:\n          title: Independent\n          type: boolean\n        adj_core:\n          title: Adjudication core\n          type: boolean\n        institution_conflicts:\n          title: Institution conflicts\n          type: array\n          items:\n            type: string\n            format: uri\n        team_conflicts:\n          title: Team conflicts\n          type: array\n          items:\n            type: string\n            format: uri\n        adjudicator_conflicts:\n          title: Adjudicator conflicts\n          type: array\n          items:\n            type: string\n            format: uri\n        url_key:\n          title: URL Key\n          description: \u003e-\n            Set null to automatically generate; set as empty string to have no URL key.\n          type: string\n          format: slug\n          pattern: '^[-a-zA-Z0-9_]+$'\n          maxLength: 24\n          nullable: true\n        _links:\n          title: links\n          type: object\n          readOnly: true\n          properties:\n            checkin:\n              title: Checkins\n              type: string\n              format: uri\n              readOnly: true\n        venue_constraints:\n          type: array\n          items:\n            $ref: '#/components/schemas/VenueConstraint'\n    BreakCategory:\n      required:\n        - name\n        - slug\n        - seq\n        - break_size\n        - is_general\n        - priority\n      type: object\n      properties:\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        name:\n          title: Name\n          description: 'Name to be displayed, e.g., \"ESL\"'\n          type: string\n          maxLength: 50\n        slug:\n          title: Slug\n          description: 'Slug for URLs, e.g., \"esl\"'\n          type: string\n          format: slug\n        seq:\n          title: Sequence number\n          description: The order in which the categories are displayed\n          type: integer\n        break_size:\n          title: Break size\n          description: Number of breaking teams in this category\n          type: integer\n          minimum: 2\n        is_general:\n          title: Is general\n          description: \u003e-\n            True if most teams eligible for this category, e.g. Open, False\n            otherwise\n          type: boolean\n        priority:\n          title: Priority\n          description: \u003e-\n            If a team breaks in multiple categories, higher priority numbers\n            take precedence; teams can break into multiple categories if and\n            only if they all have the same priority\n          type: integer\n        limit:\n          title: Limit\n          description: \u003e-\n            At most this many teams will be shown on the public tab for this\n            category, or use 0 for no limit\n          type: integer\n        rule:\n          title: Rule\n          description: \u003e-\n            Rule for how the break is calculated (most tournaments should use\n            \"Standard\")\n          type: string\n          enum:\n            - standard\n            - aida-1996\n            - aida-2016-easters\n            - aida-2016-australs\n            - aida-2019-australs-open\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        _links:\n          title: links\n          type: object\n          readOnly: true\n          properties:\n            eligibility:\n              title: Eligibility\n              type: string\n              format: uri\n              readOnly: true\n    SpeakerCategory:\n      required:\n        - name\n        - slug\n        - seq\n      type: object\n      properties:\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        name:\n          title: Name\n          description: 'Name to be displayed, e.g., \"ESL\"'\n          type: string\n          maxLength: 50\n        slug:\n          title: Slug\n          description: 'Slug for URLs, e.g., \"esl\"'\n          type: string\n          format: slug\n        seq:\n          title: Sequence number\n          description: The order in which the categories are displayed\n          type: integer\n        limit:\n          title: Limit\n          description: \u003e-\n            At most this many speakers will be shown on the public tab for this\n            category, or use 0 for no limit\n          type: integer\n        public:\n          title: Public\n          description: \u003e-\n            If checked, this category will be included in the speaker category\n            tabs shown to the public\n          type: boolean\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        _links:\n          title: links\n          type: object\n          readOnly: true\n          properties:\n            eligibility:\n              title: Eligibility\n              type: string\n              format: uri\n              readOnly: true\n    BreakEligibility:\n      required:\n        - team_set\n      type: object\n      properties:\n        slug:\n          title: Slug\n          description: 'Slug for URLs, e.g., \"esl\"'\n          type: string\n          format: slug\n          readOnly: true\n        team_set:\n          title: Team set\n          type: array\n          items:\n            type: string\n            format: uri\n    SpeakerEligibility:\n      required:\n        - speaker_set\n      type: object\n      properties:\n        slug:\n          title: Slug\n          description: 'Slug for URLs, e.g., \"esl\"'\n          type: string\n          format: slug\n          readOnly: true\n        speaker_set:\n          title: Speaker set\n          type: array\n          items:\n            type: string\n            format: uri\n    Feedback:\n      required:\n        - adjudicator\n        - source\n        - debate\n        - score\n      type: object\n      properties:\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        adjudicator:\n          title: Adjudicator\n          type: string\n          format: uri\n        source:\n          title: Source\n          description: The adjudicator or team submitting this feedback\n          type: string\n          format: uri\n        debate:\n          title: Debate\n          description: The debate for which this feedback originates\n          type: string\n          format: uri\n        answers:\n          title: Answers\n          type: array\n          items:\n            type: object\n            required:\n              - question\n              - answer\n            properties:\n              question:\n                title: question\n                type: string\n                format: uri\n              answer:\n                title: Answer\n                type: string\n        timestamp:\n          type: string\n          format: date-time\n          title: Timestamp\n        version:\n          title: Version\n          type: integer\n          readOnly: true\n        submitter_type:\n          title: Submitter type\n          type: string\n          enum:\n            - T\n            - P\n          readOnly: true\n        confirmed:\n          title: Confirmed\n          type: boolean\n        confirm_timestamp:\n          title: Confirm timestamp\n          type: string\n          format: date-time\n          readOnly: true\n          nullable: true\n        ip_address:\n          title: IP address\n          type: string\n          format: ipv4\n          readOnly: true\n        score:\n          title: Score\n          type: number\n          format: float\n        ignored:\n          title: Ignored\n          description: Whether the feedback should affect the judge's score\n          type: boolean\n        participant_submitter:\n          title: Participant submitter\n          description: The submitting participant, adjudicator or speaker\n          type: string\n          format: uri\n          nullable: true\n          readOnly: true\n        private_url:\n          title: Private URL\n          description: \u003e-\n            Whether the feedback was submitted through the participant's\n            private URL.\n          type: boolean\n          readOnly: true\n        submitter:\n          title: Submitter\n          type: integer\n          nullable: true\n          readOnly: true\n        confirmer:\n          title: Confirmer\n          type: integer\n          nullable: true\n          readOnly: true\n    FeedbackQuestion:\n      required:\n        - choices\n        - seq\n        - text\n        - name\n        - reference\n        - from_adj\n        - from_team\n        - answer_type\n      type: object\n      properties:\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        choices:\n          title: Choices\n          type: array\n          items:\n            type: string\n        seq:\n          title: Sequence number\n          description: The order in which questions are displayed\n          type: integer\n        text:\n          title: Text\n          description: \u003e-\n            The question displayed to participants, e.g., \"Did you agree with\n            the decision?\"\n          type: string\n          maxLength: 255\n        name:\n          title: Name\n          description: \u003e-\n            'A short name for the question, e.g., \"Agree with decision\"'\n          type: string\n          maxLength: 30\n        reference:\n          title: Reference\n          description: 'Code-compatible reference, e.g., \"agree_with_decision\"'\n          type: string\n          maxLength: 50\n        from_adj:\n          title: From adjudicator\n          description: \u003e-\n            Adjudicators should be asked this question (about other\n            adjudicators)\n          type: boolean\n        from_team:\n          title: From team\n          description: Teams should be asked this question\n          type: boolean\n        answer_type:\n          title: Answer type\n          type: string\n          enum:\n            - bc\n            - bs\n            - i\n            - is\n            - f\n            - t\n            - tl\n            - ss\n            - ms\n        required:\n          title: Required\n          description: Whether participants are required to fill out this field\n          type: boolean\n        min_value:\n          title: Minimum value\n          description: \u003e-\n            Minimum allowed value for numeric fields (ignored for text or\n            boolean fields)\n          nullable: true\n        max_value:\n          title: Maximum value\n          description: \u003e-\n            Maximum allowed value for numeric fields (ignored for text or\n            boolean fields)\n          nullable: true\n    Motion:\n      required:\n        - rounds\n        - text\n        - reference\n      type: object\n      properties:\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        rounds:\n          title: Rounds\n          type: array\n          items:\n            type: object\n            required:\n              - round\n            properties:\n              round:\n                title: Round\n                type: string\n                format: uri\n              seq:\n                title: Sequence number\n                description: The order in which motions are displayed\n                type: integer\n        text:\n          title: Text\n          description: \u003e-\n            'The full motion e.g., \"This House would straighten all bananas\"'\n          type: string\n          maxLength: 500\n        reference:\n          title: Reference\n          description: 'Shortcode for the motion, e.g., \"Bananas\"'\n          maxLength: 100\n        info_slide:\n          title: Info slide\n          description: The information slide for this topic; if it has one\n    Round:\n      required:\n        - break_category\n        - motions\n        - seq\n        - name\n        - abbreviation\n        - draw_type\n      type: object\n      properties:\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        break_category:\n          title: Break category\n          type: string\n          format: uri\n          nullable: true\n        motions:\n          title: Motions\n          type: array\n          items:\n            type: object\n            required:\n              - text\n              - reference\n            properties:\n              id:\n                title: ID\n                type: integer\n                readOnly: true\n              url:\n                title: Url\n                type: string\n                format: uri\n                readOnly: true\n              seq:\n                title: Sequence number\n                description: The order in which motions are displayed\n                type: integer\n              text:\n                title: Text\n                description: \u003e-\n                  The full motion e.g., \"This House would straighten all\n                  bananas\"\n                type: string\n                maxLength: 500\n              reference:\n                title: Reference\n                description: 'Shortcode for the motion, e.g., \"Bananas\"'\n                maxLength: 100\n              info_slide:\n                title: Info slide\n                description: \u003e-\n                  The information slide for this topic; if it has one\n        _links:\n          title: links\n          readOnly: true\n          type: object\n          properties:\n            pairing:\n              title: Pairing\n              type: string\n              format: uri\n              readOnly: true\n        seq:\n          title: Sequence number\n          description: \u003e-\n            A number that determines the order of the round, should count\n            consecutively from 1 for the first round\n          type: integer\n        completed:\n          title: completed\n          description: \u003e-\n            True if the round is over, which normally means all results have\n            been entered and confirmed\n          type: boolean\n        name:\n          title: Name\n          description: e.g. \"Round 1\"\n          type: string\n          maxLength: 40\n        abbreviation:\n          title: Abbreviation\n          description: e.g. \"R1\"\n          type: string\n          maxLength: 10\n        stage:\n          title: stage\n          description: 'Preliminary = inrounds, elimination = outrounds'\n          type: string\n          enum:\n            - P\n            - E\n        draw_type:\n          title: Draw type\n          description: Which draw method to use\n          type: string\n          enum:\n            - R\n            - M\n            - D\n            - P\n            - E\n        draw_status:\n          title: Draw status\n          description: The status of this round's draw\n          type: string\n          enum:\n            - 'N'\n            - D\n            - C\n            - R\n        feedback_weight:\n          title: Feedback weight\n          description: \u003e-\n            The extent to which each adjudicator's overall score depends on\n            feedback vs their base score. At 0, it is 100% drawn from their\n            base score, at 1 it is 100% drawn from feedback.\n          type: number\n          format: float\n        silent:\n          title: Silent\n          description: \u003e-\n            If marked silent, information about this round (such as its\n            results) will not be shown publicly.\n          type: boolean\n        motions_released:\n          title: Motions released\n          description: \u003e-\n            Whether motions will appear on the public website, assuming that\n            feature is turned on\n          type: boolean\n        starts_at:\n          title: Starts at\n          type: string\n          format: time\n        weight:\n          title: Weight\n          description: \u003e-\n            A factor for the points received in the round. For example, if 2,\n            all points are doubled.\n          type: integer\n    Debate:\n      required:\n        - teams\n      type: object\n      properties:\n        url:\n          title: Url\n          readOnly: true\n          type: string\n          format: uri\n        id:\n          title: ID\n          readOnly: true\n          type: integer\n        venue:\n          title: Venue\n          type: string\n          format: uri\n          nullable: true\n        teams:\n          title: Teams\n          type: array\n          items:\n            required:\n              - team\n              - side\n            type: object\n            properties:\n              team:\n                title: Team\n                type: string\n                format: uri\n              side:\n                title: Side\n                type: string\n                enum:\n                  - aff\n                  - neg\n                  - og\n                  - oo\n                  - cg\n                  - co\n        adjudicators:\n          title: Adjudicators\n          type: object\n          nullable: true\n          required:\n            - chair\n            - panellists\n            - trainees\n          properties:\n            chair:\n              title: Chair\n              type: string\n              format: uri\n              nullable: true\n            panellists:\n              title: Panellists\n              type: array\n              items:\n                type: string\n                format: uri\n            trainees:\n              title: Trainees\n              type: array\n              items:\n                type: string\n                format: uri\n        bracket:\n          title: Bracket\n          type: number\n        room_rank:\n          title: room rank\n          type: integer\n        importance:\n          title: importance\n          type: integer\n        result_status:\n          title: result status\n          type: string\n          enum:\n            - N\n            - P\n            - D\n            - C\n        sides_confirmed:\n          title: Sides confirmed\n          description: \u003e-\n            If unchecked, the sides assigned to teams in this debate are just\n            placeholders.\n          type: boolean\n    Speaker:\n      required:\n        - name\n        - categories\n      type: object\n      properties:\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        name:\n          title: Name\n          type: string\n          maxLength: 70\n        gender:\n          title: Gender\n          description: \u003e-\n            Gender is displayed in the adjudicator allocation interface, and\n            nowhere else\n          enum:\n            - M\n            - F\n            - O\n        email:\n          title: E-mail address\n          type: string\n          format: email\n          maxLength: 254\n          nullable: true\n        phone:\n          title: Phone\n          type: string\n          maxLength: 40\n        anonymous:\n          title: Anonymous\n          description: \u003e-\n            Anonymous persons will have their name and team redacted on public\n            tab releases\n          type: boolean\n        pronoun:\n          title: Pronoun\n          description: \u003e-\n            If printing ballots using Tabbycat, there is the option to pre-print\n            pronouns\n          type: string\n          maxLength: 10\n        categories:\n          title: Categories\n          type: array\n          items:\n            type: string\n            format: uri\n        url_key:\n          title: URL Key\n          description: \u003e-\n            Set null to automatically generate; set as empty string to have no URL key.\n          type: string\n          format: slug\n          pattern: '^[-a-zA-Z0-9_]+$'\n          maxLength: 24\n          nullable: true\n        _links:\n          title: links\n          type: object\n          readOnly: true\n          properties:\n            checkin:\n              title: Checkins\n              type: string\n              format: uri\n              readOnly: true\n    Team:\n      type: object\n      required:\n        - institution\n        - break_categories\n        - institution_conflicts\n      properties:\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        reference:\n          title: Full name/suffix\n          description: \u003e-\n            Do not include institution name (see \"uses institutional prefix\"\n            below)\n          type: string\n          maxLength: 150\n        short_reference:\n          title: Short name/suffix\n          description: \u003e-\n            The decoded name shown in the draw, not including institution name\n            (see \"uses institutional prefix\" below)\n          type: string\n          maxLength: 35\n        code_name:\n          title: Code name\n          description: \u003e-\n            Name used to obscure institutional identity on public-facing pages\n          type: string\n          maxLength: 150\n        emoji:\n          title: Emoji\n          type: string\n          maxLength: 2\n          nullable: true\n        short_name:\n          title: Short name\n          description: \u003e-\n            The decoded name shown in the draw, including institution name. This\n            is autogenerated.\n          type: string\n          readOnly: true\n        long_name:\n          title: Long name\n          description: \u003e-\n            The full name of the team, including institution name. This is\n            autogenerated.\n          type: string\n          readOnly: true\n        institution:\n          title: Institution\n          type: string\n          format: uri\n          nullable: true\n        speakers:\n          title: Speakers\n          type: array\n          items:\n            $ref: '#/components/schemas/Speaker'\n        use_institution_prefix:\n          title: Uses institutional prefix\n          description: \u003e-\n            If ticked, a team called \"1\" from Victoria will be shown as\n            \"Victoria 1\"\n          type: boolean\n        break_categories:\n          title: Break categories\n          type: array\n          items:\n            type: string\n            format: uri\n        institution_conflicts:\n          title: Institution conflicts\n          type: array\n          items:\n            type: string\n            format: uri\n        venue_constraints:\n          type: array\n          items:\n            $ref: '#/components/schemas/VenueConstraint'\n    SpeakerStandings:\n      type: array\n      items:\n        type: object\n        properties:\n          rank:\n            title: Rank\n            type: integer\n          tied:\n            title: Tied\n            type: boolean\n          metrics:\n            title: Metrics\n            type: array\n            items:\n              type: object\n              properties:\n                metric:\n                  title: Metric\n                  type: string\n                  enum:\n                    - total\n                    - average\n                    - trimmed_mean\n                    - team_points\n                    - stdev\n                    - count\n                    - replies_sum\n                    - replies_avg\n                    - replies_stddev\n                    - replies_count\n                value:\n                  title: Value\n                  type: number\n          speaker:\n            title: Speaker\n            type: string\n            format: uri\n    TeamStandings:\n      type: array\n      items:\n        type: object\n        properties:\n          rank:\n            title: Rank\n            type: integer\n          tied:\n            title: Tied\n            type: boolean\n          metrics:\n            title: Metrics\n            type: array\n            items:\n              type: object\n              properties:\n                metric:\n                  title: Metric\n                  type: string\n                  enum:\n                    - points\n                    - wins\n                    - speaks_sum\n                    - speaks_avg\n                    - speaks_ind_avg\n                    - speaks_stddev\n                    - draw_strength\n                    - draw_strength_speaks\n                    - margin_sum\n                    - margin_avg\n                    - npullups\n                    - num_adjs\n                    - firsts\n                    - seconds\n                    - wbw\n                value:\n                  title: Value\n                  type: number\n          team:\n            title: Team\n            type: string\n            format: uri\n    Venue:\n      required:\n        - categories\n        - name\n        - priority\n      type: object\n      properties:\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        categories:\n          title: Categories\n          type: array\n          items:\n            type: string\n            format: uri\n        display_name:\n          title: Display name\n          type: string\n          readOnly: true\n        _links:\n          title: links\n          type: object\n          readOnly: true\n          properties:\n            checkin:\n              title: Checkins\n              type: string\n              format: uri\n              readOnly: true\n        name:\n          title: Name\n          type: string\n          format: uri\n          maxLength: 40\n        priority:\n          title: Priority\n          description: \u003e-\n            Venues with a higher priority number will be preferred when\n            allocating venues to debates\n          type: integer\n        external_url:\n          title: External URL\n          type: string\n          format: uri\n          nullable: true\n    VenueCategory:\n      required:\n        - venues\n        - name\n      type: object\n      properties:\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        venues:\n          title: Venues\n          type: array\n          items:\n            type: string\n            format: uri\n        name:\n          title: Name\n          description: \u003e-\n            Name of category, e.g., \"Purple\", \"Step-free access\", \"Close to tab\n            room\". This name is shown when the category is prefixed or suffixed\n            to a venue name in the draw, e.g., \"Purple – G05\".\n          type: string\n          maxLength: 80\n        description:\n          title: Description\n          description: \u003e-\n            Description, as the predicate of a sentence, e.g. \"has step-free\n            access\", \"is close to the briefing hall\". This description follows\n            \"This venue\" when shown in tooltips, e.g., \"This venue is close to\n            the briefing hall.\".\n          type: string\n          maxLength: 200\n        display_in_venue_name:\n          title: Display in venue name\n          description: 'Prefix: \"Purple – G05\", Suffix: \"G05 – Purple\"'\n          type: string\n          enum:\n            - '-'\n            - P\n            - S\n        display_in_public_tooltip:\n          title: Display in public tooltip\n          description: \u003e-\n            Displays the description in the tooltip for the venue on public\n            pages. The description, if not blank, will always show on admin\n            pages.\n          type: boolean\n    DebateResult:\n      required:\n        - result\n      type: object\n      properties:\n        url:\n          title: Url\n          type: string\n          format: uri\n          readOnly: true\n        id:\n          title: ID\n          type: integer\n          readOnly: true\n        result:\n          title: Result\n          type: object\n          properties:\n            sheets:\n              title: Sheets\n              type: array\n              items:\n                type: object\n                required:\n                  - teams\n                properties:\n                  adjudicator:\n                    title: Adjudicator\n                    type: string\n                    format: uri\n                    nullable: true\n                  teams:\n                    title: Teams\n                    type: array\n                    items:\n                      type: object\n                      required:\n                        - side\n                        - team\n                      properties:\n                        side:\n                          title: Side\n                          type: string\n                          enum:\n                            - aff\n                            - neg\n                            - og\n                            - oo\n                            - cg\n                            - co\n                        points:\n                          title: Points\n                          type: integer\n                        win:\n                          title: Win\n                          type: boolean\n                        score:\n                          title: Score\n                          type: number\n                        team:\n                          title: Team\n                          type: string\n                          format: uri\n                        speeches:\n                          title: Speeches\n                          description: Speeches must be given in speaker order.\n                          type: array\n                          items:\n                            type: object\n                            required:\n                              - score\n                              - speaker\n                            properties:\n                              ghost:\n                                title: Ghost\n                                description: \u003e-\n                                  If checked, this score does not count towards\n                                  the speaker tab. This is typically checked\n                                  for speeches where someone spoke twice to\n                                  make up for an absent teammate (sometimes\n                                  known as iron-person or iron-man speeches).\n                                type: boolean\n                              score:\n                                title: Score\n                                type: number\n                              speaker:\n                                title: Speaker\n                                type: string\n                                format: uri\n        motion:\n          title: Motion\n          type: string\n          format: uri\n          nullable: true\n        vetos:\n          title: Vetos\n          type: array\n          items:\n            type: object\n            properties:\n              team:\n                title: Team\n                type: string\n                format: uri\n              motion:\n                title: Motion\n                type: string\n                format: uri\n          nullable: true\n        timestamp:\n          title: Timestamp\n          type: string\n          format: date-time\n          readOnly: true\n        version:\n          title: Version\n          type: integer\n          readOnly: true\n        submitter_type:\n          title: Submitter type\n          type: string\n          enum:\n            - T\n            - P\n          readOnly: true\n        confirmed:\n          title: Confirmed\n          type: boolean\n        confirm_timestamp:\n          title: Confirm timestamp\n          type: string\n          format: date-time\n          readOnly: true\n          nullable: true\n        ip_address:\n          title: IP address\n          type: string\n          format: ipv4\n          readOnly: true\n        discarded:\n          title: Discarded\n          type: boolean\n        participant_submitter:\n          title: Participant submitter\n          description: The submitting adjudicator (if by private URL)\n          type: string\n          format: uri\n          nullable: true\n          readOnly: true\n        private_url:\n          title: Private URL\n          description: \u003e-\n            Whether the ballot was submitted through the participant's\n            private URL.\n          type: boolean\n          readOnly: true\n        single_adj:\n          title: Single adjudicator\n          description: \u003e-\n            If the ballot only has the scores of one adjudicator,\n            rather than from all.\n          type: boolean\n          readOnly: true\n        submitter:\n          title: Submitter\n          type: integer\n          nullable: true\n          readOnly: true\n        confirmer:\n          title: Confirmer\n          type: integer\n          nullable: true\n          readOnly: true\n    BreakingTeam:\n      required:\n        - team\n        - rank\n      type: object\n      properties:\n        team:\n          title: Team\n          type: string\n          format: uri\n        rank:\n          title: Rank\n          type: integer\n        break_rank:\n          title: Break rank\n          type: integer\n        remark:\n          title: Remark\n          type: string\n          nullable: true\n          enum:\n            - C\n            - I\n            - D\n            - d\n            - t\n            - w\n            - null\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Debate\": parse schema: property \"result_status\": parse enum values: parse value \"false\": expected type \"string\", got \"bool\""
}