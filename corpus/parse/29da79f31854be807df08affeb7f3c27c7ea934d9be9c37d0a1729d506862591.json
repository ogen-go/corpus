{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nodemailer/wildduck"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "docs/api/openapi.yml",
			"byteSize": 261694,
			"content": "openapi: 3.0.0\ninfo:\n    title: WildDuck API\n    description: WildDuck API docs\n    version: 1.0.0\n    contact:\n        url: 'https://github.com/nodemailer/wildduck'\n\nservers:\n    - url: 'https://api.wildduck.email'\n\ntags:\n    - name: Addresses\n    - name: ApplicationPasswords\n    - name: Archive\n      description: Archive includes all deleted messages. Once messages are old enough then these are permanenetly deleted from the archive as well. Until then you can restore the deleted messages.\n    - name: Audit\n      description: 'Auditing allows to monitor an email account. All existing, deleted and new emails are copied to the auditing system. See also https://github.com/nodemailer/wildduck-audit-manager'\n    - name: Authentication\n    - name: Autoreplies\n    - name: Certs\n      description: WildDuck allows to register TLS certificates to be used with SNI connections. These certificates are used by IMAP, POP3, API and SMTP servers when a SNI capable client establishes a TLS connection. This does not apply for MX servers.\n    - name: DKIM\n      description: Whenever an email is sent WildDuck checks if there is a DKIM key registered for the domain name of the sender address and uses it to sign the message.\n    - name: DomainAccess\n      description: Add sender domain names to allowlist (messages are all accepted) or blocklist (messages are sent to Spam folder)\n    - name: DomainAliases\n    - name: Filters\n    - name: Mailboxes\n    - name: Messages\n    - name: Settings\n    - name: Storage\n      description: Storage allows easier attachment handling when composing Draft messages. Instead of uploading the attachmnent with every draft update, you store the attachment to the Storage and then link stored file for the Draft.\n    - name: Submission\n    - name: TwoFactorAuth\n    - name: Users\n    - name: Webhooks\n\npaths:\n    '/addresses/forwarded/{address}':\n        delete:\n            tags:\n                - Addresses\n            summary: Delete a forwarded Address\n            operationId: deleteForwardedAddress\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        get:\n            tags:\n                - Addresses\n            summary: Request forwarded Addresses information\n            operationId: getForwardedAddress\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetForwardedAddressResponse'\n        put:\n            tags:\n                - Addresses\n            summary: Update forwarded Address information\n            operationId: updateForwardedAddress\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UpdateForwardedAddressRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: address\n              in: path\n              description: ID of the Address\n              schema:\n                  type: string\n              required: true\n    '/users/{user}/addresses/{address}':\n        delete:\n            tags:\n                - Addresses\n            summary: Delete an Address\n            operationId: deleteUserAddress\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        get:\n            tags:\n                - Addresses\n            summary: Request Addresses information\n            operationId: getUserAddress\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetUserAddressResponse'\n        put:\n            tags:\n                - Addresses\n            summary: Update Address information\n            operationId: updateUserAddress\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UpdateUserAddressRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n            - name: address\n              in: path\n              description: ID of the Address\n              required: true\n              schema:\n                  type: string\n    '/addresses/resolve/{address}':\n        get:\n            tags:\n                - Addresses\n            summary: Get Address info\n            operationId: resolveAddress\n            parameters:\n                - name: allowWildcard\n                  in: query\n                  description: If true then resolves also wildcard addresses\n                  schema:\n                      type: boolean\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ResolveAddressResponse'\n        parameters:\n            - name: address\n              in: path\n              description: ID of the Address or e-mail address string\n              required: true\n              schema:\n                  type: string\n    /addresses:\n        get:\n            tags:\n                - Addresses\n            summary: List registered Addresses\n            operationId: getAddresses\n            parameters:\n                - name: query\n                  in: query\n                  description: Partial match of an address\n                  schema:\n                      type: string\n                - name: forward\n                  in: query\n                  description: Partial match of a forward email address or URL\n                  schema:\n                      type: string\n                - name: tags\n                  in: query\n                  description: Comma separated list of tags. The Address must have at least one to be set\n                  schema:\n                      type: string\n                - name: requiredTags\n                  in: query\n                  description: Comma separated list of tags. The Address must have all listed tags to be set\n                  schema:\n                      type: string\n                - name: metaData\n                  in: query\n                  description: 'If true, then includes metaData in the response'\n                  schema:\n                      type: boolean\n                - name: internalData\n                  in: query\n                  description: 'If true, then includes internalData in the response. Not shown for user-role tokens.'\n                  schema:\n                      type: boolean\n                - name: limit\n                  in: query\n                  description: How many records to return\n                  schema:\n                      type: number\n                - name: page\n                  in: query\n                  description: 'Current page number. Informational only, page numbers start from 1'\n                  schema:\n                      type: number\n                - name: next\n                  in: query\n                  description: 'Cursor value for next page, retrieved from nextCursor response value'\n                  schema:\n                      type: number\n                - name: previous\n                  in: query\n                  description: 'Cursor value for previous page, retrieved from previousCursor response value'\n                  schema:\n                      type: number\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetAddressesResponse'\n    '/users/{user}/addresses':\n        get:\n            tags:\n                - Addresses\n            summary: List registered Addresses for a User\n            operationId: getUserAddresses\n            parameters:\n                - name: metaData\n                  in: query\n                  description: 'If true, then includes metaData in the response'\n                  schema:\n                      type: boolean\n                - name: internalData\n                  in: query\n                  description: 'If true, then includes internalData in the response. Not shown for user-role tokens.'\n                  schema:\n                      type: boolean\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetUserAddressesResponse'\n        post:\n            tags:\n                - Addresses\n            summary: Create new Address\n            description: 'Add a new email address for a User. Addresses can contain unicode characters. Dots in usernames are normalized so no need to create both \"firstlast@example.com\" and \"first.last@example.com\" Special addresses `*@example.com`, `*suffix@example.com` and `username@*` catches all emails to these domains or users without a registered destination (requires allowWildcard argument)'\n            operationId: createUserAddress\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateUserAddressRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CreateUserAddressResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/addressregister':\n        get:\n            tags:\n                - Addresses\n            summary: List addresses from communication register\n            description: 'Lists addresses from email headers. Includes addresses both from sent and received messages. Sorted by last usage.'\n            operationId: getUserAddressregister\n            parameters:\n                - name: user\n                  in: path\n                  description: ID of the User\n                  required: true\n                  schema:\n                      type: string\n                      example: 507f1f77bcf86cd799439011\n                - name: query\n                  in: query\n                  description: Prefix of an address or a name\n                  required: true\n                  schema:\n                      type: string\n                      example: john\n                - name: limit\n                  in: query\n                  description: How many records to return\n                  schema:\n                      type: number\n                      example: 25\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetUserAddressesregisterResponse'\n    /addresses/forwarded:\n        post:\n            tags:\n                - Addresses\n            summary: Create new forwarded Address\n            description: Add a new forwarded email address. Addresses can contain unicode characters. Dots in usernames are normalized so no need to create both \"firstlast@example.com\" and \"first.last@example.com\" Special addresses `*@example.com` and `username@*` catches all emails to these domains or users without a registered destination (requires allowWildcard argument)\n            operationId: createForwardedAddress\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateForwardedAddressRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CreateForwardedAddressResponse'\n    /addresses/renameDomain:\n        put:\n            tags:\n                - Addresses\n            summary: Rename domain in addresses\n            description: 'Renames domain names for addresses, DKIM keys and Domain Aliases'\n            operationId: renameDomain\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/RenameDomainRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n    '/users/{user}/asps/{asp}':\n        delete:\n            tags:\n                - ApplicationPasswords\n            summary: Delete an Application Password\n            operationId: deleteASP\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        get:\n            tags:\n                - ApplicationPasswords\n            summary: Request ASP information\n            operationId: getASP\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetASPResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n            - name: asp\n              in: path\n              description: ID of the Application Password\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/asps':\n        get:\n            tags:\n                - ApplicationPasswords\n            summary: List Application Passwords\n            operationId: getASPs\n            parameters:\n                - name: showAll\n                  in: query\n                  description: If not true then skips entries with a TTL set\n                  schema:\n                      type: boolean\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetASPsResponse'\n        post:\n            tags:\n                - ApplicationPasswords\n            summary: Create new Application Password\n            operationId: createASP\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateASPRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CreateASPResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/archived/messages':\n        get:\n            tags:\n                - Archive\n            summary: List archived messages\n            description: Archive contains all recently deleted messages besides Drafts etc.\n            operationId: getArchivedMessages\n            parameters:\n                - name: limit\n                  in: query\n                  description: How many records to return\n                  schema:\n                      type: number\n                - name: page\n                  in: query\n                  description: 'Current page number. Informational only, page numbers start from 1'\n                  schema:\n                      type: number\n                - name: order\n                  in: query\n                  description: Ordering of the records by insert date\n                  schema:\n                      type: number\n                - name: next\n                  in: query\n                  description: 'Cursor value for next page, retrieved from nextCursor response value'\n                  schema:\n                      type: number\n                - name: previous\n                  in: query\n                  description: 'Cursor value for previous page, retrieved from previousCursor response value'\n                  schema:\n                      type: number\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetArchivedMessagesResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/archived/messages/{message}/restore':\n        post:\n            tags:\n                - Archive\n            summary: Restore archived Message\n            description: 'Restores a single archived message by moving it back to the mailbox it was deleted from or to provided target mailbox. If target mailbox does not exist, then the message is moved to INBOX.'\n            operationId: restoreMessage\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/RestoreMessageRequest'\n                required: false\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/RestoreMessageResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n            - name: message\n              in: path\n              description: Message ID\n              required: true\n              schema:\n                  type: number\n    '/users/{user}/archived/restore':\n        post:\n            tags:\n                - Archive\n            summary: Restore archived messages\n            description: 'Initiates a restore task to move archived messages of a date range back to the mailboxes the messages were deleted from. If target mailbox does not exist, then the messages are moved to INBOX.'\n            operationId: restoreMessages\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/RestoreMessagesRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n    '/audit/{audit}':\n        get:\n            tags:\n                - Audit\n            summary: Request Audit Info\n            description: This method returns information about stored audit\n            operationId: getAudit\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetAuditResponse'\n        parameters:\n            - name: audit\n              in: path\n              description: ID of the Audit\n              required: true\n              schema:\n                  type: string\n    '/audit/{audit}/export.mbox':\n        get:\n            tags:\n                - Audit\n            summary: Export Audited Emails\n            description: This method returns a mailbox file that contains all audited emails\n            operationId: getAuditEmails\n            responses:\n                '200':\n                    description: Success\n        parameters:\n            - name: audit\n              in: path\n              description: ID of the Audit\n              required: true\n              schema:\n                  type: string\n    /audit:\n        post:\n            tags:\n                - Audit\n            summary: Create new audit\n            description: Initiates a message audit\n            operationId: createAudit\n            requestBody:\n                description: Initiates a message audit\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateAuditRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CreateAuditResponse'\n    /authenticate:\n        delete:\n            tags:\n                - Authentication\n            summary: Invalidate authentication token\n            description: This method invalidates currently used authentication token. If token is not provided then nothing happens\n            operationId: invalidateAccessToken\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        post:\n            tags:\n                - Authentication\n            summary: Authenticate a User\n            operationId: authenticate\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/AuthenticateRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/AuthenticateResponse'\n    '/users/{user}/authlog':\n        get:\n            tags:\n                - Authentication\n            summary: List authentication Events\n            operationId: getAuthlog\n            parameters:\n                - name: action\n                  in: query\n                  description: Limit listing only to values with specific action value\n                  schema:\n                      type: string\n                - name: filterIp\n                  in: query\n                  description: Limit listing only to values with specific IP address\n                  schema:\n                      type: string\n                - name: limit\n                  in: query\n                  description: How many records to return\n                  schema:\n                      type: number\n                - name: page\n                  in: query\n                  description: 'Current page number. Informational only, page numbers start from 1'\n                  schema:\n                      type: number\n                - name: next\n                  in: query\n                  description: 'Cursor value for next page, retrieved from nextCursor response value'\n                  schema:\n                      type: number\n                - name: previous\n                  in: query\n                  description: 'Cursor value for previous page, retrieved from previousCursor response value'\n                  schema:\n                      type: number\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetAuthlogResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/authlog/{event}':\n        get:\n            tags:\n                - Authentication\n            summary: Request Event information\n            operationId: getAuthlogEvent\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetAuthlogEventResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n            - name: event\n              in: path\n              description: ID of the Event\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/autoreply':\n        delete:\n            tags:\n                - Autoreplies\n            summary: Delete Autoreply information\n            operationId: deleteAutoreply\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        get:\n            tags:\n                - Autoreplies\n            summary: Request Autoreply information\n            operationId: getAutoreply\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetAutoreplyResponse'\n        put:\n            tags:\n                - Autoreplies\n            summary: Update Autoreply information\n            operationId: updateAutoreply\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UpdateAutoreplyRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n\n    '/dkim/{dkim}':\n        delete:\n            tags:\n                - DKIM\n            summary: Delete a DKIM key\n            operationId: deleteDkimKey\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        get:\n            tags:\n                - DKIM\n            summary: Request DKIM information\n            operationId: getDkimKey\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetDkimKeyResponse'\n        parameters:\n            - name: dkim\n              in: path\n              description: ID of the DKIM\n              required: true\n              schema:\n                  type: string\n    /dkim:\n        get:\n            tags:\n                - DKIM\n            summary: List registered DKIM keys\n            operationId: getDkimKeys\n            parameters:\n                - name: query\n                  in: query\n                  description: Partial match of a Domain name\n                  schema:\n                      type: string\n                - name: limit\n                  in: query\n                  description: How many records to return\n                  schema:\n                      type: number\n                - name: page\n                  in: query\n                  description: 'Current page number. Informational only, page numbers start from 1'\n                  schema:\n                      type: number\n                - name: next\n                  in: query\n                  description: 'Cursor value for next page, retrieved from nextCursor response value'\n                  schema:\n                      type: number\n                - name: previous\n                  in: query\n                  description: 'Cursor value for previous page, retrieved from previousCursor response value'\n                  schema:\n                      type: number\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetDkimKeysResponse'\n        post:\n            tags:\n                - DKIM\n            summary: Create or update DKIM key for domain\n            description: Add a new DKIM key for a Domain or update existing one. There can be single DKIM key registered for each domain name.\n            operationId: updateDkimKey\n            requestBody:\n                description: Add a new DKIM key for a Domain or update existing one. There can be single DKIM key registered for each domain name.\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UpdateDkimKeyRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UpdateDkimKeyResponse'\n    '/dkim/resolve/{domain}':\n        get:\n            tags:\n                - DKIM\n            summary: Resolve ID for a DKIM domain\n            operationId: resolveDkim\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ResolveIdResponse'\n        parameters:\n            - name: domain\n              in: path\n              description: DKIM domain\n              required: true\n              schema:\n                  type: string\n\n    '/certs/{cert}':\n        delete:\n            tags:\n                - Certs\n            summary: Delete a TLS certificate\n            operationId: deleteTlsCert\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        get:\n            tags:\n                - Certs\n            summary: Request TLS certificate information\n            operationId: getTLSCerticate\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetTLSCertResult'\n        parameters:\n            - name: cert\n              in: path\n              description: ID of the TLS certificate\n              required: true\n              schema:\n                  type: string\n    /certs:\n        get:\n            tags:\n                - Certs\n            summary: List registered TLS certificates\n            operationId: getTLSCerticates\n            parameters:\n                - name: query\n                  in: query\n                  description: Partial match of a server name\n                  schema:\n                      type: string\n                      example: example.com\n                - name: altNames\n                  in: query\n                  description: Match `query` value against SAN as well (including wildcard names)\n                  schema:\n                      type: boolean\n                      example: true\n                      default: false\n                - name: limit\n                  in: query\n                  description: How many records to return\n                  schema:\n                      type: number\n                - name: page\n                  in: query\n                  description: 'Current page number. Informational only, page numbers start from 1'\n                  schema:\n                      type: number\n                - name: next\n                  in: query\n                  description: 'Cursor value for next page, retrieved from nextCursor response value'\n                  schema:\n                      type: string\n                      example: 'eyIkb2lkIjoiNWRmMWZkMmQ3NzkyNTExOGI2MDdjNjg0In0'\n                - name: previous\n                  in: query\n                  description: 'Cursor value for previous page, retrieved from previousCursor response value'\n                  schema:\n                      type: string\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetTLSCertsResponse'\n        post:\n            tags:\n                - Certs\n            summary: Create or update TLS certificate for server name\n            description: \u003e\n                Add a new TLS certificate for a server name or update existing one. You can add a single certificate for each server name but SAN names are supported as well.\n                For example you can add a sertificate for \"mydomain.com\" that includes \"\\*.mydomain.com\" in SAN and the same certificate would be used for requests that do not have it's own server name registered but match the SAN value.\n\n                \u003e NB! you must ensure yourself that the `servername` value is actually listed in certificate's common name or SAN as WildDuck is going to use this certificate regardless.\n            operationId: updateTLSCertificate\n            requestBody:\n                description: Add a new TLS certificate for a server name or update existing one\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UpdateTLSCertRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UpdateTLSCertResponse'\n\n    '/certs/resolve/{servername}':\n        get:\n            tags:\n                - Certs\n            summary: Resolve ID for a server name\n            operationId: resolveTLSCertificate\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ResolveIdResponse'\n        parameters:\n            - name: servername\n              in: path\n              description: Server name\n              required: true\n              schema:\n                  type: string\n\n    '/domainaccess/{domain}':\n        delete:\n            tags:\n                - DomainAccess\n            summary: Delete a Domain from listing\n            operationId: deleteDomainListing\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: domain\n              in: path\n              description: Listed domains unique ID\n              required: true\n              schema:\n                  type: string\n    '/domainaccess/{tag}/allow':\n        get:\n            tags:\n                - DomainAccess\n            summary: List allowlisted domains\n            operationId: getAllowedDomain\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetAllowedDomainResponse'\n        post:\n            tags:\n                - DomainAccess\n            summary: Add domain to allowlist\n            description: If an email is sent from a domain that is listed in the allowlist then it is never marked as spam. Lists apply for tagged users.\n            operationId: createAllowedDomain\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateAllowedDomainRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CreateAllowedDomainResponse'\n        parameters:\n            - name: tag\n              in: path\n              description: Tag to look for\n              required: true\n              schema:\n                  type: string\n    '/domainaccess/{tag}/block':\n        get:\n            tags:\n                - DomainAccess\n            summary: List blocklisted domains\n            operationId: getBlockedDomain\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetBlockedDomainResponse'\n        post:\n            tags:\n                - DomainAccess\n            summary: Add domain to blocklist\n            description: If an email is sent from a domain that is listed in the blocklist then it is always marked as spam. Lists apply for tagged users.\n            operationId: createBlockedDomain\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateBlockedDomainRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CreateBlockedDomainResponse'\n        parameters:\n            - name: tag\n              in: path\n              description: Tag to look for\n              required: true\n              schema:\n                  type: string\n    '/domainaliases/{alias}':\n        delete:\n            tags:\n                - DomainAliases\n            summary: Delete an Alias\n            operationId: deleteDomainAlias\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        get:\n            tags:\n                - DomainAliases\n            summary: Request Alias information\n            operationId: getDomainAlias\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetDomainAliasResponse'\n        parameters:\n            - name: alias\n              in: path\n              description: ID of the Alias\n              required: true\n              schema:\n                  type: string\n    /domainaliases:\n        get:\n            tags:\n                - DomainAliases\n            summary: List registered Domain Aliases\n            operationId: getDomainAliases\n            parameters:\n                - name: query\n                  in: query\n                  description: Partial match of a Domain Alias or Domain name\n                  schema:\n                      type: string\n                - name: limit\n                  in: query\n                  description: How many records to return\n                  schema:\n                      type: number\n                - name: page\n                  in: query\n                  description: 'Current page number. Informational only, page numbers start from 1'\n                  schema:\n                      type: number\n                - name: next\n                  in: query\n                  description: 'Cursor value for next page, retrieved from nextCursor response value'\n                  schema:\n                      type: number\n                - name: previous\n                  in: query\n                  description: 'Cursor value for previous page, retrieved from previousCursor response value'\n                  schema:\n                      type: number\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetDomainAliasesResponse'\n        post:\n            tags:\n                - DomainAliases\n            summary: Create new Domain Alias\n            description: Add a new Alias for a Domain. This allows to accept mail on username@domain and username@alias\n            operationId: createDomainAlias\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateDomainAliasRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CreateDomainAliasResponse'\n    '/domainaliases/resolve/{alias}':\n        get:\n            tags:\n                - DomainAliases\n            summary: Resolve ID for a domain aias\n            operationId: resolveDomainAlias\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ResolveIdResponse'\n        parameters:\n            - name: alias\n              in: path\n              description: Alias domain\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/filters/{filter}':\n        delete:\n            tags:\n                - Filters\n            summary: Delete a Filter\n            operationId: deleteFilter\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        get:\n            tags:\n                - Filters\n            summary: Request Filter information\n            operationId: getFilter\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetFilterResponse'\n        put:\n            tags:\n                - Filters\n            summary: Update Filter information\n            description: 'This method updates Filter data. To unset a value, use empty strings'\n            operationId: updateFilter\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UpdateFilterRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UpdateFilterResponse'\n        parameters:\n            - name: user\n              in: path\n              description: Users unique ID\n              required: true\n              schema:\n                  type: string\n            - name: filter\n              in: path\n              description: Filters unique ID\n              required: true\n              schema:\n                  type: string\n\n    /filters:\n        get:\n            tags:\n                - Filters\n            summary: List all Filters\n            operationId: getAllFilters\n            parameters:\n                - name: forward\n                  in: query\n                  description: Partial match of a forward email address or URL\n                  schema:\n                      type: string\n                - name: limit\n                  in: query\n                  description: How many records to return\n                  schema:\n                      type: number\n                - name: page\n                  in: query\n                  description: 'Current page number. Informational only, page numbers start from 1'\n                  schema:\n                      type: number\n                - name: next\n                  in: query\n                  description: 'Cursor value for next page, retrieved from nextCursor response value'\n                  schema:\n                      type: number\n                - name: previous\n                  in: query\n                  description: 'Cursor value for previous page, retrieved from previousCursor response value'\n                  schema:\n                      type: number\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetAllFiltersResponse'\n\n    '/users/{user}/filters':\n        get:\n            tags:\n                - Filters\n            summary: List Filters for a User\n            operationId: getFilters\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetFiltersResponse'\n        post:\n            tags:\n                - Filters\n            summary: Create new Filter\n            operationId: createFilter\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateFilterRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UpdateFilterResponse'\n        parameters:\n            - name: user\n              in: path\n              description: Users unique ID\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/mailboxes/{mailbox}':\n        delete:\n            tags:\n                - Mailboxes\n            summary: Delete a Mailbox\n            operationId: deleteMailbox\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        get:\n            tags:\n                - Mailboxes\n            summary: Request Mailbox information\n            operationId: getMailbox\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetMailboxResponse'\n        put:\n            tags:\n                - Mailboxes\n            summary: Update Mailbox information\n            operationId: updateMailbox\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UpdateMailboxRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: user\n              in: path\n              description: Users unique ID\n              required: true\n              schema:\n                  type: string\n            - name: mailbox\n              in: path\n              description: Mailbox unique ID. Special use folders and INBOX can not be deleted\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/mailboxes':\n        get:\n            tags:\n                - Mailboxes\n            summary: List Mailboxes for a User\n            operationId: getMailboxes\n            parameters:\n                - name: specialUse\n                  in: query\n                  description: Should the response include only folders with specialUse flag set.\n                  schema:\n                      type: boolean\n                - name: showHidden\n                  in: query\n                  description: Hidden folders are not included in the listing by default.\n                  schema:\n                      type: boolean\n                - name: counters\n                  in: query\n                  description: Should the response include counters (total + unseen). Counters come with some overhead.\n                  schema:\n                      type: boolean\n                - name: sizes\n                  in: query\n                  description: Should the response include mailbox size in bytes. Size numbers come with a lot of overhead as an aggregated query is ran.\n                  schema:\n                      type: boolean\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetMailboxesResponse'\n        post:\n            tags:\n                - Mailboxes\n            summary: Create new Mailbox\n            operationId: createMailbox\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateMailboxRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CreateMailboxResponse'\n        parameters:\n            - name: user\n              in: path\n              description: Users unique ID\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/mailboxes/{mailbox}/messages/{message}':\n        delete:\n            tags:\n                - Messages\n            summary: Delete a Message\n            operationId: deleteMessage\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        get:\n            tags:\n                - Messages\n            summary: Request Message information\n            operationId: getMessage\n            parameters:\n                - name: markAsSeen\n                  in: query\n                  description: If true then marks message as seen\n                  schema:\n                      type: boolean\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetMessageResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n            - name: mailbox\n              in: path\n              description: ID of the Mailbox\n              required: true\n              schema:\n                  type: string\n            - name: message\n              in: path\n              description: Message ID\n              required: true\n              schema:\n                  type: number\n    '/users/{user}/mailboxes/{mailbox}/messages':\n        delete:\n            tags:\n                - Messages\n            summary: Delete all Messages from a Mailbox\n            operationId: deleteMessagesInMailbox\n            parameters:\n                - name: async\n                  in: query\n                  description: Schedule deletion task\n                  schema:\n                      type: boolean\n                      default: false\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DeleteMessagesInMailboxResponse'\n        get:\n            tags:\n                - Messages\n            summary: List messages in a Mailbox\n            operationId: getMessages\n            parameters:\n                - name: unseen\n                  in: query\n                  description: 'If true, then returns only unseen messages'\n                  schema:\n                      type: number\n                - name: metaData\n                  in: query\n                  description: 'If true, then includes metaData in the response'\n                  schema:\n                      type: boolean\n                - name: threadCounters\n                  in: query\n                  description: 'If true, then includes threadMessageCount in the response. Counters come with some overhead'\n                  schema:\n                      type: boolean\n                - name: limit\n                  in: query\n                  description: How many records to return\n                  schema:\n                      type: number\n                - name: page\n                  in: query\n                  description: 'Current page number. Informational only, page numbers start from 1'\n                  schema:\n                      type: number\n                - name: order\n                  in: query\n                  description: Ordering of the records by insert date\n                  schema:\n                      type: number\n                - name: next\n                  in: query\n                  description: 'Cursor value for next page, retrieved from nextCursor response value'\n                  schema:\n                      type: number\n                - name: previous\n                  in: query\n                  description: 'Cursor value for previous page, retrieved from previousCursor response value'\n                  schema:\n                      type: number\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetMessagesResponse'\n        put:\n            tags:\n                - Messages\n            summary: Update Message information\n            description: This method updates message flags and also allows to move messages to a different mailbox\n            operationId: updateMessage\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UpdateMessageRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UpdateMessageResponse'\n        post:\n            tags:\n                - Messages\n            summary: Upload Message\n            description: 'This method allows to upload either an RFC822 formatted message or a message structure to a mailbox. Raw message is stored unmodified, no headers are added or removed. If you want to generate the uploaded message from structured data fields, then do not use the raw property.'\n            operationId: uploadMessage\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UploadMessageRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UploadMessageResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n            - name: mailbox\n              in: path\n              description: ID of the Mailbox\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/mailboxes/{mailbox}/messages/{message}/forward':\n        post:\n            tags:\n                - Messages\n            summary: Forward stored Message\n            description: This method allows either to re-forward a message to an original forward target or forward it to some other address. This is useful if a user had forwarding turned on but the message was not delivered so you can try again. Forwarding does not modify the original message.\n            operationId: forwardStoredMessage\n            requestBody:\n                description: This method allows either to re-forward a message to an original forward target or forward it to some other address. This is useful if a user had forwarding turned on but the message was not delivered so you can try again. Forwarding does not modify the original message.\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ForwardStoredMessageRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ForwardStoredMessageResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n            - name: mailbox\n              in: path\n              description: ID of the Mailbox\n              required: true\n              schema:\n                  type: string\n            - name: message\n              in: path\n              description: Message ID\n              required: true\n              schema:\n                  type: number\n    '/users/{user}/mailboxes/{mailbox}/messages/{message}/attachments/{attachment}':\n        get:\n            tags:\n                - Messages\n            summary: Download Attachment\n            description: This method returns attachment file contents in binary form\n            operationId: getMessageAttachment\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/octet-stream:\n                            schema:\n                                type: string\n                                description: Success\n                                format: binary\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n            - name: mailbox\n              in: path\n              description: ID of the Mailbox\n              required: true\n              schema:\n                  type: string\n            - name: message\n              in: path\n              description: ID of the Message\n              required: true\n              schema:\n                  type: number\n            - name: attachment\n              in: path\n              description: ID of the Attachment\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/mailboxes/{mailbox}/messages/{message}/message.eml':\n        get:\n            tags:\n                - Messages\n            summary: Get Message source\n            description: This method returns the full RFC822 formatted source of the stored message\n            operationId: getMessageSource\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        text/plain:\n                            schema:\n                                type: object\n                                description: Success\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n            - name: mailbox\n              in: path\n              description: ID of the Mailbox\n              required: true\n              schema:\n                  type: string\n            - name: message\n              in: path\n              description: ID of the Message\n              required: true\n              schema:\n                  type: number\n    '/users/{user}/outbound/{queueId}':\n        delete:\n            tags:\n                - Messages\n            summary: Delete an Outbound Message\n            description: You can delete outbound emails that are still in queue. Queue ID can be found from the `outbound` property of a stored email.\n            operationId: deleteOutboundMessage\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n            - name: queueId\n              in: path\n              description: Outbound queue ID of the message\n              required: true\n              schema:\n                  type: string\n\n    '/users/{user}/search':\n        get:\n            tags:\n                - Messages\n            summary: Search for messages\n            operationId: searchMessages\n            parameters:\n                - name: mailbox\n                  in: query\n                  description: ID of the Mailbox\n                  schema:\n                      type: string\n                - name: thread\n                  in: query\n                  description: Thread ID\n                  schema:\n                      type: string\n                - name: query\n                  in: query\n                  description: 'Search string, uses MongoDB fulltext index. Covers data from mesage body and also common headers like from, to, subject etc.'\n                  schema:\n                      type: string\n                - name: datestart\n                  in: query\n                  description: Datestring for the earliest message storing time\n                  schema:\n                      type: string\n                      format: date-time\n                - name: dateend\n                  in: query\n                  description: Datestring for the latest message storing time\n                  schema:\n                      type: string\n                      format: date-time\n                - name: from\n                  in: query\n                  description: 'Partial match for the From: header line'\n                  schema:\n                      type: string\n                - name: to\n                  in: query\n                  description: 'Partial match for the To: and Cc: header lines'\n                  schema:\n                      type: string\n                - name: subject\n                  in: query\n                  description: 'Partial match for the Subject: header line'\n                  schema:\n                      type: string\n                - name: attachments\n                  in: query\n                  description: 'If true, then matches only messages with attachments'\n                  schema:\n                      type: boolean\n                - name: flagged\n                  in: query\n                  description: 'If true, then matches only messages with \\Flagged flags'\n                  schema:\n                      type: boolean\n                - name: unseen\n                  in: query\n                  description: 'If true, then matches only messages without \\Seen flags'\n                  schema:\n                      type: boolean\n                - name: searchable\n                  in: query\n                  description: 'If true, then matches messages not in Junk or Trash'\n                  schema:\n                      type: boolean\n                - name: or.query\n                  in: query\n                  description: 'Search string, uses MongoDB fulltext index. Covers data from mesage body and also common headers like from, to, subject etc.'\n                  schema:\n                      type: string\n                - name: or.from\n                  in: query\n                  description: 'Partial match for the From: header line'\n                  schema:\n                      type: string\n                - name: or.to\n                  in: query\n                  description: 'Partial match for the To: and Cc: header lines'\n                  schema:\n                      type: string\n                - name: or.subject\n                  in: query\n                  description: 'Partial match for the Subject: header line'\n                  schema:\n                      type: string\n                - name: minSize\n                  in: query\n                  description: Minimal message size in bytes\n                  schema:\n                      type: number\n                - name: maxSize\n                  in: query\n                  description: Maximal message size in bytes\n                  schema:\n                      type: number\n                - name: threadCounters\n                  in: query\n                  description: 'If true, then includes threadMessageCount in the response. Counters come with some overhead'\n                  schema:\n                      type: boolean\n                - name: limit\n                  in: query\n                  description: How many records to return\n                  schema:\n                      type: number\n                - name: page\n                  in: query\n                  description: 'Current page number. Informational only, page numbers start from 1'\n                  schema:\n                      type: number\n                - name: next\n                  in: query\n                  description: 'Cursor value for next page, retrieved from nextCursor response value'\n                  schema:\n                      type: number\n                - name: previous\n                  in: query\n                  description: 'Cursor value for previous page, retrieved from previousCursor response value'\n                  schema:\n                      type: number\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SearchMessagesResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/mailboxes/{mailbox}/messages/{message}/submit':\n        post:\n            tags:\n                - Messages\n            summary: Submit Draft for delivery\n            description: This method allows to submit a draft message for delivery. Draft is moved to Sent mail folder.\n            operationId: submitStoredMessage\n            requestBody:\n                description: This method allows to submit a draft message for delivery. Draft is moved to Sent mail folder.\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/SubmitStoredMessageRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SubmitStoredMessageResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n            - name: mailbox\n              in: path\n              description: ID of the Mailbox\n              required: true\n              schema:\n                  type: string\n            - name: message\n              in: path\n              description: Message ID\n              required: true\n              schema:\n                  type: number\n    '/users/{user}/storage/{file}':\n        delete:\n            tags:\n                - Storage\n            summary: Delete a File\n            operationId: deleteFile\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        get:\n            tags:\n                - Storage\n            summary: Download File\n            description: This method returns stored file contents in binary form\n            operationId: getFile\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/octet-stream:\n                            schema:\n                                type: string\n                                description: Success\n                                format: binary\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n            - name: file\n              in: path\n              description: ID of the File\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/storage':\n        get:\n            tags:\n                - Storage\n            summary: List stored files\n            operationId: getFiles\n            parameters:\n                - name: query\n                  in: query\n                  description: Partial match of a filename\n                  schema:\n                      type: string\n                - name: limit\n                  in: query\n                  description: How many records to return\n                  schema:\n                      type: number\n                - name: page\n                  in: query\n                  description: 'Current page number. Informational only, page numbers start from 1'\n                  schema:\n                      type: number\n                - name: next\n                  in: query\n                  description: 'Cursor value for next page, retrieved from nextCursor response value'\n                  schema:\n                      type: number\n                - name: previous\n                  in: query\n                  description: 'Cursor value for previous page, retrieved from previousCursor response value'\n                  schema:\n                      type: number\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetFilesResponse'\n        post:\n            tags:\n                - Storage\n            summary: Upload File\n            description: This method allows to upload an attachment to be linked from a draft\n            operationId: uploadFile\n            requestBody:\n                content:\n                    multipart/form-data:\n                        encoding: {}\n                        schema:\n                            required:\n                                - content\n                            type: object\n                            properties:\n                                filename:\n                                    type: string\n                                    description: Name of the file\n                                contentType:\n                                    type: string\n                                    description: MIME type of the file. Is detected from the file name by default\n                                encoding:\n                                    type: string\n                                    description: Encoding of the file content. Useful if you want to upload the file in base64 encoded format. Valid options \"base64\", \"hex\", \"utf8\"\n                                content:\n                                    type: string\n                                    format: binary\n                required: false\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UploadFileResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/submit':\n        post:\n            tags:\n                - Submission\n            summary: Submit a Message for Delivery\n            description: Use this method to send emails from a user account\n            operationId: submitMessage\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/SubmitMessageRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SubmitMessageResponse'\n        parameters:\n            - name: user\n              in: path\n              description: Users unique ID\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/2fa/totp/check':\n        post:\n            tags:\n                - TwoFactorAuth\n            summary: Validate TOTP Token\n            description: This method checks if a TOTP token provided by a User is valid for authentication\n            operationId: checkTotp2FA\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CheckTotp2FARequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/2fa':\n        delete:\n            tags:\n                - TwoFactorAuth\n            summary: Disable 2FA\n            description: This method disables all 2FA mechanisms a user might have set up\n            operationId: disable2FA\n            parameters:\n                - name: sess\n                  in: query\n                  description: Session identifier for the logs\n                  schema:\n                      type: string\n                - name: ip\n                  in: query\n                  description: IP address for the logs\n                  schema:\n                      type: string\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/2fa/custom':\n        delete:\n            tags:\n                - TwoFactorAuth\n            summary: Disable custom 2FA for a user\n            description: 'This method disables custom 2FA. If it was the only 2FA set up, then account password for IMAP/POP3/SMTP gets enabled again'\n            operationId: disableCustom2FA\n            parameters:\n                - name: sess\n                  in: query\n                  description: Session identifier for the logs\n                  schema:\n                      type: string\n                - name: ip\n                  in: query\n                  description: IP address for the logs\n                  schema:\n                      type: string\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        put:\n            tags:\n                - TwoFactorAuth\n            summary: Enable custom 2FA for a user\n            description: This method disables account password for IMAP/POP3/SMTP\n            operationId: enableCustom2FA\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/EnableCustom2FARequest'\n                required: false\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/2fa/totp':\n        delete:\n            tags:\n                - TwoFactorAuth\n            summary: Disable TOTP auth\n            description: This method disables TOTP for a user. Does not affect other 2FA mechanisms a user might have set up\n            operationId: disableTotp2FA\n            parameters:\n                - name: sess\n                  in: query\n                  description: Session identifier for the logs\n                  schema:\n                      type: string\n                - name: ip\n                  in: query\n                  description: IP address for the logs\n                  schema:\n                      type: string\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/2fa/totp/enable':\n        post:\n            tags:\n                - TwoFactorAuth\n            summary: Enable TOTP seed\n            description: This method enables TOTP for a user by verifying the seed value generated from 2fa/totp/setup\n            operationId: enableTotp2FA\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/EnableTotp2FARequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n    '/users/{user}/2fa/totp/setup':\n        post:\n            tags:\n                - TwoFactorAuth\n            summary: Generate TOTP seed\n            description: This method generates TOTP seed and QR code for 2FA. User needs to verify the seed value using 2fa/totp/enable endpoint\n            operationId: setupTotp2FA\n            requestBody:\n                description: This method generates TOTP seed and QR code for 2FA. User needs to verify the seed value using 2fa/totp/enable endpoint\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/SetupTotp2FARequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SetupTotp2FAResponse'\n        parameters:\n            - name: user\n              in: path\n              description: ID of the User\n              required: true\n              schema:\n                  type: string\n    '/users/{id}':\n        delete:\n            tags:\n                - Users\n            summary: Delete a User\n            description: 'This method deletes user and address entries from DB and schedules a background task to delete messages. You can call this method several times even if the user has already been deleted, in case there are still some pending messages.'\n            operationId: deleteUser\n            parameters:\n                - name: deleteAfter\n                  description: Delete user entry from registry but keep all user data until provided date. User account is fully recoverable up to that date.\n                  in: query\n                  schema:\n                      type: string\n                      format: date-time\n                - name: sess\n                  in: query\n                  description: Session identifier for the logs\n                  schema:\n                      type: string\n                - name: ip\n                  in: query\n                  description: IP address for the logs\n                  schema:\n                      type: string\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        get:\n            tags:\n                - Users\n            summary: Request User information\n            operationId: getUser\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetUserResponse'\n        put:\n            tags:\n                - Users\n            summary: Update User information\n            operationId: updateUser\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UpdateUserRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: id\n              in: path\n              description: Users unique ID.\n              required: true\n              schema:\n                  type: string\n    '/users/{id}/updates':\n        get:\n            tags:\n                - Users\n            summary: Open change stream\n            description: This api call returns an EventSource response. Listen on this stream to get notifications about changes in messages and mailboxes. Returned events are JSON encoded strings\n            operationId: getUpdates\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        text/event-stream:\n                            schema:\n                                type: string\n                                description: Success\n        parameters:\n            - name: id\n              in: path\n              description: Users unique ID.\n              required: true\n              schema:\n                  type: string\n    '/users/resolve/{username}':\n        get:\n            tags:\n                - Users\n            summary: Resolve ID for a username\n            operationId: resolveUser\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ResolveIdResponse'\n        parameters:\n            - name: username\n              in: path\n              description: 'Username of the User. Alphanumeric value. Must start with a letter, dots are allowed but informational only (\"user.name\" is the same as \"username\")'\n              required: true\n              schema:\n                  type: string\n\n    '/users/{id}/restore':\n        get:\n            tags:\n                - Users\n            summary: Return recovery info for a deleted user\n            operationId: restoreUserInfo\n            parameters:\n                - name: sess\n                  in: query\n                  description: Session identifier for the logs\n                  schema:\n                      type: string\n                - name: ip\n                  in: query\n                  description: IP address for the logs\n                  schema:\n                      type: string\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/RecoverInfoResponse'\n        post:\n            tags:\n                - Users\n            summary: Cancel user deletion task\n            description: 'Use this endpoint to cancel a timed deletion task scheduled by `DELETE /user/{id}`. If user data is not yet deleted then the account is fully recovered, except any email addresses that might have been already recycled'\n            operationId: restoreUser\n\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UserRestoreRequest'\n                required: true\n\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: id\n              in: path\n              description: Users unique ID.\n              required: true\n              schema:\n                  type: string\n    /users:\n        get:\n            tags:\n                - Users\n            summary: List registered Users\n            operationId: getUsers\n            parameters:\n                - name: query\n                  in: query\n                  description: Partial match of username or default email address\n                  schema:\n                      type: string\n                - name: forward\n                  in: query\n                  description: Partial match of a forward email address or URL\n                  schema:\n                      type: string\n                - name: tags\n                  in: query\n                  description: Comma separated list of tags. The User must have at least one to be set\n                  schema:\n                      type: string\n                - name: requiredTags\n                  in: query\n                  description: Comma separated list of tags. The User must have all listed tags to be set\n                  schema:\n                      type: string\n                - name: metaData\n                  in: query\n                  description: 'If true, then includes metaData in the response'\n                  schema:\n                      type: boolean\n                - name: internalData\n                  in: query\n                  description: 'If true, then includes internalData in the response. Not shown for user-role tokens.'\n                  schema:\n                      type: boolean\n                - name: limit\n                  in: query\n                  description: How many records to return\n                  schema:\n                      type: number\n                - name: page\n                  in: query\n                  description: 'Current page number. Informational only, page numbers start from 1'\n                  schema:\n                      type: number\n                - name: next\n                  in: query\n                  description: 'Cursor value for next page, retrieved from nextCursor response value'\n                  schema:\n                      type: number\n                - name: previous\n                  in: query\n                  description: 'Cursor value for previous page, retrieved from previousCursor response value'\n                  schema:\n                      type: number\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetUsersResponse'\n        post:\n            tags:\n                - Users\n            summary: Create new user\n            operationId: createUser\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateUserRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CreateUserResponse'\n    '/users/{user}/quota/reset':\n        post:\n            tags:\n                - Users\n            summary: Recalculate User quota\n            description: 'This method recalculates quota usage for a User. Normally not needed, only use it if quota numbers are way off. This method is not transactional, so if the user is currently receiving new messages then the resulting value is not exact.'\n            operationId: recalculateQuota\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/RecalculateQuotaResponse'\n        parameters:\n            - name: user\n              in: path\n              description: Users unique ID.\n              required: true\n              schema:\n                  type: string\n    /quota/reset:\n        post:\n            tags:\n                - Users\n            summary: Recalculate Quota for all Users\n            description: 'This method recalculates quota usage for all Users. Normally not needed, only use it if quota numbers are way off. This method is not transactional, so if the user is currently receiving new messages then the resulting value is not exact.'\n            operationId: recalculateQuotaAllUsers\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n    '/users/{id}/logout':\n        put:\n            tags:\n                - Users\n            summary: Log out User\n            description: This method logs out all user sessions in IMAP\n            operationId: logoutUser\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/LogoutUserRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: id\n              in: path\n              description: Users unique ID.\n              required: true\n              schema:\n                  type: string\n    '/users/{id}/password/reset':\n        post:\n            tags:\n                - Users\n            summary: Reset password for a User\n            description: This method generates a new temporary password for a User. Additionally it removes all two-factor authentication settings\n            operationId: resetUserPassword\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ResetUserPasswordRequest'\n                required: false\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ResetUserPasswordResponse'\n        parameters:\n            - name: id\n              in: path\n              description: Users unique ID.\n              required: true\n              schema:\n                  type: string\n\n    '/webhooks/{webhook}':\n        delete:\n            tags:\n                - Webhooks\n            summary: Delete a webhook\n            operationId: deleteWebhook\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n        parameters:\n            - name: webhook\n              in: path\n              description: ID of the Webhook\n              required: true\n              schema:\n                  type: string\n    /webhooks:\n        get:\n            tags:\n                - Webhooks\n            summary: List registered Webhooks\n            operationId: getWebhooks\n            parameters:\n                - name: type\n                  in: query\n                  description: 'Prefix or exact match. Prefix match must end with \".*\", eg \"channel.*\". Use \"*\" for all types'\n                  required: true\n                  schema:\n                      type: string\n                - name: user\n                  in: query\n                  description: User ID\n                  schema:\n                      type: string\n                - name: limit\n                  in: query\n                  description: How many records to return\n                  schema:\n                      type: number\n                - name: page\n                  in: query\n                  description: 'Current page number. Informational only, page numbers start from 1'\n                  schema:\n                      type: number\n                - name: next\n                  in: query\n                  description: 'Cursor value for next page, retrieved from nextCursor response value'\n                  schema:\n                      type: number\n                - name: previous\n                  in: query\n                  description: 'Cursor value for previous page, retrieved from previousCursor response value'\n                  schema:\n                      type: number\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetWebhooksResponse'\n        post:\n            tags:\n                - Webhooks\n            summary: Create new Webhook\n            description: Create new webhook\n            operationId: createWebhook\n            requestBody:\n                description: Create new webhook\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateWebhookRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CreateWebhookResponse'\n\n    '/settings/{setting}':\n        get:\n            tags:\n                - Settings\n            summary: Get Setting value\n            operationId: getSetting\n            parameters:\n                - name: sess\n                  in: query\n                  description: Session identifier for the logs\n                  schema:\n                      type: string\n                - name: ip\n                  in: query\n                  description: IP address for the logs\n                  schema:\n                      type: string\n\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetSettingResponse'\n\n        post:\n            tags:\n                - Settings\n            summary: Create or Update Setting\n            description: Create a new or update an existing setting\n            operationId: createSetting\n            requestBody:\n                description: Create or Update Setting\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateSettingRequest'\n                required: true\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CreateSettingResponse'\n\n        delete:\n            tags:\n                - Settings\n            summary: Delete a setting\n            operationId: deleteSetting\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/SuccessResponse'\n\n        parameters:\n            - name: setting\n              in: path\n              description: Key of the Setting\n              required: true\n              schema:\n                  type: string\n\n    /settings:\n        get:\n            tags:\n                - Settings\n            summary: List registered Settings\n            operationId: getSettings\n            parameters:\n                - name: filter\n                  in: query\n                  description: 'Optional partial match of the Setting key'\n                  schema:\n                      type: string\n                - name: sess\n                  in: query\n                  description: Session identifier for the logs\n                  schema:\n                      type: string\n                - name: ip\n                  in: query\n                  description: IP address for the logs\n                  schema:\n                      type: string\n\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetSettingsResponse'\n\ncomponents:\n    schemas:\n        AddressLimits:\n            required:\n                - forwards\n            type: object\n            properties:\n                forwards:\n                    $ref: '#/components/schemas/Forwards'\n            description: Account limits and usage\n        AutoreplyInfo:\n            required:\n                - status\n                - name\n                - subject\n                - text\n                - html\n            type: object\n            properties:\n                status:\n                    type: boolean\n                    description: 'If true, then autoreply is enabled for this address'\n                name:\n                    type: string\n                    description: 'Name that is used for the From: header in autoreply message'\n                subject:\n                    type: string\n                    description: Autoreply subject line\n                text:\n                    type: string\n                    description: Autoreply plaintext content\n                html:\n                    type: string\n                    description: Autoreply HTML content\n            description: Autoreply information\n        Autoreply:\n            type: object\n            properties:\n                status:\n                    type: boolean\n                    description: 'If true, then autoreply is enabled for this address'\n                start:\n                    type: string\n                    format: date-time\n                    description: Either a date string or boolean false to disable start time checks\n                end:\n                    type: string\n                    format: date-time\n                    description: Either a date string or boolean false to disable end time checks\n                name:\n                    type: string\n                    description: 'Name that is used for the From: header in autoreply message'\n                subject:\n                    type: string\n                    description: Autoreply subject line\n                text:\n                    type: string\n                    description: Autoreply plaintext content\n                html:\n                    type: string\n                    description: Autoreply HTML content\n            description: Autoreply information\n        LastUse:\n            required:\n                - time\n                - event\n            type: object\n            properties:\n                time:\n                    type: string\n                    description: Datestring of last use or false if password has not been used\n                    format: date-time\n                event:\n                    type: string\n                    description: Event ID of the security log for the last authentication\n            description: Information about last use\n        ContentType:\n            required:\n                - value\n                - params\n            type: object\n            properties:\n                value:\n                    type: string\n                    description: 'MIME type of the message, eg. \"multipart/mixed\"'\n                params:\n                    type: object\n                    description: An object with Content-Type params as key-value pairs\n            description: Parsed Content-Type header. Usually needed to identify encrypted messages and such\n        DnsTxt:\n            required:\n                - name\n                - value\n            type: object\n            properties:\n                name:\n                    type: string\n                    description: Is the domain name of TXT\n                value:\n                    type: string\n                    description: Is the value of TXT\n            description: Value for DNS TXT entry\n        Query:\n            type: object\n            properties:\n                from:\n                    type: string\n                    description: 'Partial match for the From: header (case insensitive)'\n                to:\n                    type: string\n                    description: 'Partial match for the To:/Cc: headers (case insensitive)'\n                subject:\n                    type: string\n                    description: 'Partial match for the Subject: header (case insensitive)'\n                listId:\n                    type: string\n                    description: 'Partial match for the List-ID: header (case insensitive)'\n                text:\n                    type: string\n                    description: Fulltext search against message text\n                ha:\n                    type: boolean\n                    description: Does a message have to have an attachment or not\n                size:\n                    type: number\n                    description: 'Message size in bytes. If the value is a positive number then message needs to be larger, if negative then message needs to be smaller than abs(size) value'\n            description: Rules that a message must match\n        Action:\n            type: object\n            properties:\n                seen:\n                    type: boolean\n                    description: If true then mark matching messages as Seen\n                flag:\n                    type: boolean\n                    description: If true then mark matching messages as Flagged\n                delete:\n                    type: boolean\n                    description: If true then do not store matching messages\n                spam:\n                    type: boolean\n                    description: If true then store matching messags to Junk Mail folder\n                mailbox:\n                    type: string\n                    description: Mailbox ID to store matching messages to\n                targets:\n                    type: array\n                    items:\n                        type: string\n                    description: 'An array of forwarding targets. The value could either be an email address or a relay url to next MX server (\"smtp://mx2.zone.eu:25\") or an URL where mail contents are POSTed to'\n            description: Action to take with a matching message\n        SpecialUse:\n            enum:\n                - \\Drafts\n                - \\Junk\n                - \\Sent\n                - \\Trash\n            type: string\n            description: 'Either special use identifier or null. One of \\Drafts, \\Junk, \\Sent or \\Trash'\n        Envelope:\n            required:\n                - from\n                - rcpt\n            type: object\n            properties:\n                from:\n                    type: string\n                    description: Address from MAIL FROM\n                rcpt:\n                    $ref: '#/components/schemas/Rcpt'\n            description: SMTP envelope (if available)\n        Rcpt:\n            required:\n                - value\n                - formatted\n            type: object\n            properties:\n                value:\n                    type: string\n                    description: RCPT TO address as provided by SMTP client\n                formatted:\n                    type: string\n                    description: Normalized RCPT address\n            description: Array of addresses from RCPT TO (should have just one normally)\n        Address:\n            required:\n                - name\n                - address\n            type: object\n            properties:\n                name:\n                    type: string\n                    description: Name of the sender/recipient\n                address:\n                    type: string\n                    description: Address of the sender/recipient\n        AddressOptionalName:\n            required:\n                - address\n            type: object\n            properties:\n                name:\n                    type: string\n                    description: Name of the sender\n                address:\n                    type: string\n                    description: Address of the sender\n        List:\n            required:\n                - id\n                - unsubscribe\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Value from List-ID header\n                unsubscribe:\n                    type: string\n                    description: Value from List-Unsubscribe header\n            description: If set then this message is from a mailing list\n\n        Outbound:\n            required:\n                - queueId\n                - entries\n            type: object\n            properties:\n                queueId:\n                    type: string\n                    description: Queue ID\n                entries:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/OutboundQueueEntry'\n                    description: Queued recipients\n        OutboundQueueEntry:\n            required:\n                - seq\n                - recipient\n            type: object\n            properties:\n                seq:\n                    type: string\n                    description: Queue target ID\n                recipient:\n                    type: string\n                    description: Target recipient\n                sendingZone:\n                    type: string\n                    description: Zone ID in ZoneMTA\n                queued:\n                    type: string\n                    description: ISO Date of the expected delivery time\n        Attachments:\n            required:\n                - id\n                - filename\n                - contentType\n                - disposition\n                - transferEncoding\n                - related\n                - sizeKb\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Attachment ID\n                hash:\n                    type: string\n                    description: SHA-256 hash of the contents of the attachment\n                filename:\n                    type: string\n                    description: Filename of the attachment\n                contentType:\n                    type: string\n                    description: MIME type\n                disposition:\n                    type: string\n                    description: Attachment disposition\n                transferEncoding:\n                    type: string\n                    description: Which transfer encoding was used (actual content when fetching attachments is not encoded)\n                related:\n                    type: boolean\n                    description: Was this attachment found from a multipart/related node. This usually means that this is an embedded image\n                sizeKb:\n                    type: number\n                    description: Approximate size of the attachment in kilobytes\n            description: List of attachments for this message\n        VerificationResults:\n            required:\n                - tls\n                - spf\n                - dkim\n            type: object\n            properties:\n                tls:\n                    $ref: '#/components/schemas/Tls'\n                spf:\n                    type: object\n                    description: Domain name (either MFROM or HELO) of verified SPF or false if no SPF match was found\n                dkim:\n                    type: object\n                    description: Domain name of verified DKIM signature or false if no valid signature was found\n            description: 'Security verification info if message was received from MX. If this property is missing then do not automatically assume invalid TLS, SPF or DKIM.'\n        Tls:\n            required:\n                - name\n                - version\n            type: object\n            properties:\n                name:\n                    type: object\n                    description: 'Cipher name, eg \"ECDHE-RSA-AES128-GCM-SHA256\"'\n                version:\n                    type: object\n                    description: 'TLS version, eg \"TLSv1/SSLv3\"'\n            description: TLS information. Value is false if TLS was not used\n        Files:\n            required:\n                - id\n                - filename\n                - contentType\n                - size\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: File ID\n                filename:\n                    type: string\n                    description: Filename of the attached file\n                contentType:\n                    type: string\n                    description: MIME type\n                size:\n                    type: number\n                    description: MIME type\n            description: 'List of files added to this message as attachments. Applies to Drafts, normal messages do not have this property. Needed to prevent uploading the same attachment every time a draft is updated'\n        Header:\n            required:\n                - key\n                - value\n            type: object\n            properties:\n                key:\n                    type: string\n                    description: Header key ('X-Mailer')\n                value:\n                    type: string\n                    description: Header value ('My Awesome Mailing Service')\n        AttachmentsUpload:\n            required:\n                - content\n            type: object\n            properties:\n                content:\n                    type: string\n                    description: Base64 encoded attachment content\n                filename:\n                    type: string\n                    description: Attachment filename\n                contentType:\n                    type: string\n                    description: MIME type for the attachment file\n                cid:\n                    type: string\n                    description: Content-ID value if you want to reference to this attachment from HTML formatted message\n        ReferenceWithAttachments:\n            required:\n                - mailbox\n                - id\n                - action\n                - attachments\n            type: object\n            properties:\n                mailbox:\n                    type: string\n                    description: Mailbox ID\n                id:\n                    type: number\n                    description: Message ID in Mailbox\n                action:\n                    type: string\n                    description: 'Either reply, replyAll or forward'\n                attachments:\n                    type: array\n                    items:\n                        type: string\n                    description: \"If true, then includes all attachments from the original message. If it is an array of attachment ID's includes attachments from the list\"\n            description: Optional referenced email. If uploaded message is a reply draft and relevant fields are not provided then these are resolved from the message to be replied to\n        Message:\n            required:\n                - id\n                - mailbox\n            type: object\n            properties:\n                id:\n                    type: number\n                    description: Message ID in mailbox\n                mailbox:\n                    type: string\n                    description: Mailbox ID the message was stored into\n            description: Message information\n            title: ''\n        Forwarded:\n            required:\n                - seq\n                - type\n                - value\n            type: object\n            properties:\n                seq:\n                    type: string\n                    description: Sequence ID\n                type:\n                    type: string\n                    description: Target type\n                value:\n                    type: string\n                    description: Target address\n        Reference:\n            required:\n                - mailbox\n                - id\n                - action\n            type: object\n            properties:\n                mailbox:\n                    type: string\n                    description: Mailbox ID\n                id:\n                    type: number\n                    description: Message ID in Mailbox\n                action:\n                    type: string\n                    description: 'Either reply, replyAll or forward'\n            description: Optional referenced email. If submitted message is a reply and relevant fields are not provided then these are resolved from the message to be replied to\n        EnvelopeUpload:\n            type: object\n            properties:\n                from:\n                    $ref: '#/components/schemas/AddressOptionalName'\n                to:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AddressOptionalName'\n                    description: Recipients information\n            description: SMTP envelope. If not provided then resolved either from message headers or from referenced message\n        MessageWithQueueId:\n            required:\n                - mailbox\n                - id\n                - queueId\n            type: object\n            properties:\n                mailbox:\n                    type: string\n                    description: Mailbox ID the message was stored to\n                id:\n                    type: number\n                    description: Message ID in Mailbox\n                queueId:\n                    type: string\n                    description: Queue ID in MTA\n            description: Information about submitted Message\n        KeyInfo:\n            required:\n                - name\n                - address\n                - fingerprint\n            type: object\n            properties:\n                name:\n                    type: string\n                    description: Name listed in public key\n                address:\n                    type: string\n                    description: E-mail address listed in public key\n                fingerprint:\n                    type: string\n                    description: Fingerprint of the public key\n            description: Information about public key or false if key is not available\n        UserLimits:\n            required:\n                - quota\n                - recipients\n                - forwards\n                - received\n                - imapUpload\n                - imapDownload\n                - pop3Download\n            type: object\n            properties:\n                quota:\n                    $ref: '#/components/schemas/Quota'\n                recipients:\n                    $ref: '#/components/schemas/Recipients'\n                forwards:\n                    $ref: '#/components/schemas/Forwards'\n                received:\n                    $ref: '#/components/schemas/Received'\n                imapUpload:\n                    $ref: '#/components/schemas/ImapUpload'\n                imapDownload:\n                    $ref: '#/components/schemas/ImapDownload'\n                pop3Download:\n                    $ref: '#/components/schemas/Pop3Download'\n                imapMaxConnections:\n                    $ref: '#/components/schemas/ImapMaxConnections'\n            description: Account limits and usage\n        Quota:\n            required:\n                - allowed\n                - used\n            type: object\n            properties:\n                allowed:\n                    type: number\n                    description: Allowed quota of the user in bytes\n                used:\n                    type: number\n                    description: Space used in bytes\n            description: Quota usage limits\n        Recipients:\n            required:\n                - allowed\n                - used\n                - ttl\n            type: object\n            properties:\n                allowed:\n                    type: number\n                    description: How many messages per 24 hours can be sent\n                used:\n                    type: number\n                    description: How many messages are sent during current 24 hour period\n                ttl:\n                    type: number\n                    description: Time until the end of current 24 hour period\n            description: Sending quota\n        Forwards:\n            required:\n                - allowed\n                - used\n                - ttl\n            type: object\n            properties:\n                allowed:\n                    type: number\n                    description: How many messages per 24 hours can be forwarded\n                used:\n                    type: number\n                    description: How many messages are forwarded during current 24 hour period\n                ttl:\n                    type: number\n                    description: Time until the end of current 24 hour period\n            description: Forwarding quota\n        Received:\n            required:\n                - allowed\n                - used\n                - ttl\n            type: object\n            properties:\n                allowed:\n                    type: number\n                    description: How many messages per 1 hour can be received\n                used:\n                    type: number\n                    description: How many messages are received during current 1 hour period\n                ttl:\n                    type: number\n                    description: Time until the end of current 1 hour period\n            description: Receiving quota\n        ImapUpload:\n            required:\n                - allowed\n                - used\n                - ttl\n            type: object\n            properties:\n                allowed:\n                    type: number\n                    description: 'How many bytes per 24 hours can be uploaded via IMAP. Only message contents are counted, not protocol overhead.'\n                used:\n                    type: number\n                    description: How many bytes are uploaded during current 24 hour period\n                ttl:\n                    type: number\n                    description: Time until the end of current 24 hour period\n            description: IMAP upload quota\n        ImapDownload:\n            required:\n                - allowed\n                - used\n                - ttl\n            type: object\n            properties:\n                allowed:\n                    type: number\n                    description: 'How many bytes per 24 hours can be downloaded via IMAP. Only message contents are counted, not protocol overhead.'\n                used:\n                    type: number\n                    description: How many bytes are downloaded during current 24 hour period\n                ttl:\n                    type: number\n                    description: Time until the end of current 24 hour period\n            description: IMAP download quota\n        Pop3Download:\n            required:\n                - allowed\n                - used\n                - ttl\n            type: object\n            properties:\n                allowed:\n                    type: number\n                    description: 'How many bytes per 24 hours can be downloaded via POP3. Only message contents are counted, not protocol overhead.'\n                used:\n                    type: number\n                    description: How many bytes are downloaded during current 24 hour period\n                ttl:\n                    type: number\n                    description: Time until the end of current 24 hour period\n            description: POP3 download quota\n        ImapMaxConnections:\n            required:\n                - allowed\n                - used\n            type: object\n            properties:\n                allowed:\n                    type: number\n                    description: How many parallel IMAP connections are permitted\n                used:\n                    type: number\n                    description: How many parallel IMAP connections are currenlty in use\n        Mailboxes:\n            type: object\n            properties:\n                sent:\n                    type: string\n                    description: Path of Sent Mail folder\n                junk:\n                    type: string\n                    description: Path of spam folder\n                drafts:\n                    type: string\n                    description: Path of drafts folder\n                trash:\n                    type: string\n                    description: Path of trash folder\n            description: Optional names for special mailboxes\n        SuccessResponse:\n            required:\n                - success\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n        UploadMessageRequest:\n            type: object\n            properties:\n                unseen:\n                    type: boolean\n                    description: Is the message unseen or not\n                draft:\n                    type: boolean\n                    description: Is the message a draft or not\n                flagged:\n                    type: boolean\n                    description: Is the message flagged or not\n                raw:\n                    type: string\n                    description: 'base64 encoded message source. Alternatively, you can provide this value as POST body by using message/rfc822 MIME type. If raw message is provided then it overrides any other mail configuration'\n                from:\n                    $ref: '#/components/schemas/Address'\n                to:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AddressOptionalName'\n                    description: 'Addresses for the To: header'\n                cc:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AddressOptionalName'\n                    description: 'Addresses for the Cc: header'\n                bcc:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AddressOptionalName'\n                    description: 'Addresses for the Bcc: header'\n                subject:\n                    type: string\n                    description: Message subject. If not then resolved from Reference message\n                text:\n                    type: string\n                    description: Plaintext message\n                html:\n                    type: string\n                    description: HTML formatted message\n                headers:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Header'\n                    description: Custom headers for the message. If reference message is set then In-Reply-To and References headers are set  automaticall y\n                files:\n                    type: array\n                    items:\n                        type: string\n                    description: Attachments as storage file IDs. NB! When retrieving message info then an array of objects is returned. When uploading a message then an array of IDs is used.\n                attachments:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AttachmentsUpload'\n                    description: Attachments for the message\n                metaData:\n                    description: 'Optional metadata, must be an object or JSON formatted string'\n                    oneOf:\n                        - type: object\n                        - type: string\n                reference:\n                    $ref: '#/components/schemas/ReferenceWithAttachments'\n                replacePrevious:\n                    type: object\n                    description: If set, then deletes a previous message when storing the new one. Useful when uploading a new Draft message.\n                    required:\n                        - id\n                    properties:\n                        mailbox:\n                            type: string\n                            description: Mailbox ID. Defaults to the mailbox of the uploaded message.\n                        id:\n                            type: number\n                            description: Message ID in Mailbox\n                sess:\n                    type: string\n                    description: Session identifier for the logs\n                ip:\n                    type: string\n                    description: IP address for the logs\n        ForwardStoredMessageRequest:\n            type: object\n            properties:\n                target:\n                    type: number\n                    description: Number of original forwarding target\n                addresses:\n                    type: array\n                    description: An array of additional forward targets\n                    items:\n                        type: string\n        UploadMessageResponse:\n            required:\n                - success\n                - message\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                message:\n                    $ref: '#/components/schemas/Message'\n                previousDeleted:\n                    type: boolean\n                    description: Set if replacing a previous message was requested\n        ForwardStoredMessageResponse:\n            required:\n                - success\n                - queueId\n                - forwarded\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                queueId:\n                    type: string\n                    description: Message ID in outbound queue\n                forwarded:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Forwarded'\n                    description: Information about forwarding targets\n        UploadFileResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: object\n                    description: File ID\n        GetForwardedAddressResponse:\n            required:\n                - success\n                - id\n                - address\n                - name\n                - targets\n                - limits\n                - autoreply\n                - created\n                - tags\n                - forwardedDisabled\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of the Address\n                address:\n                    type: string\n                    description: E-mail address string\n                name:\n                    type: string\n                    description: Identity name\n                targets:\n                    type: array\n                    items:\n                        type: string\n                    description: List of forwarding targets\n                limits:\n                    $ref: '#/components/schemas/AddressLimits'\n                autoreply:\n                    $ref: '#/components/schemas/AutoreplyInfo'\n                created:\n                    type: string\n                    description: Datestring of the time the address was created\n                    format: date-time\n                tags:\n                    type: array\n                    items:\n                        type: string\n                    description: List of tags associated with the Address\n                forwardedDisabled:\n                    type: boolean\n                    description: If true then the forwarded address is disabled\n        GetUserAddressResponse:\n            required:\n                - success\n                - id\n                - name\n                - address\n                - tags\n                - main\n                - created\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of the Address\n                name:\n                    type: string\n                    description: Identity name\n                address:\n                    type: string\n                    description: E-mail address string\n                tags:\n                    type: array\n                    items:\n                        type: string\n                    description: List of tags associated with the Address\n                metaData:\n                    type: object\n                    description: Metadata object (if available)\n                internalData:\n                    type: object\n                    description: 'Internal metadata object (if available), not included for user-role requests'\n                main:\n                    type: boolean\n                    description: Indicates if this is the default address for the User\n                created:\n                    type: string\n                    description: Datestring of the time the address was created\n                    format: date-time\n        ResolveAddressResponse:\n            required:\n                - success\n                - id\n                - address\n                - name\n                - user\n                - targets\n                - limits\n                - autoreply\n                - tags\n                - created\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of the Address\n                address:\n                    type: string\n                    description: E-mail address string\n                name:\n                    type: string\n                    description: Identity name\n                user:\n                    type: string\n                    description: ID of the user if the address belongs to a User\n                targets:\n                    type: array\n                    items:\n                        type: string\n                    description: List of forwarding targets if this is a Forwarded address\n                limits:\n                    $ref: '#/components/schemas/AddressLimits'\n                autoreply:\n                    $ref: '#/components/schemas/AutoreplyInfo'\n                tags:\n                    type: array\n                    items:\n                        type: string\n                    description: List of tags associated with the Address\n                created:\n                    type: string\n                    description: Datestring of the time the address was created\n                    format: date-time\n        GetAddressesResponse:\n            required:\n                - success\n                - total\n                - page\n                - previousCursor\n                - nextCursor\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                total:\n                    type: number\n                    description: How many results were found\n                page:\n                    type: number\n                    description: Current page number. Derived from page query argument\n                previousCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any previous results\n                nextCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any next results\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetAddressesResult'\n                    description: Address listing\n        GetUserAddressesResponse:\n            required:\n                - success\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetUserAddressesResult'\n                    description: Address listing\n        CreateUserAddressResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of the Address\n        GetUserAddressesregisterResponse:\n            required:\n                - success\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetUserAddressesregisterResult'\n                    description: Address listing\n        CreateForwardedAddressResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of the Address\n        GetASPResponse:\n            required:\n                - success\n                - id\n                - description\n                - scopes\n                - lastUse\n                - created\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of the Application Password\n                description:\n                    type: string\n                    description: Description\n                scopes:\n                    type: array\n                    items:\n                        type: string\n                    description: Allowed scopes for the Application Password\n                lastUse:\n                    $ref: '#/components/schemas/LastUse'\n                created:\n                    type: string\n                    description: Datestring\n                    format: date-time\n        GetASPsResponse:\n            required:\n                - success\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetASPsResult'\n                    description: Event listing\n        CreateASPResponse:\n            required:\n                - success\n                - id\n                - password\n                - mobileconfig\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                    example: true\n                id:\n                    type: string\n                    description: ID of the Application Password\n                    example: '60b91b5cc419d97445f8e57d'\n                password:\n                    type: string\n                    description: 'Application Specific Password. Generated password is whitespace agnostic, so it could be displayed to the client as \"abcd efgh ijkl mnop\" instead of \"abcdefghijklmnop\"'\n                    example: 'aaaaaaaaaaaaaaaa'\n                mobileconfig:\n                    type: string\n                    description: Base64 encoded mobileconfig file. Generated profile file should be sent to the client with Content-Type value of application/x-apple-aspen-config.\n        GetArchivedMessagesResponse:\n            required:\n                - success\n                - total\n                - page\n                - previousCursor\n                - nextCursor\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                total:\n                    type: number\n                    description: How many results were found\n                page:\n                    type: number\n                    description: Current page number. Derived from page query argument\n                previousCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any previous results\n                nextCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any next results\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetArchivedMessagesResult'\n                    description: Message listing\n        RestoreMessageResponse:\n            required:\n                - success\n                - mailbox\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                mailbox:\n                    type: string\n                    description: Maibox ID the message was moved to\n                id:\n                    type: number\n                    description: New ID for the Message\n        GetAuditResponse:\n            required:\n                - success\n                - user\n                - expires\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                user:\n                    type: string\n                    description: Users unique ID.\n                start:\n                    type: string\n                    description: Start time as ISO date\n                    format: date-time\n                end:\n                    type: string\n                    description: End time as ISO date\n                    format: date-time\n                expires:\n                    type: string\n                    description: Expiration date. Audit data is deleted after this date\n                    format: date-time\n        CreateAuditResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID for the created Audit\n        AuthenticateResponse:\n            required:\n                - success\n                - id\n                - username\n                - scope\n                - require2fa\n                - requirePasswordChange\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of authenticated User\n                username:\n                    type: string\n                    description: Username of authenticated User\n                scope:\n                    type: string\n                    description: The scope this authentication is valid for\n                require2fa:\n                    type: array\n                    items:\n                        type: string\n                    description: List of enabled 2FA mechanisms\n                requirePasswordChange:\n                    type: boolean\n                    description: Indicates if account hassword has been reset and should be replaced\n                token:\n                    type: string\n                    description: If access token was requested then this is the value to use as access token when making API requests on behalf of logged in user.\n        GetAuthlogResponse:\n            required:\n                - success\n                - total\n                - page\n                - previousCursor\n                - nextCursor\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                total:\n                    type: number\n                    description: How many results were found\n                page:\n                    type: number\n                    description: Current page number. Derived from page query argument\n                previousCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any previous results\n                nextCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any next results\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetAuthlogResult'\n                    description: Event listing\n        GetAuthlogEventResponse:\n            required:\n                - success\n                - id\n                - action\n                - result\n                - created\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of the Event\n                action:\n                    type: string\n                    description: Action identifier\n                result:\n                    type: string\n                    description: Did the action succeed\n                sess:\n                    type: string\n                    description: Session identifier\n                ip:\n                    type: string\n                    description: IP address of the Event\n                created:\n                    type: string\n                    description: Datestring of the Event time\n                    format: date-time\n\n        GetAutoreplyResponse:\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                status:\n                    type: boolean\n                    description: Is the autoreply enabled (true) or not (false)\n                name:\n                    type: string\n                    description: 'Name that is used for the From: header in autoreply message'\n                subject:\n                    type: string\n                    description: Subject line for the autoreply. If empty then uses subject of the original message\n                html:\n                    type: string\n                    description: HTML formatted content of the autoreply message\n                text:\n                    type: string\n                    description: Plaintext formatted content of the autoreply message\n                start:\n                    type: string\n                    description: Datestring of the start of the autoreply\n                    format: date-time\n                end:\n                    type: string\n                    description: Datestring of the end of the autoreply\n                    format: date-time\n            required:\n                - success\n                - status\n                - name\n                - subject\n                - html\n                - text\n                - start\n                - end\n\n        GetDkimKeyResponse:\n            required:\n                - success\n                - id\n                - domain\n                - selector\n                - description\n                - fingerprint\n                - publicKey\n                - dnsTxt\n                - created\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of the DKIM\n                domain:\n                    type: string\n                    description: The domain this DKIM key applies to\n                selector:\n                    type: string\n                    description: DKIM selector\n                description:\n                    type: string\n                    description: Key description\n                fingerprint:\n                    type: string\n                    description: Key fingerprint (SHA1)\n                publicKey:\n                    type: string\n                    description: 'Public key in DNS format (no prefix/suffix, single line)'\n                dnsTxt:\n                    $ref: '#/components/schemas/DnsTxt'\n                created:\n                    type: string\n                    description: Datestring\n                    format: date-time\n\n        GetDkimKeysResponse:\n            required:\n                - success\n                - total\n                - page\n                - previousCursor\n                - nextCursor\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                total:\n                    type: number\n                    description: How many results were found\n                page:\n                    type: number\n                    description: Current page number. Derived from page query argument\n                previousCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any previous results\n                nextCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any next results\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetDkimKeysResult'\n                    description: DKIM listing\n\n        GetTLSCertsResponse:\n            required:\n                - success\n                - total\n                - page\n                - previousCursor\n                - nextCursor\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                total:\n                    type: number\n                    description: How many results were found\n                    example: 541\n                page:\n                    type: number\n                    description: Current page number. Derived from page query argument\n                    example: 1\n                previousCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any previous results\n                    example: false\n                nextCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any next results\n                    example: 'eyIkb2lkIjoiNWRmMWZkMmQ3NzkyNTExOGI2MDdjNjg0In0'\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetTLSCertResult'\n                    description: Certificate listing\n\n        UpdateDkimKeyResponse:\n            required:\n                - success\n                - id\n                - domain\n                - selector\n                - description\n                - fingerprint\n                - publicKey\n                - dnsTxt\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of the DKIM\n                domain:\n                    type: string\n                    description: The domain this DKIM key applies to\n                selector:\n                    type: string\n                    description: DKIM selector\n                description:\n                    type: string\n                    description: Key description\n                fingerprint:\n                    type: string\n                    description: Key fingerprint (SHA1)\n                publicKey:\n                    type: string\n                    description: 'Public key in DNS format (no prefix/suffix, single line)'\n                dnsTxt:\n                    $ref: '#/components/schemas/DnsTxt'\n\n        UpdateTLSCertResponse:\n            required:\n                - success\n                - id\n                - servername\n                - fingerprint\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of the certificate\n                    example: '609d201236d1d936948f23b1'\n                servername:\n                    type: string\n                    description: The server name this certificate applies to\n                    example: 'imap.example.com'\n                description:\n                    type: string\n                    description: Key description\n                    example: 'Some notes about this certificate'\n                fingerprint:\n                    type: string\n                    description: Key fingerprint (SHA1)\n                    example: '59:8b:ed:11:5b:4f:ce:b4:e5:1a:2f:35:b1:6f:7d:93:40:c8:2f:9c:38:3b:cd:f4:04:92:a1:0e:17:2c:3f:f3'\n                expires:\n                    type: date-time\n                    description: Certificate expiration time\n                    example: '2021-06-26T21:55:55.000Z'\n                altNames:\n                    type: array\n                    description: SAN servernames listed in the certificate\n                    items:\n                        type: string\n                    example: ['example.com', 'www.example.com']\n\n        ResolveIdResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                    example: true\n                id:\n                    type: string\n                    description: Unique ID (24 byte hex)\n                    example: '609d201236d1d936948f23b1'\n\n        RecoverInfoResponse:\n            type: object\n            required:\n                - success\n                - user\n                - username\n                - storageUsed\n                - tags\n                - deleted\n                - recoverableAddresses\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                    example: true\n                user:\n                    type: string\n                    description: ID of the deleted User\n                    example: '609d201236d1d936948f23b1'\n                username:\n                    type: string\n                    description: Username of the User\n                    example: andris\n                storageUsed:\n                    type: number\n                    description: Calculated quota usage for the user\n                    example: 2423070\n                tags:\n                    type: array\n                    items:\n                        type: string\n                    description: List of tags associated with the User\n                    example: ['domain:andrisreinman.com']\n                deleted:\n                    type: string\n                    description: Datestring of the time the user was deleted\n                    format: date-time\n                recoverableAddresses:\n                    type: array\n                    items:\n                        type: string\n                    description: List of email addresses that can be restored\n                    example: ['andris@andrisreinman.com']\n\n        GetAllowedDomainResponse:\n            required:\n                - success\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetAllowedDomainResult'\n                    description: Domain list\n        CreateAllowedDomainResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID for the created record\n        GetBlockedDomainResponse:\n            required:\n                - success\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetBlockedDomainResult'\n                    description: Domain list\n        CreateBlockedDomainResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID for the created record\n        GetDomainAliasResponse:\n            required:\n                - success\n                - id\n                - alias\n                - domain\n                - created\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of the Alias\n                alias:\n                    type: string\n                    description: Alias domain\n                domain:\n                    type: string\n                    description: Alias target\n                created:\n                    type: string\n                    description: Datestring of the time the alias was created\n                    format: date-time\n        GetDomainAliasesResponse:\n            required:\n                - success\n                - total\n                - page\n                - previousCursor\n                - nextCursor\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                total:\n                    type: number\n                    description: How many results were found\n                page:\n                    type: number\n                    description: Current page number. Derived from page query argument\n                previousCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any previous results\n                nextCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any next results\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetDomainAliasesResult'\n                    description: Aliases listing\n\n        CreateDomainAliasResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of the Domain Alias\n\n        GetFilterResponse:\n            required:\n                - success\n                - id\n                - name\n                - query\n                - action\n                - disabled\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID for the Filter\n                name:\n                    type: string\n                    description: Name of the Filter\n                query:\n                    $ref: '#/components/schemas/Query'\n                action:\n                    $ref: '#/components/schemas/Action'\n                disabled:\n                    type: boolean\n                    description: 'If true, then this filter is ignored'\n        UpdateFilterResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID for the created Filter\n        GetAllFiltersResponse:\n            required:\n                - success\n                - total\n                - page\n                - previousCursor\n                - nextCursor\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                total:\n                    type: number\n                    description: How many results were found\n                page:\n                    type: number\n                    description: Current page number. Derived from page query argument\n                previousCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any previous results\n                nextCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any next results\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetAllFiltersResult'\n                    description: Address listing\n        GetFiltersResponse:\n            required:\n                - success\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetFiltersResult'\n                    description: Filter description\n        GetMailboxResponse:\n            required:\n                - success\n                - id\n                - name\n                - path\n                - specialUse\n                - modifyIndex\n                - subscribed\n                - hidden\n                - total\n                - unseen\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: Mailbox ID\n                name:\n                    type: string\n                    description: Name for the mailbox (unicode string)\n                path:\n                    type: string\n                    description: 'Full path of the mailbox, folders are separated by slashes, ends with the mailbox name (unicode string)'\n                specialUse:\n                    $ref: '#/components/schemas/SpecialUse'\n                modifyIndex:\n                    type: number\n                    description: Modification sequence number. Incremented on every change in the mailbox.\n                subscribed:\n                    type: boolean\n                    description: Mailbox subscription status. IMAP clients may unsubscribe from a folder.\n                hidden:\n                    type: boolean\n                    description: Is the folder hidden or not\n                total:\n                    type: number\n                    description: How many messages are stored in this mailbox\n                unseen:\n                    type: number\n                    description: How many unseen messages are stored in this mailbox\n        GetMailboxesResponse:\n            required:\n                - success\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetMailboxesResult'\n                    description: List of user mailboxes\n        CreateMailboxResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: Mailbox ID\n        GetMessageResponse:\n            required:\n                - success\n                - id\n                - mailbox\n                - user\n                - envelope\n                - thread\n                - from\n                - subject\n                - messageId\n                - date\n                - seen\n                - deleted\n                - flagged\n                - draft\n                - contentType\n                - metaData\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: number\n                    description: ID of the Message\n                mailbox:\n                    type: string\n                    description: ID of the Mailbox\n                user:\n                    type: string\n                    description: ID of the User\n                envelope:\n                    $ref: '#/components/schemas/Envelope'\n                thread:\n                    type: string\n                    description: ID of the Thread\n                from:\n                    $ref: '#/components/schemas/Address'\n                to:\n                    $ref: '#/components/schemas/Address'\n                cc:\n                    $ref: '#/components/schemas/Address'\n                bcc:\n                    $ref: '#/components/schemas/Address'\n                subject:\n                    type: string\n                    description: Message subject\n                messageId:\n                    type: string\n                    description: Message-ID header\n                date:\n                    type: string\n                    description: Date string from header\n                    format: date-time\n                idate:\n                    type: string\n                    description: Date string of receive time\n                    format: date-time\n                list:\n                    $ref: '#/components/schemas/List'\n                expires:\n                    type: string\n                    description: 'Datestring, if set then indicates the time after this message is automatically deleted'\n                seen:\n                    type: boolean\n                    description: Does this message have a \\Seen flag\n                deleted:\n                    type: boolean\n                    description: Does this message have a \\Deleted flag\n                flagged:\n                    type: boolean\n                    description: Does this message have a \\Flagged flag\n                draft:\n                    type: boolean\n                    description: Does this message have a \\Draft flag\n                html:\n                    type: array\n                    items:\n                        type: string\n                    description: 'An array of HTML string. Every array element is from a separate mime node, usually you would just join these to a single string'\n                text:\n                    type: string\n                    description: Plaintext content of the message\n                attachments:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Attachments'\n                    description: Attachments for the message\n                verificationResults:\n                    $ref: '#/components/schemas/VerificationResults'\n                contentType:\n                    $ref: '#/components/schemas/ContentType'\n                metaData:\n                    type: object\n                    description: Custom metadata object set for this message\n                reference:\n                    type: object\n                    description: Referenced message info\n                files:\n                    $ref: '#/components/schemas/Files'\n                outbound:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Outbound'\n                    description: Outbound queue entries\n        DeleteMessagesInMailboxResponse:\n            required:\n                - success\n                - deleted\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                deleted:\n                    type: number\n                    description: Indicates count of deleted messages\n        GetMessagesResponse:\n            required:\n                - success\n                - total\n                - page\n                - previousCursor\n                - nextCursor\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                total:\n                    type: number\n                    description: How many results were found\n                page:\n                    type: number\n                    description: Current page number. Derived from page query argument\n                previousCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any previous results\n                nextCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any next results\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetMessagesResult'\n                    description: Message listing\n        UpdateMessageResponse:\n            required:\n                - success\n                - id\n                - updated\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: array\n                    items:\n                        type: object\n                    description: If messages were moved then lists new ID values. Array entry is an array with first element pointing to old ID and second to new ID\n                updated:\n                    type: number\n                    description: 'If messages were not moved, then indicates the number of updated messages'\n        SearchMessagesResponse:\n            required:\n                - success\n                - total\n                - page\n                - previousCursor\n                - nextCursor\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                total:\n                    type: number\n                    description: How many results were found\n                page:\n                    type: number\n                    description: Current page number. Derived from page query argument\n                previousCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any previous results\n                nextCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any next results\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/SearchMessagesResult'\n                    description: Message listing\n        SubmitStoredMessageResponse:\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                queueId:\n                    type: string\n                    description: Message ID in outbound queue\n                message:\n                    $ref: '#/components/schemas/Message'\n            required:\n                - success\n                - queueId\n        GetFilesResponse:\n            required:\n                - success\n                - total\n                - page\n                - previousCursor\n                - nextCursor\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                total:\n                    type: number\n                    description: How many results were found\n                page:\n                    type: number\n                    description: Current page number. Derived from page query argument\n                previousCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any previous results\n                nextCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any next results\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetFilesResult'\n                    description: File listing\n        SubmitMessageResponse:\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                message:\n                    $ref: '#/components/schemas/MessageWithQueueId'\n            required:\n                - success\n                - message\n        SetupTotp2FAResponse:\n            required:\n                - success\n                - seed\n                - qrcode\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                seed:\n                    type: string\n                    description: Generated TOTP seed value\n                qrcode:\n                    type: string\n                    description: Base64 encoded QR code\n        GetUserResponse:\n            required:\n                - success\n                - id\n                - username\n                - name\n                - address\n                - retention\n                - enabled2fa\n                - autoreply\n                - encryptMessages\n                - encryptForwarded\n                - pubKey\n                - keyInfo\n                - metaData\n                - internalData\n                - targets\n                - spamLevel\n                - limits\n                - tags\n                - disabledScopes\n                - hasPasswordSet\n                - activated\n                - disabled\n                - suspended\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: Users unique ID (24 byte hex)\n                username:\n                    type: string\n                    description: Username of the User\n                name:\n                    type: string\n                    description: Name of the User\n                address:\n                    type: string\n                    description: Main email address of the User\n                retention:\n                    type: number\n                    description: Default retention time (in ms). false if not enabled\n                enabled2fa:\n                    type: array\n                    items:\n                        type: string\n                    description: List of enabled 2FA methods\n                autoreply:\n                    type: boolean\n                    description: Is autoreply enabled or not (start time may still be in the future or end time in the past)\n                encryptMessages:\n                    type: boolean\n                    description: If true then received messages are encrypted\n                encryptForwarded:\n                    type: boolean\n                    description: If true then forwarded messages are encrypted\n                pubKey:\n                    type: string\n                    description: Public PGP key for the User that is used for encryption\n                keyInfo:\n                    $ref: '#/components/schemas/KeyInfo'\n                metaData:\n                    type: object\n                    description: Custom metadata object set for this user\n                internalData:\n                    type: object\n                    description: Custom interna metadata object set for this user. Not available for user-role tokens\n                targets:\n                    type: array\n                    items:\n                        type: string\n                    description: List of forwarding targets\n                spamLevel:\n                    type: number\n                    description: 'Relative scale for detecting spam. 0 means that everything is spam, 100 means that nothing is spam'\n                limits:\n                    $ref: '#/components/schemas/UserLimits'\n                tags:\n                    type: array\n                    items:\n                        type: string\n                    description: List of tags associated with the User\n                fromWhitelist:\n                    type: array\n                    items:\n                        type: string\n                    description: A list of additional email addresses this user can send mail from. Wildcard is allowed.\n                disabledScopes:\n                    type: array\n                    items:\n                        type: string\n                    description: Disabled scopes for this user\n                hasPasswordSet:\n                    type: boolean\n                    description: If true then the User has a password set and can authenticate\n                activated:\n                    type: boolean\n                    description: Is the account activated\n                disabled:\n                    type: boolean\n                    description: If true then the user can not authenticate or receive any new mail\n                suspended:\n                    type: boolean\n                    description: If true then the user can not authenticate\n\n        GetUsersResponse:\n            required:\n                - success\n                - total\n                - page\n                - previousCursor\n                - nextCursor\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                total:\n                    type: number\n                    description: How many results were found\n                page:\n                    type: number\n                    description: Current page number. Derived from page query argument\n                previousCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any previous results\n                nextCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any next results\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetUsersResult'\n                    description: User listing\n        CreateUserResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID for the created User\n        RecalculateQuotaResponse:\n            required:\n                - success\n                - storageUsed\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                storageUsed:\n                    type: number\n                    description: Calculated quota usage for the user\n        ResetUserPasswordResponse:\n            required:\n                - success\n                - password\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                password:\n                    type: string\n                    description: Temporary password\n\n        GetWebhooksResponse:\n            required:\n                - success\n                - total\n                - page\n                - previousCursor\n                - nextCursor\n                - results\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                total:\n                    type: number\n                    description: How many results were found\n                page:\n                    type: number\n                    description: Current page number. Derived from page query argument\n                previousCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any previous results\n                nextCursor:\n                    type: string\n                    description: Either a cursor string or false if there are not any next results\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetWebhooksResult'\n                    description: Webhook listing\n\n        CreateWebhookResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                id:\n                    type: string\n                    description: ID of the Webhook\n\n        GetSettingResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                key:\n                    type: string\n                    description: Key of the Setting\n                value:\n                    oneOf:\n                        - type: string\n                        - type: number\n                    description: Setting value\n\n        GetSettingsResponse:\n            required:\n                - success\n                - settings\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                filter:\n                    type: string\n                    description: Partial match if requested\n                settings:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GetSettingsResult'\n                    description: Setting listing\n\n        CreateSettingResponse:\n            required:\n                - success\n                - id\n            type: object\n            properties:\n                success:\n                    type: boolean\n                    description: Indicates successful response\n                key:\n                    type: string\n                    description: Key of the Setting\n\n        UpdateForwardedAddressRequest:\n            type: object\n            description: ''\n            properties:\n                address:\n                    type: string\n                    description: 'New address. Only affects normal addresses, special addresses that include * can not be changed'\n                name:\n                    type: string\n                    description: Identity name\n                targets:\n                    type: array\n                    description: 'An array of forwarding targets. The value could either be an email address or a relay url to next MX server (\"smtp://mx2.zone.eu:25\") or an URL where mail contents are POSTed to. If set then overwrites previous targets array'\n                    items:\n                        type: string\n                forwards:\n                    type: number\n                    description: Daily allowed forwarding count for this address\n                tags:\n                    type: array\n                    description: A list of tags associated with this address\n                    items:\n                        type: string\n                metaData:\n                    description: 'Optional metadata, must be an object or JSON formatted string'\n                    oneOf:\n                        - type: object\n                        - type: string\n                internalData:\n                    description: 'Optional metadata for internal use, must be an object or JSON formatted string of an object. Not available for user-role tokens'\n                    oneOf:\n                        - type: object\n                        - type: string\n                forwardedDisabled:\n                    type: boolean\n                    description: If true then disables forwarded address (stops forwarding messages)\n                autoreply:\n                    $ref: '#/components/schemas/Autoreply'\n        UpdateUserAddressRequest:\n            type: object\n            properties:\n                name:\n                    type: string\n                    description: Identity name\n                address:\n                    type: string\n                    description: 'New address if you want to rename existing address. Only affects normal addresses, special addresses that include * can not be changed'\n                main:\n                    type: boolean\n                    description: Indicates if this is the default address for the User\n                metaData:\n                    description: 'Optional metadata, must be an object or JSON formatted string'\n                    oneOf:\n                        - type: object\n                        - type: string\n                internalData:\n                    description: 'Optional metadata for internal use, must be an object or JSON formatted string of an object. Not available for user-role tokens'\n                    oneOf:\n                        - type: object\n                        - type: string\n                tags:\n                    type: array\n                    description: A list of tags associated with this address\n                    items:\n                        type: string\n            required:\n                - main\n        CreateUserAddressRequest:\n            required:\n                - address\n            type: object\n            properties:\n                address:\n                    type: string\n                    description: E-mail Address\n                name:\n                    type: string\n                    description: Identity name\n                tags:\n                    type: array\n                    items:\n                        type: string\n                    description: A list of tags associated with this address\n                main:\n                    type: boolean\n                    description: Indicates if this is the default address for the User\n                allowWildcard:\n                    type: boolean\n                    description: 'If true then address value can be in the form of `*@example.com`, `*suffix@example.com` and `username@*`, otherwise using * is not allowed. Static suffix can be up to 32 characters long.'\n                metaData:\n                    description: 'Optional metadata, must be an object or JSON formatted string'\n                    oneOf:\n                        - type: object\n                        - type: string\n                internalData:\n                    description: 'Optional metadata for internal use, must be an object or JSON formatted string of an object. Not available for user-role tokens'\n                    oneOf:\n                        - type: object\n                        - type: string\n        CreateForwardedAddressRequest:\n            required:\n                - address\n            type: object\n            properties:\n                address:\n                    type: string\n                    description: E-mail Address\n                name:\n                    type: string\n                    description: Identity name\n                targets:\n                    type: array\n                    items:\n                        type: string\n                    description: 'An array of forwarding targets. The value could either be an email address or a relay url to next MX server (\"smtp://mx2.zone.eu:25\") or an URL where mail contents are POSTed to'\n                forwards:\n                    type: number\n                    description: Daily allowed forwarding count for this address\n                allowWildcard:\n                    type: boolean\n                    description: 'If true then address value can be in the form of `*@example.com`, otherwise using * is not allowed'\n                tags:\n                    type: array\n                    items:\n                        type: string\n                    description: A list of tags associated with this address\n                metaData:\n                    description: 'Optional metadata, must be an object or JSON formatted string'\n                    oneOf:\n                        - type: object\n                        - type: string\n                internalData:\n                    description: 'Optional metadata for internal use, must be an object or JSON formatted string of an object. Not available for user-role tokens'\n                    oneOf:\n                        - type: object\n                        - type: string\n                autoreply:\n                    $ref: '#/components/schemas/Autoreply'\n        RenameDomainRequest:\n            required:\n                - oldDomain\n                - newDomain\n            type: object\n            properties:\n                oldDomain:\n                    type: string\n                    description: Old Domain Name\n                newDomain:\n                    type: string\n                    description: New Domain Name\n        CreateASPRequest:\n            required:\n                - description\n                - scopes\n            type: object\n            properties:\n                description:\n                    type: string\n                    description: Description\n                scopes:\n                    type: array\n                    items:\n                        type: string\n                    description: List of scopes this Password applies to. Special scope \"*\" indicates that this password can be used for any scope except \"master\"\n                    example: ['imap', 'smtp']\n                generateMobileconfig:\n                    type: boolean\n                    description: If true then result contains a mobileconfig formatted file with account config\n                    example: true\n                address:\n                    type: string\n                    description: E-mail address to be used as the account address in mobileconfig file. Must be one of the listed identity addresses of the user. Defaults to the main address of the user\n                    example: 'user@example.com'\n                password:\n                    type: string\n                    description: Optional pregenerated password. Must be 16 characters, latin letters only.\n                    example: 'aaaaaaaaaaaaaaaa'\n                ttl:\n                    type: number\n                    description: 'TTL in seconds for this password. Every time password is used, TTL is reset to this value'\n                    example: 3600000\n                sess:\n                    type: string\n                    description: Session identifier for the logs\n                ip:\n                    type: string\n                    description: IP address for the logs\n                    example: '127.0.0.1'\n        RestoreMessageRequest:\n            type: object\n            properties:\n                mailbox:\n                    type: string\n                    description: ID of the target Mailbox. If not set then original mailbox is used.\n        RestoreMessagesRequest:\n            required:\n                - start\n                - end\n            type: object\n            properties:\n                start:\n                    type: string\n                    description: Datestring\n                    format: date-time\n                end:\n                    type: string\n                    description: Datestring\n                    format: date-time\n        CreateAuditRequest:\n            required:\n                - user\n                - expires\n            type: object\n            properties:\n                user:\n                    type: string\n                    description: Users unique ID.\n                start:\n                    type: string\n                    description: Start time as ISO date\n                    format: date-time\n                end:\n                    type: string\n                    description: End time as ISO date\n                    format: date-time\n                expires:\n                    type: string\n                    description: Expiration date. Audit data is deleted after this date\n                    format: date-time\n        AuthenticateRequest:\n            required:\n                - username\n                - password\n            type: object\n            properties:\n                username:\n                    type: string\n                    description: Username or E-mail address\n                password:\n                    type: string\n                    description: Password\n                protocol:\n                    type: string\n                    description: Application identifier for security logs\n                scope:\n                    type: string\n                    description: 'Required scope. One of master, imap, smtp, pop3'\n                token:\n                    type: boolean\n                    description: If true then generates a temporary access token that is valid for this user. Only available if scope is \"master\". When using user tokens then you can replace user ID in URLs with \"me\".\n                sess:\n                    type: string\n                    description: Session identifier for the logs\n                ip:\n                    type: string\n                    description: IP address for the logs\n            title: ''\n        UpdateAutoreplyRequest:\n            type: object\n            properties:\n                status:\n                    type: boolean\n                    description: Is the autoreply enabled (true) or not (false)\n                name:\n                    type: string\n                    description: 'Name that is used for the From: header in autoreply message'\n                subject:\n                    type: string\n                    description: Subject line for the autoreply. If empty then uses subject of the original message\n                html:\n                    type: string\n                    description: HTML formatted content of the autoreply message\n                text:\n                    type: string\n                    description: Plaintext formatted content of the autoreply message\n                start:\n                    type: string\n                    description: Datestring of the start of the autoreply or boolean false to disable start checks\n                    format: date-time\n                end:\n                    type: string\n                    description: Datestring of the end of the autoreply or boolean false to disable end checks\n                    format: date-time\n\n        UpdateDkimKeyRequest:\n            required:\n                - domain\n                - selector\n            type: object\n            properties:\n                domain:\n                    type: string\n                    description: Domain name this DKIM key applies to. Use \"*\" as a special value that will be used for domains that do not have their own DKIM key set\n                selector:\n                    type: string\n                    description: Selector for the key\n                description:\n                    type: string\n                    description: Key description\n                privateKey:\n                    type: string\n                    description: 'Pem formatted DKIM private key. If not set then a new 2048 bit RSA key is generated, beware though that it can take several seconds to complete.'\n\n        UpdateTLSCertRequest:\n            required:\n                - servername\n            type: object\n            properties:\n                servername:\n                    type: string\n                    description: Server name this TLS certificate applies to\n                    example: imap.example.com\n                acme:\n                    type: boolean\n                    description: If true then private key and certificate are managed automatically by ACME\n                    example: false\n                privateKey:\n                    type: string\n                    description: PEM formatted TLS private key. Optional if certificate is managed by ACME\n                    example: \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADA...\"\n                cert:\n                    type: string\n                    description: 'PEM formatted TLS certificate or a certificate bundle with concatenated certificate and CA chain. Optional if certificate is managed by ACME'\n                    example: \"-----BEGIN CERTIFICATE-----\\nMIIDEDCCAfg...\"\n                ca:\n                    type: array\n                    description: 'CA chain certificates. Not needed if `cert` value is a bundle'\n                    items:\n                        type: string\n                        description: 'PEM formatted TLS certificate'\n                        example: \"-----BEGIN CERTIFICATE-----\\nMIIDEDCCAfgs...\"\n                description:\n                    type: string\n                    description: Certificate description\n                    example: 'Some notes about this certificate'\n\n        CreateAllowedDomainRequest:\n            required:\n                - domain\n            type: object\n            properties:\n                domain:\n                    type: string\n                    description: Domain name to allowlist for users/addresses that include this tag\n        CreateBlockedDomainRequest:\n            required:\n                - domain\n            type: object\n            properties:\n                domain:\n                    type: string\n                    description: Domain name to blocklist for users/addresses that include this tag\n        CreateDomainAliasRequest:\n            required:\n                - alias\n                - domain\n            type: object\n            properties:\n                alias:\n                    type: string\n                    description: Domain Alias\n                domain:\n                    type: string\n                    description: Domain name this Alias applies to\n        UpdateFilterRequest:\n            type: object\n            properties:\n                name:\n                    type: string\n                    description: Name of the Filter\n                query:\n                    $ref: '#/components/schemas/Query'\n                action:\n                    $ref: '#/components/schemas/Action'\n                disabled:\n                    type: boolean\n                    description: If true then this filter is ignored\n        CreateFilterRequest:\n            required:\n                - query\n                - action\n            type: object\n            properties:\n                name:\n                    type: string\n                    description: Name of the Filter\n                query:\n                    $ref: '#/components/schemas/Query'\n                action:\n                    $ref: '#/components/schemas/Action'\n                disabled:\n                    type: boolean\n                    description: If true then this filter is ignored\n        UpdateMailboxRequest:\n            type: object\n            properties:\n                path:\n                    type: string\n                    description: 'Full path of the mailbox, use this to rename an existing Mailbox'\n                hidden:\n                    type: boolean\n                    description: Is the folder hidden or not. Hidden folders can not be opened in IMAP.\n                retention:\n                    type: number\n                    description: Retention policy for the Mailbox (in ms). Changing retention value only affects messages added to this folder after the change\n                subscribed:\n                    type: boolean\n                    description: Change Mailbox subscription state\n        CreateMailboxRequest:\n            required:\n                - path\n            type: object\n            properties:\n                path:\n                    type: string\n                    description: 'Full path of the mailbox, folders are separated by slashes, ends with the mailbox name (unicode string)'\n                hidden:\n                    type: boolean\n                    description: Is the folder hidden or not. Hidden folders can not be opened in IMAP.\n                retention:\n                    type: number\n                    description: Retention policy for the created Mailbox. Milliseconds after a message added to mailbox expires. Set to 0 to disable.\n        UpdateMessageRequest:\n            required:\n                - message\n                - moveTo\n                - seen\n                - flagged\n                - draft\n                - expires\n            type: object\n            properties:\n                message:\n                    type: string\n                    description: 'Message ID values. Either comma separated numbers (1,2,3) or colon separated range (3:15)'\n                moveTo:\n                    type: string\n                    description: ID of the target Mailbox if you want to move messages\n                seen:\n                    type: boolean\n                    description: State of the \\Seen flag\n                flagged:\n                    type: boolean\n                    description: State of the \\Flagged flag\n                draft:\n                    type: boolean\n                    description: State of the \\Draft flag\n                expires:\n                    type: string\n                    description: Either expiration date or false to turn of autoexpiration\n                metaData:\n                    description: 'Optional metadata, must be an object or JSON formatted string'\n                    oneOf:\n                        - type: object\n                        - type: string\n        SubmitStoredMessageRequest:\n            type: object\n            properties:\n                deleteFiles:\n                    type: boolean\n                    description: If true then deletes attachment files listed in metaData.files array\n                sendTime:\n                    type: string\n                    description: Datestring for delivery if message should be sent some later time\n                    format: date-time\n        SubmitMessageRequest:\n            required:\n                - subject\n                - text\n                - html\n            type: object\n            properties:\n                reference:\n                    $ref: '#/components/schemas/Reference'\n                mailbox:\n                    type: string\n                    description: Mailbox ID where to upload the message. If not set then message is uploaded to Sent Mail folder.\n                uploadOnly:\n                    type: boolean\n                    description: If true then generated message is not added to the sending queue\n                isDraft:\n                    type: boolean\n                    description: If true then treats this message as draft (should be used with uploadOnly=true)\n                sendTime:\n                    type: string\n                    description: Datestring for delivery if message should be sent some later time\n                    format: date-time\n                envelope:\n                    $ref: '#/components/schemas/EnvelopeUpload'\n                from:\n                    $ref: '#/components/schemas/Address'\n                to:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AddressOptionalName'\n                    description: 'Addresses for the To: header'\n                cc:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AddressOptionalName'\n                    description: 'Addresses for the Cc: header'\n                bcc:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AddressOptionalName'\n                    description: 'Addresses for the Bcc: header'\n                subject:\n                    type: string\n                    description: Message subject. If not then resolved from Reference message\n                text:\n                    type: string\n                    description: Plaintext message\n                html:\n                    type: string\n                    description: HTML formatted message\n                headers:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Header'\n                    description: Custom headers for the message. If reference message is set then In-Reply-To and References headers are set automatically\n                attachments:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AttachmentsUpload'\n                    description: Attachments for the message\n                meta:\n                    type: object\n                    description: Custom metainfo for the message\n                sess:\n                    type: string\n                    description: Session identifier for the logs\n                ip:\n                    type: string\n                    description: IP address for the logs\n        CheckTotp2FARequest:\n            required:\n                - token\n            type: object\n            properties:\n                token:\n                    type: string\n                    description: 6-digit number\n                sess:\n                    type: string\n                    description: Session identifier for the logs\n                ip:\n                    type: string\n                    description: IP address for the logs\n        EnableCustom2FARequest:\n            type: object\n            properties:\n                sess:\n                    type: string\n                    description: Session identifier for the logs\n                ip:\n                    type: string\n                    description: IP address for the logs\n        EnableTotp2FARequest:\n            required:\n                - token\n            type: object\n            properties:\n                token:\n                    type: string\n                    description: 6-digit number that matches seed value from 2fa/totp/setup\n                sess:\n                    type: string\n                    description: Session identifier for the logs\n                ip:\n                    type: string\n                    description: IP address for the logs\n        SetupTotp2FARequest:\n            type: object\n            properties:\n                label:\n                    type: string\n                    description: Label text for QR code (defaults to username)\n                issuer:\n                    type: string\n                    description: Description text for QR code (defaults to \"WildDuck\")\n                sess:\n                    type: string\n                    description: Session identifier for the logs\n                ip:\n                    type: string\n                    description: IP address for the logs\n        UpdateUserRequest:\n            required:\n                - disabledScopes\n            type: object\n            properties:\n                name:\n                    type: string\n                    description: Name of the User\n                existingPassword:\n                    type: string\n                    description: If provided then validates against account password before applying any changes\n                password:\n                    type: string\n                    description: New password for the account. Set to boolean false to disable password usage for the master scope, Application Specific Passwords would still be allowed\n                hashedPassword:\n                    type: boolean\n                    description: 'If true then password is already hashed, so store as is. Supported hashes: pbkdf2, bcrypt ($2a, $2y, $2b), md5 ($1), sha512 ($6), sha256 ($5), argon2 ($argon2d, $argon2i, $argon2id). Stored hashes are rehashed to pbkdf2 on first successful password check.'\n                allowUnsafe:\n                    type: boolean\n                    description: 'If false then validates provided passwords against Have I Been Pwned API. Experimental, so validation is disabled by default but will be enabled automatically in some future version of WildDuck.'\n                tags:\n                    type: array\n                    items:\n                        type: string\n                    description: A list of tags associated with this user\n                retention:\n                    type: number\n                    description: Default retention time (in ms). Set to 0 to disable\n                uploadSentMessages:\n                    type: boolean\n                    description: 'If true then all messages sent through MSA are also uploaded to the Sent Mail folder. Might cause duplicates with some email clients, so disabled by default.'\n                encryptMessages:\n                    type: boolean\n                    description: If true then received messages are encrypted\n                encryptForwarded:\n                    type: boolean\n                    description: If true then forwarded messages are encrypted\n                pubKey:\n                    type: string\n                    description: Public PGP key for the User that is used for encryption. Use empty string to remove the key\n                metaData:\n                    description: 'Optional metadata, must be an object or JSON formatted string'\n                    oneOf:\n                        - type: object\n                        - type: string\n                internalData:\n                    type: object\n                    description: 'Optional internal metadata, must be an object or JSON formatted string of an object. Not available for user-role tokens'\n                language:\n                    type: string\n                    description: Language code for the User\n                targets:\n                    type: array\n                    items:\n                        type: string\n                    description: 'An array of forwarding targets. The value could either be an email address or a relay url to next MX server (\"smtp://mx2.zone.eu:25\") or an URL where mail contents are POSTed to'\n                spamLevel:\n                    type: number\n                    description: 'Relative scale for detecting spam. 0 means that everything is spam, 100 means that nothing is spam'\n                quota:\n                    type: number\n                    description: Allowed quota of the user in bytes\n                recipients:\n                    type: number\n                    description: How many messages per 24 hour can be sent\n                forwards:\n                    type: number\n                    description: How many messages per 24 hour can be forwarded\n                imapMaxUpload:\n                    type: number\n                    description: How many bytes can be uploaded via IMAP during 24 hour\n                imapMaxDownload:\n                    type: number\n                    description: How many bytes can be downloaded via IMAP during 24 hour\n                pop3MaxDownload:\n                    type: number\n                    description: How many bytes can be downloaded via POP3 during 24 hour\n                pop3MaxMessages:\n                    type: number\n                    description: How many latest messages to list in POP3 session\n                imapMaxConnections:\n                    type: number\n                    description: How many parallel IMAP connections are alowed\n                receivedMax:\n                    type: number\n                    description: How many messages can be received from MX during 60 seconds\n                disable2fa:\n                    type: boolean\n                    description: 'If true, then disables 2FA for this user'\n                disabledScopes:\n                    type: array\n                    items:\n                        type: string\n                    description: 'List of scopes that are disabled for this user (\"imap\", \"pop3\", \"smtp\")'\n                disabled:\n                    type: boolean\n                    description: 'If true then disables user account (can not login, can not receive messages)'\n                fromWhitelist:\n                    type: array\n                    items:\n                        type: string\n                    description: A list of additional email addresses this user can send mail from. Wildcard is allowed.\n                suspended:\n                    type: boolean\n                    description: If true then disables authentication\n                sess:\n                    type: string\n                    description: Session identifier for the logs\n                ip:\n                    type: string\n                    description: IP address for the logs\n        CreateUserRequest:\n            required:\n                - username\n                - password\n                - disabledScopes\n            type: object\n            properties:\n                username:\n                    type: string\n                    description: Username of the User. Dots are allowed but informational only (\"user.name\" is the same as \"username\").\n                name:\n                    type: string\n                    description: Name of the User\n                password:\n                    type: string\n                    description: Password for the account. Set to boolean false to disable password usage for the master scope, Application Specific Passwords would still be allowed\n                hashedPassword:\n                    type: boolean\n                    description: 'If true then password is already hashed, so store as is. Supported hashes: pbkdf2, bcrypt ($2a, $2y, $2b), md5 ($1), sha512 ($6), sha256 ($5), argon2 ($argon2d, $argon2i, $argon2id). Stored hashes are rehashed to pbkdf2 on first successful password check.'\n                allowUnsafe:\n                    type: boolean\n                    description: 'If false then validates provided passwords against Have I Been Pwned API. Experimental, so validation is disabled by default but will be enabled automatically in some future version of WildDuck.'\n                address:\n                    type: string\n                    description: Default email address for the User (autogenerated if not set)\n                emptyAddress:\n                    type: boolean\n                    description: If true then do not autogenerate missing email address for the User. Only needed if you want to create a user account that does not have any email address associated\n                requirePasswordChange:\n                    type: boolean\n                    description: 'If true then requires the user to change password, useful if password for the account was autogenerated'\n                tags:\n                    type: array\n                    items:\n                        type: string\n                    description: A list of tags associated with this user\n                addTagsToAddress:\n                    type: boolean\n                    description: If true then autogenerated address gets the same tags as the user\n                retention:\n                    type: number\n                    description: Default retention time (in ms). Set to 0 to disable\n                uploadSentMessages:\n                    type: boolean\n                    description: 'If true then all messages sent through MSA are also uploaded to the Sent Mail folder. Might cause duplicates with some email clients, so disabled by default.'\n                encryptMessages:\n                    type: boolean\n                    description: If true then received messages are encrypted\n                encryptForwarded:\n                    type: boolean\n                    description: If true then forwarded messages are encrypted\n                pubKey:\n                    type: string\n                    description: Public PGP key for the User that is used for encryption. Use empty string to remove the key\n                metaData:\n                    description: 'Optional metadata, must be an object or JSON formatted string'\n                    oneOf:\n                        - type: object\n                        - type: string\n                internalData:\n                    description: 'Optional metadata for internal use, must be an object or JSON formatted string of an object. Not available for user-role tokens'\n                    oneOf:\n                        - type: object\n                        - type: string\n                language:\n                    type: string\n                    description: Language code for the User\n                targets:\n                    type: array\n                    items:\n                        type: string\n                    description: 'An array of forwarding targets. The value could either be an email address or a relay url to next MX server (\"smtp://mx2.zone.eu:25\") or an URL where mail contents are POSTed to'\n                spamLevel:\n                    type: number\n                    description: 'Relative scale for detecting spam. 0 means that everything is spam, 100 means that nothing is spam'\n                quota:\n                    type: number\n                    description: Allowed quota of the user in bytes\n                recipients:\n                    type: number\n                    description: How many messages per 24 hour can be sent\n                forwards:\n                    type: number\n                    description: How many messages per 24 hour can be forwarded\n                imapMaxUpload:\n                    type: number\n                    description: How many bytes can be uploaded via IMAP during 24 hour\n                imapMaxDownload:\n                    type: number\n                    description: How many bytes can be downloaded via IMAP during 24 hour\n                pop3MaxDownload:\n                    type: number\n                    description: How many bytes can be downloaded via POP3 during 24 hour\n                pop3MaxMessages:\n                    type: number\n                    description: How many latest messages to list in POP3 session\n                imapMaxConnections:\n                    type: number\n                    description: How many parallel IMAP connections are alowed\n                receivedMax:\n                    type: number\n                    description: How many messages can be received from MX during 60 seconds\n                mailboxes:\n                    $ref: '#/components/schemas/Mailboxes'\n                disabledScopes:\n                    type: array\n                    items:\n                        type: string\n                    description: 'List of scopes that are disabled for this user (\"imap\", \"pop3\", \"smtp\")'\n                fromWhitelist:\n                    type: array\n                    items:\n                        type: string\n                    description: A list of additional email addresses this user can send mail from. Wildcard is allowed.\n                sess:\n                    type: string\n                    description: Session identifier for the logs\n                ip:\n                    type: string\n                    description: IP address for the logs\n\n        LogoutUserRequest:\n            type: object\n            properties:\n                reason:\n                    type: string\n                    description: Message to be shown to connected IMAP client\n\n        UserRestoreRequest:\n            type: object\n            properties:\n                sess:\n                    type: string\n                    description: Session identifier for the logs\n                ip:\n                    type: string\n                    description: IP address for the logs\n\n        ResetUserPasswordRequest:\n            type: object\n            properties:\n                validAfter:\n                    type: string\n                    format: date-time\n                    description: Allow using the generated password not earlier than provided time\n                sess:\n                    type: string\n                    description: Session identifier for the logs\n                ip:\n                    type: string\n                    description: IP address for the logs\n        CreateWebhookRequest:\n            required:\n                - type\n                - url\n            type: object\n            properties:\n                type:\n                    type: array\n                    items:\n                        type: string\n                    description: An array of event types to match. For prefix match use \".*\" at the end (eg. \"user.*\") or \"*\" for all types\n                user:\n                    type: string\n                    description: User ID to match (only makes sense for user specific resources)\n                url:\n                    type: string\n                    description: URL to POST data to\n\n        CreateSettingRequest:\n            required:\n                - value\n            type: object\n            properties:\n                value:\n                    oneOf:\n                        - type: string\n                        - type: number\n                    description: Setting value\n                sess:\n                    description: Session identifier for the logs\n                    schema:\n                        type: string\n                ip:\n                    description: IP address for the logs\n                    schema:\n                        type: string\n\n        GetAddressesResult:\n            required:\n                - id\n                - name\n                - address\n                - user\n                - forwarded\n                - forwardedDisabled\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: ID of the Address\n                name:\n                    type: string\n                    description: Identity name\n                address:\n                    type: string\n                    description: E-mail address string\n                user:\n                    type: string\n                    description: User ID this address belongs to if this is a User address\n                forwarded:\n                    type: boolean\n                    description: If true then it is a forwarded address\n                forwardedDisabled:\n                    type: boolean\n                    description: If true then the forwarded address is disabled\n                target:\n                    type: array\n                    items:\n                        type: string\n                    description: List of forwarding targets\n        GetUserAddressesResult:\n            required:\n                - id\n                - name\n                - address\n                - main\n                - created\n                - tags\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: ID of the Address\n                name:\n                    type: string\n                    description: Identity name\n                address:\n                    type: string\n                    description: E-mail address string\n                main:\n                    type: boolean\n                    description: Indicates if this is the default address for the User\n                created:\n                    type: string\n                    description: Datestring of the time the address was created\n                    format: date-time\n                tags:\n                    type: array\n                    items:\n                        type: string\n                    description: List of tags associated with the Address\n                metaData:\n                    type: object\n                    description: Metadata object (if available)\n                internalData:\n                    type: object\n                    description: 'Internal metadata object (if available), not included for user-role requests'\n        GetUserAddressesregisterResult:\n            required:\n                - id\n                - address\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: ID of the Address\n                    example: 507f1f77bcf86cd799439011\n                name:\n                    type: string\n                    description: Name from address header\n                    example: John Doe\n                address:\n                    type: string\n                    description: E-mail address string\n                    example: john@example.com\n        GetASPsResult:\n            required:\n                - id\n                - description\n                - scopes\n                - lastUse\n                - created\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: ID of the Application Password\n                description:\n                    type: string\n                    description: Description\n                scopes:\n                    type: array\n                    items:\n                        type: string\n                    description: Allowed scopes for the Application Password\n                lastUse:\n                    $ref: '#/components/schemas/LastUse'\n                created:\n                    type: string\n                    description: Datestring\n                    format: date-time\n        GetArchivedMessagesResult:\n            required:\n                - id\n                - mailbox\n                - thread\n                - from\n                - to\n                - cc\n                - bcc\n                - subject\n                - date\n                - intro\n                - attachments\n                - seen\n                - deleted\n                - flagged\n                - contentType\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: ID of the Message (24 byte hex)\n                mailbox:\n                    type: string\n                    description: ID of the Mailbox\n                thread:\n                    type: string\n                    description: ID of the Thread\n                from:\n                    $ref: '#/components/schemas/Address'\n                to:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Address'\n                    description: 'Recipients in To: field'\n                cc:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Address'\n                    description: 'Recipients in Cc: field'\n                bcc:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Address'\n                    description: 'Recipients in Bcc: field. Usually only available for drafts'\n                subject:\n                    type: string\n                    description: Message subject\n                date:\n                    type: string\n                    description: Date string from header\n                    format: date-time\n                idate:\n                    type: string\n                    description: Date string of receive time\n                    format: date-time\n                intro:\n                    type: string\n                    description: First 128 bytes of the message\n                attachments:\n                    type: boolean\n                    description: Does the message have attachments\n                seen:\n                    type: boolean\n                    description: Is this message alread seen or not\n                deleted:\n                    type: boolean\n                    description: Does this message have a \\Deleted flag (should not have as messages are automatically deleted once this flag is set)\n                flagged:\n                    type: boolean\n                    description: Does this message have a \\Flagged flag\n                contentType:\n                    $ref: '#/components/schemas/ContentType'\n        GetAuthlogResult:\n            required:\n                - id\n                - action\n                - result\n                - created\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: ID of the Event\n                action:\n                    type: string\n                    description: Action identifier\n                result:\n                    type: string\n                    description: Did the action succeed\n                sess:\n                    type: string\n                    description: Session identifier\n                ip:\n                    type: string\n                    description: IP address of the Event\n                created:\n                    type: string\n                    description: Datestring of the Event time\n                    format: date-time\n\n        GetDkimKeysResult:\n            required:\n                - id\n                - domain\n                - selector\n                - description\n                - fingerprint\n                - created\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: ID of the DKIM\n                domain:\n                    type: string\n                    description: The domain this DKIM key applies to\n                selector:\n                    type: string\n                    description: DKIM selector\n                description:\n                    type: string\n                    description: Key description\n                fingerprint:\n                    type: string\n                    description: Key fingerprint (SHA1)\n                created:\n                    type: string\n                    description: Datestring\n                    format: date-time\n\n        GetTLSCertResult:\n            required:\n                - id\n                - servername\n                - description\n                - fingerprint\n                - created\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: ID of the certificate\n                    example: '609d201236d1d936948f23b1'\n                servername:\n                    type: string\n                    description: The server name this certificate applies to\n                    example: 'imap.example.com'\n                acme:\n                    type: boolean\n                    description: If true then private key and certificate are managed automatically by ACME\n                    example: false\n                description:\n                    type: string\n                    description: Key description\n                    example: 'Some notes about this certificate'\n                fingerprint:\n                    type: string\n                    description: Key fingerprint (SHA1)\n                    example: '59:8b:ed:11:5b:4f:ce:b4:e5:1a:2f:35:b1:6f:7d:93:40:c8:2f:9c:38:3b:cd:f4:04:92:a1:0e:17:2c:3f:f3'\n                created:\n                    type: string\n                    description: Datestring\n                    format: date-time\n                    example: '2021-05-13T20:06:46.179Z'\n                expires:\n                    type: date-time\n                    description: Certificate expiration time\n                    example: '2021-06-26T21:55:55.000Z'\n                altNames:\n                    type: array\n                    description: SAN servernames listed in the certificate\n                    items:\n                        type: string\n                    example: ['example.com', 'www.example.com']\n\n        GetAllowedDomainResult:\n            required:\n                - id\n                - domain\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Entry ID\n                domain:\n                    type: string\n                    description: allowlisted domain name\n        GetBlockedDomainResult:\n            required:\n                - id\n                - domain\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Entry ID\n                domain:\n                    type: string\n                    description: blocklisted domain name\n        GetDomainAliasesResult:\n            required:\n                - id\n                - alias\n                - domain\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: ID of the Domain Alias\n                alias:\n                    type: string\n                    description: Domain Alias\n                domain:\n                    type: string\n                    description: The domain this alias applies to\n        GetAllFiltersResult:\n            required:\n                - id\n                - user\n                - name\n                - created\n                - query\n                - action\n                - disabled\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Filter ID\n                user:\n                    type: string\n                    description: User ID\n                name:\n                    type: string\n                    description: Name for the filter\n                created:\n                    type: string\n                    description: Datestring of the time the filter was created\n                    format: date-time\n                query:\n                    type: array\n                    items:\n                        type: array\n                        items:\n                            type: string\n                action:\n                    type: array\n                    items:\n                        type: array\n                        items:\n                            type: string\n                disabled:\n                    type: boolean\n                    description: 'If true, then this filter is ignored'\n                targets:\n                    type: array\n                    items:\n                        type: string\n                    description: List of forwarding targets\n\n        GetFiltersResult:\n            required:\n                - id\n                - name\n                - created\n                - query\n                - action\n                - disabled\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Filter ID\n                name:\n                    type: string\n                    description: Name for the filter\n                created:\n                    type: string\n                    description: Datestring of the time the filter was created\n                    format: date-time\n                query:\n                    type: array\n                    items:\n                        type: array\n                        items:\n                            type: string\n                action:\n                    type: array\n                    items:\n                        type: array\n                        items:\n                            type: string\n                disabled:\n                    type: boolean\n                    description: 'If true, then this filter is ignored'\n        GetMailboxesResult:\n            required:\n                - id\n                - name\n                - path\n                - specialUse\n                - modifyIndex\n                - subscribed\n                - hidden\n                - total\n                - unseen\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Mailbox ID\n                name:\n                    type: string\n                    description: Name for the mailbox (unicode string)\n                path:\n                    type: string\n                    description: 'Full path of the mailbox, folders are separated by slashes, ends with the mailbox name (unicode string)'\n                specialUse:\n                    type: string\n                    description: 'Either special use identifier or null. One of \\Drafts, \\Junk, \\Sent or \\Trash'\n                modifyIndex:\n                    type: number\n                    description: Modification sequence number. Incremented on every change in the mailbox.\n                subscribed:\n                    type: boolean\n                    description: Mailbox subscription status. IMAP clients may unsubscribe from a folder.\n                retention:\n                    type: number\n                    description: Default retention policy for this mailbox (in ms). If set then messages added to this maibox will be automatically deleted after retention time.\n                hidden:\n                    type: boolean\n                    description: Is the folder hidden or not\n                total:\n                    type: number\n                    description: How many messages are stored in this mailbox\n                unseen:\n                    type: number\n                    description: How many unseen messages are stored in this mailbox\n        GetMessagesResult:\n            required:\n                - id\n                - mailbox\n                - thread\n                - from\n                - to\n                - cc\n                - bcc\n                - subject\n                - date\n                - size\n                - intro\n                - attachments\n                - seen\n                - deleted\n                - flagged\n                - answered\n                - forwarded\n                - contentType\n            type: object\n            properties:\n                id:\n                    type: number\n                    description: ID of the Message\n                mailbox:\n                    type: string\n                    description: ID of the Mailbox\n                thread:\n                    type: string\n                    description: ID of the Thread\n                threadMessageCount:\n                    type: number\n                    description: Amount of messages in the Thread. Included if threadCounters query argument was true\n                from:\n                    $ref: '#/components/schemas/Address'\n                to:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Address'\n                    description: 'Recipients in To: field'\n                cc:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Address'\n                    description: 'Recipients in Cc: field'\n                bcc:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Address'\n                    description: 'Recipients in Bcc: field. Usually only available for drafts'\n                subject:\n                    type: string\n                    description: Message subject\n                date:\n                    type: string\n                    description: Date string from header\n                    format: date-time\n                idate:\n                    type: string\n                    description: Date string of receive time\n                    format: date-time\n                size:\n                    type: number\n                    description: Message size in bytes\n                intro:\n                    type: string\n                    description: First 128 bytes of the message\n                attachments:\n                    type: boolean\n                    description: Does the message have attachments\n                seen:\n                    type: boolean\n                    description: Is this message alread seen or not\n                deleted:\n                    type: boolean\n                    description: Does this message have a \\Deleted flag (should not have as messages are automatically deleted once this flag is set)\n                flagged:\n                    type: boolean\n                    description: Does this message have a \\Flagged flag\n                answered:\n                    type: boolean\n                    description: Does this message have a \\Answered flag\n                forwarded:\n                    type: boolean\n                    description: Does this message have a $Forwarded flag\n                contentType:\n                    $ref: '#/components/schemas/ContentType'\n                metaData:\n                    type: object\n                    description: Custom metadata value. Included if metaData query argument was true\n        SearchMessagesResult:\n            required:\n                - id\n                - mailbox\n                - thread\n                - from\n                - to\n                - cc\n                - bcc\n                - subject\n                - date\n                - intro\n                - attachments\n                - seen\n                - deleted\n                - flagged\n                - url\n                - contentType\n            type: object\n            properties:\n                id:\n                    type: number\n                    description: ID of the Message\n                mailbox:\n                    type: string\n                    description: ID of the Mailbox\n                thread:\n                    type: string\n                    description: ID of the Thread\n                from:\n                    $ref: '#/components/schemas/Address'\n                to:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Address'\n                    description: 'Recipients in To: field'\n                cc:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Address'\n                    description: 'Recipients in Cc: field'\n                bcc:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Address'\n                    description: 'Recipients in Bcc: field. Usually only available for drafts'\n                subject:\n                    type: string\n                    description: Message subject\n                date:\n                    type: string\n                    description: Date string from header\n                    format: date-time\n                idate:\n                    type: string\n                    description: Date string of receive time\n                    format: date-time\n                intro:\n                    type: string\n                    description: First 128 bytes of the message\n                attachments:\n                    type: boolean\n                    description: Does the message have attachments\n                seen:\n                    type: boolean\n                    description: Is this message alread seen or not\n                deleted:\n                    type: boolean\n                    description: Does this message have a \\Deleted flag (should not have as messages are automatically deleted once this flag is set)\n                flagged:\n                    type: boolean\n                    description: Does this message have a \\Flagged flag\n                url:\n                    type: string\n                    description: Relative API url for fetching message contents\n                contentType:\n                    $ref: '#/components/schemas/ContentType'\n        GetFilesResult:\n            required:\n                - id\n                - filename\n                - contentType\n                - size\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: ID of the File\n                filename:\n                    type: string\n                    description: Filename\n                contentType:\n                    type: string\n                    description: Content-Type of the file\n                size:\n                    type: number\n                    description: File size\n        GetUsersResult:\n            required:\n                - id\n                - username\n                - name\n                - address\n                - tags\n                - targets\n                - enabled2fa\n                - autoreply\n                - encryptMessages\n                - encryptForwarded\n                - quota\n                - hasPasswordSet\n                - activated\n                - disabled\n                - suspended\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Users unique ID (24 byte hex)\n                username:\n                    type: string\n                    description: Username of the User\n                name:\n                    type: string\n                    description: Name of the User\n                address:\n                    type: string\n                    description: Main email address of the User\n                tags:\n                    type: array\n                    items:\n                        type: string\n                    description: List of tags associated with the User'\n                targets:\n                    type: array\n                    items:\n                        type: string\n                    description: List of forwarding targets\n                enabled2fa:\n                    type: array\n                    items:\n                        type: string\n                    description: List of enabled 2FA methods\n                autoreply:\n                    type: boolean\n                    description: Is autoreply enabled or not (start time may still be in the future or end time in the past)\n                encryptMessages:\n                    type: boolean\n                    description: If true then received messages are encrypted\n                encryptForwarded:\n                    type: boolean\n                    description: If true then forwarded messages are encrypted\n                quota:\n                    $ref: '#/components/schemas/Quota'\n                metaData:\n                    type: object\n                    description: Custom metadata value. Included if metaData query argument was true\n                internalData:\n                    type: object\n                    description: Custom metadata value for internal use. Included if internalData query argument was true and request was not made using user-role token\n                hasPasswordSet:\n                    type: boolean\n                    description: If true then the User has a password set and can authenticate\n                activated:\n                    type: boolean\n                    description: Is the account activated\n                disabled:\n                    type: boolean\n                    description: If true then the user can not authenticate or receive any new mail\n                suspended:\n                    type: boolean\n                    description: If true then the user can not authenticate\n\n        GetWebhooksResult:\n            required:\n                - id\n                - type\n                - user\n                - url\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Webhooks unique ID (24 byte hex)\n                type:\n                    type: array\n                    items:\n                        type: string\n                    description: An array of event types this webhook matches\n                user:\n                    type: string\n                    description: User ID or null\n                url:\n                    type: string\n                    description: Webhook URL\n\n        GetSettingsResult:\n            required:\n                - key\n            type: object\n            properties:\n                key:\n                    type: string\n                    description: Setting key\n                value:\n                    oneOf:\n                        - type: string\n                        - type: number\n                    description: Setting value\n                name:\n                    type: string\n                    description: Setting name\n                description:\n                    type: string\n                    description: Setting description\n                default:\n                    oneOf:\n                        - type: string\n                        - type: number\n                    description: Default value for this key\n                type:\n                    type: string\n                    description: Value subtype\n                custom:\n                    type: boolean\n                    description: If true then the value is set\n\n    securitySchemes:\n        AccessTokenAuth:\n            name: X-Access-Token\n            type: apiKey\n            in: header\n            description: |-\n                If authentication is enabled in the WildDuck configuration, you will need to supply an access token in the `X-Access-Token` header.\n\n                ```json\n                {\n                  \"X-Access-Token\": \"59fc66a03e54454869460e45\"\n                }\n                ```\nsecurity:\n    - AccessTokenAuth: []\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"UpdateTLSCertResponse\": parse schema: property \"expires\": parse schema: unexpected schema type: \"date-time\""
}