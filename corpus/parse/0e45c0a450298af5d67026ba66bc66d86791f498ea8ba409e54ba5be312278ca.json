{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/isel-leic-ipw/IPW-2122i-LEIC32D"
		},
		"file": {
			"name": "aliche-spec.yaml",
			"size": 0,
			"path": "24 - WebApp - Client JavaScript/aliche/docs/aliche-spec.yaml",
			"byteSize": 8185,
			"content": "openapi: 3.0.1\ninfo:\n  title: ALiChe\n  description: 'Manage your book collection.'\n  termsOfService: http://swagger.io/terms/\n  version: 1.0.0\ntags:\n- name: AllBooks\n  description: All the books that we know about.\n  externalDocs:\n    description: Based on\n    url: https://developers.google.com/books\n- name: MyBooks\n  description: The personal books collection\npaths:\n  /api/global/books:\n    get:\n      tags:\n      - AllBooks\n      summary: Find a book by query\n      description: \n        Uses Google Books API to find a book corresponding to the query.\n        Valid queries are the same as specified for Google Books API.\n        It will return the first result from Google Books' result set.\n      parameters:\n      - name: q\n        in: query\n        description: Query to find a book\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: A book has been found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BookResponse'\n        400:\n          description: No query indicated in the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppError'\n        404:\n          description: No book found for the query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppError'\n        502:\n          description: Google Books API is not responding\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppError'\n  /api/my/books:\n    get:\n      tags:\n      - MyBooks\n      summary: List all books in the personal collection\n      security:\n      - bearerAuth: []\n      responses:\n        200:\n          description: The personal list of books\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BookListResponse'\n        401:\n          description: Missing API token. The user is not authenticated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppError'\n    post:\n      tags:\n      - MyBooks\n      summary: Add a book to the personal collection\n      security:\n      - bearerAuth: []\n      requestBody:\n        description: Book id of a book to be added to the personal collection\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BookId'\n      responses:\n        200:\n          description: The book is now in the collection\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BookAddedResponse'\n        400:\n          description: A book with such id does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppError'\n        401:\n          description: Missing API token. The user is not authenticated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppError'\n        502:\n          description: Google Books API is not responding\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppError'\n  /api/my/books/{bookId}:\n    get:\n      tags:\n      - MyBooks\n      summary: Find book by ID in the personal collection\n      description: Returns a single book\n      security:\n      - bearerAuth: []\n      parameters:\n      - name: bookId\n        in: path\n        description: ID of book to return\n        required: true\n        schema:\n          type: string\n        example: Ho3JtwEACAAJ\n      responses:\n        200:\n          description: Book found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BookResponse'\n        401:\n          description: Missing API token. The user is not authenticated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppError'\n        404:\n          description: Book not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppError'\n    delete:\n      tags:\n      - MyBooks\n      summary: Delete book by ID\n      description: Deletes a book from the personal collection\n      security:\n      - bearerAuth: []\n      parameters:\n      - name: bookId\n        in: path\n        description: ID of book to delete\n        required: true\n        schema:\n          type: string\n        example: Ho3JtwEACAAJ\n      responses:\n        200:\n          description: Book deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BookId'\n        401:\n          description: Missing API token. The user is not authenticated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppError'\n        404:\n          description: Book not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppError'\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n  schemas:\n    AppErrorInfo:\n      description: Additional information about the error\n      nullable: true\n      anyOf:\n      - type: object\n      - type: string\n      - type: integer\n      - type: number\n      example: \"...\"\n    AppError:\n      type: object\n      description: Application error\n      required: \n      - code\n      - name\n      - message\n      properties:\n        code:\n          type: number\n          format: int32\n          description: Internal error code\n          example: 1000\n        name:\n          type: string\n          description: Internal error name\n          example: FAIL\n        message:\n          type: string\n          description: Error description message\n          example: An error occurred\n        info:\n          $ref: '#/components/schemas/AppErrorInfo'\n    BookAddedResponse:\n      type: object\n      description: Book successfully added to list\n      required: \n      - bookId\n      properties:\n        bookId:\n          type: string\n        added:\n          type: string\n          enum:\n          - yes\n          - no\n    BookResponse:\n      type: object\n      description: Response with a book\n      properties:\n        book:\n          $ref: '#/components/schemas/Book'\n    BookListResponse:\n      type: object\n      description: Response with a list of books\n      properties:\n        books:\n          type: array\n          items:\n            $ref: '#/components/schemas/Book'\n    BookId:\n      type: object\n      description: Book id\n      required:\n      - bookId\n      properties:\n        bookId:\n          type: string\n          description: Internal book id\n          example: Ho3JtwEACAAJ\n    Book:\n      type: object\n      description: Book data\n      required:\n      - id\n      - title\n      - authors\n      properties:\n        id:\n          type: string\n          description: Internal book id\n          example: Ho3JtwEACAAJ\n        title:\n          type: string\n          description: The book title\n          example: Odisseia\n        authors:\n          type: array\n          description: The book author(s)\n          items:\n            type: string\n          example:\n          - Homero\n          - Frederico Louren√ßo\n        publisher:\n          type: string\n          description: The book publisher\n          example: Quetzal\n        publishedDate:\n          type: string\n          description: The book publication date\n          format: date\n          example: \"2018-02-23\"\n        language:\n          type: string\n          description: The book main language\n          example: pt\n        isbn10:\n          type: string\n          description: The book ISBN-10 number\n          example: 9897224386\n        isbn13:\n          type: string\n          description: The book ISBN-13 number\n          example: 9789897224386\n",
			"canonicalURL": "/github.com/isel-leic-ipw/IPW-2122i-LEIC32D@8480cd63471b51e0ea217ecb789d8428bee53333/-/blob/24%20-%20WebApp%20-%20Client%20JavaScript/aliche/docs/aliche-spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/isel-leic-ipw/IPW-2122i-LEIC32D/blob/8480cd63471b51e0ea217ecb789d8428bee53333/24 - WebApp - Client JavaScript/aliche/docs/aliche-spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"BookAddedResponse\": parse schema: property \"added\": at 1:1604: parse enum values: parse value \"true\": expected type \"string\", got \"bool\""
}