{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mainflux/mainflux"
		},
		"file": {
			"name": "certs.yml",
			"size": 0,
			"path": "api/openapi/certs.yml",
			"byteSize": 6989,
			"content": "openapi: 3.0.1\ninfo:\n  title: Mainflux Certs service\n  description: HTTP API for Certs service\n  version: \"1.0.0\"\n\npaths:\n  /certs:\n    post:\n      summary: Creates a certificate for thing\n      description: Creates a certificate for thing\n      tags:\n        - certs\n      requestBody:\n        $ref: \"#/components/requestBodies/CertReq\"\n      responses:\n        '201':\n          description: Created\n        '400':\n          description: Failed due to malformed JSON.\n        \"401\":\n          description: Missing or invalid access token provided.\n        '500':\n          description: Unexpected server-side error ocurred.\n  /certs/{certID}:\n    get:\n      summary: Retrieves a certificate\n      description: |\n        Retrieves a certificate for a given cert ID.\n      tags:\n        - certs\n      parameters:\n        - $ref: \"#/components/parameters/CertID\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/CertRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        \"401\":\n          description: Missing or invalid access token provided.\n        '404':\n          description: |\n            Failed to retrieve corresponding certificate.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    delete:\n      summary: Revokes a certificate\n      description: |\n        Revokes a certificate for a given cert ID.\n      tags:\n        - certs\n      parameters:\n        - $ref: \"#/components/parameters/CertID\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/RevokeRes\"\n        \"401\":\n          description: Missing or invalid access token provided.\n        '404':\n          description: |\n            Failed to revoke corresponding certificate.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /serials/{thingID}:\n    get:\n      summary: Retrieves certificates' serial IDs\n      description: |\n        Retrieves a list of certificates' serial IDs for a given thing ID.\n      tags:\n        - certs\n      parameters:\n        - $ref: \"#/components/parameters/ThingID\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/SerialsPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        \"401\":\n          description: Missing or invalid access token provided.\n        '404':\n          description: |\n            Failed to retrieve corresponding certificates.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /health:\n    get:\n      summary: Retrieves service health check info.\n      tags:\n        - health\n      responses:\n        '200':\n          $ref: \"#/components/responses/HealthRes\"\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n\ncomponents:\n  parameters:\n    ThingID:\n      name: thingID\n      description: Thing ID\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n    CertID:\n      name: certID\n      description: Serial of certificate\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n\n  schemas:\n    Cert:\n      type: object\n      properties:\n        thing_id:\n          type: string\n          format: uuid\n          description: Corresponding Mainflux Thing ID.\n        client_cert:\n          type: string\n          description: Client Certificate.\n        client_key:\n          type: string\n          description: Key for the client_cert.\n        issuing_ca:\n          type: string\n          description: CA Certificate that is used to issue client certs, usually intermediate.\n        serial:\n          type: string\n          description: Certificate serial\n        expire:\n          type: string\n          description: Certificate expiry date\n    Serial:\n      type: object\n      properties:\n        serial:\n          type: string\n          description: Certificate serial\n    CertsPage:\n      type: object\n      properties:\n        certs:\n          type: array\n          minItems: 0\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/Cert\"\n        total:\n          type: integer\n          description: Total number of items.\n        offset:\n          type: integer\n          description: Number of items to skip during retrieval.\n        limit:\n          type: integer\n          description: Maximum number of items to return in one page.\n    SerialsPage:\n      type: object\n      properties:\n        serials:\n          type: array\n          description: Certificate serials IDs.\n          minItems: 0\n          uniqueItems: true\n          items:\n            type: string\n        total:\n          type: integer\n          description: Total number of items.\n        offset:\n          type: integer\n          description: Number of items to skip during retrieval.\n        limit:\n          type: integer\n          description: Maximum number of items to return in one page.\n    Revoke:\n      type: object\n      properties:\n        revocation_time:\n          type: string\n          description: Certificate revocation time\n\n  requestBodies:\n    CertReq:\n      description: |\n          Issues a certificate that is required for mTLS. To create a certificate for a thing\n          provide a thing id, data identifying particular thing will be embedded into the Certificate.\n          x509 and ECC certificates are supported when using when Vault is used as PKI.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - thing_id\n              - ttl\n              - key_bits\n              - key_type\n            properties:\n               thing_id:\n                 type: string\n                 format: uuid\n               ttl:\n                 type: string\n               key_type:\n                 type: string\n               key_bits:\n                 type: integer\n\n  responses:\n    ServiceError:\n      description: Unexpected server-side error occurred.\n    CertRes:\n      description: Certificate data.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Cert\"\n    CertsPageRes:\n      description: Certificates page.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CertsPage\"\n    SerialsPageRes:\n      description: Serials page.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/SerialsPage\"\n    RevokeRes:\n      description: Certificate revoked.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Revoke\"\n    HealthRes:\n      description: Service Health Check.\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas/HealthInfo.yml\"\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: |\n        * Users access: \"Authorization: Bearer \u003cuser_token\u003e\"\n\nsecurity:\n  - bearerAuth: []\n",
			"canonicalURL": "/github.com/mainflux/mainflux@931b48f3a7d6fffac3f53568bff19e9a59d31586/-/blob/api/openapi/certs.yml",
			"externalURLs": [
				{
					"url": "https://github.com/mainflux/mainflux/blob/931b48f3a7d6fffac3f53568bff19e9a59d31586/api/openapi/certs.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: responses: \"HealthRes\": content: application/json: schema: parse schema: resolve \"./schemas/HealthInfo.yml\": external \"./schemas/HealthInfo.yml\": file: local file reference is not allowed"
}