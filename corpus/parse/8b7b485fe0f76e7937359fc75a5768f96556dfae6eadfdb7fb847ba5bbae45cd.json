{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ecmwf/ecflow"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "Http/doc/openapi.yaml",
			"byteSize": 33519,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: ecFlow REST API\npaths:\n  /suites:\n    get:\n      summary: List all suites\n      operationId: listSuites\n      tags:\n        - suites\n      parameters:\n        - name: filter\n          in: query\n          required: false\n          description: Filter results\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of suites\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                uniqueItems: true\n              example: [\"foo\", \"bar\"]\n\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a new suite\n      operationId: createSuite\n      tags:\n        - suites\n      security:\n        - BasicAuth: []\n        - TokenAuth: []\n        - ApiKeyAuth: []\n        - ApiKeyAuthLegacy: []\n      requestBody:\n        required: true\n        description: New suite definition\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                definition:\n                  type: string\n                  example: \"suite foo\\ntask bar\\nendsuite\"\n                auto_add_externs:\n                  type: boolean\n                  default: false\n              required:\n              - definition\n      responses:\n        '201':\n          description: Expected response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Success20x\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /suites/tree:\n    get:\n      summary: Show all nodes (suites, families and tasks) as a tree\n      operationId: treeSuites\n      tags:\n        - suites\n      parameters:\n        - name: filter\n          in: query\n          required: false\n          description: Filter results\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Full node tree\n          content:\n            application/json:\n              schema:\n                type: object\n              example:\n                foo:\n                   baz: {}\n                bar: {}\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n\n  /suites/{nodeName}/tree:\n    get:\n      summary: Show this node and its children as a tree\n      operationId: treeNodes\n      tags:\n        - nodes\n      parameters:\n        - name: nodeName\n          in: path\n          required: true\n          description: The name of the node to retrieve\n          schema:\n            type: string\n        - name: filter\n          in: query\n          required: false\n          description: Filter results\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A tree of nodes\n          content:\n            application/json:\n              schema:\n                type: object\n              example:\n                baz: {}\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /suites/{nodeName}/status:\n    get:\n      summary: Show status of a node (suite, family or task)\n      operationId: showNodeStatus\n      tags:\n        - nodes\n      parameters:\n        - name: nodeName\n          in: path\n          required: true\n          description: The name of the node to retrieve\n          schema:\n            type: string\n        - name: filter\n          in: query\n          required: false\n          description: Filter results\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Status of the node\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  default_status:\n                    type: string\n                  status:\n                    type: string\n                  why:\n                    type: object\n                    properties:\n                      bottom_up_why:\n                        type: array\n                        items:\n                          type: string\n                      top_down_why:\n                        type: array\n                        items: \n                          type: string\n              example:\n                default_status: queued\n                status: complete\n                why:\n                  bottom_up_why: [ \"SUITE:/foo is suspended\" ]\n                  top_down_why: [ \"SUITE:/foo is suspended\" ]\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    put:\n      summary: Update status of a node (suite, family or task)\n      operationId: updateNodeStatus\n      tags:\n        - nodes\n      parameters:\n        - name: nodeName\n          in: path\n          required: true\n          description: The name of the node to update\n          schema:\n            type: string\n      security:\n        - BasicAuth: []\n        - TokenAuth: []\n        - ApiKeyAuthh: []\n        - ApiKeyAuthLegacy: []\n      requestBody:\n        required: true\n        description: action to take on node\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Action'\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Success20x\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /suites/{nodeName}/attributes:\n    get:\n      summary: Show attributes of a node (suite, family or task)\n      operationId: showNodeAttributes\n      tags:\n        - nodes\n      parameters:\n        - name: nodeName\n          in: path\n          required: true\n          description: The name of the node to show\n          schema:\n            type: string\n        - name: filter\n          in: query\n          required: false\n          description: Filter results\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Description of node attributes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Attributes\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    put:\n      summary: Update an attribute of a node (suite, family or task)\n      operationId: updateNodeAttribute\n      tags:\n        - nodes\n      parameters:\n        - name: nodeName\n          in: path\n          required: true\n          description: The name of the node to update\n          schema:\n            type: string\n      security:\n        - BasicAuth: []\n        - TokenAuth: []\n        - ApiKeyAuth: []\n        - ApiKeyAuthLegacy: []\n      requestBody:\n        required: true\n        description: attribute to update\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Attribute'\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Success20x\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      summary: Create a new attribute for a node (suite, family or task)\n      operationId: createNodeAttribute\n      tags:\n        - nodes\n      parameters:\n        - name: nodeName\n          in: path\n          required: true\n          description: The name of node where attribute is added\n          schema:\n            type: string\n      security:\n        - BasicAuth: []\n        - TokenAuth: []\n        - ApiKeyAuth: []\n        - ApiKeyAuthLegacy: []\n      requestBody:\n        required: true\n        description: attribute to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Attribute'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Success20x\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    delete:\n      summary: Remove an attribute of a node (suite, family or task)\n      operationId: removeNodeAttribute\n      tags:\n        - nodes\n      parameters:\n        - name: nodeName\n          in: path\n          required: true\n          description: The name of the node to update\n          schema:\n            type: string\n      security:\n        - BasicAuth: []\n        - TokenAuth: []\n        - ApiKeyAuth: []\n        - ApiKeyAuthLegacy: []\n      requestBody:\n        required: true\n        description: attribute to remove\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Attribute'\n      responses:\n        '204':\n          description: Expected response to a valid request\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n\n  /suites/{nodeName}/definition:\n    get:\n      summary: Show ecFlow definition of a node (suite, family or task)\n      operationId: showNodeDefinition\n      tags:\n        - nodes\n      parameters:\n        - name: nodeName\n          in: path\n          required: true\n          description: The name of the node to retrieve\n          schema:\n            type: string\n        - name: filter\n          in: query\n          required: false\n          description: Filter results\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  definition:\n                    type: string\n                    example: \"suite foo\\nendsuite\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    put:\n      summary: Update definition of a node (suite, family or task)\n      operationId: updateNodeDefinition\n      tags:\n        - nodes\n      parameters:\n        - name: nodeName\n          in: path\n          required: true\n          description: The name of the node which definition is updated\n          schema:\n            type: string\n      security:\n        - BasicAuth: []\n        - TokenAuth: []\n        - ApiKeyAuth: []\n        - ApiKeyAuthLegacy: []\n      requestBody:\n        required: true\n        description: New definition\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                definition:\n                  type: string\n                  example: \"family bar\\nendfamily\"\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Success20x\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    delete:\n      summary: Remove a node (suite, family or task)\n      operationId: removeNode\n      tags:\n        - nodes\n      parameters:\n        - name: nodeName\n          in: path\n          required: true\n          description: The name of the node to remove\n          schema:\n            type: string\n      security:\n        - BasicAuth: []\n        - TokenAuth: []\n      responses:\n        '204':\n          description: Expected response to a valid request\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /suites/{nodeName}/script:\n    get:\n      summary: Show script for a task\n      operationId: showNodeScript\n      tags:\n        - nodes\n      parameters:\n        - name: nodeName\n          in: path\n          required: true\n          description: The name of the node to retrieve (must be a task)\n          schema:\n            type: string\n        - name: filter\n          in: query\n          required: false\n          description: Filter results\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Script contents\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  script:\n                    type: string\n                  job:\n                    type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /suites/{nodeName}/output:\n    get:\n      summary: Show output of a task\n      operationId: showNodeOutput\n      tags:\n        - nodes\n      parameters:\n        - name: nodeName\n          in: path\n          required: true\n          description: The name of the node to retrieve (must be a task)\n          schema:\n            type: string\n        - name: filter\n          in: query\n          required: false\n          description: Filter results\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  job_output:\n                    type: string\n                  kill_output:\n                    type: string\n                  status_output:\n                    type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /server/status:\n    get:\n      summary: Show ecFlow server status\n      operationId: showServerStatus\n      tags:\n        - server\n      parameters:\n        - name: filter\n          in: query\n          required: false\n          description: Filter results\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: object\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    put:\n      summary: Update ecFlow server status\n      operationId: updateServerStatus\n      tags:\n        - server\n      security:\n        - BasicAuth: []\n        - TokenAuth: []\n        - ApiKeyAuth: []\n        - ApiKeyAuthLegacy: []\n      requestBody:\n        required: true\n        description: action to take on ecFlow server\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServerAction'\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Success20x\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /server/ping:\n    get:\n      summary: Ping ecFlow server\n      operationId: pingServer\n      tags:\n        - server\n      parameters:\n        - name: filter\n          in: query\n          required: false\n          description: Filter results\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  host:\n                    type: string\n                  round_trip_time:\n                    type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /server/attributes:\n    get:\n      summary: Show ecFlow server attributes\n      operationId: showServerAttributes\n      tags:\n        - server\n      parameters:\n        - name: filter\n          in: query\n          required: false\n          description: Filter results\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerAttribute'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    put:\n      summary: Update ecFlow server attribute\n      operationId: changeServerAttribute\n      tags:\n        - server\n      security:\n        - BasicAuth: []\n        - TokenAuth: []\n        - ApiKeyAuth: []\n        - ApiKeyAuthLegacy: []\n      requestBody:\n        required: true\n        description: attribute to change\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServerAttribute'\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Success20x\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    delete:\n      summary: Remove ecFlow server attribute\n      operationId: removeServerAttribute\n      tags:\n        - server\n      responses:\n        '204':\n          description: Expected response to a valid request\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      summary: Create a new ecFlow server attribute\n      operationId: createServerAttribute\n      tags:\n        - server\n      security:\n        - BasicAuth: []\n        - TokenAuth: []\n        - ApiKeyAuth: []\n        - ApiKeyAuthLegacy: []\n      requestBody:\n        required: true\n        description: attribute to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServerAttribute'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Success20x\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /statistics:\n    get:\n      summary: Show REST api statistics\n      operationId: showApiStatistics\n      tags:\n        - api\n      parameters:\n        - name: filter\n          in: query\n          required: false\n          description: Filter results\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  num_requests:\n                    type: integer\n                    example: 1\n                  num_errors:\n                    type: integer\n                    example: 0\n                  num_cached_requests:\n                    type: integer\n                    example: 1\n                  since:\n                    type: string\n                    example: \"2022-10-06T12:00:00Z\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n\ncomponents:\n  schemas:\n    ServerAction:\n      type: object\n      required:\n      - action\n      properties:\n        action:\n          type: string\n          enum: [reload_whitelist_file, reload_passwd_file, reload_custom_passwd_file]\n          example: reload_whitelist_file\n    ServerAttribute:\n      type: object\n      required:\n      - type\n      - name\n      - value\n      properties:\n        type:\n          type: string\n          enum: [variable]\n          example: variable\n        name:\n          type: string\n          example: foo\n        value:\n          type: string\n          example: bar\n    Action:\n      type: object\n      required:\n      - action\n      properties:\n        action:\n          type: string\n          enum: [abort, begin, complete, defstatus, execute, init, requeue, rerun, resume, submit, suspend]\n          example: complete\n        recursive:\n          type: boolean\n          default: false\n        force:\n          type: boolean\n          default: false\n        abort_why:\n          type: string\n        defstatus_value:\n          type: string\n    Attribute:\n      type: object\n      required:\n      - type\n      properties:\n        type:\n          type: string\n          enum: [autoarchive, autocancel, autorestore, complete, cron, day, date, event, generic, inlimit, label, late, limit, meter, queue, repeat, time, today, trigger, variable]\n          example: variable\n        name:\n          type: string\n        value:\n          type: string\n        old_value:\n          type: string\n        min:\n          type: string\n        max:\n          type: string\n    Success20x:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          type: string\n        path:\n          type: string\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        status:\n          type: integer\n        message:\n          type: string\n        path:\n          type: string\n        method:\n          type: string\n        body:\n          type: string\n    Meter:\n      type: object\n      required:\n        - name\n        - value\n        - min\n        - max\n      properties:\n        name:\n          type: string\n        value:\n          type: integer\n        max:\n          type: integer\n        min:\n          type: integer\n    Event:\n      type: object\n      required:\n        - name\n        - value\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        initial_value:\n          type: string\n    Label:\n      type: object\n      required:\n        - name\n        - value\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n    Variable:\n      type: object\n      required:\n        - name\n        - value\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        const:\n          type: boolean\n          default: false\n    Limit:\n      type: object\n      required:\n        - name\n        - value\n        - limit\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        limit:\n          type: integer\n    InLimit:\n      type: object\n      required:\n        - value\n      properties:\n        value:\n          type: string\n    Date:\n      type: object\n      required:\n        - value\n        - free\n      properties:\n        value:\n          type: string\n        free:\n          type: boolean\n    Day:\n      type: object\n      required:\n        - value\n        - free\n        - expired\n      properties:\n        value:\n          type: string\n        free:\n          type: boolean\n        expired:\n          type: boolean\n    Time:\n      type: object\n      required:\n        - value\n        - free\n      properties:\n        value:\n          type: string\n        free:\n          type: boolean\n    Today:\n      type: object\n      required:\n        - value\n        - free\n        - expired\n      properties:\n        value:\n          type: string\n        free:\n          type: boolean\n        expired:\n          type: boolean\n    Cron:\n      type: object\n      required:\n        - value\n      properties:\n        value:\n          type: string\n    Expression:\n      type: object\n      required:\n        - free\n        - value\n        - expressions\n      properties:\n        free:\n          type: boolean\n        value:\n          type: string\n        expressions:\n          type: array\n          items:\n            type:\n              string\n    Flag:\n      type: object\n      required:\n        - value\n      properties:\n        value:\n          type: string\n    Late:\n      type: object\n      required:\n        - value\n      properties:\n        value:\n          type: string\n        submitted:\n          type: string\n        active:\n          type: string\n        complete:\n          type: string\n        complete_is_relative:\n          type: boolean\n        is_late:\n          type: boolean\n    Zombie:\n      type: object\n      properties:\n        type:\n          type: string\n        action:\n          type: string\n        child_commands:\n          type: string\n        lifetime:\n          type: string\n    Queue:\n      type: object\n      required:\n        - name\n        - queue\n        - value\n        - index\n      properties:\n        name:\n          type: string\n        queue:\n          type: array\n          items:\n            type: string\n        index:\n          type: integer\n        value:\n          type: string\n    Generic:\n      type: object\n      required:\n        - name\n        - value\n      properties:\n        name:\n          type: string\n        value:\n          type: array\n          items:\n            type:\n              string\n    TimeSlot:\n      type: object\n      required:\n        - value\n      properties:\n        value:\n          type: string\n    AutoCancel:\n      type: object\n      required:\n        - relative\n        - days\n        - time\n        - value\n      properties:\n        relative:\n          type: boolean\n        value:\n          type: string\n        days:\n          type: boolean\n        time:\n          type: object\n          allOf:\n            - $ref: \"#/components/schemas/TimeSlot\"\n    AutoRestore:\n      type: object\n      required:\n        - value\n      properties:\n        value:\n          type: array\n          items:\n            type: string\n    AutoArchive:\n      type: object\n      required:\n        - relative\n        - days\n        - time\n        - value\n      properties:\n        relative:\n          type: boolean\n        value:\n          type: string\n        days:\n          type: boolean\n        time:\n          type: object\n          allOf:\n            - $ref: \"#/components/schemas/TimeSlot\"\n    RepeatDate:\n      type: object\n      required:\n        - name\n        - start\n        - end\n        - step\n        - value\n      properties:\n        name:\n          type: string\n        start:\n          type: integer\n        step:\n          type: integer\n        end:\n          type: integer\n        value:\n          type: integer\n    RepeatDateList:\n      type: object\n      required:\n        - name\n        - index\n        - value\n        - values\n      properties:\n        name:\n          type: string\n        index:\n          type: integer\n        value:\n          type: string\n        values:\n          type: array\n          items:\n            type: string\n    RepeatInteger:\n      type: object\n      required:\n        - name\n        - start\n        - step\n        - end\n        - value\n      properties:\n        name:\n          type: string\n        start:\n          type: integer\n        step:\n          type: integer\n        end:\n          type: integer\n        value:\n          type: integer\n    RepeatDay:\n      type: object\n      required:\n        - name\n        - step\n        - valid\n      properties:\n        name:\n          type: string\n        step:\n          type: integer\n        valid:\n          type: boolean\n    RepeatEnumerated:\n      type: object\n      required:\n        - name\n        - index\n        - value\n        - values\n      properties:\n        name:\n          type: string\n        index:\n          type: integer\n        value:\n          type: string\n        values:\n          type: array\n          items:\n            type: string\n    RepeatString:\n      type: object\n      required:\n        - name\n        - index\n        - value\n        - values\n      properties:\n        name:\n          type: string\n        index:\n          type: integer\n        value:\n          type: string\n        values:\n          type: array\n          items:\n            type: string\n    Attributes:\n      type: object\n      required:\n        - meters\n        - events\n        - labels\n        - variables\n        - inherited_variables\n        - limits\n        - inlimits\n        - dates\n        - days\n        - times\n        - todays\n        - crons\n        - repeat\n        - triggers\n        - completes\n        - flag\n        - late\n        - zombie\n        - queue\n        - generic\n        - autocancel\n        - autoarchive\n        - autorestore\n      properties:\n        events:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Event\"\n        meters:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Meter\"\n        labels:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Label\"\n        variables:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Variable\"\n        inherited_variables:\n          type: object\n          properties:\n            server:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Variable\"\n        limits:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Limit\"\n        inlimits:\n          type: array\n          items:\n            $ref: \"#/components/schemas/InLimit\"\n        dates:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Date\"\n        days:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Day\"\n        times:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Time\"\n        todays:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Today\"\n        crons:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Cron\"\n        repeat:\n          type: object\n          oneOf:\n            - $ref: \"#/components/schemas/RepeatDate\"\n            - $ref: \"#/components/schemas/RepeatDateList\"\n            - $ref: \"#/components/schemas/RepeatInteger\"\n            - $ref: \"#/components/schemas/RepeatDay\"\n            - $ref: \"#/components/schemas/RepeatString\"\n            - $ref: \"#/components/schemas/RepeatEnumerated\"\n        triggers:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Expression\"\n        completes:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Expression\"\n        flag:\n          type: object\n          allOf:\n            - $ref: \"#/components/schemas/Flag\"\n        late:\n          type: object\n          allOf:\n            - $ref: \"#/components/schemas/Late\"\n        zombies:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Zombie\"\n        queues:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Queue\"\n        generics:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Generic\"\n        autocancel:\n          allOf:\n            - $ref: \"#/components/schemas/AutoCancel\"\n        autorestore:\n          type: object\n          allOf:\n            - $ref: \"#/components/schemas/AutoRestore\"\n        autoarchive:\n          type: object\n          allOf:\n            - $ref: \"#/components/schemas/AutoArchive\"\n \n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    TokenAuth:\n      type: http\n      scheme: bearer\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-Key\n    ApiKeyAuthLegacy:\n      type: apiKey\n      in: query\n      name: key\n",
			"canonicalURL": "/github.com/ecmwf/ecflow@1c356d7101a2bf963e0eef2035fdfc28491d615f/-/blob/Http/doc/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ecmwf/ecflow/blob/1c356d7101a2bf963e0eef2035fdfc28491d615f/Http/doc/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/suites/{nodeName}/status\": put: operation \"updateNodeStatus\": security: at Http/doc/openapi.yaml:213:11: unknown security scheme \"ApiKeyAuthh\""
}