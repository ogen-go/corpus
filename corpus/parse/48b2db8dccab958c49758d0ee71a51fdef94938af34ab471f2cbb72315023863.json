{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/plantbreeding/BrAPI"
		},
		"file": {
			"name": "Locations_GET_POST.yaml",
			"size": 0,
			"path": "Specification/BrAPI-Core/Locations/Locations_GET_POST.yaml",
			"byteSize": 4331,
			"content": "info:\n  title: BrAPI\n  version: ''\nopenapi: 3.0.0\npaths:\n  /locations:\n    get:\n      summary: Get a filtered list of Locations\n      description: |-\n        Get a list of locations.\n        * The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n        * `altitude` is in meters.\n      parameters:\n      - name: locationType\n        description: The type of location this represents (ex. Field Station, Breeding Location, Storage Location, etc)\n        in: query\n        required: false\n        schema:\n          type: string\n      - name: locationDbId\n        description: The unique identifier for a Location\n        in: query\n        required: false\n        schema:\n          type: string\n      - name: locationName\n        description:  |-\n          A human readable name for a location\n          \u003cbr/\u003e MIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.\n        in: query\n        required: false\n        schema:\n          type: string\n      - name: parentLocationDbId\n        description: |-\n          The unique identifier for a Location\n          \u003cbr/\u003e The Parent Location defines the encompassing location that this location belongs to. \n          For example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.\n        in: query\n        required: false\n        schema:\n          type: string\n      - name: parentLocationName\n        description: |-\n          A human readable name for a location\n          \u003cbr/\u003e The Parent Location defines the encompassing location that this location belongs to. \n          For example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.\n        in: query\n        required: false\n        schema:\n          type: string\n      - $ref: '#/components/parameters/commonCropName'\n      - $ref: '#/components/parameters/programDbId'\n      - $ref: '#/components/parameters/externalReferenceID'\n      - $ref: '#/components/parameters/externalReferenceId'\n      - $ref: '#/components/parameters/externalReferenceSource'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/authorizationHeader'\n      responses:\n        '200':\n          $ref: '#/components/responses/LocationListResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n      tags:\n      - Locations\n    post:\n      summary: Create new Locations\n      description: |-\n        Add new locations to database\n        * The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n        * `altitude` is in meters.\n      parameters:\n      - $ref: '#/components/parameters/authorizationHeader'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items: \n                $ref: '#/components/schemas/LocationNewRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/LocationListResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n      tags:\n      - Locations\ncomponents:\n  responses:\n    LocationListResponse:\n      content:\n        application/json:\n          schema:\n            title: LocationListResponse\n            type: object\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n              metadata:\n                $ref: '#/components/schemas/metadata'\n              result:\n                properties:\n                  data:\n                    items:\n                      $ref: '#/components/schemas/Location'\n                    type: array\n                required:\n                - data\n                type: object\n            required:\n            - metadata\n            - result\n      description: OK\n      headers: {}\n  \n",
			"canonicalURL": "/github.com/plantbreeding/BrAPI@a45723dba8753a1c1177ec8f7759d57ebcf5f5b1/-/blob/Specification/BrAPI-Core/Locations/Locations_GET_POST.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/plantbreeding/BrAPI/blob/a45723dba8753a1c1177ec8f7759d57ebcf5f5b1/Specification/BrAPI-Core/Locations/Locations_GET_POST.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: responses: \"LocationListResponse\": at 1:52: at 1:63: content: application/json: at 1:83: schema: at 1:93: parse schema: property \"@context\": at 1:119: parse schema: resolve \"#/components/schemas/Context\": find schema: resolve: can't find value for \"components/schemas/Context\""
}