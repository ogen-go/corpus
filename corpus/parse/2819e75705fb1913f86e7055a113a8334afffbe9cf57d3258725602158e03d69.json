{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/p1rt-py/api_yamdb"
		},
		"file": {
			"name": "redoc.yaml",
			"size": 0,
			"path": "api_yamdb/static/redoc.yaml",
			"byteSize": 42440,
			"content": "openapi: 3.0.2\r\ninfo:\r\n  title: 'YaMDb API'\r\n  version: ''\r\n  description: |\r\n    запросы к API начинаются с `/api/v1/`\r\n\r\n    # Описание\r\n    Проект **YaMDb** собирает отзывы пользователей на различные произведения.\r\n\r\n    # Алгоритм регистрации пользователей\r\n    1. Пользователь отправляет POST-запрос на добавление нового пользователя с параметрами `email` и `username` на эндпоинт `/api/v1/auth/signup/`.\r\n    2. **YaMDB** отправляет письмо с кодом подтверждения (`confirmation_code`) на адрес  `email`.\r\n    3. Пользователь отправляет POST-запрос с параметрами `username` и `confirmation_code` на эндпоинт `/api/v1/auth/token/`, в ответе на запрос ему приходит `token` (JWT-токен).\r\n    4. При желании пользователь отправляет PATCH-запрос на эндпоинт `/api/v1/users/me/` и заполняет поля в своём профайле (описание полей — в документации).\r\n\r\n    # Пользовательские роли\r\n    - **Аноним** — может просматривать описания произведений, читать отзывы и комментарии.\r\n    - **Аутентифицированный пользователь** (`user`) — может, как и **Аноним**, читать всё, дополнительно он может публиковать отзывы и ставить оценку произведениям (фильмам/книгам/песенкам), может комментировать чужие отзывы; может редактировать и удалять **свои** отзывы и комментарии. Эта роль присваивается по умолчанию каждому новому пользователю.\r\n    - **Модератор** (`moderator`) — те же права, что и у **Аутентифицированного пользователя** плюс право удалять **любые** отзывы и комментарии.\r\n    - **Администратор** (`admin`) — полные права на управление всем контентом проекта. Может создавать и удалять произведения, категории и жанры. Может назначать роли пользователям. \r\n    - **Суперюзер Django** — обладет правами администратора (`admin`)\r\n\r\n\r\nservers:\r\n  - url: /api/v1/\r\n\r\ntags:\r\n  - name: AUTH\r\n    description: Регистрация пользователей и выдача токенов\r\n  - name: CATEGORIES\r\n    description: Категории (типы) произведений\r\n  - name: GENRES\r\n    description: Категории жанров\r\n  - name: TITLES\r\n    description: Произведения, к которым пишут отзывы (определённый фильм, книга или песенка).\r\n  - name: REVIEWS\r\n    description: Отзывы\r\n  - name: COMMENTS\r\n    description: Комментарии к отзывам\r\n  - name: USERS\r\n    description: Пользователи\r\n\r\npaths:\r\n  /auth/signup/:\r\n    post:\r\n      tags:\r\n        - AUTH\r\n      operationId: Регистрация нового пользователя\r\n      description: |\r\n        Получить код подтверждения на переданный `email`.\r\n\r\n        Права доступа: **Доступно без токена.**\r\n\r\n        Использовать имя 'me' в качестве `username` запрещено.\r\n\r\n        Поля `email` и `username` должны быть уникальными.\r\n      parameters: []\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              required:\r\n                - email\r\n                - username\r\n              properties:\r\n                email:\r\n                  type: string\r\n                username:\r\n                  type: string\r\n      responses:\r\n        200:\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  email:\r\n                    type: string\r\n                  username:\r\n                    type: string\r\n                required:\r\n                - email\r\n                - username\r\n          description: 'Удачное выполнение запроса'\r\n        '400':\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ValidationError'\r\n          description: 'Отсутствует обязательное поле или оно некорректно'\r\n  /auth/token/:\r\n    post:\r\n      tags:\r\n        - AUTH\r\n      operationId: Получение JWT-токена\r\n      description: |\r\n        Получение JWT-токена в обмен на username и confirmation code.\r\n\r\n        Права доступа: **Доступно без токена.**\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              required:\r\n                - username\r\n                - confirmation_code\r\n              properties:\r\n                username:\r\n                  type: string\r\n                confirmation_code:\r\n                  type: string\r\n                  writeOnly: true\r\n      responses:\r\n        200:\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Token'\r\n          description: 'Удачное выполнение запроса'\r\n        400:\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ValidationError'\r\n          description: 'Отсутствует обязательное поле или оно некорректно'\r\n        404:\r\n          description: Пользователь не найден\r\n\r\n  /categories/:\r\n    get:\r\n      tags:\r\n        - CATEGORIES\r\n      operationId: Получение списка всех категорий\r\n      description: |\r\n        Получить список всех категорий\r\n\r\n        Права доступа: **Доступно без токена**\r\n      parameters:\r\n      - name: search\r\n        in: query\r\n        description: Поиск по названию категории\r\n        schema:\r\n          type: string\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  type: object\r\n                  properties:\r\n                    count:\r\n                      type: integer\r\n                    next:\r\n                      type: string\r\n                    previous:\r\n                      type: string\r\n                    results:\r\n                      type: array\r\n                      items:\r\n                        $ref: '#/components/schemas/Category'\r\n    post:\r\n      tags:\r\n        - CATEGORIES\r\n      operationId: Добавление новой категории\r\n      description: |\r\n        Создать категорию.\r\n\r\n        Права доступа: **Администратор.**\r\n\r\n        Поле `slug` каждой категории должно быть уникальным.\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Category'\r\n      responses:\r\n        201:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Category'\r\n        400:\r\n          description: 'Отсутствует обязательное поле или оно некорректно'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ValidationError'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n      security:\r\n      - jwt-token:\r\n        - write:admin\r\n  /categories/{slug}/:\r\n    delete:\r\n      tags:\r\n        - CATEGORIES\r\n      operationId: Удаление категории\r\n      description: |\r\n        Удалить категорию.\r\n\r\n        Права доступа: **Администратор.**\r\n      parameters:\r\n      - name: slug\r\n        in: path\r\n        required: true\r\n        description: Slug категории\r\n        schema:\r\n          type: string\r\n      responses:\r\n        204:\r\n          description: 'Удачное выполнение запроса'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n        404:\r\n          description: Категория не найдена\r\n      security:\r\n      - jwt-token:\r\n        - write:admin\r\n\r\n  /genres/:\r\n    get:\r\n      tags:\r\n        - GENRES\r\n      operationId: Получение списка всех жанров\r\n      description: |\r\n        Получить список всех жанров.\r\n\r\n        Права доступа: **Доступно без токена**\r\n      parameters:\r\n      - name: search\r\n        in: query\r\n        description: Поиск по названию жанра\r\n        schema:\r\n          type: string\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  type: object\r\n                  properties:\r\n                    count:\r\n                      type: integer\r\n                    next:\r\n                      type: string\r\n                    previous:\r\n                      type: string\r\n                    results:\r\n                      type: array\r\n                      items:\r\n                        $ref: '#/components/schemas/Genre'\r\n    post:\r\n      tags:\r\n        - GENRES\r\n      operationId: Добавление жанра\r\n      description: |\r\n        Добавить жанр.\r\n\r\n        Права доступа: **Администратор**.\r\n\r\n        Поле `slug` каждого жанра должно быть уникальным.\r\n      responses:\r\n        201:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Genre'\r\n        400:\r\n          description: 'Отсутствует обязательное поле или оно некорректно'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ValidationError'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n      security:\r\n      - jwt-token:\r\n        - write:admin\r\n\r\n  /genres/{slug}/:\r\n    delete:\r\n      tags:\r\n        - GENRES\r\n      operationId: Удаление жанра\r\n      description: |\r\n        Удалить жанр.\r\n\r\n        Права доступа: **Администратор**.\r\n      parameters:\r\n      - name: slug\r\n        in: path\r\n        required: true\r\n        description: Slug жанра\r\n        schema:\r\n          type: string\r\n      responses:\r\n        204:\r\n          description: 'Удачное выполнение запроса'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n        404:\r\n          description: Жанр не найден\r\n      security:\r\n      - jwt-token:\r\n        - write:admin\r\n\r\n  /titles/:\r\n    get:\r\n      tags:\r\n        - TITLES\r\n      operationId: Получение списка всех произведений\r\n      description: |\r\n        Получить список всех объектов.\r\n\r\n        Права доступа: **Доступно без токена**\r\n      parameters:\r\n        - name: category\r\n          in: query\r\n          description: фильтрует по полю slug категории\r\n          schema:\r\n            type: string\r\n        - name: genre\r\n          in: query\r\n          description: фильтрует по полю slug жанра\r\n          schema:\r\n            type: string\r\n        - name: name\r\n          in: query\r\n          description: фильтрует по названию произведения\r\n          schema:\r\n            type: string\r\n        - name: year\r\n          in: query\r\n          description: фильтрует по году\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  type: object\r\n                  properties:\r\n                    count:\r\n                      type: integer\r\n                    next:\r\n                      type: string\r\n                    previous:\r\n                      type: string\r\n                    results:\r\n                      type: array\r\n                      items:\r\n                        $ref: '#/components/schemas/Title'\r\n    post:\r\n      tags:\r\n        - TITLES\r\n      operationId: Добавление произведения\r\n      description: |\r\n        Добавить новое произведение.\r\n\r\n        Права доступа: **Администратор**.\r\n\r\n        Нельзя добавлять произведения, которые еще не вышли (год выпуска не может быть больше текущего).\r\n\r\n        При добавлении нового произведения требуется указать уже существующие категорию и жанр.\r\n      parameters: []\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/TitleCreate'\r\n      responses:\r\n        201:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Title'\r\n        400:\r\n          description: 'Отсутствует обязательное поле или оно некорректно'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ValidationError'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n      security:\r\n      - jwt-token:\r\n        - write:admin\r\n  /titles/{titles_id}/:\r\n    parameters:\r\n      - name: titles_id\r\n        in: path\r\n        required: true\r\n        description: ID объекта\r\n        schema:\r\n          type: integer\r\n    get:\r\n      tags:\r\n        - TITLES\r\n      operationId: Получение информации о произведении\r\n      description: |\r\n        Информация о произведении\r\n\r\n\r\n        Права доступа: **Доступно без токена**\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Title'\r\n        404:\r\n          description: Объект не найден\r\n    patch:\r\n      tags:\r\n        - TITLES\r\n      operationId: Частичное обновление информации о произведении\r\n      description: |\r\n        Обновить информацию о произведении\r\n\r\n\r\n        Права доступа: **Администратор**\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/TitleCreate'\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Title'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n        404:\r\n          description: Объект не найден\r\n      security:\r\n      - jwt-token:\r\n        - write:admin\r\n    delete:\r\n      tags:\r\n        - TITLES\r\n      operationId: Удаление произведения\r\n      description: |\r\n        Удалить произведение.\r\n\r\n        Права доступа: **Администратор**.\r\n      responses:\r\n        204:\r\n          description: 'Удачное выполнение запроса'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n        404:\r\n          description: Произведение не найдено\r\n      security:\r\n      - jwt-token:\r\n        - write:admin\r\n\r\n  /titles/{title_id}/reviews/:\r\n    parameters:\r\n      - name: title_id\r\n        in: path\r\n        required: true\r\n        description: ID произведения\r\n        schema:\r\n          type: integer\r\n    get:\r\n      tags:\r\n        - REVIEWS\r\n      operationId: Получение списка всех отзывов\r\n      description: |\r\n        Получить список всех отзывов.\r\n\r\n        Права доступа: **Доступно без токена**.\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  type: object\r\n                  properties:\r\n                    count:\r\n                      type: integer\r\n                    next:\r\n                      type: string\r\n                    previous:\r\n                      type: string\r\n                    results:\r\n                      type: array\r\n                      items:\r\n                        $ref: '#/components/schemas/Review'\r\n        404:\r\n          description: Произведение не найдено\r\n    post:\r\n      tags:\r\n        - REVIEWS\r\n      operationId: Добавление нового отзыва\r\n      description: |\r\n        Добавить новый отзыв. Пользователь может оставить только один отзыв на произведение.\r\n\r\n        Права доступа: **Аутентифицированные пользователи.**\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Review'\r\n      responses:\r\n        201:\r\n          description: 'Удачное выполнение запроса'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Review'\r\n        400:\r\n          description: 'Отсутствует обязательное поле или оно некорректно'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ValidationError'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        404:\r\n          description: Произведение не найдено\r\n      security:\r\n      - jwt-token:\r\n        - write:user,moderator,admin\r\n  /titles/{title_id}/reviews/{review_id}/:\r\n    parameters:\r\n      - name: title_id\r\n        in: path\r\n        required: true\r\n        description: ID произведения\r\n        schema:\r\n          type: integer\r\n      - name: review_id\r\n        in: path\r\n        required: true\r\n        description: ID отзыва\r\n        schema:\r\n          type: integer\r\n    get:\r\n      tags:\r\n        - REVIEWS\r\n      operationId: Полуение отзыва по id\r\n      description: |\r\n        Получить отзыв по id для указанного произведения.\r\n\r\n        Права доступа: **Доступно без токена.**\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Review'\r\n        404:\r\n          description: Произведение или отзыв не найден\r\n    patch:\r\n      tags:\r\n        - REVIEWS\r\n      operationId: Частичное обновление отзыва по id\r\n      description: |\r\n        Частично обновить отзыв по id.\r\n\r\n        Права доступа: **Автор отзыва, модератор или администратор.**\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Review'\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Review'\r\n        400:\r\n          description: 'Отсутствует обязательное поле или оно некорректно'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ValidationError'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n        404:\r\n          description: Произведение не найдено\r\n      security:\r\n      - jwt-token:\r\n        - write:user,moderator,admin\r\n    delete:\r\n      tags:\r\n        - REVIEWS\r\n      operationId: Удаление отзыва по id\r\n      description: |\r\n        Удалить отзыв по id\r\n\r\n        Права доступа: **Автор отзыва, модератор или администратор.**\r\n      responses:\r\n        204:\r\n          description: 'Удачное выполнение запроса'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n        404:\r\n          description: Произведение или отзыв не найдены\r\n      security:\r\n      - jwt-token:\r\n        - write:user,moderator,admin\r\n\r\n  /titles/{title_id}/reviews/{review_id}/comments/:\r\n    parameters:\r\n      - name: title_id\r\n        in: path\r\n        required: true\r\n        description: ID произведения\r\n        schema:\r\n          type: integer\r\n      - name: review_id\r\n        in: path\r\n        required: true\r\n        description: ID отзыва\r\n        schema:\r\n          type: integer\r\n    get:\r\n      tags:\r\n        - COMMENTS\r\n      operationId: Получение списка всех комментариев к отзыву\r\n      description: |\r\n        Получить список всех комментариев к отзыву по id\r\n\r\n        Права доступа: **Доступно без токена.**\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  type: object\r\n                  properties:\r\n                    count:\r\n                      type: integer\r\n                    next:\r\n                      type: string\r\n                    previous:\r\n                      type: string\r\n                    results:\r\n                      type: array\r\n                      items:\r\n                        $ref: '#/components/schemas/Comment'\r\n        404:\r\n          description: Не найдено произведение или отзыв\r\n    post:\r\n      tags:\r\n        - COMMENTS\r\n      operationId: Добавление комментария к отзыву\r\n      description: |\r\n        Добавить новый комментарий для отзыва.\r\n\r\n        Права доступа: **Аутентифицированные пользователи.**\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Comment'\r\n      responses:\r\n        201:\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Comment'\r\n          description: 'Удачное выполнение запроса'\r\n        400:\r\n          description: 'Отсутствует обязательное поле или оно некорректно'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ValidationError'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        404:\r\n          description: Не найдено произведение или отзыв\r\n      security:\r\n      - jwt-token:\r\n        - write:user,moderator,admin\r\n\r\n  /titles/{title_id}/reviews/{review_id}/comments/{comment_id}/:\r\n    parameters:\r\n      - name: title_id\r\n        in: path\r\n        required: true\r\n        description: ID произведения\r\n        schema:\r\n          type: integer\r\n      - name: review_id\r\n        in: path\r\n        required: true\r\n        description: ID отзыва\r\n        schema:\r\n          type: integer\r\n      - name: comment_id\r\n        in: path\r\n        required: true\r\n        description: ID комментария\r\n        schema:\r\n          type: integer\r\n    get:\r\n      tags:\r\n        - COMMENTS\r\n      operationId: Получение комментария к отзыву\r\n      description: |\r\n        Получить комментарий для отзыва по id.\r\n\r\n        Права доступа: **Доступно без токена.**\r\n      responses:\r\n        200:\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Comment'\r\n          description: 'Удачное выполнение запроса'\r\n        404:\r\n          description: Не найдено произведение, отзыв или комментарий\r\n    patch:\r\n      tags:\r\n        - COMMENTS\r\n      operationId: Частичное обновление комментария к отзыву\r\n      description: |\r\n        Частично обновить комментарий к отзыву по id.\r\n\r\n        Права доступа: **Автор комментария, модератор или администратор**.\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Comment'\r\n      responses:\r\n        200:\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Comment'\r\n          description: 'Удачное выполнение запроса'\r\n        400:\r\n          description: 'Отсутствует обязательное поле или оно некорректно'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ValidationError'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n        404:\r\n          description: Не найдено произведение, отзыв или комментарий\r\n      security:\r\n      - jwt-token:\r\n        - write:user,moderator,admin\r\n    delete:\r\n      tags:\r\n        - COMMENTS\r\n      operationId: Удаление комментария к отзыву\r\n      description: |\r\n        Удалить комментарий к отзыву по id.\r\n\r\n        Права доступа: **Автор комментария, модератор или администратор**.\r\n      responses:\r\n        204:\r\n          description: 'Удачное выполнение запроса'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n        404:\r\n          description: Не найдено произведение, отзыв или комментарий\r\n      security:\r\n      - jwt-token:\r\n        - write:user,moderator,admin\r\n\r\n  /users/:\r\n    get:\r\n      tags:\r\n        - USERS\r\n      operationId: Получение списка всех пользователей\r\n      description: |\r\n        Получить список всех пользователей.\r\n\r\n        Права доступа: **Администратор**\r\n      parameters:\r\n      - name: search\r\n        in: query\r\n        description: Поиск по имени пользователя (username)\r\n        schema:\r\n          type: string\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  type: object\r\n                  properties:\r\n                    count:\r\n                      type: integer\r\n                    next:\r\n                      type: string\r\n                    previous:\r\n                      type: string\r\n                    results:\r\n                      type: array\r\n                      items:\r\n                        $ref: '#/components/schemas/User'\r\n        401:\r\n          description: Необходим JWT-токен\r\n      security:\r\n      - jwt-token:\r\n        - read:admin\r\n    post:\r\n      tags:\r\n        - USERS\r\n      operationId: Добавление пользователя\r\n      description: |\r\n        Добавить нового пользователя.\r\n\r\n        Права доступа: **Администратор**\r\n\r\n        Поля `email` и `username` должны быть уникальными.\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/User'\r\n      responses:\r\n        201:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/User'\r\n        400:\r\n          description: 'Отсутствует обязательное поле или оно некорректно'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ValidationError'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n      security:\r\n      - jwt-token:\r\n        - write:admin\r\n  /users/{username}/:\r\n    parameters:\r\n      - name: username\r\n        in: path\r\n        required: true\r\n        description: Username пользователя\r\n        schema:\r\n          type: string\r\n    get:\r\n      tags:\r\n        - USERS\r\n      operationId: Получение пользователя по username\r\n      description: |\r\n        Получить пользователя по username.\r\n\r\n        Права доступа: **Администратор**\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/User'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n        404:\r\n          description: Пользователь не найден\r\n      security:\r\n      - jwt-token:\r\n        - read:admin\r\n    patch:\r\n      tags:\r\n        - USERS\r\n      operationId: Изменение данных пользователя по username\r\n      description: |\r\n        Изменить данные пользователя по username.\r\n\r\n        Права доступа: **Администратор.**\r\n\r\n        Поля `email` и `username` должны быть уникальными.\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/User'\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/User'\r\n        400:\r\n          description: 'Отсутствует обязательное поле или оно некорректно'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ValidationError'\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n        404:\r\n          description: Пользователь не найден\r\n      security:\r\n      - jwt-token:\r\n        - write:admin\r\n    delete:\r\n      tags:\r\n        - USERS\r\n      operationId: Удаление пользователя по username\r\n      description: |\r\n        Удалить пользователя по username.\r\n\r\n        Права доступа: **Администратор.**\r\n      responses:\r\n        204:\r\n          description: Удачное выполнение запроса\r\n        401:\r\n          description: Необходим JWT-токен\r\n        403:\r\n          description: Нет прав доступа\r\n        404:\r\n          description: Пользователь не найден\r\n      security:\r\n      - jwt-token:\r\n        - write:admin\r\n\r\n  /users/me/:\r\n    get:\r\n      tags:\r\n        - USERS\r\n      operationId: Получение данных своей учетной записи\r\n      description: |\r\n        Получить данные своей учетной записи\r\n\r\n        Права доступа: **Любой авторизованный пользователь**\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/User'\r\n      security:\r\n      - jwt-token:\r\n        - read:admin,moderator,user\r\n    patch:\r\n      tags:\r\n        - USERS\r\n      operationId: Изменение данных своей учетной записи\r\n      description: |\r\n        Изменить данные своей учетной записи\r\n\r\n        Права доступа: **Любой авторизованный пользователь**\r\n\r\n        Поля `email` и `username` должны быть уникальными.\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Me'\r\n      responses:\r\n        200:\r\n          description: Удачное выполнение запроса\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/User'\r\n        400:\r\n          description: 'Отсутствует обязательное поле или оно некорректно'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ValidationError'\r\n      security:\r\n      - jwt-token:\r\n        - write:admin,moderator,user\r\n\r\ncomponents:\r\n  schemas:\r\n\r\n    User:\r\n      title: Пользователь\r\n      type: object\r\n      description: Детальная информация о пользователе\r\n      required:\r\n          - username\r\n          - email\r\n      properties:\r\n        username:\r\n          type: string\r\n          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_\r\n            only.\r\n          pattern: ^[\\w.@+-]+\\z\r\n          maxLength: 150\r\n        email:\r\n          type: string\r\n          format: email\r\n          maxLength: 254\r\n        first_name:\r\n          type: string\r\n          maxLength: 150\r\n        last_name:\r\n          type: string\r\n          maxLength: 150\r\n        bio:\r\n          type: string\r\n        role:\r\n          type: string\r\n          description: Администратор, модератор или пользователь. По умолчанию `user`.\r\n          enum:\r\n            - user\r\n            - moderator\r\n            - admin\r\n\r\n    Title:\r\n      title: Объект\r\n      type: object\r\n      required:\r\n        - name\r\n      properties:\r\n        id:\r\n          type: integer\r\n          title: ID произведения\r\n          readOnly: true\r\n        name:\r\n          type: string\r\n          title: Название\r\n        year:\r\n          type: integer\r\n          title: Год выпуска\r\n        rating:\r\n          type: integer\r\n          readOnly: True\r\n          title: Рейтинг на основе отзывов, если отзывов нет — `None`\r\n        description:\r\n          type: string\r\n          title: Описание\r\n        genre:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/Genre'\r\n        category:\r\n          $ref: '#/components/schemas/Category'\r\n\r\n    TitleCreate:\r\n      title: Объект для изменения\r\n      type: object\r\n      required:\r\n        - name\r\n        - year\r\n        - genre\r\n        - category\r\n      properties:\r\n        name:\r\n          type: string\r\n          title: Название\r\n        year:\r\n          type: integer\r\n          title: Год выпуска\r\n        description:\r\n          type: string\r\n          title: Описание\r\n        genre:\r\n          type: array\r\n          items:\r\n            type: string\r\n            title: Slug жанра\r\n        category:\r\n          type: string\r\n          title: Slug категории\r\n\r\n    Genre:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n          maxLength: 256\r\n        slug:\r\n          type: string\r\n          maxLength: 50\r\n          pattern: ^[-a-zA-Z0-9_]+$\r\n      required:\r\n      - name\r\n      - slug\r\n\r\n    Review:\r\n      title: Отзыв\r\n      type: object\r\n      description: Детальная информация отзыва\r\n      required:\r\n          - text\r\n          - score\r\n      properties:\r\n        id:\r\n          type: integer\r\n          title: ID  отзыва\r\n          readOnly: true\r\n        text:\r\n          type: string\r\n          title: Текст отзыва\r\n        author:\r\n          type: string\r\n          title: username пользователя\r\n          readOnly: true\r\n        score:\r\n          type: integer\r\n          title: Оценка\r\n          minimum: 1\r\n          maximum: 10\r\n        pub_date:\r\n          type: string\r\n          format: date-time\r\n          title: Дата публикации отзыва\r\n          readOnly: true\r\n\r\n    ValidationError:\r\n      title: Ошибка валидации\r\n      type: object\r\n      properties:\r\n        field_name:\r\n          type: array\r\n          items:\r\n            type: string\r\n\r\n    Token:\r\n      title: Токен\r\n      type: object\r\n      properties:\r\n        token:\r\n          type: string\r\n          title: access токен\r\n\r\n    Comment:\r\n      title: Комментарий\r\n      type: object\r\n      description: Детальная информация комментария\r\n      required:\r\n        - text\r\n      properties:\r\n        id:\r\n          type: integer\r\n          title: ID  комментария\r\n          readOnly: true\r\n        text:\r\n          type: string\r\n          title: Текст комментария\r\n        author:\r\n          type: string\r\n          title: username автора комментария\r\n          readOnly: true\r\n        pub_date:\r\n          type: string\r\n          format: date-time\r\n          title: Дата публикации комментария\r\n          readOnly: true\r\n\r\n    Me:\r\n      type: object\r\n      properties:\r\n        username:\r\n          type: string\r\n          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_\r\n            only.\r\n          pattern: ^[\\w.@+-]+\\z\r\n          maxLength: 150\r\n        role:\r\n          enum:\r\n          - admin\r\n          - moderator\r\n          - user\r\n          type: string\r\n          readOnly: true\r\n        email:\r\n          type: string\r\n          format: email\r\n          maxLength: 254\r\n        first_name:\r\n          type: string\r\n          maxLength: 150\r\n        last_name:\r\n          type: string\r\n          maxLength: 150\r\n        bio:\r\n          type: string\r\n      required:\r\n      - username\r\n      - email\r\n\r\n    Category:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n          maxLength: 256\r\n        slug:\r\n          type: string\r\n          maxLength: 50\r\n          pattern: ^[-a-zA-Z0-9_]+$\r\n      required:\r\n      - name\r\n      - slug\r\n\r\n  securitySchemes:\r\n    jwt-token:\r\n      type: apiKey\r\n      description: Используется аутентификация с использованием JWT-токенов\r\n      name: Bearer\r\n      in: header\r\n",
			"canonicalURL": "/github.com/p1rt-py/api_yamdb@a11a70605f9d9d9534b6308861def95d1395b05e/-/blob/api_yamdb/static/redoc.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/p1rt-py/api_yamdb/blob/a11a70605f9d9d9534b6308861def95d1395b05e/api_yamdb/static/redoc.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/categories/\": post: operation \"Добавление новой категории\": security: at api_yamdb/static/redoc.yaml:198:11: list of scopes MUST be empty for \"type\" \"apiKey\""
}