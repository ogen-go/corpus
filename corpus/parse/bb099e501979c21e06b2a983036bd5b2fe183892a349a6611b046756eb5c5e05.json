{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/decentraland/catalyst-api-specs"
		},
		"file": {
			"name": "catalyst.yaml",
			"size": 0,
			"path": "openapi/catalyst.yaml",
			"byteSize": 6638,
			"content": "openapi: 3.0.3\ninfo:\n  title: API Specification for the Decentraland Catalyst Server (BETA)\n  version: '1.0'\n  description: \u003e-      \n     A Catalyst is a Server that runs different services. \n     These services currently work as the backbone for Decentraland and work in a decentralized network.\n     The current specification details the following services: \n     \u003cbr/\u003e\u003cbr/\u003e- Comms Service\n     \u003cbr/\u003e- Content Server\n     \u003cbr/\u003e- Lambdas Service\n     \u003cbr/\u003e\n     \u003cbr/\u003eWARNING: We are working to close the version 1.0 of the Catalyst Protocol defined by this API. \n     So far this is what we have and it's public but we are still working on refinement and\n     during this process we may decided to deprecate or change some of the endpoints.\n  x-logo:\n    url: 'https://cryptologos.cc/logos/decentraland-mana-logo.png'\n  license:    \n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n \nservers:\n  - url: 'https://peer.decentraland.zone'\n    description: Catalyst Development instance\n  - url: 'https://peer-testing.decentraland.org'\n    description: Catalyst Staging instance\n  - url: 'https://peer.decentraland.org'\n    description: First production Catalyst node\ntags:\n  - name: Content Server\n    description: \u003e-\n     Decentraland is a virtual world that is owned by its users. One of the biggest differentiators about \n     Decentraland is its level of decentralization. Users can own LAND, wearables, and probably other types of \n     items in the future. Each of these items is an NFT in itself, and therefore ownership is determined by the \n     Ethereum (or EVM-compatible) blockchain.\n     \u003cbr/\u003e\u003cbr/\u003eNow, when a new wearable is created, or when a user uploads a scene to their LAND/parcel, all \n     necessary files (3d models, textures, music, etc) are uploaded to a \"content server\". Why are we using \n     these servers instead of the blockchain? Mainly because it would be prohibitively expensive to store files as \n     big as 3d models in the blockchain. Users would have to pay fees so high to upload content to their parcels \n     that nobody would do it.\n     \u003cbr/\u003e\u003cbr/\u003eSo this is where content servers come into play. The content server is mainly a server where users \n     can upload these files we mentioned before. Each server will verify against the blockchain that the user making \n     the upload is actually allowed to do so. For example, in the case of scenes, the server will check that the \n     deployer owns all the parcels they are trying to modify.\n     \u003cbr/\u003e\u003cbr/\u003eAnd the most important part is that all content servers will then sync with each other. \n     So, for example, if a scene is modified in one server, the update itself will be broadcasted to the other ones. \n     Then, in the case a content server goes down for some reason, all content will still be present in the other ones.\n  - name: Comms\n    description: \u003e- \n      Comms is comprised of two distinct modules: One for Catalyst server called \"Lighthouse\" and other for clients \u0026 \n      P2P network called \"Peer Library\".\n      \u003cbr/\u003eThe Lighthouse is a server that tracks peers in different positions in order to enable them to make the \n      necessary connections. It also handles authentication.\n  - name: Lambdas\n    description: \u003e-  \n      This service provides a set of utilities required by the Catalyst Server Clients\\Consumers in order to \n      retrieve or validate data. \npaths:\n  /content/audit/{entityType}/{entityId}:\n    $ref: 'paths/content/content@audit@{entityType}@{entityId}.yaml'\n  /content/challenge:\n    $ref: paths/content/content@challenge.yaml\n  /content/contents/{hashId}:\n    $ref: 'paths/content/content@contents@{hashId}.yaml'\n  /content/contents/{hashId}/active-entities:\n    $ref: 'paths/content/content@contents@{hashId}@active-entities.yaml'\n  /content/available-content:\n    $ref: paths/content/content@available-content.yaml\n  /content/entities:\n    $ref: paths/content/content@entities.yaml\n  /content/entities/active/collections/{collectionUrn}:\n    $ref: paths/content/content@entities@active@collections@{collectionUrn}.yaml\n  /content/entities/active:\n    $ref: 'paths/content/content@entities@active.yaml'\n  /content/failed-deployments:\n    $ref: paths/content/content@failed-deployments.yaml\n  /content/pointer-changes:\n    $ref: paths/content/content@pointer-changes.yaml\n  /content/snapshot:\n    $ref: 'paths/content/content@snapshot.yaml'\n  /content/status:\n    $ref: paths/content/content@status.yaml\n  /lambdas/status:\n    $ref: paths/lambdas/lambdas@status.yaml\n  /lambdas/health:\n    $ref: paths/lambdas/lambdas@health.yaml\n  /lambdas/collections:\n    $ref: paths/lambdas/lambdas@collections.yaml   \n  /lambdas/collections/contents/{urn}/thumbnail:\n    $ref: 'paths/lambdas/lambdas@collections@contents@{urn}@thumbnail.yaml' \n  /lambdas/collections/contents/{urn}/image:\n    $ref: 'paths/lambdas/lambdas@collections@contents@{urn}@image.yaml' \n  /lambdas/collections/standard/erc721/{chainId}/{contract}/{option}/{emission}:\n    $ref: 'paths/lambdas/lambdas@collections@standard@erc721@{chainId}@{contract}@{option}@{emission}.yaml'\n  /lambdas/collections/wearables:\n    $ref: 'paths/lambdas/lambdas@collections@wearables.yaml'\n  /lambdas/collections/wearables-by-owner/{address}:\n    $ref: 'paths/lambdas/lambdas@collections@wearables-by-owner@{address}.yaml'\n  /lambdas/contentv2/scenes:\n    $ref: 'paths/lambdas/lambdas@contentv2@scenes.yaml'   \n  /lambdas/contentv2/parcel_info: \n    $ref: 'paths/lambdas/lambdas@contentv2@parcel_info.yaml'\n  /lambdas/contentv2/contents/{cid}:\n    $ref: 'paths/lambdas/lambdas@contentv2@contents@{cid}.yaml'\n  /lambdas/contracts/servers:\n    $ref: 'paths/lambdas/lambdas@contracts@servers.yaml'\n  /lambdas/contracts/pois:\n    $ref: 'paths/lambdas/lambdas@contracts@pois.yaml'\n  /lambdas/contracts/denylisted-names:\n    $ref: 'paths/lambdas/lambdas@contracts@denylisted-names.yaml'\n  /lambdas/crypto/validate-signature: \n    $ref: 'paths/lambdas/lambdas@crypto@validate-signature.yaml'\n  /lambdas/explore/hot-scenes:\n    $ref: 'paths/lambdas/lambdas@explore@hot-scenes.yaml'\n  /lambdas/explore/realms:\n    $ref: 'paths/lambdas/lambdas@explore@realms.yaml'\n  /lambdas/profiles:\n    $ref: 'paths/lambdas/lambdas@profiles.yaml'\n  /lambdas/profiles/{id}:\n    $ref: 'paths/lambdas/lambdas@profiles@{id}.yaml'\n  /comms/config:\n    $ref: 'paths/comms/comms@config.yaml'\n  /comms/islands:\n    $ref: 'paths/comms/comms@islands.yaml'\n  /comms/islands/{islandId}:\n    $ref: 'paths/comms/comms@islands@{islandId}.yaml'\n  /comms/peers: \n    $ref: 'paths/comms/comms@peers.yaml'\n  /comms/status:\n    $ref: 'paths/comms/comms@status.yaml'\n"
		}
	},
	"Error": "parse: parse spec: parse operations: /lambdas/explore/realms: referenced pathItem not supported"
}