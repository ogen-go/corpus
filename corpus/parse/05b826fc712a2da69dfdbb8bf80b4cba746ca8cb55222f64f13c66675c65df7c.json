{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/teamdigitale/api-openapi-samples"
		},
		"file": {
			"name": "spid-aa-template.yaml",
			"size": 0,
			"path": "openapi-v3/spid-aa-template.yaml",
			"byteSize": 10548,
			"content": "#\n# Template file per Attribute Authority che autentica:\n#  - tramite MODI\n#  - tramite MODI-BIS\n#  - tramite UserConsent\n#\nx-commons:\n  ratelimit-headers: \u0026ratelimit-headers\n    X-RateLimit-Limit:\n      $ref: '#/components/headers/X-RateLimit-Limit'\n    X-RateLimit-Remaining:\n      $ref: '#/components/headers/X-RateLimit-Remaining'\n    X-RateLimit-Reset:\n      $ref: '#/components/headers/X-RateLimit-Reset'\n  common-responses: \u0026common-responses\n    '403':\n      $ref: \u003e-\n        #/components/responses/403Forbidden\n    '400':\n      $ref: '#/components/responses/400BadRequest'\n    '429':\n      $ref: '#/components/responses/429TooManyRequests'\n    '503':\n      $ref: '#/components/responses/503ServiceUnavailable'\n    default:\n      $ref: '#/components/responses/default'\nopenapi: 3.0.3\ninfo:\n  version: \"1.0.0\"\n  title: |-\n    Patente AA.\n  x-summary: \u003e-\n    Fornisce l'attributo patente di guida.\n  description: |\n    Documentazione\n    ...\n  x-spid:\n    # Questa sezione è obbligatoria §2.1\n    aa-version: 1.0.0\n    aa-home: https://aa.example/patente/v1/ui/openapi.yaml\n    aa-registry: https://spid.gov.it/aa/registry/patente/v1/openapi.yaml\n  termsOfService: 'http://swagger.io/terms/'\n  # Chi posso contattare per informazioni sul servizio e sul suo stato?\n  contact:\n    email: robipolli@gmail.com\n    name: Roberto Polli\n    url: https://twitter.com/ioggstream\n  # L'audience delle API. Attualmente e' definito solamente\n  #   la tipologia `public`.\n  x-audience:\n    - public\n  # Ogni API deve avere un UUID, invariante nel tempo e\n  #   rispetto al `title`.\n  x-api-id: 00000000-0000-0000-0000-000000000000\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n# Una lista di `tag` utili a raggruppare le varie operazioni\n#   eseguite dalle API. Ogni `tag` puo' referenziare un link\n#   alla sua descrizione.\ntags:\n  - name: public\n    description: Retrieve informations v. §2.7\n    externalDocs: \u0026lg-spid-aa\n      description: Linee Guida Spid AA\n      url: https://agid.gov.it/riferimento-lg-spid-aa\n  - name: protected\n    description: Accesso permesso per enti e SP convenzionati, v. §2.7\n    externalDocs:\n      \u003c\u003c: *lg-spid-aa\n  - name: private\n    description: Accesso previo consenso v. §2.7\n    externalDocs:\n      \u003c\u003c: *lg-spid-aa\nservers:\n  - description: |-\n      I server devono rispettare una serie di indicazioni\n    url: https://aa.example/patente/v1\n\n  - description: Development server\n    url: https://localhost:8443/patente/v1\n#\n# Qui vanno tutti i path.\n#\npaths:\n  /patente/{tax_code}:\n    get:\n      parameters:\n      - name: tax_code\n        in: path\n        required: true\n        schema:\n          type: string\n          description: |-\n            il codice fiscale del soggetto\n      summary: Ritorna un timestamp in formato RFC5424.\n      x-spid-operation:\n        consentRequired: N\n        spidLevel: LoA1\n        offlineAccess: true\n        offlineAccessDurationMax: 864000\n      description: |\n        Ritorna gli attributi relativi al codice fiscale passato\n        in accordo con il profilo di accesso (security scope).\n\n        Esempio 1: una PA richiede accesso agli attributi avendo\n          nell'Access Token il solo scope `validate_patente`.\n          In questo caso, il server ritorna solamente `true` eventualmente\n          incapsulato in un JWT, ad indicare\n          che il soggetto è in possesso di una patente di guida di tipo \"B\"\n          ```\n          {\"items\": [{\"tipo\": \"B\", \"valida\": true}]}\n          ```\n\n        Esempio 2: una PA richiede accesso agli attributi avendo\n          nell'Access Token lo scope `read_patente`.\n          In questo caso, il server ritorna tutti i dati eventualmente\n          incapsulati in un JWT\n          ```\n          {\"items\":  [{\"tipo\": \"B\", \"valida\": true, \"patente\": \"UA000111222333W\"}]}\n          ```\n      operationId: get_patente\n      security:\n      - UserConsentOIDC: [read_patente, validate_patente, openid, profile, \"offline_access\"]\n      - \"SPID Attribute Authority Security Scheme\": [read_patente, validate_patente]\n      - UserConsent: [read_patente, validate_patente]\n      tags:\n        - protected\n        - private\n      responses:\n        \u003c\u003c: *common-responses\n        '200':\n          description: |\n            Il server ritorna gli attributi.\n          headers:\n            \u003c\u003c: *ratelimit-headers\n          content:\n            application/json:\n              schema:\n                properties:\n                  items:\n                    type: array\n                    maxItems: 10\n                    minItems: 0\n                    items:\n                      $ref: '#/components/schemas/Patente'\n  /status:\n    get:\n      summary: Ritorna lo stato dell'applicazione.\n      description: |\n        Ritorna lo stato dell'applicazione. A scopo\n        di test, su base randomica puo' ritornare\n        un errore.\n      operationId: get_status\n      tags:\n        - public\n      responses:\n        \u003c\u003c: *common-responses\n        '200':\n          description: |\n            Il server ha ritornato lo status. In caso di problemi\n            ritorna sempre un problem+json.\n          # Questi header di throttling sono obbligatori e definiti\n          #   nel Nuovo modello di interoperabilità.\n          headers:\n            \u003c\u003c: *ratelimit-headers\n            Cache-Control:\n              $ref: '#/components/headers/Cache-Control'\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Problem'\ncomponents:\n  securitySchemes:\n    \"SPID Attribute Authority Security Scheme\":\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: |-\n        A JWT signed with a trusted key.\n        A process to identify trusted keys must be defined.\n    ExternalAS:\n      type: oauth2\n      description: |-\n        This API uses OAuth 2 with the clientCredentials flow\n        with a specific authorization server.\n      flows:\n        clientCredentials:\n          tokenUrl: https://pond.example/oauth2/tokenUrl\n          scopes:\n            read_patente: read full data\n            validate_patente: validate only\n    UserConsent:\n      type: oauth2\n      description: |-\n        This API uses OAuth 2 with the clientCredentials flow with PKCE.\n        The behavior\n      flows:\n        authorizationCode:\n          authorizationUrl: https://aa.example/patente/v1/authorization\n          tokenUrl: https://aa.example/patente/v1/token\n          scopes:\n            read_patente: read full data\n            validate_patente: validate only\n    UserConsentOIDC:\n      type: openIdConnect\n      openIdConnectUrl: https://aa.example/.well-known/openid-configuration\n      description: |-\n        Di seguito un contenuto di esempio dei metadati degli endpoint OIDC usati per ottenere il consenso:\n\n        ```\n        {\n          \"issuer\": \"https://authorization.aa.it/\",\n          \"authorization_endpoint\": \"https://authorization.aa.it/authorize\",\n          \"token_endpoint\": \"https://authorization.aa.it/token\",\n          \"jwks_uri\": \"https://example.com/.well-known/jwks.json\",\n          \"scopes_supported\": [\n            \"offline_access\",\n            \"openid\",\n            \"profile\"\n          ],\n          \"response_types_supported\": [\n            \"code\"\n          ],\n          \"token_endpoint_auth_methods_supported\": [\n            \"private_key_jwt\"\n          ],\n          \"subject_types_supported\":[\"public\"],\n        }\n        ````\n\n  examples:\n    403Forbidden:\n      summary: §2.3 Consenso non fornito\n      value:\n        title: Forbidden\n        status: 403\n        detail: Consent Required\n        instance: https://aa.example/authorization\n  headers:\n    Cache-Control:\n      schema:\n        type: string\n    X-RateLimit-Limit:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/headers/X-RateLimit-Limit'\n    X-RateLimit-Remaining:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/headers/X-RateLimit-Remaining'\n    X-RateLimit-Reset:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/headers/X-RateLimit-Reset'\n    Retry-After:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/headers/Retry-After'\n\n  responses:\n    # Predefined error codes for this API\n    403Forbidden:\n      description: |-\n        Questa risposta viene data ad un SP quando gli attributi\n        sono accessibili solo previo consenso\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/Problem'\n          examples:\n            403Forbidden:\n              $ref: '#/components/examples/403Forbidden'\n    400BadRequest:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/400BadRequest'\n    404NotFound:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/404NotFound'\n    429TooManyRequests:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/429TooManyRequests'\n    503ServiceUnavailable:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/503ServiceUnavailable'\n    default:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/default'\n\n  schemas:\n    JWTAuthentication:\n      type: object\n      properties:\n        iss:\n          type: string\n          format: url\n\n    XSpid:\n      type: object\n      required:\n        - aa-version\n        - aa-home\n        - aa-registry\n      properties:\n        aa-version:\n          type: string\n          example: 1.0.0\n        aa-home:\n          type: string\n          format: url\n        aa-registry:\n          type: string\n          format: url\n    Problem:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/schemas/Problem'\n    Patente:\n      type: object\n      description: Patente di guida\n      externalDocs:\n        url: http://www.mit.gov.it/documentazione/patenti-di-guida-informazioni-riconoscimento-sostituzione-relative-alla-patente-di\n      properties:\n        valida:\n          type: boolean\n        tipo:\n          type: string\n          enum: [\"A\", \"B\", \"C\", \"D\"]\n        patente:\n          type: string\n          description: |-\n            Il pattern di validazione delle patenti è qui http://www.mit.gov.it/normativa/Circolare_protocollo_30039_24-10-2011\n          pattern: \"UI[A-Z0-9]+\"\n        emessa_il:\n          type: string\n          format: date-time\n          example: '2018-12-30T12:23:32Z'\n"
		}
	},
	"Error": "parse: parse spec: paths: /patente/{tax_code}: get: operation \"get_patente\": responses: 400: resolve \"#/components/responses/400BadRequest\" reference: resolve \"https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/400BadRequest\" reference: invalid response reference: \"https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/400BadRequest\""
}