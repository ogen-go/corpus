{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/godaddy.certificates/openapi.yml",
			"byteSize": 102516,
			"content": "openapi: 3.0.1\ninfo:\n  x-ballerina-display:\n    label: GoDaddy Certificates\n    iconPath: \"icon.png\"\n  title: GoDaddy Certificates API\n  version: \"1.0\"\n  description: >-\n    This is a generated connector for [GoDaddy Certificates API v1](https://developer.godaddy.com/doc/endpoint/certificates) OpenAPI specification.\n    \n    The GoDaddy Certificates API provides capability to access GoDaddy operations related to certificates.\n  x-ballerina-init-description: >-\n    The connector initialization requires setting the API credentials. \n    \n    Create a [GoDaddy account](https://sg.godaddy.com/) and obtain tokens by following [this guide](https://developer.godaddy.com/getstarted).\nservers:\n- url: https://api.ote-godaddy.com/\ntags:\n- name: v1\n  description: \"\"\n- name: v2\n  description: \"\"\npaths:\n  /v1/certificates:\n    post:\n      tags:\n      - v1\n      summary: Create a pending order for certificate\n      description: '<p>Creating a certificate order can be a long running asynchronous\n        operation in the PKI workflow. The PKI API supports 2 options for getting\n        the completion stateful actions for this asynchronous operations: 1) by polling\n        operations -- see /v1/certificates/{certificateId}/actions 2) via WebHook\n        style callback -- see ''/v1/certificates/{certificateId}/callback''.</p>'\n      operationId: certificate_create\n      parameters:\n      - name: X-Market-Id\n        in: header\n        description: Setting locale for communications such as emails and error messages\n        schema:\n          type: string\n          default: Default locale for shopper account\n      requestBody:\n        description: The certificate order information\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CertificateCreate'\n        required: true\n      responses:\n        202:\n          description: Request was successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateIdentifier'\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Certificate state does not allow renew\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        422:\n          description: '`email` is not empty<br>`csr` is invalid'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: certificateCreate\n      security:\n          - ApiKeyAuth: []\n  /v1/certificates/validate:\n    post:\n      tags:\n      - v1\n      summary: Validate a pending order for certificate\n      operationId: certificate_validate\n      parameters:\n      - name: X-Market-Id\n        in: header\n        description: Setting locale for communications such as emails and error messages\n        schema:\n          type: string\n          default: Default locale for shopper account\n      requestBody:\n        description: The certificate order info\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CertificateCreate'\n        required: true\n      responses:\n        204:\n          description: Request validated successfully\n          content: {}\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Certificate state does not allow renew\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        422:\n          description: '`email` is not empty <br> `csr` is invalid'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: certificateCreate\n      security:\n          - ApiKeyAuth: []\n  /v1/certificates/{certificateId}:\n    get:\n      tags:\n      - v1\n      summary: Retrieve certificate details\n      description: Once the certificate order has been created, this method can be\n        used to check the status of the certificate. This method can also be used\n        to retrieve details of the certificate.\n      operationId: certificate_get\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to lookup\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Certificate details retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Certificate'\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Certificate id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n          - ApiKeyAuth: []\n  /v1/certificates/{certificateId}/actions:\n    get:\n      tags:\n      - v1\n      summary: Retrieve all certificate actions\n      description: This method is used to retrieve all stateful actions relating to\n        a certificate lifecycle.\n      operationId: certificate_action_retrieve\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to register for callback\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Action retrieval successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ArrayOfCertificateAction'\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Certificate not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n          - ApiKeyAuth: []\n  /v1/certificates/{certificateId}/email/{emailId}/resend:\n    post:\n      tags:\n      - v1\n      summary: Resend an email\n      description: This method can be used to resend emails by providing the certificate\n        id and the email id\n      operationId: certificate_resend_email\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to resend email\n        required: true\n        schema:\n          type: string\n      - name: emailId\n        in: path\n        description: Email id for email to resend\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: Email sent successfully\n          content: {}\n        404:\n          description: Certificate not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Email Id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n          - ApiKeyAuth: []\n  /v1/certificates/{certificateId}/email/resend/{emailAddress}:\n    post:\n      tags:\n      - v1\n      summary: Add alternate email address\n      description: This method adds an alternate email address to a certificate order\n        and re-sends all existing request emails to that address.\n      operationId: certificate_alternate_email_address\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to resend emails\n        required: true\n        schema:\n          type: string\n      - name: emailAddress\n        in: path\n        description: Specific email address to resend email\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Alternate email address added and emails re-sent\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateEmailHistory'\n        404:\n          description: Certificate not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Certificate state does not allow alternate email address\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n          - ApiKeyAuth: []\n  /v1/certificates/{certificateId}/email/{emailId}/resend/{emailAddress}:\n    post:\n      tags:\n      - v1\n      summary: Resend email to email address\n      description: This method can be used to resend emails by providing the certificate\n        id, the email id, and the recipient email address\n      operationId: certificate_resend_email_address\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to resend emails\n        required: true\n        schema:\n          type: string\n      - name: emailId\n        in: path\n        description: Email id for email to resend\n        required: true\n        schema:\n          type: string\n      - name: emailAddress\n        in: path\n        description: Specific email address to resend email\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: Email sent successfully\n          content: {}\n        404:\n          description: Certificate not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Email Id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n          - ApiKeyAuth: []\n  /v1/certificates/{certificateId}/email/history:\n    get:\n      tags:\n      - v1\n      summary: Retrieve email history\n      description: This method can be used to retrieve all emails sent for a certificate.\n      operationId: certificate_email_history\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to retrieve email history\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Email history retrieval successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateEmailHistory'\n        409:\n          description: Email history not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n          - ApiKeyAuth: []\n  /v1/certificates/{certificateId}/callback:\n    get:\n      tags:\n      - v1\n      summary: Retrieve system stateful action callback url\n      description: This method is used to retrieve the registered callback url for\n        a certificate.\n      operationId: certificate_callback_get\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to register for stateful action callback\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Callback registered\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateCallback'\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Certificate id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n          - ApiKeyAuth: []\n    put:\n      tags:\n      - v1\n      summary: Register of certificate action callback\n      description: This method is used to register/replace url for callbacks for stateful\n        actions relating to a certificate lifecycle. The callback url is a Webhook\n        style pattern and will receive POST http requests with json body defined in\n        the CertificateAction model definition for each certificate action.  Only\n        one callback URL is allowed to be registered for each certificateId, so it\n        will replace a previous registration.\n      operationId: certificate_callback_replace\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to register/replace for callback\n        required: true\n        schema:\n          type: string\n      - name: callbackUrl\n        in: query\n        description: Callback url registered/replaced to receive stateful actions\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: Callback replaced/registered\n          content: {}\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Certificate id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        422:\n          description: Callback url is missing <br> Callback url is malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n          - ApiKeyAuth: []\n    delete:\n      tags:\n      - v1\n      summary: Unregister system callback\n      description: Unregister the callback for a particular certificate.\n      operationId: certificate_callback_delete\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to unregister callback\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: Callback removed\n          content: {}\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Certificate id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n          - ApiKeyAuth: []\n  /v1/certificates/{certificateId}/cancel:\n    post:\n      tags:\n      - v1\n      summary: Cancel a pending certificate\n      description: Use the cancel call to cancel a pending certificate order.\n      operationId: certificate_cancel\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to cancel\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: Certificate order has been canceled\n          content: {}\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Certificate id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Certificate state does not allow cancel\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n          - ApiKeyAuth: []\n  /v1/certificates/{certificateId}/download:\n    get:\n      tags:\n      - v1\n      summary: Download certificate\n      operationId: certificate_download\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to download\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Certificate retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateBundle'\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Certificate id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Certificate state does not allow download\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - ApiKeyAuth: []\n  /v1/certificates/{certificateId}/reissue:\n    post:\n      tags:\n      - v1\n      summary: Reissue active certificate\n      description: <p>Rekeying is the process by which the private and public key\n        is changed for a certificate. It is a simplified reissue,where only the CSR\n        is changed. Reissuing is the process by which domain names are added or removed\n        from a certificate.Once a request is validated and approved, the certificate\n        will be reissued with the new common name and sans specified. Unlimited reissues\n        are available during the lifetime of the certificate.New names added to a\n        certificate that do not share the base domain of the common name may take\n        additional time to validate. If this API call is made before a previous pending\n        reissue has been validated and issued, the previous reissue request is automatically\n        rejected and replaced with the current request.</p>\n      operationId: certificate_reissue\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to reissue\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: The reissue request info\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CertificateReissue'\n        required: true\n      responses:\n        202:\n          description: Reissue request created\n          content: {}\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Certificate id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Certificate state does not allow reissue\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        422:\n          description: '`csr` is invalid<br>Delay revocation exceeds maximum'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: reissueCreate\n      security:\n        - ApiKeyAuth: []\n  /v1/certificates/{certificateId}/renew:\n    post:\n      tags:\n      - v1\n      summary: Renew active certificate\n      description: Renewal is the process by which the validity of a certificate is\n        extended. Renewal is only available 60 days prior to expiration of the previous\n        certificate and 30 days after the expiration of the previous certificate.\n        The renewal supports modifying a set of the original certificate order information.\n        Once a request is validated and approved, the certificate will be issued with\n        extended validity. Since subject alternative names can be removed during a\n        renewal, we require that you provide the subject alternative names you expect\n        in the renewed certificate. New names added to a certificate that do not share\n        the base domain of the common name may take additional time to validate. </p>\n      operationId: certificate_renew\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to renew\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: The renew request info\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CertificateRenew'\n        required: true\n      responses:\n        202:\n          description: Renew request created\n          content: {}\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Certificate id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Certificate state does not allow renew\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        422:\n          description: '`csr` is invalid'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: renewCreate\n      security:\n        - ApiKeyAuth: []\n  /v1/certificates/{certificateId}/revoke:\n    post:\n      tags:\n      - v1\n      summary: Revoke active certificate\n      description: Use revoke call to revoke an active certificate, if the certificate\n        has not been issued a 404 response will be returned.\n      operationId: certificate_revoke\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to revoke\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: The certificate revocation request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CertificateRevoke'\n        required: true\n      responses:\n        204:\n          description: Certificate Revoked\n          content: {}\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Certificate id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Certificate state does not allow revoke\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: certificateRevoke\n      security:\n        - ApiKeyAuth: []\n  /v1/certificates/{certificateId}/siteSeal:\n    get:\n      tags:\n      - v1\n      summary: Get Site seal\n      description: <p>This method is used to obtain the site seal information for\n        an issued certificate. A site seal is a graphic that the certificate purchaser\n        can embed on their web site to show their visitors information about their\n        SSL certificate. If a web site visitor clicks on the site seal image, a pop-up\n        page is displayed that contains detailed information about the SSL certificate.\n        The site seal token is used to link the site seal graphic image to the appropriate\n        certificate details pop-up page display when a user clicks on the site seal.\n        The site seal images are expected to be static images and hosted on the reseller's\n        website, to minimize delays for customer page load times.</p>\n      operationId: certificate_siteseal_get\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id\n        required: true\n        schema:\n          type: string\n      - name: theme\n        in: query\n        description: This value represents the visual theme of the seal. If seal doesn't\n          exist, default values are used if params not present. If seal does exist,\n          default values will not be used to update unless params present.\n        schema:\n          type: string\n          default: LIGHT\n          enum:\n          - DARK\n          - LIGHT\n      - name: locale\n        in: query\n        description: Determine locale for text displayed in seal image and verification\n          page. If seal doesn't exist, default values are used if params not present.\n          If seal does exist, default values will not be used to update unless params\n          present.\n        schema:\n          type: string\n          default: en\n      responses:\n        200:\n          description: Site seal retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateSiteSeal'\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Certificate id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Certificate state does not allow seal\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        422:\n          description: '''locale'' is invalid'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - ApiKeyAuth: []\n  /v1/certificates/{certificateId}/verifyDomainControl:\n    post:\n      tags:\n      - v1\n      summary: Check Domain Control\n      description: Domain control is a means for verifying the domain included in\n        the certificate order. This resource is useful for resellers that control\n        the domains for their customers, and can expedite the verification process.\n        See https://www.godaddy.com/help/verifying-your-domain-ownership-for-ssl-certificate-requests-html-or-dns-7452\n      operationId: certificate_verifydomaincontrol\n      parameters:\n      - name: certificateId\n        in: path\n        description: Certificate id to lookup\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: Domain control was successful\n          content: {}\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Certificate id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Domain control was not successful <br> Certificate state does\n            not allow domain control\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - ApiKeyAuth: []\n  /v2/certificates:\n    get:\n      tags:\n      - v1\n      summary: Search for certificate details by entitlement\n      description: Once the certificate order has been created, this method can be\n        used to check the status of the certificate. This method can also be used\n        to retrieve details of the certificates associated to an entitlement.\n      operationId: certificate_get_entitlement\n      parameters:\n      - name: entitlementId\n        in: query\n        description: Entitlement id to lookup\n        required: true\n        schema:\n          type: string\n      - name: latest\n        in: query\n        description: Fetch only the most recent certificate\n        schema:\n          type: boolean\n          default: true\n      responses:\n        200:\n          description: Certificate details retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Certificate'\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        422:\n          description: Entitlement id not provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - ApiKeyAuth: []\n  /v2/certificates/download:\n    get:\n      tags:\n      - v1\n      summary: Download certificate by entitlement\n      operationId: certificate_download_entitlement\n      parameters:\n      - name: entitlementId\n        in: query\n        description: Entitlement id to download\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Certificate retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateBundle'\n        400:\n          description: Request was malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Authentication info not sent or invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Entitlement id not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Certificate state does not allow download\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        422:\n          description: Entitlement id not provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - ApiKeyAuth: []\n  /v2/customers/{customerId}/certificates:\n    get:\n      tags:\n      - v2\n      summary: Retrieve customer's certificates\n      description: This method can be used to retrieve a list of certificates for\n        a specified customer. <ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId**\n        is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId**\n        is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>\n      operationId: getCustomerCertificatesByCustomerId\n      parameters:\n      - name: customerId\n        in: path\n        description: An identifier for a customer\n        required: true\n        schema:\n          type: string\n      - name: offset\n        in: query\n        description: Number of results to skip for pagination\n        schema:\n          pattern: ^[0-9]+$\n          type: integer\n          format: integer-positive\n      - name: limit\n        in: query\n        description: Maximum number of items to return\n        schema:\n          pattern: ^[0-9]+$\n          type: integer\n          format: integer-positive\n      responses:\n        200:\n          description: Customer certificate information retrieved.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateSummariesV2'\n        401:\n          description: Authentication info not sent or is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - UNAUTHORIZED\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - ACCESS_DENIED\n        422:\n          description: Application-specific request error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - INVALID_INPUT\n        429:\n          description: Too many requests received within interval\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorLimit'\n          x-error-codes:\n          - RATE_LIMITED\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - INTERNAL_SERVER_ERROR\n      security:\n        - ApiKeyAuth: []\n  /v2/customers/{customerId}/certificates/{certificateId}:\n    get:\n      tags:\n      - v2\n      summary: Retrieve individual certificate details\n      description: Once the certificate order has been created, this method can be\n        used to check the status of the certificate. This method can also be used\n        to retrieve details of the certificate. <ul><li>**shopperId** is **not the\n        same** as **customerId**. **shopperId** is a number of max length 10 digits\n        (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>\n      operationId: getCertificateDetailByCertIdentifier\n      parameters:\n      - name: customerId\n        in: path\n        description: An identifier for a customer\n        required: true\n        schema:\n          type: string\n      - name: certificateId\n        in: path\n        description: Certificate id to lookup\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Certificate details retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDetailV2'\n        401:\n          description: Authentication info not sent or is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - UNAUTHORIZED\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - ACCESS_DENIED\n        404:\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - NOT_FOUND\n        422:\n          description: Application-specific request error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - INVALID_INPUT\n        429:\n          description: Too many requests received within interval\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorLimit'\n          x-error-codes:\n          - RATE_LIMITED\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - INTERNAL_SERVER_ERROR\n      security:\n        - ApiKeyAuth: []\n  /v2/customers/{customerId}/certificates/{certificateId}/domainVerifications:\n    get:\n      tags:\n      - v2\n      summary: Retrieve domain verification status\n      description: This method can be used to retrieve the domain verification status\n        for a certificate request.<ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId**\n        is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId**\n        is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>\"\n      operationId: getDomainInformationByCertificateId\n      parameters:\n      - name: customerId\n        in: path\n        description: An identifier for a customer\n        required: true\n        schema:\n          type: string\n      - name: certificateId\n        in: path\n        description: Certificate id to lookup\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Domain verification status list for specified certificateId.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DomainVerificationSummary'\n        401:\n          description: Authentication info not sent or is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - UNAUTHORIZED\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - ACCESS_DENIED\n        404:\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - NOT_FOUND\n        422:\n          description: Application-specific request error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - INVALID_INPUT\n        429:\n          description: Too many requests received within interval\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorLimit'\n          x-error-codes:\n          - RATE_LIMITED\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - INTERNAL_SERVER_ERROR\n      security:\n        - ApiKeyAuth: []\n  /v2/customers/{customerId}/certificates/{certificateId}/domainVerifications/{domain}:\n    get:\n      tags:\n      - v2\n      summary: Retrieve detailed information for supplied domain\n      description: Retrieve detailed information for supplied domain, including domain\n        verification details and Certificate Authority Authorization (CAA) verification\n        details. <ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId**\n        is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId**\n        is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>\n      operationId: getDomainDetailsByDomain\n      parameters:\n      - name: customerId\n        in: path\n        description: An identifier for a customer\n        required: true\n        schema:\n          type: string\n      - name: certificateId\n        in: path\n        description: Certificate id to lookup\n        required: true\n        schema:\n          type: string\n      - name: domain\n        in: path\n        description: A valid domain name in the certificate request\n        required: true\n        schema:\n          type: string\n          format: domain\n      responses:\n        200:\n          description: Retrieve detailed information for supplied domain, including\n            domain verification details and Certificate Authority Authorization (CAA)\n            verification details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DomainVerificationDetail'\n        401:\n          description: Authentication info not sent or is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - UNAUTHORIZED\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - ACCESS_DENIED\n        404:\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - NOT_FOUND\n        422:\n          description: Application-specific request error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - INVALID_INPUT\n        429:\n          description: Too many requests received within interval\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorLimit'\n          x-error-codes:\n          - RATE_LIMITED\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - INTERNAL_SERVER_ERROR\n      security:\n        - ApiKeyAuth: []\n  /v2/customers/{customerId}/certificates/acme/externalAccountBinding:\n    get:\n      tags:\n      - v2\n      summary: Retrieves the external account binding for the specified customer\n      description: Use this endpoint to retrieve a key identifier and Hash-based Message\n        Authentication Code (HMAC) key for Automated Certificate Management Environment\n        (ACME) External Account Binding (EAB). These credentials can be used with\n        an ACME client that supports EAB (ex. CertBot) to automate the issuance request\n        and deployment of DV SSL certificates\n      operationId: getAcmeExternalAccountBinding\n      parameters:\n      - name: customerId\n        in: path\n        description: An identifier for a customer\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Acme key identifier and HMAC key for the external account binding.\n            Directory URI is also provided for making ACME requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExternalAccountBinding'\n        401:\n          description: Authentication info not sent or is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - UNAUTHORIZED\n        403:\n          description: Authenticated user is not allowed access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - ACCESS_DENIED\n        404:\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - NOT_FOUND\n        422:\n          description: Application-specific request error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - INVALID_INPUT\n        429:\n          description: Too many requests received within interval\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorLimit'\n          x-error-codes:\n          - RATE_LIMITED\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          x-error-codes:\n          - INTERNAL_SERVER_ERROR\n      security:\n        - ApiKeyAuth: []\nsecurity:\n  - ApiKeyAuth: []\ncomponents:\n  securitySchemes:\n    ApiKeyAuth:       \n      type: apiKey\n      in: header  \n      name: Authorization\n      description: Represents API Key 'Authorization'\n  schemas:\n    Certificate:\n      required:\n      - certificateId\n      - contact\n      - createdAt\n      - period\n      - productType\n      - status\n      type: object\n      properties:\n        certificateId:\n          type: string\n          description: The unique identifier of the certificate request. Only present\n            if no errors returned\n        commonName:\n          type: string\n          description: Common name of certificate\n        contact:\n          $ref: '#/components/schemas/CertificateContact'\n        createdAt:\n          type: string\n          description: The date the certificate was ordered.\n          format: iso-datetime\n        deniedReason:\n          type: string\n          description: Only present if certificate order has been denied\n        organization:\n          $ref: '#/components/schemas/CertificateOrganization'\n        period:\n          type: integer\n          description: Validity period of order. Specified in years\n        productType:\n          type: string\n          description: Certificate product type\n          enum:\n          - DV_SSL\n          - DV_WILDCARD_SSL\n          - EV_SSL\n          - OV_CS\n          - OV_DS\n          - OV_SSL\n          - OV_WILDCARD_SSL\n          - UCC_DV_SSL\n          - UCC_EV_SSL\n          - UCC_OV_SSL\n        progress:\n          type: integer\n          description: Percentage of completion for certificate vetting\n        revokedAt:\n          type: string\n          description: The revocation date of certificate (if revoked).\n          format: iso-datetime\n        rootType:\n          type: string\n          description: Root Type\n          enum:\n          - GODADDY_SHA_1\n          - GODADDY_SHA_2\n          - STARFIELD_SHA_1\n          - STARFIELD_SHA_2\n        serialNumber:\n          type: string\n          description: Serial number of certificate (if issued or revoked)\n        serialNumberHex:\n          type: string\n          description: Hexadecmial format for Serial number of certificate(if issued\n            or revoked)\n        slotSize:\n          type: string\n          description: 'Number of subject alternative names(SAN) to be included in\n            certificate '\n          enum:\n          - FIVE\n          - TEN\n          - FIFTEEN\n          - TWENTY\n          - THIRTY\n          - FOURTY\n          - FIFTY\n          - ONE_HUNDRED\n        status:\n          type: string\n          description: Status of certificate\n          enum:\n          - PENDING_ISSUANCE\n          - ISSUED\n          - REVOKED\n          - CANCELED\n          - DENIED\n          - PENDING_REVOCATION\n          - PENDING_REKEY\n          - UNUSED\n          - EXPIRED\n        subjectAlternativeNames:\n          type: array\n          description: Contains subject alternative names set\n          items:\n            $ref: '#/components/schemas/SubjectAlternativeNameDetails'\n        validEnd:\n          type: string\n          description: The end date of the certificate's validity (if issued or revoked).\n          format: iso-datetime\n        validStart:\n          type: string\n          description: The start date of the certificate's validity (if issued or\n            revoked).\n          format: iso-datetime\n    ArrayOfCertificateAction:\n      type: array\n      items:\n        $ref: '#/components/schemas/CertificateAction'\n    CertificateAction:\n      required:\n      - createdAt\n      - type\n      type: object\n      properties:\n        createdAt:\n          type: string\n          description: Date action created\n          format: iso-datetime\n        type:\n          type: string\n          enum:\n          - CERTIFICATE_ISSUED\n          - CERTIFICATE_ORDER_CANCELED\n          - CERTIFICATE_ORDER_CREATED\n          - CERTIFICATE_REVOKED\n          - DOMAIN_VALIDATION_COMPLETE\n          - FRAUD_DETECTED\n          - ORG_NAME_CHANGE\n          - ORG_VALIDATION_COMPLETE\n          - SAN_DROP\n    CertificateAddress:\n      required:\n      - address1\n      - country\n      type: object\n      properties:\n        address1:\n          type: string\n          description: Address line 1 of organization address\n        address2:\n          type: string\n          description: Address line 2 of organization address\n        city:\n          type: string\n          description: City/Locality of organization address\n        country:\n          type: string\n          description: Two character country code of organization\n          format: iso-country-code\n          enum:\n          - AC\n          - AD\n          - AE\n          - AF\n          - AG\n          - AI\n          - AL\n          - AM\n          - AN\n          - AO\n          - AQ\n          - AR\n          - AS\n          - AT\n          - AU\n          - AW\n          - AZ\n          - BA\n          - BB\n          - BD\n          - BE\n          - BF\n          - BG\n          - BH\n          - BI\n          - BJ\n          - BM\n          - BN\n          - BO\n          - BR\n          - BS\n          - BT\n          - BV\n          - BW\n          - BY\n          - BZ\n          - CA\n          - CC\n          - CD\n          - CF\n          - CG\n          - CH\n          - CI\n          - CK\n          - CL\n          - CM\n          - CN\n          - CO\n          - CR\n          - CV\n          - CX\n          - CY\n          - CZ\n          - DE\n          - DJ\n          - DK\n          - DM\n          - DO\n          - DZ\n          - EC\n          - EE\n          - EG\n          - EH\n          - ER\n          - ES\n          - ET\n          - FI\n          - FJ\n          - FK\n          - FM\n          - FO\n          - FR\n          - GA\n          - GB\n          - GD\n          - GE\n          - GF\n          - GG\n          - GH\n          - GI\n          - GL\n          - GM\n          - GN\n          - GP\n          - GQ\n          - GR\n          - GS\n          - GT\n          - GU\n          - GW\n          - GY\n          - HK\n          - HM\n          - HN\n          - HR\n          - HT\n          - HU\n          - ID\n          - IE\n          - IL\n          - IM\n          - IN\n          - IO\n          - IQ\n          - IS\n          - IT\n          - JE\n          - JM\n          - JO\n          - JP\n          - KE\n          - KG\n          - KH\n          - KI\n          - KM\n          - KN\n          - KR\n          - KW\n          - KY\n          - KZ\n          - LA\n          - LB\n          - LC\n          - LI\n          - LK\n          - LR\n          - LS\n          - LT\n          - LU\n          - LV\n          - LY\n          - MA\n          - MC\n          - MD\n          - ME\n          - MG\n          - MH\n          - ML\n          - MM\n          - MN\n          - MO\n          - MP\n          - MQ\n          - MR\n          - MS\n          - MT\n          - MU\n          - MV\n          - MW\n          - MX\n          - MY\n          - MZ\n          - NA\n          - NC\n          - NE\n          - NF\n          - NG\n          - NI\n          - NL\n          - NO\n          - NP\n          - NR\n          - NU\n          - NZ\n          - OM\n          - PA\n          - PE\n          - PF\n          - PG\n          - PH\n          - PK\n          - PL\n          - PM\n          - PN\n          - PR\n          - PS\n          - PT\n          - PW\n          - PY\n          - QA\n          - RE\n          - RO\n          - RS\n          - RU\n          - RW\n          - SA\n          - SB\n          - SC\n          - SE\n          - SG\n          - SH\n          - SI\n          - SJ\n          - SK\n          - SL\n          - SM\n          - SN\n          - SO\n          - SR\n          - ST\n          - SV\n          - SZ\n          - TC\n          - TD\n          - TF\n          - TG\n          - TH\n          - TJ\n          - TK\n          - TL\n          - TM\n          - TN\n          - TO\n          - TP\n          - TR\n          - TT\n          - TV\n          - TW\n          - TZ\n          - UA\n          - UG\n          - UM\n          - US\n          - UY\n          - UZ\n          - VA\n          - VC\n          - VE\n          - VG\n          - VI\n          - VN\n          - VU\n          - WF\n          - WS\n          - YE\n          - YT\n          - YU\n          - ZA\n          - ZM\n          - ZW\n        postalCode:\n          type: string\n          description: Postal code of organization address\n        state:\n          type: string\n          description: Full name of State/Province/Territory of organization address\n    CertificateBundle:\n      required:\n      - pems\n      - serialNumber\n      type: object\n      properties:\n        pems:\n          $ref: '#/components/schemas/PEMCertificates'\n        serialNumber:\n          type: string\n          description: Serial number of certificate requested\n    CertificateCallback:\n      required:\n      - callbackUrl\n      type: object\n      properties:\n        callbackUrl:\n          type: string\n          description: Callback url registered to receive stateful actions\n    CertificateContact:\n      required:\n      - email\n      - nameFirst\n      - nameLast\n      - phone\n      type: object\n      properties:\n        email:\n          type: string\n          description: Email address of requestor contact\n        jobTitle:\n          type: string\n          description: Only used for EVSSL. Job title of requestor contact\n        nameFirst:\n          type: string\n          description: First name of requestor contact\n        nameLast:\n          type: string\n          description: Last name of requestor contact\n        nameMiddle:\n          type: string\n          description: Middle initial of requestor contact\n        phone:\n          type: string\n          description: Phone number for requestor contact\n        suffix:\n          type: string\n          description: Suffix of requestor contact\n    CertificateCreate:\n      required:\n      - contact\n      - csr\n      - period\n      - productType\n      type: object\n      properties:\n        callbackUrl:\n          type: string\n          description: Required if client would like to receive stateful actions via\n            callback during certificate lifecyle\n        commonName:\n          type: string\n          description: Name to be secured in certificate. If provided, CN field in\n            CSR will be ignored.\n        contact:\n          $ref: '#/components/schemas/CertificateContact'\n        csr:\n          type: string\n          description: Certificate Signing Request\n        intelVPro:\n          type: boolean\n          description: Only used for OV\n          default: false\n        organization:\n          $ref: '#/components/schemas/CertificateOrganizationCreate'\n        period:\n          type: integer\n          description: Number of years for certificate validity period\n        productType:\n          type: string\n          description: Type of product requesting a certificate. Only required non-renewal\n          enum:\n          - DV_SSL\n          - DV_WILDCARD_SSL\n          - EV_SSL\n          - OV_CS\n          - OV_DS\n          - OV_SSL\n          - OV_WILDCARD_SSL\n          - UCC_DV_SSL\n          - UCC_EV_SSL\n          - UCC_OV_SSL\n        rootType:\n          type: string\n          description: Root Type. Depending on certificate expiration date, SHA_1\n            not be allowed. Will default to SHA_2 if expiration date exceeds sha1\n            allowed date\n          default: STARFIELD_SHA_2\n          enum:\n          - GODADDY_SHA_1\n          - GODADDY_SHA_2\n          - STARFIELD_SHA_1\n          - STARFIELD_SHA_2\n        slotSize:\n          type: string\n          description: 'Number of subject alternative names(SAN) to be included in\n            certificate '\n          enum:\n          - FIVE\n          - TEN\n          - FIFTEEN\n          - TWENTY\n          - THIRTY\n          - FOURTY\n          - FIFTY\n          - ONE_HUNDRED\n        subjectAlternativeNames:\n          uniqueItems: true\n          type: array\n          description: Subject Alternative names. Collection of subjectAlternativeNames\n            to be included in certificate.\n          items:\n            type: string\n    CertificateIdentifier:\n      required:\n      - certificateId\n      type: object\n      properties:\n        certificateId:\n          type: string\n          description: The unique identifier of the certificate request. Only present\n            if verified.\n    CertificateOrganization:\n      required:\n      - address\n      - name\n      - phone\n      type: object\n      properties:\n        address:\n          $ref: '#/components/schemas/CertificateAddress'\n        assumedName:\n          type: string\n          description: Only for EVSSL. The DBA(does business as) name for the organization.\n        jurisdictionOfIncorporation:\n          $ref: '#/components/schemas/JurisdictionOfIncorporation'\n        name:\n          type: string\n          description: Name of organization that owns common name\n        phone:\n          type: string\n          description: Phone number for organization\n        registrationAgent:\n          type: string\n          description: Only for EVSSL.\n        registrationNumber:\n          type: string\n          description: Only for EVSSL.\n    CertificateOrganizationCreate:\n      required:\n      - name\n      - phone\n      type: object\n      properties:\n        address:\n          $ref: '#/components/schemas/CertificateAddress'\n        assumedName:\n          type: string\n          description: Only for EVSSL. The DBA(does business as) name for the organization.\n        name:\n          type: string\n          description: Name of organization that owns common name\n        phone:\n          type: string\n          description: Phone number for organization\n        registrationAgent:\n          type: string\n          description: Only for EVSSL.\n        registrationNumber:\n          type: string\n          description: Only for EVSSL.\n    CertificateReissue:\n      type: object\n      properties:\n        callbackUrl:\n          type: string\n          description: Required if client would like to receive stateful action via\n            callback during certificate lifecyle\n        commonName:\n          type: string\n          description: The common name of certificate to be secured\n          default: Existing common name\n        csr:\n          type: string\n          description: Certificate Signing Request.\n          default: Existing CSR\n        delayExistingRevoke:\n          maximum: 168\n          type: integer\n          description: In hours, time to delay revoking existing certificate after\n            issuance of new certificate. If revokeExistingCertOnIssuance is enabled,\n            this value will be ignored\n        rootType:\n          type: string\n          description: Root Type. Depending on certificate expiration date, SHA_1\n            not be allowed. Will default to SHA_2 if expiration date exceeds sha1\n            allowed date\n          default: GODADDY_SHA_1\n          enum:\n          - GODADDY_SHA_1\n          - GODADDY_SHA_2\n          - STARFIELD_SHA_1\n          - STARFIELD_SHA_2\n        subjectAlternativeNames:\n          uniqueItems: true\n          type: array\n          description: Only used for UCC products. An array of subject alternative\n            names to include in certificate.\n          items:\n            type: string\n    CertificateRenew:\n      type: object\n      properties:\n        callbackUrl:\n          type: string\n          description: Required if client would like to receive stateful actions via\n            callback during certificate lifecyle\n        commonName:\n          type: string\n          description: The common name of certificate to be secured\n          default: Existing common name\n        csr:\n          type: string\n          description: Certificate Signing Request.\n          default: Existing CSR\n        period:\n          type: integer\n          description: Number of years for certificate validity period, if different\n            from previous certificate\n        rootType:\n          type: string\n          description: Root Type. Depending on certificate expiration date, SHA_1\n            not be allowed. Will default to SHA_2 if expiration date exceeds sha1\n            allowed date\n          default: GODADDY_SHA_1\n          enum:\n          - GODADDY_SHA_1\n          - GODADDY_SHA_2\n          - STARFIELD_SHA_1\n          - STARFIELD_SHA_2\n        subjectAlternativeNames:\n          uniqueItems: true\n          type: array\n          description: Only used for UCC products. An array of subject alternative\n            names to include in certificate. Not including a subject alternative name\n            that was in the previous certificate will remove it from the renewed certificate.\n          items:\n            type: string\n    CertificateRevoke:\n      required:\n      - reason\n      type: object\n      properties:\n        reason:\n          type: string\n          description: Reason for revocation\n          enum:\n          - AFFILIATION_CHANGED\n          - CESSATION_OF_OPERATION\n          - KEY_COMPROMISE\n          - PRIVILEGE_WITHDRAWN\n          - SUPERSEDED\n    CertificateSiteSeal:\n      required:\n      - html\n      type: object\n      properties:\n        html:\n          type: string\n          description: Certificate Seal HTML\n    CertificateEmailHistory:\n      required:\n      - accountId\n      - body\n      - dateEntered\n      - fromType\n      - id\n      - recipients\n      - subject\n      - templateType\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Email Id\n        accountId:\n          type: integer\n          description: Shopper Id requested certificate\n        templateType:\n          type: string\n          description: Email template type name\n        fromType:\n          type: string\n          description: Email from address\n        recipients:\n          type: string\n          description: Email address email was sent\n        body:\n          type: string\n          description: Email message\n        dateEntered:\n          type: string\n          description: Date email sent\n          format: iso-datetime\n        subject:\n          type: string\n          description: Email subject\n    Error:\n      required:\n      - code\n      type: object\n      properties:\n        code:\n          type: string\n          description: Short identifier for the error, suitable for indicating the\n            specific error within client code\n          format: constant\n        fields:\n          type: array\n          description: List of the specific fields, and the errors found with their\n            contents\n          items:\n            $ref: '#/components/schemas/ErrorField'\n        message:\n          type: string\n          description: Description of the error\n    ErrorField:\n      required:\n      - code\n      - path\n      type: object\n      properties:\n        code:\n          type: string\n          description: Short identifier for the error, suitable for indicating the\n            specific error within client code\n          format: constant\n        message:\n          type: string\n          description: Description of the problem with the contents of the field\n        path:\n          type: string\n          description: JSONPath referring to the field within the submitted data containing\n            an error\n          format: json-path\n    ErrorLimit:\n      allOf:\n      - required:\n        - retryAfterSec\n        type: object\n        properties:\n          retryAfterSec:\n            type: integer\n            description: Number of seconds to wait before attempting a similar request\n            format: integer-positive\n      - $ref: '#/components/schemas/Error'\n      x-error-model: true\n    JurisdictionOfIncorporation:\n      required:\n      - country\n      type: object\n      properties:\n        city:\n          type: string\n        country:\n          type: string\n          format: iso-country-code\n        county:\n          type: string\n        state:\n          type: string\n    PEMCertificates:\n      required:\n      - certificate\n      type: object\n      properties:\n        certificate:\n          type: string\n          description: End entity certificate in PEM format\n        cross:\n          type: string\n          description: CA Cross Intermediate certificate in PEM format\n        intermediate:\n          type: string\n          description: CA Signing Intermediate certificate in PEM format\n        root:\n          type: string\n          description: CA Root certificate in PEM format\n    SubjectAlternativeNameDetails:\n      required:\n      - status\n      - subjectAlternativeName\n      type: object\n      properties:\n        status:\n          type: string\n          description: Total number of page results\n          enum:\n          - PENDING\n          - INVALID\n          - COMPLETED\n          - FRAUD\n        subjectAlternativeName:\n          type: string\n          description: Subject alternative name to be included in certificate\n    Pagination:\n      type: object\n      properties:\n        first:\n          type: string\n          description: URI to access the first page\n        previous:\n          type: string\n          description: URI to access the previous page\n        next:\n          type: string\n          description: URI to access the next page\n        last:\n          type: string\n          description: URI to access the last page\n        total:\n          type: integer\n          description: Number of records available\n    CertificateDetailV2:\n      required:\n      - certificateId\n      - commonName\n      - contact\n      - createdAt\n      - period\n      - status\n      - type\n      type: object\n      properties:\n        certificateId:\n          type: string\n          description: The unique identifier of the certificate request. Only present\n            if no errors returned\n        commonName:\n          type: string\n          description: Common name of certificate\n          format: domain\n        period:\n          type: integer\n          description: Validity period of order. Specified in years\n        type:\n          type: string\n          description: \"Certificate type: \\n  * `DV_SSL` - (Domain Validated Secure\\\n            \\ Sockets Layer) SSL certificate validated using domain name only\\n  *\\\n            \\ `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated\\\n            \\ using domain name only\\n  * `EV_SSL` - (Extended Validation) SSL certificate\\\n            \\ validated using organization information, domain name, business legal\\\n            \\ status, and other factors\\n  * `OV_CODE_SIGNING` - Code signing SSL\\\n            \\ certificate used by software developers to digitally sign apps. Validated\\\n            \\ using organization information\\n  * `OV_DRIVER_SIGNING` - Driver signing\\\n            \\ SSL certificate request used by software developers to digitally sign\\\n            \\ secure code for Windows hardware drivers. Validated using organization\\\n            \\ information\\n  * `OV_SSL` - SSL certificate validated using organization\\\n            \\ information and domain name\\n  * `OV_WILDCARD_SSL` - SSL certificate\\\n            \\ containing subdomains which is validated using organization information\\\n            \\ and domain name\\n  * `UCC_DV_SSL` - (Unified Communication Certificate)\\\n            \\ Multi domain SSL certificate validated using domain name only\\n  * `UCC_EV_SSL`\\\n            \\ - Multi domain SSL certificate validated using organization information,\\\n            \\ domain name, business legal status, and other factors\\n  * `UCC_OV_SSL`\\\n            \\ - Multi domain SSL certificate validated using organization information\\\n            \\ and domain name\\n\"\n          enum:\n          - DV_SSL\n          - DV_WILDCARD_SSL\n          - EV_SSL\n          - OV_CODE_SIGNING\n          - OV_DRIVER_SIGNING\n          - OV_SSL\n          - OV_WILDCARD_SSL\n          - UCC_DV_SSL\n          - UCC_EV_SSL\n          - UCC_OV_SSL\n        status:\n          type: string\n          description: \"Certificate status (if issued or revoked): \\n  * `CANCELED`\\\n            \\ - Certificate request was canceled by customer\\n  * `DENIED` - Certificate\\\n            \\ request was denied by customer\\\\n  * `EXPIRED` - Issued certificate\\\n            \\ has exceeded the valid end date\\n  * `ISSUED` - Certificate has been\\\n            \\ issued and is within validity period\\n  * `PENDING_ISSUANCE` - Certificate\\\n            \\ request has completed domain verification and is in the process of being\\\n            \\ issued\\n  * `PENDING_REKEY` - Previously issued certificate was rekeyed\\\n            \\ by customer and is in the process of being reissued\\n  * `PENDING_REVOCATION`\\\n            \\ - Previously issued certificate is in the process of being revoked\\n\\\n            \\  * `REVOKED` - Issued certificate has been revoked\\\\n  * `UNUSED` -\\\n            \\ Certificate in an error state\\n\"\n          enum:\n          - PENDING_ISSUANCE\n          - ISSUED\n          - REVOKED\n          - CANCELED\n          - DENIED\n          - PENDING_REVOCATION\n          - PENDING_REKEY\n          - UNUSED\n          - EXPIRED\n        createdAt:\n          type: string\n          description: The date the certificate was ordered.\n          format: iso-datetime\n        completedAt:\n          type: string\n          description: The date the certificate request completed processing.\n          format: iso-datetime\n        validEndAt:\n          type: string\n          description: The end date of the certificate's validity (if issued or revoked).\n          format: iso-datetime\n        validStartAt:\n          type: string\n          description: The start date of the certificate's validity (if issued or\n            revoked).\n          format: iso-datetime\n        revokedAt:\n          type: string\n          description: The revocation date of certificate (if revoked).\n          format: iso-datetime\n        renewalAvailable:\n          type: boolean\n          description: Only returned when a renewal is available.\n        serialNumber:\n          type: string\n          description: Serial number of certificate (if issued or revoked)\n        serialNumberHex:\n          type: string\n          description: Hexadecmial format for Serial number of certificate(if issued\n            or revoked)\n        slotSize:\n          type: string\n          description: \"Number of subject alternative names (SAN) to be included in\\\n            \\ certificate (if UCC): \\n  * `FIVE` - Five slot UCC request\\n  * `TEN`\\\n            \\ - Ten slot UCC request\\n  * `FIFTEEN` - Fifteen slot UCC request\\n \\\n            \\ * `TWENTY` - Twenty slot UCC request\\n  * `THIRTY` - Thirty slot UCC\\\n            \\ request\\n  * `FOURTY` - Fourty slot UCC request\\n  * `FIFTY` - Fifty\\\n            \\ slot UCC request\\n  * `ONE_HUNDRED` - One hundred slot UCC request\\n\"\n          enum:\n          - FIVE\n          - TEN\n          - FIFTEEN\n          - TWENTY\n          - THIRTY\n          - FOURTY\n          - FIFTY\n          - ONE_HUNDRED\n        subjectAlternativeNames:\n          uniqueItems: true\n          type: array\n          description: Subject Alternative names. Collection of subjectAlternativeNames\n            to be included in certificate.\n          items:\n            type: string\n            format: domain\n        contact:\n          $ref: '#/components/schemas/CertificateContact'\n        organization:\n          $ref: '#/components/schemas/CertificateOrganization'\n        csr:\n          type: string\n          description: Certificate signing request (if present) in PEM format\n        rootType:\n          type: string\n          description: \"Root type: \\n  * `GODADDY_SHA_1` - GoDaddy (Secure Hash Algorithm\\\n            \\ 1) SHA-1 root type\\n  * `GODADDY_SHA_2` - GoDaddy (Secure Hash Algorithm\\\n            \\ 2) SHA-2 root type\\n  * `STARFIELD_SHA_1` - Starfield SHA-1 root type\\n\\\n            \\  * `STARFIELD_SHA_2` - Starfield SHA-2 root type\\n\"\n          enum:\n          - GODADDY_SHA_1\n          - GODADDY_SHA_2\n          - STARFIELD_SHA_1\n          - STARFIELD_SHA_2\n        deniedReason:\n          type: string\n          description: Only present if certificate order has been denied\n        progress:\n          type: integer\n          description: Percentage of completion for certificate vetting\n    CertificateSummariesV2:\n      required:\n      - certificates\n      - pagination\n      type: object\n      properties:\n        certificates:\n          type: array\n          description: List of certificates for a specified customer.\n          items:\n            $ref: '#/components/schemas/CertificateSummaryV2'\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n    CertificateSummaryV2:\n      required:\n      - certificateId\n      - commonName\n      - createdAt\n      - period\n      - status\n      - type\n      type: object\n      properties:\n        certificateId:\n          type: string\n          description: The unique identifier of the certificate request.\n        commonName:\n          type: string\n          description: Common name for the certificate request.\n          format: domain\n        period:\n          type: integer\n          description: Validity period of order. Specified in years.\n        type:\n          type: string\n          description: \"Certificate type: \\n  * `DV_SSL` - (Domain Validated Secure\\\n            \\ Sockets Layer) SSL certificate validated using domain name only\\n  *\\\n            \\ `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated\\\n            \\ using domain name only\\n  * `EV_SSL` - (Extended Validation) SSL certificate\\\n            \\ validated using organization information, domain name, business legal\\\n            \\ status, and other factors\\n  * `OV_CODE_SIGNING` - Code signing SSL\\\n            \\ certificate used by software developers to digitally sign apps. Validated\\\n            \\ using organization information\\n  * `OV_DRIVER_SIGNING` - Driver signing\\\n            \\ SSL certificate request used by software developers to digitally sign\\\n            \\ secure code for Windows hardware drivers. Validated using organization\\\n            \\ information\\n  * `OV_SSL` - SSL certificate validated using organization\\\n            \\ information and domain name\\n  * `OV_WILDCARD_SSL` - SSL certificate\\\n            \\ containing subdomains which is validated using organization information\\\n            \\ and domain name\\n  * `UCC_DV_SSL` - (Unified Communication Certificate)\\\n            \\ Multi domain SSL certificate validated using domain name only\\n  * `UCC_EV_SSL`\\\n            \\ - Multi domain SSL certificate validated using organization information,\\\n            \\ domain name, business legal status, and other factors\\n  * `UCC_OV_SSL`\\\n            \\ - Multi domain SSL certificate validated using organization information\\\n            \\ and domain name\\n\"\n          enum:\n          - DV_SSL\n          - DV_WILDCARD_SSL\n          - EV_SSL\n          - OV_CODE_SIGNING\n          - OV_DRIVER_SIGNING\n          - OV_SSL\n          - OV_WILDCARD_SSL\n          - UCC_DV_SSL\n          - UCC_EV_SSL\n          - UCC_OV_SSL\n        status:\n          type: string\n          description: \"Certificate status (if issued or revoked): \\n  * `CANCELED`\\\n            \\ - Certificate request was canceled by customer\\n  * `DENIED` - Certificate\\\n            \\ request was denied by customer\\n  * `EXPIRED` - Issued certificate has\\\n            \\ exceeded the valid end date\\n  * `ISSUED` - Certificate has been issued\\\n            \\ and is within validity period\\n  * `PENDING_ISSUANCE` - Certificate\\\n            \\ request has completed domain verification and is in the process of being\\\n            \\ issued\\n  * `PENDING_REKEY` - Previously issued certificate was rekeyed\\\n            \\ by customer and is in the process of being reissued\\n  * `PENDING_REVOCATION`\\\n            \\ - Previously issued certificate is in the process of being revoked\\n\\\n            \\  * `REVOKED` - Issued certificate has been revoked\\n  * `UNUSED` - Certificate\\\n            \\ in an error state\\n\"\n          enum:\n          - ISSUED\n          - CANCELED\n          - DENIED\n          - EXPIRED\n          - PENDING_ISSUANCE\n          - PENDING_REKEY\n          - PENDING_REVOCATION\n          - REVOKED\n          - UNUSED\n        createdAt:\n          type: string\n          description: Date that the certificate request was received.\n          format: iso-datetime\n        completedAt:\n          type: string\n          description: The date the certificate request completed processing (if issued\n            or revoked).\n          format: iso-datetime\n        validEndAt:\n          type: string\n          description: The end date of the certificate's validity (if issued or revoked).\n          format: iso-datetime\n        validStartAt:\n          type: string\n          description: The start date of the certificate's validity (if issued or\n            revoked).\n          format: iso-datetime\n        revokedAt:\n          type: string\n          description: The revocation date of certificate (if revoked).\n          format: iso-datetime\n        renewalAvailable:\n          type: boolean\n          description: Only returned when a renewal is available.\n        serialNumber:\n          type: string\n          description: Serial number of certificate (if issued or revoked).\n        slotSize:\n          type: string\n          description: \"Number of subject alternative names (SAN) to be included in\\\n            \\ certificate (if UCC): \\n  * `FIVE` - Five slot UCC request\\n  * `TEN`\\\n            \\ - Ten slot UCC request\\n  * `FIFTEEN` - Fifteen slot UCC request\\n \\\n            \\ * `TWENTY` - Twenty slot UCC request\\n  * `THIRTY` - Thirty slot UCC\\\n            \\ request\\n  * `FOURTY` - Fourty slot UCC request\\n  * `FIFTY` - Fifty\\\n            \\ slot UCC request\\n  * `ONE_HUNDRED` - One hundred slot UCC request\\n\"\n          enum:\n          - FIVE\n          - TEN\n          - FIFTEEN\n          - TWENTY\n          - THIRTY\n          - FOURTY\n          - FIFTY\n          - ONE_HUNDRED\n        subjectAlternativeNames:\n          uniqueItems: true\n          type: array\n          description: Subject Alternative names (if UCC). Collection of subjectAlternativeNames\n            to be included in certificate.\n          items:\n            type: string\n    DomainVerificationSummary:\n      required:\n      - createdAt\n      - domain\n      - domainEntityId\n      - modifiedAt\n      - status\n      - type\n      - usage\n      type: object\n      properties:\n        domain:\n          type: string\n          description: Domain name\n          format: domain\n        domainEntityId:\n          type: integer\n          description: A unique identifier that can be leveraged for retrieving domain\n            verification related information. Primarily used when troubleshooting\n            a request\n        dceToken:\n          type: string\n          description: DCE verification type token (if DCE verification type).\n        status:\n          type: string\n          description: \"Domain verification status: \\n  * `AWAITING` - Verification\\\n            \\ pending customer input\\n  * `INVALID` - SAN connected to a cancelled\\\n            \\ request\\n  * `COMPLETED` - Verification completed\\n  * `FAILED_VERIFICATION`\\\n            \\ - Verification failed\\n  * `PENDING_POSSIBLE_FRAUD` - Flagged for a\\\n            \\ system level fraud review\\n  * `VERIFIED_POSSIBLE_FRAUD` - Fraud detection\\\n            \\ reviewed but verified\\n  * `DROPPED` - SAN dropped from request\\n  *\\\n            \\ `REVOKED_CERT` - Certificate revoked\\n  * `DROPPED_GOOGLE_SAFE_BROWSING`\\\n            \\ - SAN dropped from request due to Google Safe Browsing check\\n  * `DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION`\\\n            \\ - SAN dropped from request due to Certificate Authorization Authority\\\n            \\ DNS record check\\n\"\n          enum:\n          - COMPLETED\n          - FAILED_VERIFICATION\n          - VERIFIED_POSSIBLE_FRAUD\n          - DROPPED\n          - DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION\n          - DROPPED_GOOGLE_SAFE_BROWSING\n          - INVALID\n          - AWAITING\n          - PENDING_POSSIBLE_FRAUD\n          - REVOKED_CERTIFICATE\n        createdAt:\n          type: string\n          description: Timestamp indicating when the domain verification process was\n            started\n          format: iso-datetime\n        modifiedAt:\n          type: string\n          description: Timestamp indicating when the domain verification process was\n            last updated\n          format: iso-datetime\n        type:\n          type: string\n          description: \"Domain verification type: \\n  * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN`\\\n            \\ - Domain verified using domain control verification email sent to admin@<your.domain.com>\\n\\\n            \\  * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR` - Domain verified\\\n            \\ using domain control verification email sent to administrator@<your.domain.com>\\n\\\n            \\  * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER` - Domain verified\\\n            \\ using domain control verification email sent to hostmaster@<your.domain.com>\\n\\\n            \\  * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER` - Domain verified\\\n            \\ using domain control verification email sent to postmaster@<your.domain.com>\\n\\\n            \\  * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER` - Domain verified\\\n            \\ using domain control verification email sent to webmaster@<your.domain.com>\\n\\\n            \\  * `DOMAIN_ACCESS_EMAIL` - Domain verified using a domain access email\\n\\\n            \\  * `DOMAIN_ACCESS_LETTER` - Customer completed a domain access letter\\\n            \\ which was used for domain verification\\n  * `DOMAIN_CONTROL_EMAIL` -\\\n            \\ Domain verified using HTML file or DNS zone file text value\\n  * `DOMAIN_ZONE_CONTROL`\\\n            \\ - DNS zone file containing a pre-generated text value used for domain\\\n            \\ verification\\n  * `MANUAL_DOMAIN_ACCESS_EMAIL` - DAE sent to an email\\\n            \\ address manually entered by a rep\\n  * `PREVIOUS_DOMAIN_ACCESS_EMAIL`\\\n            \\ - Customers domain access email for a prior certificate request was\\\n            \\ used for domain verification\\n  * `REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER`\\\n            \\ - Representative reviewed a customer provided domain access letter and\\\n            \\ verified domain\\n  * `REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL` -\\\n            \\ Representative verified domain using a manual domain zone control check\\n\\\n            \\  * `REGISTRATION_AUTHORITY_OVERRIDE` - Representative verified domain\\\n            \\ using alternative methods\\n  * `REGISTRATION_AUTHORITY_WEBSITE_CONTROL`\\\n            \\ - Representative verified domain using a manual website control check\\n\\\n            \\  * `CUSTOMER_OWNED` - Validated customer account information used for\\\n            \\ domain control verification\\n  * `WEBSITE_CONTROL` - HTML file in root\\\n            \\ website directory containing pre-generated value used for domain control\\\n            \\ verification\\n\"\n          enum:\n          - DOMAIN_CONTROL_EMAIL\n          - AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN\n          - AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR\n          - AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER\n          - AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER\n          - AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER\n          - DOMAIN_ACCESS_EMAIL\n          - DOMAIN_ACCESS_LETTER\n          - DOMAIN_ZONE_CONTROL\n          - MANUAL_DOMAIN_ACCESS_EMAIL\n          - PREVIOUS_DOMAIN_ACCESS_EMAIL\n          - REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER\n          - REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL\n          - REGISTRATION_AUTHORITY_OVERRIDE\n          - REGISTRATION_AUTHORITY_WEBSITE_CONTROL\n          - CUSTOMER_OWNED\n          - WEBSITE_CONTROL\n        usage:\n          type: string\n          description: Type of domain name used for domain verification\n          enum:\n          - COMMON_NAME\n          - SUBJECT_ALTERNATIVE_NAME\n    ExternalAccountBinding:\n      required:\n      - directoryUrl\n      - hmacKey\n      - keyId\n      type: object\n      properties:\n        directoryUrl:\n          type: string\n          description: ACME directory resource URL.\n          format: url\n        keyId:\n          type: string\n          description: EAB key identifier for the ACME account.\n        hmacKey:\n          type: string\n          description: EAB HMAC key for the ACME account\n    DomainVerificationDetail:\n      allOf:\n      - $ref: '#/components/schemas/DomainVerificationSummary'\n      - type: object\n        properties:\n          certificateAuthorityAuthorization:\n            type: object\n            properties:\n              status:\n                type: string\n                description: |\n                  Returns the status of the CAA Lookup for the specified domain:\n                  * `PENDING` - The CAA lookup has not yet been attempted for the specified domain.\n                  * `REMOVED_DNS_ERROR` - Repeated errors occurred while scanning for CAA records, thereby resulting in a DNSSEC scan. DNS errors then prevented the system from determining if DNSSEC was enabled for the specified domain, and it had to be removed from the certificate request.\n                  * `REMOVED_DNSSEC_ENABLED` - Repeated errors occurred while scanning for CAA records, thereby resulting in a DNSSEC scan. DNSSEC was determined to be enabled for the specified domain, and it had to be removed from the certificate request.\n                  * `REMOVED_NOT_FOUND_CA` - CAA records were found during the CAA lookup for the speicified domain, but `godaddy.com` or `starfieldtech.com` was not listed as a value, thereby not allowing us to issue a certificate with this domain. The specified domain was removed from the certificate request.\n                  * `REMOVED_UNKNOWN_CRITICAL_TAG` - A CAA record was found during the CAA lookup with its Critical bit set, as outlined by RFC 6844, yet the Tag of the CAA record was not understood (as outlined by RFC 6844). The specified domain was removed from the certificate request.\n                  * `SUCCESS_CAA` - The CAA lookup was successful for the specified domain, and the domain can remain in the certificate request.\n                  * `SUCCESS_DNSSEC` - Repeated errors occurred while scanning for CAA records, thereby resulting in a DNSSEC scan. The system detemined that DNSSEC was not enabled for the specified domain, so the domain is allowed to remain in the certificate request.\n                enum:\n                - PENDING\n                - REMOVED_DNS_ERROR\n                - REMOVED_DNSSEC_ENABLED\n                - REMOVED_NOT_FOUND_CA\n                - REMOVED_UNKNOWN_CRITICAL_TAG\n                - SUCCESS_CAA\n                - SUCCESS_DNSSEC\n              queryPaths:\n                type: array\n                description: Details all the individual DNS paths that were scanned\n                  for CAA records for this domain, as detailed by RFC 6844. This element\n                  not only contains the parts determined from parsing the domain,\n                  but also any CNAME or DNAME targets specified by any of those individual\n                  parts.\n                items:\n                  type: string\n              recommendations:\n                type: array\n                description: Returns a list of fix recommendations if the query was\n                  unsuccessful, or if the domain was dropped from the certificate\n                  request, so that a subsequent certificate request with the specified\n                  domain will successfully pass its CAA scan.\n                items:\n                  type: string\n                  description: |\n                    * `ADD_CA_TO_CAA` - The system found a CAA record in the domain hierarchy, but it did not find our CA in the record's values. Add `godaddy.com` or `starfieldtech.com` to the CAA record's values.\n                    * `CREATE_TARGET_DOMAIN_CAA` - Create a CAA record on the specified domain with `godaddy.com` or `starfieldtech.com` as the value. If the system finds a CAA record in the specified domain, it will stop scanning the domain hierarchy, thereby preventing potentially problematic parent domain paths from being scanned.\n                    * `DISABLE_DNSSEC` - Disable DNSSEC on the domain if CAA lookups fail and a DNSSEC scan is being used as the method for determining if the specified domain can remain in the certificate request.\n                    * `FIX_CRITICAL_TAG` - When setting the critical flag in a CAA record, you must ensure you're using a well-known tag, per RFC 6844.\n                    * `VALIDATE_SOA` - Make sure all queryPaths for the specified domain have an SOA record pointing to a valid publicly-accessible nameserver and respond in a timely fashion.\n                  enum:\n                  - ADD_CA_TO_CAA\n                  - CREATE_TARGET_DOMAIN_CAA\n                  - DISABLE_DNSSEC\n                  - FIX_CRITICAL_TAG\n                  - VALIDATE_SOA\n              completedAt:\n                type: string\n                description: The date the certificate request completed processing.\n                format: iso-datetime\n            description: |\n              Contains information about the last Certificate Authority Authorization (CAA) Lookup details for the specified domain.\n\n              In order for a domain to be eligible to be included in the certificate, the entire domain hierarchy must be scanned for DNS CAA records, as outlined by RFC 6844.\n\n              The absence of any CAA records found in the domain hierarchy indicates that the domain may be included in the certificate. Alternatively, if CAA records are found when scanning the domain hierarchy, the domain may be included in the certificate as long as `godaddy.com` or `starfieldtech.com` is found in the DNS record value. However, if CAA records are found, yet `godaddy.com` or `starfieldtech.com` is not found in any CAA record's value, then we must drop the domain from the certificate request.\n\n              In the case where there are repeated DNS errors when scanning the domain hierarchy for CAA records, thus ending in an unsuccessful scan, then the domain can still be included in the certificate provided the primary domain is not setup with DNSSEC. Conversely, if DNSSEC is found to be setup on the primary domain when scanning following repeated CAA failures, the domain must be dropped from the certificate request. Finally, if DNS errors persist to the point where a successful DNSSEC query could not be obtained, then the domain must be dropped from the certificate request.\n  responses:\n    401:\n      description: Authentication info not sent or is invalid\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/Error'\n      x-error-codes:\n      - UNAUTHORIZED\n    403:\n      description: Authenticated user is not allowed access\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/Error'\n      x-error-codes:\n      - ACCESS_DENIED\n    404:\n      description: Resource not found\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/Error'\n      x-error-codes:\n      - NOT_FOUND\n    422:\n      description: Application-specific request error\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/Error'\n      x-error-codes:\n      - INVALID_INPUT\n    429:\n      description: Too many requests received within interval\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/ErrorLimit'\n      x-error-codes:\n      - RATE_LIMITED\n    500:\n      description: Internal server error\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/Error'\n      x-error-codes:\n      - INTERNAL_SERVER_ERROR\n  parameters:\n    customerId:\n      name: customerId\n      in: path\n      description: An identifier for a customer\n      required: true\n      schema:\n        type: string\n    certificateId:\n      name: certificateId\n      in: path\n      description: Certificate id to lookup\n      required: true\n      schema:\n        type: string\n    domain:\n      name: domain\n      in: path\n      description: A valid domain name in the certificate request\n      required: true\n      schema:\n        type: string\n        format: domain\n    offset:\n      name: offset\n      in: query\n      description: Number of results to skip for pagination\n      schema:\n        pattern: ^[0-9]+$\n        type: integer\n        format: integer-positive\n    limit:\n      name: limit\n      in: query\n      description: Maximum number of items to return\n      schema:\n        pattern: ^[0-9]+$\n        type: integer\n        format: integer-positive\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/godaddy.certificates/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/godaddy.certificates/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: schemas: \"CertificateDetailV2\": parse schema: property \"organization\": at 1:10057: parse schema: resolve \"#/components/schemas/CertificateOrganization\": parse schema: property \"address\": at 1:15631: parse schema: resolve \"#/components/schemas/CertificateAddress\": parse schema: property \"country\": at 1:4965: parse enum values: parse value \"false\": expected type \"string\", got \"bool\""
}