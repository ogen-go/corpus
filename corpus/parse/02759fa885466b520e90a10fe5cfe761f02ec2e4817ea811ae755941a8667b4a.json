{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dkackman/chia-api"
		},
		"file": {
			"name": "farmer.yaml",
			"size": 0,
			"path": "src/farmer.yaml",
			"byteSize": 9121,
			"content": "openapi: 3.0.3\ninfo:\n  description: \u003e-\n    The Chia node and services come with a JSON RPC API server that allows you to access information and control the services. \n    These are accessible via HTTPS, WebSockets, or via client SDKs. The ports can be configured in `~/.chia/mainnet/config/config.yaml`. \n    The RPC ports should not be exposed to the internet. TLS certificates are used to secure the communication \n    [using mutualTLS](https://github.com/dkackman/chia-api/wiki/Mutual-TLS).\n\n    The farmer uses port 8559 by default.\n  version: 1.3.1\n  title: Chia RPC\n  termsOfService: https://www.chia.net/assets/legal/Guidelines-for-Using-Chia-Network.pdf\n  contact:\n    name: Chia Network\n    url: https://www.chia.net/\n    email: hello@chia.net\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: https://localhost:8559\n    description: Farmer RPC\nsecurity:\n  - bearerAuth: []\ncomponents:\n  requestBodies:\n    empty:\n      $ref: \"./requestBodies/empty.yaml#/empty\"\n  responses:\n    empty:\n      $ref: \"./responses/empty.yaml#/empty\"\n  schemas:\n    harvester_info:\n      $ref: \"./schemas/harvester_info.yaml#/harvester_info\"\n    pool_state_info:\n      $ref: \"./schemas/pool_state_info.yaml#/pool_state_info\"\n    proof_of_space:\n      $ref: \"./schemas/proof_of_space.yaml#/proof_of_space\"\n    farmer_signage_point:\n      $ref: \"./schemas/farmer_signage_point.yaml#/farmer_signage_point\"\n    signage_point_bundle:\n      type: object\n      properties:\n        signage_point:\n          $ref: \"#/components/schemas/farmer_signage_point\"\n        proofs:\n          # i haven't found this populated in the wild so this is based by examining the python\n          # probably wrong but based off of this in farmer.py - line 105\n          # Keep track of harvester plot identifier (str), target sp index, and PoSpace for each challenge\n          # self.proofs_of_space: Dict[bytes32, List[Tuple[str, ProofOfSpace]]] = {}\n          type: array\n          # tuple is better supported in opanapi 3.1.0\n          # https://stackoverflow.com/questions/57464633/how-to-define-a-json-array-with-concrete-item-definition-for-every-index-i-e-a\n          items:\n            oneOf:\n              - type: string\n              - $ref: \"#/components/schemas/proof_of_space\"\n            minItems: 2\n            maxItems: 2\n    apiResponse:\n      $ref: \"./schemas/apiResponse.yaml#/apiResponse\"\n  securitySchemes:\n    bearerAuth:\n      $ref: \"./securitySchemes/bearerAuth.yaml#/bearerAuth\"\ntags:\n  - name: Farmer\n    description: The farmer RPC API is exposed, by default, on port 8559 and contains methods for managing the farmer.\npaths:\n  /set_reward_targets:\n    post:\n      tags:\n        - Farmer\n      summary: Set the farm and pool reward targets.\n      description: Set the farm and pool reward targets.\n      operationId: set_reward_targets\n      requestBody:\n        description: The updated targets\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                farmer_target:\n                  type: \"string\"\n                pool_target:\n                  type: \"string\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/empty\"\n  /get_reward_targets:\n    post:\n      tags:\n        - Farmer\n      summary: Get the farm and pool reward targets.\n      description: Get the farm and pool reward targets.\n      operationId: get_reward_targets\n      requestBody:\n        description: indicator of whether to include private keys in the search\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - search_for_private_key\n              properties:\n                search_for_private_key:\n                  type: boolean\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    required:\n                      - farmer_target\n                      - pool_target\n                    properties:\n                      farmer_target:\n                        type: \"string\"\n                      pool_target:\n                        type: \"string\"\n                      have_farmer_sk:\n                        type: \"boolean\"\n                      have_pool_sk:\n                        type: \"boolean\"\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /get_harvesters:\n    post:\n      tags:\n        - Farmer\n      summary: Get the list of harvesters.\n      description: Get the list of harvesters.\n      operationId: get_harvesters\n      requestBody:\n        $ref: \"#/components/requestBodies/empty\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      harvesters:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/harvester_info\"\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /get_pool_login_link:\n    post:\n      tags:\n        - Farmer\n      summary: Get's the pool login link, if any.\n      description: Get's the pool login link, if any.\n      operationId: get_pool_login_link\n      requestBody:\n        description: The id of the pool launcher\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - launcher_id\n              properties:\n                launcher_id:\n                  type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      login_link:\n                        type: string\n                        format: url\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /get_pool_state:\n    post:\n      tags:\n        - Farmer\n      summary: Get's the state of the pool.\n      description: Get's the state of the pool.\n      operationId: get_pool_state\n      requestBody:\n        $ref: \"#/components/requestBodies/empty\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      pool_state:\n                        $ref: \"#/components/schemas/pool_state_info\"\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /set_payout_instructions:\n    post:\n      tags:\n        - Farmer\n      summary: Set's a pool's payout instructions.\n      description: Set's a pool's payout instructions.\n      operationId: set_payout_instructions\n      requestBody:\n        description: The id of the pool launcher and payout instructions\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - launcher_id\n                - payout_instructions\n              properties:\n                launcher_id:\n                  type: string\n                payout_instructions:\n                  type: string\n      responses:\n        '200':\n          $ref: \"#/components/responses/empty\"\n  /get_signage_point:\n    post:\n      tags:\n        - Farmer\n      summary: Get's a signage point by hash.\n      description: Get's a signage point by hash.\n      operationId: get_signage_point\n      requestBody:\n        description: The signage point hash\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - sp_hash\n              properties:\n                sp_hash:\n                  type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/signage_point_bundle\"\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /get_signage_points:\n    post:\n      tags:\n        - Farmer\n      summary: Get signage points.\n      description: Get signage points.\n      operationId: get_signage_points\n      requestBody:\n        $ref: \"#/components/requestBodies/empty\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      signage_points:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/signage_point_bundle\"\n                  - $ref: \"#/components/schemas/apiResponse\"\nexternalDocs:\n  description: Find out more about chia\n  url: https://chia.net\n"
		}
	},
	"Error": "parse: parse spec: paths: /get_pool_state: post: operation \"get_pool_state\": requestBody: resolve \"#/components/requestBodies/empty\" reference: resolve \"./requestBodies/empty.yaml#/empty\" reference: invalid requestBody reference: \"./requestBodies/empty.yaml#/empty\""
}