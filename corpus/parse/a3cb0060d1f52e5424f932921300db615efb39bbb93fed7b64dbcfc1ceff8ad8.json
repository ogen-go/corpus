{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tatumio/tatum-blockchain-connector"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "algo-connector/example/openapi.yaml",
			"byteSize": 101920,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://api-eul.tatum.io'\ninfo:\n  version: 1.0.0\n  title: Tatum Algorand API\ntags:\n  - description: |\n      \u003cp\u003eAlgorand is a decentralized blockchain technology network. Algorand is enabling the simple creation of next generation financial products, protocols and exchange of value across defi, financial institutions and governments.\u003cbr/\u003e\n      Tatum supports 2 chains:\n      \u003cul\u003e\u003cli\u003eMainnet - a regular live chain\n      \u003cli\u003eTestnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from\n      a faucet, e.g. \u003ca target=\"_blank\" href=\"https://bank.testnet.algorand.network/\"\u003ehttps://bank.testnet.algorand.network/\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/p\u003e\n    name: Blockchain / Algorand (ALGO)\npaths:\n  /v3/algorand/wallet:\n    get:\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eTatum supports Algorand wallets.\u003c/p\u003e\n      operationId: AlgorandGenerateWallet\n      parameters:\n        - description: \"Mnemonic to use for generation of extended public and private keys.\"\n          in: query\n          name: mnemonic\n          required: false\n          schema:\n            type: string\n            maxLength: 500\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Wallet\"\n          description: OK\n        400: \u0026API400\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error400\"\n          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.\n        401: \u0026API401\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error401NotActive\"\n                  - $ref: \"#/components/schemas/Error401Invalid\"\n          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.\n        500: \u0026API500\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error500\"\n          description: Internal server error. There was an error on the server during the processing of the request.\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Generate Algorand wallet\n      tags:\n        - Blockchain / Algorand (ALGO)\n  /v3/algorand/address/{priv}:\n    get:\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eGenerate Algorand account deposit address from private key.\u003c/p\u003e\n      operationId: AlgorandGenerateAddress\n      parameters:\n        - description: \"private key of wallet.\"\n          in: path\n          name: priv\n          required: true\n          schema:\n            type: string\n            example: \"NBYMCVEEDFYV3TPWVRE6APE7PKHUJD4XAKXCKNCLKGUXOC3LFNJGZQCJCRA53HB7ZAHF6NFJH2QIVQ5USQNWG35QCJLD4KZ5IWMB24Q\"\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  address:\n                    type: string\n                    description: Algorand address\n                    example: \"NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Generate Algorand account address from private key\n      tags:\n        - Blockchain / Algorand (ALGO)\n  /v3/algorand/account/balance/{address}:\n    get:\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eGet Algorand account balance in ALGO.\u003c/p\u003e\n      operationId: AlgorandGetBalance\n      parameters:\n        - description: \"Account address\"\n          in: path\n          name: address\n          required: true\n          schema:\n            type: string\n            example: \"TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4\"\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  balance:\n                    type: number\n                    description: Balance in ALGO\n                    example: 1000\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get ALgorand Account balance\n      tags:\n        - Blockchain / Algorand (ALGO)\n  /v3/algorand/block/current:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Algorand current block number. This is the number of the latest block in the blockchain.\u003c/p\u003e\"\n      operationId: AlgorandGetCurrentBlock\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: number\n                description: Current block number\n                example: 16775567\n          description: OK\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get current block number\n      tags:\n        - Blockchain / Algorand (ALGO)\n  /v3/algorand/block/{roundNumber}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Algorand block by block round number.\u003c/p\u003e\"\n      operationId: AlgorandGetBlock\n      parameters:\n        - description: \"Block round number\"\n          in: path\n          name: roundNumber\n          required: true\n          schema:\n            type: number\n            example: 16775567\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AlgoBlock\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Algorand block by block round number\n      tags:\n        - Blockchain / Algorand (ALGO)\n  /v3/algorand/transaction:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eSend ALGO from account to account.\u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: AlgorandBlockchainTransfer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/TransferAlgorandBlockchain\"\n                - $ref: \"#/components/schemas/TransferAlgorandBlockchainKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Send ALGO from account to account\n      tags:\n        - Blockchain / Algorand (ALGO)\n  /v3/algorand/transaction/{txid}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Algorand transaction by transaction id.\u003c/p\u003e\"\n      operationId: AlgorandGetTransaction\n      parameters:\n        - description: \"Transaction id\"\n          in: path\n          name: txid\n          required: true\n          schema:\n            type: string\n            example: \"LXEBXIBDAIF72NRI76SU252QSOGFCKEHTG7AI4P6W25V35PETU3Q\"\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AlgoTx\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Algorand Transaction\n      tags:\n        - Blockchain / Algorand (ALGO)\n  /v3/algorand/transactions/{from}/{to}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Algorand transaction by specified period of time.\u003c/p\u003e\"\n      operationId: AlgorandGetPayTransactionsByFromTo\n      parameters:\n        - description: \"Start timestamp in specified period of time\"\n          in: path\n          name: from\n          required: true\n          schema:\n            type: string\n            example: \"2021-05-01T20:44:39Z\"\n        - description: \"End timestamp in specified period of time\"\n          in: path\n          name: to\n          required: true\n          schema:\n            type: string\n            example: \"2021-06-01T20:44:39Z\"\n        - description: \"page size for pagination\"\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: string\n            example: \"5\"\n        - description: \"Algorand Next Token for getting the next page results\"\n          in: query\n          name: next\n          required: false\n          schema:\n            type: string\n            example: \"ywAAAAAAAAAAAAAA\"\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AlgoTxsWithPagination\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get Algorand Transaction\n      tags:\n        - Blockchain / Algorand (ALGO)\n  /v3/algorand/broadcast:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eBroadcast signed transaction to Algorand blockchain. This method is used internally from Tatum KMS or Tatum client libraries.\n        It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.\u003c/p\u003e\n      operationId: AlgoandBroadcast\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BroadcastKMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TransactionHashKMS\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Broadcast signed Algorand transaction\n      tags:\n        - Blockchain / Algorand (ALGO)\ncomponents:\n  schemas:\n    Wallet:\n      type: object\n      properties:\n        address:\n          maxLength: 58\n          minLength: 58\n          description: address of Algorand account.\n          example: \"NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y\"\n          type: string\n        secret:\n          maxLength: 103\n          minLength: 103\n          description: secretKey can generate Mnemonic, similar to private Key.\n          type: string\n          example: NBYMCVEEDFYV3TPWVRE6APE7PKHUJD4XAKXCKNCLKGUXOC3LFNJGZQCJCRA53HB7ZAHF6NFJH2QIVQ5USQNWG35QCJLD4KZ5IWMB24Q\n    AlgoBlock:\n      type: object\n      properties:\n        genesisHash:\n          description: hash to which this block belongs\n          type: string\n          example: \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"\n        genesisId:\n          description: ID to which this block belongs\n          type: string\n          example: \"testnet-v1.0\"\n        previousBlockHash:\n          description: Previous block hash\n          type: string\n          example: \"JeLGQTbqnBsD3NXE8Bf1TpPFMFadEVVyHhkcD61ljAU=\"\n        rewards:\n          description: rewards\n          type: object\n          example: {\n            'fee-sink': 'A7NMWS3NT3IUDMLVO26ULGXGIIOUQ3ND2TXSER6EBGRZNOBOUIQXHIBGDE',\n            'rewards-calculation-round': 17000000,\n            'rewards-level': 27521,\n            'rewards-pool': '7777777777777777777777777777777777777777777777777774MSJUVU',\n            'rewards-rate': 0,\n            'rewards-residue': 2020197303\n          }\n        round:\n          description: Current round on which this block was appended to the chain\n          type: number\n          example: 16775567\n        seed:\n          description: Sortition seed.\n          type: string\n          example: \"VPBpyrHyqbfqrHqJ3l39LXGN4qgEdNnE5kpJfk3vJtA=\"\n        timestamp:\n          description: Block creation timestamp in seconds since eposh\n          type: number\n          example: 1632167753\n        txns:\n          description: Array of transactions\n          type: array\n          items:\n            $ref: \"#/components/schemas/AlgoTx\"\n        txn:\n          description: TransactionsRoot authenticates the set of transactions appearing in the block.\n          type: string\n          example: ++MWW82yIvYQ0AEoPP0aDGGHGk/dSp5WHlbkf9SVU1U=\n        txnc:\n          description: TxnCounter counts the number of transations committed in the ledger\n          type: number\n          example: 27814470\n        upgradeState:\n          description: upgrade state\n          type: object\n          example: {\n            'current-protocol': 'https://github.com/algorandfoundation/specs/tree/abc54f79f9ad679d2d22f0fb9909fb005c16f8a1',\n            'next-protocol-approvals': 0,\n            'next-protocol-switch-on': 0,\n            'next-protocol-vote-before': 0\n          }\n        upgradeVote:\n          description: upgrade vote\n          type: object\n          example: { 'upgrade-approve': false, 'upgrade-delay': 0 }\n    AlgoTx:\n      type: object\n      properties:\n        closeRewards:\n          description: rewards applied to close-remainder-to account.\n          type: number\n          example: 0\n        closingAmount:\n          description: closing amount for transaction.\n          type: number\n          example: 0\n        confirmedRound:\n          description: Round when the transaction was confirmed.\n          type: number\n          example: 16775567\n        fee:\n          description: Transaction fee\n          type: number\n          example: 0.001\n        firstValid:\n          description: First valid round for this transaction.\n          type: number\n          example: 16775565\n        genesisHash:\n          description: Hash of genesis block\n          type: string\n          example: 'SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI='\n        genesisId:\n          description: genesis block ID.\n          type: string\n          example: 'testnet-v1.0'\n        id:\n          description: transaction ID\n          type: string\n          example: 'HNIQ76UTJYPOLZP5FWODYABBJPYPGJNEM2QEJSMDMQRWEKHEYJHQ'\n        intraRoundOffset:\n          description: Offset into the round where this transaction was confirmed.\n          type: number\n          example: 1\n        lastValid:\n          description: Last valid round for this transaction.\n          type: number\n          example: 16775571\n        note:\n          description: Free form data\n          type: string\n          example: 'cGluZ3Bvbmf0Jyl21QrtLw=='\n        paymentTransaction:\n          description: payment Transaction\n          type: object\n        receiverRewards:\n          description: rewards applied to receiver account.\n          type: number\n          example: 0\n        roundTime:\n          description: Time when the block this transaction is in was confirmed.\n          type: number\n          example: 1632167753\n        sender:\n          description: Sender's address\n          type: string\n          example: \"U6QEM4KM7KKGCLH4FELZBGJEVVSF556ELXHUOZC4ESPFS4O4V4VQXKQRXQ\"\n        senderRewards:\n          description: rewards applied to sender account.\n          type: number\n          example: 0\n        signature:\n          description: signature\n          type: object\n        txType:\n          description: indicates what type of transaction this is. Different types have differnet fields.\n          type: string\n          example: 'pay'\n    AlgoTxsWithPagination:\n      type: object\n      properties:\n        nextToken:\n          description: Used for pagination, when making another request provide this token with the next parameter.\n          type: string\n          example: \"ywAAAAAAAAAAAAAA\"\n        transactions:\n          description: Array of transactions.\n          type: array\n          items:\n            $ref: \"#/components/schemas/AlgoTx\"\n    TransferAlgorandBlockchain:\n      type: object\n      properties:\n        from:\n          description: Blockchain sender address.\n          type: string\n          example: \"TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4\"\n        to:\n          description: Blockchain address to send algo\n          type: string\n          example: \"NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y\"\n        fee:\n          description: Transaction fee in Algos.\n          type: string\n          example: \"0.001\"\n        amount:\n          description: Amount to be sent in Algos.\n          type: string\n          example: \"1\"\n        note:\n          description: \"Helloworld\"\n          type: string\n        fromPrivateKey:\n          description: Private key of sender address. Private key, or signature Id must be present.\n          type: string\n          example: \"72TCV5BRQPBMSAFPYO3CPWVDBYWNGAYNMTW5QHENOMQF7I6QLNMJWCJZ7A3V5YKD7QD6ZZPEHG2PV2ZVVEDDO6BCRGXWIL3DIUMSUCI\"\n      required:\n        - from\n        - to\n        - amount\n        - fromPrivateKey\n    TransferAlgorandBlockchainKMS:\n      type: object\n      properties:\n        from:\n          description: Blockchain sender address.\n          type: string\n          example: \"TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4\"\n        to:\n          description: Blockchain address to send algo\n          type: string\n          example: \"NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y\"\n        fee:\n          description: Transaction fee in MicroAlgos.\n          type: string\n          example: \"1000\"\n        amount:\n          description: Amount to be sent in MicroAlgos.\n          type: string\n          example: \"100000\"\n        note:\n          description: \"Helloworld\"\n          type: string\n        index:\n          type: number\n          minimum: 0\n          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n      required:\n        - from\n        - to\n        - amount\n        - signatureId\n\n    Error400:\n      properties:\n        errorCode:\n          example: validation.failed\n          description: validation.failed\n          type: string\n        message:\n          example: \"Request validation failed. Please see data for additional information.\"\n          description: \"Request validation failed. Please see data for additional information.\"\n          type: string\n        statusCode:\n          example: 400\n          description: \"400\"\n          type: number\n        data:\n          type: array\n          items:\n            type: object\n            required:\n              - target\n            properties:\n              target:\n                type: object\n                additionalProperties: true\n                description: Request object present in the body of the HTTP request\n                example:\n                  property: 12345\n              value:\n                type: number\n                description: Value of the target object which validation is wrong. Can be of any data type, example here is using type number.\n                example: 12345\n              property:\n                type: string\n                description: Property name of the target object which validation is wrong\n                example: property1\n              constraints:\n                type: object\n                additionalProperties: true\n                description: Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.\n                example:\n                  min: property1 must not be less than 50000\n      required:\n        - errorCode\n        - message\n        - statusCode\n        - data\n      type: object\n    Error401Invalid:\n      properties:\n        errorCode:\n          example: subscription.invalid\n          description: subscription.invalid\n          type: string\n        message:\n          example: \"Unable to find valid subscription for '${apiKey}'\"\n          description: \"Unable to find valid subscription for '${apiKey}'\"\n          type: string\n        statusCode:\n          example: 401\n          description: \"401\"\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error401NotActive:\n      properties:\n        errorCode:\n          example: subscription.not.active\n          description: subscription.not.active\n          type: string\n        message:\n          example: Subscription not active anymore.\n          description: Subscription not active anymore.\n          type: string\n        statusCode:\n          example: 401\n          description: \"401\"\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403ComplianceBtc:\n      properties:\n        errorCode:\n          description: compliance.country.btc.not.supported\n          example: compliance.country.btc.not.supported\n          type: string\n        message:\n          description: Customer country not supported for BTC.\n          example: Customer country not supported for BTC.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403Libra:\n      properties:\n        errorCode:\n          description: libra.request.failed\n          example: libra.request.failed\n          type: string\n        message:\n          description: ${error}\n          example: ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403Neo:\n      properties:\n        errorCode:\n          description: neo.failed\n          example: neo.failed\n          type: string\n        message:\n          description: Unable to communicate to blockchain. ${error}\n          example: Unable to communicate to blockchain. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthBroadcast:\n      properties:\n        errorCode:\n          description: ethereum.broadcast.failed\n          example: ethereum.broadcast.failed\n          type: string\n        message:\n          description: Unable to broadcast transaction due to ${error}.\n          example: Unable to broadcast transaction due to ${error}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthErc20NotFound:\n      properties:\n        errorCode:\n          description: erc20.token.notFound\n          example: erc20.token.notFound\n          type: string\n        message:\n          description: No such ERC20 currency ${name}.\n          example: No such ERC20 currency ${name}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxNotFound:\n      properties:\n        errorCode:\n          description: tx.missing\n          example: tx.missing\n          type: string\n        message:\n          description: No such tx.\n          example: No such tx.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthErc20Set:\n      properties:\n        errorCode:\n          description: erc20.address.set\n          example: erc20.address.set\n          type: string\n        message:\n          description: ERC20 address was already set.\n          example: ERC20 address was already set.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthMnemonicPrivateKey:\n      properties:\n        errorCode:\n          description: private.mnemonic.missing\n          example: private.mnemonic.missing\n          type: string\n        message:\n          description: Either mnemonic and index or private key must be present.\n          example: Either mnemonic and index or private key must be present.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthErc20Unsupported:\n      properties:\n        errorCode:\n          description: eth.erc20.unsupported\n          example: eth.erc20.unsupported\n          type: string\n        message:\n          description: Unsupported ETH ERC20 blockchain.\n          example: Unsupported ETH ERC20 blockchain.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthTxHash:\n      properties:\n        errorCode:\n          description: eth.transaction.hash\n          example: eth.transaction.hash\n          type: string\n        message:\n          description: Unable to calculate transaction hash. ${error}\n          example: Unable to calculate transaction hash. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthTxSign:\n      properties:\n        errorCode:\n          description: eth.transaction.sign\n          example: eth.transaction.sign\n          type: string\n        message:\n          description: Unable to sign transaction. ${error}\n          example: Unable to sign transaction. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthErc20TxSign:\n      properties:\n        errorCode:\n          description: eth.erc20.sign\n          example: eth.erc20.sign\n          type: string\n        message:\n          description: Unable to sign transaction for contract creation. ${error}\n          example: Unable to sign transaction for contract creation. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthErc721TxSign:\n      properties:\n        errorCode:\n          description: eth.erc721.sign\n          example: eth.erc721.sign\n          type: string\n        message:\n          description: Unable to sign transaction for contract creation. ${error}\n          example: Unable to sign transaction for contract creation. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthErc721Call:\n      properties:\n        errorCode:\n          description: eth.erc721.failed\n          example: eth.erc721.failed\n          type: string\n        message:\n          description: Unable to obtain information for token. ${error}\n          example: Unable to obtain information for token. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthGasCalculation:\n      properties:\n        errorCode:\n          description: eth.transaction.gas\n          example: eth.transaction.gas\n          type: string\n        message:\n          description: Unable to calculate gas limit for transaction. ${error}\n          example: Unable to calculate gas limit for transaction. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthTxBody:\n      properties:\n        errorCode:\n          description: ethereum.transaction.body\n          example: ethereum.transaction.body\n          type: string\n        message:\n          description: Either currency, or tokenAddress must be defined.\n          example: Either currency, or tokenAddress must be defined.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthScBody:\n      properties:\n        errorCode:\n          description: ethereum.sc.invalid\n          example: ethereum.sc.invalid\n          type: string\n        message:\n          description: Invalid parameters for smart contract invocation.\n          example: Invalid parameters for smart contract invocation.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403EthGasPrice:\n      properties:\n        errorCode:\n          description: gas.price.failed\n          example: gas.price.failed\n          type: string\n        message:\n          description: Unable to obtain current GAS price.\n          example: Unable to obtain current GAS price.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403ComplianceEth:\n      properties:\n        errorCode:\n          description: compliance.country.eth.not.supported\n          example: compliance.country.eth.not.supported\n          type: string\n        message:\n          description: Customer country not supported for ETH.\n          example: Customer country not supported for ETH.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountTestnet:\n      properties:\n        errorCode:\n          description: account.blockchain.testnet\n          example: account.blockchain.testnet\n          type: string\n        message:\n          description: Unable to create account, unsupported testnet blockchain.\n          example: Unable to create account, unsupported testnet blockchain.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountXpub:\n      properties:\n        errorCode:\n          description: account.xpub.present\n          example: account.xpub.present\n          type: string\n        message:\n          description: Unable to create ${account.currency} account with xpub.\n          example: Unable to create ${account.currency} account with xpub.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AddressXpub:\n      properties:\n        errorCode:\n          description: Address.xpub.present\n          example: address.xpub.present\n          type: string\n        message:\n          description: Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.\n          example: Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountCurrency:\n      properties:\n        errorCode:\n          description: ledger.currency.invalid\n          example: ledger.currency.invalid\n          type: string\n        message:\n          description: Unable to create an account, unsupported currency.\n          example: Unable to create an account, unsupported currency.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountIncompatibleXpub:\n      properties:\n        errorCode:\n          description: account.xpub.incompatible\n          example: account.xpub.incompatible\n          type: string\n        message:\n          description: Xpub not compatible with account currency.\n          example: Xpub not compatible with account currency.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountIncompatibleXpubBtc:\n      properties:\n        errorCode:\n          description: Address.generation.failed.wrong.xpub\n          example: address.generation.failed.wrong.xpub\n          type: string\n        message:\n          description: Unable to generate address, wrong xpub and account type.\n          example: Unable to generate address, wrong xpub and account type.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountAddressGeneral:\n      properties:\n        errorCode:\n          description: Address.generation.failed\n          example: address.generation.failed\n          type: string\n        message:\n          description: Unable to generate address.\n          example: Unable to generate address.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BnbFailed:\n      properties:\n        errorCode:\n          description: bnb.failed\n          example: bnb.failed\n          type: string\n        message:\n          description: Unable to communicate with blockchain. ${error}\n          example: Unable to communicate with blockchain. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BnbAddressFailed:\n      properties:\n        errorCode:\n          description: Address.bnb.generation.failed.wrong.xpub\n          example: address.bnb.generation.failed.wrong.xpub\n          type: string\n        message:\n          description: Unable to generate BNB address, wrong xpub and account type.\n          example: Unable to generate BNB address, wrong xpub and account type.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BnbBroadcatSigFailed:\n      properties:\n        errorCode:\n          description: bnb.broadcast.bad.signature\n          example: bnb.broadcast.bad.signature\n          type: string\n        message:\n          description: Unable to broadcast BNB transaction, bad signature.\n          example: Unable to broadcast BNB transaction, bad signature.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BnbTxStateFailed:\n      properties:\n        errorCode:\n          description: bnb.broadcast.failed.tx.state\n          example: bnb.broadcast.failed.tx.state\n          type: string\n        message:\n          description: Unable to broadcast BNB transaction, tx ${hash} state not OK.\n          example: Unable to broadcast BNB transaction, tx ${hash} state not OK.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BnbTxFailed:\n      properties:\n        errorCode:\n          description: bnb.transfer.failed\n          example: bnb.transfer.failed\n          type: string\n        message:\n          description: Unable to transfer funds. ${error}\n          example: Unable to transfer funds. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BtcTxFailed:\n      properties:\n        errorCode:\n          description: transaction.failed\n          example: transaction.failed\n          type: string\n        message:\n          description: No spendable inputs.\n          example: No spendable inputs.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BtcTx:\n      properties:\n        errorCode:\n          description: transaction.invalid.body\n          example: transaction.invalid.body\n          type: string\n        message:\n          description: Either UTXO, or addresses must be present.\n          example: Either UTXO, or addresses must be present.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountNotExists:\n      properties:\n        errorCode:\n          description: account.not.exists\n          example: account.not.exists\n          type: string\n        message:\n          description: No such account.\n          example: No such account.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BlockageNotExists:\n      properties:\n        errorCode:\n          description: blockage.not.exists\n          example: blockage.not.exists\n          type: string\n        message:\n          description: No such blockage.\n          example: No such blockage.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BlockageAmount:\n      properties:\n        errorCode:\n          description: blockage.amount.exceeded\n          example: blockage.amount.exceeded\n          type: string\n        message:\n          description: Amount to transfer is greater then amount of the blockage.\n          example: Amount to transfer is greater then amount of the blockage.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403SubscriptionNotExists:\n      properties:\n        errorCode:\n          description: subscription.not.exists\n          example: subscription.not.exists\n          type: string\n        message:\n          description: No such subscription.\n          example: No such subscription.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403SubscriptionType:\n      properties:\n        errorCode:\n          description: subscription.type.invalid\n          example: subscription.type.invalid\n          type: string\n        message:\n          description: Invalid subscription type.\n          example: Invalid subscription type.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403SubscriptionCurrency:\n      properties:\n        errorCode:\n          description: subscription.attr.currency.invalid\n          example: subscription.attr.currency.invalid\n          type: string\n        message:\n          description: Invalid subscription attribute 'currency'.\n          example: Invalid subscription attribute 'currency'.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403SubscriptionInterval:\n      properties:\n        errorCode:\n          description: subscription.attr.interval.invalid\n          example: subscription.attr.interval.invalid\n          type: string\n        message:\n          description: Invalid subscription attribute 'interval'.\n          example: Invalid subscription attribute 'interval'.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403SubscriptionBalance:\n      properties:\n        errorCode:\n          description: subscription.attr.balance.invalid\n          example: subscription.attr.balance.invalid\n          type: string\n        message:\n          description: Invalid subscription attribute 'limit' or 'typeOfBalance'.\n          example: Invalid subscription attribute 'limit' or 'typeOfBalance'.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403SubscriptionId:\n      properties:\n        errorCode:\n          description: subscription.attr.incoming.invalid\n          example: subscription.attr.incoming.invalid\n          type: string\n        message:\n          description: Invalid subscription attribute 'id' or 'url'.\n          example: Invalid subscription attribute 'id' or 'url'.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403SubscriptionPendingId:\n      properties:\n        errorCode:\n          description: subscription.attr.pending.invalid\n          example: subscription.attr.pending.invalid\n          type: string\n        message:\n          description: Invalid subscription attribute 'id' or 'url'.\n          example: Invalid subscription attribute 'id' or 'url'.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403ReportNotAvailable:\n      properties:\n        errorCode:\n          description: report.invalid\n          example: report.invalid\n          type: string\n        message:\n          description: Unsupported report type.\n          example: Unsupported report type.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountInactive:\n      properties:\n        errorCode:\n          description: account.inactive\n          example: account.inactive\n          type: string\n        message:\n          description: Unable to deactivate inactive account.\n          example: Unable to deactivate inactive account.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountActive:\n      properties:\n        errorCode:\n          description: account.active\n          example: account.active\n          type: string\n        message:\n          description: Unable to activate active account.\n          example: Unable to activate active account.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountFrozen:\n      properties:\n        errorCode:\n          description: account.frozen\n          example: account.frozen\n          type: string\n        message:\n          description: Unable to freeze frozen account.\n          example: Unable to freeze frozen account.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountNotFrozen:\n      properties:\n        errorCode:\n          description: account.not.frozen\n          example: account.not.frozen\n          type: string\n        message:\n          description: Unable to unfreeze unfrozen account.\n          example: Unable to unfreeze unfrozen account.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403CustomerInternalNotExists:\n      properties:\n        errorCode:\n          description: customer.internal.not.exists\n          example: customer.internal.not.exists\n          type: string\n        message:\n          description: No such customer.\n          example: No such customer.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403CustomerActive:\n      properties:\n        errorCode:\n          description: customer.active\n          example: customer.active\n          type: string\n        message:\n          description: Unable to activate active customer.\n          example: Unable to activate active customer.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403CustomerInactive:\n      properties:\n        errorCode:\n          description: customer.inactive\n          example: customer.inactive\n          type: string\n        message:\n          description: Unable to perform operation on inactive customer.\n          example: Unable to perform operation on inactive customer.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403CustomerDisabled:\n      properties:\n        errorCode:\n          description: customer.disabled\n          example: customer.disabled\n          type: string\n        message:\n          description: Unable to disable disabled customer.\n          example: Unable to disable disabled customer.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403CustomerEnabled:\n      properties:\n        errorCode:\n          description: customer.enabled\n          example: customer.enabled\n          type: string\n        message:\n          description: Unable to enable enabled customer.\n          example: Unable to enable enabled customer.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403CustomerDeactivateActiveAccounts:\n      properties:\n        errorCode:\n          description: customer.deactivate.account.active\n          example: customer.deactivate.account.active\n          type: string\n        message:\n          description: Unable to deactivate customer, accounts not deactivated.\n          example: Unable to deactivate customer, accounts not deactivated.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403CustomerNotExists:\n      properties:\n        errorCode:\n          description: customer.not.exists\n          example: customer.not.exists\n          type: string\n        message:\n          description: No customer with given external ID ${externalId} exists.\n          example: No customer with given external ID ${externalId} exists.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BlockDelete:\n      properties:\n        errorCode:\n          description: customer.blockage.inactive\n          example: customer.blockage.inactive\n          type: string\n        message:\n          description: Unable to delete blockages on account for inactive customer.\n          example: Unable to delete blockages on account for inactive customer.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403CustomerNotActive:\n      properties:\n        errorCode:\n          description: customer.not.active\n          example: customer.not.active\n          type: string\n        message:\n          description: Customer not active.\n          example: Customer not active.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403VCNoAccount:\n      properties:\n        errorCode:\n          description: virtual.account.notValid\n          example: virtual.account.notValid\n          type: string\n        message:\n          description: Unable to perform operation on virtual currency, account does not exists.\n          example: Unable to perform operation on virtual currency, account does not exists.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403VCTxFailed:\n      properties:\n        errorCode:\n          description: virtual.tx.failed\n          example: virtual.tx.failed\n          type: string\n        message:\n          description: Unable to perform operation on virtual currency, impossible to store transaction.\n          example: Unable to perform operation on virtual currency, impossible to store transaction.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403VCRevokeBalance:\n      properties:\n        errorCode:\n          description: virtual.account.balance\n          example: virtual.account.balance\n          type: string\n        message:\n          description: Insufficient balance to revoke virtual currency on account.\n          example: Insufficient balance to revoke virtual currency on account.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403VCCreateFailed:\n      properties:\n        errorCode:\n          description: virtual.creation.error\n          example: virtual.creation.error\n          type: string\n        message:\n          description: It is not possible to create virtual currency.\n          example: It is not possible to create virtual currency.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403VCPrefix:\n      properties:\n        errorCode:\n          description: virtual.name.prefix\n          example: virtual.name.prefix\n          type: string\n        message:\n          description: Virtual currency has wrong name, must start with VC_.\n          example: Virtual currency has wrong name, must start with VC_.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403VCDuplicate:\n      properties:\n        errorCode:\n          description: virtual.duplicate\n          example: virtual.duplicate\n          type: string\n        message:\n          description: Virtual currency with given name already exists.\n          example: Virtual currency with given name already exists.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountCustomerInactive:\n      properties:\n        errorCode:\n          description: account.customer.inactive\n          example: account.customer.inactive\n          type: string\n        message:\n          description: Unable to activate account, customer inactive.\n          example: Unable to activate account, customer inactive.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountBalanceNonZero:\n      properties:\n        errorCode:\n          description: account.balance.non.zero\n          example: account.balance.non.zero\n          type: string\n        message:\n          description: Unable to deactivate account with non-zero balance.\n          example: Unable to deactivate account with non-zero balance.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TradeBalanceNonZero:\n      properties:\n        errorCode:\n          description: account.trade.non.zero\n          example: account.trade.non.zero\n          type: string\n        message:\n          description: Unable to deactivate account with non-zero exchange trades.\n          example: Unable to deactivate account with non-zero exchange trades.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AmountFormat:\n      properties:\n        errorCode:\n          description: amount.format\n          example: amount.format\n          type: string\n        message:\n          description: Amount has incorrect format.\n          example: Amount has incorrect format.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403RecipientFormat:\n      properties:\n        errorCode:\n          description: withdrawal.recipient.format\n          example: withdrawal.recipient.format\n          type: string\n        message:\n          description: Recipient blockchain address has incorrect format.\n          example: Recipient blockchain address has incorrect format.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AccountCurrencyVC:\n      properties:\n        errorCode:\n          description: account.currency.missing\n          example: account.currency.missing\n          type: string\n        message:\n          description: No such virtual currency ${currency} for account ${account}.\n          example: No such virtual currency ${currency} for account ${account}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403VCNotFound:\n      properties:\n        errorCode:\n          description: vc.not.found\n          example: vc.not.found\n          type: string\n        message:\n          description: No such virtual currency.\n          example: No such virtual currency.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AddressUsed:\n      properties:\n        errorCode:\n          description: Address.used\n          example: address.used\n          type: string\n        message:\n          description: Address and currency already in use.\n          example: Address and currency already in use.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AddressNotFound:\n      properties:\n        errorCode:\n          description: Address.not.found\n          example: address.not.found\n          type: string\n        message:\n          description: No such address exists.\n          example: No such address exists.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AddressAccountXpubMissing:\n      properties:\n        errorCode:\n          description: account.xpub.missing\n          example: account.xpub.missing\n          type: string\n        message:\n          description: No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.\n          example: No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AddressIndexUsed:\n      properties:\n        errorCode:\n          description: Address.index.used\n          example: address.index.used\n          type: string\n        message:\n          description: Unable to create address, derivation index is already used.\n          example: Unable to create address, derivation index is already used.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BtcBlockchain:\n      properties:\n        errorCode:\n          description: blockchain.error.code\n          example: blockchain.error.code\n          type: string\n        message:\n          description: \"${error.message} Code: ${error.code}\"\n          example: \"${error.message} Code: ${error.code}\"\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BlockNotExists:\n      properties:\n        errorCode:\n          description: block.hash.not.exists\n          example: block.hash.not.exists\n          type: string\n        message:\n          description: No such block.\n          example: No such block.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403Broadcast:\n      properties:\n        errorCode:\n          description: blockchain.broadcast.error\n          example: blockchain.broadcast.error\n          type: string\n        message:\n          description: Unable to broadcast transaction, wrong input data.\n          example: Unable to broadcast transaction, wrong input data.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BlockchainPrivateFailed:\n      properties:\n        errorCode:\n          description: key.generation.failed.wrong.mnemonic\n          example: key.generation.failed.wrong.mnemonic\n          type: string\n        message:\n          description: Unable to generate address, wrong mnemonic and index.\n          example: Unable to generate address, wrong mnemonic and index.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BtcUTXO:\n      properties:\n        errorCode:\n          description: tx.hash.index.spent\n          example: tx.hash.index.spent\n          type: string\n        message:\n          description: No such UTXO for transaction and index.\n          example: No such UTXO for transaction and index.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BcashBroadcast:\n      properties:\n        errorCode:\n          description: bch.broadcast.failed\n          example: bch.broadcast.failed\n          type: string\n        message:\n          description: 'Unable to broadcast transaction. Error from blockchain: ${error}'\n          example: 'Unable to broadcast transaction. Error from blockchain: ${error}'\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403WithdrawalNotFound:\n      properties:\n        errorCode:\n          description: withdrawal.missing\n          example: withdrawal.missing\n          type: string\n        message:\n          description: No such withdrawal.\n          example: No such withdrawal.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403KMSNotExists:\n      properties:\n        errorCode:\n          description: kms.missing\n          example: kms.missing\n          type: string\n        message:\n          description: No such KMS signature with id '{id}'.\n          example: No such KMS signature with id '{id}'.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OffchainNotCancelled:\n      properties:\n        errorCode:\n          description: withdrawal.not.cancelled.transaction.failed\n          example: withdrawal.not.cancelled.transaction.failed\n          type: string\n        message:\n          description: 'Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.'\n          example: 'Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.'\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403XlmFailed:\n      properties:\n        errorCode:\n          description: xlm.failed\n          example: xlm.failed\n          type: string\n        message:\n          description: Unable to communicate with blockchain. ${error}\n          example: Unable to communicate with blockchain. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403XrpFailed:\n      properties:\n        errorCode:\n          description: xrp.failed\n          example: xrp.failed\n          type: string\n        message:\n          description: Unable to communicate with blockchain. ${error}\n          example: Unable to communicate with blockchain. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403XrpCode:\n      properties:\n        errorCode:\n          description: xrp.account.failed\n          example: xrp.account.failed\n          type: string\n        message:\n          description: '${error} Code: ${code}'\n          example: '${error} Code: ${code}'\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403XrpLedger:\n      properties:\n        errorCode:\n          description: xrp.ledger.failed\n          example: xrp.ledger.failed\n          type: string\n        message:\n          description: '${error} Code: ${code}'\n          example: '${error} Code: ${code}'\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403XrpBroadcast:\n      properties:\n        errorCode:\n          description: xrp.broadcast.failed\n          example: xrp.broadcast.failed\n          type: string\n        message:\n          description: Xrp submit tx failed. ${error}\n          example: Xrp submit tx failed. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403XrpMultiple:\n      properties:\n        errorCode:\n          description: xrp.settings.multiple\n          example: xrp.settings.multiple\n          type: string\n        message:\n          description: It is possible to set 1 parameter at a time.\n          example: It is possible to set 1 parameter at a time.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403XrpAttr:\n      properties:\n        errorCode:\n          description: attr.wrong.format\n          example: attr.wrong.format\n          type: string\n        message:\n          description: Wrong attr of withdrawal, should be of uint32 type.\n          example: Wrong attr of withdrawal, should be of uint32 type.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403XrpFee:\n      properties:\n        errorCode:\n          description: xrp.fee\n          example: xrp.fee\n          type: string\n        message:\n          description: Unable to calculate fee.\n          example: Unable to calculate fee.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403XrpSign:\n      properties:\n        errorCode:\n          description: xrp.sign.failed\n          example: xrp.sign.failed\n          type: string\n        message:\n          description: Unable to sign tx. ${error}\n          example: Unable to sign tx. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403XlmTxFailed:\n      properties:\n        errorCode:\n          description: xlm.tx.failed\n          example: xlm.tx.failed\n          type: string\n        message:\n          description: Unable to construct transaction. ${error}\n          example: Unable to construct transaction. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403VetFailed:\n      properties:\n        errorCode:\n          description: vet.failed\n          example: vet.failed\n          type: string\n        message:\n          description: Unable to communicate with blockchain. ${error}\n          example: Unable to communicate with blockchain. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403VetGas:\n      properties:\n        errorCode:\n          description: vet.transaction.gas\n          example: vet.transaction.gas\n          type: string\n        message:\n          description: Unable to calculate gas limit for transaction. ${error}\n          example: Unable to calculate gas limit for transaction. ${error}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403VetTxHash:\n      properties:\n        errorCode:\n          description: vet.transaction.hash\n          example: vet.transaction.hash\n          type: string\n        message:\n          description: Unable to calculate transaction hash.\n          example: Unable to calculate transaction hash.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OffchainBroadcastState:\n      properties:\n        errorCode:\n          description: withdrawal.unexpected.state\n          example: withdrawal.unexpected.state\n          type: string\n        message:\n          description: Unable to complete withdrawal, which is not in InProgress state.\n          example: Unable to complete withdrawal, which is not in InProgress state.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OffchainCancelled:\n      properties:\n        errorCode:\n          description: withdrawal.prepare.failed\n          example: withdrawal.prepare.failed\n          type: string\n        message:\n          description: Unable to prepare transaction, withdrawal cancelled.\n          example: Unable to prepare transaction, withdrawal cancelled.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OffchainNotSupported:\n      properties:\n        errorCode:\n          description: offchain.not.supported\n          example: offchain.not.supported\n          type: string\n        message:\n          description: Offchain not supported for account with ${account.currency} currency.\n          example: Offchain not supported for account with ${account.currency} currency.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403AddressAccountXpubUsed:\n      properties:\n        errorCode:\n          description: xpub.used\n          example: xpub.used\n          type: string\n        message:\n          description: XPub already used registered within Tatum\n          example: XPub already used registered within Tatum\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403RateNotFound:\n      properties:\n        errorCode:\n          description: rate.not.found\n          example: rate.not.found\n          type: string\n        message:\n          description: No such currency rate.\n          example: No such currency rate.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OffchainBroadcast:\n      properties:\n        errorCode:\n          description: broadcast.failed.withdrawalId\n          example: broadcast.failed.withdrawalId\n          type: string\n        message:\n          description: WithdrawalId must be present.\n          example: WithdrawalId must be present.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OffchainCheck:\n      properties:\n        errorCode:\n          description: withdrawal.check.currency\n          example: withdrawal.check.currency\n          type: string\n        message:\n          description: Withdrawal check available only for ETH based currencies.\n          example: Withdrawal check available only for ETH based currencies.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BtcTxUtxoFailed:\n      properties:\n        errorCode:\n          description: transaction.preparation.failed.utxo\n          example: transaction.preparation.failed.utxo\n          type: string\n        message:\n          description: Impossible to find last UTXO.\n          example: Impossible to find last UTXO.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403BtcMnemonicTxFailed:\n      properties:\n        errorCode:\n          description: transaction.preparation.failed\n          example: transaction.preparation.failed\n          type: string\n        message:\n          description: Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present.\n          example: Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403WithdrawalFailed:\n      properties:\n        errorCode:\n          description: withdrawal.failed.transaction.failed\n          example: withdrawal.failed.transaction.failed\n          type: string\n        message:\n          description: Unable to store withdrawal, it is impossible to create transaction.\n          example: Unable to store withdrawal, it is impossible to create transaction.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403WithdrawalCancelled:\n      properties:\n        errorCode:\n          description: withdrawal.not.cancelled.transaction.failed\n          example: withdrawal.not.cancelled.transaction.failed\n          type: string\n        message:\n          description: Unable to cancel withdrawal ${id}, it is impossible to create refund transaction.\n          example: Unable to cancel withdrawal ${id}, it is impossible to create refund transaction.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403FeeFormat:\n      properties:\n        errorCode:\n          description: fee.format\n          example: fee.format\n          type: string\n        message:\n          description: Fee has incorrect format.\n          example: Fee has incorrect format.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxSenderNotFound:\n      properties:\n        errorCode:\n          description: senderAccount.not.exists\n          example: senderAccount.not.exists\n          type: string\n        message:\n          description: Unable to find sender account ${transaction.senderAccountId}.\n          example: Unable to find sender account ${transaction.senderAccountId}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxSenderFrozen:\n      properties:\n        errorCode:\n          description: senderAccount.frozen\n          example: senderAccount.frozen\n          type: string\n        message:\n          description: Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.\n          example: Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxSenderCustomerDisabled:\n      properties:\n        errorCode:\n          description: senderAccount.customer.disabled\n          example: senderAccount.customer.disabled\n          type: string\n        message:\n          description: Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.\n          example: Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxRecipientNotFound:\n      properties:\n        errorCode:\n          description: recipientAccount.not.exists\n          example: recipientAccount.not.exists\n          type: string\n        message:\n          description: Unable to find recipient account ${transaction.recipientAccountId}.\n          example: Unable to find recipient account ${transaction.recipientAccountId}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxCurrency:\n      properties:\n        errorCode:\n          description: transaction.currency.incompatible\n          example: transaction.currency.incompatible\n          type: string\n        message:\n          description: Incompatible currencies for sender account ${transaction.senderAccountId} and recipient account ${transaction.recipientAccountId}.\n          example: Incompatible currencies for sender account ${transaction.senderAccountId} and recipient account ${transaction.recipientAccountId}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxBalance:\n      properties:\n        errorCode:\n          description: balance.insufficient\n          example: balance.insufficient\n          type: string\n        message:\n          description: Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}\n          example: Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxAmountBtc:\n      properties:\n        errorCode:\n          description: amount.btc\n          example: amount.btc\n          type: string\n        message:\n          description: BTC|LTC|BCH payment amount must be at least 0.00000000000001, not ${transaction.amount}.\n          example: BTC|LTC|BCH payment amount must be at least 0.00000000000001, not ${transaction.amount}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxAmountBtcOffchain:\n      properties:\n        errorCode:\n          description: transaction.amount.btc\n          example: transaction.amount.btc\n          type: string\n        message:\n          description: BTC|LTC|BCH payment amount must be at least 0.00000001, not ${transaction.amount}.\n          example: BTC|LTC|BCH payment amount must be at least 0.00000001, not ${transaction.amount}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxAmountAda:\n      properties:\n        errorCode:\n          description: transaction.amount.ada\n          example: transaction.amount.ada\n          type: string\n        message:\n          description: ADA payment amount must be at least 0.000001, not ${transaction.amount}.\n          example: ADA payment amount must be at least 0.000001, not ${transaction.amount}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxAmountAdaOffchain:\n      properties:\n        errorCode:\n          description: amount.ada\n          example: amount.ada\n          type: string\n        message:\n          description: ADA payment amount must be at least 0.000000000001, not ${transaction.amount}.\n          example: ADA payment amount must be at least 0.000000000001, not ${transaction.amount}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403WithdrawalPending:\n      properties:\n        errorCode:\n          description: withdrawal.pending\n          example: withdrawal.pending\n          type: string\n        message:\n          description: Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.\n          example: Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxAmountEth:\n      properties:\n        errorCode:\n          description: amount.eth\n          example: amount.eth\n          type: string\n        message:\n          description: ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.\n          example: ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxAmountEthOffchain:\n      properties:\n        errorCode:\n          description: transaction.amount.eth\n          example: transaction.amount.eth\n          type: string\n        message:\n          description: ETH payment amount must be at least 0.000000000000000001, not ${transaction.amount}.\n          example: ETH payment amount must be at least 0.000000000000000001, not ${transaction.amount}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403TxNotCompliant:\n      properties:\n        errorCode:\n          description: transaction.not.compliant\n          example: transaction.not.compliant\n          type: string\n        message:\n          description: Transaction not compliant, recipient account customer country is not defined.\n          example: Transaction not compliant, recipient account customer country is not defined.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403WithdrawalVC:\n      properties:\n        errorCode:\n          description: withdrawal.account.virtual\n          example: withdrawal.account.virtual\n          type: string\n        message:\n          description: Sender account cannot be virtual.\n          example: Sender account cannot be virtual.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403Erc20Prefix:\n      properties:\n        errorCode:\n          description: erc20.symbol.prefix\n          example: erc20.symbol.prefix\n          type: string\n        message:\n          description: ERC20 token cannot start with VC_.\n          example: ERC20 token cannot start with VC_.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403Erc20XpubBoth:\n      properties:\n        errorCode:\n          description: erc20.address.xpub.both\n          example: erc20.address.xpub.both\n          type: string\n        message:\n          description: Either xpub or address must be present, not both.\n          example: Either xpub or address must be present, not both.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403Erc20XpubMissing:\n      properties:\n        errorCode:\n          description: erc20.address.xpub.missing\n          example: erc20.address.xpub.missing\n          type: string\n        message:\n          description: Either xpub or address must be present.\n          example: Either xpub or address must be present.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403Erc20NameDuplicate:\n      properties:\n        errorCode:\n          description: erc20.duplicate.name\n          example: erc20.duplicate.name\n          type: string\n        message:\n          description: ERC20 token with given name already exists.\n          example: ERC20 token with given name already exists.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OrderCurrency1NotFound:\n      properties:\n        errorCode:\n          description: trade.currency1AccountId.not.exists\n          example: trade.currency1AccountId.not.exists\n          type: string\n        message:\n          description: Unable to find currency1 account ${trade.currency1AccountId}.\n          example: Unable to find currency1 account ${trade.currency1AccountId}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OrderFeeNotFound:\n      properties:\n        errorCode:\n          description: trade.feeAccount\n          example: trade.feeAccount\n          type: string\n        message:\n          description: Unable to find fee account ${trade.feeAccountId}.\n          example: Unable to find fee account ${trade.feeAccountId}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OrderFeeIncompatible:\n      properties:\n        errorCode:\n          description: trade.currency.fee\n          example: trade.currency.fee\n          type: string\n        message:\n          description: Incompatible currencies for currency1 and fee account.\n          example: Incompatible currencies for currency1 and fee account.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OrderCurrency1Frozen:\n      properties:\n        errorCode:\n          description: trade.currency1AccountId.frozen\n          example: trade.currency1AccountId.frozen\n          type: string\n        message:\n          description: Currency1 account ${trade.currency1AccountId} is frozen, unable to perform trade.\n          example: Currency1 account ${trade.currency1AccountId} is frozen, unable to perform trade.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OrderCurrency1CustomerDisabled:\n      properties:\n        errorCode:\n          description: trade.currency1AccountId.customer.disabled\n          example: trade.currency1AccountId.customer.disabled\n          type: string\n        message:\n          description: Currency1 account's customer ${currency1Account.customerId} is disabled, unable to perform exchange trade.\n          example: Currency1 account's customer ${currency1Account.customerId} is disabled, unable to perform exchange trade.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OrderCurrency2NotFound:\n      properties:\n        errorCode:\n          description: trade.currency2AccountId.not.exists\n          example: trade.currency2AccountId.not.exists\n          type: string\n        message:\n          description: Unable to find currency2 account ${trade.currency2AccountId}.\n          example: Unable to find currency2 account ${trade.currency2AccountId}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OrderCurrency2Frozen:\n      properties:\n        errorCode:\n          description: trade.currency2AccountId.frozen\n          example: trade.currency2AccountId.frozen\n          type: string\n        message:\n          description: Currency2 account ${trade.currency2AccountId} is frozen, unable to perform trade.\n          example: Currency2 account ${trade.currency2AccountId} is frozen, unable to perform trade.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OrderCurrency2CustomerDisabled:\n      properties:\n        errorCode:\n          description: trade.currency2AccountId.customer.disabled\n          example: trade.currency2AccountId.customer.disabled\n          type: string\n        message:\n          description: Currency2 account's customer ${currency2Account.customerId} is disabled, unable to perform exchange trade.\n          example: Currency2 account's customer ${currency2Account.customerId} is disabled, unable to perform exchange trade.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OrderCurrency1Pair:\n      properties:\n        errorCode:\n          description: trade.currency1.pair\n          example: trade.currency1.pair\n          type: string\n        message:\n          description: Incompatible currencies for currency1 account ${trade.currency1AccountId} and trading pair.\n          example: Incompatible currencies for currency1 account ${trade.currency1AccountId} and trading pair.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OrderCurrency2Pair:\n      properties:\n        errorCode:\n          description: trade.currency2.pair\n          example: trade.currency2.pair\n          type: string\n        message:\n          description: Incompatible currencies for currency2 account ${trade.currency2AccountId} and trading pair.\n          example: Incompatible currencies for currency2 account ${trade.currency2AccountId} and trading pair.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OrderCurrency1Balance:\n      properties:\n        errorCode:\n          description: trade.currency1.balance\n          example: trade.currency1.balance\n          type: string\n        message:\n          description: Insufficient balance on currency1 account ${trade.currency1AccountId}.\n          example: Insufficient balance on currency1 account ${trade.currency1AccountId}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error403OrderCurrency2Balance:\n      properties:\n        errorCode:\n          description: trade.currency2.balance\n          example: trade.currency2.balance\n          type: string\n        message:\n          description: Insufficient balance on currency2 account ${trade.currency2AccountId}.\n          example: Insufficient balance on currency2 account ${trade.currency2AccountId}.\n          type: string\n        statusCode:\n          description: \"403\"\n          example: 403\n          type: number\n      required:\n        - errorCode\n        - message\n        - statusCode\n      type: object\n    Error500:\n      properties:\n        message:\n          example: Internal server error\n          description: Internal server error\n          type: string\n        statusCode:\n          example: 500\n          description: \"500\"\n          type: number\n      required:\n        - statusCode\n        - message\n      type: object\n    Error403:\n      properties:\n        message:\n          example: Forbidden\n          description: Forbidden\n          type: string\n        statusCode:\n          example: 403\n          description: \"403\"\n          type: number\n      required:\n        - statusCode\n        - message\n      type: object\n    Error401:\n      properties:\n        message:\n          example: Unauthorized\n          description: Unauthorized\n          type: string\n        statusCode:\n          example: 401\n          description: \"401\"\n          type: number\n      required:\n        - statusCode\n        - message\n      type: object\n    TransactionHashKMS:\n      type: object\n      properties:\n        txId:\n          description: TX hash of successful transaction.\n          example: c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9\n          type: string\n        failed:\n          description: In case of the transaction was broadcast to the blockchain, but it was not possible to complete Tatum KMS signature, reponse is marked as failed and must be marked manually.\n          example: false\n          type: boolean\n      required:\n        - txId\n    SignatureId:\n      type: object\n      properties:\n        signatureId:\n          format: uuid\n          description: ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.\n          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6\n          type: string\n      required:\n        - signatureId\n    BroadcastKMS:\n      properties:\n        txData:\n          description: Raw signed transaction to be published to network.\n          example: 62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D\n          maxLength: 500000\n          minLength: 1\n          type: string\n        signatureId:\n          description: ID of prepared payment template to sign. Required only, when broadcasting transaction signed by Tatum KMS.\n          format: uuid\n          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6\n          type: string\n          minLength: 36\n          maxLength: 36\n      required:\n        - txData\n      type: object\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /v3/algorand/broadcast: post: operation \"AlgoandBroadcast\": security: unknown security schema \"X-Api-Key\""
}