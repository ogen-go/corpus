{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/NCATS-Tangerine/translator-api-registry"
		},
		"file": {
			"name": "smartapi.yaml",
			"size": 0,
			"path": "rhea/smartapi.yaml",
			"byteSize": 19801,
			"content": "openapi: 3.0.3\ninfo:\n  contact:\n    email: help@biothings.io\n    name: BioThings Team\n    x-id: https://github.com/biothings\n    x-role: responsible developers\n  description: Documentation of the BioThings Rhea query web services.\n  termsOfService: https://biothings.io/about\n  title: BioThings Rhea API\n  version: '121'\n  x-translator:\n    infores: \"infores:biothings-rhea\"\n    component: KP\n    team:\n      - Service Provider\n    biolink-version: \"2.2.13\"\nservers:\n- description: Encrypted Production server\n  url: https://biothings.ncats.io/rhea\n  x-maturity: production\n- description: Production server\n  url: http://biothings.ncats.io/rhea\n  x-maturity: production\ntags:\n- name: chemical\n- name: reaction\n- name: query\n- name: translator\n- name: biothings\npaths:\n  \"/reaction/{id}\":\n    get:\n      parameters:\n      - name: id\n        in: path\n        required: true\n        example: \"RHEA:14669\"\n        ## has prefix, UMLS ID for the supplement\n        schema:\n          type: string\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      responses:\n        '200':\n          description: \"Success\"\n      #     content:\n      #       application/json:\n      #         schema:\n      #           $ref: '#/components/schemas/umls'\n      #   '404':\n      #     description: A response indicating an unknown umls ID\n      # summary: Retrieve umls objects based on ID\n      tags:\n      - reaction\n  \"/reaction\":\n    post:\n      parameters:\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      requestBody:\n        content:\n          application/json:\n            example:\n            ## has prefix, Rhea ID for the reaction\n              ids:\n              - \"RHEA:14669\"\n              - \"RHEA:64904\"\n            schema:\n              type: object\n              properties:\n                ids:\n                  description: 'multiple Rhea IDs for reactions separated by comma. Note that\n                    currently we only take the input ids up to 1000 maximum, the rest\n                    will be omitted. Type: string (list). Max: 1000.'\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '200':\n          description: \"Success\"\n      tags:\n      - reaction\n  \"/metadata\":\n    get:\n      parameters:\n      - \"$ref\": \"#/components/parameters/format\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/dev\"\n      responses:\n        '200':\n          description: Success\n      summary: Get metadata about the data available from the API\n      tags:\n      - metadata\n  \"/metadata/fields\":\n    get:\n      parameters:\n      - \"$ref\": \"#/components/parameters/format\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/search\"\n      - \"$ref\": \"#/components/parameters/prefix\"\n      responses:\n        '200':\n          description: Success\n      summary: Get metadata about the data fields available from a record\n      tags:\n      - metadata\n  \"/query\":\n    get:\n      parameters:\n      - name: q\n        description: Query string.\n        in: query\n        required: true\n        example: side_l.chebi_id:\"CHEBI:58738\"\n        schema:\n          type: string\n      - \"$ref\": \"#/components/parameters/aggs\"\n      - \"$ref\": \"#/components/parameters/facet_size\"\n      - \"$ref\": \"#/components/parameters/from\"\n      - \"$ref\": \"#/components/parameters/userquery\"\n      - \"$ref\": \"#/components/parameters/sort\"\n      - \"$ref\": \"#/components/parameters/explain\"\n      - \"$ref\": \"#/components/parameters/fetch_all\"\n      - \"$ref\": \"#/components/parameters/scroll_id\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      responses:\n        '200':\n          description: Success\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/QueryResult\"\n      #   '400':\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/ErrorResult\"\n      #     description: A response indicating an improperly formatted query\n      # summary: Make queries and return matching gene hits. Supports JSONP and CORS\n      #   as well.\n      tags:\n      - query\n    post:\n      parameters:\n      - name: q\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: scopes\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n            default:\n            - _id\n      - \"$ref\": \"#/components/parameters/from\"\n      - \"$ref\": \"#/components/parameters/sort\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      requestBody:\n        content:\n          application/json:\n            example:\n              q:\n              - \"CHEBI:58738\"\n              - \"CHEBI:37565\"\n              scopes:\n              - \"side_l.chebi_id\"\n            schema:\n              type: object\n              properties:\n                q:\n                  type: array\n                  items:\n                    type: string\n                scopes:\n                  type: array\n                  items:\n                    type: string\n                from:\n                  type: integer\n                sort:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '200':\n          description: Success\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/QueryPOSTResult\"\n      #   '400':\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/ErrorResult\"\n      #     description: A response indicating an improperly formatted query\n      summary: Make batch queries and return matching hits\n      x-bte-kgs-operations:\n      - $ref: '#/components/x-bte-kgs-operations/reaction-to-chem-1'\n      - $ref: '#/components/x-bte-kgs-operations/reaction-to-chem-2'\n      - $ref: '#/components/x-bte-kgs-operations/reaction-to-chem-3'\n      - $ref: '#/components/x-bte-kgs-operations/reaction-to-chem-4'\n      - $ref: '#/components/x-bte-kgs-operations/chem-to-reaction'\n      tags:\n      - query\ncomponents:\n  parameters:\n    _sorted:\n      name: _sorted\n      in: query\n      required: false\n      schema:\n        type: boolean\n        default: true\n    _source:\n      name: _source\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    aggs:\n      name: aggs\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    allow_null:\n      name: allow_null\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    always_list:\n      name: always_list\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    dev:\n      name: dev\n      in: query\n      required: false\n      schema:\n        type: boolean\n    dotfield:\n      name: dotfield\n      in: query\n      required: false\n      schema:\n        type: boolean\n    explain:\n      name: explain\n      in: query\n      required: false\n      schema:\n        type: boolean\n    facet_size:\n      name: facet_size\n      in: query\n      required: false\n      schema:\n        type: integer\n        default: 10\n    fetch_all:\n      name: fetch_all\n      in: query\n      required: false\n      schema:\n        type: boolean\n    format:\n      name: format\n      description: 'controls output format of server response, currently supports:\n        \"json\", \"jsonld\", \"html\". Type: string. Default: json.'\n      in: query\n      required: false\n      schema:\n        type: string\n        default: json\n    from:\n      name: from\n      in: query\n      required: false\n      schema:\n        type: integer\n    prefix:\n      name: prefix\n      in: query\n      required: false\n      schema:\n        type: string\n    raw:\n      name: raw\n      in: query\n      required: false\n      schema:\n        type: boolean\n    rawquery:\n      name: rawquery\n      in: query\n      required: false\n      schema:\n        type: boolean\n    scroll_id:\n      name: scroll_id\n      in: query\n      required: false\n      schema:\n        type: string\n    search:\n      name: search\n      in: query\n      required: false\n      schema:\n        type: string\n    size:\n      name: size\n      description: \"default: 10 objects/records in response\"\n      in: query\n      required: false\n      schema:\n        type: integer\n    sort:\n      name: sort\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    userquery:\n      name: userquery\n      in: query\n      required: false\n      schema:\n        type: string\n  # schemas:\n  #   umls:\n  #     properties:\n  #       _id:\n  #         type: string\n  #     required:\n  #     - _id\n  #     type: object\n  #   ErrorResult:\n  #     properties:\n  #       message:\n  #         type: string\n  #       success:\n  #         type: boolean\n  #     type: object\n  #   QueryPOSTResult:\n  #     items:\n  #       allOf:\n  #       - $ref: '#/components/schemas/umls'\n  #       - properties:\n  #           _score:\n  #             format: float\n  #             type: number\n  #           query:\n  #             type: string\n  #         type: object\n  #     type: array\n  #   QueryResult:\n  #     properties:\n  #       hits:\n  #         items:\n  #           $ref: '#/components/schemas/umls'\n  #         type: array\n  #       max_score:\n  #         format: float\n  #         type: number\n  #       took:\n  #         type: integer\n  #       total:\n  #         type: integer\n  #     type: object\n  #   int64_or_array:\n  #     oneOf:\n  #     - items:\n  #         format: int64\n  #         type: integer\n  #       type: array\n  #     - format: int64\n  #       type: integer\n  #   string_or_array:\n  #     oneOf:\n  #     - items:\n  #         type: string\n  #       type: array\n  #     - type: string\n  x-bte-kgs-operations:\n  ## source: https://www.rhea-db.org/\n  ## Rhea Reaction IDs\n  ## - main IDs in _id field, children IDs in children_rheas field (both have prefix (RHEA))\n  ## CHEBI chemical IDs\n  ## - side_l.chebi_id\n  ## - side_r.chebi_id\n  ## - side_l.reactive_parts.chebi_id\n  ## - side_r.reactive_parts.chebi_id\n  ## Relationships: Maybe we could do chemical (occurs in same reaction as) other chemical?\n  ## - Reaction -\u003e chemical (has_participant)   \n  ## - Chemical -\u003e Reaction (participates_in)\n    reaction-to-chem-1:\n    - supportBatch: true\n      useTemplating: true ## flag to say templating is being used below\n      inputs:\n      - id: RHEA\n        semantic: MolecularActivity\n      requestBody:\n        body:\n          ## API data has prefix (RHEA)\n          ## joinSafe is only needed if the delimiter isn't a comma\n          q: \"{{ queryInputs }}\"\n          scopes: \"_id,children_rheas\"\n      outputs:\n      - id: CHEBI\n        semantic: SmallMolecule\n      parameters:\n        ## has prefix on output id (CHEBI)\n        ## citations has prefix (PMID)\n        ## skipping side_l specific properties because they'll then get pulled out of their specific chem objects\n        fields: \u003e-\n          side_l.chebi_id,\n          citations,\n          equation, \n          is_transport,\n          status\n        size: 1000  ## size limit; just in case\n      predicate: has_participant\n      source: \"infores:rhea\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/side_l-object'\n      # testExamples:\n      #   - qInput: \"RHEA:21429\"       ## child-id for (R)-3-sulfolactate = H(+) + pyruvate + sulfite\n      #     oneOutput: \"CHEBI:58738\"   ## (R)-3-sulfolactate\n    reaction-to-chem-2:\n    - supportBatch: true\n      useTemplating: true ## flag to say templating is being used below\n      inputs:\n      - id: RHEA\n        semantic: MolecularActivity\n      requestBody:\n        body:\n          ## API data has prefix (RHEA)\n          ## joinSafe is only needed if the delimiter isn't a comma\n          q: \"{{ queryInputs }}\"\n          scopes: \"_id,children_rheas\"\n      outputs:\n      - id: CHEBI\n        semantic: SmallMolecule\n      parameters:\n        ## has prefix on output id (CHEBI)\n        ## citations has prefix (PMID)\n        ## skipping side_r specific properties because they'll then get pulled out of their specific chem objects\n        fields: \u003e-\n          side_r.chebi_id,\n          citations,\n          equation, \n          is_transport,\n          status\n        size: 1000  ## size limit; just in case\n      predicate: has_participant\n      source: \"infores:rhea\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/side_r-object'\n      # testExamples:\n      #   - qInput: \"RHEA:15533\"       ## main-id for (R)-3-sulfolactate + NAD(+) = 3-sulfopyruvate + H(+) + NADH\n      #     oneOutput: \"CHEBI:57940\"   ## 3-sulfopyruvate\n    reaction-to-chem-3:\n    - supportBatch: true\n      useTemplating: true ## flag to say templating is being used below\n      inputs:\n      - id: RHEA\n        semantic: MolecularActivity\n      requestBody:\n        body:\n          ## API data has prefix (RHEA)\n          ## joinSafe is only needed if the delimiter isn't a comma\n          q: \"{{ queryInputs }}\"\n          scopes: \"_id,children_rheas\"\n      outputs:\n      - id: CHEBI\n        semantic: SmallMolecule\n      parameters:\n        ## has prefix on output id (CHEBI)\n        ## citations has prefix (PMID)\n        ## skipping side* specific properties because they'll then get pulled out of their specific chem objects\n        fields: \u003e-\n          side_l.reactive_parts.chebi_id,\n          citations,\n          equation, \n          is_transport,\n          status\n        size: 1000  ## size limit; just in case\n      predicate: has_participant\n      source: \"infores:rhea\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/side_l_reactive-object'\n      # testExamples:\n      #   - qInput: \"RHEA:10024\"       ## main-id for L-lysyl-[histone] + S-adenosyl-L-methionine = H(+) + N(6)-methyl-L-lysyl-[histone] + S-adenosyl-L-homocysteine\n      #     oneOutput: \"CHEBI:29969\"   ## L-lysine residue\n    reaction-to-chem-4:\n    - supportBatch: true\n      useTemplating: true ## flag to say templating is being used below\n      inputs:\n      - id: RHEA\n        semantic: MolecularActivity\n      requestBody:\n        body:\n          ## API data has prefix (RHEA)\n          ## joinSafe is only needed if the delimiter isn't a comma\n          q: \"{{ queryInputs }}\"\n          scopes: \"_id,children_rheas\"\n      outputs:\n      - id: CHEBI\n        semantic: SmallMolecule\n      parameters:\n        ## has prefix on output id (CHEBI)\n        ## citations has prefix (PMID)\n        ## skipping side* specific properties because they'll then get pulled out of their specific chem objects\n        fields: \u003e-\n          side_r.reactive_parts.chebi_id,\n          citations,\n          equation, \n          is_transport,\n          status\n        size: 1000  ## size limit; just in case\n      predicate: has_participant\n      source: \"infores:rhea\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/side_r_reactive-object'\n      # testExamples:\n      #   - qInput: \"RHEA:10032\"       ## main-id for [protein]-C-terminal-L-glutamine + H2O = [protein]-C-terminal-L-glutamate + NH4(+)\n      #     oneOutput: \"CHEBI:88115\"   ## C-terminal L-glutaminyl residue\n    ## going to try doing chemicals -\u003e main RHEA ID first. \n    ##   If we need the children rheas, we'll just write another copy of the operation below\n    chem-to-reaction:\n    - supportBatch: true\n      useTemplating: true ## flag to say templating is being used below\n      inputs:\n      - id: CHEBI\n        semantic: SmallMolecule\n      requestBody:\n        body:\n          ## API data has prefix (CHEBI)\n          ## joinSafe is only needed if the delimiter isn't a comma\n          q: \"{{ queryInputs }}\"\n          scopes: \u003e-\n            side_l.chebi_id,\n            side_r.chebi_id,\n            side_l.reactive_parts.chebi_id,\n            side_r.reactive_parts.chebi_id\n      outputs:\n      - id: RHEA\n        semantic: MolecularActivity\n      parameters:\n        ## has prefix on output id (RHEA)\n        ## citations has prefix (PMID)\n        ## skipping side* specific properties because they'll then get pulled out of their specific chem objects\n        fields: \u003e-\n          _id,\n          citations,\n          equation, \n          is_transport,\n          status\n        size: 1000  ## size limit; just in case\n      predicate: participates_in\n      source: \"infores:rhea\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/reaction-object'\n      # testExamples:\n      #   - qInput: \"CHEBI:88115\"   ## C-terminal L-glutaminyl residue\n      #     oneOutput: \"RHEA:10032\"       ## main-id for [protein]-C-terminal-L-glutamine + H2O = [protein]-C-terminal-L-glutamate + NH4(+)\n  x-bte-response-mapping:\n    side_l-object:\n      CHEBI: side_l.chebi_id     ## has CHEBI prefix\n      pubmed: citations          ## has PMID prefix\n      equation: equation\n      is_transport: is_transport\n      reaction_status: status\n    side_r-object:\n      CHEBI: side_r.chebi_id     ## has CHEBI prefix\n      pubmed: citations          ## has PMID prefix\n      equation: equation\n      is_transport: is_transport\n      reaction_status: status\n    side_l_reactive-object:\n      CHEBI: side_l.reactive_parts.chebi_id     ## has CHEBI prefix\n      pubmed: citations                         ## has PMID prefix\n      equation: equation\n      is_transport: is_transport\n      reaction_status: status\n    side_r_reactive-object:\n      CHEBI: side_r.reactive_parts.chebi_id     ## has CHEBI prefix\n      pubmed: citations                         ## has PMID prefix\n      equation: equation\n      is_transport: is_transport\n      reaction_status: status\n    reaction-object:\n      RHEA: _id     ## has RHEA prefix\n      pubmed: citations          ## has PMID prefix\n      equation: equation\n      is_transport: is_transport\n      reaction_status: status\n",
			"canonicalURL": "/github.com/NCATS-Tangerine/translator-api-registry@0395669dfee9685031f6f5fdbe5d3ac383959bed/-/blob/rhea/smartapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/NCATS-Tangerine/translator-api-registry/blob/0395669dfee9685031f6f5fdbe5d3ac383959bed/rhea/smartapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/query\": post: parameters: parse parameter \"scopes\": schema: parse schema: at 1:7731: parse default: expected type \"string\", got \"array\""
}