{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CartoDB/Windshaft-cartodb"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "docs/reference/swagger.yaml",
			"byteSize": 49157,
			"content": "openapi: 3.0.0\ninfo:\n  title: Maps API\n  description: >\n    # Introduction\n\n    The CARTO Maps API allows you to generate maps based on data hosted in your\n    CARTO account  and apply custom SQL and CartoCSS to the data. The API\n    generates a XYZ-based URL to fetch  Web Mercator projected tiles using web\n    clients such as Leaflet, Google Maps, or OpenLayers.\n\n    # Authorization\n\n    In order to access Maps API you must provide an API key. The CARTO\n    Authorization guide explains how these keys are sent (TLDR: _HTTP basic\n    auth_ or _query string param_ with the API key token). Depending on the\n    permissions granted to the provided API key, the request will be authorized\n    or not.\n  version: '1'\n  contact:\n    name: Have you found an error? Github issues\n    url: 'https://github.com/CartoDB/Windshaft-cartodb/issues'\nservers:\n  - url: 'https://{user}.{domain}/api/v1'\n    description: Production server (uses live data)\n    variables:\n      domain:\n        default: carto.com\n        description: 'If on premise, change it to your domain'\n      user:\n        default: username\n        description: Your username\ntags:\n  - name: Anonymous Maps\n    description: Anonymous Maps allow you to instantiate a map given SQL and CartoCSS\n    externalDocs:\n      url: 'https://carto.com/developers/maps-api/guides/anonymous-maps/'\n  - name: Named Maps\n    description: Instantiate a map from private data, and users without an API Key can view your Named Map.\n    externalDocs:\n      url: 'https://carto.com/developers/maps-api/guides/named-maps/'\n  - name: Static Maps\n    description: >\n      Create static images of parts of maps and thumbnails for use in web design, graphic design, print, field work, and many other applications that require standard image formats. Begin by instantiating either a Named or Anonymous Map using the layergroupid token to generate static images.\n    externalDocs:\n      url: 'https://carto.com/developers/maps-api/guides/static-maps-API/'\npaths:\n  /map:\n    post:\n      summary: Create map\n      description: |\n      tags:\n        - Anonymous Maps\n      operationId: instantiateAnonymousMap\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MapConfig'\n            example:\n              version: 1.3.0\n              layers:\n                - type: mapnik\n                  options:\n                    cartocss_version: 2.1.1\n                    cartocss: '#layer { polygon-fill: #FFF; }'\n                    sql: select * from european_countries_e\n                    interactivity:\n                      - cartodb_id\n                      - iso3\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MapResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            # body.json\n            {\n              \"version\": \"1.3.0\",\n              \"layers\": [\n                {\n                  \"type\": \"mapnik\",\n                  \"options\": {\n                    \"cartocss_version\": \"2.1.1\",\n                    \"cartocss\": \"#layer { polygon-fill: #FFF; }\",\n                    \"sql\": \"select * from european_countries_e\",\n                    \"interactivity\": [\n                      \"cartodb_id\",\n                      \"iso3\"\n                    ]\n                  }\n                }\n              ]\n            }\n\n            curl -X POST -H \"Content-Type: application/json\" -d @body.json \"https://username.carto.com/api/v2/sql\"\n  '/map/{layergroupid}/{z}/{x}/{y}.png':\n    get:\n      parameters:\n        - $ref: '#/components/parameters/layergroupId'\n        - $ref: '#/components/parameters/z'\n        - $ref: '#/components/parameters/x'\n        - $ref: '#/components/parameters/y'\n      summary: Get tile\n      description: |\n        Get a tile\n      tags:\n        - Anonymous Maps\n      operationId: getTile\n      responses:\n        '200':\n          description: Ok\n          content:\n            image/png:\n              schema:\n                type: string\n                format: binary\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: >\n            curl -X GET \\\n\n            https://username.carto.com/api/v1/map/c01a54877c62831bb51720263f91fb33:0/2/3/4.png\n  '/map/{layergroupid}/{layers_filter}/{z}/{x}/{y}.png':\n    get:\n      parameters:\n        - $ref: '#/components/parameters/layergroupId'\n        - $ref: '#/components/parameters/layersFilter'\n        - $ref: '#/components/parameters/z'\n        - $ref: '#/components/parameters/x'\n        - $ref: '#/components/parameters/y'\n      summary: Get tile - Layer filter\n      description: |\n      tags:\n        - Anonymous Maps\n      operationId: getTileWithLayerFilter\n      responses:\n        '200':\n          description: Ok\n          content:\n            image/png:\n              schema:\n                type: string\n                format: binary\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: >\n            curl -X GET \\\n\n            https://username.carto.com/api/v1/map/c01a54877c62831bb51720263f91fb33:0/2/3/4.png\n  '/map/{layergroupid}/{layer}/{z}/{x}/{y}.torque.json':\n    get:\n      parameters:\n        - $ref: '#/components/parameters/layergroupId'\n        - $ref: '#/components/parameters/layerIndex'\n        - $ref: '#/components/parameters/z'\n        - $ref: '#/components/parameters/x'\n        - $ref: '#/components/parameters/y'\n      summary: Get Torque layer\n      description: |\n        If the MapConfig had a Torque layer it could be possible to request it\n      tags:\n        - Anonymous Maps\n      operationId: getTorqueLayer\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: >\n            curl -X GET \\\n\n            https://username.carto.com/api/v1/map/c01a54877c62831bb51720263f91fb33:0/2/3/4.png\n  '/map/named':\n    post:\n      summary: Upload template\n      description: |\n        Upload template\n      tags:\n        - Named Maps\n      operationId: instantiateAnonymousMap\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Template'\n            example:\n              version: 0.0.1\n              name: 'template_name'\n              auth:\n                method: 'token'\n                valid_tokens:\n                  - 'auth_token1'\n                  - 'auth_token2'\n              placeholders:\n                color:\n                  type: 'css_color'\n                  default: 'red'\n                cartodb_id:\n                  type: 'number'\n                  default: 1\n              layergroup:\n                version: 1.7.0\n                layers:\n                  - type: mapnik\n                    options:\n                      cartocss_version: 2.1.1\n                      cartocss: '#layer { polygon-fill: #FFF; }'\n                      sql: select * from european_countries_e\n                      interactivity:\n                        - cartodb_id\n                        - iso3\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NamedMapResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - ApiKeyQueryParam: []\n        - ApiKeyHTTPBasicAuth: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            # body.json\n            {\n              \"version\": \"0.0.1\",\n              \"name\": \"template_name\",\n              \"auth\": {\n                \"method\": \"token\",\n                \"valid_tokens\": [\n                  \"auth_token1\",\n                  \"auth_token2\"\n                ]\n              },\n              \"placeholders\": {\n                \"color\": {\n                  \"type\": \"css_color\",\n                  \"default\": \"red\"\n                },\n                \"cartodb_id\": {\n                  \"type\": \"number\",\n                  \"default\": 1\n                }\n              },\n              \"layergroup\": {\n                \"version\": \"1.7.0\",\n                \"layers\": [\n                  {\n                    \"type\": \"cartodb\",\n                    \"options\": {\n                      \"cartocss_version\": \"2.3.0\",\n                      \"cartocss\": \"#layer { polygon-fill: <%= color %>; }\",\n                      \"sql\": \"select * from european_countries_e WHERE cartodb_id = <%= cartodb_id %>\"\n                    }\n                  }\n                ]\n              },\n              \"view\": {\n                \"zoom\": 4,\n                \"center\": {\n                  \"lng\": 0,\n                  \"lat\": 0\n                },\n                \"bounds\": {\n                  \"west\": -45,\n                  \"south\": -45,\n                  \"east\": 45,\n                  \"north\": 45\n                },\n                \"preview_layers\": {\n                  \"0\": true,\n                  \"layer1\": false\n                }\n              }\n            }\n\n            curl -X POST -H \"Content-Type: application/json\" -d @body.json \"https://{username}.carto.com/api/v1/map/named?api_key={api_key}\"\n    get:\n      summary: List user's templates\n      description: |\n        List user's templates\n      tags:\n        - Named Maps\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NamedMapResponseList'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - ApiKeyQueryParam: []\n        - ApiKeyHTTPBasicAuth: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X GET 'https://{username}.carto.com/api/v1/map/named?api_key={api_key}'\n  '/map/named/{template_name}':\n    get:\n      summary: Get template definition\n      description: Get the definition of a requested template\n      tags:\n        - Named Maps\n      parameters:\n        - $ref: '#/components/parameters/templateName'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Template'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - ApiKeyQueryParam: []\n        - ApiKeyHTTPBasicAuth: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X GET 'https://{username}.carto.com/api/v1/map/named/{template_name}?api_key={api_key}'\n    put:\n      summary: Update template definition\n      description: Update the definition of the template\n      tags:\n        - Named Maps\n      parameters:\n        - $ref: '#/components/parameters/templateName'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NamedMapResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - ApiKeyQueryParam: []\n        - ApiKeyHTTPBasicAuth: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            # body.json\n            {\n              \"version\": \"0.0.1\",\n              \"name\": \"template_name\",\n              \"auth\": {\n                \"method\": \"token\",\n                \"valid_tokens\": [\n                  \"auth_token1\",\n                  \"auth_token2\"\n                ]\n              },\n              \"placeholders\": {\n                \"color\": {\n                  \"type\": \"css_color\",\n                  \"default\": \"red\"\n                },\n                \"cartodb_id\": {\n                  \"type\": \"number\",\n                  \"default\": 1\n                }\n              },\n              \"layergroup\": {\n                \"version\": \"1.7.0\",\n                \"layers\": [\n                  {\n                    \"type\": \"cartodb\",\n                    \"options\": {\n                      \"cartocss_version\": \"2.3.0\",\n                      \"cartocss\": \"#layer { polygon-fill: <%= color %>; }\",\n                      \"sql\": \"select * from european_countries_e WHERE cartodb_id = <%= cartodb_id %>\"\n                    }\n                  }\n                ]\n              },\n              \"view\": {\n                \"zoom\": 4,\n                \"center\": {\n                  \"lng\": 0,\n                  \"lat\": 0\n                },\n                \"bounds\": {\n                  \"west\": -45,\n                  \"south\": -45,\n                  \"east\": 45,\n                  \"north\": 45\n                },\n                \"preview_layers\": {\n                  \"0\": true,\n                  \"layer1\": false\n                }\n              }\n            }\n\n            curl -X PUT \\\n              -H 'Content-Type: application/json' \\\n              -d @body.json\n              'https://{username}.carto.com/api/v1/map/named/{template_name}?api_key={api_key}'\n    delete:\n      summary: Delete template\n      description: Deletes the specified template map from the server, and disables any previously initialized versions of the map.\n      tags:\n        - Named Maps\n      parameters:\n        - $ref: '#/components/parameters/templateName'\n      responses:\n        '204':\n          description: No Content\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - ApiKeyQueryParam: []\n        - ApiKeyHTTPBasicAuth: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X DELETE 'https://{username}.carto.com/api/v1/map/named/{template_name}?api_key={api_key}'\n    post:\n      summary: Instantiate a Named Map\n      description: Instantiating a Named Map allows you to fetch the map tiles. The result is an Anonymous Map\n      tags:\n        - Named Maps\n      parameters:\n        - $ref: '#/components/parameters/templateName'\n        - in: query\n          name: auth_token\n          description: >\n            `\"token\"` or `\"open\"` (\"open\" is the default if not specified. Use \"token\" to password-protect your map)\n          schema:\n            type: string\n      operationId: instantiateNamedMap\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TemplateParams'\n            example:\n              color: '#ff0000'\n              cartodb_id: 3\n      responses:\n        '200':\n          description: Ok. You can then use the layergroupid for fetching tiles and grids as you would normally\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MapResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      x-code-samples:\n        - lang: Curl\n          source: |\n            # body.json\n            {\n              \"color\": \"#ff0000\",\n              \"cartodb_id\": 3\n            }\n\n            curl -X POST \\\n              -H 'Content-Type: application/json' \\\n              -d @body.json\n              'https://{username}.carto.com/api/v1/map/named/{template_name}?auth_token={auth_token}'\n  '/map/named/{template_name}/jsonp':\n    get:\n      summary: Instantiate a Named Map using JSONP\n      description: Instantiating a Named Map allows you to fetch the map tiles. The result is an Anonymous Map\n      tags:\n        - Named Maps\n      parameters:\n        - $ref: '#/components/parameters/templateName'\n        - in: query\n          name: auth_token\n          description: >\n            `\"token\"` or `\"open\"` (\"open\" is the default if not specified. Use \"token\" to password-protect your map)\n          schema:\n            type: string\n        - in: query\n          name: config\n          description: >\n            Encoded JSON with the params (variables) needed for the Named Map\n          schema:\n            type: string\n        - in: query\n          name: callback\n          description: >\n            JSON callback name\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Ok. You can then use the layergroupid for fetching tiles and grids as you would normally\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MapResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X GET \\\n            'https://{username}.carto.com/api/v1/map/named/{template_name}/jsonp?auth_token={auth_token}&callback=callback&config={\"color\":  \"#ff0000\", \"cartodb_id\": 3}'\n  '/map/static/center/{layergroupid}/{z}/{lat}/{lng}/{width}/{height}.{format}':\n    get:\n      parameters:\n        - $ref: '#/components/parameters/layergroupId'\n        - $ref: '#/components/parameters/z'\n        - $ref: '#/components/parameters/lat'\n        - $ref: '#/components/parameters/lng'\n        - $ref: '#/components/parameters/width'\n        - $ref: '#/components/parameters/height'\n        - $ref: '#/components/parameters/format'\n        - $ref: '#/components/parameters/layersQueryParam'\n      summary: Zoom + center\n      description: |\n        Get static image by defining both the zoom level and geographic center (longitude & latitude)\n      tags:\n        - Static Maps\n      operationId: getStaticZoomCenter\n      responses:\n        '200':\n          description: Ok\n          content:\n            image/png:\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: >\n            curl -X GET \\\n            https://{username}.carto.com/api/v1/map/static/center/{layergroupid}/{z}/{lat}/{lng}/{width}/{height}.{format}?layer=all\n  '/map/static/bbox/{layergroupid}/{west},{south},{east},{north}/{width}/{height}.{format}':\n    get:\n      parameters:\n        - $ref: '#/components/parameters/layergroupId'\n        - $ref: '#/components/parameters/west'\n        - $ref: '#/components/parameters/south'\n        - $ref: '#/components/parameters/east'\n        - $ref: '#/components/parameters/north'\n        - $ref: '#/components/parameters/width'\n        - $ref: '#/components/parameters/height'\n        - $ref: '#/components/parameters/format'\n        - $ref: '#/components/parameters/layersQueryParam'\n      summary: Bounding Box\n      description: |\n        Get static image by defining bounding box in WGS 84 (EPSG:4326), comma separated values\n      tags:\n        - Static Maps\n      operationId: getStaticBoundingBox\n      responses:\n        '200':\n          description: Ok\n          content:\n            image/png:\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: >\n            curl -X GET \\\n            https://{username}.carto.com/api/map/static/bbox/{layergroupid}/{west},{south},{east},{north}/{width}/{height}.{format}?layer=all\n  '/map/static/named/{name}/{width}/{height}.{format}':\n    get:\n      parameters:\n        - $ref: '#/components/parameters/name'\n        - $ref: '#/components/parameters/width'\n        - $ref: '#/components/parameters/height'\n        - $ref: '#/components/parameters/format'\n      summary: Named map\n      description: |\n        Get the static image of a Named Map by defining width, height and, format. It will use the default vaules defined in the template\n      tags:\n        - Static Maps\n      operationId: getStaticNamedMap\n      responses:\n        '200':\n          description: Ok\n          content:\n            image/png:\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: >\n            curl -X GET \\\n            https://{username}.carto.com/api/map/static/named/{name}/{width}/{height}.{format}\ncomponents:\n  schemas:\n    MapConfig:\n      type: object\n      properties:\n        version:\n          type: string\n          description: Spec version to use for validation.\n          default: 1.0.0\n        extent:\n          type: string\n          description: |\n            The default map extent for the map projection.\n            **Note:** Currently, only webmercator is supported.\n        srid:\n          type: string\n          description: The spatial reference identifier for the map.\n          default: 3857\n        maxzoom:\n          type: string\n          description: >-\n            The maximum zoom level for your map. A request beyond the defined\n            maxzoom returns a 404 error.\n          default: undefined (infinite)\n        minzoom:\n          type: string\n          description: >-\n            The minimum zoom level for your map. A request beyond the defined\n            minzoom returns a 404 error.\n          default: 0\n        layers:\n          type: array\n          items:\n            $ref: '#/components/schemas/Layer'\n      required:\n        - layers\n    Layer:\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/LayerType'\n        options:\n          oneOf:\n            - $ref: '#/components/schemas/LayerOptionsMapnik'\n            - $ref: '#/components/schemas/LayerOptionsTorque'\n            - $ref: '#/components/schemas/LayerOptionsHTTP'\n            - $ref: '#/components/schemas/LayerOptionsPlain'\n            - $ref: '#/components/schemas/LayerOptionsNamedMap'\n          description: Sets different options for each layer type.\n      required:\n        - type\n        - options\n    LayerOptionsMapnik:\n      type: object\n      title: Layer options Mapnik\n      description: >\n        If you are using Mapnik as a layer resource, the following\n        configurations are required in your MapConfig file.\n      properties:\n        sql:\n          type: string\n          description: >\n            The SQL request to the user database that will fetch the rendered\n            data.\n\n\n            **Tip:** The SQL request should include the following Mapnik layer\n            configurations:\n              * ```geom_column```\n              * ```interactivity```\n              * ```attributes```\n\n\n            **Note:** The SQL request may contain substitutions tokens, such as\n            ```!bbox!```, ```!pixel_width!``` and ```!pixel_height!```. It is\n            suggested to define the layergroup ```minzoom``` and ```extent```\n            variables to prevent errors.\n        cartocss:\n          $ref: '#/components/schemas/CartoCSS'\n        cartocss_version:\n          $ref: '#/components/schemas/CartoCSSVersion'\n        geom_column:\n          type: string\n          description: >\n            The name of the column containing the geometry.\n\n\n            *You **must** specify this value as part of the Mapnik layer\n            SQLconfiguration.\n          default: the_geom_webmercator\n        geom_type:\n          type: string\n          enum:\n            - geometry\n            - raster\n          description: >\n            Defines the type of column as either _geometry_ or _raster_.\n\n\n            **Note:** ```geom_type``` is not compatible with the Mapnik layer\n            interactivity option.\n          default: geometry\n        raster_band:\n          type: string\n          description: >\n            Defines the raster band (this option is only applicable when the\n            ```geom_type=raster```.\n\n\n            **Note:** If the default, or no value is specified, raster bands are\n            interpreted as either:\n              * grayscale (for single bands)\n              * RGB (for 3 bands)\n              * RGBA (for 4 bands).\n          default: 0\n        srid:\n          $ref: '#/components/schemas/Srid'\n        affected_tables:\n          $ref: '#/components/schemas/Affected_tables'\n        interactivity:\n          type: string\n          description: >\n            A string of values that contains the fields rendered inside\n            grid.json.  All the parameters should be exposed as a result of\n            executing the Mapnik layer SQL query.\n\n\n            **Note:** interactivity is not compatible with the Mapnik layer\n            ```geom_type``` option.  For example, you cannot create a layergroup\n            instance with a raster layer by defining the ```geom_type=raster```.\n\n            *You **must** specify this value as part of the Mapnik layer SQL\n            configuration.\n        attributes:\n          description: >\n            The id and column values returned by the Mapnik attributes service.\n            (This option is disabled if no configuration is defined).\n\n            *You **must** specify this value as part of the Mapnik layer SQL\n            configuration.\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                description: The key value used to fetch columns.\n              columns:\n                type: string\n                description: >-\n                  A string of values (columns) returned by the Mapnik attribute\n                  service.\n            required:\n              - id\n              - columns\n      required:\n        - sql\n        - cartocss\n        - cartocss_version\n    LayerOptionsTorque:\n      type: object\n      title: Layer options Torque\n      description: >\n        If you are using Torque as a layer resource, the following\n        configurations are required in your MapConfig file. For more details\n        about Torque layers in general, see the Torque API documentation.\n      properties:\n        sql:\n          type: string\n          description: >\n            The SQL request to the user database that will fetch the rendered\n            data.\n\n\n            **Tip:** The SQL request should include the following Mapnik layer\n            configurations:\n              * geom_column\n              * interactivity\n              * attributes\n        cartocss:\n          $ref: '#/components/schemas/CartoCSS'\n        cartocss_version:\n          $ref: '#/components/schemas/CartoCSSVersion'\n        step:\n          type: integer\n          description: >-\n            The number of animation steps to render when requesting a torque.png\n            tile.\n          default: 0\n        geom_column:\n          type: string\n          description: >\n            The name of the column containing the geometry.\n\n\n            *You **must** specify this value as part of the Torque layer\n            SQLconfiguration.\n          default: the_geom_webmercator\n        srid:\n          $ref: '#/components/schemas/Srid'\n        affected_tables:\n          $ref: '#/components/schemas/Affected_tables'\n        attributes:\n          description: >\n            The id and column values returned by the Torque attributes service.\n            (This option is disabled if no configuration is defined).\n\n            *You **must** specify this value as part of the Torque layer SQL\n            configuration.\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                description: The key value used to fetch columns.\n              columns:\n                type: string\n                description: >-\n                  A string of values (columns) returned by the Torque attribute\n                  service.\n            required:\n              - id\n              - columns\n      required:\n        - sql\n        - cartocss\n        - cartocss_version\n    LayerOptionsHTTP:\n      title: Layer options HTTP\n      type: object\n      properties:\n        urlTemplate:\n          type: string\n          description: >\n            URL from where the tile data is retrieved. _URLs must be included in\n            the configuration whitelist to be valid._\n\n\n            **Note:** It includes\n\n            * ```{z}``` as the zoom level\n\n            * ```{x} ```and ```{y}``` as the tile coordinates\n\n            * Optionally, the subdomain ```{s}``` may be included as part of the\n            ```urlTemplate``` configuration. Otherwise, you can define the\n            ```subdomains``` separately, as shown below.\n        subdomains:\n          type: string\n          description: >\n            A string of values used to retrieve tiles from different\n            subdomains.  The default value is [```a```, ```b```, ```c```] when\n            ```{s}``` is defined in the urlTemplate configuration. Otherwise,\n            the default value is ```[ ]```.\n\n\n            **Note:** The subdomains value will consistently replace the\n            ```{s}``` value defined in the ```urlTemplate```.\n        tms:\n          type: boolean\n          description: >\n            Specifies whether the tile is using Tile Map Service format\n\n\n            **Note:** If the value is ```true```, the TMS inverses the Y axis\n            numbering for tiles.\n          default: true\n        tms2:\n          type: boolean\n          description: >\n            Specifies whether the tile is using Tile Map Service format\n\n\n            **Note:** If the value is ```true```, the TMS inverses the Y axis\n            numbering for tiles.\n          default: false\n      required:\n        - urlTemplate\n    LayerOptionsPlain:\n      title: Layer options Plain\n      type: object\n      properties:\n        color:\n          type: string\n          description: >\n            Numbers that define the valid colors to include. Valid colors:\n\n              - A string value that includes CSS colors (i.e. ```blue```) or a hex color string (i.e. ```#0000ff```)\n\n              - An integer array of r,g,b values (i.e. ```[255,0,0]```)\n\n              - An integer array of r,g,b,a values (i.e. ```[255,0,0,128]```)\n\n\n\n            If **only** the ```color``` value is used for a plain layer, this\n            value is Required.\n\n\n            If **both** ```color``` and ```imageUrl``` are defined, only the\n            color value is used for the plain layer configuration.\n          default: null\n        imageUrl:\n          type: string\n          description: >\n            URL from where the image is retrieved\n\n            * If **only** the ```imageUrl``` value is used for a plain layer,\n            this value is Required.\n\n            * If ```color``` is defined, this ```imageUrl``` value is ignored.\n          default: null\n    LayerOptionsNamedMap:\n      type: object\n      properties:\n        name:\n          type: string\n          description: 'A string value, the name for the Named Map to use.'\n        config:\n          type: object\n          description: >-\n            An object, the replacement values for the Named Map’s template\n            placeholders.\n        auth_tokens:\n          type: array\n          items:\n            type: string\n            description: token\n          description: >-\n            Strings array, the authorized tokens in case the Named Map has auth\n            method set to ```token```.\n      required:\n        - name\n    CartoCSS:\n      type: string\n      title: cartocss\n      description: >\n        Specifies the CartoCSS style to render the tiles.\n\n\n        **Note:** The CartoCSS specification is dependent on the layer type. For\n        details, see mapnik-reference.json.\n    CartoCSSVersion:\n      type: string\n      title: cartocss version\n      description: >\n        A string value, specifying the CartoCSS style version of the CartoCSS\n        attribute.\n\n\n        **Note:** The CartoCSS version is specific to the layer type.\n    Srid:\n      type: string\n      description: The spatial reference identifier for the geometry column.\n      default: 3857\n    Affected_tables:\n      type: string\n      title: Affected Tables\n      description: >\n        A string of values containing the tables that the Mapnik layer SQL\n        configuration is using. This value is used if there is a problem\n        guessing what the affected tables are from the SQL configuration (i.e.\n        when using PL/SQL functions).\n    LayerType:\n      title: Layer type\n      type: string\n      enum:\n        - mapnik\n        - cartodb\n        - torque\n        - http\n        - plain\n        - named\n      description: |\n        A string value that defines the layer type:\n        * **mapnik** - rasterized tiles\n        * **cartodb** -  an alias for mapnik (for backward compatibility)\n        * **torque** - render vector tiles in torque format\n        * **http** - load tiles over HTTP\n        * **plain** - color or background image url\n        * **named** - use a Named Map as a layer\n    MapResponse:\n      type: object\n      properties:\n        layergroupid:\n          type: string\n        updated_at:\n          type: string\n          format: date-time\n        metadata:\n          type: object\n          properties:\n            layers:\n              type: array\n              items:\n                type: object\n                properties:\n                  type:\n                    $ref: '#/components/schemas/LayerType'\n                  meta:\n                    type: object\n        cdn_url:\n          type: object\n          properties:\n            http:\n              type: string\n            https:\n              type: string\n    Template:\n      type: object\n      title: Template\n      properties:\n        version:\n          type: string\n          description: Spec version to use for validation.\n          default: 0.0.1\n        name:\n          type: string\n          description: There can only be one template with the same name for any user. Valid names start with a letter or a number, and only contain letters, numbers, dashes (-), or underscores (_)\n        auth:\n          type: object\n          properties:\n            method:\n              type: string\n              description: token or open\n              default: open\n            valid_tokens:\n              type: string\n              description: when method is set to token, the values listed here allow you to instantiate the Named Map. See this [example](http://docs.carto.com/faqs/manipulating-your-data/#how-to-create-a-password-protected-named-map) for how to create a password-protected map.\n        placeholders:\n          $ref: '#/components/schemas/TemplatePlaceholders'\n        layergroup:\n          $ref: '#/components/schemas/MapConfig'\n        view:\n          $ref: '#/components/schemas/TemplateView'\n      required:\n        - version\n        - name\n        - auth\n        - placeholders\n        - layergroup\n    TemplateParams:\n      type: object\n      title: Template Parameters\n    TemplatePlaceholders:\n      type: object\n      title: Template Placeholders\n      description: >\n        Variables that can be placed in layergroup's definition (SQL or CartoCSS of any layer). Placeholders need to be defined with a `type` and a default value for MapConfigs. See details about defining a MapConfig `type` for [Layergroup configurations](https://carto.com/developers/maps-api/guides/MapConfig-file-format/#layergroup-configurations). Valid placeholder names start with a letter and can only contain letters, numbers, or underscores. They have to be written between the `<%=` and `%>` strings in order to be replaced inside the Named Maps API.\n\n        **Example**:```<%= my_color %>```\n\n        The set of supported placeholders for a template need to be explicitly defined with a specific type, and default value, for each placeholder. Placeholder default values will be used whenever new values are not provided as options, at the time of creation on the client. They can also be used to test the template by creating a default version with new options provided. When using templates, be very careful about your selections as they can give broad access to your data if they are defined loosely.\n      properties:\n        type:\n          type: string\n          enum: [sql_literal, sql_ident, number, css_color]\n          description: >\n            sql_literal: internal single-quotes will be sql-escaped\n            sql_ident: internal double-quotes will be sql-escaped\n            number: can only contain numerical representation\n            css_color: can only contain color names or hex-values\n        default:\n          anyOf:\n            - type: string\n            - type: number\n            - type: boolean\n      required:\n        - type\n        - default\n    TemplateView:\n      type: object\n      title: Template View\n      description: Extra keys to specify the view area for the map. It can be used to have a static preview of a Named Map without having to instantiate it. It is possible to specify it with `center` + `zoom` or with a bounding box `bbox`. Center+zoom takes precedence over bounding box. Also it is possible to choose which layers are visible or not with `preview_layers` indicating its visibility by layer index or id (visible by default).\n      properties:\n        zoom:\n          $ref: '#/components/schemas/TemplateViewZoom'\n        center:\n          $ref: '#/components/schemas/TemplateViewCenter'\n        bounds:\n          $ref: '#/components/schemas/TemplateViewBounds'\n        preview_layers:\n          $ref: '#/components/schemas/TemplateViewPreviewLayers'\n      required:\n        - zoom\n        - center\n        - bounds\n    TemplateViewZoom:\n      type: number\n      title: Template View Zoom\n      description: The zoom level to use\n      example: 4\n    TemplateViewCenter:\n      type: object\n      title: Template View Center\n      properties:\n        lng:\n          type: number\n          description: The longitude to use for the center\n        lat:\n          type: number\n          description: The latitude to use for the center\n      example:\n        lng: 0\n        lat: 0\n    TemplateViewBounds:\n      type: object\n      title: Template View Bounds\n      description: View area for the map. It can be used to have a static preview with bounding box `bbox\n      properties:\n        west:\n          type: number\n          description: LowerCorner longitude for the bounding box, in decimal degrees (aka most western)\n        south:\n          type: number\n          description: LowerCorner latitude for the bounding box, in decimal degrees (aka most southern)\n        east:\n          type: number\n          description: UpperCorner longitude for the bounding box, in decimal degrees (aka most eastern)\n        north:\n          type: number\n          description: UpperCorner latitude for the bounding box, in decimal degrees (aka most northern)\n      example:\n        west: -45\n        south: -45\n        east: 45\n        north: 45\n    TemplateViewPreviewLayers:\n      type: object\n      title: Template View Preview Layers\n      description: Indicates which layers are visible or not by layer index or id (visible by default).\n      example:\n        0: true\n        layer1: false\n    NamedMapResponse:\n      type: object\n      title: Named Map Response\n      properties:\n        template_id:\n          type: string\n    NamedMapResponseList:\n      type: object\n      title: Named Map Response List\n      properties:\n        template_ids:\n          type: array\n          items:\n            type: string\n            description: template name\n  securitySchemes:\n    ApiKeyHTTPBasicAuth:\n      type: http\n      scheme: basic\n    ApiKeyQueryParam:\n      type: apiKey\n      in: query\n      name: api_key\n  parameters:\n    layergroupId:\n      in: path\n      name: layergroupid\n      required: true\n      schema:\n        type: string\n      description: The layergroup ID.\n    z:\n      in: path\n      name: z\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n      description: Zoom level.\n    x:\n      in: path\n      name: x\n      required: true\n      schema:\n        type: integer\n      description: X coordinate.\n    'y':\n      in: path\n      name: 'y'\n      required: true\n      schema:\n        type: integer\n      description: Y coordinate.\n    lng:\n      in: path\n      name: lng\n      required: true\n      schema:\n        type: number\n        format: float\n      description: The longitude for the center of the map.\n    lat:\n      in: path\n      name: lat\n      required: true\n      schema:\n        type: number\n        format: float\n      description: The latitude for the center of the map.\n    width:\n      in: path\n      name: width\n      required: true\n      schema:\n        type: integer\n      description: Width in pixels for the output image.\n    height:\n      in: path\n      name: height\n      required: true\n      schema:\n        type: integer\n      description: Height in pixels for the output image.\n    format:\n      in: path\n      name: format\n      required: true\n      schema:\n        type: string\n        enum:\n        - png\n        - jpg\n      description: Output image format\n    west:\n      in: path\n      name: west\n      required: true\n      schema:\n        type: number\n        format: float\n      description: LowerCorner longitude, in decimal degrees (aka most western) in WGS 84 (EPSG:4326)\n    south:\n      in: path\n      name: south\n      required: true\n      schema:\n        type: number\n        format: float\n      description: LowerCorner latitude, in decimal degrees (aka most southern) in WGS 84 (EPSG:4326)\n    east:\n      in: path\n      name: east\n      required: true\n      schema:\n        type: number\n        format: float\n      description: UpperCorner longitude, in decimal degrees (aka most eastern) in WGS 84 (EPSG:4326)\n    north:\n      in: path\n      name: north\n      required: true\n      schema:\n        type: number\n        format: float\n      description: UpperCorner latitude, in decimal degrees (aka most northern) in WGS 84 (EPSG:4326)\n    name:\n      in: path\n      name: name\n      required: true\n      schema:\n        type: string\n      description: The named map name\n    layersFilter:\n      in: path\n      name: layers_filter\n      required: true\n      schema:\n        oneOf:\n          - type: string\n            title: all\n          - type: string\n            title: list of indexes\n      description: |\n        Layers to be rendered together.\n\n        Supports 2 format options:\n        * a comma separated list of layer indexes (0-based). Examples:\n\n          * **0,1,3** - will filter and blend layers with indexes 0, 1 and 3\n          * **2** - only one layer\n\n        * **all** will blend all layers in the layergroup\n    layersQueryParam:\n      in: query\n      name: layer\n      schema:\n        oneOf:\n          - type: string\n            title: all\n          - type: string\n            title: list of indexes\n      description: |\n        Layers to be rendered together.\n\n        Supports 2 format options:\n        * a comma separated list of layer indexes (0-based). Examples:\n\n          * **0,1,3** - will filter and blend layers with indexes 0, 1 and 3\n          * **2** - only one layer\n\n        * **all** will blend all layers in the layergroup (**default value**)\n    layerIndex:\n      in: path\n      name: layer\n      required: true\n      schema:\n        type: number\n        title: layer index\n        minimum: 0\n      description: 0 based layer index\n    templateName:\n      in: path\n      name: template_name\n      required: true\n      schema:\n        type: string\n      description: Name of the requested template\n  responses:\n    InternalServerError:\n      description: Server encountered an unexpected condition that prevented it from fulfilling the request.\n    BadRequest:\n      description: The server could not understand the request due to invalid syntax or unexpected condition.\n    NotFound:\n      description: The specified resource was not found.\n    Unauthorized:\n      description: Unauthorized. No authentication provided.\n    Forbidden:\n      description: Forbidden. The API key does not authorize this request.\n    BadInput:\n      description: Request's parameters error.\n    TooManyRequest:\n      description: The user has sent too many requests in a given amount of time (\"rate limiting\" or \"database timeout\").\n",
			"canonicalURL": "/github.com/CartoDB/Windshaft-cartodb@1e4087c88309e597cc83f6c53aed9189dafa1ef3/-/blob/docs/reference/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/CartoDB/Windshaft-cartodb/blob/1e4087c88309e597cc83f6c53aed9189dafa1ef3/docs/reference/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: schemas: \"Layer\": parse schema: property \"options\": at 1:4810: parse schema: oneOf: [0]: at 1:4880: parse schema: resolve \"#/components/schemas/LayerOptionsMapnik\": parse schema: property \"raster_band\": at 1:8432: parse default: expected type \"string\", got \"number\""
}