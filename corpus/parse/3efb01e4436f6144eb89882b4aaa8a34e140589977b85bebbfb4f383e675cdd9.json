{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/threefoldtech/zos"
		},
		"file": {
			"name": "zos-api.yml",
			"size": 0,
			"path": "cmds/modules/provisiond/swagger/zos-api.yml",
			"byteSize": 14118,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  description: \"Threefold ZOS API\"\n  version: \"0.5.0\"\n  title: \"ZOS\"\n  termsOfService: \"https://threefold.io/info/legal#/legal__terms_conditions_websites\"\n  license:\n    name: \"Apache 2.0\"\n    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\ntags:\n  - name: \"deployment\"\n    description: \"Api to run deployments on node\"\n    # externalDocs:\n    #   description: \"Find out more\"\n    #   url: \"http://swagger.io\"\n  - name: \"network\"\n    description: \"Api to view or modify node networking\"\n  - name: \"statistics\"\n    description: \"view on node load\"\nservers:\n  - url: \"/api/v1\"\n    description: \"base url\"\npaths:\n  /deployment:\n    post:\n      tags:\n        - \"deployment\"\n      summary: \"Create a new deployment\"\n      description: \"\"\n      operationId: \"addDeployment\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Deployment\"\n      security:\n        - user: []\n      responses:\n        \"405\":\n          description: \"Invalid input\"\n        \"202\":\n          description: \"Accepted\"\n    put:\n      tags:\n        - \"deployment\"\n      summary: \"Update an existing deployment\"\n      description: \"\"\n      operationId: \"updateDeployment\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Deployment\"\n      security:\n        - user: []\n      responses:\n        \"202\":\n          description: \"Accepted\"\n  /deployment/{twin}/{id}:\n    get:\n      tags:\n        - \"deployment\"\n      summary: \"get deployment by \"\n      description: \"\"\n      operationId: \"getDeployment\"\n      parameters:\n        - name: \"twin\"\n          in: \"path\"\n          description: \"twin id\"\n          required: true\n          schema:\n            type: integer\n            format: uint32\n        - name: \"id\"\n          in: \"path\"\n          description: \"deployment id\"\n          required: true\n          schema:\n            type: integer\n            format: uint32\n      security:\n        - user: []\n      responses:\n        \"404\":\n          description: \"deployment not found\"\n        \"202\":\n          description: \"return deployment\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deployment\"\n    delete:\n      tags:\n        - \"deployment\"\n      summary: \"delete a full deployment\"\n      description: \"\"\n      operationId: \"deleteDeployment\"\n      parameters:\n        - name: \"twin\"\n          in: \"path\"\n          description: \"twin id\"\n          required: true\n          schema:\n            type: integer\n            format: uint32\n        - name: \"id\"\n          in: \"path\"\n          description: \"deployment id\"\n          required: true\n          schema:\n            type: integer\n            format: uint32\n      security:\n        - user: []\n      responses:\n        \"202\":\n          description: \"Accepted\"\n        \"404\":\n          description: \"Deployment not found\"\n  /network/wireguard:\n    get:\n      tags:\n        - \"network\"\n      summary: \"get used node wireguard ports\"\n      description: \"return a list of reserved wireguard ports on the node\"\n      operationId: \"listWireguardPorts\"\n      responses:\n        \"200\":\n          description: \"a list of reserved ports\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: uint16\n  /network/publicips:\n    get:\n      tags:\n        - \"network\"\n      summary: \"return list of reserved public ips on this node\"\n      description: \"return a list of reserved public ips the node\"\n      operationId: \"listPublicIps\"\n      responses:\n        \"200\":\n          description: \"a list of public ips\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  format: cidr\n  /network/config/public:\n    get:\n      tags:\n        - \"network\"\n      summary: \"get node public IP config\"\n      description: \"the node public ip config if set means the node can be used as an access point\"\n      operationId: \"getPublicConfig\"\n      responses:\n        \"200\":\n          description: \"ok\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PublicConfig\"\n    post:\n      tags:\n        - \"network\"\n      summary: \"set node public IP config\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PublicConfig\"\n      security:\n        - farmer: []\n      responses:\n        \"201\":\n          description: \"created\"\n  /counters:\n    get:\n      tags:\n        - \"statistics\"\n      responses:\n        \"200\":\n          description: \"counters\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    $ref: \"#/components/schemas/Capacity\"\n                  used:\n                    $ref: \"#/components/schemas/Capacity\"\ncomponents:\n  securitySchemes:\n    user: # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    farmer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    SignatureRequest:\n      type: \"object\"\n      properties:\n        twin_id:\n          type: integer\n          format: int32\n        required:\n          type: boolean\n        weight:\n          type: integer\n          format: uint\n    Signature:\n      type: \"object\"\n      properties:\n        twin_id:\n          type: integer\n          format: int32\n        signature:\n          type: string\n    SignatureRequirement:\n      type: \"object\"\n      properties:\n        weight_required:\n          type: integer\n          format: uint\n        requests:\n          type: array\n          items:\n            $ref: \"#/components/schemas/SignatureRequest\"\n        signatures:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Signature\"\n    Result:\n      type: \"object\"\n      readOnly: true\n      properties:\n        created:\n          type: integer\n          format: int64\n          description: creation timestamp\n        state:\n          type: string\n          description: status of result. if error, check error for message.\n          enum:\n            - ok\n            - error\n            - deleted\n        error:\n          type: string\n        data:\n          type: object\n          description: \"result of workload deployment, dependens on the type\"\n    Workload:\n      type: \"object\"\n      properties:\n        version:\n          type: \"integer\"\n          format: int32\n        name:\n          type: string\n          description: \"unique workload name per deployment\"\n        type:\n          type: string\n          description: \"defines the type of the workload\"\n          enum:\n            - network\n            - container\n            - volume\n            - network\n            - zdb\n            - kubernetes\n            - virtualmachine\n            - ipv4\n        metadata:\n          type: \"string\"\n          example: \"user specific metadata\"\n        description:\n          type: \"string\"\n          example: \"human readable description of workload\"\n        result:\n          $ref: \"#/components/schemas/Result\"\n        data:\n          oneOf:\n            - $ref: \"#/components/schemas/Network\"\n            - $ref: \"#/components/schemas/Volume\"\n            - $ref: \"#/components/schemas/ZDB\"\n            - $ref: \"#/components/schemas/Container\"\n            - $ref: \"#/components/schemas/PublicIP\"\n            - $ref: \"#/components/schemas/Kubernetes\"\n            - $ref: \"#/components/schemas/VirtualMachine\"\n    Deployment:\n      type: \"object\"\n      properties:\n        version:\n          type: \"integer\"\n          format: \"int32\"\n        twin_id:\n          type: \"integer\"\n          format: \"int32\"\n        deployment_id:\n          type: \"integer\"\n          format: \"int32\"\n        metadata:\n          type: \"string\"\n          example: \"user specific metadata\"\n        description:\n          type: \"string\"\n          example: \"human readable description of deployment\"\n        expiration:\n          type: \"integer\"\n          format: \"int64\"\n        signature_requirement:\n          $ref: \"#/components/schemas/SignatureRequirement\"\n        workloads:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Workload\"\n    Volume:\n      type: object\n      properties:\n        size:\n          type: integer\n          format: uint64\n        type:\n          type: string\n          enum:\n            - ssd\n            - hdd\n    ZDB:\n      type: object\n      properties:\n        size:\n          type: integer\n          format: uint64\n        disk_type:\n          type: string\n          enum:\n            - ssd\n            - hdd\n        mode:\n          type: string\n          enum:\n            - user\n            - seq\n        password:\n          type: string\n        public:\n          type: boolean\n    PublicIP:\n      type: object\n      properties:\n        ip:\n          type: string\n          format: cidr\n        gateway:\n          type: string\n          format: ip\n          description: |\n            this value here is a temporary solution to the lack of a farmer twin. Hence this information\n            should be provided by the farmer (actually both Ip and Gw should be) so for now the user has\n            to provide the exact value that is setup for this IP in the farmer network.\n    Container:\n      type: object\n      properties:\n        flist:\n          type: string\n        hub_url:\n          type: string\n        env:\n          type: object\n          additionalProperties:\n            type: string\n        entrypoint:\n          type: string\n        mounts:\n          type: array\n          items:\n            type: object\n            properties:\n              volume:\n                type: string\n              mountpoint:\n                type: string\n        network:\n          type: object\n          properties:\n            network:\n              type: string\n            ips:\n              type: array\n              items:\n                type: string\n                format: cidr\n            public_ip6:\n              type: boolean\n            yggdrasil_ip:\n              type: boolean\n        capacity:\n          type: object\n          properties:\n            cpu:\n              type: integer\n              format: uint\n            memory:\n              type: integer\n              description: memory in megabytes\n              format: uint64\n            disk_type:\n              type: string\n              enum:\n                - ssd\n                - hdd\n            disk_size:\n              type: integer\n              format: uint64\n        logs:\n          type: array\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n                enum:\n                  - redis\n              data:\n                type: object\n                properties:\n                  stdout:\n                    type: string\n                  stderr:\n                    type: string\n    Kubernetes:\n      allOf:\n        - $ref: '#/components/schemas/VirtualMachine'\n        - type: \"object\"\n          properties:\n            cluster_secret:\n              type: string\n            master_ips:\n              description: \"list of master Ips, if empty then this vm is master\"\n              type: array\n              items:\n                type: string\n                format: ip\n            datastore_endpoint:\n              type: string\n            disable_default_ingress:\n              type: boolean\n    Network:\n      type: \"object\"\n      properties:\n        ip_range:\n          type: string\n          description: \"must be ipv4 /16\"\n          format: cidr\n        subnet:\n          type: string\n          format: cidr\n        wireguard_private_key:\n          type: string\n        wireguard_listen_port:\n          type: integer\n        peers:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Peer\"\n    Peer:\n      type: \"object\"\n      properties:\n        subnet:\n          type: string\n          format: cidr\n        wireguard_public_key:\n          type: string\n        allowed_ips:\n          type: array\n          items:\n            type: string\n            format: cidr\n        endpoint:\n          type: string\n    VirtualMachine:\n      type: \"object\"\n      properties:\n        name:\n          type: string\n          description: \"e.g. ubuntu-20.04, empty for k8s\"\n        size:\n          type: integer\n          format: uint\n        network:\n          type: string\n          description: \"network name, can be from another deployment\"\n        ip:\n          type: string\n          format: ip\n        ssh_keys:\n          type: array\n          items:\n            type: string\n        public_ip:\n          description: \"name of the public Ip reservation in this deployment\"\n    PublicConfig:\n      type: \"object\"\n      properties:\n        type:\n          type: string\n          enum:\n            - macvlan\n        ipv4:\n          type: string\n          format: cidr\n        ipv6:\n          type: string\n          format: cidr\n        gw4:\n          type: string\n          format: ip\n        gw6:\n          type: string\n          format: ip\n    Capacity:\n      type: \"object\"\n      description: \"statistics about used capacity\"\n      properties:\n        cru:\n          type: integer\n          format: uint64\n        mru:\n          type: integer\n          format: uint64\n        hru:\n          type: integer\n          format: uint64\n        sru:\n          type: integer\n          format: uint64\n        ipv4u:\n          type: integer\n          format: uint64\n    ErrorResponse:\n      type: \"object\"\n      properties:\n        error:\n          type: \"string\"\nexternalDocs:\n  description: \"Find out more about Swagger\"\n  url: \"http://swagger.io\"\n",
			"canonicalURL": "/github.com/threefoldtech/zos@43fc55c59ef887f2aafee8f862b5ebc6d10ee9ab/-/blob/cmds/modules/provisiond/swagger/zos-api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/threefoldtech/zos/blob/43fc55c59ef887f2aafee8f862b5ebc6d10ee9ab/cmds/modules/provisiond/swagger/zos-api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Deployment\": parse schema: property \"workloads\": parse schema: parse schema: parse schema: property \"type\": at 1:5691: duplicate enum value: \"\\\"network\\\"\""
}