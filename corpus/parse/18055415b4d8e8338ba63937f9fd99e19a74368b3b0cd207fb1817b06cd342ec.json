{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/readmeio/oas-examples"
		},
		"file": {
			"name": "schema-enums.json",
			"size": 0,
			"path": "3.0/json/schema-enums.json",
			"byteSize": 9588,
			"content": "{\n  \"openapi\": \"3.0.3\",\n  \"info\": {\n    \"title\": \"Support for different implementations of `enum`\",\n    \"description\": \"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schemaObject\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"https://httpbin.org\"\n    }\n  ],\n  \"tags\": [\n    {\n      \"name\": \"Enums\",\n      \"description\": \"Showcasing enum handling and support\"\n    }\n  ],\n  \"paths\": {\n    \"/anything/strings\": {\n      \"post\": {\n        \"operationId\": \"string_enumSupport\",\n        \"summary\": \"String enum support\",\n        \"description\": \"Support and handling of enums on `type: string` schemas.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n* [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\",\n        \"tags\": [\"Enums\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"enum\": {\n                    \"type\": \"string\",\n                    \"description\": \"A regular ol' enum\",\n                    \"enum\": [\"available\", \"pending\", \"sold\"]\n                  },\n                  \"enum *required\": {\n                    \"type\": \"string\",\n                    \"description\": \"A regular ol' enum\",\n                    \"enum\": [\"available\", \"pending\", \"sold\"]\n                  },\n                  \"enum (with default)\": {\n                    \"type\": \"string\",\n                    \"description\": \"This enum has a `default` of `available`.\",\n                    \"enum\": [\"available\", \"pending\", \"sold\"],\n                    \"default\": \"available\"\n                  },\n                  \"enum (with default) *required\": {\n                    \"type\": \"string\",\n                    \"description\": \"A required enum with a default (if a field is required it should probably always have a default, eh?)\",\n                    \"enum\": [\"available\", \"pending\", \"sold\"],\n                    \"default\": \"available\"\n                  },\n                  \"enum (with example)\": {\n                    \"type\": \"string\",\n                    \"description\": \"This enum has a `example` of `pending`.\",\n                    \"enum\": [\"available\", \"pending\", \"sold\"],\n                    \"example\": \"pending\"\n                  },\n                  \"enum (with example) *required\": {\n                    \"type\": \"string\",\n                    \"description\": \"This enum has a `example` of `pending` and is required.\",\n                    \"enum\": [\"available\", \"pending\", \"sold\"],\n                    \"example\": \"pending\"\n                  },\n                  \"enum (with non-value example)\": {\n                    \"type\": \"string\",\n                    \"description\": \"This enum has an example that isn't part of the enum, so the option does not get hidden\",\n                    \"enum\": [\"available\", \"pending\", \"sold\"],\n                    \"example\": \"Choose...\"\n                  },\n                  \"enum (with non-value example) *required\": {\n                    \"type\": \"string\",\n                    \"description\": \"This enum has an example that isn't part of the enum, so the option does not get hidden\",\n                    \"enum\": [\"available\", \"pending\", \"sold\"],\n                    \"example\": \"Choose...\"\n                  },\n                  \"enum (with empty option)\": {\n                    \"type\": \"string\",\n                    \"description\": \"This enum has an empty string (`\\\"\\\"`) as one of its available options.\",\n                    \"enum\": [\"\", \"available\", \"pending\", \"sold\"]\n                  },\n                  \"enum (with duplicate options)\": {\n                    \"type\": \"string\",\n                    \"description\": \"This enum has multiple duplicate options, they should get deduped in the UI\",\n                    \"enum\": [\"\", \"\", \"available\", \"available\"]\n                  },\n                  \"enum (with empty option and empty default)\": {\n                    \"type\": \"string\",\n                    \"description\": \"This enum has a an empty string (`\\\"\\\"`) as its only available option, and that same value is set as its `default`.\",\n                    \"enum\": [\"\"],\n                    \"default\": \"\"\n                  }\n                },\n                \"required\": [\"enum *required\", \"enum (with default) *required\", \"enum (with example) *required\", \"enum (with non-value example) *required\"]\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      },\n      \"get\": {\n        \"operationId\": \"number_enumSupport\",\n        \"summary\": \"Number enum support\",\n        \"description\": \"Support and handling of enums on `type: number` schemas.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n* [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\",\n        \"tags\": [\"Enums\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"enum\": {\n                    \"type\": \"number\",\n                    \"description\": \"A regular ol' enum\",\n                    \"enum\": [0, 1, 2]\n                  },\n                  \"enum *required\": {\n                    \"type\": \"number\",\n                    \"description\": \"A regular ol' enum\",\n                    \"enum\": [0, 1, 2]\n                  },\n                  \"enum (with default)\": {\n                    \"type\": \"number\",\n                    \"description\": \"This enum has a `default` of `1`.\",\n                    \"enum\": [0, 1, 2],\n                    \"default\": 1\n                  },\n                  \"enum (with default) *required\": {\n                    \"type\": \"number\",\n                    \"description\": \"A required enum with a default (if a field is required it should probably always have a default, eh?)\",\n                    \"enum\": [0, 1, 2],\n                    \"default\": 2\n                  },\n                  \"enum (with example)\": {\n                    \"type\": \"number\",\n                    \"description\": \"This enum has a `example` of `1`.\",\n                    \"enum\": [0, 1, 2],\n                    \"example\": 1\n                  },\n                  \"enum (with example) *required\": {\n                    \"type\": \"number\",\n                    \"description\": \"This enum has a `example` of `1` and is required.\",\n                    \"enum\": [0, 1, 2],\n                    \"example\": 1\n                  },\n                  \"enum (with empty option)\": {\n                    \"type\": \"number\",\n                    \"description\": \"This enum has an empty string (`\\\"\\\"`) as one of its available options.\",\n                    \"enum\": [\"\", 0, 1, 2]\n                  },\n                  \"enum (with duplicate options)\": {\n                    \"type\": \"number\",\n                    \"description\": \"This enum has multiple duplicate options, they should get deduped in the UI\",\n                    \"enum\": [\"\", \"\", 0, 2, 2]\n                  }\n                },\n                \"required\": [\"enum *required\", \"enum (with default) *required\", \"enum (with example) *required\"]\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      },\n      \"put\": {\n        \"operationId\": \"boolean_enumSupport\",\n        \"summary\": \"Boolean enum support\",\n        \"description\": \"Support and handling of enums on `type: boolean` schemas.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n* [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\",\n        \"tags\": [\"Enums\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"enum\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"A regular ol' enum\",\n                    \"enum\": [true, false]\n                  },\n                  \"enum *required\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"A regular ol' enum\",\n                    \"enum\": [true, false]\n                  },\n                  \"enum (with default)\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"This enum has a `default` of `false`.\",\n                    \"enum\": [true, false],\n                    \"default\": false\n                  },\n                  \"enum (with default) *required\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"A required enum with a default (if a field is required it should probably always have a default, eh?)\",\n                    \"enum\": [true, false],\n                    \"default\": true\n                  }\n                },\n                \"required\": [\"enum *required\", \"enum (with default) *required\", \"enum (with example) *required\"]\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/github.com/readmeio/oas-examples@ce1e5c9b6bda57cbfce4b9ba21c968a30eb63529/-/blob/3.0/json/schema-enums.json",
			"externalURLs": [
				{
					"url": "https://github.com/readmeio/oas-examples/blob/ce1e5c9b6bda57cbfce4b9ba21c968a30eb63529/3.0/json/schema-enums.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/anything/strings\": get: operation \"number_enumSupport\": requestBody: parse content: application/json: schema: parse schema: property \"enum (with empty option)\": at 3.0/json/schema-enums.json:154:29: parse enum values: parse value \"\\\"\\\"\": expected type \"number\", got \"string\""
}