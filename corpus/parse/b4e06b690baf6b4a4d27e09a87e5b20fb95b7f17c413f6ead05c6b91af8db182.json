{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/apache/iotdb"
		},
		"file": {
			"name": "iotdb-rest.yaml",
			"size": 0,
			"path": "openapi/src/main/openapi3/iotdb-rest.yaml",
			"byteSize": 5804,
			"content": "#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\nopenapi: 3.0.0\ninfo:\n  title: iotdb-rest\n  description: IoTDB Rest API for Grafana, Prometheus, etc..\n  license:\n    name: Apache 2.0\n  version: 1.0.0\nservers:\n- url: http://127.0.0.1:18080/\n  description: api\nsecurity:\n- basic: []\npaths:\n  /ping:\n    get:\n      responses:\n        \"200\":\n          description: ExecutionStatus\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExecutionStatus'\n      operationId: tryPing\n\n  /rest/v1/insertTablet:\n    post:\n      summary: insertTablet\n      description: insertTablet\n      operationId: insertTablet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/InsertTabletRequest'\n      responses:\n        \"200\":\n          description: ExecutionStatus\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExecutionStatus'\n\n  /rest/v1/nonQuery:\n    post:\n      summary: executeNonQueryStatement\n      description: executeNonQueryStatement\n      operationId: executeNonQueryStatement\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SQL'\n      responses:\n        \"200\":\n          description: ExecutionStatus\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExecutionStatus'\n\n  /rest/v1/query:\n    post:\n      summary: executeQueryStatement\n      description: executeQueryStatement\n      operationId: executeQueryStatement\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SQL'\n      responses:\n        \"200\":\n          description: QueryDataSet\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QueryDataSet'\n\n  /grafana/v1/login:\n    get:\n      responses:\n        \"200\":\n          description: ExecutionStatus\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExecutionStatus'\n      operationId: login\n\n  /grafana/v1/query/expression:\n    post:\n      summary: expression\n      description: expression\n      operationId: expression\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExpressionRequest'\n      responses:\n        \"200\":\n          description: QueryDataSet\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QueryDataSet'\n\n  /grafana/v1/variable:\n    post:\n      summary: variables\n      description: variables\n      operationId: variables\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SQL'\n      responses:\n        \"200\":\n          description: VariablesResult\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VariablesResult'\n\ncomponents:\n  schemas:\n    SQL:\n      title: SQL\n      type: object\n      properties:\n        sql:\n          type: string\n        rowLimit:\n          type: Integer\n\n    InsertTabletRequest:\n      title: InsertTabletRequest\n      type: object\n      properties:\n        timestamps:\n          type: array\n          items:\n            type: long\n        measurements:\n          type: array\n          items:\n            type: string\n        dataTypes:\n          type: array\n          items:\n            type: string\n        values:\n          type: array\n          items:\n            type: array\n            items:\n              type: object\n        isAligned:\n          type: boolean\n        deviceId:\n          type: string\n\n    ExecutionStatus:\n      type: object\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n\n    QueryDataSet:\n      type: object\n      properties:\n        expressions:\n          type: array\n          items:\n            type: string\n        columnNames:\n          type: array\n          items:\n            type: string\n        timestamps:\n          type: array\n          items:\n            type: long\n        values:\n          type: array\n          items:\n            type: array\n            items:\n              type: object\n\n    ExpressionRequest:\n      type: object\n      properties:\n        expression:\n          type: array\n          items:\n            type: string\n        prefixPath:\n          type: array\n          items:\n            type: string\n        condition:\n          type: string\n        control:\n           type: string\n        startTime:\n          type: number\n        endTime:\n          type: number\n\n    VariablesResult:\n      type: array\n      items:\n        type: object\n\n  securitySchemes:\n    basic:\n      type: http\n      scheme: basic\n    APIKey:\n      type: apiKey\n      name: API Key\n      in: header\n"
		}
	},
	"Error": "parse: parse spec: paths: /rest/v1/insertTablet: post: operation \"insertTablet\": requestBody: content: \"application/json\": parse schema: parse schema: resolve \"#/components/schemas/InsertTabletRequest\": parse schema: property \"timestamps\": parse schema: item: parse schema: unexpected schema type: \"long\""
}