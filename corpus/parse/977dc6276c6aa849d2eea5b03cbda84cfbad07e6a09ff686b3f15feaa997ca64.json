{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/storageos/go-api"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 142151,
			"content": "openapi: \"3.0.2\"\ninfo:\n    title: \"StorageOS API\"\n    version: \"2.5.0\"\n    contact:\n        name: StorageOS\n        url: https://storageos.com\n        email: info@storageos.com\n\nexternalDocs:\n    url: https://docs.storageos.com/\n    description: \"The latest StorageOS user documentation\"\n\nservers:\n    - url: /v2\n\ncomponents:\n    securitySchemes:\n        # The StorageOS API uses JWT (JSON web token) based authentication.\n        jwt:\n            type: http\n            scheme: bearer\n            bearerFormat: \"JWT\"\n            description: StorageOS uses JSON web tokens for authentication.\n\n    schemas:\n        OpenAPISpec:\n            type: string\n            readOnly: true\n            description: \u003e\n                Serves this openapi specification file.\n\n        # This is the standard HTTP error format used for all API errors.\n\n        Error:\n            type: object\n            required:\n                - error\n            properties:\n                error:\n                    type: string\n            example:\n                error: A short description of the error\n\n        # ------------------------------------------------------------------------------\n        # generic types used across multiple endpoints\n        # ------------------------------------------------------------------------------\n\n        Version:\n            type: string\n            maxLength: 30\n            description: \u003e\n                An opaque representation of an entity version at the time it was\n                obtained from the API.\n\n                All operations that mutate the entity must include this version\n                field in the request unchanged.\n\n                The format of this type is undefined and may change but the\n                defined properties will not change.\n            example: NDI0MjQyNDI0MjQyNDI0MjQy\n\n        IgnoreVersion:\n            type: boolean\n            default: false\n            description: \u003e\n                Ignoring the entity version constraints.\n\n                If set to true this value indicates that the user wants to\n                ignore entity version constraints, thereby \"forcing\" the\n                operation.\n            example: true\n\n        ExpiresAt:\n            type: string\n            format: date-time\n            readOnly: true\n            description: \u003e\n                The time after which a licence will no longer be valid\n\n                This timestamp is set when the licence is created.\n\n                String format is RFC3339.\n            example: \"2019-03-10T13:42:42Z\"\n\n        CreatedAt:\n            type: string\n            format: date-time\n            readOnly: true\n            description: \u003e\n                The time the entity was created.\n\n                This timestamp is set by the node that created the entity, and\n                may not be correct if the node's local clock was skewed.\n\n                This value is for the user's informative purposes only, and\n                correctness is not required.\n\n                String format is RFC3339.\n            example: \"2019-03-10T13:42:42Z\"\n\n        UpdatedAt:\n            type: string\n            format: date-time\n            readOnly: true\n            description: \u003e\n                The time the entity was last updated.\n\n                This timestamp is set by the node that last updated the entity,\n                and may not be correct if the node's local clock was skewed.\n\n                This value is for the user's informative purposes only, and\n                correctness is not required.\n\n                String format is RFC3339.\n            example: \"2019-03-29T23:13:13Z\"\n\n        FsType:\n            type: string\n            enum:\n                - \"ext2\"\n                - \"ext3\"\n                - \"ext4\"\n                - \"xfs\"\n                - \"btrfs\"\n                - \"block\"\n            description: \u003e\n                The file system type of a volume. \"block\" is a raw block device (no filesystem).\n            example: \"ext4\"\n            \n        AttachType:\n            type: string\n            readOnly: true\n            enum:\n                - \"unknown\"\n                - \"detached\"\n                - \"nfs\"\n                - \"host\"\n            description: \u003e\n                The attachment type of a volume. \"host\" indicates that the\n                volume is consumed by the node it is attached to.\n            example: \"host\"\n\n        FailureModeIntent:\n            type: string\n            enum: \n                - \"hard\"\n                - \"soft\"\n                - \"alwayson\"\n            description: \u003e\n                The intent-based failure mode behaviour of a volume. The default\n                behaviour for a volume is \"hard\", in the absence of a directly \n                configured intent or numerical failure threshold. \n            example: \"hard\"\n\n        NodeHealth:\n            type: string\n            readOnly: true\n            enum:\n                - \"online\"\n                - \"offline\"\n                - \"unknown\"\n            description: \u003e\n                The operational health of a node entity\n            example: \"online\"\n\n        MasterHealth:\n            type: string\n            readOnly: true\n            enum:\n                - \"online\"\n                - \"offline\"\n                - \"unknown\"\n            description: \u003e\n                The operational health of a volume master deployment\n            example:\n                \"online\"\n\n        ReplicaHealth:\n            type: string\n            readOnly: true\n            enum:\n                - \"recovering\"\n                - \"provisioning\"\n                - \"provisioned\"\n                - \"syncing\"\n                - \"ready\"\n                - \"deleted\"\n                - \"failed\"\n                - \"unknown\"\n            description: \u003e\n                The operational health of a volume replica deployment\n            example: \"ready\"\n            \n        SyncProgress:\n            type: object\n            readOnly: true\n            properties:\n                bytesRemaining:\n                    type: uint64\n                    description: \u003e\n                        Number of bytes left remaining to complete the sync.\n                    example: 500000\n                throughputBytes:\n                    type: uint64\n                    description: \u003e\n                        The average throughput of the sync given as bytes per \n                        second.\n                    example: 100000\n                estimatedSecondsRemaining:\n                    type: uint64\n                    description: \u003e\n                        The estimated time left for the sync to complete, given\n                        in seconds. When this field has a value of 0 either the \n                        sync is complete or no duration estimate could be made.\n                        The values reported for bytesRemaining and \n                        throughputBytes provide the client with the information\n                        needed to choose what to display.\n                    example: 5\n            description: \u003e\n                The progress report for an ongoing sync. \n      \n        CapacityStats:\n            type: object\n            properties:\n                total:\n                    type: uint64\n                    default: 0\n                    description: \u003e\n                        Total bytes in the filesystem\n                    example: 42\n                free:\n                    type: uint64\n                    default: 0\n                    description: \u003e\n                        Free bytes in the filesystem available to root user\n                    example: 42\n                available:\n                    type: uint64\n                    default: 0\n                    description: \u003e\n                       Byte value available to an unprivileged user\n                    example: 42\n        NfsAcl:\n            type: object\n            properties:\n              identity:\n                type: object\n                properties:\n                    identityType:\n                        type: string\n                        enum:\n                            - \"cidr\"\n                            - \"hostname\"\n                            - \"netgroup\"\n                        description: \u003e\n                            The identity type used to identify the nfs client.\n                        example: \"hostname\"\n                    matcher:\n                        type: string\n                        description: \u003e\n                            NFS identity matcher.\n\n                            For \"cidr\", this should be a valid CIDR block string\n                            such as \"10.0.0.0/8\".\n\n                            For \"hostname\", this must be the hostname sent by the\n                            client, with ? and * wildcard characters.\n\n                            For netgroup, this must be in the form of\n                            \"@netgroup\" with ? and * wildcard characters.\n                        example: \"*.prod.storageos.com\"\n              squashConfig:\n                type: object\n                properties:\n                    uid:\n                        type: int64\n                    gid:\n                        type: int64\n                    squash:\n                        type: string\n                        enum:\n                            - \"none\"\n                            - \"root\"\n                            - \"rootuid\"\n                            - \"all\"\n                        description: \u003e\n                            SquashConfig defines the root squashing behaviour. \n                            \n                            When a client creates a file, it sends the user UID\n                            from the client. If the client is running as root,\n                            this sends uid=0. Root squashing allows the NFS\n                            administrator to prevent the client from writing as\n                            \"root\" to the NFS share, instead mapping the client\n                            to a new UID/GID (usually nfsnobody, -2).\n\n                            \"none\" performs no UID/GID alterations, using the\n                            values sent by the client.\n\n                            \"root\" maps UID \u0026 GID 0 to the values specified.\n\n                            \"rootuid\" maps UID 0 and a GID of any value to the\n                            value specified.\n\n                            \"all\" maps changes all UID and GID values to those\n                            specified.\n\n                        example: \"root\"\n              accessLevel:\n                type: string\n                enum:\n                    - \"ro\"\n                    - \"rw\"\n                description: \u003e\n                    The access level this ACL grants - read-only, or read-write.\n                example: \"rw\"\n                    \n        NfsExportConfig:\n            type: object\n            properties:\n                exportID:\n                    type: uint64\n                    default: 0\n                    description: \u003e\n                        ID for this export\n                    example: 42\n                path:\n                    type: string\n                    default: \"\"\n                    description: \u003e\n                        The path relative to the volume root to serve as the export root\n                    example: \"/very/important/files/\"\n                pseudoPath:\n                    type: string\n                    default: \"\"\n                    description: \u003e\n                        The configured pseudo path in the NFS virtual filesystem.\n                        This is the path clients will see when traversing to this\n                        export on the NFS share.\n                    example: \"/very/important/files/somewhere/else\"\n                acls:\n                    type: array\n                    items:\n                        $ref: \"#/components/schemas/NfsAcl\"\n        NfsConfig:\n            type: object\n            properties:\n                exports:\n                    nullable: true\n                    type: array\n                    items:\n                        $ref: \"#/components/schemas/NfsExportConfig\"\n                serviceEndpoint:\n                    type: string\n                    readOnly: true\n                    nullable: true\n                    default: \"\"\n                    description: \u003e\n                        The address to which the NFS server is bound.\n                \n                        \n        Labels:\n            type: object\n            description: \u003e\n                A set of arbitrary key value labels to apply to the entity.\n            externalDocs:\n                url:  https://docs.storageos.com/docs/reference/labels\n            additionalProperties:\n                type: string\n            example:\n                env: prod\n                rack: db-1\n\n        LogLevel:\n            type: string\n            enum:\n                - \"debug\"\n                - \"info\"\n                - \"warn\"\n                - \"error\"\n            default: \"info\"\n            description: \u003e\n                This setting determines the log level for nodes across\n                the cluster to use when recording entries in the log.\n                All entries below the specified log level are discarded,\n                where \"error\" is the highest log level and \"debug\" is\n                the lowest.\n\n                This setting is only checked by nodes on startup.\n                Changing this setting will not affect the behaviour of\n                nodes that are already operational.\n            example: \"debug\"\n\n        LogFormat:\n            type: string\n            enum:\n                - \"default\"\n                - \"json\"\n            default: \"default\"\n            description: \u003e\n                This setting determines the format nodes in the cluster\n                will use for log entries.\n\n                This setting is only checked by nodes on startup.\n                Changing this setting will not affect the behaviour of\n                nodes that are already operational.\n            example: \"json\"\n\n        Strategy:\n            type: object\n            properties:\n                strategy:\n                    type: string\n                    enum:\n                        - recommended\n                        - topology-aware\n                    default: recommended\n                options:\n                    type: object\n                    properties:\n                        topologyKey:\n                            type: string\n                            default: topology.kubernetes.io/zone\n                            example: my.custom.zone.label\n                            description: \u003e\n                                Indicates the node label used to decribe the topology\n                                used for data placement decisions. If two nodes are \n                                labelled with this key and have identical values \n                                for that label, the scheduler treats both nodes \n                                as being in the same topology domain. \n                                When topology-aware provisioning is enabled, \n                                the scheduler tries to spread a volume's master \n                                and replica copies across different topology domains.\n                    nullable: true\n                    description: \u003e\n                        Used together with topology-aware strategy to further\n                        specify how the placement should be done.\n            description: \u003e\n                The logic to use when placing the volume replicas across the\n                available nodes. Possible options for this field include an\n                availability zone aware rule and recommended rule in which\n                multiple factors like available disk space, recent number of\n                errors on the nodes, etc, are taken into consideration.\n                Defaults to using a recommended placement strategy.\n        # ------------------------------------------------------------------------------\n        # UUIDs\n        # ------------------------------------------------------------------------------\n\n        ClusterID:\n            readOnly: true\n            type: string\n            description: \u003e\n                A unique identifier for a cluster.\n                The format of this type is undefined and may change but the\n                defined properties will not change.\n            example: c5666b58-b805-4215-ab4a-cb094948ccc6\n\n        NodeID:\n            readOnly: true\n            type: string\n            description: \u003e\n                A unique identifier for a node.\n                The format of this type is undefined and may change but the\n                defined properties will not change.\n            example: c5666b58-b805-4215-ab4a-cb094948ccc6\n\n        VolumeID:\n            type: string\n            description: \u003e\n                A unique identifier for a volume.\n                The format of this type is undefined and may change but the\n                defined properties will not change.\n            example: c5666b58-b805-4215-ab4a-cb094948ccc6\n\n        DeploymentID:\n            type: string\n            description: \u003e\n                A unique identifier for a volume deployment.\n                The format of this type is undefined and may change but the\n                defined properties will not change.\n            example: c5666b58-b805-4215-ab4a-cb094948ccc6\n\n        NamespaceID:\n            type: string\n            description: \u003e\n                A unique identifier for a namespace.\n                The format of this type is undefined and may change but the\n                defined properties will not change..\n            example: c5666b58-b805-4215-ab4a-cb094948ccc6\n\n        UserID:\n            type: string\n            description: \u003e\n                A unique identifier for a user.\n                The format of this type is undefined and may change but the\n                defined properties will not change..\n            example: c5666b58-b805-4215-ab4a-cb094948ccc6\n\n        PolicyGroupID:\n            type: string\n            description: \u003e\n                A unique identifier for a policy group.\n                The format of this type is undefined and may change but the\n                defined properties will not change..\n            example: c5666b58-b805-4215-ab4a-cb094948ccc6\n\n        # ------------------------------------------------------------------------------\n        # entity objects (e.g user)\n        #\n        # Mutating an entity will have a slightly different data model and are\n        # defined inline for each endpoint.\n        # ------------------------------------------------------------------------------\n\n        Cluster:\n            type: object\n            properties:\n                id:\n                    $ref: \"#/components/schemas/ClusterID\"\n                disableTelemetry:\n                    type: boolean\n                    default: false\n                    description: Disables collection of telemetry data across the cluster.\n                    example: false\n                disableCrashReporting:\n                    type: boolean\n                    default: false\n                    description: \u003e\n                        Disables collection of reports for any fatal crashes across the\n                        cluster.\n                    example: false\n                disableVersionCheck:\n                    type: boolean\n                    default: false\n                    description: \u003e\n                        Disables the mechanism responsible for checking if there is an\n                        updated version of StorageOS available for installation.\n                    example: false\n                logLevel:\n                    $ref: \"#/components/schemas/LogLevel\"\n                logFormat:\n                    $ref: \"#/components/schemas/LogFormat\"\n                createdAt:\n                    $ref: \"#/components/schemas/CreatedAt\"\n                updatedAt:\n                    $ref: \"#/components/schemas/UpdatedAt\"\n                version:\n                    $ref: \"#/components/schemas/Version\"\n        User:\n            type: object\n            properties:\n                id:\n                    $ref: \"#/components/schemas/UserID\"\n                username:\n                    type: string\n                    example: admin\n                isAdmin:\n                    type: boolean\n                    default: false\n                    description: \u003e\n                        If true, this user is an administrator of the cluster.\n\n                        Administrators bypass the usual authentication checks\n                        and are granted access to all resources. Some actions\n                        (such as adding a new user) can only be performed by an\n                        administrator.\n                    example: true\n                groups:\n                    type: array\n                    items:\n                        $ref: \"#/components/schemas/PolicyGroupID\"\n                    default: []\n                    nullable: true\n                    description: \u003e\n                        Defines a set of policy group IDs this user is a member\n                        of.\n\n                        Policy groups can be used to logically group users and \n                        apply authorisation policies to all members.\n                    example:\n                        - \"24d5db6f-9738-4f17-a257-b9dd41a35309\"\n                        - \"4223b453-4d47-49d5-960f-23fc7a8153ba\"\n                createdAt:\n                    $ref: \"#/components/schemas/CreatedAt\"\n                updatedAt:\n                    $ref: \"#/components/schemas/UpdatedAt\"\n                version:\n                    $ref: \"#/components/schemas/Version\"\n        \n        UserSession:\n            allOf:\n                - $ref: \"#/components/schemas/User\"\n                - type: object\n                  properties:\n                      session:\n                          type: object\n                          properties:\n                              expiresInSeconds:\n                                  type: uint64\n                                  description: \u003e\n                                      The maximum duration which the auth session \n                                      will remain valid for in seconds.\n                                  minimum: 0\n                                  example: 60\n                              token:\n                                  type: string\n                                  description: \u003e\n                                      The JWT token for the auth session.\n\n        Volume:\n            type: object\n            properties:\n                id:\n                    $ref: \"#/components/schemas/VolumeID\"\n                name:\n                    type: string\n                    example: \"app-data\"\n                description:\n                    type: string\n                    example: \"This volume contains the data for my app\"\n                attachedOn:\n                    readOnly: true\n                    allOf:\n                        - $ref: \"#/components/schemas/NodeID\"\n                attachedOnHost:\n                    readOnly: true\n                    type: string\n                    description: The hostname of the node the volume is attached on\n                    example: worker-1\n                nfs:\n                    readOnly: true\n                    nullable: true\n                    $ref: \"#/components/schemas/NfsConfig\"\n                namespaceID:\n                    readOnly: true\n                    allOf:\n                        - $ref: \"#/components/schemas/NamespaceID\"\n                labels:\n                    $ref: \"#/components/schemas/Labels\"\n                fsType:\n                    $ref: \"#/components/schemas/FsType\"\n                attachmentType:\n                    readOnly: true\n                    $ref: \"#/components/schemas/AttachType\"\n                master:\n                    readOnly: true\n                    allOf:\n                        - $ref: \"#/components/schemas/MasterDeploymentInfo\"\n                replicas:\n                    type: array\n                    nullable: true\n                    readOnly: true\n                    default: []\n                    items:\n                        $ref: \"#/components/schemas/ReplicaDeploymentInfo\"\n                sizeBytes:\n                    type: uint64\n                    description: \u003e\n                        A volume's size in bytes\n                    minimum: 1073742000\n                    example: 5368709000\n                createdAt:\n                    $ref: \"#/components/schemas/CreatedAt\"\n                updatedAt:\n                    $ref: \"#/components/schemas/UpdatedAt\"\n                version:\n                    $ref: \"#/components/schemas/Version\"\n\n        DeploymentInfo:\n            type: object\n            properties:\n                id:\n                    $ref: \"#/components/schemas/DeploymentID\"\n                nodeID:\n                    $ref: \"#/components/schemas/NodeID\"\n                hostname:\n                    type: string\n                    description: \u003e\n                        The hostname of the node that is hosting the deployment\n                promotable:\n                    type: boolean\n                    description: \u003e\n                        Indicates if the volume deployment is eligible for promotion\n\n        MasterDeploymentInfo:\n            allOf:\n                - $ref: '#/components/schemas/DeploymentInfo'\n                - type: object\n                  properties:\n                      health:\n                          $ref: \"#/components/schemas/MasterHealth\"\n\n        ReplicaDeploymentInfo:\n            allOf:\n                - $ref: '#/components/schemas/DeploymentInfo'\n                - type: object\n                  properties:\n                      health:\n                          $ref: \"#/components/schemas/ReplicaHealth\"\n                      syncProgress:\n                          $ref: \"#/components/schemas/SyncProgress\"\n\n        Node:\n            type: object\n            properties:\n                id:\n                    $ref: \"#/components/schemas/NodeID\"\n                name:\n                    type: string\n                    readOnly: true\n                    description: \u003e\n                        The hostname of the node.\n\n                        This value is set by the node each time it joins the\n                        StorageOS cluster.\n                    example: db1.lcy.storageos.network\n                health:\n                    $ref: \"#/components/schemas/NodeHealth\"\n                capacity:\n                    $ref: \"#/components/schemas/CapacityStats\"\n                ioEndpoint:\n                    type: string\n                    readOnly: true\n                    description: \u003e\n                        Endpoint at which we operate our dataplane's dfs\n                        service. (used for IO operations)\n\n                        This value is set on startup by the corresponding\n                        environment variable (IO_ADVERTISE_ADDRESS)\n                    example:\n                        - \"192.0.2.1:5703\"\n                supervisorEndpoint:\n                    type: string\n                    readOnly: true\n                    description: \u003e\n                        Endpoint at which we operate our dataplane's supervisor\n                        service (used for sync).\n\n                        This value is set on startup by the corresponding\n                        environment variable (SUPERVISOR_ADVERTISE_ADDRESS)\n                    example:\n                        - \"192.0.2.1:5704\"\n                gossipEndpoint:\n                    type: string\n                    readOnly: true\n                    description: \u003e\n                        Endpoint at which we operate our health checking service.\n\n                        This value is set on startup by the corresponding\n                        environment variable (GOSSIP_ADVERTISE_ADDRESS)\n                    example:\n                        - \"192.0.2.1:5711\"\n                clusteringEndpoint:\n                    type: string\n                    readOnly: true\n                    description: \u003e\n                        Endpoint at which we operate our clustering gRPC API.\n\n                        This value is set on startup by the corresponding\n                        environment variable (INTERNAL_API_ADVERTISE_ADDRESS)\n                    example:\n                        - \"192.0.2.1:5710\"\n                cordoned:\n                    type: boolean\n                    readOnly: true\n                    default: false\n                    description: \u003e\n                        Cordoned describes the cordoned state of the node.\n\n                        A cordoned node will not have new volume deployments scheduled on it\n                cordonedAt: \n                    type: string\n                    format: date-time\n                    readOnly: true\n                    description: |\n                        The time the node has been cordoned. This field's purpose is informative only.\n\n                        String format is RFC3339.\n                    example: \"2019-03-29T23:13:13Z\"\n                labels:\n                    $ref: \"#/components/schemas/Labels\"\n                createdAt:\n                    $ref: \"#/components/schemas/CreatedAt\"\n                updatedAt:\n                    $ref: \"#/components/schemas/UpdatedAt\"\n                version:\n                    $ref: \"#/components/schemas/Version\"\n\n        Namespace:\n            type: object\n            properties:\n                id:\n                    $ref: \"#/components/schemas/NamespaceID\"\n                name:\n                    type: string\n                    readOnly: true\n                    example: \"dev\"\n                labels:\n                    $ref: \"#/components/schemas/Labels\"\n                createdAt:\n                    $ref: \"#/components/schemas/CreatedAt\"\n                updatedAt:\n                    $ref: \"#/components/schemas/UpdatedAt\"\n                version:\n                    $ref: \"#/components/schemas/Version\"\n\n        PolicyGroup:\n            type: object\n            properties:\n                id:\n                    $ref: \"#/components/schemas/PolicyGroupID\"\n                name:\n                    type: string\n                    example: \"dev-users\"\n                users:\n                    type: array\n                    readOnly: true\n                    items:\n                        type: object\n                        properties:\n                            id:\n                                $ref: \"#/components/schemas/UserID\"\n                            username:\n                                type: string\n                                example: \"admin\"\n                    description: The list of user IDs which this policy group governs.\n                    example:\n                        - id: \"82f297ae-8381-4c09-b9a1-8401c83c418d\"\n                          username: \"user_a\"\n                        - id: \"f4bb11d6-594a-4f21-9d1c-d49711a0453e\"\n                          username: \"user_b\"\n                        - id: \"30d3a4dc-971b-4f3e-9b89-5da6fea383ce\"\n                          username: \"user_c\"\n                specs:\n                    type: array\n                    items:\n                        type: object\n                        properties:\n                            namespaceID:\n                                $ref: \"#/components/schemas/NamespaceID\"\n                            resourceType:\n                                type: string\n                                enum:\n                                    - \"*\"\n                                    - \"volume\"\n                                    - \"policy\"\n                                description: \u003e\n                                    The resource type this policy grants access to.\n                                example: \"volume\"\n                            readOnly:\n                                type: boolean\n                                default: false\n                                description: \u003e\n                                    If true, disallows requests that attempt to mutate the\n                                    resource.\n                                example: false\n                    description: A set of authorisation policies to apply to the policy group.\n                    default: []\n                    nullable: true\n                    example:\n                        - namespaceID: \"251f065a-d89b-4426-a752-5fdd144d00e8\"\n                          resourceType: \"*\"\n                          readOnly: false\n                        - namespaceID: \"5f009d1f-6618-43c2-9ae4-e699461dda8e\"\n                          resourceType: \"volume\"\n                          readOnly: true\n                createdAt:\n                    $ref: \"#/components/schemas/CreatedAt\"\n                updatedAt:\n                    $ref: \"#/components/schemas/UpdatedAt\"\n                version:\n                    $ref: \"#/components/schemas/Version\"\n\n        Licence:\n            type: object\n            properties:\n                clusterID:\n                    $ref: \"#/components/schemas/ClusterID\"\n                expiresAt:\n                    $ref: \"#/components/schemas/ExpiresAt\"\n                clusterCapacityBytes:\n                    type: uint64\n                    description: \u003e\n                        The allowed provisioning capacity in bytes\n\n                        This value if for the cluster, if provisioning a volume\n                        brings the cluster's total provisioned capacity above\n                        it the request will fail\n                    minimum: 0\n                    example: 1000000\n                usedBytes:\n                    type: uint64\n                    default: 0\n                    description: \u003e\n                        Sum of the size of all volumes in the cluster\n                    example: 42\n                kind:\n                    type: string\n                    description: \u003e\n                        Denotes which category the licence belongs to\n                    example: \"unregistered\"\n                customerName:\n                    type: string\n                    description: \u003e\n                        A user friendly reference to the customer\n                    example: \"Desmond\"\n                features:\n                    type: array\n                    items:\n                        type: string\n                    nullable: true\n                    description: \u003e\n                        A list of product features which are enabled by the \n                        licence, subject to the installed version.\n                version:\n                    $ref: \"#/components/schemas/Version\"\n            description: \u003e\n                A representation of a cluster's licence properties\n\n        AcceptedMessage:\n            type: object\n            properties:\n                msg:\n                    type: string\n            example:\n                msg: \"asynchronous request accepted with timeout: 10s\"\n\n        UserList:\n            type: array\n            items:\n                $ref: \"#/components/schemas/User\"\n\n        NamespaceList:\n            type: array\n            items:\n                $ref: \"#/components/schemas/Namespace\"\n\n        NodeList:\n            type: array\n            items:\n                $ref: \"#/components/schemas/Node\"\n\n        PolicyGroupList:\n            type: array\n            items:\n                $ref: \"#/components/schemas/PolicyGroup\"\n\n        VolumeList:\n            type: array\n            items:\n                $ref: \"#/components/schemas/Volume\"\n\n        # ------------------------------------------------------------------------------\n        # request schemas\n        #\n        # encapsulated request schemas for use cases where inline definition is not \n        # supported by the openapi codegenerator. this is a bit of a workaround for\n        # bugs when using certain spec description features. \n        # ------------------------------------------------------------------------------\n        SetFailureThresholdRequestData:\n            type: object\n            properties:\n                failureThreshold:\n                    type: uint64\n                    default: 0\n                    minimum: 0\n                    maximum: 5\n                    description: \u003e\n                      The minimum number of replicas required to be online and\n                      receiving writes in order for the volume to remain\n                      read-writable. This value replaces any previously set\n                      failure threshold or intent-based failure mode.\n                    example: 2\n                version:\n                    $ref: \"#/components/schemas/Version\"\n\n        SetFailureModeIntentRequestData:\n            type: object\n            properties:\n                mode:\n                    $ref: \"#/components/schemas/FailureModeIntent\"\n                version:\n                    $ref: \"#/components/schemas/Version\"\n        \n        SetFailureModeRequest:\n            oneOf:\n                - $ref: \"#/components/schemas/SetFailureThresholdRequestData\"\n                - $ref: \"#/components/schemas/SetFailureModeIntentRequestData\"\n\n    parameters:\n        ObjectVersion:\n            name: version\n            in: query\n            description: \u003e\n                This value is used to perform a conditional delete or update of\n                the entity.\n\n                If the entity has been modified since the version token was\n                obtained, the request will fail with a HTTP 409 Conflict.\n            required: true\n            schema:\n                $ref: \"#/components/schemas/Version\"\n        IgnoreVersion:\n            name: ignore-version\n            in: query\n            description: \u003e\n                If set to true this value indicates that the user wants to\n                ignore entity version constraints, thereby \"forcing\" the\n                operation.\n            required: false\n            schema:\n                $ref: \"#/components/schemas/IgnoreVersion\"\n        AsyncHeader:\n            name: async-max\n            in: header\n            schema:\n                type: string\n            description: \u003e\n                Optional header which will make the api request asynchronous. The\n                operation will not be cancelled even if the client disconnect.\n\n                The value of this header defines the timeout duration for the request,\n                it must be set to a valid duration string.\n\n                A duration string is a possibly signed sequence of decimal numbers, each with\n                optional fraction and a unit suffix, such as \"300ms\", or \"2h45m\". Valid time\n                units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n\n                We reject negative or nil duration values.\n            example: async-max:20s\n        AsyncParam:\n            name: async-max\n            in: query\n            schema:\n                type: string\n            description: \u003e\n                Optional parameter which will make the api request asynchronous. The\n                operation will not be cancelled even if the client disconnect.\n\n                The URL parameter value overrides the \"async-max\" header value, if any.\n\n                The value of this header defines the timeout duration for the request,\n                it must be set to a valid duration string.\n\n                A duration string is a possibly signed sequence of decimal numbers, each with\n                optional fraction and a unit suffix, such as \"300ms\", or \"2h45m\". Valid time\n                units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n\n                We reject negative or nil duration values.\n\n    responses:\n        BadRequest:\n            description: The request does not conform to the API specification.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n                    example:\n                        error: a short description of the validation failure\n\n        ServerError:\n            description: \u003e\n                The request caused an internal server error and should be\n                retried.\n\n                Check the health of the node/cluster and if the error persists,\n                contact support.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n\n        StoreError:\n            description: \u003e\n                The server is currently unable to handle the request due to\n                a temporary store failure.\n\n                Check the health of the node/cluster and if the error persists,\n                contact support.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n\n        LicenceRestricted:\n            description: \u003e\n                The requested operation failed because your storageOS licence\n                does not allow it, either create an account for a free licence\n                or buy a professional licence.\n\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n                    example:\n                        error: insufficient allowed capacity (bytes) (used 53687091200, allowed 53687091200, requested 5000000)\n\n        Unauthorised:\n            description: \u003e\n                The requested endpoint requires authentication - you must log in\n                first.\n\n                If attempting to log in, your credentials were not recognised.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n                    example:\n                        error: authentication required\n\n        Forbidden:\n            description: \u003e\n                The authenticated user does not have permission to perform the\n                requested action.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n                    example:\n                        error: unauthorised\n\n        NotFound:\n            description: \u003e\n                A referenced resource does not exist.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n                    example:\n                        error: not found\n\n        InsufficientStorage:\n            description: \u003e\n                Available storage is not enough to handle the request or\n                target node has reached maximum number of attached volumes.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n                    example:\n                        error: insufficient storage capacity available\n\n        StaleWrite:\n            description: \u003e\n                The entity to be wrote has been concurrently updated by another\n                request - the submitted entity data has been replaced.\n\n                The caller should fetch the entity again, check the actions are\n                still required and resubmit the request with the new entity\n                version field.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n                    example:\n                        error: attempting to write stale object\n\n        InvalidStateTransition:\n            description: \u003e\n                An action was requested that cannot be performed on the entity\n                in it's current state.\n\n                As an example, this error might be returned when trying to\n                delete a currently mounted volume.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n                    example:\n                        error: invalid state for operation (currently \"deleted\")\n\n        AlreadyExists:\n            description: \u003e\n                The entity to be wrote uses an identifier that already exists.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n                    example:\n                        error: already exists\n\n        InUse:\n            description: \u003e\n                A referenced entity is currently in use.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n                    example:\n                        error: in use\n\n        InvalidResult:\n            description: \u003e\n                The requested configuration change for the referenced entity\n                cannot be made as it would result in a conflict which\n                invalidates the resultant config.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n                    example:\n                        error: label \\\"a\\\" with value \\\"b\\\" conflicts with label \\\"c\\\" with value \\\"d\\\"\n\n        Locked:\n            description: \u003e\n                A lock is held for the target entity, preventing the operation\n                to be carried out safely.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n                    example:\n                        error: entity locked\n\n        Accepted:\n            description: \u003e\n                An asynchronous request has been accepted\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/AcceptedMessage\"\n\npaths:\n    /auth/login:\n        post:\n            summary: Authenticate a user\n            operationId: authenticateUser\n            description: Generate a new JWT token for a user.\n            requestBody:\n                description: The credentials to use for authentication.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: AuthUserData\n                            required:\n                                - username\n                                - password\n                            properties:\n                                username:\n                                    type: string\n                                password:\n                                    type: string\n                                    format: password\n                            example:\n                                username: admin\n                                password: supersecret\n            responses:\n                \"200\":\n                    description: Successfully authenticated the returned user.\n                    headers:\n                        Authorization:\n                            description: \u003e\n                                The JWT token - this header should be sent to\n                                the server to perform an authenticated request.\n                            schema:\n                                type: string\n                        Authorization-Expires-Seconds:\n                            description: \u003e\n                                A formatted string representing the number of \n                                seconds after which the login session will \n                                expire.\n                            schema:\n                                type: uint64\n                                example: 60\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/UserSession\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    # The user is not recognised, or the password is incorrect\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /auth/refresh:\n        post:\n            summary: Refresh the JWT\n            operationId: refreshJwt\n            description: Obtain a fresh token with an updated expiry deadline.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: Refresh was successful\n                    headers:\n                        Authorization:\n                            description: The new JWT token.\n                            schema:\n                                type: string\n                        Authorization-Expires-In:\n                            description: \u003e\n                                A formatted string representing the duration \n                                after which the refreshed token will expire.\n                            schema:\n                                type: uint64\n                                example: 60\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/UserSession\"\n                \"401\":\n                    # The user has been removed from the system since acquiring\n                    # the token\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /users:\n        post:\n            summary: Create a new user\n            operationId: createUser\n            description: \u003e\n                Create a new user in the cluster - only administrators can\n                create new users.\n            security:\n                - jwt: []\n            requestBody:\n                description: Data required to create a new user in the cluster.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            # Defined to be able to mark \"username\" and \"password\" as required\n                            type: object\n                            title: CreateUserData\n                            required:\n                                - username\n                                - password\n                            properties:\n                                username:\n                                    type: string\n                                    example: admin\n                                password:\n                                    type: string\n                                    format: password\n                                    description: If not present, the existing password is not changed\n                                    default: unchanged\n                                    writeOnly: true\n                                    example: turtlesaregreat\n                                isAdmin:\n                                    type: boolean\n                                    default: false\n                                    description: \u003e\n                                        If true, this user is an administrator of the cluster.\n\n                                        Administrators bypass the usual authentication checks\n                                        and are granted access to all resources. Some actions\n                                        (such as adding a new user) can only be performed by an\n                                        administrator.\n                                    example: true\n                                groups:\n                                    type: array\n                                    items:\n                                        $ref: \"#/components/schemas/PolicyGroupID\"\n                                    default: []\n                                    nullable: true\n                                    description: \u003e\n                                        Defines a set of policy group IDs this\n                                        user is a member of.\n\n                                        Policy groups can be used to logically\n                                        group users and apply authorisation \n                                        policies to all members.\n                                    example:\n                                        - \"24d5db6f-9738-4f17-a257-b9dd41a35309\"\n                                        - \"4223b453-4d47-49d5-960f-23fc7a8153ba\"\n            responses:\n                \"201\":\n                    description: The account was successfully created\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/User\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"409\":\n                    $ref: \"#/components/responses/AlreadyExists\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        get:\n            summary: Fetch the list of users\n            operationId: listUsers\n            description: Fetch the list of users of the cluster.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: A list of cluster users.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/UserList\"\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /users/{id}:\n        parameters:\n            - name: id\n              in: path\n              description: ID of a user\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/UserID\"\n\n        get:\n            summary: Fetch a user\n            operationId: getUser\n            description: Fetch the user identified by id.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: The user information.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/User\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        put:\n            summary: Update a user\n            operationId: updateUser\n            description: \u003e\n                Update the user identified by id.\n\n                This request will not succeed if the target account is the\n                currently authenticated account. Use the separate users/self\n                endpoint for this purpose.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n            requestBody:\n                description: The new User data to store.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: UpdateUserData\n                            properties:\n                                password:\n                                    type: string\n                                    format: password\n                                    description: If not present, the existing password is not changed\n                                    default: unchanged\n                                    writeOnly: true\n                                    example: turtlesaregreat\n                                isAdmin:\n                                    type: boolean\n                                    default: false\n                                    description: \u003e\n                                        If true, this user is an administrator of the cluster.\n\n                                        Administrators bypass the usual authentication checks\n                                        and are granted access to all resources. Some actions\n                                        (such as adding a new user) can only be performed by an\n                                        administrator.\n                                    example: true\n                                groups:\n                                    type: array\n                                    items:\n                                        $ref: \"#/components/schemas/PolicyGroupID\"\n                                    default: []\n                                    nullable: true\n                                    description: \u003e\n                                        Defines a set of policy group IDs this\n                                        user is a member of.\n\n                                        Policy groups can be used to logically\n                                        group users and apply authorisation \n                                        policies to all members.\n                                    example:\n                                        - \"24d5db6f-9738-4f17-a257-b9dd41a35309\"\n                                        - \"4223b453-4d47-49d5-960f-23fc7a8153ba\"\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n            responses:\n                \"200\":\n                    description: The account was successfully updated\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/User\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        delete:\n            summary: Delete a user\n            operationId: deleteUser\n            description: \u003e\n                Remove the user identified by id.\n\n                This request will not succeed if the target account is the\n                currently authenticated account. Use the separate users/self\n                endpoint for this purpose.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/ObjectVersion\"\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n\n            responses:\n                \"200\":\n                    description: The user was successfully deleted.\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n    /users/{id}/sessions:\n        parameters:\n            - name: id\n              in: path\n              description: ID of a user\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/UserID\"\n\n        delete:\n            summary: Invalidate login sessions\n            operationId: deleteSessions\n            description: \u003e\n                Invalidates active JWTs on a per-user basis, specified\n                by id.\n\n                This request will not succeed if the target account is the\n                currently authenticated account. Use the separate users/self\n                endpoint for this purpose.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: The users current session was successfully invalidated.\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n    /users/self:\n        get:\n            summary: Get the currently authenticated user's information\n            operationId: getAuthenticatedUser\n            description: Fetch authenticated user's information.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: The authenticated user's information.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/User\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        put:\n            summary: Update the authenticated user's information\n            operationId: updateAuthenticatedUser\n            description: Update the authenticated user.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n            requestBody:\n                description: The new authenticated user's data.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: UpdateAuthenticatedUserData\n                            properties:\n                                password:\n                                    type: string\n                                    format: password\n                                    description: If not present, the existing password is not changed\n                                    default: unchanged\n                                    writeOnly: true\n                                    example: turtlesaregreat\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n            responses:\n                \"200\":\n                    description: The account was successfully updated\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/User\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        delete:\n            summary: Delete the authenticated user\n            operationId: deleteAuthenticatedUser\n            description: Remove the authenticated user from the cluster.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/ObjectVersion\"\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n\n            responses:\n                \"200\":\n                    description: The authenticated user was successfully deleted.\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n    /users/self/sessions:\n        delete:\n            summary: Invalidate the logged in user's sessions\n            operationId: deleteAuthenticatedUserSessions\n            description: Invalidates logged in user's active JWTs.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: The authenticated user's sessions have been invalidated.\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /namespaces:\n        post:\n            summary: Create a new namespace\n            operationId: createNamespace\n            description: \u003e\n                Create a new namespace in the cluster - only administrators can\n                create new namespaces.\n            security:\n                - jwt: []\n            requestBody:\n                description: Data required to create a new namespace in the cluster.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: CreateNamespaceData\n                            properties:\n                                name:\n                                    type: string\n                                    pattern: '^[a-z0-9.\\-]{1,253}$'\n                                    description: \u003e\n                                        The name of the namespace shown in the CLI and UI\n                                    example: \"dev\"\n                                labels:\n                                    $ref: \"#/components/schemas/Labels\"\n            responses:\n                \"201\":\n                    description: The namespace was successfully created\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Namespace\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"409\":\n                    $ref: \"#/components/responses/AlreadyExists\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        get:\n            summary: Fetch the list of namespaces\n            operationId: listNamespaces\n            description: Fetch the list of namespaces in the cluster.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: A list of cluster namespaces.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/NamespaceList\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /namespaces/{id}:\n        parameters:\n            - name: id\n              in: path\n              description: ID of a namespace\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NamespaceID\"\n\n        get:\n            summary: Fetch a namespace\n            operationId: getNamespace\n            description: Fetch the namespace identified by id.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: The namespace information.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Namespace\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        put:\n            summary: Update a namespace\n            operationId: updateNamespace\n            description: Update the namespace identified by id.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n            requestBody:\n                description: The new namespace data to store.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: UpdateNamespaceData\n                            properties:\n                                labels:\n                                    $ref: \"#/components/schemas/Labels\"\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n            responses:\n                \"200\":\n                    description: The namespace was successfully updated\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Namespace\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        delete:\n            summary: Delete a namespace\n            operationId: deleteNamespace\n            description: Remove the namespace identified by id.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/ObjectVersion\"\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n\n            responses:\n                \"200\":\n                    description: The namespace was successfully deleted.\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"409\":\n                    $ref: \"#/components/responses/InUse\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /nodes:\n        get:\n            summary: Fetch the list of nodes\n            operationId: listNodes\n            description: Fetch the list of nodes of the cluster.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: A list of cluster nodes.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/NodeList\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /nodes/{id}:\n        parameters:\n            - name: id\n              in: path\n              description: ID of a node\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NodeID\"\n\n        get:\n            summary: Fetch a node\n            operationId: getNode\n            description: Fetch the node identified by id.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: The node information.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Node\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        put:\n            summary: Update a node\n            operationId: updateNode\n            description: \u003e\n                Update the non-storageos labels configured for the node \n                identified by id.\n            security:\n                - jwt: []\n            requestBody:\n                description: \u003e\n                    Update the label configuration of the node to the desired\n                    state. Alterations of StorageOS labels are rejected. \n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: UpdateNodeData\n                            properties:\n                                labels:\n                                    $ref: \"#/components/schemas/Labels\"\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n            responses:\n                \"200\":\n                    description: The node was successfully updated\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Node\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        delete:\n            summary: Delete a node\n            operationId: deleteNode\n            description: \u003e\n                Remove the node identified by id.\n\n                A node can only be deleted if it is currently offline and does\n                not host any master deployments.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/ObjectVersion\"\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n                - $ref: \"#/components/parameters/AsyncHeader\"\n                - $ref: \"#/components/parameters/AsyncParam\"\n\n            responses:\n                \"200\":\n                    description: The node was successfully deleted.\n\n                \"202\":\n                    $ref: \"#/components/responses/Accepted\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"409\":\n                    $ref: \"#/components/responses/InUse\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"423\":\n                    $ref: \"#/components/responses/Locked\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /nodes/{id}/compute-only:\n        parameters:\n            - name: id\n              in: path\n              description: ID of a Node\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NodeID\"\n\n        put:\n            summary: Modify the computeonly behaviour state for a node\n            operationId: setComputeOnly\n            description: \u003e\n                Set the compute-only configuration state for the node corresponding \n                to id given by the request.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n            requestBody: \n                description: Desired compute-only configuration state for the node.\n                required: true\n                content: \n                    application/json:\n                        schema:\n                            type: object\n                            title: SetComputeOnlyNodeData\n                            properties:\n                                computeOnly:\n                                    type: boolean\n                                    description: \u003e\n                                        Marks the node's desired configuration \n                                        state as compute-only. This will result\n                                        in the node being avoided for volume\n                                        placement\n                                    example: true\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n            responses:\n                \"200\":\n                    description: The node was successfully updated\n                    content:\n                        application/json: \n                            schema: \n                                $ref: \"#/components/schemas/Node\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /nodes/{id}/cordon:\n        parameters:\n            - name: id\n              in: path\n              description: ID of a Node\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NodeID\"\n\n        put:\n            summary: Modify the cordoned state for a node\n            operationId: setCordoned\n            description: \u003e\n                Set the cordoned state for the node corresponding \n                to id given by the request.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n            requestBody: \n                description: Desired cordoned state for the node.\n                required: true\n                content: \n                    application/json:\n                        schema:\n                            type: object\n                            title: SetCordonedNodeData\n                            properties:\n                                cordoned:\n                                    type: boolean\n                                    description: \u003e\n                                        Marks the node's desired cordoned state state. \n                                        A cordoned node will not have new volume deployments scheduled on it.\n                                    example: true\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n            responses:\n                \"200\":\n                    description: The node was successfully updated\n                    content:\n                        application/json: \n                            schema: \n                                $ref: \"#/components/schemas/Node\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n\n    /policies:\n        post:\n            summary: Create a new policy group\n            operationId: createPolicyGroup\n            description: \u003e\n                Create a new policy group in the cluster - only administrators\n                can create new policy groups.\n            security:\n                - jwt: []\n            requestBody:\n                description: Data required to create a new policy group in the cluster.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: CreatePolicyGroupData\n                            properties:\n                                name:\n                                    type: string\n                                    example: \"dev-users\"\n                                specs:\n                                    type: array\n                                    items:\n                                        type: object\n                                        properties:\n                                            namespaceID:\n                                                $ref: \"#/components/schemas/NamespaceID\"\n                                            resourceType:\n                                                type: string\n                                                enum:\n                                                    - \"*\"\n                                                    - \"cluster\"\n                                                    - \"namespace\"\n                                                    - \"node\"\n                                                    - \"policy\"\n                                                    - \"user\"\n                                                    - \"volume\"\n                                                description: \u003e\n                                                    The resource type this policy grants access to.\n                                                example: \"volume\"\n                                            readOnly:\n                                                type: boolean\n                                                default: false\n                                                description: \u003e\n                                                    If true, disallows requests that attempt to mutate the\n                                                    resource.\n                                                example: false\n                                    description: A set of authorisation policies to apply to the policy group.\n                                    default: []\n                                    nullable: true\n                                    example:\n                                        - namespaceID: \"251f065a-d89b-4426-a752-5fdd144d00e8\"\n                                          resourceType: \"*\"\n                                          readOnly: false\n                                        - namespaceID: \"5f009d1f-6618-43c2-9ae4-e699461dda8e\"\n                                          resourceType: \"volume\"\n                                          readOnly: true\n            responses:\n                \"201\":\n                    description: The policy group was successfully created\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/PolicyGroup\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"409\":\n                    $ref: \"#/components/responses/AlreadyExists\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        get:\n            summary: Fetch the list of policy groups\n            operationId: listPolicyGroups\n            description: Fetch the list of policy groups in the cluster.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: A list of cluster policy groups.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/PolicyGroupList\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /policies/{id}:\n        parameters:\n            - name: id\n              in: path\n              description: ID of a policy group\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/PolicyGroupID\"\n\n        get:\n            summary: Fetch a policy group\n            operationId: getPolicyGroup\n            description: Fetch the policy group identified by id.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: The policy group information.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/PolicyGroup\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        put:\n            summary: Update a policy group\n            operationId: updatePolicyGroup\n            description: Update the policy group identified by id.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n            requestBody:\n                description: The new policy group data to store.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: UpdatePolicyGroupData\n                            properties:\n                                specs:\n                                    type: array\n                                    items:\n                                        type: object\n                                        properties:\n                                            namespaceID:\n                                                $ref: \"#/components/schemas/NamespaceID\"\n                                            resourceType:\n                                                type: string\n                                                enum:\n                                                    - \"*\"\n                                                    - \"volume\"\n                                                    - \"policy\"\n                                                description: \u003e\n                                                    The resource type this policy grants access to.\n                                                example: \"volume\"\n                                            readOnly:\n                                                type: boolean\n                                                default: false\n                                                description: \u003e\n                                                    If true, disallows requests that attempt to mutate the\n                                                    resource.\n                                                example: false\n                                    description: A set of authorisation policies to apply to the policy group.\n                                    default: []\n                                    nullable: true\n                                    example:\n                                        - namespaceID: \"251f065a-d89b-4426-a752-5fdd144d00e8\"\n                                          resourceType: \"*\"\n                                          readOnly: false\n                                        - namespaceID: \"5f009d1f-6618-43c2-9ae4-e699461dda8e\"\n                                          resourceType: \"volume\"\n                                          readOnly: true\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n            responses:\n                \"200\":\n                    description: The policy group was successfully updated\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/PolicyGroup\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        delete:\n            summary: Delete a policy group\n            operationId: deletePolicyGroup\n            description: Remove the policy group identified by id.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/ObjectVersion\"\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n\n            responses:\n                \"200\":\n                    description: The policy group was successfully deleted.\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"409\":\n                    $ref: \"#/components/responses/InUse\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /namespaces/{namespaceID}/volumes:\n        parameters:\n            - name: namespaceID\n              in: path\n              description: ID of a Namespace\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NamespaceID\"\n        post:\n            summary: Create a new Volume in the specified namespace\n            operationId: createVolume\n            description: Create a new volume in the given namespace\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/AsyncHeader\"\n                - $ref: \"#/components/parameters/AsyncParam\"\n            requestBody:\n                description: Data required to create a new volume in the cluster.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: CreateVolumeData\n                            required:\n                                - name\n                                - namespaceID\n                                - sizeBytes\n                                - fsType\n                            properties:\n                                namespaceID:\n                                    $ref: \"#/components/schemas/NamespaceID\"\n                                labels:\n                                    $ref: \"#/components/schemas/Labels\"\n                                name:\n                                    type: string\n                                    pattern: '^[a-z0-9.\\-]{1,253}$'\n                                    description: \u003e\n                                        The name of the volume shown in the CLI and UI\n                                    example: \"data\"\n                                fsType:\n                                    $ref: \"#/components/schemas/FsType\"\n                                description:\n                                    type: string\n                                    example: \"This volume contains the data for my app\"\n                                sizeBytes:\n                                    type: uint64\n                                    description: \u003e\n                                        A volume's size in bytes\n                                    minimum: 0\n                                    example: 5000\n                                placementStrategy:\n                                    $ref: \"#/components/schemas/Strategy\"\n            responses:\n                \"201\":\n                    description: The volume was successfully created\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Volume\"\n                \"202\":\n                    $ref: \"#/components/responses/Accepted\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"409\":\n                    $ref: \"#/components/responses/AlreadyExists\"\n\n                \"451\":\n                    $ref: \"#/components/responses/LicenceRestricted\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n                \"507\":\n                    $ref: \"#/components/responses/InsufficientStorage\"\n\n        get:\n            summary: Fetch the list of volumes in the given namespace\n            operationId: listVolumes\n            description: Fetch the list of volumes in the cluster.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: A list of the namespace's volumes.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/VolumeList\"\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /namespaces/{namespaceID}/volumes/{id}:\n        parameters:\n            - name: namespaceID\n              in: path\n              description: ID of a Namespace\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NamespaceID\"\n            - name: id\n              in: path\n              description: ID of a Volume\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/VolumeID\"\n\n        get:\n            summary: Fetch a volume\n            operationId: getVolume\n            description: Fetch the volume identified by id.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: The volume information.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Volume\"\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n        put:\n            summary: Update a volume\n            operationId: updateVolume\n            description: \u003e\n                Update the description and non-storageos labels configured for\n                the volume identified by id.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n                - $ref: \"#/components/parameters/AsyncHeader\"\n                - $ref: \"#/components/parameters/AsyncParam\"\n            requestBody:\n                description: \u003e\n                    Update the volume description and label configuration to the\n                    desired state. Alterations of StorageOS labels are rejected.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: UpdateVolumeData\n                            properties:\n                                labels:\n                                    $ref: \"#/components/schemas/Labels\"\n                                description:\n                                    type: string\n                                    example: \"This volume contains the data for my app\"\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n            responses:\n                \"200\":\n                    description: The volume was successfully updated\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Volume\"\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"451\":\n                    $ref: \"#/components/responses/LicenceRestricted\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n\n        delete:\n            summary: Delete a volume\n            operationId: deleteVolume\n            description: Remove the volume identified by id.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/ObjectVersion\"\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n\n                - $ref: \"#/components/parameters/AsyncHeader\"\n                - $ref: \"#/components/parameters/AsyncParam\"\n\n                - name: offline-delete\n                  in: query\n                  description: \u003e\n                    If set to true, enables deletion of a volume when all \n                    deployments are offline, bypassing the host nodes which\n                    cannot be reached.\n\n                    An offline delete request will be rejected when either\n                    a) there are online deployments for the target volume or\n                    b) there is evidence that an unreachable node still has\n                    the volume master\n                  required: false\n                  schema:\n                      type: boolean\n                      default: false\n                      example: true\n\n            responses:\n                \"200\":\n                    description: The volume was successfully deleted.\n\n                \"202\":\n                    $ref: \"#/components/responses/Accepted\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"409\":\n                    $ref: \"#/components/responses/InUse\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"422\":\n                    $ref: \"#/components/responses/InvalidStateTransition\"\n\n                \"423\":\n                    $ref: \"#/components/responses/Locked\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n    /namespaces/{namespaceID}/volumes/{id}/attach:\n        parameters:\n            - name: namespaceID\n              in: path\n              description: ID of a Namespace\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NamespaceID\"\n            - name: id\n              in: path\n              description: ID of a Volume\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/VolumeID\"\n\n        post:\n            summary: Attach a volume to the given node\n            operationId: attachVolume\n            description: \u003e\n                Attach the volume identified by id to the node identified in the\n                request's body.\n            security:\n                - jwt: []\n            requestBody:\n                description: Node ID to which the volume will be attached.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: AttachVolumeData\n                            properties:\n                                nodeID:\n                                    $ref: \"#/components/schemas/NodeID\"\n            responses:\n                \"200\":\n                    description: The volume was successfully attached.\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"409\":\n                    $ref: \"#/components/responses/InUse\"\n\n                \"422\":\n                    $ref: \"#/components/responses/InvalidStateTransition\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"507\":\n                    $ref: \"#/components/responses/InsufficientStorage\"\n\n        delete:\n            summary: Detach the given volume\n            operationId: detachVolume\n            description: Detach the volume identified by id.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/ObjectVersion\"\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n                - $ref: \"#/components/parameters/AsyncHeader\"\n                - $ref: \"#/components/parameters/AsyncParam\"\n            responses:\n                \"200\":\n                    description: The volume was successfully detached.\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"409\":\n                    $ref: \"#/components/responses/InUse\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"422\":\n                    $ref: \"#/components/responses/InvalidStateTransition\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n    /namespaces/{namespaceID}/volumes/{id}/nfs/attach:\n        parameters:\n            - name: namespaceID\n              in: path\n              description: ID of a Namespace\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NamespaceID\"\n            - name: id\n              in: path\n              description: ID of a Volume\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/VolumeID\"\n\n        post:\n            summary: attach and share the volume using NFS\n            operationId: attachNFSVolume\n            description: \u003e\n                Attach the given volume as an NFS volume.\n                \n                If no export configuration has been set via the\n                /nfs/export-config endpoint, the nfs service will start with\n                defaults settings (sharing the volume at its root).\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n                - $ref: \"#/components/parameters/AsyncHeader\"\n                - $ref: \"#/components/parameters/AsyncParam\"\n            requestBody:\n                description: NFS volume configuration. The version is the corresponding volume's version.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: AttachNFSVolumeData\n                            properties:\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n\n            responses:\n                \"200\":\n                    description: The volume was successfully attached.\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"409\":\n                    $ref: \"#/components/responses/InUse\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"422\":\n                    $ref: \"#/components/responses/InvalidStateTransition\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n                    \n    /namespaces/{namespaceID}/volumes/{id}/nfs/mount-endpoint:\n        parameters:\n            - name: namespaceID\n              in: path\n              description: ID of a Namespace\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NamespaceID\"\n            - name: id\n              in: path\n              description: ID of a Volume\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/VolumeID\"\n\n        put:\n            summary: Update an nfs volume's mount endpoint\n            operationId: updateNFSVolumeMountEndpoint\n            description: \u003e\n                Update the NFS volume's mount endpoint\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n                - $ref: \"#/components/parameters/AsyncHeader\"\n                - $ref: \"#/components/parameters/AsyncParam\"\n            requestBody:\n                description: \u003e\n                  Update an existing NFS volume's mount endpoint\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: NFSVolumeMountEndpoint\n                            properties:\n                                mountEndpoint:\n                                    type: string\n                                    default: \"\"\n                                    description: \u003e\n                                        The address to which the NFS server is bound.\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n\n            responses:\n                \"200\":\n                    description: The volume's mount endpoint was successfully updated.\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"409\":\n                    $ref: \"#/components/responses/InUse\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n    /namespaces/{namespaceID}/volumes/{id}/nfs/export-config:\n        parameters:\n            - name: namespaceID\n              in: path\n              description: ID of a Namespace\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NamespaceID\"\n            - name: id\n              in: path\n              description: ID of a Volume\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/VolumeID\"\n\n        put:\n            summary: Update an nfs volume's export configuration\n            operationId: updateNFSVolumeExports\n            description: \u003e\n                Update the NFS volume's export configuration\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n                - $ref: \"#/components/parameters/AsyncHeader\"\n                - $ref: \"#/components/parameters/AsyncParam\"\n            requestBody:\n                description: \u003e\n                    Updates an existing volume's NFS export configuration.\n\n                    The volume will use the given export configuration once\n                    attached.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: NFSVolumeExports\n                            properties:\n                                exports:\n                                    type: array\n                                    items:\n                                        $ref: \"#/components/schemas/NfsExportConfig\"\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n\n            responses:\n                \"200\":\n                    description: The volume's NFS export configuration was successfully updated.\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"409\":\n                    $ref: \"#/components/responses/InUse\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n    /namespaces/{namespaceID}/volumes/{id}/replicas:\n        parameters:\n            - name: namespaceID\n              in: path\n              description: ID of a Namespace\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NamespaceID\"\n            - name: id\n              in: path\n              description: ID of a Volume\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/VolumeID\"\n        put:\n            summary: Set the number of replicas to maintain for the volume.\n            operationId: setReplicas\n            description: \u003e \n                Set the number of replicas for the volume identified by id to\n                the number specified in the request's body. This modifies the\n                protected StorageOS system label \"storageos.com/replicas\".\n\n                This request changes the desired replica count, and returns an\n                error if changing the desired replica count failed. StorageOS\n                satisfies the new replica configuration asynchronously.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n            requestBody:\n                description: Number of replicas\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: SetReplicasRequest\n                            properties:\n                                replicas:\n                                    type: uint64\n                                    default: 0\n                                    minimum: 0\n                                    maximum: 5\n                                    description: \u003e\n                                        The number of replicas desired.\n                                    example: 2\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n            responses:\n                \"202\":\n                    $ref: \"#/components/responses/Accepted\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"422\":\n                    $ref: \"#/components/responses/InvalidStateTransition\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /namespaces/{namespaceID}/volumes/{id}/failure-mode:\n        parameters:\n            - name: namespaceID\n              in: path\n              description: ID of a Namespace\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NamespaceID\"\n            - name: id\n              in: path\n              description: ID of a Volume\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/VolumeID\"\n        put:\n            summary: Set the failure mode of the volume.\n            operationId: setFailureMode\n            description: \u003e\n                Set the behaviour of the volume identified by id when responding\n                to observed replica failure. This modifies the protected \n                StorageOS system label \"storageos.com/failure-mode\".\n\n                This request may either specify a precise failure threshold or a\n                more flexible intent-based failure mode operating with respect \n                to the volume's current replication target.\n\n                A request will be denied if the current state of the volume does\n                not satisfy the requested failure behaviour.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n            requestBody:\n                description: Failure mode to use\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/SetFailureModeRequest\"\n            responses:\n                \"200\":\n                    description: The updated volume information.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Volume\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n                \n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"409\":\n                    $ref: \"#/components/responses/InvalidResult\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"422\":\n                    $ref: \"#/components/responses/InvalidStateTransition\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n    \n    /namespaces/{namespaceID}/volumes/{id}/size:\n        parameters:\n            - name: namespaceID\n              in: path\n              description: ID of a Namespace\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NamespaceID\"\n            - name: id\n              in: path\n              description: ID of a Volume\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/VolumeID\"\n\n        put:\n            summary: Increase the size of a volume.\n            operationId: resizeVolume\n            description: \u003e \n                Resize the volume identified by id in the namespace identified\n                by namespaceID. A volume's size cannot be reduced.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/AsyncHeader\"\n                - $ref: \"#/components/parameters/AsyncParam\"\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n            requestBody:\n                description: The new size to give the volume\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: ResizeVolumeRequest\n                            properties:\n                                sizeBytes:\n                                    type: uint64\n                                    description: \u003e\n                                        The desired new size for the volume in \n                                        bytes. This value cannot be less than \n                                        the current size of the volume.\n                                    minimum: 1073742000\n                                    example: 5368709000\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n            responses:\n                \"200\":\n                  description: The volume was resized successfully.\n                  content: \n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Volume\"\n                \"202\":\n                    $ref: \"#/components/responses/Accepted\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"422\":\n                    $ref: \"#/components/responses/InvalidStateTransition\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /namespaces/{namespaceID}/volumes/{id}/placement-strategy:\n        parameters:\n            - name: namespaceID\n              in: path\n              description: ID of a Namespace\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NamespaceID\"\n            - name: id\n              in: path\n              description: ID of a Volume\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/VolumeID\"\n        put:\n            summary: Sets the placement strategy of the volume.\n            operationId: setPlacementStrategy\n            description: \u003e\n                Sets the desired behaviour of the volume identified by id when\n                provisioning new replicas.\n\n                The already placed replicas will not be moved, instead, during\n                future failovers, node restarts (containing the volume replicas)\n                and any other operation that requires a replica to be\n                provisioned will now follow this rule thus having an \"eventually\n                consistent\" response.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n            requestBody:\n                description: Placement strategy to use\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: SetPlacementStrategyData\n                            properties:\n                                placementStrategy:\n                                    $ref: \"#/components/schemas/Strategy\"\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n            responses:\n                \"200\":\n                    $ref: \"#/components/responses/Accepted\"\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n                \n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n\n                \"409\":\n                    $ref: \"#/components/responses/InvalidResult\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"422\":\n                    $ref: \"#/components/responses/InvalidStateTransition\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /cluster:\n        get:\n            summary: Retrieves the cluster's global configuration settings\n            operationId: getCluster\n            description: \u003e\n                Retrieves the current global configuration settings in use by\n                the cluster.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: The cluster-wide configuration information.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Cluster\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        put:\n            summary: Update the cluster's global configuration settings\n            operationId: updateCluster\n            description: \u003e\n                Update the global configuration settings to use for the cluster.\n                Updating the cluster log level does not require a restart\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n            requestBody:\n                description: The new cluster-wide configuration settings to apply.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: UpdateClusterData\n                            properties:\n                                disableTelemetry:\n                                    type: boolean\n                                    default: false\n                                    description: \u003e\n                                        Disables collection of telemetry data\n                                        across the cluster.\n                                    example: false\n                                disableCrashReporting:\n                                    type: boolean\n                                    default: false\n                                    description: \u003e\n                                        Disables collection of reports for any\n                                        fatal crashes across the cluster.\n                                    example: false\n                                disableVersionCheck:\n                                    type: boolean\n                                    default: false\n                                    description: \u003e\n                                        Disables the mechanism responsible for\n                                        checking if there is an updated version\n                                        of StorageOS available for installation.\n                                    example: false\n                                logLevel:\n                                    $ref: \"#/components/schemas/LogLevel\"\n                                logFormat:\n                                    $ref: \"#/components/schemas/LogFormat\"\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n            responses:\n                \"200\":\n                    description: The cluster was successfully updated.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Cluster\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n    \n    /cluster/licence:\n        get:\n            summary: Retrieves the cluster's licence information\n            operationId: getLicence\n            description: \u003e\n                Retrieves the cluster's current licence information\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: The cluster's licence information.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Licence\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n        put:\n            summary: Update the licence global configuration settings\n            operationId: updateLicence\n            description: Update the cluster's licence.\n            security:\n                - jwt: []\n            parameters:\n                - $ref: \"#/components/parameters/IgnoreVersion\"\n            requestBody:\n                description: \u003e\n                    A StorageOS product licence key, used to\n                    register a cluster. The format of this\n                    type is opaque and may change.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            title: UpdateLicence\n                            properties:\n                                key:\n                                    type: string\n                                    description: \u003e\n                                        A StorageOS product licence key, used to\n                                        register a cluster. The format of this\n                                        type is opaque and may change.\n                                version:\n                                    $ref: \"#/components/schemas/Version\"\n            responses:\n                \"200\":\n                    description: The provided licence was successfully applied.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Licence\"\n\n                \"400\":\n                    $ref: \"#/components/responses/BadRequest\"\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"412\":\n                    $ref: \"#/components/responses/StaleWrite\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n                \n\n    /diagnostics:\n        get:\n            summary: Retrieves a diagnostics bundle from the target node\n            operationId: getDiagnostics\n            description: \u003e\n                Requests that the recipient node gathers information\n                about the global state of the cluster and detailed information\n                about the local state of each node in the cluster, using it to\n                then build and return a bundle which can be used for \n                troubleshooting. For clusters in an unhealthy state this may\n                result in a slower, incomplete response. \n\n                If the cluster has many nodes, it is recommended to use the \n                single node diagnostic collection endpoint to target the desired\n                nodes in turn.\n\n                The request will only be served when the authenticated user\n                is an administrator.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: \u003e\n                        A diagnostics bundle was successfully built and\n                        returned.\n                    content:\n                        application/octet-stream:\n                            schema:\n                                type: string\n                                format: binary\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"502\":\n                    description: \u003e\n                        The server is returning an incomplete diagnostic bundle.\n\n                        A bundle may contain partial information if one or more\n                        nodes failed to respond, or some other error occurred\n                        during the collection process.\n\n                        The returned bundle is still valid and should be sent to\n                        StorageOS.\n                    content:\n                        application/octet-stream:\n                            schema:\n                                type: string\n                                format: binary\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n    /diagnostics/{id}:\n        parameters:\n            - name: id\n              in: path\n              description: ID of a node\n              required: true\n              schema:\n                  $ref: \"#/components/schemas/NodeID\"\n        get:\n            summary: Retrieves a single node diagnostics bundle from the target node\n            operationId: getSingleNodeDiagnostics\n            description: \u003e\n                Requests that the recipient node gathers information about the\n                global state of the cluster and detailed information about the\n                target node, using it to then build and return a bundle\n                which can be used for troubleshooting. If the target node is\n                in an unhealthy state then the response may be slower and \n                incomplete.\n\n                The request will only be served when the authenticated user\n                is an administrator.\n            security:\n                - jwt: []\n            responses:\n                \"200\":\n                    description: \u003e\n                        A diagnostics bundle was successfully built and\n                        returned for just the target node.\n                    content:\n                        application/octet-stream:\n                            schema:\n                                type: string\n                                format: binary\n\n                \"401\":\n                    $ref: \"#/components/responses/Unauthorised\"\n\n                \"403\":\n                    $ref: \"#/components/responses/Forbidden\"\n\n                \"500\":\n                    $ref: \"#/components/responses/ServerError\"\n\n                \"502\":\n                    description: \u003e\n                        The server is returning an incomplete diagnostic bundle.\n\n                        A single-node bundle may contain partial information if\n                        the target node failed to respond, or did not gather all\n                        available diagnostics during the collection process.\n\n                        The returned bundle may still contain useful data and \n                        should be sent to StorageOS.\n                    content:\n                        application/octet-stream:\n                            schema:\n                                type: string\n                                format: binary\n\n                \"503\":\n                    $ref: \"#/components/responses/StoreError\"\n\n    /openapi:\n        get:\n            summary: Serves this openapi spec file\n            operationId: spec\n            description: Serves this openapi spec file\n            responses:\n                \"200\":\n                    description: The openapi spec file has been served\n                    content:\n                        text/yaml:\n                            schema:\n                                $ref: \"#/components/schemas/OpenAPISpec\"\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Node\": parse schema: property \"capacity\": parse schema: resolve \"#/components/schemas/CapacityStats\": parse schema: property \"available\": parse schema: unexpected schema type: \"uint64\""
}