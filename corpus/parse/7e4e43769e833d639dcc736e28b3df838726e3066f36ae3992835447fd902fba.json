{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mojaloop/pisp-project"
		},
		"file": {
			"name": "thirdparty-dfsp-api.yaml",
			"size": 0,
			"path": "src/interface/thirdparty-dfsp-api.yaml",
			"byteSize": 117978,
			"content": "openapi: 3.0.2\ninfo:\n  title: Mojaloop Third Party API (DFSP)\n  version: '1.0'\n  description: |\n    A Mojaloop API for DFSPs supporting Third Party functions.\n    DFSPs who want to enable Payment Initiation Service Providers (PISPs) to perform actions on behalf of a DFSP's user should  implement this API.\n    PISPs should implement the accompanying API - Mojaloop Third  Party API (PISP) instead.\n  license:\n    name: Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version)\n    url: 'https://github.com/mojaloop/mojaloop-specification/blob/master/LICENSE.md'\nservers:\n  - url: /\npaths:\n  '/accounts/{ID}':\n    parameters:\n      - name: ID\n        in: path\n        required: true\n        schema:\n          type: string\n        description: The identifier value.\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    get:\n      operationId: GetAccountsByUserId\n      summary: GetAccountsByUserId\n      description: |\n        The HTTP request `GET /accounts/{ID}` is used to retrieve the list of potential accounts available for linking.\n      tags:\n        - accounts\n        - sampled\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/0'\n      responses:\n        '202':\n          $ref: '#/paths/~1consents/post/responses/202'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n    put:\n      description: |\n        The HTTP request `PUT /accounts/{ID}` is used to return the list of potential accounts available for linking\n      operationId: UpdateAccountsByUserId\n      summary: UpdateAccountsByUserId\n      tags:\n        - accounts\n        - sampled\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: AccountsIDPutResponse\n              type: object\n              description: 'The object sent in a `PUT /accounts/{ID}` request.'\n              properties:\n                accounts:\n                  type: array\n                  items:\n                    title: Account\n                    type: object\n                    description: Data model for the complex type Account.\n                    properties:\n                      accountNickname:\n                        title: Name\n                        type: string\n                        pattern: '^(?!\\s*$)[\\w .,''-]{1,128}$'\n                        description: |-\n                          The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.\n\n                          Regular Expression - The regular expression for restricting the Name type is \"^(?!\\s*$)[\\w .,'-]{1,128}$\". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (â€˜), dash (-), comma (,) and space characters ( ).\n\n                          **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.\n                      id:\n                        title: AccountId\n                        type: string\n                        description: |\n                          A long-lived unique account identifier provided by the DFSP. This MUST NOT\n                          be Bank Account Number or anything that may expose a User's private bank\n                          account information.\n                        pattern: '^([0-9A-Za-z_~\\-\\.]+[0-9A-Za-z_~\\-])$'\n                        minLength: 1\n                        maxLength: 1023\n                      currency:\n                        title: Currency\n                        description: 'The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.'\n                        type: string\n                        minLength: 3\n                        maxLength: 3\n                        enum:\n                          - AED\n                          - AFN\n                          - ALL\n                          - AMD\n                          - ANG\n                          - AOA\n                          - ARS\n                          - AUD\n                          - AWG\n                          - AZN\n                          - BAM\n                          - BBD\n                          - BDT\n                          - BGN\n                          - BHD\n                          - BIF\n                          - BMD\n                          - BND\n                          - BOB\n                          - BRL\n                          - BSD\n                          - BTN\n                          - BWP\n                          - BYN\n                          - BZD\n                          - CAD\n                          - CDF\n                          - CHF\n                          - CLP\n                          - CNY\n                          - COP\n                          - CRC\n                          - CUC\n                          - CUP\n                          - CVE\n                          - CZK\n                          - DJF\n                          - DKK\n                          - DOP\n                          - DZD\n                          - EGP\n                          - ERN\n                          - ETB\n                          - EUR\n                          - FJD\n                          - FKP\n                          - GBP\n                          - GEL\n                          - GGP\n                          - GHS\n                          - GIP\n                          - GMD\n                          - GNF\n                          - GTQ\n                          - GYD\n                          - HKD\n                          - HNL\n                          - HRK\n                          - HTG\n                          - HUF\n                          - IDR\n                          - ILS\n                          - IMP\n                          - INR\n                          - IQD\n                          - IRR\n                          - ISK\n                          - JEP\n                          - JMD\n                          - JOD\n                          - JPY\n                          - KES\n                          - KGS\n                          - KHR\n                          - KMF\n                          - KPW\n                          - KRW\n                          - KWD\n                          - KYD\n                          - KZT\n                          - LAK\n                          - LBP\n                          - LKR\n                          - LRD\n                          - LSL\n                          - LYD\n                          - MAD\n                          - MDL\n                          - MGA\n                          - MKD\n                          - MMK\n                          - MNT\n                          - MOP\n                          - MRO\n                          - MUR\n                          - MVR\n                          - MWK\n                          - MXN\n                          - MYR\n                          - MZN\n                          - NAD\n                          - NGN\n                          - NIO\n                          - NOK\n                          - NPR\n                          - NZD\n                          - OMR\n                          - PAB\n                          - PEN\n                          - PGK\n                          - PHP\n                          - PKR\n                          - PLN\n                          - PYG\n                          - QAR\n                          - RON\n                          - RSD\n                          - RUB\n                          - RWF\n                          - SAR\n                          - SBD\n                          - SCR\n                          - SDG\n                          - SEK\n                          - SGD\n                          - SHP\n                          - SLL\n                          - SOS\n                          - SPL\n                          - SRD\n                          - STD\n                          - SVC\n                          - SYP\n                          - SZL\n                          - THB\n                          - TJS\n                          - TMT\n                          - TND\n                          - TOP\n                          - TRY\n                          - TTD\n                          - TVD\n                          - TWD\n                          - TZS\n                          - UAH\n                          - UGX\n                          - USD\n                          - UYU\n                          - UZS\n                          - VEF\n                          - VND\n                          - VUV\n                          - WST\n                          - XAF\n                          - XCD\n                          - XDR\n                          - XOF\n                          - XPF\n                          - YER\n                          - ZAR\n                          - ZMW\n                          - ZWD\n                    required:\n                      - accountNickname\n                      - id\n                      - currency\n              required:\n                - accounts\n            example:\n              - accountNickname: dfspa.user.nickname1\n                id: dfspa.username.1234\n                currency: ZAR\n              - accountNickname: dfspa.user.nickname2\n                id: dfspa.username.5678\n                currency: USD\n      responses:\n        '200':\n          description: OK\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  '/accounts/{ID}/error':\n    parameters:\n      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    put:\n      description: |\n        The HTTP request `PUT /accounts/{ID}/error` is used to return error information\n      operationId: UpdateAccountsByUserIdError\n      summary: UpdateAccountsByUserIdError\n      tags:\n        - accounts\n        - sampled\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        description: Details of the error returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ErrorInformationObject\n              type: object\n              description: Data model for the complex type object that contains ErrorInformation.\n              properties:\n                errorInformation:\n                  title: ErrorInformation\n                  type: object\n                  description: Data model for the complex type ErrorInformation.\n                  properties:\n                    errorCode:\n                      title: ErrorCode\n                      type: string\n                      pattern: '^[1-9]\\d{3}$'\n                      description: 'The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.'\n                      example: '5100'\n                    errorDescription:\n                      title: ErrorDescription\n                      type: string\n                      minLength: 1\n                      maxLength: 128\n                      description: Error description string.\n                    extensionList:\n                      $ref: '#/paths/~1thirdpartyRequests~1authorizations/post/requestBody/content/application~1json/schema/properties/extensionList'\n                  required:\n                    - errorCode\n                    - errorDescription\n              required:\n                - errorInformation\n      responses:\n        '200':\n          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  /consentRequests:\n    parameters:\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    post:\n      tags:\n        - consentRequests\n        - sampled\n      operationId: CreateConsentRequest\n      summary: CreateConsentRequest\n      description: |\n        A request from a PISP to a DFSP to start the process of delegating consent\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/0'\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        description: The consentRequest to create\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ConsentRequestsPostRequest\n              type: object\n              description: The object sent in a `POST /consentRequests` request.\n              properties:\n                consentRequestId:\n                  title: CorrelationId\n                  type: string\n                  pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'\n                  description: 'Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (â€˜-â€˜).'\n                  example: b51ec534-ee48-4575-b6a9-ead2955b8069\n                userId:\n                  type: string\n                  description: ID used to associate request with GET /accounts request.\n                scopes:\n                  type: array\n                  items:\n                    title: Scope\n                    type: object\n                    description: Scope + Account Identifier mapping for a Consent.\n                    example: |\n                      {\n                        accountId: \"dfsp.username.5678\",\n                        actions: [ \"accounts.transfer\", \"accounts.getBalance\" ]\n                      }\n                    properties:\n                      accountId:\n                        $ref: '#/paths/~1accounts~1%7BID%7D/put/requestBody/content/application~1json/schema/properties/accounts/items/properties/id'\n                      actions:\n                        type: array\n                        items:\n                          title: ConsentScopeType\n                          type: string\n                          enum:\n                            - accounts.getBalance\n                            - accounts.transfer\n                          description: |\n                            The scopes requested for a ConsentRequest.\n                            - \"accounts.getBalance\" - Get the balance of a given account.\n                            - \"accounts.transfer\" - Initiate a transfer from an account.\n                    required:\n                      - accountId\n                      - actions\n                authChannels:\n                  type: array\n                  items:\n                    title: ConsentRequestChannelType\n                    type: string\n                    enum:\n                      - WEB\n                      - OTP\n                    description: |\n                      The auth channel being used for the consentRequest.\n                      - \"WEB\" - The Web auth channel.\n                      - \"OTP\" - The OTP auth channel.\n                callbackUri:\n                  type: string\n                  description: The callback uri that the user will be redirected to after completing the out of band WEB authentication with the DFSP. Used to allow the DFSP to whitelist the PISP's url ahead of time.\n              required:\n                - consentRequestId\n                - userId\n                - scopes\n                - authChannels\n                - callbackUri\n            example:\n              id: '456'\n              initiatorId: pispA\n              authChannels:\n                - WEB\n                - OTP\n              scopes:\n                - accountId: dfspa.username.1234\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n                - accountId: dfspa.username.5678\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n              callbackUri: 'pisp-app://callback.com'\n      responses:\n        '202':\n          $ref: '#/paths/~1consents/post/responses/202'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  '/consentRequests/{ID}':\n    parameters:\n      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    put:\n      tags:\n        - consentRequests\n        - sampled\n      operationId: UpdateConsentRequest\n      summary: UpdateConsentRequest\n      description: |\n        DFSP updates auth channels and/or auth uri in response to consentRequest.\n\n        PISP updates the consentRequest to include authorization token from their user,\n        which the DFSP is to then verify.\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - title: ConsentRequestsIDPutResponseWeb\n                  type: object\n                  description: |\n                    The object sent in a `PUT /consentRequests/{ID}` request.\n\n                    Schema used in the request consent phase of the account linking web flow,\n                    the result is the PISP being instructed on a specific URL where this\n                    supposed user should be redirected. This URL should be a place where\n                    the user can prove their identity (e.g., by logging in).\n                  properties:\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/scopes/items'\n                    authChannels:\n                      type: array\n                      items:\n                        title: ConsentRequestChannelTypeWeb\n                        type: string\n                        enum:\n                          - WEB\n                        description: |\n                          The web auth channel being used for PUT consentRequest/{ID} request.\n                    callbackUri:\n                      type: string\n                      description: The callback uri that the user will be redirected to after completing the out of band WEB authentication with the DFSP. Used to allow the DFSP to whitelist the PISP's url ahead of time.\n                    authUri:\n                      type: string\n                      description: The callback uri that the pisp app should redirect to for user to complete their login.\n                  required:\n                    - scopes\n                    - authChannels\n                    - callbackUri\n                    - authUri\n                  additionalProperties: false\n                - title: ConsentRequestsIDPutResponseOTP\n                  type: object\n                  description: |\n                    The object sent in a `PUT /consentRequests/{ID}` request.\n\n                    Schema used in the request consent phase of the account linking OTP/SMS flow.\n                  properties:\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/scopes/items'\n                    authChannels:\n                      type: array\n                      items:\n                        title: ConsentRequestChannelTypeOTP\n                        type: string\n                        enum:\n                          - OTP\n                        description: |\n                          The OTP auth channel being used for PUT consentRequest/{ID} request.\n                    callbackUri:\n                      type: string\n                      description: The callback uri that the user will be redirected to after completing the out of band WEB authentication with the DFSP. Used to allow the DFSP to whitelist the PISP's url ahead of time.\n                  required:\n                    - scopes\n                    - authChannels\n                  additionalProperties: false\n      responses:\n        '202':\n          $ref: '#/paths/~1consents/post/responses/202'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n    patch:\n      tags:\n        - consentRequests\n        - sampled\n      operationId: PatchConsentRequest\n      summary: PatchConsentRequest\n      description: |\n        PISP sends user's OTP token to a DFSP to verify user trusts aforementioned PISP\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/0'\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ConsentRequestsIDPatchRequest\n              type: object\n              description: 'The object sent in a `PATCH /consentRequests/{ID}` request.'\n              properties:\n                authToken:\n                  type: string\n              required:\n                - authToken\n      responses:\n        '202':\n          $ref: '#/paths/~1consents/post/responses/202'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  '/consentRequests/{ID}/error':\n    parameters:\n      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    put:\n      tags:\n        - consentRequests\n      operationId: NotifyErrorConsentRequests\n      summary: NotifyErrorConsentRequests\n      description: |\n        DFSP responds to the PISP if something went wrong with validating an OTP or secret.\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        description: Error information returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema'\n      responses:\n        '200':\n          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  /consents:\n    parameters:\n      - name: Content-Type\n        in: header\n        schema:\n          type: string\n        required: true\n        description: The `Content-Type` header indicates the specific version of the API used to send the payload body.\n      - name: Date\n        in: header\n        schema:\n          type: string\n        required: true\n        description: The `Date` header field indicates the date when the request was sent.\n      - name: X-Forwarded-For\n        in: header\n        schema:\n          type: string\n        required: false\n        description: |-\n          The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.\n\n          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.\n      - name: FSPIOP-Source\n        in: header\n        schema:\n          type: string\n        required: true\n        description: The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`).\n      - name: FSPIOP-Destination\n        in: header\n        schema:\n          type: string\n        required: false\n        description: 'The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty.'\n      - name: FSPIOP-Encryption\n        in: header\n        schema:\n          type: string\n        required: false\n        description: The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request.\n      - name: FSPIOP-Signature\n        in: header\n        schema:\n          type: string\n        required: false\n        description: The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature.\n      - name: FSPIOP-URI\n        in: header\n        schema:\n          type: string\n        required: false\n        description: 'The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).'\n      - name: FSPIOP-HTTP-Method\n        in: header\n        schema:\n          type: string\n        required: false\n        description: 'The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).'\n    post:\n      tags:\n        - consents\n        - sampled\n      operationId: PostConsents\n      summary: PostConsents\n      description: |\n        DFSP sends this request to the PISP after granting consent. DFSP sends this request to an Auth service to validate a signed consent.\n      parameters:\n        - name: Accept\n          in: header\n          required: true\n          schema:\n            type: string\n          description: The `Accept` header field indicates the version of the API the client would like the server to use.\n        - name: Content-Length\n          in: header\n          required: false\n          schema:\n            type: integer\n          description: |-\n            The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.\n\n            **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - title: ConsentPostRequestAUTH\n                  type: object\n                  description: |\n                    The object sent in a `POST /consents` request to AUTH-SERVICE by DFSP to store registered consent with PublicKey\n                    and whatever needed to perform authorization validation later\n                  properties:\n                    consentId:\n                      allOf:\n                        - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'\n                      description: |\n                        Common ID between the PISP and FSP for the Consent object\n                        decided by the DFSP who creates the Consent\n                        This field is REQUIRED for POST /consent.\n                        creation of this Consent.\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/scopes/items'\n                    credential:\n                      allOf:\n                        - $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/credential'\n                  required:\n                    - consentId\n                    - scopes\n                    - credential\n                  additionalProperties: false\n                - title: ConsentPostRequestPISP\n                  type: object\n                  description: The object sent in a `POST /consents` request to PISP by DFSP to ask for delivering the credential object.\n                  properties:\n                    consentId:\n                      allOf:\n                        - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'\n                      description: |\n                        Common ID between the PISP and FSP for the Consent object\n                        decided by the DFSP who creates the Consent\n                        This field is REQUIRED for POST /consent.\n                    consentRequestId:\n                      allOf:\n                        - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'\n                      description: |\n                        The id of the ConsentRequest that was used to initiate the\n                        creation of this Consent.\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/scopes/items'\n                  required:\n                    - consentId\n                    - scopes\n                    - consentRequestId\n      responses:\n        '202':\n          description: Accepted\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                title: ErrorInformationResponse\n                type: object\n                description: Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.\n                properties:\n                  errorInformation:\n                    $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema/properties/errorInformation'\n          headers:\n            Content-Length:\n              required: false\n              schema:\n                type: integer\n              description: |-\n                The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.\n\n                **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).\n            Content-Type:\n              schema:\n                type: string\n              required: true\n              description: The `Content-Type` header indicates the specific version of the API used to send the payload body.\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'\n        '405':\n          description: Method Not Allowed\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'\n        '406':\n          description: Not Acceptable\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'\n        '501':\n          description: Not Implemented\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1consents/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1consents/post/responses/400/headers/Content-Type'\n  '/consents/{ID}':\n    parameters:\n      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    get:\n      description: |\n        The HTTP request `GET /consents/{ID}` is used to get information regarding a consent object created or requested earlier. The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`. summary: GetConsent\n      tags:\n        - consents\n      operationId: GetConsent\n      summary: GetConsent\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/0'\n      responses:\n        '202':\n          $ref: '#/paths/~1consents/post/responses/202'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n    patch:\n      description: |\n        The HTTP request `PATCH /consents/{ID}` is used\n\n        - In account linking in the Credential Registration phase. Used by a DFSP\n          to notify a PISP a credential has been verified and registered with an\n          Auth service.\n\n        - In account unlinking by a hub hosted auth service and by DFSPs\n          in non-hub hosted scenarios to notify participants of a consent being revoked.\n\n          Called by a `auth-service` to notify a PISP and DFSP of consent status in hub hosted scenario.\n          Called by a `DFSP` to notify a PISP of consent status in non-hub hosted scenario.\n      tags:\n        - consents\n        - sampled\n      operationId: PatchConsentByID\n      summary: PatchConsentByID\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - title: ConsentsIDPatchResponseVerified\n                  description: |\n                    PATCH /consents/{ID} request object.\n\n                    Sent by the DFSP to the PISP when a consent is verified.\n                    Used in the \"Register Credential\" part of the Account linking flow.\n                  type: object\n                  properties:\n                    credential:\n                      type: object\n                      properties:\n                        status:\n                          title: ConsentStatusType\n                          type: string\n                          enum:\n                            - VERIFIED\n                          description: |\n                            The status of the Consent.\n                            - \"VERIFIED\" - The Consent is valid and verified.\n                      required:\n                        - status\n                  required:\n                    - credential\n                - title: ConsentsIDPatchResponseRevoked\n                  description: |\n                    PATCH /consents/{ID} request object.\n\n                    Sent to both the PISP and DFSP when a consent is revoked.\n                    Used in the \"Unlinking\" part of the Account Unlinking flow.\n                  type: object\n                  properties:\n                    status:\n                      title: ConsentStatusType\n                      type: string\n                      enum:\n                        - REVOKED\n                      description: |\n                        The status of the Consent.\n                        - \"REVOKED\" - The Consent is no longer valid and has been revoked.\n                    revokedAt:\n                      $ref: '#/paths/~1thirdpartyRequests~1transactions~1%7BID%7D/patch/requestBody/content/application~1json/schema/properties/completedTimestamp'\n                  required:\n                    - status\n                    - revokedAt\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/0'\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      responses:\n        '200':\n          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n    put:\n      description: |\n        The HTTP request `PUT /consents/{ID}` is used by the PISP and Auth Service.\n\n        - Called by a `PISP` to after signing a challenge. Sent to an DFSP for verification.\n        - Called by a `auth-service` to notify a DFSP that a credential has been verified and registered.\n      tags:\n        - consents\n        - sampled\n      operationId: PutConsentByID\n      summary: PutConsentByID\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - title: ConsentsIDPutResponseSigned\n                  type: object\n                  description: |\n                    The HTTP request `PUT /consents/{ID}` is used by the PISP to update a Consent with a signed challenge and register a credential.\n                    Called by a `PISP` to after signing a challenge. Sent to a DFSP for verification.\n                  properties:\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/scopes/items'\n                    credential:\n                      title: SignedCredential\n                      type: object\n                      description: |\n                        A credential used to allow a user to prove their identity and access\n                        to an account with a DFSP.\n\n                        SignedCredential is a special formatting of the credential to allow us to be\n                        more explicit about the `status` field - it should only ever be PENDING when\n                        updating a credential.\n                      properties:\n                        credentialType:\n                          title: CredentialType\n                          type: string\n                          enum:\n                            - FIDO\n                          description: |\n                            The type of the Credential.\n                            - \"FIDO\" - A FIDO public/private keypair\n                        status:\n                          type: string\n                          enum:\n                            - PENDING\n                          description: The challenge has signed but not yet verified.\n                        payload:\n                          oneOf:\n                            - $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/1/properties/credential/properties/payload'\n                            - title: GenericCredential\n                              type: object\n                              description: |\n                                A publicKey + signature of a challenge for a generic public/private keypair\n                              properties:\n                                publicKey:\n                                  $ref: '#/paths/~1thirdpartyRequests~1verifications/post/requestBody/content/application~1json/schema/oneOf/1/properties/value'\n                                signature:\n                                  $ref: '#/paths/~1thirdpartyRequests~1verifications/post/requestBody/content/application~1json/schema/oneOf/1/properties/value'\n                              required:\n                                - publicKey\n                                - signature\n                              additionalProperties: false\n                      required:\n                        - credentialType\n                        - status\n                        - payload\n                      additionalProperties: false\n                  required:\n                    - scopes\n                    - credential\n                  additionalProperties: false\n                - title: ConsentsIDPutResponseVerified\n                  type: object\n                  description: |\n                    The HTTP request `PUT /consents/{ID}` is used by the DFSP or Auth-Service to update a Consent object once it has been Verified.\n                    Called by a `auth-service` to notify a DFSP that a credential has been verified and registered.\n                  properties:\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/scopes/items'\n                    credential:\n                      title: VerifiedCredential\n                      type: object\n                      description: |\n                        A credential used to allow a user to prove their identity and access\n                        to an account with a DFSP.\n\n                        VerifiedCredential is a special formatting of the credential to allow us to be\n                        more explicit about the `status` field - it should only ever be VERIFIED when\n                        updating a credential.\n                      properties:\n                        credentialType:\n                          $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/credential/properties/credentialType'\n                        status:\n                          type: string\n                          enum:\n                            - VERIFIED\n                          description: 'The Credential is valid, and ready to be used by the PISP.'\n                        payload:\n                          title: FIDOPublicKeyCredentialAttestation\n                          type: object\n                          description: |\n                            An object sent in a `PUT /consents/{ID}` request.\n                            Based on https://w3c.github.io/webauthn/#iface-pkcredential\n                            and mostly on: https://webauthn.guide/#registration\n                            AuthenticatorAttestationResponse\n                            https://w3c.github.io/webauthn/#dom-authenticatorattestationresponse-attestationobject\n                          properties:\n                            id:\n                              type: string\n                              description: |\n                                credential id: identifier of pair of keys, base64 encoded\n                                https://w3c.github.io/webauthn/#ref-for-dom-credential-id\n                              minLength: 59\n                              maxLength: 118\n                            rawId:\n                              type: string\n                              description: |\n                                raw credential id: identifier of pair of keys, base64 encoded\n                              minLength: 59\n                              maxLength: 118\n                            response:\n                              type: object\n                              description: |\n                                AuthenticatorAttestationResponse\n                              properties:\n                                clientDataJSON:\n                                  type: string\n                                  description: |\n                                    JSON string with client data\n                                  minLength: 121\n                                  maxLength: 512\n                                attestationObject:\n                                  type: string\n                                  description: |\n                                    CBOR.encoded attestation object\n                                  minLength: 306\n                                  maxLength: 2048\n                              required:\n                                - clientDataJSON\n                                - attestationObject\n                              additionalProperties: false\n                            type:\n                              type: string\n                              description: 'response type, we need only the type of public-key'\n                              enum:\n                                - public-key\n                          required:\n                            - id\n                            - rawId\n                            - response\n                            - type\n                          additionalProperties: false\n                      required:\n                        - credentialType\n                        - status\n                        - payload\n                      additionalProperties: false\n                  required:\n                    - scopes\n                    - credential\n                  additionalProperties: false\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      responses:\n        '200':\n          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'\n        '202':\n          $ref: '#/paths/~1consents/post/responses/202'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n    delete:\n      description: |\n        The HTTP request `DELETE /consents/{ID}` is used to mark as deleted a previously created consent.\n\n        - Called by a PISP when a user wants to remove their consent.\n      operationId: DeleteConsentByID\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/0'\n      tags:\n        - consents\n      responses:\n        '202':\n          $ref: '#/paths/~1consents/post/responses/202'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  '/consents/{ID}/error':\n    parameters:\n      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    put:\n      tags:\n        - consents\n      operationId: NotifyErrorConsents\n      summary: NotifyErrorConsents\n      description: |\n        DFSP responds to the PISP if something went wrong with validating or storing consent.\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        description: Error information returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema'\n      responses:\n        '200':\n          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  /thirdpartyRequests/authorizations:\n    parameters:\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    post:\n      description: |\n        The HTTP request `POST /thirdpartyRequests/authorizations` is used to request the Payer to enter the applicable credentials in the PISP system.\n      operationId: PostThirdpartyRequestsAuthorizations\n      summary: PostThirdpartyRequestsAuthorizations\n      tags:\n        - authorizations\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/0'\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        description: Authorization request details\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ThirdpartyRequestsAuthorizationsPostRequest\n              description: POST /thirdpartyRequests/authorizations request object.\n              type: object\n              properties:\n                authorizationRequestId:\n                  $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'\n                transactionRequestId:\n                  $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'\n                challenge:\n                  type: string\n                  description: The challenge that the PISP's client is to sign\n                transferAmount:\n                  allOf:\n                    - $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/amount/allOf/0'\n                  description: The amount that will be debited from the sending customerâ€™s  account as a consequence of the transaction.\n                payeeReceiveAmount:\n                  allOf:\n                    - $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/amount/allOf/0'\n                  description: The amount that will be credited to the receiving customerâ€™s  account as a consequence of the transaction.\n                fees:\n                  allOf:\n                    - $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/amount/allOf/0'\n                  description: The amount of fees that the paying customer will be charged as part of the transaction.\n                payer:\n                  allOf:\n                    - $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/payer/allOf/0'\n                  description: 'Information about the Payer type, id, sub-type/id, FSP Id in the proposed financial transaction.'\n                payee:\n                  allOf:\n                    - $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/payee/allOf/0'\n                  description: Information about the Payee in the proposed financial transaction.\n                transactionType:\n                  title: TransactionType\n                  type: object\n                  description: Data model for the complex type TransactionType.\n                  properties:\n                    scenario:\n                      title: TransactionScenario\n                      type: string\n                      enum:\n                        - DEPOSIT\n                        - WITHDRAWAL\n                        - TRANSFER\n                        - PAYMENT\n                        - REFUND\n                      description: |-\n                        Below are the allowed values for the enumeration.\n                        - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.\n                        - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumerâ€™s account to a Business account, and physical cash is given from the Business User to the Consumer.\n                        - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.\n                        - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.\n                        - REFUND - Used for performing a refund of transaction.\n                      example: DEPOSIT\n                    subScenario:\n                      title: TransactionSubScenario\n                      type: string\n                      pattern: '^[A-Z_]{1,32}$'\n                      description: 'Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).'\n                      example: LOCALLY_DEFINED_SUBSCENARIO\n                    initiator:\n                      title: TransactionInitiator\n                      type: string\n                      enum:\n                        - PAYER\n                        - PAYEE\n                      description: |-\n                        Below are the allowed values for the enumeration.\n                        - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.\n                        - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.\n                      example: PAYEE\n                    initiatorType:\n                      title: TransactionInitiatorType\n                      type: string\n                      enum:\n                        - CONSUMER\n                        - AGENT\n                        - BUSINESS\n                        - DEVICE\n                      description: |-\n                        Below are the allowed values for the enumeration.\n                        - CONSUMER - Consumer is the initiator of the transaction.\n                        - AGENT - Agent is the initiator of the transaction.\n                        - BUSINESS - Business is the initiator of the transaction.\n                        - DEVICE - Device is the initiator of the transaction.\n                      example: CONSUMER\n                    refundInfo:\n                      title: Refund\n                      type: object\n                      description: Data model for the complex type Refund.\n                      properties:\n                        originalTransactionId:\n                          $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'\n                        refundReason:\n                          title: RefundReason\n                          type: string\n                          minLength: 1\n                          maxLength: 128\n                          description: Reason for the refund.\n                          example: Free text indicating reason for the refund.\n                      required:\n                        - originalTransactionId\n                    balanceOfPayments:\n                      title: BalanceOfPayments\n                      type: string\n                      pattern: '^[1-9]\\d{2}$'\n                      description: '(BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.'\n                      example: '123'\n                  required:\n                    - scenario\n                    - initiator\n                    - initiatorType\n                expiration:\n                  allOf:\n                    - $ref: '#/paths/~1thirdpartyRequests~1transactions~1%7BID%7D/patch/requestBody/content/application~1json/schema/properties/completedTimestamp'\n                  description: 'The time by which the transfer must be completed, set by the payee DFSP.'\n                extensionList:\n                  title: ExtensionList\n                  type: object\n                  description: 'Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.'\n                  properties:\n                    extension:\n                      type: array\n                      items:\n                        title: Extension\n                        type: object\n                        description: Data model for the complex type Extension.\n                        properties:\n                          key:\n                            title: ExtensionKey\n                            type: string\n                            minLength: 1\n                            maxLength: 32\n                            description: Extension key.\n                          value:\n                            title: ExtensionValue\n                            type: string\n                            minLength: 1\n                            maxLength: 128\n                            description: Extension value.\n                        required:\n                          - key\n                          - value\n                      minItems: 1\n                      maxItems: 16\n                      description: Number of Extension elements.\n                  required:\n                    - extension\n              required:\n                - authorizationRequestId\n                - transactionRequestId\n                - challenge\n                - transferAmount\n                - payeeReceiveAmount\n                - fees\n                - payer\n                - payee\n                - transactionType\n                - expiration\n              additionalProperties: false\n            example:\n              authorizationRequestId: 33333333-0000-0000-0000-000000000000\n              transactionRequestId: 00000000-0000-0000-0000-000000000000\n              challenge: \u003cbase64 encoded binary - the encoded challenge\u003e\n              transferAmount:\n                amount: '100'\n                currency: USD\n              payeeReceiveAmount:\n                amount: '99'\n                currency: USD\n              fees:\n                amount: '1'\n                currency: USD\n              payee:\n                partyIdInfo:\n                  partyIdType: MSISDN\n                  partyIdentifier: +44 1234 5678\n                  fspId: dfspb\n              payer:\n                partyIdType: THIRD_PARTY_LINK\n                partyIdentifier: qwerty-123456\n                fspId: dfspa\n              transactionType:\n                scenario: TRANSFER\n                initiator: PAYER\n                initiatorType: CONSUMER\n              expiration: '2020-06-15T12:00:00.000'\n      responses:\n        '202':\n          $ref: '#/paths/~1consents/post/responses/202'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  '/thirdpartyRequests/authorizations/{ID}':\n    parameters:\n      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    put:\n      description: |\n        The callback PUT /thirdpartyRequests/authorizations/{ID} is used to inform the client of the\n        result of a previously-requested authorization. The ID in the URI should\n        contain the one that was used in the POST /authorizations/ requestBody.transactionRequestId @ OUTBOUND\n      operationId: PutThirdpartyRequestsAuthorizationsById\n      summary: PutThirdpartyRequestsAuthorizationsById\n      tags:\n        - authorizations\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        description: Signed authorization object\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - title: ThirdpartyRequestsAuthorizationsIDPutResponseGeneric\n                  type: object\n                  description: 'The object sent in the PUT /thirdpartyRequests/authorizations/{ID} callback.'\n                  properties:\n                    responseType:\n                      title: AuthorizationResponseType\n                      description: |\n                        The customer rejected the terms of the transfer.\n                      type: string\n                      enum:\n                        - REJECTED\n                  required:\n                    - responseType\n                - title: ThirdpartyRequestsAuthorizationsIDPutResponseFIDO\n                  type: object\n                  description: 'The object sent in the PUT /thirdpartyRequests/authorizations/{ID} callback.'\n                  properties:\n                    responseType:\n                      title: AuthorizationResponseType\n                      description: |\n                        The customer accepted the terms of the transfer\n                      type: string\n                      enum:\n                        - ACCEPTED\n                    signedPayload:\n                      type: object\n                      properties:\n                        signedPayloadType:\n                          $ref: '#/paths/~1thirdpartyRequests~1verifications/post/requestBody/content/application~1json/schema/oneOf/0/properties/signedPayloadType'\n                        value:\n                          $ref: '#/paths/~1thirdpartyRequests~1verifications/post/requestBody/content/application~1json/schema/oneOf/0/properties/value'\n                      required:\n                        - signedPayloadType\n                        - value\n                      additionalProperties: false\n                  required:\n                    - responseType\n                    - signedPayload\n                  additionalProperties: false\n                - title: ThirdpartyRequestsAuthorizationsIDPutResponseGeneric\n                  type: object\n                  description: 'The object sent in the PUT /thirdpartyRequests/authorizations/{ID} callback.'\n                  properties:\n                    responseType:\n                      $ref: '#/paths/~1thirdpartyRequests~1authorizations~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/1/properties/responseType'\n                    signedPayload:\n                      type: object\n                      properties:\n                        signedPayloadType:\n                          $ref: '#/paths/~1thirdpartyRequests~1verifications/post/requestBody/content/application~1json/schema/oneOf/1/properties/signedPayloadType'\n                        value:\n                          $ref: '#/paths/~1thirdpartyRequests~1verifications/post/requestBody/content/application~1json/schema/oneOf/1/properties/value'\n                      required:\n                        - signedPayloadType\n                        - value\n                      additionalProperties: false\n                  required:\n                    - responseType\n                    - signedPayload\n                  additionalProperties: false\n            example:\n              signedPayloadType: FIDO\n              signedPayload:\n                id: 45c-TkfkjQovQeAWmOy-RLBHEJ_e4jYzQYgD8VdbkePgM5d98BaAadadNYrknxgH0jQEON8zBydLgh1EqoC9DA\n                rawId: 45c+TkfkjQovQeAWmOy+RLBHEJ/e4jYzQYgD8VdbkePgM5d98BaAadadNYrknxgH0jQEON8zBydLgh1EqoC9DA==\n                response:\n                  authenticatorData: SZYN5YgOjGh0NBcPZHZgW4/krrmihjLHmVzzuoMdl2MBAAAACA==\n                  clientDataJSON: eyJ0eXBlIjoid2ViYXV0aG4uZ2V0IiwiY2hhbGxlbmdlIjoiQUFBQUFBQUFBQUFBQUFBQUFBRUNBdyIsIm9yaWdpbiI6Imh0dHA6Ly9sb2NhbGhvc3Q6NDIxODEiLCJjcm9zc09yaWdpbiI6ZmFsc2UsIm90aGVyX2tleXNfY2FuX2JlX2FkZGVkX2hlcmUiOiJkbyBub3QgY29tcGFyZSBjbGllbnREYXRhSlNPTiBhZ2FpbnN0IGEgdGVtcGxhdGUuIFNlZSBodHRwczovL2dvby5nbC95YWJQZXgifQ==\n                  signature: MEUCIDcJRBu5aOLJVc/sPyECmYi23w8xF35n3RNhyUNVwQ2nAiEA+Lnd8dBn06OKkEgAq00BVbmH87ybQHfXlf1Y4RJqwQ8=\n                type: public-key\n      responses:\n        '200':\n          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  '/thirdpartyRequests/authorizations/{ID}/error':\n    parameters:\n      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    put:\n      tags:\n        - thirdpartyRequests\n        - sampled\n      operationId: PutThirdpartyRequestsAuthorizationsByIdAndError\n      summary: PutThirdpartyRequestsAuthorizationsByIdAndError\n      description: |\n        The HTTP request `PUT /thirdpartyRequests/authorizations/{ID}/error` is used by the DFSP or PISP to inform\n        the other party that something went wrong with a Thirdparty Transaction Authorization Request.\n\n        The PISP may use this to tell the DFSP that the Thirdparty Transaction Authorization Request is invalid or doesn't\n        match a `transactionRequestId`.\n\n        The DFSP may use this to tell the PISP that the signed challenge returned in `PUT /thirdpartyRequest/authorizations/{ID}`\n        was invalid.\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        description: Error information returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema'\n      responses:\n        '200':\n          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  /thirdpartyRequests/transactions:\n    parameters:\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    post:\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/0'\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        description: Transaction request to be created.\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ThirdpartyRequestsTransactionsPostRequest\n              type: object\n              description: The object sent in the POST /thirdpartyRequests/transactions request.\n              properties:\n                transactionRequestId:\n                  allOf:\n                    - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'\n                  description: |\n                    Common ID between the FSPs for the transaction request object. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request.\n                payee:\n                  allOf:\n                    - title: Party\n                      type: object\n                      description: Data model for the complex type Party.\n                      properties:\n                        partyIdInfo:\n                          $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/payer/allOf/0'\n                        merchantClassificationCode:\n                          title: MerchantClassificationCode\n                          type: string\n                          pattern: '^[\\d]{1,4}$'\n                          description: 'A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.'\n                        name:\n                          title: PartyName\n                          type: string\n                          minLength: 1\n                          maxLength: 128\n                          description: Name of the Party. Could be a real name or a nickname.\n                        personalInfo:\n                          title: PartyPersonalInfo\n                          type: object\n                          description: Data model for the complex type PartyPersonalInfo.\n                          properties:\n                            complexName:\n                              title: PartyComplexName\n                              type: object\n                              description: Data model for the complex type PartyComplexName.\n                              properties:\n                                firstName:\n                                  title: FirstName\n                                  type: string\n                                  minLength: 1\n                                  maxLength: 128\n                                  pattern: '^(?!\\s*$)[\\p{L}\\p{gc=Mark}\\p{digit}\\p{gc=Connector_Punctuation}\\p{Join_Control} .,''''-]{1,128}$'\n                                  description: First name of the Party (Name Type).\n                                  example: Henrik\n                                middleName:\n                                  title: MiddleName\n                                  type: string\n                                  minLength: 1\n                                  maxLength: 128\n                                  pattern: '^(?!\\s*$)[\\p{L}\\p{gc=Mark}\\p{digit}\\p{gc=Connector_Punctuation}\\p{Join_Control} .,''''-]{1,128}$'\n                                  description: Middle name of the Party (Name Type).\n                                  example: Johannes\n                                lastName:\n                                  title: LastName\n                                  type: string\n                                  minLength: 1\n                                  maxLength: 128\n                                  pattern: '^(?!\\s*$)[\\p{L}\\p{gc=Mark}\\p{digit}\\p{gc=Connector_Punctuation}\\p{Join_Control} .,''''-]{1,128}$'\n                                  description: Last name of the Party (Name Type).\n                                  example: Karlsson\n                            dateOfBirth:\n                              title: DateofBirth (type Date)\n                              type: string\n                              pattern: '^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$'\n                              description: Date of Birth of the Party.\n                              example: '1966-06-16'\n                      required:\n                        - partyIdInfo\n                  description: Information about the Payee in the proposed financial transaction.\n                payer:\n                  allOf:\n                    - title: PartyIdInfo\n                      type: object\n                      description: Data model for the complex type PartyIdInfo.\n                      properties:\n                        partyIdType:\n                          title: PartyIdType\n                          type: string\n                          enum:\n                            - MSISDN\n                            - EMAIL\n                            - PERSONAL_ID\n                            - BUSINESS\n                            - DEVICE\n                            - ACCOUNT_ID\n                            - IBAN\n                            - ALIAS\n                            - CONSENT\n                            - THIRD_PARTY_LINK\n                          description: |\n                            This is a variant based on FSPIOP `PartyIdType` specification.\n                            Main difference being the CONSENT and THIRD_PARTY_LINK enums.\n\n                            Below are the allowed values for the enumeration.\n                            - MSISDN - An MSISDN (Mobile Station International Subscriber Directory\n                            Number, that is, the phone number) is used as reference to a participant.\n                            The MSISDN identifier should be in international format according to the\n                            [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).\n                            Optionally, the MSISDN may be prefixed by a single plus sign, indicating the\n                            international prefix.\n                            - EMAIL - An email is used as reference to a\n                            participant. The format of the email should be according to the informational\n                            [RFC 3696](https://tools.ietf.org/html/rfc3696).\n                            - PERSONAL_ID - A personal identifier is used as reference to a participant.\n                            Examples of personal identification are passport number, birth certificate\n                            number, and national registration number. The identifier number is added in\n                            the PartyIdentifier element. The personal identifier type is added in the\n                            PartySubIdOrType element.\n                            - BUSINESS - A specific Business (for example, an organization or a company)\n                            is used as reference to a participant. The BUSINESS identifier can be in any\n                            format. To make a transaction connected to a specific username or bill number\n                            in a Business, the PartySubIdOrType element should be used.\n                            - DEVICE - A specific device (for example, a POS or ATM) ID connected to a\n                            specific business or organization is used as reference to a Party.\n                            For referencing a specific device under a specific business or organization,\n                            use the PartySubIdOrType element.\n                            - ACCOUNT_ID - A bank account number or FSP account ID should be used as\n                            reference to a participant. The ACCOUNT_ID identifier can be in any format,\n                            as formats can greatly differ depending on country and FSP.\n                            - IBAN - A bank account number or FSP account ID is used as reference to a\n                            participant. The IBAN identifier can consist of up to 34 alphanumeric\n                            characters and should be entered without whitespace.\n                            - ALIAS An alias is used as reference to a participant. The alias should be\n                            created in the FSP as an alternative reference to an account owner.\n                            Another example of an alias is a username in the FSP system.\n                            The ALIAS identifier can be in any format. It is also possible to use the\n                            PartySubIdOrType element for identifying an account under an Alias defined\n                            by the PartyIdentifier.\n                            - CONSENT - TBD\n                            - THIRD_PARTY_LINK - TBD\n                          example: PERSONAL_ID\n                        partyIdentifier:\n                          title: PartyIdentifier\n                          type: string\n                          minLength: 1\n                          maxLength: 128\n                          description: Identifier of the Party.\n                          example: '16135551212'\n                        partySubIdOrType:\n                          title: PartySubIdOrType\n                          type: string\n                          minLength: 1\n                          maxLength: 128\n                          description: 'Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.'\n                        fspId:\n                          title: FspId\n                          type: string\n                          minLength: 1\n                          maxLength: 32\n                          description: FSP identifier.\n                        extensionList:\n                          $ref: '#/paths/~1thirdpartyRequests~1authorizations/post/requestBody/content/application~1json/schema/properties/extensionList'\n                      required:\n                        - partyIdType\n                        - partyIdentifier\n                  description: Information about the Payer in the proposed financial transaction.\n                amountType:\n                  allOf:\n                    - title: AmountType\n                      type: string\n                      enum:\n                        - SEND\n                        - RECEIVE\n                      description: |-\n                        Below are the allowed values for the enumeration AmountType.\n                        - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.\n                        - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.\n                      example: RECEIVE\n                  description: 'SEND for sendAmount, RECEIVE for receiveAmount.'\n                amount:\n                  allOf:\n                    - title: Money\n                      type: object\n                      description: Data model for the complex type Money.\n                      properties:\n                        currency:\n                          $ref: '#/paths/~1accounts~1%7BID%7D/put/requestBody/content/application~1json/schema/properties/accounts/items/properties/currency'\n                        amount:\n                          title: Amount\n                          type: string\n                          pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'\n                          description: 'The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.'\n                          example: '123.45'\n                      required:\n                        - currency\n                        - amount\n                  description: Requested amount to be transferred from the Payer to Payee.\n                transactionType:\n                  allOf:\n                    - $ref: '#/paths/~1thirdpartyRequests~1authorizations/post/requestBody/content/application~1json/schema/properties/transactionType'\n                  description: Type of transaction.\n                expiration:\n                  type: string\n                  description: |\n                    Date and time until when the transaction request is valid. It can be set to get a quick failure in case the peer FSP takes too long to respond.\n                  example: '2016-05-24T08:38:08.699-04:00'\n              required:\n                - transactionRequestId\n                - payee\n                - payer\n                - amountType\n                - amount\n                - transactionType\n                - expiration\n            example:\n              transactionRequestId: 8d34f91d-d078-4077-8263-2c047876fcf6\n              payee:\n                partyIdInfo:\n                  partyIdType: MSISDN\n                  partyIdentifier: +44 1234 5678\n                  fspId: dfspb\n              payer:\n                partyIdType: THIRD_PARTY_LINK\n                partyIdentifier: qwerty-123456\n                fspId: dfspa\n              amountType: SEND\n              amount:\n                amount: '100'\n                currency: USD\n              transactionType:\n                scenario: TRANSFER\n                initiator: PAYER\n                initiatorType: CONSUMER\n              expiration: '2020-07-15T22:17:28.985-01:00'\n      responses:\n        '202':\n          $ref: '#/paths/~1consents/post/responses/202'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n      operationId: CreateThirdpartyTransactionRequests\n      summary: CreateThirdpartyTransactionRequests\n      description: The HTTP request POST `/thirdpartyRequests/transactions` is used by a PISP to initiate a 3rd party Transaction request with a DFSP\n      tags:\n        - thirdpartyRequests\n        - sampled\n  '/thirdpartyRequests/transactions/{ID}':\n    parameters:\n      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    get:\n      tags:\n        - thirdpartyRequests\n        - sampled\n      operationId: GetThirdpartyTransactionRequests\n      summary: GetThirdpartyTransactionRequests\n      description: |\n        The HTTP request `GET /thirdpartyRequests/transactions/{ID}` is used to request the\n        retrieval of a third party transaction request.\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/0'\n      responses:\n        '202':\n          $ref: '#/paths/~1consents/post/responses/202'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n    put:\n      tags:\n        - thirdpartyRequests\n        - sampled\n      operationId: UpdateThirdPartyTransactionRequests\n      summary: UpdateThirdPartyTransactionRequests\n      description: |\n        The HTTP request `PUT /thirdpartyRequests/transactions/{ID}` is used by the DFSP to inform the client about\n        the status of a previously requested thirdparty transaction request.\n\n        Switch(Thirdparty API Adapter) -\u003e PISP\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ThirdpartyRequestsTransactionsIDPutResponse\n              type: object\n              description: 'The object sent in the PUT /thirdPartyRequests/transactions/{ID} request.'\n              properties:\n                transactionRequestState:\n                  title: TransactionRequestState\n                  type: string\n                  enum:\n                    - RECEIVED\n                    - PENDING\n                    - ACCEPTED\n                    - REJECTED\n                  description: |-\n                    Below are the allowed values for the enumeration.\n                    - RECEIVED - Payer FSP has received the transaction from the Payee FSP.\n                    - PENDING - Payer FSP has sent the transaction request to the Payer.\n                    - ACCEPTED - Payer has approved the transaction.\n                    - REJECTED - Payer has rejected the transaction.\n                  example: RECEIVED\n              required:\n                - transactionRequestState\n            example:\n              transactionId: 11111111-0000-0000-0000-000000000000\n              transactionRequestState: RECEIVED\n      responses:\n        '200':\n          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n    patch:\n      operationId: NotifyThirdpartyTransactionRequests\n      summary: NotifyThirdpartyTransactionRequests\n      description: |\n        The HTTP request `PATCH /thirdpartyRequests/transactions/{ID}` is used to\n        notify a thirdparty of the outcome of a transaction request.\n\n        Switch(Thirdparty API Adapter) -\u003e PISP\n      tags:\n        - thirdpartyRequests\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/0'\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ThirdpartyRequestsTransactionsIDPatchResponse\n              type: object\n              description: 'The object sent in the PATCH /thirdpartyRequests/transactions/{ID} callback.'\n              properties:\n                completedTimestamp:\n                  title: DateTime\n                  type: string\n                  pattern: '^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:(\\.\\d{3}))(?:Z|[+-][01]\\d:[0-5]\\d)$'\n                  description: 'The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are \"2016-05-24T08:38:08.699-04:00\", \"2016-05-24T08:38:08.699Z\" (where Z indicates Zulu time zone, same as UTC).'\n                  example: '2016-05-24T08:38:08.699-04:00'\n                transactionRequestState:\n                  $ref: '#/paths/~1thirdpartyRequests~1transactions~1%7BID%7D/put/requestBody/content/application~1json/schema/properties/transactionRequestState'\n                transactionState:\n                  title: TransactionState\n                  type: string\n                  enum:\n                    - RECEIVED\n                    - PENDING\n                    - COMPLETED\n                    - REJECTED\n                  description: |-\n                    Below are the allowed values for the enumeration.\n                    - RECEIVED - Payee FSP has received the transaction from the Payer FSP.\n                    - PENDING - Payee FSP has validated the transaction.\n                    - COMPLETED - Payee FSP has successfully performed the transaction.\n                    - REJECTED - Payee FSP has failed to perform the transaction.\n                  example: RECEIVED\n              required:\n                - transactionRequestState\n                - transactionState\n            example:\n              transactionId: 11111111-0000-0000-0000-000000000000\n              transactionRequestState: ACCEPTED\n              transactionState: COMMITTED\n      responses:\n        '200':\n          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  '/thirdpartyRequests/transactions/{ID}/error':\n    parameters:\n      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    put:\n      tags:\n        - thirdpartyRequests\n        - sampled\n      operationId: ThirdpartyTransactionRequestsError\n      summary: ThirdpartyTransactionRequestsError\n      description: |\n        If the server is unable to find the transaction request, or another processing error occurs,\n        the error callback `PUT /thirdpartyRequests/transactions/{ID}/error` is used.\n        The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of\n        the thirdparty transaction request.\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        description: Error information returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema'\n      responses:\n        '200':\n          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  /thirdpartyRequests/verifications:\n    parameters:\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    post:\n      tags:\n        - thirdpartyRequests\n        - sampled\n      operationId: PostThirdpartyRequestsVerifications\n      summary: PostThirdpartyRequestsVerifications\n      description: |\n        The HTTP request `POST /thirdpartyRequests/verifications` is used by the DFSP to verify a third party authorization.\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/0'\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        description: The thirdparty authorization details to verify\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - title: ThirdpartyRequestsVerificationsPostRequestFIDO\n                  type: object\n                  description: The object sent in the POST /thirdpartyRequests/verifications request.\n                  properties:\n                    verificationRequestId:\n                      allOf:\n                        - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'\n                    challenge:\n                      type: string\n                      description: Base64 encoded bytes - The challenge generated by the DFSP.\n                    consentId:\n                      allOf:\n                        - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'\n                      description: |\n                        The id of the stored consent object that contains the credential with which to verify\n                        the signed challenge against.\n                    signedPayloadType:\n                      title: SignedPayloadTypeFIDO\n                      type: string\n                      enum:\n                        - FIDO\n                      description: Describes a challenge that has been signed with FIDO Attestation flows\n                    value:\n                      title: FIDOPublicKeyCredentialAssertion\n                      type: object\n                      description: |\n                        An object sent in a `PUT /thirdpartyRequests/authorization/{ID}` request.\n                        based mostly on: https://webauthn.guide/#authentication\n                        AuthenticatorAssertionResponse\n                      properties:\n                        id:\n                          type: string\n                          description: |\n                            credential id: identifier of pair of keys, base64 encoded\n                            https://w3c.github.io/webauthn/#ref-for-dom-credential-id\n                          minLength: 59\n                          maxLength: 118\n                        rawId:\n                          type: string\n                          description: |\n                            raw credential id: identifier of pair of keys, base64 encoded.\n                          minLength: 59\n                          maxLength: 118\n                        response:\n                          type: object\n                          description: |\n                            AuthenticatorAssertionResponse\n                          properties:\n                            authenticatorData:\n                              type: string\n                              description: |\n                                Authenticator data object.\n                              minLength: 49\n                              maxLength: 256\n                            clientDataJSON:\n                              type: string\n                              description: |\n                                JSON string with client data.\n                              minLength: 121\n                              maxLength: 512\n                            signature:\n                              type: string\n                              description: |\n                                The signature generated by the private key associated with this credential.\n                              minLength: 59\n                              maxLength: 256\n                            userHandle:\n                              type: string\n                              description: |\n                                This field is optionally provided by the authenticator, and\n                                represents the user.id that was supplied during registration.\n                              minLength: 1\n                              maxLength: 88\n                          required:\n                            - authenticatorData\n                            - clientDataJSON\n                            - signature\n                          additionalProperties: false\n                        type:\n                          type: string\n                          description: 'response type, we need only the type of public-key'\n                          enum:\n                            - public-key\n                      required:\n                        - id\n                        - rawId\n                        - response\n                        - type\n                      additionalProperties: false\n                  required:\n                    - verificationRequestId\n                    - challenge\n                    - consentId\n                    - signedPayloadType\n                    - value\n                - title: ThirdpartyRequestsVerificationsPostRequestGeneric\n                  type: object\n                  description: The object sent in the POST /thirdpartyRequests/verifications request.\n                  properties:\n                    verificationRequestId:\n                      allOf:\n                        - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'\n                    challenge:\n                      type: string\n                      description: Base64 encoded bytes - The challenge generated by the DFSP.\n                    consentId:\n                      allOf:\n                        - $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/consentRequestId'\n                      description: |\n                        The id of the stored consent object that contains the credential with which to verify\n                        the signed challenge against.\n                    signedPayloadType:\n                      title: SignedPayloadTypeGeneric\n                      type: string\n                      enum:\n                        - GENERIC\n                      description: Describes a challenge that has been signed with a private key\n                    value:\n                      type: string\n                      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'\n                      description: 'The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character â€˜=â€™) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters.'\n                  required:\n                    - verificationRequestId\n                    - challenge\n                    - consentId\n                    - signedPayloadType\n                    - value\n            example:\n              verificationRequestId: 44444444-0000-0000-0000-000000000000\n              challenge: \u003cbase64 encoded binary - the encoded challenge\u003e\n              consentId: 8d34f91d-d078-4077-8263-2c0498dhbjr\n              signedPayloadType: FIDO\n              signedPayload:\n                id: 45c-TkfkjQovQeAWmOy-RLBHEJ_e4jYzQYgD8VdbkePgM5d98BaAadadNYrknxgH0jQEON8zBydLgh1EqoC9DA\n                rawId: 45c+TkfkjQovQeAWmOy+RLBHEJ/e4jYzQYgD8VdbkePgM5d98BaAadadNYrknxgH0jQEON8zBydLgh1EqoC9DA==\n                response:\n                  authenticatorData: SZYN5YgOjGh0NBcPZHZgW4/krrmihjLHmVzzuoMdl2MBAAAACA==\n                  clientDataJSON: eyJ0eXBlIjoid2ViYXV0aG4uZ2V0IiwiY2hhbGxlbmdlIjoiQUFBQUFBQUFBQUFBQUFBQUFBRUNBdyIsIm9yaWdpbiI6Imh0dHA6Ly9sb2NhbGhvc3Q6NDIxODEiLCJjcm9zc09yaWdpbiI6ZmFsc2UsIm90aGVyX2tleXNfY2FuX2JlX2FkZGVkX2hlcmUiOiJkbyBub3QgY29tcGFyZSBjbGllbnREYXRhSlNPTiBhZ2FpbnN0IGEgdGVtcGxhdGUuIFNlZSBodHRwczovL2dvby5nbC95YWJQZXgifQ==\n                  signature: MEUCIDcJRBu5aOLJVc/sPyECmYi23w8xF35n3RNhyUNVwQ2nAiEA+Lnd8dBn06OKkEgAq00BVbmH87ybQHfXlf1Y4RJqwQ8=\n                type: public-key\n      responses:\n        '202':\n          $ref: '#/paths/~1consents/post/responses/202'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  '/thirdpartyRequests/verifications/{ID}':\n    parameters:\n      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    put:\n      tags:\n        - thirdpartyRequests\n        - sampled\n      operationId: PutThirdpartyRequestsVerificationsById\n      summary: PutThirdpartyRequestsVerificationsById\n      description: |\n        The HTTP request `PUT /thirdpartyRequests/verifications/{ID}` is used by the Auth-Service to inform\n        the DFSP of a successful result in validating the verification of a Thirdparty Transaction Request.\n\n        If the validation fails, The Auth-Service MUST use `PUT /thirdpartyRequests/verifications/{ID}/error`\n        instead.\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        description: The result of validating the Thirdparty Transaction Request\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ThirdpartyRequestsVerificationsIDPutResponse\n              type: object\n              description: 'The object sent in the PUT /thirdpartyRequests/verifications/{ID} request.'\n              properties:\n                authenticationResponse:\n                  type: string\n                  enum:\n                    - VERIFIED\n                  description: The verification passed\n              required:\n                - authenticationResponse\n            example:\n              authenticationResponse: VERIFIED\n      responses:\n        '200':\n          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n  '/thirdpartyRequests/verifications/{ID}/error':\n    parameters:\n      - $ref: '#/paths/~1accounts~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/0'\n      - $ref: '#/paths/~1consents/parameters/1'\n      - $ref: '#/paths/~1consents/parameters/2'\n      - $ref: '#/paths/~1consents/parameters/3'\n      - $ref: '#/paths/~1consents/parameters/4'\n      - $ref: '#/paths/~1consents/parameters/5'\n      - $ref: '#/paths/~1consents/parameters/6'\n      - $ref: '#/paths/~1consents/parameters/7'\n      - $ref: '#/paths/~1consents/parameters/8'\n    put:\n      tags:\n        - thirdpartyRequests\n        - sampled\n      operationId: PutThirdpartyRequestsVerificationsByIdAndError\n      summary: PutThirdpartyRequestsVerificationsByIdAndError\n      description: |\n        The HTTP request `PUT /thirdpartyRequests/verifications/{ID}/error` is used by the Auth-Service to inform\n        the DFSP of a failure in validating or looking up the verification of a Thirdparty Transaction Request.\n      parameters:\n        - $ref: '#/paths/~1consents/post/parameters/1'\n      requestBody:\n        description: Error information returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/paths/~1accounts~1%7BID%7D~1error/put/requestBody/content/application~1json/schema'\n      responses:\n        '200':\n          $ref: '#/paths/~1accounts~1%7BID%7D/put/responses/200'\n        '400':\n          $ref: '#/paths/~1consents/post/responses/400'\n        '401':\n          $ref: '#/paths/~1consents/post/responses/401'\n        '403':\n          $ref: '#/paths/~1consents/post/responses/403'\n        '404':\n          $ref: '#/paths/~1consents/post/responses/404'\n        '405':\n          $ref: '#/paths/~1consents/post/responses/405'\n        '406':\n          $ref: '#/paths/~1consents/post/responses/406'\n        '501':\n          $ref: '#/paths/~1consents/post/responses/501'\n        '503':\n          $ref: '#/paths/~1consents/post/responses/503'\n"
		}
	},
	"Error": "parse: parse spec: /accounts/{ID}: parameters: parse parameter \"\": resolve \"#/paths/~1consents/parameters/0\" reference: invalid parameter reference: \"#/paths/~1consents/parameters/0\""
}