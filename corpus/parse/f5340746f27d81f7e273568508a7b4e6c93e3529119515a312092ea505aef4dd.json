{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ITISFoundation/osparc-simcore"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "services/director/src/simcore_service_director/api/v0/openapi.yaml",
			"byteSize": 116339,
			"content": "openapi: 3.0.0\ninfo:\n  description: This is the oSparc's director API\n  version: 0.1.0\n  title: Director API\n  contact:\n    name: IT'IS Foundation\n    email: support@simcore.com\n  license:\n    name: MIT\n    url: 'https://github.com/ITISFoundation/osparc-simcore/blob/master/LICENSE'\nservers:\n  - description: Development server\n    url: 'http://{host}:{port}/{version}'\n    variables:\n      host:\n        default: localhost\n      port:\n        default: '8080'\n      version:\n        default: v0\n        enum:\n          - v0\n  - description: Production server\n    url: 'http://director:{port}/{version}'\n    variables:\n      port:\n        default: '8080'\n      version:\n        default: v0\n        enum:\n          - v0\ntags:\n  - name: admins\n    description: Secured Admin-only calls\n  - name: developers\n    description: Operations available to regular developers\n  - name: users\n    description: Operations available to regular users\npaths:\n  /:\n    get:\n      tags:\n        - users\n      summary: Service health-check endpoint\n      description: Some general information on the API and state of the service behind\n      operationId: root_get\n      responses:\n        '200':\n          description: Service information\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - data\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                        example: director service\n                      status:\n                        type: string\n                        example: SERVICE_RUNNING\n                      api_version:\n                        type: string\n                        example: 1.0.0-dev\n                      version:\n                        type: string\n                        example: 1dfcfdc\n                  error:\n                    nullable: true\n                    default: null\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n  /services:\n    get:\n      tags:\n        - users\n      summary: Lists available services in the oSparc platform\n      description: Lists available services in the oSparc platform\n      operationId: services_get\n      parameters:\n        - in: query\n          name: service_type\n          description: |\n            The service type:\n              * computational - a computational service\n              * interactive - an interactive service\n          required: false\n          schema:\n            type: string\n            enum:\n              - computational\n              - interactive\n            example: computational\n      responses:\n        '200':\n          description: 'Success, returns the list of available services'\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - data\n                properties:\n                  data:\n                    type: array\n                    items:\n                      title: simcore node\n                      description: Description of a simcore node 'class' with input and output\n                      type: object\n                      additionalProperties: false\n                      required:\n                        - key\n                        - version\n                        - type\n                        - name\n                        - description\n                        - authors\n                        - contact\n                        - inputs\n                        - outputs\n                      properties:\n                        key:\n                          type: string\n                          description: distinctive name for the node based on the docker registry path\n                          pattern: '^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$'\n                          example: simcore/services/comp/itis/sleeper\n                        integration-version:\n                          type: string\n                          description: integration version number\n                          pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n                          example: 1.0.0\n                        version:\n                          type: string\n                          description: service version number\n                          pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n                          example: 1.0.0\n                        type:\n                          type: string\n                          description: service type\n                          enum:\n                            - frontend\n                            - computational\n                            - dynamic\n                          example: computational\n                        name:\n                          type: string\n                          description: 'short, human readable name for the node'\n                          example: Fast Counter\n                        thumbnail:\n                          type: string\n                          description: url to the thumbnail\n                          example: 'https://user-images.githubusercontent.com/32800795/61083844-ff48fb00-a42c-11e9-8e63-fa2d709c8baf.png'\n                        badges:\n                          type: array\n                          items:\n                            type: object\n                            required:\n                              - name\n                              - image\n                              - url\n                            additionalProperties: false\n                            properties:\n                              name:\n                                type: string\n                                description: Name of the subject\n                                example: travis-ci\n                              image:\n                                type: string\n                                description: Url to the shield\n                                example: 'https://travis-ci.org/ITISFoundation/osparc-simcore.svg?branch=master'\n                              url:\n                                type: string\n                                description: Link to status\n                                example: 'https://travis-ci.org/ITISFoundation/osparc-simcore ''State of CI: build, test and pushing images'''\n                        description:\n                          type: string\n                          description: human readable description of the purpose of the node\n                          example: Our best node type\n                        authors:\n                          type: array\n                          minItems: 1\n                          items:\n                            type: object\n                            required:\n                              - name\n                              - email\n                            additionalProperties: false\n                            properties:\n                              name:\n                                type: string\n                                description: Name of the author\n                                example: Sun Bak\n                              email:\n                                description: Email address\n                                type: string\n                                format: email\n                                example: sun@sense.eight\n                              affiliation:\n                                description: Affiliation of the author\n                                type: string\n                                example: Sense8\n                        contact:\n                          type: string\n                          format: email\n                          description: email to correspond to the authors about the node\n                          example: lab@net.flix\n                        inputs:\n                          type: object\n                          description: definition of the inputs of this node\n                          x-patternProperties:\n                            '^[-_a-zA-Z0-9]+$':\n                              type: object\n                              description: all the input configurable for this service\n                              additionalProperties: false\n                              required:\n                                - displayOrder\n                                - label\n                                - description\n                                - type\n                              properties:\n                                displayOrder:\n                                  description: 'DEPRECATED: new display order is taken from the item position. This property will be removed.'\n                                  deprecated: true\n                                  type: number\n                                label:\n                                  type: string\n                                  description: short name for the property\n                                  example:\n                                    - Age\n                                description:\n                                  type: string\n                                  description: description of the property\n                                  example:\n                                    - Age in seconds since 1970\n                                type:\n                                  type: string\n                                  pattern: '^(number|integer|boolean|string|ref_contentSchema|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$'\n                                  description: data type expected on this input glob matching for data type is allowed\n                                  example:\n                                    - number\n                                    - boolean\n                                    - 'data:*/*'\n                                    - 'data:text/*'\n                                    - 'data:[image/jpeg,image/png]'\n                                    - 'data:application/json'\n                                    - 'data:application/json;schema=https://my-schema/not/really/schema.json'\n                                    - 'data:application/vnd.ms-excel'\n                                    - 'data:text/plain'\n                                    - 'data:application/hdf5'\n                                    - 'data:application/edu.ucdavis@ceclancy.xyz'\n                                contentSchema:\n                                  title: Content Schema\n                                  description: jsonschema of the content at this input/output. Required when type='ref_contentSchema'\n                                  type: object\n                                fileToKeyMap:\n                                  description: Place the data associated with the named keys in files\n                                  type: object\n                                  patternProperties:\n                                    .+:\n                                      type: string\n                                      pattern: '^[-_a-zA-Z0-9]+$'\n                                  example:\n                                    - dir/input1.txt: key_1\n                                      dir33/input2.txt: key2\n                                defaultValue:\n                                  description: initial value for this input\n                                  type:\n                                    - string\n                                    - number\n                                    - integer\n                                    - boolean\n                                  example:\n                                    - Dog\n                                    - true\n                                unit:\n                                  title: Unit\n                                  description: 'Units of this input value, if a physical quantity'\n                                  type: string\n                                widget:\n                                  description: custom widget to use instead of the default one determined from the data-type\n                                  anyOf:\n                                    - type: object\n                                      additionalProperties: false\n                                      required:\n                                        - type\n                                      properties:\n                                        type:\n                                          description: type of the property\n                                          type: string\n                                          enum:\n                                            - TextArea\n                                        minHeight:\n                                          description: minimum Height of the textarea\n                                          type: integer\n                                          minimum: 1\n                                    - type: object\n                                      additionalProperties: false\n                                      required:\n                                        - type\n                                        - structure\n                                      properties:\n                                        type:\n                                          description: type of the property\n                                          type: string\n                                          enum:\n                                            - SelectBox\n                                        structure:\n                                          type: array\n                                          minItems: 1\n                                          items:\n                                            type: object\n                                            additionalProperties: false\n                                            required:\n                                              - key\n                                              - label\n                                            properties:\n                                              key:\n                                                type:\n                                                  - string\n                                                  - boolean\n                                                  - number\n                                              label:\n                                                type: string\n                                            example:\n                                              - - key: rat\n                                                  label: The Rat\n                                                - key: dog\n                                                  label: Bello the Dog\n                          additionalProperties: true\n                        outputs:\n                          type: object\n                          description: definition of the outputs of this node\n                          x-patternProperties:\n                            '^[-_a-zA-Z0-9]+$':\n                              type: object\n                              description: all the output produced by this node\n                              additionalProperties: false\n                              required:\n                                - displayOrder\n                                - label\n                                - description\n                                - type\n                              properties:\n                                displayOrder:\n                                  type: number\n                                  description: use this to numerically sort the properties for display\n                                  example:\n                                    - 1\n                                    - -0.2\n                                label:\n                                  type: string\n                                  description: short name for the property\n                                  example:\n                                    - Age\n                                description:\n                                  type: string\n                                  description: description of the property\n                                  example:\n                                    - Age in seconds since 1970\n                                type:\n                                  type: string\n                                  pattern: '^(number|integer|boolean|string|ref_contentSchema|data:[^/\\s,]+/[^/\\s,]+)$'\n                                  description: data type expected on this output\n                                  example:\n                                    - number\n                                    - integer\n                                    - boolean\n                                    - string\n                                    - 'data:application/json'\n                                    - 'data:application/vnd.ms-excel '\n                                    - 'data:text/plain'\n                                    - 'data:application/hdf5'\n                                contentSchema:\n                                  title: Content Schema\n                                  description: jsonschema of this input/output. Required when type='ref_contentSchema'\n                                  type: object\n                                fileToKeyMap:\n                                  description: Place the data stored in the named files and store it in the locations pointed to by the respective output key.\n                                  type: object\n                                  patternProperties:\n                                    .+:\n                                      type: string\n                                      pattern: '^[-_a-zA-Z0-9]+$'\n                                  example:\n                                    - dir/input1.txt: key_1\n                                      dir33/input2.txt: key2\n                                unit:\n                                  title: Unit\n                                  description: 'Units of the output value, if a physical quantity'\n                                  type: string\n                          additionalProperties: true\n                        boot-options:\n                          title: Boot Options\n                          description: Service defined boot options. These get injected in the service as env variables.\n                          type: object\n                          x-patternProperties:\n                            '^[_a-zA-Z0-9]+$':\n                              title: BootOptionMode\n                              type: object\n                              properties:\n                                label:\n                                  title: Label\n                                  type: string\n                                description:\n                                  title: Description\n                                  type: string\n                                default:\n                                  title: Default\n                                  type: string\n                                items:\n                                  title: Items\n                                  type: object\n                                  additionalProperties:\n                                    title: BootOptionItem\n                                    type: object\n                                    properties:\n                                      label:\n                                        title: Label\n                                        type: string\n                                      description:\n                                        title: Description\n                                        type: string\n                                    required:\n                                      - label\n                                      - description\n                              required:\n                                - label\n                                - description\n                                - default\n                                - items\n                          additionalProperties: true\n                  error:\n                    nullable: true\n                    default: null\n        '401':\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n  '/services/{service_key}/{service_version}':\n    get:\n      tags:\n        - users\n      summary: Returns details of the selected service if available in the oSparc platform\n      description: Returns details of the selected service if available in the oSparc platform\n      operationId: services_by_key_version_get\n      parameters:\n        - in: path\n          name: service_key\n          description: The key (url) of the service\n          required: true\n          schema:\n            type: string\n            description: distinctive name for the node based on the docker registry path\n            pattern: '^(simcore)/(services)/(comp|dynamic)(/[\\w/-]+)+$'\n            example:\n              - simcore/services/comp/itis/sleeper\n              - simcore/services/dynamic/3dviewer\n        - in: path\n          name: service_version\n          description: The tag/version of the service\n          required: true\n          schema:\n            type: string\n            description: semantic version number\n            pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n            example:\n              - 1.0.0\n              - 0.0.1\n      responses:\n        '200':\n          description: 'Success, returns the details of the service'\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - data\n                properties:\n                  data:\n                    type: array\n                    items:\n                      title: simcore node\n                      description: Description of a simcore node 'class' with input and output\n                      type: object\n                      additionalProperties: false\n                      required:\n                        - key\n                        - version\n                        - type\n                        - name\n                        - description\n                        - authors\n                        - contact\n                        - inputs\n                        - outputs\n                      properties:\n                        key:\n                          type: string\n                          description: distinctive name for the node based on the docker registry path\n                          pattern: '^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$'\n                          example: simcore/services/comp/itis/sleeper\n                        integration-version:\n                          type: string\n                          description: integration version number\n                          pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n                          example: 1.0.0\n                        version:\n                          type: string\n                          description: service version number\n                          pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n                          example: 1.0.0\n                        type:\n                          type: string\n                          description: service type\n                          enum:\n                            - frontend\n                            - computational\n                            - dynamic\n                          example: computational\n                        name:\n                          type: string\n                          description: 'short, human readable name for the node'\n                          example: Fast Counter\n                        thumbnail:\n                          type: string\n                          description: url to the thumbnail\n                          example: 'https://user-images.githubusercontent.com/32800795/61083844-ff48fb00-a42c-11e9-8e63-fa2d709c8baf.png'\n                        badges:\n                          type: array\n                          items:\n                            type: object\n                            required:\n                              - name\n                              - image\n                              - url\n                            additionalProperties: false\n                            properties:\n                              name:\n                                type: string\n                                description: Name of the subject\n                                example: travis-ci\n                              image:\n                                type: string\n                                description: Url to the shield\n                                example: 'https://travis-ci.org/ITISFoundation/osparc-simcore.svg?branch=master'\n                              url:\n                                type: string\n                                description: Link to status\n                                example: 'https://travis-ci.org/ITISFoundation/osparc-simcore ''State of CI: build, test and pushing images'''\n                        description:\n                          type: string\n                          description: human readable description of the purpose of the node\n                          example: Our best node type\n                        authors:\n                          type: array\n                          minItems: 1\n                          items:\n                            type: object\n                            required:\n                              - name\n                              - email\n                            additionalProperties: false\n                            properties:\n                              name:\n                                type: string\n                                description: Name of the author\n                                example: Sun Bak\n                              email:\n                                description: Email address\n                                type: string\n                                format: email\n                                example: sun@sense.eight\n                              affiliation:\n                                description: Affiliation of the author\n                                type: string\n                                example: Sense8\n                        contact:\n                          type: string\n                          format: email\n                          description: email to correspond to the authors about the node\n                          example: lab@net.flix\n                        inputs:\n                          type: object\n                          description: definition of the inputs of this node\n                          x-patternProperties:\n                            '^[-_a-zA-Z0-9]+$':\n                              type: object\n                              description: all the input configurable for this service\n                              additionalProperties: false\n                              required:\n                                - displayOrder\n                                - label\n                                - description\n                                - type\n                              properties:\n                                displayOrder:\n                                  description: 'DEPRECATED: new display order is taken from the item position. This property will be removed.'\n                                  deprecated: true\n                                  type: number\n                                label:\n                                  type: string\n                                  description: short name for the property\n                                  example:\n                                    - Age\n                                description:\n                                  type: string\n                                  description: description of the property\n                                  example:\n                                    - Age in seconds since 1970\n                                type:\n                                  type: string\n                                  pattern: '^(number|integer|boolean|string|ref_contentSchema|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$'\n                                  description: data type expected on this input glob matching for data type is allowed\n                                  example:\n                                    - number\n                                    - boolean\n                                    - 'data:*/*'\n                                    - 'data:text/*'\n                                    - 'data:[image/jpeg,image/png]'\n                                    - 'data:application/json'\n                                    - 'data:application/json;schema=https://my-schema/not/really/schema.json'\n                                    - 'data:application/vnd.ms-excel'\n                                    - 'data:text/plain'\n                                    - 'data:application/hdf5'\n                                    - 'data:application/edu.ucdavis@ceclancy.xyz'\n                                contentSchema:\n                                  title: Content Schema\n                                  description: jsonschema of the content at this input/output. Required when type='ref_contentSchema'\n                                  type: object\n                                fileToKeyMap:\n                                  description: Place the data associated with the named keys in files\n                                  type: object\n                                  patternProperties:\n                                    .+:\n                                      type: string\n                                      pattern: '^[-_a-zA-Z0-9]+$'\n                                  example:\n                                    - dir/input1.txt: key_1\n                                      dir33/input2.txt: key2\n                                defaultValue:\n                                  description: initial value for this input\n                                  type:\n                                    - string\n                                    - number\n                                    - integer\n                                    - boolean\n                                  example:\n                                    - Dog\n                                    - true\n                                unit:\n                                  title: Unit\n                                  description: 'Units of this input value, if a physical quantity'\n                                  type: string\n                                widget:\n                                  description: custom widget to use instead of the default one determined from the data-type\n                                  anyOf:\n                                    - type: object\n                                      additionalProperties: false\n                                      required:\n                                        - type\n                                      properties:\n                                        type:\n                                          description: type of the property\n                                          type: string\n                                          enum:\n                                            - TextArea\n                                        minHeight:\n                                          description: minimum Height of the textarea\n                                          type: integer\n                                          minimum: 1\n                                    - type: object\n                                      additionalProperties: false\n                                      required:\n                                        - type\n                                        - structure\n                                      properties:\n                                        type:\n                                          description: type of the property\n                                          type: string\n                                          enum:\n                                            - SelectBox\n                                        structure:\n                                          type: array\n                                          minItems: 1\n                                          items:\n                                            type: object\n                                            additionalProperties: false\n                                            required:\n                                              - key\n                                              - label\n                                            properties:\n                                              key:\n                                                type:\n                                                  - string\n                                                  - boolean\n                                                  - number\n                                              label:\n                                                type: string\n                                            example:\n                                              - - key: rat\n                                                  label: The Rat\n                                                - key: dog\n                                                  label: Bello the Dog\n                          additionalProperties: true\n                        outputs:\n                          type: object\n                          description: definition of the outputs of this node\n                          x-patternProperties:\n                            '^[-_a-zA-Z0-9]+$':\n                              type: object\n                              description: all the output produced by this node\n                              additionalProperties: false\n                              required:\n                                - displayOrder\n                                - label\n                                - description\n                                - type\n                              properties:\n                                displayOrder:\n                                  type: number\n                                  description: use this to numerically sort the properties for display\n                                  example:\n                                    - 1\n                                    - -0.2\n                                label:\n                                  type: string\n                                  description: short name for the property\n                                  example:\n                                    - Age\n                                description:\n                                  type: string\n                                  description: description of the property\n                                  example:\n                                    - Age in seconds since 1970\n                                type:\n                                  type: string\n                                  pattern: '^(number|integer|boolean|string|ref_contentSchema|data:[^/\\s,]+/[^/\\s,]+)$'\n                                  description: data type expected on this output\n                                  example:\n                                    - number\n                                    - integer\n                                    - boolean\n                                    - string\n                                    - 'data:application/json'\n                                    - 'data:application/vnd.ms-excel '\n                                    - 'data:text/plain'\n                                    - 'data:application/hdf5'\n                                contentSchema:\n                                  title: Content Schema\n                                  description: jsonschema of this input/output. Required when type='ref_contentSchema'\n                                  type: object\n                                fileToKeyMap:\n                                  description: Place the data stored in the named files and store it in the locations pointed to by the respective output key.\n                                  type: object\n                                  patternProperties:\n                                    .+:\n                                      type: string\n                                      pattern: '^[-_a-zA-Z0-9]+$'\n                                  example:\n                                    - dir/input1.txt: key_1\n                                      dir33/input2.txt: key2\n                                unit:\n                                  title: Unit\n                                  description: 'Units of the output value, if a physical quantity'\n                                  type: string\n                          additionalProperties: true\n                        boot-options:\n                          title: Boot Options\n                          description: Service defined boot options. These get injected in the service as env variables.\n                          type: object\n                          x-patternProperties:\n                            '^[_a-zA-Z0-9]+$':\n                              title: BootOptionMode\n                              type: object\n                              properties:\n                                label:\n                                  title: Label\n                                  type: string\n                                description:\n                                  title: Description\n                                  type: string\n                                default:\n                                  title: Default\n                                  type: string\n                                items:\n                                  title: Items\n                                  type: object\n                                  additionalProperties:\n                                    title: BootOptionItem\n                                    type: object\n                                    properties:\n                                      label:\n                                        title: Label\n                                        type: string\n                                      description:\n                                        title: Description\n                                        type: string\n                                    required:\n                                      - label\n                                      - description\n                              required:\n                                - label\n                                - description\n                                - default\n                                - items\n                          additionalProperties: true\n                  error:\n                    nullable: true\n                    default: null\n        '401':\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        '404':\n          description: Service not found\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n  '/services/{service_key}/{service_version}/labels':\n    get:\n      tags:\n        - users\n      summary: Returns the list of tags attached to a service\n      operationId: get_service_labels\n      parameters:\n        - in: path\n          name: service_key\n          description: The key (url) of the service\n          required: true\n          schema:\n            type: string\n            description: distinctive name for the node based on the docker registry path\n            pattern: '^(simcore)/(services)/(comp|dynamic)(/[\\w/-]+)+$'\n            example:\n              - simcore/services/comp/itis/sleeper\n              - simcore/services/dynamic/3dviewer\n        - in: path\n          name: service_version\n          description: The tag/version of the service\n          required: true\n          schema:\n            type: string\n            description: semantic version number\n            pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n            example:\n              - 1.0.0\n              - 0.0.1\n      responses:\n        '200':\n          description: 'Success, returns the details of the service'\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n        '401':\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        '404':\n          description: Service not found\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n  '/service_extras/{service_key}/{service_version}':\n    get:\n      tags:\n        - users\n      summary: Returns the service's details which should be hidden from the user defined as extras.\n      description: Currently returns the node_requirements an array of resoruces needed for scheduling.\n      operationId: service_extras_by_key_version_get\n      parameters:\n        - in: path\n          name: service_key\n          description: The key (url) of the service\n          required: true\n          schema:\n            type: string\n            description: distinctive name for the node based on the docker registry path\n            pattern: '^(simcore)/(services)/(comp|dynamic)(/[\\w/-]+)+$'\n            example:\n              - simcore/services/comp/itis/sleeper\n              - simcore/services/dynamic/3dviewer\n        - in: path\n          name: service_version\n          description: The tag/version of the service\n          required: true\n          schema:\n            type: string\n            description: semantic version number\n            pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n            example:\n              - 1.0.0\n              - 0.0.1\n      responses:\n        '200':\n          description: 'Success, returns an object containing details hidden from the user'\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - data\n                properties:\n                  data:\n                    type: object\n                    required:\n                      - node_requirements\n                    properties:\n                      node_requirements:\n                        type: object\n                        required:\n                          - CPU\n                          - RAM\n                        properties:\n                          CPU:\n                            type: number\n                            default: 1\n                            minimum: 1\n                          GPU:\n                            type: integer\n                            minimum: 0\n                          RAM:\n                            type: integer\n                            format: int64\n                            minimum: 1024\n                          MPI:\n                            type: integer\n                            maximum: 1\n                      service_build_details:\n                        type: object\n                        properties:\n                          build_date:\n                            type: string\n                          vcs_ref:\n                            type: string\n                          vcs_url:\n                            type: string\n                      container_spec:\n                        type: object\n                        properties:\n                          command:\n                            type: array\n                            items:\n                              type: string\n                  error:\n                    nullable: true\n                    default: null\n        '401':\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        '404':\n          description: Service not found\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n  /running_interactive_services:\n    get:\n      tags:\n        - users\n      summary: Returns a list of interactive services\n      operationId: running_interactive_services_list_get\n      parameters:\n        - in: query\n          name: user_id\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: project_id\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns the running services instances\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - data\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      required:\n                        - published_port\n                        - service_uuid\n                        - service_key\n                        - service_version\n                        - service_host\n                        - service_port\n                        - service_state\n                        - user_id\n                      properties:\n                        published_port:\n                          description: The ports where the service provides its interface\n                          type: integer\n                          format: int32\n                          minimum: 1\n                          example: 30000\n                        entry_point:\n                          description: The entry point where the service provides its interface if specified\n                          type: string\n                          example: /the/entry/point/is/here\n                        service_uuid:\n                          description: The UUID attached to this service\n                          type: string\n                          example: 123e4567-e89b-12d3-a456-426655440000\n                        service_key:\n                          type: string\n                          description: distinctive name for the node based on the docker registry path\n                          pattern: '^(simcore)/(services)/(comp|dynamic)(/[\\w/-]+)+$'\n                          example:\n                            - simcore/services/comp/itis/sleeper\n                            - simcore/services/dynamic/3dviewer\n                        service_version:\n                          type: string\n                          description: semantic version number\n                          pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n                          example:\n                            - 1.0.0\n                            - 0.0.1\n                        service_host:\n                          description: service host name within the network\n                          type: string\n                          example: jupyter_E1O2E-LAH\n                        service_port:\n                          description: port to access the service within the network\n                          type: integer\n                          minimum: 1\n                          example: 8081\n                        service_basepath:\n                          description: different base path where current service is mounted otherwise defaults to root\n                          type: string\n                          example: /x/E1O2E-LAH\n                          default: ''\n                        service_state:\n                          description: |\n                            the service state * 'pending' - The service is waiting for resources to start * 'pulling' - The service is being pulled from the registry * 'starting' - The service is starting * 'running' - The service is running * 'complete' - The service completed * 'failed' - The service failed to start\n                          type: string\n                          enum:\n                            - pending\n                            - pulling\n                            - starting\n                            - running\n                            - complete\n                            - failed\n                        service_message:\n                          description: the service message\n                          type: string\n                          example: no suitable node (insufficient resources on 1 node)\n                        user_id:\n                          description: the user that started the service\n                          type: string\n                          example: '123'\n                  error:\n                    nullable: true\n                    default: null\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n    post:\n      tags:\n        - users\n      summary: Starts an interactive service in the oSparc platform\n      operationId: running_interactive_services_post\n      parameters:\n        - in: query\n          name: user_id\n          description: The ID of the user that starts the service\n          required: true\n          schema:\n            type: string\n            example: asdfgj233\n        - in: query\n          name: project_id\n          description: The ID of the project in which the service starts\n          required: true\n          schema:\n            type: string\n            example: asdfgj233\n        - in: query\n          name: service_key\n          description: The key (url) of the service\n          required: true\n          schema:\n            type: string\n            description: distinctive name for the node based on the docker registry path\n            pattern: '^(simcore)/(services)/(comp|dynamic)(/[\\w/-]+)+$'\n            example:\n              - simcore/services/comp/itis/sleeper\n              - simcore/services/dynamic/3dviewer\n        - in: query\n          name: service_tag\n          description: The tag/version of the service\n          required: false\n          schema:\n            type: string\n            description: semantic version number\n            pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n            example:\n              - 1.0.0\n              - 0.0.1\n        - in: query\n          name: service_uuid\n          description: The uuid to assign the service with\n          required: true\n          schema:\n            type: string\n            example: 123e4567-e89b-12d3-a456-426655440000\n        - in: query\n          name: service_basepath\n          description: predefined basepath for the backend service otherwise uses root\n          required: false\n          schema:\n            type: string\n            example: /x/EycCXbU0H/\n            default: ''\n      responses:\n        '201':\n          description: Succesfully created the service in the oSparc platform. Returns the location where the service runs.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - data\n                properties:\n                  data:\n                    type: object\n                    required:\n                      - published_port\n                      - service_uuid\n                      - service_key\n                      - service_version\n                      - service_host\n                      - service_port\n                      - service_state\n                      - user_id\n                    properties:\n                      published_port:\n                        description: The ports where the service provides its interface\n                        type: integer\n                        format: int32\n                        minimum: 1\n                        example: 30000\n                      entry_point:\n                        description: The entry point where the service provides its interface if specified\n                        type: string\n                        example: /the/entry/point/is/here\n                      service_uuid:\n                        description: The UUID attached to this service\n                        type: string\n                        example: 123e4567-e89b-12d3-a456-426655440000\n                      service_key:\n                        type: string\n                        description: distinctive name for the node based on the docker registry path\n                        pattern: '^(simcore)/(services)/(comp|dynamic)(/[\\w/-]+)+$'\n                        example:\n                          - simcore/services/comp/itis/sleeper\n                          - simcore/services/dynamic/3dviewer\n                      service_version:\n                        type: string\n                        description: semantic version number\n                        pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n                        example:\n                          - 1.0.0\n                          - 0.0.1\n                      service_host:\n                        description: service host name within the network\n                        type: string\n                        example: jupyter_E1O2E-LAH\n                      service_port:\n                        description: port to access the service within the network\n                        type: integer\n                        minimum: 1\n                        example: 8081\n                      service_basepath:\n                        description: different base path where current service is mounted otherwise defaults to root\n                        type: string\n                        example: /x/E1O2E-LAH\n                        default: ''\n                      service_state:\n                        description: |\n                          the service state * 'pending' - The service is waiting for resources to start * 'pulling' - The service is being pulled from the registry * 'starting' - The service is starting * 'running' - The service is running * 'complete' - The service completed * 'failed' - The service failed to start\n                        type: string\n                        enum:\n                          - pending\n                          - pulling\n                          - starting\n                          - running\n                          - complete\n                          - failed\n                      service_message:\n                        description: the service message\n                        type: string\n                        example: no suitable node (insufficient resources on 1 node)\n                      user_id:\n                        description: the user that started the service\n                        type: string\n                        example: '123'\n                  error:\n                    nullable: true\n                    default: null\n        '400':\n          description: 'Malformed function call, missing field'\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        '401':\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        '404':\n          description: Service not found\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        '409':\n          description: A service with the same uuid already exists\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n  '/running_interactive_services/{service_uuid}':\n    get:\n      tags:\n        - users\n      summary: Succesfully returns if a service with the defined uuid is up and running\n      description: Succesfully returns if a service with the defined uuid is up and running\n      operationId: running_interactive_services_get\n      parameters:\n        - in: path\n          name: service_uuid\n          description: The uuid of the service\n          required: true\n          schema:\n            type: string\n            example: 123e4567-e89b-12d3-a456-426655440000\n      responses:\n        '200':\n          description: OK service exists and runs. Returns service location.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - data\n                properties:\n                  data:\n                    type: object\n                    required:\n                      - published_port\n                      - service_uuid\n                      - service_key\n                      - service_version\n                      - service_host\n                      - service_port\n                      - service_state\n                      - user_id\n                    properties:\n                      published_port:\n                        description: The ports where the service provides its interface\n                        type: integer\n                        format: int32\n                        minimum: 1\n                        example: 30000\n                      entry_point:\n                        description: The entry point where the service provides its interface if specified\n                        type: string\n                        example: /the/entry/point/is/here\n                      service_uuid:\n                        description: The UUID attached to this service\n                        type: string\n                        example: 123e4567-e89b-12d3-a456-426655440000\n                      service_key:\n                        type: string\n                        description: distinctive name for the node based on the docker registry path\n                        pattern: '^(simcore)/(services)/(comp|dynamic)(/[\\w/-]+)+$'\n                        example:\n                          - simcore/services/comp/itis/sleeper\n                          - simcore/services/dynamic/3dviewer\n                      service_version:\n                        type: string\n                        description: semantic version number\n                        pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n                        example:\n                          - 1.0.0\n                          - 0.0.1\n                      service_host:\n                        description: service host name within the network\n                        type: string\n                        example: jupyter_E1O2E-LAH\n                      service_port:\n                        description: port to access the service within the network\n                        type: integer\n                        minimum: 1\n                        example: 8081\n                      service_basepath:\n                        description: different base path where current service is mounted otherwise defaults to root\n                        type: string\n                        example: /x/E1O2E-LAH\n                        default: ''\n                      service_state:\n                        description: |\n                          the service state * 'pending' - The service is waiting for resources to start * 'pulling' - The service is being pulled from the registry * 'starting' - The service is starting * 'running' - The service is running * 'complete' - The service completed * 'failed' - The service failed to start\n                        type: string\n                        enum:\n                          - pending\n                          - pulling\n                          - starting\n                          - running\n                          - complete\n                          - failed\n                      service_message:\n                        description: the service message\n                        type: string\n                        example: no suitable node (insufficient resources on 1 node)\n                      user_id:\n                        description: the user that started the service\n                        type: string\n                        example: '123'\n                  error:\n                    nullable: true\n                    default: null\n        '400':\n          description: 'Malformed function call, missing field'\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        '404':\n          description: Service not found\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n    delete:\n      tags:\n        - users\n      summary: Stops and removes an interactive service from the oSparc platform\n      description: Stops and removes an interactive service from the oSparc platform\n      operationId: running_interactive_services_delete\n      parameters:\n        - in: path\n          name: service_uuid\n          description: The uuid of the service\n          required: true\n          schema:\n            type: string\n            example: 123e4567-e89b-12d3-a456-426655440000\n        - in: query\n          name: save_state\n          description: Save the state prior to removing the service\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        '204':\n          description: Succesfully stopped and removed the service from the oSparc platform\n        '400':\n          description: 'Malformed function call, missing field'\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        '404':\n          description: Service not found\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                properties:\n                  data:\n                    nullable: true\n                    default: null\n                  error:\n                    type: object\n                    required:\n                      - status\n                      - message\n                    properties:\n                      message:\n                        description: Error message\n                        type: string\n                        example: Unexpected error\n                      errors:\n                        type: array\n                        items:\n                          properties:\n                            code:\n                              type: string\n                              description: Server Exception\n                              example: ServiceUUIDNotFoundError\n                      status:\n                        description: Error code\n                        type: integer\n                        example: 404\ncomponents:\n  parameters:\n    UserId:\n      in: query\n      name: user_id\n      description: The ID of the user that starts the service\n      required: true\n      schema:\n        type: string\n        example: asdfgj233\n    ProjectId:\n      in: query\n      name: project_id\n      description: The ID of the project in which the service starts\n      required: true\n      schema:\n        type: string\n        example: asdfgj233\n    AssignmentUuid:\n      in: query\n      name: service_uuid\n      description: The uuid to assign the service with\n      required: true\n      schema:\n        type: string\n        example: 123e4567-e89b-12d3-a456-426655440000\n    ServiceKeyPath:\n      in: path\n      name: service_key\n      description: The key (url) of the service\n      required: true\n      schema:\n        type: string\n        description: distinctive name for the node based on the docker registry path\n        pattern: '^(simcore)/(services)/(comp|dynamic)(/[\\w/-]+)+$'\n        example:\n          - simcore/services/comp/itis/sleeper\n          - simcore/services/dynamic/3dviewer\n    ServiceKey:\n      in: query\n      name: service_key\n      description: The key (url) of the service\n      required: true\n      schema:\n        type: string\n        description: distinctive name for the node based on the docker registry path\n        pattern: '^(simcore)/(services)/(comp|dynamic)(/[\\w/-]+)+$'\n        example:\n          - simcore/services/comp/itis/sleeper\n          - simcore/services/dynamic/3dviewer\n    ServiceType:\n      in: query\n      name: service_type\n      description: |\n        The service type:\n          * computational - a computational service\n          * interactive - an interactive service\n      required: false\n      schema:\n        type: string\n        enum:\n          - computational\n          - interactive\n        example: computational\n    ServiceBasePath:\n      in: query\n      name: service_basepath\n      description: predefined basepath for the backend service otherwise uses root\n      required: false\n      schema:\n        type: string\n        example: /x/EycCXbU0H/\n        default: ''\n    ServiceUuid:\n      in: path\n      name: service_uuid\n      description: The uuid of the service\n      required: true\n      schema:\n        type: string\n        example: 123e4567-e89b-12d3-a456-426655440000\n    ServiceVersionPath:\n      in: path\n      name: service_version\n      description: The tag/version of the service\n      required: true\n      schema:\n        type: string\n        description: semantic version number\n        pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n        example:\n          - 1.0.0\n          - 0.0.1\n    ServiceVersion:\n      in: query\n      name: service_tag\n      description: The tag/version of the service\n      required: false\n      schema:\n        type: string\n        description: semantic version number\n        pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n        example:\n          - 1.0.0\n          - 0.0.1\n    SaveState:\n      in: query\n      name: save_state\n      description: Save the state prior to removing the service\n      required: false\n      schema:\n        type: boolean\n        default: true\n  schemas:\n    ErrorEnveloped:\n      type: object\n      required:\n        - error\n      properties:\n        data:\n          nullable: true\n          default: null\n        error:\n          type: object\n          required:\n            - status\n            - message\n          properties:\n            message:\n              description: Error message\n              type: string\n              example: Unexpected error\n            errors:\n              type: array\n              items:\n                properties:\n                  code:\n                    type: string\n                    description: Server Exception\n                    example: ServiceUUIDNotFoundError\n            status:\n              description: Error code\n              type: integer\n              example: 404\n    RunningServiceEnveloped:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: object\n          required:\n            - published_port\n            - service_uuid\n            - service_key\n            - service_version\n            - service_host\n            - service_port\n            - service_state\n            - user_id\n          properties:\n            published_port:\n              description: The ports where the service provides its interface\n              type: integer\n              format: int32\n              minimum: 1\n              example: 30000\n            entry_point:\n              description: The entry point where the service provides its interface if specified\n              type: string\n              example: /the/entry/point/is/here\n            service_uuid:\n              description: The UUID attached to this service\n              type: string\n              example: 123e4567-e89b-12d3-a456-426655440000\n            service_key:\n              type: string\n              description: distinctive name for the node based on the docker registry path\n              pattern: '^(simcore)/(services)/(comp|dynamic)(/[\\w/-]+)+$'\n              example:\n                - simcore/services/comp/itis/sleeper\n                - simcore/services/dynamic/3dviewer\n            service_version:\n              type: string\n              description: semantic version number\n              pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n              example:\n                - 1.0.0\n                - 0.0.1\n            service_host:\n              description: service host name within the network\n              type: string\n              example: jupyter_E1O2E-LAH\n            service_port:\n              description: port to access the service within the network\n              type: integer\n              minimum: 1\n              example: 8081\n            service_basepath:\n              description: different base path where current service is mounted otherwise defaults to root\n              type: string\n              example: /x/E1O2E-LAH\n              default: ''\n            service_state:\n              description: |\n                the service state * 'pending' - The service is waiting for resources to start * 'pulling' - The service is being pulled from the registry * 'starting' - The service is starting * 'running' - The service is running * 'complete' - The service completed * 'failed' - The service failed to start\n              type: string\n              enum:\n                - pending\n                - pulling\n                - starting\n                - running\n                - complete\n                - failed\n            service_message:\n              description: the service message\n              type: string\n              example: no suitable node (insufficient resources on 1 node)\n            user_id:\n              description: the user that started the service\n              type: string\n              example: '123'\n        error:\n          nullable: true\n          default: null\n    RunningServicesEnveloped:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: array\n          items:\n            type: object\n            required:\n              - published_port\n              - service_uuid\n              - service_key\n              - service_version\n              - service_host\n              - service_port\n              - service_state\n              - user_id\n            properties:\n              published_port:\n                description: The ports where the service provides its interface\n                type: integer\n                format: int32\n                minimum: 1\n                example: 30000\n              entry_point:\n                description: The entry point where the service provides its interface if specified\n                type: string\n                example: /the/entry/point/is/here\n              service_uuid:\n                description: The UUID attached to this service\n                type: string\n                example: 123e4567-e89b-12d3-a456-426655440000\n              service_key:\n                type: string\n                description: distinctive name for the node based on the docker registry path\n                pattern: '^(simcore)/(services)/(comp|dynamic)(/[\\w/-]+)+$'\n                example:\n                  - simcore/services/comp/itis/sleeper\n                  - simcore/services/dynamic/3dviewer\n              service_version:\n                type: string\n                description: semantic version number\n                pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n                example:\n                  - 1.0.0\n                  - 0.0.1\n              service_host:\n                description: service host name within the network\n                type: string\n                example: jupyter_E1O2E-LAH\n              service_port:\n                description: port to access the service within the network\n                type: integer\n                minimum: 1\n                example: 8081\n              service_basepath:\n                description: different base path where current service is mounted otherwise defaults to root\n                type: string\n                example: /x/E1O2E-LAH\n                default: ''\n              service_state:\n                description: |\n                  the service state * 'pending' - The service is waiting for resources to start * 'pulling' - The service is being pulled from the registry * 'starting' - The service is starting * 'running' - The service is running * 'complete' - The service completed * 'failed' - The service failed to start\n                type: string\n                enum:\n                  - pending\n                  - pulling\n                  - starting\n                  - running\n                  - complete\n                  - failed\n              service_message:\n                description: the service message\n                type: string\n                example: no suitable node (insufficient resources on 1 node)\n              user_id:\n                description: the user that started the service\n                type: string\n                example: '123'\n        error:\n          nullable: true\n          default: null\n    ServicesEnveloped:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: array\n          items:\n            title: simcore node\n            description: Description of a simcore node 'class' with input and output\n            type: object\n            additionalProperties: false\n            required:\n              - key\n              - version\n              - type\n              - name\n              - description\n              - authors\n              - contact\n              - inputs\n              - outputs\n            properties:\n              key:\n                type: string\n                description: distinctive name for the node based on the docker registry path\n                pattern: '^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$'\n                example: simcore/services/comp/itis/sleeper\n              integration-version:\n                type: string\n                description: integration version number\n                pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n                example: 1.0.0\n              version:\n                type: string\n                description: service version number\n                pattern: '^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$'\n                example: 1.0.0\n              type:\n                type: string\n                description: service type\n                enum:\n                  - frontend\n                  - computational\n                  - dynamic\n                example: computational\n              name:\n                type: string\n                description: 'short, human readable name for the node'\n                example: Fast Counter\n              thumbnail:\n                type: string\n                description: url to the thumbnail\n                example: 'https://user-images.githubusercontent.com/32800795/61083844-ff48fb00-a42c-11e9-8e63-fa2d709c8baf.png'\n              badges:\n                type: array\n                items:\n                  type: object\n                  required:\n                    - name\n                    - image\n                    - url\n                  additionalProperties: false\n                  properties:\n                    name:\n                      type: string\n                      description: Name of the subject\n                      example: travis-ci\n                    image:\n                      type: string\n                      description: Url to the shield\n                      example: 'https://travis-ci.org/ITISFoundation/osparc-simcore.svg?branch=master'\n                    url:\n                      type: string\n                      description: Link to status\n                      example: 'https://travis-ci.org/ITISFoundation/osparc-simcore ''State of CI: build, test and pushing images'''\n              description:\n                type: string\n                description: human readable description of the purpose of the node\n                example: Our best node type\n              authors:\n                type: array\n                minItems: 1\n                items:\n                  type: object\n                  required:\n                    - name\n                    - email\n                  additionalProperties: false\n                  properties:\n                    name:\n                      type: string\n                      description: Name of the author\n                      example: Sun Bak\n                    email:\n                      description: Email address\n                      type: string\n                      format: email\n                      example: sun@sense.eight\n                    affiliation:\n                      description: Affiliation of the author\n                      type: string\n                      example: Sense8\n              contact:\n                type: string\n                format: email\n                description: email to correspond to the authors about the node\n                example: lab@net.flix\n              inputs:\n                type: object\n                description: definition of the inputs of this node\n                x-patternProperties:\n                  '^[-_a-zA-Z0-9]+$':\n                    type: object\n                    description: all the input configurable for this service\n                    additionalProperties: false\n                    required:\n                      - displayOrder\n                      - label\n                      - description\n                      - type\n                    properties:\n                      displayOrder:\n                        description: 'DEPRECATED: new display order is taken from the item position. This property will be removed.'\n                        deprecated: true\n                        type: number\n                      label:\n                        type: string\n                        description: short name for the property\n                        example:\n                          - Age\n                      description:\n                        type: string\n                        description: description of the property\n                        example:\n                          - Age in seconds since 1970\n                      type:\n                        type: string\n                        pattern: '^(number|integer|boolean|string|ref_contentSchema|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$'\n                        description: data type expected on this input glob matching for data type is allowed\n                        example:\n                          - number\n                          - boolean\n                          - 'data:*/*'\n                          - 'data:text/*'\n                          - 'data:[image/jpeg,image/png]'\n                          - 'data:application/json'\n                          - 'data:application/json;schema=https://my-schema/not/really/schema.json'\n                          - 'data:application/vnd.ms-excel'\n                          - 'data:text/plain'\n                          - 'data:application/hdf5'\n                          - 'data:application/edu.ucdavis@ceclancy.xyz'\n                      contentSchema:\n                        title: Content Schema\n                        description: jsonschema of the content at this input/output. Required when type='ref_contentSchema'\n                        type: object\n                      fileToKeyMap:\n                        description: Place the data associated with the named keys in files\n                        type: object\n                        patternProperties:\n                          .+:\n                            type: string\n                            pattern: '^[-_a-zA-Z0-9]+$'\n                        example:\n                          - dir/input1.txt: key_1\n                            dir33/input2.txt: key2\n                      defaultValue:\n                        description: initial value for this input\n                        type:\n                          - string\n                          - number\n                          - integer\n                          - boolean\n                        example:\n                          - Dog\n                          - true\n                      unit:\n                        title: Unit\n                        description: 'Units of this input value, if a physical quantity'\n                        type: string\n                      widget:\n                        description: custom widget to use instead of the default one determined from the data-type\n                        anyOf:\n                          - type: object\n                            additionalProperties: false\n                            required:\n                              - type\n                            properties:\n                              type:\n                                description: type of the property\n                                type: string\n                                enum:\n                                  - TextArea\n                              minHeight:\n                                description: minimum Height of the textarea\n                                type: integer\n                                minimum: 1\n                          - type: object\n                            additionalProperties: false\n                            required:\n                              - type\n                              - structure\n                            properties:\n                              type:\n                                description: type of the property\n                                type: string\n                                enum:\n                                  - SelectBox\n                              structure:\n                                type: array\n                                minItems: 1\n                                items:\n                                  type: object\n                                  additionalProperties: false\n                                  required:\n                                    - key\n                                    - label\n                                  properties:\n                                    key:\n                                      type:\n                                        - string\n                                        - boolean\n                                        - number\n                                    label:\n                                      type: string\n                                  example:\n                                    - - key: rat\n                                        label: The Rat\n                                      - key: dog\n                                        label: Bello the Dog\n                additionalProperties: true\n              outputs:\n                type: object\n                description: definition of the outputs of this node\n                x-patternProperties:\n                  '^[-_a-zA-Z0-9]+$':\n                    type: object\n                    description: all the output produced by this node\n                    additionalProperties: false\n                    required:\n                      - displayOrder\n                      - label\n                      - description\n                      - type\n                    properties:\n                      displayOrder:\n                        type: number\n                        description: use this to numerically sort the properties for display\n                        example:\n                          - 1\n                          - -0.2\n                      label:\n                        type: string\n                        description: short name for the property\n                        example:\n                          - Age\n                      description:\n                        type: string\n                        description: description of the property\n                        example:\n                          - Age in seconds since 1970\n                      type:\n                        type: string\n                        pattern: '^(number|integer|boolean|string|ref_contentSchema|data:[^/\\s,]+/[^/\\s,]+)$'\n                        description: data type expected on this output\n                        example:\n                          - number\n                          - integer\n                          - boolean\n                          - string\n                          - 'data:application/json'\n                          - 'data:application/vnd.ms-excel '\n                          - 'data:text/plain'\n                          - 'data:application/hdf5'\n                      contentSchema:\n                        title: Content Schema\n                        description: jsonschema of this input/output. Required when type='ref_contentSchema'\n                        type: object\n                      fileToKeyMap:\n                        description: Place the data stored in the named files and store it in the locations pointed to by the respective output key.\n                        type: object\n                        patternProperties:\n                          .+:\n                            type: string\n                            pattern: '^[-_a-zA-Z0-9]+$'\n                        example:\n                          - dir/input1.txt: key_1\n                            dir33/input2.txt: key2\n                      unit:\n                        title: Unit\n                        description: 'Units of the output value, if a physical quantity'\n                        type: string\n                additionalProperties: true\n              boot-options:\n                title: Boot Options\n                description: Service defined boot options. These get injected in the service as env variables.\n                type: object\n                x-patternProperties:\n                  '^[_a-zA-Z0-9]+$':\n                    title: BootOptionMode\n                    type: object\n                    properties:\n                      label:\n                        title: Label\n                        type: string\n                      description:\n                        title: Description\n                        type: string\n                      default:\n                        title: Default\n                        type: string\n                      items:\n                        title: Items\n                        type: object\n                        additionalProperties:\n                          title: BootOptionItem\n                          type: object\n                          properties:\n                            label:\n                              title: Label\n                              type: string\n                            description:\n                              title: Description\n                              type: string\n                          required:\n                            - label\n                            - description\n                    required:\n                      - label\n                      - description\n                      - default\n                      - items\n                additionalProperties: true\n        error:\n          nullable: true\n          default: null\n    ServiceExtrasEnveloped:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: object\n          required:\n            - node_requirements\n          properties:\n            node_requirements:\n              type: object\n              required:\n                - CPU\n                - RAM\n              properties:\n                CPU:\n                  type: number\n                  default: 1\n                  minimum: 1\n                GPU:\n                  type: integer\n                  minimum: 0\n                RAM:\n                  type: integer\n                  format: int64\n                  minimum: 1024\n                MPI:\n                  type: integer\n                  maximum: 1\n            service_build_details:\n              type: object\n              properties:\n                build_date:\n                  type: string\n                vcs_ref:\n                  type: string\n                vcs_url:\n                  type: string\n            container_spec:\n              type: object\n              properties:\n                command:\n                  type: array\n                  items:\n                    type: string\n        error:\n          nullable: true\n          default: null\n    HealthCheckEnveloped:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: object\n          properties:\n            name:\n              type: string\n              example: director service\n            status:\n              type: string\n              example: SERVICE_RUNNING\n            api_version:\n              type: string\n              example: 1.0.0-dev\n            version:\n              type: string\n              example: 1dfcfdc\n        error:\n          nullable: true\n          default: null\n",
			"canonicalURL": "/github.com/ITISFoundation/osparc-simcore@a53bc458c38fdf7a407af28694e050c84813a99c/-/blob/services/director/src/simcore_service_director/api/v0/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ITISFoundation/osparc-simcore/blob/a53bc458c38fdf7a407af28694e050c84813a99c/services/director/src/simcore_service_director/api/v0/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"RunningServicesEnveloped\": parse schema: property \"error\": parse schema: at 1:8421: cannot infer type from \"null\""
}