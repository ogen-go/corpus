{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/oxforddictionaries.com/1.11.0/openapi.yaml",
			"byteSize": 91625,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://od-api-demo.oxforddictionaries.com:443/api/v1\nx-hasEquivalentPaths: true\ninfo:\n  license:\n    name: API Terms And Conditions\n    url: https://developer.oxforddictionaries.com/api-terms-and-conditions\n  termsOfService: http://helloreverb.com/terms/\n  title: Oxford Dictionaries\n  version: 1.11.0\n  x-apisguru-categories:\n    - text\n  x-logo:\n    url: https://twitter.com/OxfordWordsAPI/profile_image?size=original\n  x-origin:\n    - format: openapi\n      url: https://developer.oxforddictionaries.com/swagger/spec/public_doc_guest.json\n      version: \"3.0\"\n  x-providerName: oxforddictionaries.com\npaths:\n  \"/domains/{source_domains_language}/{target_domains_language}\":\n    get:\n      description: |\n        Returns a list of the available [domains](documentation/glossary?term=domain) for a given bilingual language dataset.\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_domains_language\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n              - nso\n              - zu\n              - ur\n              - de\n              - pt\n            type: string\n        - description: IANA language code\n          in: path\n          name: target_domains_language\n          required: true\n          schema:\n            enum:\n              - es\n              - nso\n              - zu\n              - ms\n              - id\n              - tn\n              - ro\n              - de\n              - pt\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UtilityLabels\"\n          description: Successful response.\n        \"400\":\n          description: source_language and target_language are same.\n        \"404\":\n          description: Unknown source_language and/or target_language.\n      summary: Lists available domains in a bilingual dataset\n      tags:\n        - Utility\n  \"/domains/{source_language}\":\n    get:\n      description: |\n        Returns a list of the available [domains](documentation/glossary?term=domain) for a given monolingual language dataset.\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_language\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n              - nso\n              - zu\n              - hi\n              - sw\n              - ur\n              - de\n              - pt\n              - ta\n              - gu\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UtilityLabels\"\n          description: Successful response.\n        \"404\":\n          description: Unknown source_language.\n      summary: Lists available domains in a monolingual dataset\n      tags:\n        - Utility\n  \"/entries/{source_language}/{word_id}/sentences\":\n    get:\n      description: |\n        \n        Use this to retrieve sentences extracted from  corpora which show how a word is used in the language. This is available for English and Spanish. For English, the sentences are linked to the correct [sense](documentation/glossary?term=sense) of the word in the dictionary. In Spanish, they are linked at the [headword](documentation/glossary?term=headword) level.\n          \u003cdiv id=\"sentences\"\u003e\u003c/div\u003e\n      externalDocs:\n        description: find more info here\n        url: https://helloreverb.com/about\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_language\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n            type: string\n        - description: An Entry identifier. Case-sensitive.\n          in: path\n          name: word_id\n          required: true\n          schema:\n            default: ace\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SentencesResults\"\n          description: Successful response.\n        \"404\":\n          description: |\n            No entry is found matching supplied id and source_language\n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Retrieve corpus sentences for a given word\n      tags:\n        - The Sentence Dictionary\n  \"/entries/{source_lang}/{word_id}\":\n    get:\n      description: |\n        \n        Use this to retrieve definitions, [pronunciations](documentation/glossary?term=pronunciation), example sentences, [grammatical information](documentation/glossary?term=grammaticalfeatures) and [word origins](documentation/glossary?term=etymology). It only works for dictionary [headwords](documentation/glossary?term=headword), so you may need to use the [Lemmatron](documentation/glossary?term=lemma) first if your input is likely to be an [inflected](documentation/glossary?term=inflection) form (e.g., 'swimming'). This would return the linked [headword](documentation/glossary?term=headword) (e.g., 'swim') which you can then use in the Entries endpoint. Unless specified using a region filter, the default lookup will be the Oxford Dictionary of English (GB). \n          \u003cdiv id=\"dictionary_entries\"\u003e\u003c/div\u003e\n      externalDocs:\n        description: find more info here\n        url: https://helloreverb.com/about\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_lang\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n              - lv\n              - hi\n              - sw\n              - ta\n              - gu\n              - fr\n            type: string\n        - description: An Entry identifier. Case-sensitive.\n          in: path\n          name: word_id\n          required: true\n          schema:\n            default: ace\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RetrieveEntry\"\n          description: Successful response.\n        \"404\":\n          description: |\n            No entry is found matching supplied id and source_lang or filters are not recognized\n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Retrieve dictionary information for a given word\n      tags:\n        - Dictionary entries\n  \"/entries/{source_lang}/{word_id}/antonyms\":\n    get:\n      description: |\n        \n        Retrieve words that are opposite in meaning to the input word ([antonym](documentation/glossary?term=thesaurus)).\n\n          \u003cdiv id=\"antonyms\"\u003e\u003c/div\u003e\n      externalDocs:\n        description: find more info here\n        url: https://helloreverb.com/about\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_lang\n          required: true\n          schema:\n            enum:\n              - en\n            type: string\n        - description: An Entry identifier. Case-sensitive.\n          in: path\n          name: word_id\n          required: true\n          schema:\n            default: ace\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Thesaurus\"\n          description: Successful response.\n        \"404\":\n          description: |\n            No entry is found matching supplied id and source_lang or filters are not recognized\n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Retrieve words that mean the opposite\n      tags:\n        - Thesaurus\n  \"/entries/{source_lang}/{word_id}/regions={region}\":\n    get:\n      description: |\n        \n        USe this filter to restrict the lookup to either our Oxford Dictionary of English (GB) or New Oxford American Dictionary (US).\n      externalDocs:\n        description: find more info here\n        url: https://helloreverb.com/about\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_lang\n          required: true\n          schema:\n            enum:\n              - en\n            type: string\n        - description: An Entry identifier. Case-sensitive.\n          in: path\n          name: word_id\n          required: true\n          schema:\n            default: ace\n            type: string\n        - description: Region filter parameter. gb = Oxford Dictionary of English. us = New Oxford American Dictionary.\n          in: path\n          name: region\n          required: true\n          schema:\n            enum:\n              - gb\n              - us\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RetrieveEntry\"\n          description: Successful response.\n        \"404\":\n          description: |\n            no entry is found matching supplied source_lang and id\n            and/or that entry has no senses with translations in the target language. \n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Specify GB or US dictionary for English entry search\n      tags:\n        - Dictionary entries\n  \"/entries/{source_lang}/{word_id}/synonyms\":\n    get:\n      description: |\n        \n        Use this to retrieve words that are similar in meaning to the input word ([synonym](documentation/glossary?term=synonym)).\n\n          \u003cdiv id=\"synonyms\"\u003e\u003c/div\u003e\n      externalDocs:\n        description: find more info here\n        url: https://helloreverb.com/about\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_lang\n          required: true\n          schema:\n            enum:\n              - en\n            type: string\n        - description: An Entry identifier. Case-sensitive.\n          in: path\n          name: word_id\n          required: true\n          schema:\n            default: ace\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Thesaurus\"\n          description: Successful response.\n        \"404\":\n          description: |\n            No entry is found matching supplied id and source_lang or filters are not recognized\n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Retrieve words that are similar\n      tags:\n        - Thesaurus\n  \"/entries/{source_lang}/{word_id}/synonyms;antonyms\":\n    get:\n      description: |\n        \n        Retrieve available [synonyms](documentation/glossary?term=thesaurus) and [antonyms](documentation/glossary?term=thesaurus) for a given word and language. \n\n          \u003cdiv id=\"synonyms_and_antonyms\"\u003e\u003c/div\u003e\n      externalDocs:\n        description: find more info here\n        url: https://helloreverb.com/about\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_lang\n          required: true\n          schema:\n            enum:\n              - en\n            type: string\n        - description: An Entry identifier. Case-sensitive.\n          in: path\n          name: word_id\n          required: true\n          schema:\n            default: ace\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Thesaurus\"\n          description: Successful response.\n        \"404\":\n          description: |\n            No entry is found matching supplied id and source_lang or filters are not recognized\n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Retrieve synonyms and antonyms for a given word\n      tags:\n        - Thesaurus\n  \"/entries/{source_lang}/{word_id}/{filters}\":\n    get:\n      description: |\n        \n        Use filters to limit the [entry](documentation/glossary?term=entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term=pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using '='. For example 'grammaticalFeatures=singular'. Filters can also be combined using a semicolon.\n\n          \u003cdiv id=\"dictionary_entries_filters\"\u003e\u003c/div\u003e\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_lang\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n              - lv\n              - hi\n              - sw\n              - ta\n              - gu\n              - fr\n            type: string\n        - description: An Entry identifier. Case-sensitive.\n          in: path\n          name: word_id\n          required: true\n          schema:\n            default: ace\n            type: string\n        - description: Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma.\n          in: path\n          name: filters\n          required: true\n          schema:\n            default: grammaticalFeatures=singular,past;lexicalCategory=noun\n            items:\n              pattern: (lexicalCategory|grammaticalFeatures)=.+\n              type: string\n            type: string\n          style: simple\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RetrieveEntry\"\n          description: Successful response.\n        \"404\":\n          description: |\n            no entry is found matching supplied source_lang and id\n            and/or that entry has no senses with translations in the target language. \n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Apply filters to response\n      tags:\n        - Dictionary entries\n  \"/entries/{source_translation_language}/{word_id}/translations={target_translation_language}\":\n    get:\n      description: |\n        \n        Use this to return translations for a given word. In the event that a word in the dataset does not have a direct translation, the response will be a [definition](documentation/glossary?term=entry) in the target language.\n\n          \u003cdiv id=\"translation\"\u003e\u003c/div\u003e\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_translation_language\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n              - nso\n              - zu\n              - ms\n              - id\n              - tn\n              - ur\n              - de\n              - pt\n            type: string\n        - description: The source word\n          in: path\n          name: word_id\n          required: true\n          schema:\n            default: change\n            type: string\n        - description: IANA language code\n          in: path\n          name: target_translation_language\n          required: true\n          schema:\n            enum:\n              - es\n              - nso\n              - zu\n              - ms\n              - id\n              - tn\n              - ro\n              - de\n              - pt\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RetrieveEntry\"\n          description: Successful response. In case word doesn't have a direct translation a response would be definitions.\n        \"400\":\n          description: any of target languages is unknown\n        \"404\":\n          description: |\n            no entry is found matching supplied source_lang and id\n            and/or that entry has no senses with translations in the target language(s). \n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Retrieve translation for a given word\n      tags:\n        - Translation\n  /filters:\n    get:\n      description: |\n        Returns a list of all the valid filters to construct API calls.\n      parameters:\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Filters\"\n          description: Successful response.\n        \"500\":\n          description: Internal Error. An error occurred while processing the data.\n      summary: Lists available filters\n      tags:\n        - Utility\n  \"/filters/{endpoint}\":\n    get:\n      description: |\n        Returns a list of all the valid filters for a given endpoint to construct API calls.\n      parameters:\n        - description: Name of the endpoint.\n          in: path\n          name: endpoint\n          required: true\n          schema:\n            enum:\n              - entries\n              - inflections\n              - translations\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Filters\"\n          description: Successful response.\n        \"404\":\n          description: Unknown endpoint.\n        \"500\":\n          description: Internal Error. An error occurred while processing the data.\n      summary: Lists available filters for specific endpoint\n      tags:\n        - Utility\n  \"/grammaticalFeatures/{source_language}\":\n    get:\n      description: |\n        Returns a list of the available [grammatical features](documentation/glossary?term=grammaticalfeatures) for a given language dataset.\n      parameters:\n        - description: IANA language code. If provided output will be filtered by sourceLanguage.\n          in: path\n          name: source_language\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n              - lv\n              - nso\n              - zu\n              - ms\n              - tn\n              - ur\n              - hi\n              - sw\n              - de\n              - pt\n              - ta\n              - gu\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UtilityLabels\"\n          description: Successful response.\n        \"404\":\n          description: Unknown source_language.\n      summary: Lists available grammatical features in a dataset\n      tags:\n        - Utility\n  \"/inflections/{source_lang}/{word_id}/{filters}\":\n    get:\n      description: |\n        \n        Use this to check if a word exists in the dictionary, or what 'root' form it links to (e.g., swimming \u003e swim). The response tells you the possible [lemmas](documentation/glossary?term=lemma) for a given [inflected](documentation/glossary?term=inflection) word. This can then be combined with other endpoints to retrieve more information.\n\n          \u003cdiv id=\"lemmatron\"\u003e\u003c/div\u003e\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_lang\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n              - hi\n              - nso\n              - tn\n              - zu\n              - de\n              - pt\n            type: string\n        - description: Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma.\n          in: path\n          name: filters\n          required: true\n          schema:\n            default: grammaticalFeatures=singular,past;lexicalCategory=noun\n            items:\n              pattern: (lexicalCategory|grammaticalFeatures)=.+\n              type: string\n            type: string\n          style: simple\n        - description: The input word\n          in: path\n          name: word_id\n          required: true\n          schema:\n            default: swimming\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Lemmatron\"\n          description: Successful response.\n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Check a word exists in the dictionary and retrieve its root form\n      tags:\n        - Lemmatron\n  /languages:\n    get:\n      description: |\n        Returns a list of monolingual and bilingual language datasets available in the API\n      parameters:\n        - description: IANA language code. If provided output will be filtered by sourceLanguage.\n          in: query\n          name: sourceLanguage\n          required: false\n          schema:\n            enum:\n              - es\n              - en\n              - lv\n              - nso\n              - zu\n              - ms\n              - id\n              - tn\n              - ur\n              - hi\n              - sw\n              - ro\n              - de\n              - pt\n              - ta\n              - gu\n            type: string\n        - description: IANA language code. If provided output will be filtered by sourceLanguage.\n          in: query\n          name: targetLanguage\n          required: false\n          schema:\n            enum:\n              - es\n              - en\n              - lv\n              - nso\n              - zu\n              - ms\n              - id\n              - tn\n              - ur\n              - hi\n              - sw\n              - ro\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Languages\"\n          description: Successful response.\n        \"404\":\n          description: Unknown sourceLanguage and/or targetLanguage.\n        \"500\":\n          description: Internal Error. An error occurred while processing the data.\n      summary: Lists available dictionaries\n      tags:\n        - Utility\n  \"/lexicalcategories/{language}\":\n    get:\n      description: |\n        Returns a list of available [lexical categories](documentation/glossary?term=lexicalcategory) for a given language dataset.\n      parameters:\n        - description: IANA language code\n          in: path\n          name: language\n          required: true\n          schema:\n            enum:\n              - es\n              - en\n              - lv\n              - nso\n              - zu\n              - ms\n              - id\n              - tn\n              - ur\n              - hi\n              - sw\n              - ro\n              - de\n              - pt\n              - ta\n              - gu\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UtilityLabels\"\n          description: Successful response.\n        \"404\":\n          description: Unknown language.\n        \"500\":\n          description: Internal Error. An error occurred while processing the data.\n      summary: Lists available lexical categories in a dataset\n      tags:\n        - Utility\n  \"/regions/{source_language}\":\n    get:\n      description: |\n        Returns a list of the available [regions](documentation/glossary?term=regions) for a given monolingual language dataset.\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_language\n          required: true\n          schema:\n            enum:\n              - en\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Regions\"\n          description: Successful response.\n        \"404\":\n          description: Unknown source_language.\n      summary: Lists available regions in a monolingual dataset\n      tags:\n        - Utility\n  \"/registers/{source_language}\":\n    get:\n      description: |\n        Returns a list of the available [registers](documentation/glossary?term=registers) for a given monolingual language dataset.\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_language\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n              - hi\n              - id\n              - lv\n              - ms\n              - sw\n              - ur\n              - de\n              - pt\n              - ta\n              - gu\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UtilityLabels\"\n          description: Successful response.\n        \"404\":\n          description: Unknown source_language.\n        \"500\":\n          description: Internal Error. An error occurred while processing the data.\n      summary: Lists available registers in a  monolingual dataset\n      tags:\n        - Utility\n  \"/registers/{source_register_language}/{target_register_language}\":\n    get:\n      description: |\n        Returns a list of the available [registers](documentation/glossary?term=registers) for a given bilingual language dataset.\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_register_language\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n              - ms\n              - id\n              - ur\n              - de\n              - pt\n            type: string\n        - description: IANA language code\n          in: path\n          name: target_register_language\n          required: true\n          schema:\n            enum:\n              - es\n              - en\n              - nso\n              - zu\n              - ms\n              - id\n              - tn\n              - ro\n              - de\n              - pt\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UtilityLabels\"\n          description: Successful response.\n        \"400\":\n          description: source_language and target_language are same.\n        \"404\":\n          description: Unknown source_language and/or target_language.\n        \"500\":\n          description: Internal Error. An error occurred while processing the data.\n      summary: Lists available registers in a bilingual dataset\n      tags:\n        - Utility\n  \"/search/{source_lang}\":\n    get:\n      description: |\n        \n        Use this to retrieve possible [headword](documentation/glossary?term=headword) matches for a given string of text. The results are culculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term=lemma) \n\n          \u003cdiv id=\"search\"\u003e\u003c/div\u003e\n      externalDocs:\n        description: find more info here\n        url: https://helloreverb.com/about\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_lang\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n              - hi\n              - lv\n              - sw\n              - ta\n              - gu\n            type: string\n        - description: Search string\n          in: query\n          name: q\n          required: false\n          schema:\n            default: eye\n            type: string\n        - description: Set prefix to true if you'd like to get results only starting with search string.\n          in: query\n          name: prefix\n          required: false\n          schema:\n            default: \"false\"\n            enum:\n              - \"false\"\n              - \"true\"\n            type: boolean\n        - description: If searching in English, filter words with specific region(s) either 'us' or 'gb'.\n          in: query\n          name: regions\n          required: false\n          schema:\n            type: string\n        - description: Limit the number of results per response. Default and maximum limit is 5000.\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: string\n        - description: Offset the start number of the result.\n          in: query\n          name: offset\n          required: false\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Wordlist\"\n          description: Successful response.\n        \"404\":\n          description: |\n            No entry is found matching supplied id and source_lang or filters are not recognized\n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Retrieve possible matches to input\n      tags:\n        - Search\n  \"/search/{source_search_language}/translations={target_search_language}\":\n    get:\n      description: |\n        \n        Use this to find matches in our translation dictionaries.\n\n          \u003cdiv id=\"search_translation\"\u003e\u003c/div\u003e\n      externalDocs:\n        description: find more info here\n        url: https://helloreverb.com/about\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_search_language\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n              - nso\n              - zu\n              - ms\n              - id\n              - tn\n              - ur\n              - de\n              - pt\n            type: string\n        - description: IANA language code\n          in: path\n          name: target_search_language\n          required: true\n          schema:\n            enum:\n              - es\n              - nso\n              - zu\n              - ms\n              - id\n              - tn\n              - ro\n              - de\n              - pt\n            type: string\n        - description: Search string.\n          in: query\n          name: q\n          required: false\n          schema:\n            default: eye\n            type: string\n        - description: Set prefix to true if you'd like to get results only starting with search string.\n          in: query\n          name: prefix\n          required: false\n          schema:\n            default: \"false\"\n            enum:\n              - \"false\"\n              - \"true\"\n            type: boolean\n        - description: Filter words with specific region(s) E.g., regions=us. For now gb, us are available for en language.\n          in: query\n          name: regions\n          required: false\n          schema:\n            type: string\n        - description: Limit the number of results per response. Default and maximum limit is 5000.\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: string\n        - description: Offset the start number of the result.\n          in: query\n          name: offset\n          required: false\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Wordlist\"\n          description: Successful response.\n        \"404\":\n          description: |\n            No entry is found matching supplied id and source_lang or filters are not recognized\n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Retrieve possible translation matches to input\n      tags:\n        - Search\n  \"/stats/frequency/ngrams/{source_lang}/{corpus}/{ngram-size}/\":\n    get:\n      description: |\n        This endpoint returns frequencies of ngrams of size 1-4. That is the number of times a word (ngram size = 1) or words (ngram size \u003e 1) appear in the corpus. Ngrams are case sensitive (\"I AM\" and \"I am\" will have different frequency) and frequencies are calculated per word (true case) so \"the book\" and \"the books\" are two different ngrams. The results can be filtered based on query parameters. \u003cbr\u003e \u003cbr\u003e Parameters can be provided in PATH, GET or POST (form or json). The parameters in PATH are overridden by parameters in GET, POST and json (in that order). In PATH, individual options are separated by semicolon and values are separated by commas (where multiple values can be used). \u003cbr\u003e \u003cbr\u003e Example for bigrams (ngram of size 2):\n        * PATH: /tokens=a word,another word\n        * GET: /?tokens=a word\u0026tokens=another word\n        * POST (json):\n\n          ```javascript\n            {\n                \"tokens\": [\"a word\", \"another word\"]\n            }\n          ```\n\n        Either \"tokens\" or \"contains\" has to be provided. \u003cbr\u003e \u003cbr\u003e Some queries with \"contains\" or \"sort\" can exceed the 30s timeout, in which case the API will return an error message with status code 503. You mitigate this by providing additional restrictions such as \"minFrequency\" and \"maxFrequency\". \u003cbr\u003e \u003cbr\u003e You can use the parameters \"offset\" and \"limit\" to paginate through large result sets. For convenience, the HTTP header \"Link\" is set on the response to provide links to \"first\", \"self\", \"next\", \"prev\" and \"last\" pages of results (depending on the context). For example, if the result set contains 50 results and the parameter \"limit\" is set to 25, the Links header will contain an URL for the first 25 results and the next 25 results. \u003cbr\u003e \u003cbr\u003e Some libraries such as python's `requests` can parse the header automatically and offer a convenient way of iterating through the results. For example:\n        ```python def get_all_results(url):\n            while url:\n                r = requests.get(url)\n                r.raise_for_status()\n                for item in r.json()['results']:\n                  yield item\n                url = r.links.get('next', {}).get('url')\n        ```\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_lang\n          required: true\n          schema:\n            default: en\n            type: string\n        - description: For corpora other than 'nmc' (New Monitor Corpus) please contact api@oxforddictionaries.com\n          in: path\n          name: corpus\n          required: true\n          schema:\n            default: nmc\n            type: string\n        - description: the size of ngrams requested (1-4)\n          in: path\n          name: ngram-size\n          required: true\n          schema:\n            default: 2\n            type: string\n        - description: List of tokens to filter. The tokens are separated by spaces, the list items are separated by comma (e.g., for bigrams (n=2) tokens=this is,this was, this will)\n          in: query\n          name: tokens\n          required: false\n          schema:\n            default: a word\n            type: string\n        - description: Find ngrams containing the given token(s). Use comma or space as token separators; the order of tokens is irrelevant.\n          in: query\n          name: contains\n          required: false\n          schema:\n            type: string\n        - description: Flag specifying whether to lookup ngrams that include punctuation or not (possible values are \"true\" and \"false\"; default is \"false\")\n          in: query\n          name: punctuation\n          required: false\n          schema:\n            type: string\n        - description: Option specifying whether tokens should be returned as a single string (option \"google\") or as a list of strings (option \"oup\")\n          in: query\n          name: format\n          required: false\n          schema:\n            default: oup\n            type: string\n        - description: Restrict the query to entries with frequency of at least `minFrequency`\n          in: query\n          name: minFrequency\n          required: false\n          schema:\n            format: int64\n            type: integer\n        - description: Restrict the query to entries with frequency of at most `maxFrequency`\n          in: query\n          name: maxFrequency\n          required: false\n          schema:\n            format: int64\n            type: integer\n        - description: Restrict the query to entries that appear in at least `minDocumentFrequency` documents\n          in: query\n          name: minDocumentFrequency\n          required: false\n          schema:\n            format: int64\n            type: integer\n        - description: Restrict the query to entries that appera in at most `maxDocumentFrequency` documents\n          in: query\n          name: maxDocumentFrequency\n          required: false\n          schema:\n            format: int64\n            type: integer\n        - description: collate the results by wordform, trueCase, lemma, lexicalCategory. Multiple values can be separated by commas (e.g., collate=trueCase,lemma,lexicalCategory).\n          in: query\n          name: collate\n          required: false\n          schema:\n            type: string\n        - description: sort the resulting list by wordform, trueCase, lemma, lexicalCategory, frequency, normalizedFrequency. Descending order is achieved by prepending the value with the minus sign ('-'). Multiple values can be separated by commas (e.g., sort=lexicalCategory,-frequency)\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n        - description: pagination - results offset\n          in: query\n          name: offset\n          required: false\n          schema:\n            default: 0\n            format: int64\n            type: integer\n        - description: pagination - results limit\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 100\n            format: int64\n            type: integer\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NgramsResult\"\n            text/csv:\n              schema:\n                $ref: \"#/components/schemas/NgramsResult\"\n          description: Successful response.\n        \"400\":\n          description: |\n            Invalid option name...\n        \"404\":\n          description: |\n            language is not in...\n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Retrieve the frequency of ngrams (1-4) derived from a corpus\n      tags:\n        - LexiStats\n  \"/stats/frequency/word/{source_lang}/\":\n    get:\n      description: |\n        This endpoint provides the frequency of a given word. When multiple database records match the query parameters, the returned frequency is the sum of the individual frequencies. For example, if the query parameters are lemma=test, the returned frequency will include the verb \"test\", the noun \"test\" and the adjective \"test\" in all forms (Test, tested, testing, etc.) \u003cbr\u003e \u003cbr\u003e If you are interested in the frequency of the word \"test\" but want to exclude other forms (e.g., tested) use the option trueCase=test. Normally, the word \"test\" will be spelt with a capital letter at the beginning of a sentence. The option trueCase will ignore this and it will count \"Test\" and \"test\" as the same token. If you are interested in frequencies of \"Test\" and \"test\", use the option wordform=test or wordform=Test. Note that trueCase is not just a lower case of the word as some words are genuinely spelt with a capital letter such as the word \"press\" in Oxford University Press. \u003cbr\u003e \u003cbr\u003e Parameters can be provided in PATH, GET or POST (form or json). The parameters in PATH are overriden by parameters in GET, POST and json (in that order). In PATH, individual options are separated by semicolon and values are separated by commas (where multiple values can be used). Examples:\n        * PATH: /lemma=test;lexicalCategory=noun\n        * GET: /?lemma=test\u0026lexicalCategory=noun\n        * POST (json):\n\n          ```javascript\n            {\n              \"lemma\": \"test\",\n              \"lexicalCategory\": \"noun\"\n            }\n          ```\n\n        \u003cbr\u003e One of the options wordform/trueCase/lemma/lexicalCategory has to be provided.\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_lang\n          required: true\n          schema:\n            default: en\n            type: string\n        - description: For corpora other than 'nmc' (New Monitor Corpus) please contact api@oxforddictionaries.com\n          in: query\n          name: corpus\n          required: false\n          schema:\n            default: nmc\n            type: string\n        - description: The written form of the word to look up (preserving case e.g., Books vs books)\n          in: query\n          name: wordform\n          required: false\n          schema:\n            type: string\n        - description: The written form of the word to look up with normalised case (Books --\u003e books)\n          in: query\n          name: trueCase\n          required: false\n          schema:\n            type: string\n        - description: The lemma of the word to look up (e.g., Book, booked, books all have the lemma \"book\")\n          in: query\n          name: lemma\n          required: false\n          schema:\n            default: test\n            type: string\n        - description: The lexical category of the word(s) to look up (e.g., noun or verb)\n          in: query\n          name: lexicalCategory\n          required: false\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatsWordResult\"\n            text/csv:\n              schema:\n                $ref: \"#/components/schemas/StatsWordResult\"\n          description: Successful response.\n        \"400\":\n          description: |\n            You need to specify at least one option. Try one of 'wordform, lemma, trueCase, lexicalCategory'.\n        \"404\":\n          description: |\n            language is not in...\n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Retrieve the frequency of a word derived from a corpus.\n      tags:\n        - LexiStats\n  \"/stats/frequency/words/{source_lang}/\":\n    get:\n      description: |\n        This endpoint provides a list of frequencies for a given word or words. Unlike the /word/ endpoint, the results are split into the smallest units. \u003cbr\u003e \u003cbr\u003e To exclude a specific value, prepend it with the minus sign ('-'). For example, to get frequencies of the lemma 'happy' but exclude superlative forms (i.e., happiest) you could use options 'lemma=happy;grammaticalFeatures=-degreeType:superlative'. \u003cbr\u003e \u003cbr\u003e Parameters can be provided in PATH, GET or POST (form or json). The parameters in PATH are overridden by parameters in GET, POST and json (in that order). In PATH, individual options are separated by semicolon and values are separated by commas (where multiple values can be used). \u003cbr\u003e \u003cbr\u003e The parameters wordform/trueCase/lemma/lexicalCategory also exist in a plural form, taking a lists of items. Examples:\n        * PATH: /wordforms=happy,happier,happiest\n        * GET: /?wordforms=happy\u0026wordforms=happier\u0026wordforms=happiest\n        * POST (json):\n        ```javascript\n          {\n            \"wordforms\": [\"happy\", \"happier\", \"happiest\"]\n          }\n        ```\n        A mor complex example of retrieving frequencies of multiple lemmas:\n        ```\n          {\n              \"lemmas\": [\"happy\", \"content\", \"cheerful\", \"cheery\", \"merry\", \"joyful\", \"ecstatic\"],\n              \"grammaticalFeatures\": {\n                  \"adjectiveFunctionType\": \"predicative\"\n              },\n              \"lexicalCategory\": \"adjective\",\n              \"sort\": [\"lemma\", \"-frequency\"]\n          }\n        ```\n        Some queries with \"collate\" or \"sort\" can exceed the 30s timeout, in which case the API will return an error message with status code 503. You mitigate this by providing additional restrictions such as \"minFrequency\" and \"maxFrequency\". \u003cbr\u003e \u003cbr\u003e You can use the parameters \"offset\" and \"limit\" to paginate through large result sets. For convenience, the HTTP header \"Link\" is set on the response to provide links to \"first\", \"self\", \"next\", \"prev\" and \"last\" pages of results (depending on the context). For example, if the result set contains 50 results and the parameter \"limit\" is set to 25, the Links header will contain an URL for the first 25 results and the next 25 results. \u003cbr\u003e \u003cbr\u003e Some libraries such as python's `requests` can parse the header automatically and offer a convenient way of iterating through the results. For example:\n        ```python def get_all_results(url):\n            while url:\n                r = requests.get(url)\n                r.raise_for_status()\n                for item in r.json()['results']:\n                  yield item\n                url = r.links.get('next', {}).get('url')\n        ```\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_lang\n          required: true\n          schema:\n            default: en\n            type: string\n        - description: For corpora other than 'nmc' (New Monitor Corpus) please contact api@oxforddictionaries.com\n          in: query\n          name: corpus\n          required: false\n          schema:\n            default: nmc\n            type: string\n        - description: The written form of the word to look up (preserving case e.g., Book vs book)\n          in: query\n          name: wordform\n          required: false\n          schema:\n            type: string\n        - description: The written form of the word to look up with normalised case (Books --\u003e books)\n          in: query\n          name: trueCase\n          required: false\n          schema:\n            type: string\n        - description: The lemma of the word to look up (e.g., Book, booked, books all have the lemma \"book\")\n          in: query\n          name: lemma\n          required: false\n          schema:\n            default: test\n            type: string\n        - description: The lexical category of the word(s) to look up (e.g., adjective or noun)\n          in: query\n          name: lexicalCategory\n          required: false\n          schema:\n            type: string\n        - description: The grammatical features of the word(s) to look up entered as a list of k:v (e.g., degree_type:comparative)\n          in: query\n          name: grammaticalFeatures\n          required: false\n          schema:\n            type: string\n        - description: sort the resulting list by wordform, trueCase, lemma, lexicalCategory, frequency, normalizedFrequency. Descending order is achieved by prepending the value with the minus sign ('-'). Multiple values can be separated by commas (e.g., sort=lexicalCategory,-frequency)\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n        - description: collate the results by wordform, trueCase, lemma, lexicalCategory. Multiple values can be separated by commas (e.g., collate=trueCase,lemma,lexicalCategory).\n          in: query\n          name: collate\n          required: false\n          schema:\n            type: string\n        - description: Restrict the query to entries with frequency of at least `minFrequency`\n          in: query\n          name: minFrequency\n          required: false\n          schema:\n            format: int64\n            type: integer\n        - description: Restrict the query to entries with frequency of at most `maxFrequency`\n          in: query\n          name: maxFrequency\n          required: false\n          schema:\n            format: int64\n            type: integer\n        - description: Restrict the query to entries with frequency of at least `minNormalizedFrequency`\n          in: query\n          name: minNormalizedFrequency\n          required: false\n          schema:\n            format: float\n            type: number\n        - description: Restrict the query to entries with frequency of at most `maxNormalizedFrequency`\n          in: query\n          name: maxNormalizedFrequency\n          required: false\n          schema:\n            format: float\n            type: number\n        - description: pagination - results offset\n          in: query\n          name: offset\n          required: false\n          schema:\n            default: 0\n            format: int64\n            type: integer\n        - description: pagination - results limit\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 100\n            format: int64\n            type: integer\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatsWordResultList\"\n            text/csv:\n              schema:\n                $ref: \"#/components/schemas/StatsWordResultList\"\n          description: Successful response.\n        \"400\":\n          description: Invalid option name...; Option ... must have a value.; The option 'minFrequency' has to have an non-negative integer parameter.; The option 'maxFrequency' has to have an non-negative integer parameter.; The option 'limit' has to have an non-negative integer parameter.; The option 'offset' has to have an non-negative integer parameter.\n        \"404\":\n          description: |\n            language is not in...\n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Retrieve a list of frequencies of a word/words derived from a corpus.\n      tags:\n        - LexiStats\n  \"/wordlist/{source_lang}/{filters_advanced}\":\n    get:\n      description: |\n        Use this to apply more complex filters to the [list of words](documentation/glossary?term=wordlist). For example, you may only want to filter out words for which all [senses](documentation/glossary?term=sense) match the filter, or only its 'prime sense'. You can also filter by word length or match by substring (prefix). \n\n          \u003cdiv id=\"wordlist_advanced\"\u003e\u003c/div\u003e\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_lang\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n              - hi\n              - lv\n              - sw\n              - ta\n              - gu\n            type: string\n        - description: \"Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory=noun,adjective;domains=sport. Number of values limited to 5.\"\n          in: path\n          name: filters_advanced\n          required: true\n          schema:\n            default: lexicalCategory=Noun;domains=sport\n            type: string\n        - description: Semicolon separated list of parameters-value pairs (same as filters). Excludes headwords that have any senses in specified exclusion attributes (lexical categories, domains, etc.) from results.\n          in: query\n          name: exclude\n          required: false\n          schema:\n            type: string\n        - description: Semicolon separated list of parameters-value pairs (same as filters). Excludes only those senses of a particular headword that match specified exclusion attributes (lexical categories, domains, etc.) from results but includes the headword if it has other permitted senses.\n          in: query\n          name: exclude_senses\n          required: false\n          schema:\n            type: string\n        - description: Semicolon separated list of parameters-value pairs (same as filters). Excludes a headword only if the primary sense matches the specified exclusion attributes (registers, domains only).\n          in: query\n          name: exclude_prime_senses\n          required: false\n          schema:\n            type: string\n        - description: Parameter to speficy the minimum (\u003e), exact or maximum (\u003c) length of the words required. E.g., \u003e5 - more than 5 chars; \u003c4 - less than 4 chars; \u003e5\u003c10 - from 5 to 10 chars; 3 - exactly 3 chars.\n          in: query\n          name: word_length\n          required: false\n          schema:\n            default: \"\u003e5,\u003c10\"\n            type: string\n        - description: Filter words that start with prefix parameter\n          in: query\n          name: prefix\n          required: false\n          schema:\n            default: goal\n            type: string\n        - description: If exact=true wordlist returns a list of entries that exactly matches the search string. Otherwise wordlist lists entries that start with prefix string.\n          in: query\n          name: exact\n          required: false\n          schema:\n            default: \"false\"\n            enum:\n              - \"false\"\n              - \"true\"\n            type: boolean\n        - description: Limit the number of results per response. Default and maximum limit is 5000.\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: string\n        - description: Offset the start number of the result.\n          in: query\n          name: offset\n          required: false\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Wordlist\"\n          description: Successful response.\n        \"400\":\n          description: disjoint sets of word_length values (eg \u003c3\u003e10); filter has no values; total number of filters \u003e 20; filters and excludes values can not be the same; source_lang and translations can not be same; word_length conflicts with prefix length.\n        \"404\":\n          description: |\n            No entries is found matching supplied filters or lang or filters is not recognized.\n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Retrieve list of words for category with advanced options\n      tags:\n        - Wordlist\n  \"/wordlist/{source_lang}/{filters_basic}\":\n    get:\n      description: |\n        \n        Use this to retrieve a [list of words](documentation/glossary?term=wordlist) for particular [domain](documentation/glossary?term=domain), [lexical category](documentation/glossary?term=lexicalcategory), [register](documentation/glossary?term=registers) and/or [region](documentation/glossary?term=regions). View the full list of possible filters using the filters Utility endpoint.  The response only includes [headwords](documentation/glossary?term=headword), not all their possible [inflections](documentation/glossary?term=inflection). If you require a full [wordlist](documentation/glossary?term=wordlist) including [inflected forms](documentation/glossary?term=inflection), contact us and we can help.\n\n          \u003cdiv id=\"wordlist\"\u003e\u003c/div\u003e\n      parameters:\n        - description: IANA language code\n          in: path\n          name: source_lang\n          required: true\n          schema:\n            enum:\n              - en\n              - es\n              - hi\n              - lv\n              - sw\n              - ta\n              - gu\n            type: string\n        - description: \"Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory=noun,adjective;domains=sport. Number of values limited to 5.\"\n          in: path\n          name: filters_basic\n          required: true\n          schema:\n            default: registers=Rare;domains=Art\n            type: string\n        - description: Limit the number of results per response. Default and maximum limit is 5000.\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: string\n        - description: Offset the start number of the result\n          in: query\n          name: offset\n          required: false\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/appId\"\n        - $ref: \"#/components/parameters/appKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Wordlist\"\n          description: Successful response.\n        \"400\":\n          description: filter has no values; total number of filters \u003e 20.\n        \"404\":\n          description: |\n            No entries is found matching supplied filters or lang or filters is not recognized.\n        \"500\":\n          description: |\n            Internal Error. An error occurred while processing the data.\n      summary: Retrieve a list of words in a category\n      tags:\n        - Wordlist\ncomponents:\n  parameters:\n    appId:\n      description: App ID Authentication Parameter\n      in: header\n      name: app_id\n      required: true\n      schema:\n        default: 5037d509\n        type: string\n      x-data-threescale-name: app_ids\n    appKey:\n      description: App Key Authentication Parameter\n      in: header\n      name: app_key\n      required: true\n      schema:\n        default: 4dc1aebaa63721f0f8e79a55e2514bc7\n        type: string\n      x-data-threescale-name: app_keys\n    entriesWordId:\n      description: An Entry identifier. Case-sensitive.\n      in: path\n      name: word_id\n      required: true\n      schema:\n        default: ace\n        type: string\n    keyValFilters:\n      description: Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma.\n      in: path\n      name: filters\n      required: true\n      schema:\n        default: grammaticalFeatures=singular,past;lexicalCategory=noun\n        items:\n          pattern: (lexicalCategory|grammaticalFeatures)=.+\n          type: string\n        type: string\n      style: simple\n    monolingual-lemmatron-source_lang:\n      description: IANA language code\n      in: path\n      name: source_lang\n      required: true\n      schema:\n        enum:\n          - en\n          - es\n          - hi\n          - nso\n          - tn\n          - zu\n          - de\n          - pt\n        type: string\n    monolingual-source_lang:\n      description: IANA language code\n      in: path\n      name: source_lang\n      required: true\n      schema:\n        enum:\n          - en\n          - es\n          - lv\n          - hi\n          - sw\n          - ta\n          - gu\n          - fr\n        type: string\n    monolingual-wordlist-source_lang:\n      description: IANA language code\n      in: path\n      name: source_lang\n      required: true\n      schema:\n        enum:\n          - en\n          - es\n          - hi\n          - lv\n          - sw\n          - ta\n          - gu\n        type: string\n    thesaurus-source_lang:\n      description: IANA language code\n      in: path\n      name: source_lang\n      required: true\n      schema:\n        enum:\n          - en\n        type: string\n  schemas:\n    ArrayOfRelatedEntries:\n      description: A list of written or spoken words\n      items:\n        additionalProperties: false\n        properties:\n          domains:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          id:\n            description: The identifier of the word\n            type: string\n          language:\n            description: IANA language code specifying the language of the word\n            type: string\n          regions:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          registers:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          text:\n            type: string\n        required:\n          - text\n          - id\n        type: object\n      minItems: 1\n      type: array\n    CategorizedTextList:\n      description: various types of notes that appear\n      items:\n        additionalProperties: false\n        properties:\n          id:\n            description: The identifier of the word\n            type: string\n          text:\n            description: A note text\n            type: string\n          type:\n            description: The descriptive category of the text\n            type: string\n        required:\n          - text\n          - type\n        type: object\n      minItems: 1\n      type: array\n    CrossReferencesList:\n      description: A reference to another word that is closely related, might provide additional information about the subject, has a variant spelling or is an abbreviated form of it.\n      items:\n        additionalProperties: false\n        description: cross references of a sense\n        properties:\n          id:\n            description: The word id of cooccurrence\n            type: string\n          text:\n            description: The word of cooccurrence\n            type: string\n          type:\n            description: The type of relation between the two words. Possible values are 'close match', 'related', 'see also', 'variant spelling', and 'abbreviation' in case of crossreferences, or 'pre', 'post' in case of collocates.\n            type: string\n        required:\n          - id\n          - text\n          - type\n        type: object\n      minItems: 1\n      type: array\n    Entry:\n      additionalProperties: false\n      minProperties: 1\n      properties:\n        etymologies:\n          $ref: \"#/components/schemas/arrayofstrings\"\n        grammaticalFeatures:\n          $ref: \"#/components/schemas/GrammaticalFeaturesList\"\n        homographNumber:\n          description: Identifies the homograph grouping. The last two digits identify different entries of the same homograph. The first one/two digits identify the homograph number.\n          type: string\n        notes:\n          $ref: \"#/components/schemas/CategorizedTextList\"\n        pronunciations:\n          $ref: \"#/components/schemas/PronunciationsList\"\n        senses:\n          description: Complete list of senses\n          items:\n            $ref: \"#/components/schemas/Sense\"\n          minItems: 1\n          type: array\n        variantForms:\n          $ref: \"#/components/schemas/VariantFormsList\"\n      type: object\n    ExamplesList:\n      description: A list of written or spoken rendering of examples of use of a word or text\n      items:\n        additionalProperties: false\n        properties:\n          definitions:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          domains:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          notes:\n            $ref: \"#/components/schemas/CategorizedTextList\"\n          regions:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          registers:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          senseIds:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          text:\n            type: string\n          translations:\n            $ref: \"#/components/schemas/TranslationsList\"\n        required:\n          - text\n        type: object\n      minItems: 1\n      type: array\n    Filters:\n      description: Schema for the Filters endpoint.\n      properties:\n        metadata:\n          description: Additional Information provided by OUP\n          type: object\n        results:\n          additionalProperties: false\n          description: A mapping of filters available per endpoints.\n          minProperties: 1\n          properties:\n            entries:\n              $ref: \"#/components/schemas/arrayofstrings\"\n            inflections:\n              $ref: \"#/components/schemas/arrayofstrings\"\n            translations:\n              $ref: \"#/components/schemas/arrayofstrings\"\n            wordlist:\n              $ref: \"#/components/schemas/arrayofstrings\"\n          type: object\n    GrammaticalFeaturesList:\n      description: The different forms are correlated with meanings or functions which we text as 'features'\n      items:\n        additionalProperties: false\n        properties:\n          text:\n            type: string\n          type:\n            type: string\n        required:\n          - text\n          - type\n        type: object\n      minItems: 1\n      type: array\n    HeadwordEntry:\n      additionalProperties: false\n      description: Description of a word\n      properties:\n        id:\n          description: The identifier of a word\n          type: string\n        language:\n          description: IANA language code\n          type: string\n        lexicalEntries:\n          description: A grouping of various senses in a specific language, and a lexical category that relates to a word\n          items:\n            $ref: \"#/components/schemas/lexicalEntry\"\n          minItems: 1\n          type: array\n        pronunciations:\n          $ref: \"#/components/schemas/PronunciationsList\"\n        type:\n          description: The json object type. Could be 'headword', 'inflection' or 'phrase'\n          type: string\n        word:\n          description: A given written or spoken realisation of a an entry, lowercased.\n          type: string\n      required:\n        - id\n        - language\n        - lexicalEntries\n        - word\n      type: object\n    HeadwordLemmatron:\n      additionalProperties: false\n      description: Description of an inflected form of a word\n      properties:\n        id:\n          description: The identifier of a word\n          type: string\n        language:\n          description: IANA language code\n          type: string\n        lexicalEntries:\n          description: A grouping of various senses in a specific language, and a lexical category that relates to a word\n          items:\n            $ref: \"#/components/schemas/LemmatronLexicalEntry\"\n          minItems: 1\n          type: array\n        type:\n          description: The json object type. Could be 'headword', 'inflection' or 'phrase'\n          type: string\n        word:\n          description: A given written or spoken realisation of a an entry, lowercased.\n          type: string\n      required:\n        - id\n        - language\n        - lexicalEntries\n        - word\n      type: object\n    HeadwordThesaurus:\n      additionalProperties: false\n      description: description of thesaurus information of a word\n      properties:\n        id:\n          description: The identifier of a word\n          type: string\n        language:\n          description: IANA language code\n          type: string\n        lexicalEntries:\n          description: A grouping of various senses in a specific language, and a lexical category that relates to a word\n          items:\n            $ref: \"#/components/schemas/ThesaurusLexicalEntry\"\n          minItems: 1\n          type: array\n        type:\n          description: The json object type. Could be 'headword', 'inflection' or 'phrase'\n          type: string\n        word:\n          description: A given written or spoken realisation of a an entry, lowercased.\n          type: string\n      required:\n        - word\n        - id\n        - language\n        - lexicalEntries\n      type: object\n    InflectionsList:\n      description: A grouping of the modifications of a word to express different grammatical categories\n      items:\n        additionalProperties: false\n        properties:\n          id:\n            description: The identifier of the word\n            type: string\n          text:\n            type: string\n        required:\n          - text\n          - id\n        type: object\n      minItems: 1\n      type: array\n    Languages:\n      description: Schema for the languages endpoint.\n      properties:\n        metadata:\n          description: Additional Information provided by OUP\n          type: object\n        results:\n          description: A list of languages available.\n          items:\n            additionalProperties: false\n            minProperties: 1\n            properties:\n              region:\n                description: Name of region.\n                type: string\n              source:\n                description: Name of source dictionary.\n                type: string\n              sourceLanguage:\n                description: Source language of the results\n                properties:\n                  id:\n                    description: IANA language code\n                    type: string\n                  language:\n                    description: Language label.\n                    type: string\n                type: object\n              targetLanguage:\n                description: Translation language of the results\n                properties:\n                  id:\n                    description: IANA language code\n                    type: string\n                  language:\n                    description: Language label.\n                    type: string\n                type: object\n              type:\n                description: whether monolingual or bilingual.\n                enum:\n                  - monolingual\n                  - bilingual\n                type: string\n            type: object\n          minItems: 1\n          type: array\n      type: object\n    Lemmatron:\n      description: Schema for the inflections endpoint.\n      properties:\n        metadata:\n          description: Additional Information provided by OUP\n          type: object\n        results:\n          description: A list of inflections matching a given word\n          items:\n            $ref: \"#/components/schemas/HeadwordLemmatron\"\n          minItems: 1\n          type: array\n      type: object\n    LemmatronLexicalEntry:\n      additionalProperties: false\n      description: Description of an entry for a particular part of speech and grammatical features\n      properties:\n        grammaticalFeatures:\n          $ref: \"#/components/schemas/GrammaticalFeaturesList\"\n        inflectionOf:\n          $ref: \"#/components/schemas/InflectionsList\"\n        language:\n          description: IANA language code\n          type: string\n        lexicalCategory:\n          description: A linguistic category of words (or more precisely lexical items), generally defined by the syntactic or morphological behaviour of the lexical item in question, such as noun or verb\n          type: string\n        text:\n          description: A given written or spoken realisation of a an entry.\n          type: string\n      required:\n        - inflectionOf\n        - language\n        - lexicalCategory\n        - text\n      type: object\n    NgramsResult:\n      description: Schema for corpus ngrams.\n      properties:\n        metadata:\n          description: Additional Information provided by OUP\n          type: object\n        results:\n          description: A list of found ngrams along with their frequencies\n          items:\n            additionalProperties: true\n            description: Ngrams matching the given options\n            properties:\n              frequency:\n                description: The number of times the ngram (a sequence of n words) appears in the corpus\n                type: integer\n              tokens:\n                description: A list of tokens\n                items:\n                  type: string\n                minItems: 1\n                type: array\n            required:\n              - tokens\n              - frequency\n            type: object\n          minItems: 0\n          type: array\n      type: object\n    PronunciationsList:\n      description: A list of possible pronunciations of a word\n      items:\n        additionalProperties: false\n        description: A grouping of pronunciation information\n        minProperties: 1\n        properties:\n          audioFile:\n            description: The URL of the sound file\n            type: string\n          dialects:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          phoneticNotation:\n            description: The alphabetic system used to display the phonetic spelling\n            type: string\n          phoneticSpelling:\n            description: Phonetic spelling is the representation of vocal sounds which express pronunciations of words. It is a system of spelling in which each letter represents invariably the same spoken sound\n            type: string\n          regions:\n            $ref: \"#/components/schemas/arrayofstrings\"\n        type: object\n      minItems: 1\n      type: array\n    Regions:\n      description: Schema for region endpoint.\n      properties:\n        metadata:\n          description: Additional Information provided by OUP\n          type: object\n        results:\n          additionalProperties:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          description: A mapping of regions available.\n          type: object\n    RetrieveEntry:\n      description: Schema for the 'entries' endpoints\n      properties:\n        metadata:\n          description: Additional Information provided by OUP\n          type: object\n        results:\n          description: A list of entries and all the data related to them\n          items:\n            $ref: \"#/components/schemas/HeadwordEntry\"\n          minItems: 1\n          type: array\n      type: object\n    Sense:\n      additionalProperties: false\n      description: A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element\n      minProperties: 1\n      properties:\n        crossReferenceMarkers:\n          $ref: \"#/components/schemas/arrayofstrings\"\n        crossReferences:\n          $ref: \"#/components/schemas/CrossReferencesList\"\n        definitions:\n          $ref: \"#/components/schemas/arrayofstrings\"\n        domains:\n          $ref: \"#/components/schemas/arrayofstrings\"\n        examples:\n          $ref: \"#/components/schemas/ExamplesList\"\n        id:\n          description: The id of the sense that is required for the delete procedure\n          type: string\n        notes:\n          $ref: \"#/components/schemas/CategorizedTextList\"\n        pronunciations:\n          $ref: \"#/components/schemas/PronunciationsList\"\n        regions:\n          $ref: \"#/components/schemas/arrayofstrings\"\n        registers:\n          $ref: \"#/components/schemas/arrayofstrings\"\n        short_definitions:\n          $ref: \"#/components/schemas/arrayofstrings\"\n        subsenses:\n          description: Ordered list of subsenses of a sense\n          items:\n            $ref: \"#/components/schemas/Sense\"\n          minItems: 1\n          type: array\n        thesaurusLinks:\n          description: Ordered list of links to the Thesaurus Dictionary\n          items:\n            $ref: \"#/components/schemas/thesaurusLink\"\n          minItems: 1\n          type: array\n        translations:\n          $ref: \"#/components/schemas/TranslationsList\"\n        variantForms:\n          $ref: \"#/components/schemas/VariantFormsList\"\n      type: object\n    SentencesEntry:\n      additionalProperties: false\n      description: Description of a word\n      properties:\n        id:\n          description: The identifier of a word\n          type: string\n        language:\n          description: IANA language code\n          type: string\n        lexicalEntries:\n          description: A grouping of various senses in a specific language, and a lexical category that relates to a word\n          items:\n            $ref: \"#/components/schemas/SentencesLexicalEntry\"\n          minItems: 1\n          type: array\n        type:\n          description: The json object type. Could be 'headword', 'inflection' or 'phrase'\n          type: string\n        word:\n          description: A given written or spoken realisation of a an entry, lowercased.\n          type: string\n      required:\n        - id\n        - language\n        - lexicalEntries\n        - word\n      type: object\n    SentencesLexicalEntry:\n      additionalProperties: false\n      description: Description of an entry for a particular part of speech\n      properties:\n        grammaticalFeatures:\n          $ref: \"#/components/schemas/GrammaticalFeaturesList\"\n        language:\n          description: IANA language code\n          type: string\n        lexicalCategory:\n          description: A linguistic category of words (or more precisely lexical items), generally defined by the syntactic or morphological behaviour of the lexical item in question, such as noun or verb\n          type: string\n        sentences:\n          $ref: \"#/components/schemas/ExamplesList\"\n        text:\n          description: A given written or spoken realisation of a an entry.\n          type: string\n      required:\n        - language\n        - sentences\n        - text\n      type: object\n    SentencesResults:\n      description: Schema for the 'sentences' endpoint\n      properties:\n        metadata:\n          description: Additional Information provided by OUP\n          type: object\n        results:\n          description: A list of entries and all the data related to them\n          items:\n            $ref: \"#/components/schemas/SentencesEntry\"\n          minItems: 1\n          type: array\n      type: object\n    StatsWordResult:\n      description: Schema for lexi-stats results for a word/trueCase/lemma/lexicalCategory returned as a frequency\n      properties:\n        metadata:\n          description: Additional Information provided by OUP\n          type: object\n        result:\n          additionalProperties: true\n          description: Frequency information for a given entity\n          properties:\n            frequency:\n              description: The number of times a word appears in the entire corpus\n              type: integer\n            lemma:\n              description: A lemma of the word (e.g., wordforms \"lay\", \"laid\" and \"laying\" have all lemma \"lay\")\n              type: string\n            lexicalCategory:\n              description: A lexical category such as 'verb' or 'noun'\n              type: string\n            matchCount:\n              description: The number of database records that matched the query params (stated frequency is the sum of the individual frequencies)\n              type: integer\n            normalizedFrequency:\n              description: The number of times a word appears on average in 1 million words\n              type: integer\n            trueCase:\n              description: A given written realisation of a an entry (e.g., \"lay\") usually lower case\n              type: string\n            wordform:\n              description: A given written realisation of a an entry (e.g., \"Lay\") preserving case\n              type: string\n          required:\n            - frequency\n            - normalizedFrequency\n            - matchCount\n          type: object\n      type: object\n    StatsWordResultList:\n      description: Schema for lexi-stats results for a word/trueCase/lemma/lexicalCategory returned as a list of frequencies per wordform-trueCase-lemma-lexicalCategory entry.\n      properties:\n        metadata:\n          description: Additional Information provided by OUP\n          type: object\n        results:\n          description: A list of found words along with their frequencies\n          items:\n            additionalProperties: true\n            description: Statistical information about a word\n            properties:\n              frequency:\n                description: The number of times a word appears in the entire corpus\n                type: integer\n              lemma:\n                description: A lemma of the word.\n                type: string\n              lexicalCategory:\n                description: A lexical category such as 'verb' or 'noun'\n                type: string\n              normalizedFrequency:\n                description: The number of times a word appears on average in 1 million words\n                type: integer\n              trueCase:\n                description: A given written realisation of a an entry (e.g., \"lay\") usually lower case\n                type: string\n              wordform:\n                description: A given written realisation of a an entry (e.g., \"lay\") preserving case\n                type: string\n            required:\n              - wordform\n              - trueCase\n              - lemma\n              - lexicalCategory\n              - frequency\n              - normalizedFrequency\n            type: object\n          minItems: 0\n          type: array\n      type: object\n    SynonymsAntonyms:\n      items:\n        additionalProperties: false\n        properties:\n          domains:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          id:\n            type: string\n          language:\n            type: string\n          regions:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          registers:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          text:\n            type: string\n        required:\n          - id\n          - text\n        type: object\n      minItems: 1\n      type: array\n    Thesaurus:\n      description: Schema for thesaurus endpoint\n      properties:\n        metadata:\n          description: Additional Information provided by OUP\n          type: object\n        results:\n          description: A list of found synonyms or antonyms\n          items:\n            $ref: \"#/components/schemas/HeadwordThesaurus\"\n          minItems: 1\n          type: array\n      type: object\n    ThesaurusEntry:\n      additionalProperties: false\n      minProperties: 1\n      properties:\n        homographNumber:\n          description: Identifies the homograph grouping. The last two digits identify different entries of the same homograph. The first one/two digits identify the homograph number.\n          type: string\n        senses:\n          description: Complete list of senses\n          items:\n            $ref: \"#/components/schemas/ThesaurusSense\"\n          minItems: 1\n          type: array\n        variantForms:\n          $ref: \"#/components/schemas/VariantFormsList\"\n      type: object\n    ThesaurusLexicalEntry:\n      additionalProperties: false\n      description: Description of an entry for a particular part of speech\n      properties:\n        entries:\n          items:\n            $ref: \"#/components/schemas/ThesaurusEntry\"\n          minItems: 1\n          type: array\n        language:\n          description: IANA language code\n          type: string\n        lexicalCategory:\n          description: A linguistic category of words (or more precisely lexical items), generally defined by the syntactic or morphological behaviour of the lexical item in question, such as noun or verb\n          type: string\n        text:\n          description: A given written or spoken realisation of a an entry.\n          type: string\n        variantForms:\n          $ref: \"#/components/schemas/VariantFormsList\"\n      required:\n        - language\n        - lexicalCategory\n        - text\n      type: object\n    ThesaurusSense:\n      additionalProperties: false\n      description: A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element\n      minProperties: 1\n      properties:\n        antonyms:\n          $ref: \"#/components/schemas/SynonymsAntonyms\"\n        domains:\n          $ref: \"#/components/schemas/arrayofstrings\"\n        examples:\n          $ref: \"#/components/schemas/ExamplesList\"\n        id:\n          description: The id of the sense that is required for the delete procedure\n          type: string\n        regions:\n          $ref: \"#/components/schemas/arrayofstrings\"\n        registers:\n          $ref: \"#/components/schemas/arrayofstrings\"\n        subsenses:\n          description: subsenses of word\n          items:\n            $ref: \"#/components/schemas/ThesaurusSense\"\n          minItems: 1\n          type: array\n        synonyms:\n          $ref: \"#/components/schemas/SynonymsAntonyms\"\n      type: object\n    TranslationsList:\n      description: A list of written or spoken rendering of the meaning of a word or text in another language(s)\n      items:\n        additionalProperties: false\n        properties:\n          domains:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          grammaticalFeatures:\n            $ref: \"#/components/schemas/GrammaticalFeaturesList\"\n          language:\n            description: IANA language code specifying the language of the translation\n            type: string\n          notes:\n            $ref: \"#/components/schemas/CategorizedTextList\"\n          regions:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          registers:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          text:\n            type: string\n        required:\n          - text\n          - language\n        type: object\n      minItems: 1\n      type: array\n    UtilityLabels:\n      description: Schema for lexicalcategories, registers utility endpoints.\n      properties:\n        metadata:\n          description: Additional Information provided by OUP\n          type: object\n        results:\n          additionalProperties:\n            description: the list of labels for an object. Every object can be a lexical category, or a register, or a domain.\n            properties:\n              en:\n                description: Label in English\n                type: string\n            type: object\n          description: Mapping of labels available.\n          type: object\n    VariantFormsList:\n      description: Various words that are used interchangeably depending on the context, e.g 'aluminium' and 'aluminum'\n      items:\n        additionalProperties: false\n        properties:\n          regions:\n            $ref: \"#/components/schemas/arrayofstrings\"\n          text:\n            type: string\n        required:\n          - text\n        type: object\n      minItems: 1\n      type: array\n    Wordlist:\n      description: Schema for wordlist endpoint.\n      properties:\n        metadata:\n          description: Additional Information provided by OUP\n          type: object\n        results:\n          description: A list of found words\n          items:\n            additionalProperties: true\n            description: Description of found word\n            properties:\n              id:\n                description: The identifier of a word\n                type: string\n              matchString:\n                nullable: true\n                type: string\n              matchType:\n                type: string\n              region:\n                description: Name of region.\n                type: string\n              word:\n                description: A given written or spoken realisation of a an entry, lowercased.\n                type: string\n            required:\n              - id\n              - word\n            type: object\n          minItems: 0\n          type: array\n      type: object\n    arrayofstrings:\n      items:\n        type: string\n      type: array\n    lexicalEntry:\n      additionalProperties: false\n      description: Description of an entry for a particular part of speech\n      properties:\n        derivativeOf:\n          $ref: \"#/components/schemas/ArrayOfRelatedEntries\"\n        derivatives:\n          $ref: \"#/components/schemas/ArrayOfRelatedEntries\"\n        entries:\n          items:\n            $ref: \"#/components/schemas/Entry\"\n          minItems: 1\n          type: array\n        grammaticalFeatures:\n          $ref: \"#/components/schemas/GrammaticalFeaturesList\"\n        language:\n          description: IANA language code\n          type: string\n        lexicalCategory:\n          description: A linguistic category of words (or more precisely lexical items), generally defined by the syntactic or morphological behaviour of the lexical item in question, such as noun or verb\n          type: string\n        notes:\n          $ref: \"#/components/schemas/CategorizedTextList\"\n        pronunciations:\n          $ref: \"#/components/schemas/PronunciationsList\"\n        text:\n          description: A given written or spoken realisation of a an entry.\n          type: string\n        variantForms:\n          $ref: \"#/components/schemas/VariantFormsList\"\n      required:\n        - language\n        - lexicalCategory\n        - text\n      type: object\n    thesaurusLink:\n      description: Link to a sense of a specific entry in the thesaurus Dictionary\n      properties:\n        entry_id:\n          description: identifier of a word\n          type: string\n        sense_id:\n          description: identifier of a sense\n          type: string\n      required:\n        - entry_id\n        - sense_id\n      type: object\n"
		}
	},
	"Error": "parse: parse spec: paths: /stats/frequency/ngrams/{source_lang}/{corpus}/{ngram-size}/: get: operation \"\": parameters: parse parameter \"ngram-size\": schema: parse default: expected type \"string\", got \"number\""
}