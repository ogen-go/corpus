{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/friflo/Friflo.Json.Fliox"
		},
		"file": {
			"name": "openapi.json",
			"size": 0,
			"path": "Json.Tests/assets~/Schema-Loop/JSON/PocStore/openapi.json",
			"byteSize": 66879,
			"content": "\n{\n  \"openapi\": \"3.0.0\",\n  \"x-generator\": \"Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema\",\n  \"info\": {\n    \"title\":        \"PocStore\",\n    \"description\":  \"The \u003cb\u003ePocStore\u003c/b\u003e offer two functionalities: \u003cbr/\u003e\\n1. Defines a database \u003cb\u003eschema\u003c/b\u003e by declaring its containers, commands and messages\u003cbr/\u003e\\n2. Is a database \u003cb\u003eclient\u003c/b\u003e providing type-safe access to its containers, commands and messages \u003cbr/\u003e\\n\\nGenerated by \u003ca href='https://github.com/friflo/Friflo.Json.Fliox#schema'\u003eJSON Fliox\u003c/a\u003e\",\n    \"version\":      \"0.0.0\"\n  },\n  \"servers\": [\n\n  ],\n  \"tags\": [\n    {\n      \"name\": \"database\",\n      \"description\": \"\u003ca target='PocStore' href='html/schema.html'\u003eschema\u003c/a\u003e\"\n    },\n    {\n      \"name\": \"commands\",\n      \"description\": \"database \u003ca target='PocStore' href='html/schema.html#commands'\u003ecommands\u003c/a\u003e\"\n    },\n    {\n      \"name\": \"orders\",\n      \"description\": \"entity type: \u003ca target='PocStore' href='html/schema.html#UnitTest.Fliox.Client.Order'\u003eOrder\u003c/a\u003e\"\n    },\n    {\n      \"name\": \"customers\",\n      \"description\": \"entity type: \u003ca target='PocStore' href='html/schema.html#UnitTest.Fliox.Client.Customer'\u003eCustomer\u003c/a\u003e\"\n    },\n    {\n      \"name\": \"articles\",\n      \"description\": \"entity type: \u003ca target='PocStore' href='html/schema.html#UnitTest.Fliox.Client.Article'\u003eArticle\u003c/a\u003e\"\n    },\n    {\n      \"name\": \"articles2\",\n      \"description\": \"entity type: \u003ca target='PocStore' href='html/schema.html#UnitTest.Fliox.Client.Article'\u003eArticle\u003c/a\u003e\"\n    },\n    {\n      \"name\": \"producers\",\n      \"description\": \"entity type: \u003ca target='PocStore' href='html/schema.html#UnitTest.Fliox.Client.Producer'\u003eProducer\u003c/a\u003e\"\n    },\n    {\n      \"name\": \"employees\",\n      \"description\": \"entity type: \u003ca target='PocStore' href='html/schema.html#UnitTest.Fliox.Client.Employee'\u003eEmployee\u003c/a\u003e\"\n    },\n    {\n      \"name\": \"types\",\n      \"description\": \"entity type: \u003ca target='PocStore' href='html/schema.html#UnitTest.Fliox.Client.TestType'\u003eTestType\u003c/a\u003e\"\n    }],\n  \"paths\": {\n    \"/\": {\n      \"get\": {\n        \"summary\":    \"return all database containers\",\n        \"tags\":       [\"database\"],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbContainers\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=TestCommand\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"commands\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.json#/definitions/TestCommand\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"boolean\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=MultiRequests\": {\n      \"post\": {\n        \"summary\":    \"Create the given number of sync requests each with an upsert to articles\",\n        \"tags\":       [\"commands\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Standard.json#/definitions/int32\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Standard.json#/definitions/int32\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=SyncCommand\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"commands\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=AsyncCommand\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"commands\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=Command1\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"commands\"],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=CommandInt\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"commands\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Standard.json#/definitions/int32\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Standard.json#/definitions/int32\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=test.Command2\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"commands\"],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=test.CommandHello\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"commands\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=test.CommandExecutionError\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"commands\"],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Standard.json#/definitions/int32\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=test.CommandExecutionException\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"commands\"],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Standard.json#/definitions/int32\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=std.Echo\": {\n      \"post\": {\n        \"summary\":    \"echos the given parameter to assure the database is working appropriately.\",\n        \"tags\":       [\"commands\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                   \n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                   \n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=std.Containers\": {\n      \"post\": {\n        \"summary\":    \"list all database containers\",\n        \"tags\":       [\"commands\"],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbContainers\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=std.Messages\": {\n      \"post\": {\n        \"summary\":    \"list all database commands and messages\",\n        \"tags\":       [\"commands\"],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbMessages\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=std.Schema\": {\n      \"post\": {\n        \"summary\":    \"return the Schema assigned to the database\",\n        \"tags\":       [\"commands\"],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbSchema\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=std.Stats\": {\n      \"post\": {\n        \"summary\":    \"return the number of entities of all containers (or the given container) of the database\",\n        \"tags\":       [\"commands\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbStats\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=std.Host\": {\n      \"post\": {\n        \"summary\":    \"returns general information about the Hub like version, host, project and environment name\",\n        \"tags\":       [\"commands\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostParam\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostInfo\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=std.Cluster\": {\n      \"post\": {\n        \"summary\":    \"list all databases and their containers hosted by the Hub\",\n        \"tags\":       [\"commands\"],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostCluster\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=std.User\": {\n      \"post\": {\n        \"summary\":    \"return the groups of the current user. Optionally change the groups of the current user\",\n        \"tags\":       [\"commands\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/UserParam\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/UserResult\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?command=std.Client\": {\n      \"post\": {\n        \"summary\":    \"return client specific infos and adjust general client behavior like \u003cb\u003equeueEvents\u003c/b\u003e\",\n        \"tags\":       [\"commands\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/ClientParam\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/ClientResult\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?message=Message1\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"messages\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?message=AsyncMessage\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"messages\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?message=StartTime\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"messages\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Standard.json#/definitions/DateTime\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?message=StopTime\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"messages\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"Standard.json#/definitions/DateTime\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/?message=test.Message2\": {\n      \"post\": {\n        \"summary\":    \"\",\n        \"tags\":       [\"messages\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/orders\": {\n      \"get\": {\n        \"summary\":    \"return / filter multiple records from container orders\",\n        \"description\":    \"To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.\",\n        \"tags\":       [\"orders\"],\n        \"parameters\": [\n          {\n            \"in\":       \"query\",\n            \"name\":     \"filter\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"limit\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"limit the number of returned records\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"maxCount\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"maximum number of records. Result will return a **cursor** if more records available.\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"cursor\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"pass the **cursor** returned by the previous request\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Order.json#/definitions/Order\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"create or update multiple records in container orders\",\n        \"tags\":       [\"orders\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.Order.json#/definitions/Order\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/orders/{id}\": {\n      \"get\": {\n        \"summary\":    \"get a single record from container orders\",\n        \"tags\":       [\"orders\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Order.json#/definitions/Order\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"write a single record to container orders\",\n        \"tags\":       [\"orders\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Order.json#/definitions/Order\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"patch\": {\n        \"summary\":    \"patch a single record in container orders\",\n        \"tags\":       [\"orders\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"op\": {\n                        \"enum\": [\"replace\"]\n                      },\n                      \"path\": {\n                        \"type\": \"string\"\n                      },\n                      \"value\": { }\n                    } }\n                },\n                \"example\": [\n                  {\n                    \"op\":    \"replace\",\n                    \"path\":  \".name\",\n                    \"value\": \"Hello Patch!\"\n                  }\n                ]\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\":    \"delete a single record in container orders by id\",\n        \"tags\":       [\"orders\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/orders/bulk-get\": {\n      \"post\": {\n        \"summary\":    \"get multiple records by id from container orders\",\n        \"tags\":       [\"orders\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.Order.json#/definitions/Order\" }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/orders/bulk-delete\": {\n      \"post\": {\n        \"summary\":    \"delete multiple records by id in container orders\",\n        \"tags\":       [\"orders\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/customers\": {\n      \"get\": {\n        \"summary\":    \"return / filter multiple records from container customers\",\n        \"description\":    \"To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.\",\n        \"tags\":       [\"customers\"],\n        \"parameters\": [\n          {\n            \"in\":       \"query\",\n            \"name\":     \"filter\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"limit\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"limit the number of returned records\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"maxCount\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"maximum number of records. Result will return a **cursor** if more records available.\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"cursor\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"pass the **cursor** returned by the previous request\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Customer.json#/definitions/Customer\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"create or update multiple records in container customers\",\n        \"tags\":       [\"customers\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.Customer.json#/definitions/Customer\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/customers/{id}\": {\n      \"get\": {\n        \"summary\":    \"get a single record from container customers\",\n        \"tags\":       [\"customers\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Customer.json#/definitions/Customer\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"write a single record to container customers\",\n        \"tags\":       [\"customers\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Customer.json#/definitions/Customer\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"patch\": {\n        \"summary\":    \"patch a single record in container customers\",\n        \"tags\":       [\"customers\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"op\": {\n                        \"enum\": [\"replace\"]\n                      },\n                      \"path\": {\n                        \"type\": \"string\"\n                      },\n                      \"value\": { }\n                    } }\n                },\n                \"example\": [\n                  {\n                    \"op\":    \"replace\",\n                    \"path\":  \".name\",\n                    \"value\": \"Hello Patch!\"\n                  }\n                ]\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\":    \"delete a single record in container customers by id\",\n        \"tags\":       [\"customers\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/customers/bulk-get\": {\n      \"post\": {\n        \"summary\":    \"get multiple records by id from container customers\",\n        \"tags\":       [\"customers\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.Customer.json#/definitions/Customer\" }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/customers/bulk-delete\": {\n      \"post\": {\n        \"summary\":    \"delete multiple records by id in container customers\",\n        \"tags\":       [\"customers\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/articles\": {\n      \"get\": {\n        \"summary\":    \"return / filter multiple records from container articles\",\n        \"description\":    \"To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.\",\n        \"tags\":       [\"articles\"],\n        \"parameters\": [\n          {\n            \"in\":       \"query\",\n            \"name\":     \"filter\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"limit\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"limit the number of returned records\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"maxCount\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"maximum number of records. Result will return a **cursor** if more records available.\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"cursor\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"pass the **cursor** returned by the previous request\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Article.json#/definitions/Article\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"create or update multiple records in container articles\",\n        \"tags\":       [\"articles\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.Article.json#/definitions/Article\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/articles/{id}\": {\n      \"get\": {\n        \"summary\":    \"get a single record from container articles\",\n        \"tags\":       [\"articles\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Article.json#/definitions/Article\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"write a single record to container articles\",\n        \"tags\":       [\"articles\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Article.json#/definitions/Article\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"patch\": {\n        \"summary\":    \"patch a single record in container articles\",\n        \"tags\":       [\"articles\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"op\": {\n                        \"enum\": [\"replace\"]\n                      },\n                      \"path\": {\n                        \"type\": \"string\"\n                      },\n                      \"value\": { }\n                    } }\n                },\n                \"example\": [\n                  {\n                    \"op\":    \"replace\",\n                    \"path\":  \".name\",\n                    \"value\": \"Hello Patch!\"\n                  }\n                ]\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\":    \"delete a single record in container articles by id\",\n        \"tags\":       [\"articles\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/articles/bulk-get\": {\n      \"post\": {\n        \"summary\":    \"get multiple records by id from container articles\",\n        \"tags\":       [\"articles\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.Article.json#/definitions/Article\" }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/articles/bulk-delete\": {\n      \"post\": {\n        \"summary\":    \"delete multiple records by id in container articles\",\n        \"tags\":       [\"articles\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/articles2\": {\n      \"get\": {\n        \"summary\":    \"return / filter multiple records from container articles2\",\n        \"description\":    \"To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.\",\n        \"tags\":       [\"articles2\"],\n        \"parameters\": [\n          {\n            \"in\":       \"query\",\n            \"name\":     \"filter\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"limit\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"limit the number of returned records\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"maxCount\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"maximum number of records. Result will return a **cursor** if more records available.\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"cursor\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"pass the **cursor** returned by the previous request\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Article.json#/definitions/Article\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"create or update multiple records in container articles2\",\n        \"tags\":       [\"articles2\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.Article.json#/definitions/Article\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/articles2/{id}\": {\n      \"get\": {\n        \"summary\":    \"get a single record from container articles2\",\n        \"tags\":       [\"articles2\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Article.json#/definitions/Article\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"write a single record to container articles2\",\n        \"tags\":       [\"articles2\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Article.json#/definitions/Article\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"patch\": {\n        \"summary\":    \"patch a single record in container articles2\",\n        \"tags\":       [\"articles2\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"op\": {\n                        \"enum\": [\"replace\"]\n                      },\n                      \"path\": {\n                        \"type\": \"string\"\n                      },\n                      \"value\": { }\n                    } }\n                },\n                \"example\": [\n                  {\n                    \"op\":    \"replace\",\n                    \"path\":  \".name\",\n                    \"value\": \"Hello Patch!\"\n                  }\n                ]\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\":    \"delete a single record in container articles2 by id\",\n        \"tags\":       [\"articles2\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/articles2/bulk-get\": {\n      \"post\": {\n        \"summary\":    \"get multiple records by id from container articles2\",\n        \"tags\":       [\"articles2\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.Article.json#/definitions/Article\" }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/articles2/bulk-delete\": {\n      \"post\": {\n        \"summary\":    \"delete multiple records by id in container articles2\",\n        \"tags\":       [\"articles2\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/producers\": {\n      \"get\": {\n        \"summary\":    \"return / filter multiple records from container producers\",\n        \"description\":    \"To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.\",\n        \"tags\":       [\"producers\"],\n        \"parameters\": [\n          {\n            \"in\":       \"query\",\n            \"name\":     \"filter\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"limit\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"limit the number of returned records\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"maxCount\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"maximum number of records. Result will return a **cursor** if more records available.\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"cursor\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"pass the **cursor** returned by the previous request\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Producer.json#/definitions/Producer\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"create or update multiple records in container producers\",\n        \"tags\":       [\"producers\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.Producer.json#/definitions/Producer\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/producers/{id}\": {\n      \"get\": {\n        \"summary\":    \"get a single record from container producers\",\n        \"tags\":       [\"producers\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Producer.json#/definitions/Producer\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"write a single record to container producers\",\n        \"tags\":       [\"producers\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Producer.json#/definitions/Producer\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"patch\": {\n        \"summary\":    \"patch a single record in container producers\",\n        \"tags\":       [\"producers\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"op\": {\n                        \"enum\": [\"replace\"]\n                      },\n                      \"path\": {\n                        \"type\": \"string\"\n                      },\n                      \"value\": { }\n                    } }\n                },\n                \"example\": [\n                  {\n                    \"op\":    \"replace\",\n                    \"path\":  \".name\",\n                    \"value\": \"Hello Patch!\"\n                  }\n                ]\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\":    \"delete a single record in container producers by id\",\n        \"tags\":       [\"producers\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/producers/bulk-get\": {\n      \"post\": {\n        \"summary\":    \"get multiple records by id from container producers\",\n        \"tags\":       [\"producers\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.Producer.json#/definitions/Producer\" }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/producers/bulk-delete\": {\n      \"post\": {\n        \"summary\":    \"delete multiple records by id in container producers\",\n        \"tags\":       [\"producers\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/employees\": {\n      \"get\": {\n        \"summary\":    \"return / filter multiple records from container employees\",\n        \"description\":    \"To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.\",\n        \"tags\":       [\"employees\"],\n        \"parameters\": [\n          {\n            \"in\":       \"query\",\n            \"name\":     \"filter\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"limit\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"limit the number of returned records\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"maxCount\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"maximum number of records. Result will return a **cursor** if more records available.\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"cursor\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"pass the **cursor** returned by the previous request\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Employee.json#/definitions/Employee\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"create or update multiple records in container employees\",\n        \"tags\":       [\"employees\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.Employee.json#/definitions/Employee\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/employees/{id}\": {\n      \"get\": {\n        \"summary\":    \"get a single record from container employees\",\n        \"tags\":       [\"employees\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Employee.json#/definitions/Employee\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"write a single record to container employees\",\n        \"tags\":       [\"employees\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.Employee.json#/definitions/Employee\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"patch\": {\n        \"summary\":    \"patch a single record in container employees\",\n        \"tags\":       [\"employees\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"op\": {\n                        \"enum\": [\"replace\"]\n                      },\n                      \"path\": {\n                        \"type\": \"string\"\n                      },\n                      \"value\": { }\n                    } }\n                },\n                \"example\": [\n                  {\n                    \"op\":    \"replace\",\n                    \"path\":  \".name\",\n                    \"value\": \"Hello Patch!\"\n                  }\n                ]\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\":    \"delete a single record in container employees by id\",\n        \"tags\":       [\"employees\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/employees/bulk-get\": {\n      \"post\": {\n        \"summary\":    \"get multiple records by id from container employees\",\n        \"tags\":       [\"employees\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.Employee.json#/definitions/Employee\" }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/employees/bulk-delete\": {\n      \"post\": {\n        \"summary\":    \"delete multiple records by id in container employees\",\n        \"tags\":       [\"employees\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/types\": {\n      \"get\": {\n        \"summary\":    \"return / filter multiple records from container types\",\n        \"description\":    \"To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.\",\n        \"tags\":       [\"types\"],\n        \"parameters\": [\n          {\n            \"in\":       \"query\",\n            \"name\":     \"filter\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"limit\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"limit the number of returned records\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"maxCount\",\n            \"schema\":   { \"type\": \"integer\" },\n            \"description\": \"maximum number of records. Result will return a **cursor** if more records available.\"\n          },\n          {\n            \"in\":       \"query\",\n            \"name\":     \"cursor\",\n            \"schema\":   { \"type\": \"string\" },\n            \"description\": \"pass the **cursor** returned by the previous request\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.TestType.json#/definitions/TestType\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"create or update multiple records in container types\",\n        \"tags\":       [\"types\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.TestType.json#/definitions/TestType\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/types/{id}\": {\n      \"get\": {\n        \"summary\":    \"get a single record from container types\",\n        \"tags\":       [\"types\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.TestType.json#/definitions/TestType\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"summary\":    \"write a single record to container types\",\n        \"tags\":       [\"types\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"UnitTest.Fliox.Client.TestType.json#/definitions/TestType\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"patch\": {\n        \"summary\":    \"patch a single record in container types\",\n        \"tags\":       [\"types\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"op\": {\n                        \"enum\": [\"replace\"]\n                      },\n                      \"path\": {\n                        \"type\": \"string\"\n                      },\n                      \"value\": { }\n                    } }\n                },\n                \"example\": [\n                  {\n                    \"op\":    \"replace\",\n                    \"path\":  \".name\",\n                    \"value\": \"Hello Patch!\"\n                  }\n                ]\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"summary\":    \"delete a single record in container types by id\",\n        \"tags\":       [\"types\"],\n        \"parameters\": [\n          {\n            \"in\":       \"path\",\n            \"name\":     \"id\",\n            \"schema\":   { \"type\": \"string\" },\n            \"required\": true,\n            \"description\": \"\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    },\n    \"/types/bulk-get\": {\n      \"post\": {\n        \"summary\":    \"get multiple records by id from container types\",\n        \"tags\":       [\"types\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"$ref\": \"UnitTest.Fliox.Client.TestType.json#/definitions/TestType\" }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/types/bulk-delete\": {\n      \"post\": {\n        \"summary\":    \"delete multiple records by id in container types\",\n        \"tags\":       [\"types\"],\n        \"requestBody\": {          \n          \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": { \"type\": \"string\" }\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {             \n            \"description\": \"OK\",\n            \"content\": {\n              \"text/plain\": { }\n            }\n          }\n        }\n      }\n    }\n  }   \n}",
			"canonicalURL": "/github.com/friflo/Friflo.Json.Fliox@a8964b8ede2fcc7d6d63998905b6463229650180/-/blob/Json.Tests/assets~/Schema-Loop/JSON/PocStore/openapi.json",
			"externalURLs": [
				{
					"url": "https://github.com/friflo/Friflo.Json.Fliox/blob/a8964b8ede2fcc7d6d63998905b6463229650180/Json.Tests/assets~/Schema-Loop/JSON/PocStore/openapi.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/\": get: responses: 200: content: application/json: schema: parse schema: at 61:27: external \"Friflo.Json.Fliox.Hub.DB.Cluster.json\": get: file: local file reference is not allowed"
}