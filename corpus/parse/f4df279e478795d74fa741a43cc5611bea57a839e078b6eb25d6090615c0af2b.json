{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MarquezProject/marquez"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "spec/openapi.yml",
			"byteSize": 52059,
			"content": "# SPDX-License-Identifier: Apache-2.0\n\nopenapi: 3.0.2\ninfo:\n  title: Marquez\n  version: 0.21.1-SNAPSHOT\n  description: Marquez is an open source **metadata service** for the **collection**, **aggregation**,\n    and **visualization** of a data ecosystem's metadata.\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: http://localhost:5000/api/v1\n    description: Local API server\npaths:\n  /namespaces/{namespace}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    put:\n      summary: Create a namespace\n      description: Creates a new namespace object. A namespace enables the contextual grouping of related\n        jobs and datasets. Namespaces must contain only letters (`a-z`, `A-Z`), numbers (`0-9`),\n        underscores (`_`), dashes (`-`), colons (`:`), slashes (`/`), or dots (`.`).\n        A namespace is case-insensitive with a maximum length of `1024` characters.\n        Note jobs and datasets will be unique within a namespace, but not across namespaces.\n      tags:\n        - Namespaces\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreatedNamespace'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Namespace'\n    get:\n      summary: Retrieve a namespace\n      description: Returns a namespace.\n      tags:\n        - Namespaces\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Namespace'\n\n  /namespaces:\n    get:\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      summary: List all namespaces\n      description: Returns a list of namespaces.\n      tags:\n        - Namespaces\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NamespaceList'\n\n  /sources/{source}:\n    parameters:\n      - $ref: '#/components/parameters/source'\n    put:\n      summary: Create a source\n      description: Creates a new source object. A source is the physical location of a dataset such as\n        a table in PostgreSQL, or topic in Kafka. A source enables the grouping of physical datasets\n        to their physical source.\n      deprecated: true\n      tags:\n        - Sources\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreatedSource'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Source'\n    get:\n      summary: Retrieve a source\n      description: Returns a source.\n      tags:\n        - Sources\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Source'\n\n  /sources:\n    get:\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      summary: List all sources\n      description: Returns a list of sources.\n      tags:\n        - Sources\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SourceList'\n\n  /namespaces/{namespace}/datasets/{dataset}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n    put:\n      summary: Create a dataset\n      description: Creates a new dataset.\n      deprecated: true\n      tags:\n        - Datasets\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/DbTable'\n                - $ref: '#/components/schemas/Stream'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dataset'\n    get:\n      summary: Retrieve a dataset\n      description: Returns a dataset.\n      tags:\n        - Datasets\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dataset'\n\n  /namespaces/{namespace}/datasets/{dataset}/versions/{version}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n      - $ref: '#/components/parameters/version'\n    get:\n      summary: Retrieve a version for a dataset\n      description: Returns a version for a dataset.\n      tags:\n        - Datasets\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetVersion'\n\n  /namespaces/{namespace}/datasets/{dataset}/versions:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n    get:\n      summary: List all versions for a dataset\n      description: Returns a list of versions for a dataset.\n      tags:\n        - Datasets\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetVersionList'\n\n  /namespaces/{namespace}/datasets:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n    get:\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      summary: List all datasets\n      description: Returns a list of datasets.\n      tags:\n        - Datasets\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetList'\n\n  /namespaces/{namespace}/datasets/{dataset}/tags/{tag}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n      - $ref: '#/components/parameters/tag'\n    post:\n      summary: Tag a dataset\n      description: Tag an existing dataset.\n      tags:\n        - Datasets\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dataset'\n\n  /namespaces/{namespace}/datasets/{dataset}/fields/{field}/tags/{tag}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n      - $ref: '#/components/parameters/field'\n      - $ref: '#/components/parameters/tag'\n    post:\n      summary: Tag a field\n      description: Tag an existing field of a dataset.\n      tags:\n        - Datasets\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dataset'\n\n  /namespaces/{namespace}/jobs/{job}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/job'\n    put:\n      summary: Create a job\n      description: Creates a new job object. All job objects are immutable and are uniquely identified by a generated ID.\n        Marquez will create a version of a job each time the contents of the object is modified. For example, the `location`\n        of a job may change over time resulting in new versions. The accumulated versions can be listed, used to rerun a\n        specific job version or possibly help debug a failed job run.\n      deprecated: true\n      tags:\n        - Jobs\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreatedJob'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Job'\n    get:\n      summary: Retrieve a job\n      description: Retrieve a job.\n      tags:\n        - Jobs\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Job'\n\n  /namespaces/{namespace}/jobs:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    get:\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      summary: List all jobs\n      description: Returns a list of jobs.\n      tags:\n        - Jobs\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobList'\n\n  /namespaces/{namespace}/jobs/{job}/versions/{version}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/job'\n      - $ref: '#/components/parameters/version'\n    get:\n      summary: Retrieve a version for a job\n      description: Returns a version for a job.\n      tags:\n        - Jobs\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobVersion'\n\n  /namespaces/{namespace}/jobs/{job}/versions:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/job'\n    get:\n      summary: List all versions for a job\n      description: Returns a list of versions for a job.\n      tags:\n        - Jobs\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobVersionList'\n\n  /namespaces/{namespace}/jobs/{job}/runs:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/job'\n    post:\n      summary: Create a run\n      description: Creates a new run object for a job.\n      deprecated: true\n      tags:\n        - Jobs\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreatedRun'\n      responses:\n        '201':\n          description: CREATED\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n    get:\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      summary: List all runs\n      description: Returns a list of runs for a job.\n      tags:\n        - Jobs\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunList'\n\n  /jobs/runs/{id}:\n    parameters:\n      - $ref: '#/components/parameters/runId'\n    get:\n      summary: Retrieve a run\n      description: Retrieve a run.\n      tags:\n        - Jobs\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IncompleteRun'\n\n  /jobs/runs/{id}/start:\n    parameters:\n      - $ref: '#/components/parameters/runId'\n      - $ref: '#/components/parameters/at'\n    post:\n      summary: Start a run\n      description: Marks the run as `RUNNING`.\n      deprecated: true\n      tags:\n        - Jobs\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IncompleteRun'\n\n  /jobs/runs/{id}/complete:\n    parameters:\n      - $ref: '#/components/parameters/runId'\n      - $ref: '#/components/parameters/at'\n    post:\n      summary: Complete a run\n      description: Marks the run as `COMPLETED`.\n      deprecated: true\n      tags:\n        - Jobs\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n\n  /jobs/runs/{id}/fail:\n    parameters:\n      - $ref: '#/components/parameters/runId'\n      - $ref: '#/components/parameters/at'\n    post:\n      summary: Fail a run\n      description: Marks the run as `FAILED`.\n      deprecated: true\n      tags:\n        - Jobs\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IncompleteRun'\n\n  /jobs/runs/{id}/abort:\n    parameters:\n      - $ref: '#/components/parameters/runId'\n      - $ref: '#/components/parameters/at'\n    post:\n      summary: Abort a run\n      description: Marks the run as `ABORTED`.\n      deprecated: true\n      tags:\n        - Jobs\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IncompleteRun'\n\n  /lineage:\n    post:\n      summary: Record a single lineage event\n      description: Receive, process, and store lineage metadata using the [OpenLineage](https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.json) standard.\n      tags:\n        - Lineage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LineageEvent'\n      responses:\n        '200':\n          description: OK\n    get:\n      parameters:\n        - $ref: '#/components/parameters/nodeId'\n        - $ref: '#/components/parameters/depth'\n      tags:\n        - Lineage\n      summary: Get a lineage graph\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LineageGraph'\n\n  /tags/{tag}:\n    parameters:\n      - $ref: '#/components/parameters/tag'\n    put:\n      summary: Create a tag\n      description: Creates a new tag object.\n      tags:\n        - Tags\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreatedTag'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagList'\n\n  /tags:\n    get:\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      summary: List all tags\n      description: Returns a list of tags.\n      tags:\n        - Tags\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagList'\n\n  /search:\n    get:\n      parameters:\n        - $ref: '#/components/parameters/q'\n        - $ref: '#/components/parameters/filter'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/limit'\n      summary: Query all datasets and jobs\n      description: Returns one or more datasets and jobs of your query.\n      tags:\n        - Search\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResultList'\n\ncomponents:\n  parameters:\n    at:\n      name: at\n      in: query\n      description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the time when the run transitioned.\n      required: false\n      schema:\n        type: string\n        format: date-time\n\n    namespace:\n      name: namespace\n      in: path\n      description: The name of the namespace.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n        example: my-namespace\n\n    source:\n      name: source\n      in: path\n      description: The name of the source.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n        example: my-source\n\n    dataset:\n      name: dataset\n      in: path\n      description: The name of the dataset.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n        example: my-dataset\n\n    tag:\n      name: tag\n      in: path\n      description: The name of the tag.\n      required: true\n      schema:\n        type: string\n        example: SENSITIVE\n\n    field:\n      name: field\n      in: path\n      description: The name of the field.\n      required: true\n      schema:\n        type: string\n        example: my_field\n\n    job:\n      name: job\n      in: path\n      description: The name of the job.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n        example: my-job\n\n    runId:\n      name: id\n      in: path\n      description: The ID of the run.\n      required: true\n      schema:\n        type: string\n        format: uuid\n        example: ea9badc5-7cb2-49af-9a9f-155771d3a797\n\n    version:\n      name: version\n      in: path\n      description: The ID of the job or dataset version.\n      required: true\n      schema:\n        type: string\n        format: uuid\n        example: ea9badc5-7cb2-49af-9a9f-155771d3a797\n\n    limit:\n      name: limit\n      in: query\n      description: The number of results to return from offset\n      required: false\n      schema:\n        type: integer\n        example: 25\n        default: 100\n\n    offset:\n      name: offset\n      in: query\n      description: The initial position from which to return results\n      required: false\n      schema:\n        type: integer\n        default: 0\n\n    nodeId:\n      name: nodeId\n      in: query\n      schema:\n        type: string\n        example: dataset:food_delivery:public.delivery_7_days\n      description: The ID of the node.\n      required: true\n\n    depth:\n      name: depth\n      in: query\n      schema:\n        type: integer\n        default: 20\n      description: Depth of lineage graph to create.\n      required: false\n\n    q:\n      name: q\n      in: query\n      schema:\n        type: string\n        example: my-dataset\n        description: Query containing pattern to match; datasets and jobs pattern matching is string based\n          and case-insensitive. Use percent sign (`%`) to match any string of zero or more characters (`my-job%`),\n          or an underscore (`_`) to match a single character (`_job_`).\n      required: true\n\n    filter:\n      name: filter\n      in: query\n      schema:\n        type: string\n        example: dataset\n        description: Filters the results of your query by `dataset` or `job`.\n      required: false\n\n    sort:\n      name: sort\n      in: query\n      schema:\n        type: string\n        example: name\n        description: Sorts the results of your query by `name` or `updated_at`.\n      required: false\n\n  schemas:\n    CreatedNamespace:\n      type: object\n      properties:\n        ownerName:\n          description: The owner of the namespace.\n          type: string\n        description:\n          description: The description of the namespace.\n          type: string\n      required:\n        - ownerName\n      example:\n        ownerName: me\n        description: My first namespace!\n\n    Namespace:\n      type: object\n      properties:\n        name:\n          description: The name of the namespace.\n          type: string\n        createdAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the namespace was created.\n          type: string\n          format: date-time\n        updatedAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the namespace was updated.\n          type: string\n          format: date-time\n        ownerName:\n          description: The owner of the namespace.\n          type: string\n        description:\n          description: The description of the namespace.\n          type: string\n      example:\n        name: my-namespace\n        createdAt: 2019-05-09T19:49:24.201361Z\n        updatedAt: 2019-05-09T19:49:24.201361Z\n        ownerName: me\n        description: My first namespace!\n\n    NamespaceList:\n      type: object\n      properties:\n        namespaces:\n          type: array\n          items:\n            $ref: '#/components/schemas/Namespace'\n\n    CreatedSource:\n      type: object\n      properties:\n        type:\n          description: The type of the source.\n          type: string\n        connectionUrl:\n          description: The URL to the location of the source.\n          type: string\n          format: URL\n        description:\n          description:  The description of the source.\n          type: string\n      required:\n        - type\n        - connectionUrl\n      example:\n        type: POSTGRESQL\n        connectionUrl: jdbc:postgresql://db.example.com/mydb\n        description: My first source!\n\n    Source:\n      type: object\n      properties:\n        type:\n          description: The type of the source.\n          type: string\n        name:\n          description: The name of the source.\n          type: string\n        createdAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the source was created.\n          type: string\n          format: date-time\n        updatedAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the source was updated.\n          type: string\n          format: date-time\n        connectionUrl:\n          description: The URL to the location of the source.\n          type: string\n          format: URL\n        description:\n          description:  The description of the dataset.\n          type: string\n      example:\n        type: POSTGRESQL\n        name: my-source\n        createdAt: 2019-05-09T19:49:24.201361Z\n        updatedAt: 2019-05-09T19:49:24.201361Z\n        connectionUrl: jdbc:postgresql://db.example.com/mydb\n        description: My first source!\n\n    SourceList:\n      type: object\n      properties:\n        sources:\n          items:\n            $ref: '#/components/schemas/Source'\n\n    DatasetType:\n      type: enum\n      enum: [DB_TABLE, STREAM]\n      description: The type of dataset\n\n    DbTable:\n      type: object\n      properties:\n        type:\n          description: The type of the dataset.\n          type: string\n          enum: [DB_TABLE]\n        physicalName:\n          description: The **physical** name of the table.\n          type: string\n        sourceName:\n          description: The name of the source associated with the table.\n          type: string\n        fields:\n          description: The fields of the table.\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                description: The name of the field.\n                type: string\n              type:\n                description: The data type of the field.\n                type: string\n              tags:\n                description: List of tags.\n                type: string\n              description:\n                description: The description of the field.\n                type: string\n            required:\n              - name\n              - type\n        tags:\n          description: List of tags.\n          type: array\n          items:\n            type: string\n        description:\n          description:  The description of the table.\n          type: string\n        runId:\n          description: The ID associated with the run modifying the table.\n          type: string\n      required:\n        - type\n        - physicalName\n        - sourceName\n        - fields\n      example:\n        type: DB_TABLE\n        physicalName: public.mytable\n        sourceName: my-source\n        fields: [\n          {name: a, type: INTEGER},\n          {name: b, type: TIMESTAMP},\n          {name: c, type: INTEGER},\n          {name: d, type: INTEGER}\n        ]\n        description: \"My first dataset!\"\n\n    Stream:\n      type: object\n      properties:\n        type:\n          description: The type of the dataset.\n          type: string\n          enum: [STREAM]\n        physicalName:\n          description: The **physical** name of the stream.\n          type: string\n        sourceName:\n          description: The name of the source associated with the stream.\n          type: string\n        schemaLocation:\n          description: The URL of the schema for the stream data.\n          type: string\n        fields:\n          description: The schema fields for the stream data.\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                description: The name of the field.\n                type: string\n              type:\n                description: The type of the field.\n                type: string\n              tags:\n                description: List of tags.\n                type: string\n              description:\n                description: The description of the field.\n                type: string\n            required:\n              - name\n              - type\n        tags:\n          description: List of tags.\n          type: string\n        description:\n          description: The description of the stream.\n          type: string\n        runId:\n          description: The ID associated with the run modifying the stream.\n          type: string\n      required:\n        - type\n        - physicalName\n        - sourceName\n        - fields\n        - schemaLocation\n      example:\n        type: STREAM\n        physicalName: my-stream\n        sourceName: my-stream-source\n        schemaLocation: 'http://registry.example.com/schemas/ids/1'\n        fields: []\n        description: \"My first stream dataset!\"\n\n    DatasetId:\n      type: object\n      description: The ID of the dataset.\n      properties:\n        namespace:\n          type: string\n          description: The namespace of the dataset.\n        name:\n          type: string\n          description: The name of the dataset.\n\n    Dataset:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/DatasetId'\n        type:\n          description: The type of the dataset.\n          type: string\n        name:\n          description: The **logical** name of the dataset.\n          type: string\n        physicalName:\n          description: The **physical** name of the dataset.\n          type: string\n        createdAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was created.\n          type: string\n          format: date-time\n        updatedAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was updated.\n          type: string\n          format: date-time\n        namespace:\n          type: string\n          description: The namespace of the dataset.\n        sourceName:\n          description: The name of the source associated with the dataset.\n          type: string\n        fields:\n          description: The fields of the dataset.\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                description: The name of the field.\n                type: string\n              type:\n                description: The data type of the field.\n                type: string\n              tags:\n                description: List of tags.\n                type: string\n              description:\n                description: The description of the field.\n                type: string\n        tags:\n          description: List of tags.\n          type: string\n        lastModifiedAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was last modified by a successful run.\n          type: string\n          format: date-time\n        description:\n          description:  The description of the dataset.\n          type: string\n        facets:\n          $ref: '#/components/schemas/DatasetFacets'\n        currentVersion:\n          description: The current version of the dataset.\n          type: string\n          format: uuid\n      example:\n        id:\n          namespace: my-namespace\n          name: my-dataset\n        type: DB_TABLE\n        name: my-dataset\n        physicalName: public.mytable\n        createdAt: 2019-05-09T19:49:24.201361Z\n        upodatedAt: 2019-05-09T19:49:24.201361Z\n        namespace: my-namespace\n        sourceName: my-source\n        fields: [\n          {name': a, type: INTEGER, tags: []},\n          {name': b, type: TIMESTAMP, tags: []},\n          {name': c, type: INTEGER, tags: []},\n          {name': d, type: INTEGER, tags: []}\n        ]\n        tags: []\n        lastModifiedAt: null\n        description: \"My first dataset!\"\n        facets: {}\n        currentVersion: \"b1d626a2-6d3a-475e-9ecf-943176d4a8c6\"\n\n    DatasetList:\n      type: object\n      properties:\n        datasets:\n          items:\n            $ref: '#/components/schemas/Dataset'\n        totalCount:\n          type: number\n          description: The total number of datasets for the given namespace\n      required:\n        - datasets\n\n    DatasetVersionId:\n      type: object\n      properties:\n        namespace:\n          type: string\n          description: The namespace of the dataset.\n        name:\n          type: string\n          description: The name of the dataset.\n        version:\n          type: string\n          format: uuid\n          description: The version of the dataset.\n      required:\n        - namespace\n        - name\n        - version\n\n    DatasetVersion:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/DatasetVersionId'\n        type:\n          description: The type of the dataset.\n          type: string\n        name:\n          description: The **logical** name of the dataset.\n          type: string\n        physicalName:\n          description: The **physical** name of the dataset.\n          type: string\n        createdAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was created.\n          type: string\n          format: date-time\n        version:\n          description: The ID of the dataset version.\n          type: string\n        namespace:\n          type: string\n          description: The namespace of the dataset.\n        sourceName:\n          description: The name of the source associated with the dataset.\n          type: string\n        fields:\n          description: The fields of the dataset.\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                description: The name of the field.\n                type: string\n              type:\n                description: The data type of the field.\n                type: string\n              tags:\n                description: List of tags.\n                type: string\n              description:\n                description: The description of the field.\n                type: string\n        tags:\n          description: List of tags.\n          type: string\n        description:\n          description:  The description of the dataset.\n          type: string\n        createdByRun:\n          $ref: '#/components/schemas/Run'\n        facets:\n          $ref: '#/components/schemas/DatasetFacets'\n      required:\n        - id\n        - type\n        - name\n        - physicalName\n        - createdAt\n        - version\n        - namespace\n        - sourceName\n        - description\n      example:\n        id:\n          namespace: my-namespace\n          name: my-dataset\n        type: DB_TABLE\n        name: my-dataset\n        physicalName: public.mytable\n        createdAt: 2019-05-09T19:49:24.201361Z\n        version: d224dac0-35d7-4d9b-bbbe-6fff1a8485ad\n        namespace: my-namespace\n        sourceName: my-source\n        fields: [\n          {name: a, type: INTEGER, tags: []},\n          {name: b, type: TIMESTAMP, tags: []},\n          {name: c, type: INTEGER, tags: []},\n          {name: d, type: INTEGER, tags: []}\n        ]\n        tags: []\n        description: \"My first dataset!\"\n        createdByRun: {\n          \"id\": \"0e89b60a-d80d-42ae-a12b-bd79ae1fb576\",\n          \"createdAt\": \"2019-05-09T18:52:35.620763Z\",\n          \"updatedAt\": \"2019-05-09T18:53:41.461122Z\",\n          \"nominalStartTime\": null,\n          \"nominalEndTime\": null,\n          \"state\": \"COMPLETED\",\n          \"startedAt\": \"2021-02-05T18:53:33.245492Z\",\n          \"endedAt\": \"2021-02-05T18:53:41.461122Z\",\n          \"durationMs\": 8216,\n          \"args\": { 'email': 'me@example.com', 'emailOnFailure': false, 'emailOnRetry': true, 'retries': 1 },\n          \"jobVersion\": {\n            \"namespace\": \"my-namespace\",\n            \"name\": \"my_processing_job\",\n            \"version\": \"0ba5b13b-350e-40f3-ba3f-cc00a4e92d11\"\n          },\n          \"inputVersions\": [\n            {\n              \"namespace\": \"my-namespace\",\n              \"name\": \"an_input_dataset\",\n              \"version\": \"d224dac0-35d7-4d9b-bbbe-6fff1a8485ad\"\n            }\n          ],\n          \"outputVersions\": [\n            {\n              \"namespace\": \"my-namespace\",\n              \"name\": \"my-dataset\",\n              \"version\": \"16e04029-2035-37f1-8206-d57be374333f\"\n            }\n          ]\n        }\n\n    DatasetVersionList:\n      type: object\n      properties:\n        versions:\n          items:\n            $ref: '#/components/schemas/DatasetVersion'\n\n    Tag:\n      type: object\n      properties:\n        name:\n          description: The name of the tag.\n          type: string\n        description:\n          description: The description of the tag.\n          type: string\n      example:\n        name: SENSITIVE\n        description: Contains sensitive information\n\n    TagList:\n      type: object\n      properties:\n        tags:\n          items:\n            $ref: '#/components/schemas/Tag'\n\n    JobType:\n      type: enum\n      enum: [BATCH, STREAM, SERVICE]\n      description: The type of the job.\n\n    CreatedJob:\n      type: object\n      properties:\n        id:\n          description: The ID of the job.\n          type: object\n          properties:\n            namespace:\n              type: string\n              description: The namespace of the job.\n            name:\n              type: string\n              description: The name of the job.\n        type:\n          $ref: '#/components/schemas/JobType'\n        inputs:\n          description: The set of **input** datasets.\n          type: array\n          items:\n            $ref: '#/components/schemas/DatasetId'\n          uniqueItems: true\n        outputs:\n          description: The set of **output** datasets.\n          type: array\n          items:\n            $ref: '#/components/schemas/DatasetId'\n          uniqueItems: true\n        location:\n          description: The URL of the job source code or artifact.\n          type: string\n          format: URL\n        context:\n          description: A key/value pair that must be of type `string`. A context can be used for getting additional details about the job.\n          type: object\n          deprecated: true\n        description:\n          description: The description of the job.\n          type: string\n        runId:\n          description: An _optional_ run ID used to associate a job version to an existing job run.\n          type: string\n      required:\n        - type\n        - inputs\n        - outputs\n      example:\n        type: BATCH\n        inputs: [{ namespace: my-namespace, name: my-dataset}]\n        outputs: []\n        location: https://github.com/my-jobs/blob/124f6089ad4c5fcbb1d7b33cbb5d3a9521c5d32c\n        context: {sql: 'SELECT * FROM mytable;'}\n        description: My first job!\n\n    JobId:\n      description: The ID of the job.\n      type: object\n      properties:\n        namespace:\n          type: string\n          description: The namespace of the job.\n        name:\n          type: string\n          description: The name of the job.\n    Job:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/JobId'\n        type:\n          description: The type of the job.\n          type: string\n        name:\n          description: The name of the job.\n          type: string\n        createdAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job was created.\n          type: string\n          format: date-time\n        updatedAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job was updated.\n          type: string\n          format: date-time\n        namespace:\n          description: The namespace of the job.\n          type: string\n        inputs:\n          description: The set of **input** datasets.\n          type: array\n          items:\n            $ref: '#/components/schemas/DatasetId'\n          uniqueItems: true\n        outputs:\n          description: The set of **output** datasets.\n          type: array\n          items:\n            $ref: '#/components/schemas/DatasetId'\n          uniqueItems: true\n        location:\n          description: The URL of the job source code or artifact.\n          type: string\n          format: URL\n        context:\n          description: A key/value pair that must be of type `string`. A context can be used for getting additional details about the job.\n          type: object\n          deprecated: true\n        description:\n          description: The description of the job.\n          type: string\n        latestRun:\n          $ref: '#/components/schemas/Run'\n        facets:\n          $ref: '#/components/schemas/JobFacets'\n        currentVersion:\n          description: The current version of the job.\n          type: string\n          format: uuid\n      example:\n        id:\n          namespace: my-namespace\n          name: my-job\n        type: BATCH\n        name: my-job\n        createdAt: 2019-05-09T19:49:24.201361Z\n        updatedAt: 2019-05-09T19:49:24.201361Z\n        namespace: my-namespace\n        inputs: [{namespace: my-namespace, name: my-dataset}]\n        outputs: []\n        location: https://github.com/my-jobs/blob/124f6089ad4c5fcbb1d7b33cbb5d3a9521c5d32c\n        context: {'SQL': \"SELECT * FROM mytable;\"}\n        description: My first job!\n        latestRun: null\n        facets: {}\n        currentVersion: \"b1d626a2-6d3a-475e-9ecf-943176d4a8c6\"\n\n    JobVersionList:\n      type: object\n      properties:\n        versions:\n          items:\n            $ref: '#/components/schemas/JobVersion'\n\n    JobVersionId:\n      type: object\n      properties:\n        namespace:\n          type: string\n          description: The namespace of the job.\n        name:\n          type: string\n          description: The name of the job.\n        version:\n          type: string\n          format: uuid\n          description: The version of the job.\n\n    JobVersion:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/JobVersionId'\n        name:\n          description: The name of the job.\n          type: string\n        version:\n          description: The version of the job\n          type: string\n        createdAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job version was created.\n          type: string\n          format: date-time\n        namespace:\n          description: The namespace of the job.\n          type: string\n        inputs:\n          description: The set of **input** datasets\n          type: array\n          items:\n            $ref: '#/components/schemas/DatasetId'\n          uniqueItems: true\n        outputs:\n          description: The set of **output** datasets\n          type: array\n          items:\n            $ref: '#/components/schemas/DatasetId'\n          uniqueItems: true\n        location:\n          description: The URL of the job source code or artifact for the given job version.\n          type: string\n          format: URL\n        context:\n          description: Deprecated- Use facet. A key/value pair that must be of type `string`. A context can be used for getting additional details about the job.\n          type: object\n          deprecated: true\n        latestRun:\n          $ref: '#/components/schemas/Run'\n        facets:\n          $ref: '#/components/schemas/JobFacets'\n      example:\n        id:\n          namespace: my-namespace\n          name: my-job\n          version: 56472c57-a2ef-4218-b7b7-d2af02a343fd\n        type: BATCH\n        name: my-job\n        version: 56472c57-a2ef-4218-b7b7-d2af02a343fd\n        createdAt: 2019-05-09T19:49:24.201361Z\n        namespace: my-namespace\n        inputs: [{namespace: my-namespace, name: my-dataset}]\n        outputs: []\n        location: https://github.com/my-jobs/blob/124f6089ad4c5fcbb1d7b33cbb5d3a9521c5d32c\n        context: {'SQL': \"SELECT * FROM mytable;\"}\n        description: My first job!\n        facets: {}\n\n    JobList:\n      type: object\n      properties:\n        jobs:\n          type: array\n          items:\n            $ref: '#/components/schemas/Job'\n        totalCount:\n          type: number\n          description: The total number of jobs for the given namespace\n\n    CreatedRun:\n      type: object\n      properties:\n        id:\n          description: An _optional_ user-provided unique ID of the run. A run ID **must** be an [UUID](https://tools.ietf.org/html/rfc4122).\n                       If an ID for the run is not provided, a random UUID will be generated for the given run.\n          type: string\n          format: uuid\n        nominalStartTime:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal start time of the run.\n          type: string\n          format: date-time\n        nominalEndTime:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal end time of the run.\n          type: string\n          format: date-time\n        args:\n          description: The arguments of the run.\n          type: object\n      example:\n        args: {'email': 'me@example.com', 'emailOnFailure': false, 'emailOnRetry': true, 'retries': 1}\n\n    IncompleteRun:\n      type: object\n      properties:\n        id:\n          description: The ID of the run.\n          type: string\n          format: uuid\n        createdAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was created.\n          type: string\n          format: date-time\n        updatedAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was updated.\n          type: string\n          format: date-time\n        nominalStartTime:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal start time of the run.\n          type: string\n          format: date-time\n        nominalEndTime:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal end time of the run.\n          type: string\n          format: date-time\n        state:\n          description: The current state of the run.\n          type: string\n          enum: [NEW, RUNNING, COMPLETED, FAILED, ABORTED]\n        startedAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the start time of the run.\n          type: string\n          format: date-time\n        endedAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the end time of the run.\n          type: string\n          format: date-time\n        durationMs:\n          type: integer\n          description: The total duration of the run. Measured in milliseconds.\n        args:\n          description: The arguments of the run.\n          type: object\n        facets:\n          $ref: '#/components/schemas/RunFacets'\n      example:\n        id: 870492da-ecfb-4be0-91b9-9a89ddd3db90\n        createdAt: 2019-05-09T19:49:24.201361Z\n        updatedAt: 2019-05-09T19:49:24.201361Z\n        nominalStartTime: null\n        nominalEndTime: null\n        state: RUNNING\n        startedAt: 2019-05-09T15:17:32.690346\n        endedAt: null\n        durationMs: null\n        args: {'email': 'me@example.com', 'emailOnFailure': 'false', 'emailOnRetry': 'true', 'retries': '1'}\n        facets: {}\n\n    Run:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/IncompleteRun'\n        - type: object\n          properties:\n            jobVersion:\n              $ref: '#/components/schemas/JobVersionId'\n            inputVersions:\n              type: array\n              items:\n                $ref: '#/components/schemas/DatasetVersionId'\n            outputVersions:\n              type: array\n              items:\n                $ref: '#/components/schemas/DatasetVersionId'\n            facets:\n              $ref: '#/components/schemas/RunFacets'\n      example:\n        id: 870492da-ecfb-4be0-91b9-9a89ddd3db90\n        createdAt: 2019-05-09T19:49:24.201361Z\n        updatedAt: 2019-05-09T19:49:24.201361Z\n        nominalStartTime: null\n        nominalEndTime: null\n        state: COMPLETED\n        startedAt: 2019-05-09T15:17:32.690346\n        endedAt: 2019-05-09T20:05:46.815920Z\n        durationMs: 4250894125\n        args: {'email': 'me@example.com', 'emailOnFailure': 'false', 'emailOnRetry': 'true', 'retries': '1'}\n        facets: {}\n\n    RunList:\n      type: object\n      properties:\n        runs:\n          type: array\n          items:\n            $ref: '#/components/schemas/Run'\n\n    DatasetFacets:\n      description: The facets of the dataset. For a full list of standard dataset facets, see [OpenLineage](https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.md#standard-facets).\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/CustomFacet'\n\n    JobFacets:\n      description: The facets of the job. For a full list of standard job facets, see [OpenLineage](https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.md#standard-facets).\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/CustomFacet'\n\n    RunFacets:\n      description: The facets of the run. For a full list of standard run facets, see [OpenLineage](https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.md#standard-facets).\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/CustomFacet'\n\n    CustomFacet:\n      description: A custom facet enables the extension of _dataset_, _job_, and _run_ metadata. A custom facet **must** also have a schema,\n                   where a version of the schema is identifiable via a URL. A field within the schema **must** not start with an underscore (`_`).\n      allOf:\n        - $ref: '#/components/schemas/BaseFacet'\n        - type: object\n          additionalProperties: true\n\n    BaseFacet:\n      description: All base facet fields are prefixed with an underscore (`_`) to avoid field naming conflicts defined with other facets.\n      type: object\n      properties:\n        _producer:\n          description: URI identifying the producer of this metadata. For example this could be a git url with a given tag or sha\n          type: string\n          format: uri\n          example: https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client\n        _schemaURL:\n          description: The URL to the corresponding version of the schema definition following a $ref URL Reference (see https://swagger.io/docs/specification/using-ref/)\n          type: string\n          format: uri\n          example: https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/spec/OpenLineage.yml#MyCustomJobFacet\n      required:\n        - _producer\n        - _schemaURL\n\n    LineageGraph:\n      type: object\n      properties:\n        graph:\n          type: array\n          items:\n            $ref: '#/components/schemas/GraphNode'\n\n    GraphNode:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The ID of the node.\n        type:\n          $ref: '#/components/schemas/NodeType'\n        data:\n          type: object\n          description: The data of the node.\n          discriminator:\n            propertyName: type\n            mapping:\n              'DATASET': '#/components/schemas/Dataset'\n              'JOB': '#/components/schemas/Job'\n          oneOf:\n            - $ref: '#/components/schemas/Dataset'\n            - $ref: '#/components/schemas/Job'\n        inEdges:\n          type: array\n          description: The in edges of the node.\n          items:\n            $ref: '#/components/schemas/GraphEdge'\n        outEdges:\n          type: array\n          description: The out edges of the node.\n          items:\n            $ref: '#/components/schemas/GraphEdge'\n\n    NodeType:\n      type: enum\n      enum: [ JOB, DATASET ]\n      description: The type of the diff node.\n\n    GraphEdge:\n      type: object\n      properties:\n        origin:\n          description: The ID of the origin node.\n          type: string\n        destination:\n          description: The ID of the destination node.\n          type: string\n\n    CreatedTag:\n      type: object\n      properties:\n        description:\n          description: The description of the tag.\n          type: string\n      example:\n        description: My first tag!\n\n    LineageEvent:\n      example:\n        eventType: COMPLETE\n        eventTime: 2019-05-09T19:49:24.201361Z\n        run: {runId: d46e465b-d358-4d32-83d4-df660ff614dd}\n        job: {namespace: my-namespace,name: my-job}\n        outputs: [{\n          namespace: my-namespace,\n          name: my-output,\n          facets: {\n            schema: {\n              _producer: \"https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client\",\n              _schemaURL: \"https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/spec/OpenLineage.json#/definitions/SchemaDatasetFacet\",\n              fields: [\n                {name: a, type: INTEGER},\n                {name: b, type: TIMESTAMP},\n                {name: c, type: INTEGER},\n                {name: d, type: INTEGER}\n              ]\n            }\n          }\n        }]\n        producer: \"https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client\"\n\n    SearchResultList:\n      type: object\n      properties:\n        totalCount:\n          description: Total number of search results.\n          type: integer\n          example: 1\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/SearchResult'\n\n    SearchResult:\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/SearchResultType'\n        name:\n          type:\n          description: The name of the dataset or job.\n          example: public.delivery_7_days\n        updatedAt:\n          type:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset or job was updated.\n          example: 2019-05-09T19:49:24.201361Z\n        namespace:\n          type: string\n          description: The namespace of the dataset or job.\n          example: food_delivery\n        nodeId:\n          type: string\n          description: The ID of the dataset or job node.\n          example: dataset:food_delivery:public.delivery_7_days\n\n    SearchResultType:\n      type: enum\n      enum: [DATASET, JOB]\n      description: The type of search result.\n      example: DATASET\n"
		}
	},
	"Error": "parse: parse spec: paths: /search: get: operation \"\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/SearchResultList\": parse schema: results: parse schema: item: parse schema: reference \"#/components/schemas/SearchResult\": parse schema: type: parse schema: reference \"#/components/schemas/SearchResultType\": parse schema: type: unexpected type: \"enum\""
}