{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/oats-ts/oats-ts"
		},
		"file": {
			"name": "kitchen-sink.json",
			"size": 0,
			"path": "projects/openapi-e2e-test/schemas/kitchen-sink.json",
			"byteSize": 4560,
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"Kitchen sink\",\n    \"version\": \"1.0\"\n  },\n  \"components\": {\n    \"schemas\": {\n      \"SingleValueEnums\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"str\",\n          \"obj\"\n        ],\n        \"properties\": {\n          \"str\": {\n            \"enum\": [\n              \"A\"\n            ]\n          },\n          \"num\": {\n            \"enum\": [\n              1\n            ]\n          },\n          \"bool\": {\n            \"enum\": [\n              true\n            ]\n          },\n          \"obj\": {\n            \"enum\": [\n              {\n                \"asd\": \"foo\"\n              }\n            ]\n          }\n        }\n      },\n      \"ObjectEnum\": {\n        \"enum\": [\n          null,\n          \"bar\",\n          3,\n          true,\n          {\n            \"foo\": \"bar\"\n          },\n          [\n            \"cat\"\n          ]\n        ]\n      },\n      \"ObjectConst\": {\n        \"const\": {\n          \"null\": null,\n          \"str\": \"bar\",\n          \"num\": 12,\n          \"bool\": false,\n          \"array\": [\n            1,\n            \"asd\",\n            true\n          ],\n          \"nested\": {\n            \"secondLevel\": {\n              \"thirdLevel\": {}\n            }\n          }\n        }\n      },\n      \"PrimitiveTuple\": {\n        \"type\": \"array\",\n        \"minItems\": 2,\n        \"prefixItems\": [\n          {\n            \"type\": \"number\"\n          },\n          {\n            \"type\": \"string\"\n          },\n          {\n            \"type\": \"boolean\"\n          },\n          {\n            \"type\": \"string\",\n            \"const\": \"hello\"\n          }\n        ]\n      },\n      \"TupleMessage1\": {\n        \"type\": \"array\",\n        \"minItems\": 2,\n        \"prefixItems\": [\n          {\n            \"type\": \"string\",\n            \"const\": \"message-1\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"foo\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      },\n      \"TupleMessage2\": {\n        \"type\": \"array\",\n        \"minItems\": 2,\n        \"prefixItems\": [\n          {\n            \"type\": \"string\",\n            \"const\": \"message-2\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"bar\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      },\n      \"TupleMessage\": {\n        \"oneOf\": [\n          {\n            \"$ref\": \"#/components/schemas/TupleMessage1\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/TupleMessage2\"\n          }\n        ]\n      },\n      \"Leaf1\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"leaf1\": {\n            \"const\": true\n          }\n        }\n      },\n      \"Leaf2\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"leaf2\": {\n            \"const\": true\n          }\n        }\n      },\n      \"Leaf3\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"leaf3\": {\n            \"const\": true\n          }\n        }\n      },\n      \"Mid\": {\n        \"discriminator\": {\n          \"propertyName\": \"type\",\n          \"mapping\": {\n            \"Leaf1\": \"#/components/schemas/Leaf1\",\n            \"Leaf2\": \"#/components/schemas/Leaf2\"\n          }\n        },\n        \"oneOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Leaf1\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/Leaf2\"\n          }\n        ]\n      },\n      \"Top\": {\n        \"discriminator\": {\n          \"propertyName\": \"type\",\n          \"mapping\": {\n            \"Mid\": \"#/components/schemas/Mid\",\n            \"Leaf3\": \"#/components/schemas/Leaf3\"\n          }\n        },\n        \"oneOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Mid\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/Leaf3\"\n          }\n        ]\n      },\n      \"IgnoredInternals\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"primitive\": {\n            \"type\": \"number\",\n            \"x-ignore-validation\": true\n          },\n          \"reference\": {\n            \"$ref\": \"#/components/schemas/TupleMessage1\",\n            \"x-ignore-validation\": true\n          },\n          \"arrayItems\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\",\n              \"x-ignore-validation\": true\n            }\n          },\n          \"additionalProps\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"string\",\n              \"x-ignore-validation\": true\n            }\n          }\n        }\n      }\n    }\n  },\n  \"paths\": {}\n}"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"SingleValueEnums\": parse schema: property \"bool\": parse schema: type: unexpected type: \"bool\""
}