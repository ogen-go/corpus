{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Soluto/tweek"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi/openapi.yaml",
			"byteSize": 23168,
			"content": "openapi: 3.0.0\ninfo:\n  title: Tweek\n  license:\n    name: MIT\n    url: 'https://github.com/Soluto/tweek/blob/master/LICENSE'\n  version: 0.1.0\n  description: |\n    \n    # Intro\n    \n    This is the openapi reference for Tweek api.\n    Tweek provides api for reading configuration values, writing/reading context, managing keys/schemas/tags/policies etc...\n\n    You can use openapi tools to generate different client to Tweek.\n\n    # Security\n    Tweek api support 2 models of authentication\n    - Client Credentials - using headers x-client-id and x-client-secret, map to subject (external-apps {client-id})\n    - JWT Token - Passed in Authorization header with Bearer scheme.  \n        There are several ways to get JWT token\n        - OIDC provider (Such as Google, IdentityServer, Auth0, etc...) -\u003e map to subject based on subject extraction definition.\n        - Signed JWT token with Repo private-key - issuer should be Tweek -\u003e map to admin subject\n        - JWT token create by basic auth using client Client Credentials -\u003e map to subject (external-apps {client-id})\n    \nsecurity:\n  - bearerAuth: []\n  - apiClientId: []\n    apiClientSecret : []\npaths:\n  /values:\n    get:\n      operationId: getValues\n      summary: Get tweek key value/s\n      description: |\n        Main api for querying Tweek.  \n        Can use for reading a single key or a folder.  \n        keyPath paramter can also be passed as part of the url (/api/v2/values/{keyPath})  \n        \n        require permissions \"values:/{keyPath*}\" (with limitation based on context policy and context params )\n      \n      tags:\n        - configuration\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n              examples:\n                single-key: \n                  value: \"red\"\n                scan: \n                  value:\n                    color: button\n                    shape: circle\n                    is_cta: true\n\n        '400':\n          description: Invalid Request\n        '403':\n          description: Unauthorized\n        '404':\n          description: Key not found\n\n      parameters:\n        - name: contextParams\n          in: query\n          schema:\n            type: object\n            # If the parameter values are of specific type, e.g. string:\n            additionalProperties:\n              type: string\n        - name: keyPath\n          in: query\n          description: | \n            key name, can be an exact key (my_folder/my_key) or folder by adding \"_\" (my_folder).\n          required: true\n          schema:\n            type: string\n        - name: $include\n          in: query\n          description: Project only specifc keys (relevant only in folder (_) queries)\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: $flatten\n          in: query\n          description: Return flat key/value JSON (no nesting, relevant only in folder (_) queries)\n          schema:\n            type: boolean\n      x-code-samples:\n        - lang: 'curl'\n          source: |\n            curl http://tweek/api/v2/values/button/color?user=user1\n            curl http://tweek/api/v2/values/button/_?user=user1\n        - lang: 'js'\n          source: |\n            import {createTweekClient} from 'tweek-client'\n            const client = createTweekClient({\n              context: {\n                user: \"user1\"\n              },\n              baseServiceUrl: \"https://tweek\",\n            });\n            \n            // get single key value\n            const color = await client.getValues(\"button/color\")\n\n            // get multiple results (scan)\n            const {color, shape} = await client.getValues(\"button/_\")\n\n \n  '/context/{identityType}/{identityId}':\n    get:\n      operationId: getContext\n      summary: Get identity context\n      description: |\n        require permissions:\n          - \"context/{identityType}/*\" (with limitation based on context policy and context identifier )\n      tags:\n        - context\n      parameters:\n        - name: identityType\n          in: path\n          description: the type of the identity - for example user\n          required: true\n          schema:\n            type: string\n        - name: identityId\n          in: path\n          description: the identifier of the identity - for example jaime\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n              examples:\n                resonse: \n                  value:\n                    age: 33\n                    country: US\n      x-code-samples:\n        - lang: 'curl'\n          source: |\n            curl -H X-Client-Id={client-id} \\\n                 -H X-Client-Secret={client-secret} \\\n                 https://tweek/api/v2/context/user/user1\n        - lang: 'js'\n          source: |\n            import {createTweekManagementClient} from 'tweek-client'\n            const client = createTweekManagementClient({\n              clientId: \"client-id\",\n              clientSecret: \"client-secret\",\n              baseServiceUrl: \"https://tweek\",\n            });\n            \n            const user = await client.getContext(\"user\", \"user1\")\n      \n    post:\n      operationId: appendContext\n      summary: Save/Append identity context\n      tags:\n        - context\n      parameters:\n        - name: identityType\n          in: path\n          description: the type of the identity - for example user\n          required: true\n          schema:\n            type: string\n        - name: identityId\n          in: path\n          description: the identifier of the identity - for example jaime\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Ok\n      x-code-samples:\n        - lang: 'curl'\n          source: |\n            curl -H X-Client-Id={client-id} \\\n                 -H X-Client-Secret={client-secret} \\\n                 -X POST -d \"{\\\"age\\\": 40}\" \\\n                 https://tweek/api/v2/context/user/user1\n        - lang: 'js'\n          source: |\n            import {createTweekManagementClient} from 'tweek-client'\n            const client = createTweekManagementClient({\n              clientId: \"client-id\",\n              clientSecret: \"client-secret\",\n              baseServiceUrl: \"https://tweek\",\n            });\n            \n            await client.appendContext(\"user\", \"user1\",{\n              age: 40\n            })\n    delete:\n      operationId: deleteContext\n      summary: Delete identity context\n      description: |\n        require permissions:\n          - \"context/{identityType}/*\" (with limitation based on context policy and context identifier )\n      tags:\n        - context\n      parameters:\n        - name: identityType\n          in: path\n          description: the type of the identity - for example user\n          required: true\n          schema:\n            type: string\n        - name: identityId\n          in: path\n          description: the identifier of the identity - for example jaime\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Ok\n      x-code-samples:\n        - lang: 'curl'\n          source: |\n            curl -H X-Client-Id={client-id} \\\n                 -H X-Client-Secret={client-secret} \\\n                 -X Delete\n                 https://tweek/api/v2/context/user/user1\n        - lang: 'js'\n          source: |\n            import {createTweekManagementClient} from 'tweek-client'\n            const client = createTweekManagementClient({\n              clientId: \"client-id\",\n              clientSecret: \"client-secret\",\n              baseServiceUrl: \"https://tweek\",\n            });\n            \n            const user = await client.deleteContext(\"user\", \"user1\")\n\n  '/context/{identityType}/{identityId}/{prop}':\n    delete:\n      operationId: deleteContextProperty\n      summary: Delete identity context property\n      tags:\n        - context\n      parameters:\n        - name: identityType\n          in: path\n          description: the type of the identity - for example user\n          required: true\n          schema:\n            type: string\n        - name: identityId\n          in: path\n          description: the identifier of the identity - for example jaime\n          required: true\n          schema:\n            type: string\n        - name: prop\n          in: path\n          description: 'the property to delete, for example age'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n  /keys:\n    get:\n      operationId: getKeys\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n      summary: 'Get all keys definitions'\n      tags:\n        - keys\n      parameters:\n        - description: ''\n          in: query\n          name: keyPath\n          required: true\n          schema:\n            type: string\n        - description: ''\n          in: query\n          name: revision\n          required: false\n          schema:\n            type: string\n    put:\n      operationId: saveKey\n      summary: Save or replace key\n      responses:\n        '200':\n          description: Ok\n          content:\n            text/html:\n              schema:\n                type: string\n      tags:\n        - keys\n      parameters:\n        - description: ''\n          in: query\n          name: keyPath\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/KeyUpdateModel'\n        required: true\n    delete:\n      operationId: deleteKey\n      tags:\n        - keys\n      responses:\n        '200':\n          description: Ok\n          content:\n            text/html:\n              schema:\n                type: string\n      summary: 'Delete an existing key'\n      parameters:\n        - description: ''\n          in: query\n          name: keyPath\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n  /bulk-keys-upload:\n    put:\n      operationId: bulkKeysUpload\n      responses:\n        '200':\n          description: Ok\n      summary: 'Bulk key upload'\n      description: Upload zip file of keys\n      tags:\n        - keys\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                bulk: \n                  type: string\n                  format: binary\n        required: true\n  /tags:\n    get:\n      operationId: getAllTags\n      summary: Get tags list\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n      tags:\n        - tags\n    put:\n      operationId: saveAllTags\n      summary: Replace tags list\n      responses:\n        '204':\n          description: No content\n      tags:\n        - tags\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        description: The tags that need saving\n        required: true\n  /schemas:\n    get:\n      operationId: getSchema\n      summary: Get identities schema\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n      tags:\n        - schema\n  '/schemas/{identityType}':\n    delete:\n      operationId: deleteSchema\n      summary: Delete Schema\n      responses:\n        '200':\n          description: Ok\n          content:\n            text/html:\n              schema:\n                type: string\n      tags:\n        - schema\n      parameters:\n        - description: The type of the identity\n          in: path\n          name: identityType\n          required: true\n          schema:\n            type: string\n    post:\n      operationId: createNewIdentity\n      summary: Create new identity\n      responses:\n        '200':\n          description: Ok\n          content:\n            text/html:\n              schema:\n                type: string\n      tags:\n        - schema\n      parameters:\n        - description: ''\n          in: path\n          name: identityType\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        required: true\n    patch:\n      operationId: patchIdentity\n      summary: Patch existing identity\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n      tags:\n        - schema\n      parameters:\n        - description: ''\n          in: path\n          name: identityType\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/Patch'\n  /manifests:\n    get:\n      operationId: getAllKeyManifests\n      summary: Get All key manifests\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n      tags:\n        - manifest\n  /suggestions:\n    get:\n      operationId: getKeysSuggestions\n      summary: Get Key Suggestions\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n      tags:\n        - suggestions\n  /search:\n    get:\n      operationId: searchKeys\n      description: Search for keys\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n      tags:\n        - search\n  /dependents:\n    get:\n      operationId: getAllDependents\n      summary: Get all keys dependents for a key\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n      tags:\n        - dependent\n  /revision-history:\n    get:\n      operationId: getRevisionHistory\n      summary: Get revision history for existing key\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n      tags:\n        - revision-history\n      parameters:\n        - description: ''\n          in: query\n          name: keyPath\n          required: true\n          schema:\n            type: string\n        - description: ''\n          in: query\n          name: since\n          required: true\n          schema:\n            type: string\n  /policies:\n    get:\n      operationId: getPoliciesList\n      summary: Get policies list\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n      tags:\n        - policies\n    put:\n      operationId: putPoliciesList\n      summary: Replace policies list\n      responses:\n        '200':\n          description: OK\n      tags:\n        - policies\n    patch:\n      operationId: patchPoliciesList\n      summary: Update Policies file\n      responses:\n        '200':\n          description: OK\n      tags:\n        - policies\n      requestBody:\n        $ref: '#/components/requestBodies/Patch'\n  /apps:\n    post:\n      operationId: createApp\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppCreationResponseModel'\n      summary: 'Create new app'\n      description: |\n        Create new app (credentials) for using Tweek.\n        Return login details for the new app.\n\n        require permission - write repo/apps \n      tags:\n        - apps\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppCreationRequestModel'\n        required: true\n    get:\n      operationId: getApps\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema: \n                type: object\n      summary: 'List apps'\n      description: |\n        List all applications created in Tweek.  \n        Return a map of appId-\u003ename.  \n\n        require permission - read repo/apps \n      tags:\n        - apps\n  /jwt-extraction-policy:\n    put:\n      operationId: updateJWTExtractionPolicy\n      responses:\n        '200':\n          description: Ok\n      summary: 'Update JWT extraction policy'\n      description: |\n        Update JWT subject extraction policy with a new rego payload.\n\n        require permission - write repo/policies \n      tags:\n        - policies\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                data: \n                  type: string\n        required: true\n    get:\n      operationId: getJWTExtractionPolicy\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema: \n                type: object\n                properties:\n                  data: \n                    type: string\n\n      summary: 'Get JWT subject extraction policy'\n      description: |\n        Get current rego file data for JWT subject extraction.\n\n        require permission - read repo/policies\n      tags:\n        - policies\n  /hooks:\n    get:\n      operationId: getHooksList\n      summary: Get Hooks list\n      parameters:\n        - name: keyPathFilter\n          in: query\n          description: Filters results to only return hooks for the given keyPath. Must be url encoded.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Hook'\n          headers:\n            ETag:\n              description: The ETag of the current state of hooks data. Can optionally be returned with POST/PUT/DELETE requests.\n              type: string\n      tags:\n        - hooks\n    post:\n      operationId: createHook\n      summary: Create a new hook\n      tags:\n        - hooks\n      parameters:\n        - name: If-Match\n          in: header\n          description: The last ETag received in a GET request\n          required: false\n          type: string\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Hook'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/HookData'\n        description: The details of the hook to create\n        required: true\n  '/hooks/{id}':\n    put:\n      operationId: updateHook\n      summary: updates a hook\n      tags:\n        - hooks\n      parameters:\n        - name: id\n          in: path\n          description: The id of the hook to update\n          required: true\n          schema:\n            type: string\n        - name: If-Match\n          in: header\n          description: The last ETag received in a GET request\n          required: false\n          type: string\n      responses:\n        '204':\n          description: No content\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/HookData'\n        description: The updated details of the hook\n        required: true\n    delete:\n      operationId: deleteHook\n      summary: deletes a hook\n      tags:\n        - hooks\n      parameters:\n        - name: id\n          in: path\n          description: The id of the hook to delete\n          required: true\n          schema:\n            type: string\n        - name: If-Match\n          in: header\n          description: The last ETag received in a GET request\n          required: false\n          type: string\n      responses:\n        '204':\n          description: No content\n  \nservers:\n  - url: /api/v2/\ncomponents:\n  securitySchemes:\n    bearerAuth:           \n      type: http\n      scheme: bearer\n      bearerFormat: JWT   \n    apiClientId:\n      type: apiKey\n      in: header\n      name: X-CLIENT-ID\n    apiClientSecret:\n      type: apiKey\n      in: header\n      name: X-CLIENT-SECRET\n  requestBodies:\n    Patch:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Patch'\n      required: true\n  schemas:\n    PatchOperation:\n      type: object\n      properties:\n        op:\n          type: string\n        path:\n          type: string\n        value:\n          type: object\n    Patch:\n      type: array\n      items:\n        $ref: '#/components/schemas/PatchOperation'\n    HookData:\n      type: object\n      properties:\n        keyPath:\n          type: string\n        type:\n          type: string\n        url:\n          type: string\n        format:\n          type: string\n        tags:\n          type: array\n          items:\n            type: string\n    Hook:\n      type: object\n      properties:\n        id:\n          type: string\n        keyPath:\n          type: string\n        type:\n          type: string\n        url:\n          type: string\n    KeyUpdateModel:\n      description: ''\n      properties:\n        implementation:\n          type: object\n          description: ''\n        manifest:\n          type: object\n          description: ''\n      type: object\n      required:\n        - implementation\n        - manifest\n    AppCreationResponseModel:\n      description: ''\n      properties:\n        appId:\n          type: string\n          description: ''\n        appSecret:\n          type: string\n          description: ''\n      type: object\n      required:\n        - appId\n        - appSecret\n    AppCreationRequestModel:\n      description: ''\n      properties:\n        name:\n          type: string\n          description: ''\n        permissions:\n          type: array\n          items:\n            type: string\n          description: ''\n      type: object\n      required:\n        - name\n        - permissions\n",
			"canonicalURL": "/github.com/Soluto/tweek@1d22a0c2434f0a67167ae60f670b1f78574c2a36/-/blob/docs/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Soluto/tweek/blob/1d22a0c2434f0a67167ae60f670b1f78574c2a36/docs/openapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/hooks\": get: operation \"getHooksList\": responses: 200: headers: header \"ETag\": at 1:8262: parameter MUST contain either a schema property, or a content property"
}