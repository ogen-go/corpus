{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/indigodavid/ezCar_backend"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "swagger/v1/swagger.yaml",
			"byteSize": 8036,
			"content": "---\nopenapi: 3.0.1\ninfo:\n  title: API V1\n  version: v1\npaths:\n  \"/api/v1/cars\":\n    post:\n      summary: Creates a car\n      tags:\n      - cars\n      parameters: []\n      responses:\n        '201':\n          description: Car created\n        '422':\n          description: invalid request\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                car_type:\n                  type: string\n                brand:\n                  type: string\n                fee_per_day:\n                  type: number\n                color:\n                  type: string\n                image:\n                  type: string\n              required:\n              - name\n              - status\n          application/xml:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                car_type:\n                  type: string\n                brand:\n                  type: string\n                fee_per_day:\n                  type: number\n                color:\n                  type: string\n                image:\n                  type: string\n              required:\n              - name\n              - status\n  \"/api/v1/cars/{id}\":\n    get:\n      summary: Retrieves a Car\n      tags:\n      - cars\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: name found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  name:\n                    type: string\n                  brand:\n                    type: string\n                  car_type:\n                    type: string\n                  fee_per_day:\n                    type: number\n                  color:\n                    type: string\n                  image:\n                    type: string\n                  rented:\n                    type: boolean\n                required:\n                - id\n                - name\n                - brand\n                - car_type\n                - fee_per_day\n                - color\n                - image\n                - rented\n            application/xml:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  name:\n                    type: string\n                  brand:\n                    type: string\n                  car_type:\n                    type: string\n                  fee_per_day:\n                    type: number\n                  color:\n                    type: string\n                  image:\n                    type: string\n                  rented:\n                    type: boolean\n                required:\n                - id\n                - name\n                - brand\n                - car_type\n                - fee_per_day\n                - color\n                - image\n                - rented\n        '404':\n          description: Car not found\n  \"/reservations\":\n    get:\n      summary: list reservations\n      tags:\n      - Reservations\n      security:\n      - bearerAuth: []\n      responses:\n        '200':\n          description: successful\n          content:\n            application/json:\n              examples:\n                successful:\n                  value:\n                    code: 200\n                    data:\n                    - id: '1'\n                      type: reservation\n                      attributes:\n                        id: 1\n                        user_id: 1\n                        car_id: 1\n                        reservation_date: '2022-10-28'\n                        due_date: '2022-11-21'\n    post:\n      summary: create reservation\n      tags:\n      - Reservations\n      parameters: []\n      security:\n      - bearerAuth: []\n      responses:\n        '201':\n          description: successful\n          content:\n            application/json:\n              examples:\n                successful:\n                  value:\n                    code: 201\n                    data:\n                      id: 6\n                      reservation_date: '2022-10-28'\n                      due_date: '2022-11-21'\n                      car: Car 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                reservation_date:\n                  type: string\n                  format: date\n                due_date:\n                  type: string\n                  format: date\n                car:\n                  type: string\n              required:\n              - reservation_date\n              - due_date\n              - car\n  \"/users/signup\":\n    post:\n      summary: new registration\n      tags:\n      - Users\n      parameters: []\n      responses:\n        '200':\n          description: successful\n          content:\n            application/json:\n              examples:\n                successfull_request:\n                  value:\n                    code: 201\n                    data:\n                      message: Signed up succesfully!\n                      user:\n                        id: 1\n                        name: string\n                        email: user@mail.com\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                    photo:\n                      type: string\n                    date_of_birth:\n                      type: string\n                      format: date\n                    email:\n                      type: string\n                      pattern: \"^\\\\S+@\\\\S+\\\\.\\\\S+$\"\n                      format: email\n                    password:\n                      type: string\n                      format: password\n                  required:\n                  - name\n                  - email\n                  - password\n              required:\n              - user\n  \"/users/login\":\n    post:\n      summary: create session\n      tags:\n      - Users\n      parameters: []\n      responses:\n        '200':\n          description: successful\n          content:\n            application/json:\n              examples:\n                successfull_login:\n                  value:\n                    code: 200\n                    data:\n                      user:\n                        id: 1\n                        name: User 1\n                        email: user@mail.com\n                      message: Logged in successfully.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user:\n                  type: object\n                  properties:\n                    email:\n                      type: string\n                      pattern: \"^\\\\S+@\\\\S+\\\\.\\\\S+$\"\n                      format: email\n                    password:\n                      type: string\n                      format: password\n                  required:\n                  - email\n                  - password\n  \"/users/logout\":\n    delete:\n      summary: delete session\n      tags:\n      - Users\n      security:\n      - bearerAuth: []\n      responses:\n        '200':\n          description: successful\n          content:\n            application/json:\n              examples:\n                succesful_logout:\n                  value:\n                    code: 200\n                    data:\n                      message: logged out successfully\nservers:\n- url: https://{defaultHost}\n  variables:\n    defaultHost:\n      default: www.example.com\n",
			"canonicalURL": "/github.com/indigodavid/ezCar_backend@89d9bae9f08f2641e839e1c44b1b81ed0d6ddf1e/-/blob/swagger/v1/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/indigodavid/ezCar_backend/blob/89d9bae9f08f2641e839e1c44b1b81ed0d6ddf1e/swagger/v1/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/reservations\": get: security: at swagger/v1/swagger.yaml:139:9: unknown security scheme \"bearerAuth\""
}