{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MieuxVoter/mv-api-server-apiplatform"
		},
		"file": {
			"name": "mvapi.0.0.0.oas3.yaml",
			"path": "openapi/spec/mvapi.0.0.0.oas3.yaml",
			"content": "openapi: 3.0.2\ninfo:\n  title: 'Majority Judgment API'\n  version: 0.0.0-dev\n  description: |\n    This is a **deliberation service** using **majority judgment** polling.\n    It's **libre software** ([source](https://github.com/mieuxvoter)) made and maintained by [MieuxVoter.fr](https://mieuxvoter.fr).\n    You're browsing the API documentation and sandbox.\n\n    ## Use one of the known clients\n\n    - TODO: add an URL to a client of the API\n\n\n    ## Try it out the hard way\n\n    ### Create an account\n\n    You will need a user account to interact with polls.\n    Head to **Registration** â†’ `POST /users` below.\n    Click _Try it out_, set your desired credentials, and execute the query.\n    Scroll down to see the response.\n\n    ### Authenticate\n\n    Use your credentials in the **Login** â†’ `POST /_jwt`, and the API will return a Json Web Token valid for one hour.\n    Copy the token (not the whole response, and without quotes) in the field behind the `Authorize ðŸ”’` button.\n\n    ### Create a poll\n\n    **Poll** â†’ `POST /polls`\n\n    Keep the response, you'll need the uuids.\n\n    \u003e TODO: document invitation generation\n\n    ### Submit judgments\n\n    **Ballot** â†’ `POST /polls/{pollId}/proposals/{proposalId}/ballots`\n\n    One request per proposal, for now.  We plan on making an endpoint to submit them all at once.\n\n    ### Collect the results\n\n    **Result** â†’ `GET /polls/{id}/result`\n\n    ## Use a generated client library\n\n    - for php  (link!)\n    - for typescript-node  (link!!)\n    - â€¦\n\n    There are clients we can generate for most languages.\n    Get in touch if you'd like one in particular!\n    Or clone this project and use `bin/generate-client.bash -t whatever`.\npaths:\n  '/ballots/{id}':\n    get:\n      description: 'Inspect a previously submitted Ballot.'\n      tags:\n        - Ballot\n      operationId: getBallotItem\n      summary: 'Retrieves a Ballot resource.'\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n      responses:\n        200:\n          description: 'Ballot resource response'\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/Ballot:jsonld-read'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ballot-read'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/Ballot-read'\n        404:\n          description: 'Resource not found'\n    delete:\n      tags:\n        - Ballot\n      operationId: deleteBallotItem\n      summary: 'Removes the Ballot resource.'\n      responses:\n        204:\n          description: 'Ballot resource deleted'\n        404:\n          description: 'Resource not found'\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n  '/grades/{id}':\n    get:\n      tags:\n        - Grade\n      operationId: getGradeItem\n      summary: 'Retrieves a Grade resource.'\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n      responses:\n        200:\n          description: 'Grade resource response'\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/Grade:jsonld-read'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Grade-read'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/Grade-read'\n        404:\n          description: 'Resource not found'\n  /invitations:\n    get:\n      tags:\n        - Invitation\n      operationId: getInvitationCollection\n      summary: 'Retrieves the collection of Invitation resources.'\n      responses:\n        200:\n          description: 'Invitation collection response'\n          content:\n            application/ld+json:\n              schema:\n                type: object\n                properties:\n                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Invitation:jsonld-read' } }\n                  'hydra:totalItems': { type: integer, minimum: 0 }\n                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }\n                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }\n                required:\n                  - 'hydra:member'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Invitation-read'\n            text/html:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Invitation-read'\n      parameters:\n        -\n          name: page\n          in: query\n          required: false\n          description: 'The collection page number'\n          schema:\n            type: integer\n            default: 1\n  '/invitations/{id}':\n    get:\n      tags:\n        - Invitation\n      operationId: getInvitationItem\n      summary: 'Retrieves a Invitation resource.'\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n      responses:\n        200:\n          description: 'Invitation resource response'\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/Invitation:jsonld-read'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Invitation-read'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/Invitation-read'\n        404:\n          description: 'Resource not found'\n  /polls:\n    get:\n      tags:\n        - Poll\n      operationId: getPollCollection\n      summary: 'Retrieves the collection of Poll resources.'\n      responses:\n        200:\n          description: 'Poll collection response'\n          content:\n            application/ld+json:\n              schema:\n                type: object\n                properties:\n                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Poll:jsonld-read' } }\n                  'hydra:totalItems': { type: integer, minimum: 0 }\n                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }\n                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }\n                required:\n                  - 'hydra:member'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Poll-read'\n            text/html:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Poll-read'\n      parameters:\n        -\n          name: page\n          in: query\n          required: false\n          description: 'The collection page number'\n          schema:\n            type: integer\n            default: 1\n    post:\n      tags:\n        - Poll\n      operationId: postPollCollection\n      summary: 'Creates a Poll resource.'\n      responses:\n        201:\n          description: 'Poll resource created'\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/Poll:jsonld-read'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Poll-read'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/Poll-read'\n          links:\n            GetPollItem:\n              parameters:\n                uuid: '$response.body#/uuid'\n              operationId: getPollItem\n              description: 'The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /polls/{id}`.'\n        400:\n          description: 'Invalid input'\n        404:\n          description: 'Resource not found'\n      requestBody:\n        content:\n          application/ld+json:\n            schema:\n              $ref: '#/components/schemas/Poll:jsonld-create'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Poll-create'\n          text/html:\n            schema:\n              $ref: '#/components/schemas/Poll-create'\n        description: 'The new Poll resource'\n  '/polls/{id}':\n    get:\n      tags:\n        - Poll\n      operationId: getPollItem\n      summary: 'Retrieves a Poll resource.'\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n      responses:\n        200:\n          description: 'Poll resource response'\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/Poll:jsonld-read'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Poll-read'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/Poll-read'\n        404:\n          description: 'Resource not found'\n    delete:\n      tags:\n        - Poll\n      operationId: deletePollItem\n      summary: 'Removes the Poll resource.'\n      responses:\n        204:\n          description: 'Poll resource deleted'\n        404:\n          description: 'Resource not found'\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n  '/polls/{id}/grades':\n    get:\n      tags:\n        - Grade\n        - Poll\n      operationId: api_polls_grades_get_subresource\n      summary: 'Retrieves the collection of Grade resources.'\n      responses:\n        200:\n          description: 'Grade collection response'\n          content:\n            application/ld+json:\n              schema:\n                type: object\n                properties:\n                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Grade:jsonld-read' } }\n                  'hydra:totalItems': { type: integer, minimum: 0 }\n                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }\n                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }\n                required:\n                  - 'hydra:member'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Grade-read'\n            text/html:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Grade-read'\n        404:\n          description: 'Resource not found'\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n        -\n          name: page\n          in: query\n          required: false\n          description: 'The collection page number'\n          schema:\n            type: integer\n            default: 1\n  '/polls/{id}/invitations':\n    get:\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n        -\n          name: page\n          in: query\n          required: false\n          description: 'The collection page number'\n          schema:\n            type: integer\n            default: 1\n      tags:\n        - Invitation\n      operationId: get_for_pollInvitationCollection\n      summary: 'Retrieves the collection of Invitation resources.'\n      responses:\n        200:\n          description: 'Invitation collection response'\n          content:\n            application/ld+json:\n              schema:\n                type: object\n                properties:\n                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Invitation:jsonld-read' } }\n                  'hydra:totalItems': { type: integer, minimum: 0 }\n                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }\n                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }\n                required:\n                  - 'hydra:member'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Invitation-read'\n            text/html:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Invitation-read'\n  '/polls/{id}/proposals':\n    get:\n      tags:\n        - Proposal\n        - Poll\n      operationId: api_polls_proposals_get_subresource\n      summary: 'Retrieves the collection of Proposal resources.'\n      responses:\n        200:\n          description: 'Proposal collection response'\n          content:\n            application/ld+json:\n              schema:\n                type: object\n                properties:\n                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Proposal:jsonld-read' } }\n                  'hydra:totalItems': { type: integer, minimum: 0 }\n                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }\n                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }\n                required:\n                  - 'hydra:member'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Proposal-read'\n            text/html:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Proposal-read'\n        404:\n          description: 'Resource not found'\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n        -\n          name: page\n          in: query\n          required: false\n          description: 'The collection page number'\n          schema:\n            type: integer\n            default: 1\n    post:\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n      tags:\n        - Proposal\n      operationId: postProposalCollection\n      summary: 'Creates a Proposal resource.'\n      responses:\n        201:\n          description: 'Proposal resource created'\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/Proposal:jsonld-read'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Proposal-read'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/Proposal-read'\n          links:\n            GetProposalItem:\n              parameters:\n                uuid: '$response.body#/uuid'\n              operationId: getProposalItem\n              description: 'The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /proposals/{id}`.'\n        400:\n          description: 'Invalid input'\n        404:\n          description: 'Resource not found'\n      requestBody:\n        content:\n          application/ld+json:\n            schema:\n              $ref: '#/components/schemas/Proposal:jsonld-create'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Proposal-create'\n          text/html:\n            schema:\n              $ref: '#/components/schemas/Proposal-create'\n        description: 'The new Proposal resource'\n  '/polls/{id}/result':\n    get:\n      tags:\n        - Result\n        - Poll\n      operationId: get_for_pollResultItem\n      summary: 'Gets the result of a poll'\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n      responses:\n        200:\n          description: 'Result resource response'\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/Result:jsonld-read'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result-read'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/Result-read'\n        404:\n          description: 'Resource not found'\n      description: |\n        This endpoint computes a fresh result from the ballots currently received.\n        For now, you may read a poll's result _at any time_.\n  '/polls/{pollId}/proposals/{proposalId}/ballots':\n    post:\n      parameters:\n        -\n          name: pollId\n          in: path\n          required: true\n          description: 'Universally Unique IDentifier of the poll whose proposal we are judging.'\n          example: ed8c2754-4220-4f54-94e9-5e86982e85ac\n          schema:\n            type: string\n        -\n          name: proposalId\n          in: path\n          required: true\n          description: 'Universally Unique IDentifier of the proposal we are judging.'\n          example: 368bd23a-6f19-4d8a-bb21-ff168ae2efc6\n          schema:\n            type: string\n      tags:\n        - Ballot\n      operationId: postBallotCollection\n      summary: 'Creates a Ballot resource.'\n      responses:\n        201:\n          description: 'Ballot resource created'\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/Ballot:jsonld-created'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ballot-created'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/Ballot-created'\n          links:\n            GetBallotItem:\n              parameters:\n                uuid: '$response.body#/uuid'\n              operationId: getBallotItem\n              description: 'The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /ballots/{id}`.'\n        400:\n          description: 'Invalid input'\n        404:\n          description: 'Resource not found'\n      requestBody:\n        content:\n          application/ld+json:\n            schema:\n              $ref: '#/components/schemas/Ballot:jsonld-create'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Ballot-create'\n          text/html:\n            schema:\n              $ref: '#/components/schemas/Ballot-create'\n        description: 'The new Ballot resource'\n    get:\n      tags:\n        - Ballot\n        - Proposal\n      operationId: api_polls_proposals_ballots_get_subresource\n      summary: 'Retrieves the collection of Ballot resources.'\n      responses:\n        200:\n          description: 'Ballot collection response'\n          content:\n            application/ld+json:\n              schema:\n                type: object\n                properties:\n                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Ballot:jsonld' } }\n                  'hydra:totalItems': { type: integer, minimum: 0 }\n                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }\n                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }\n                required:\n                  - 'hydra:member'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Ballot'\n            text/html:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Ballot'\n        404:\n          description: 'Resource not found'\n      parameters:\n        -\n          name: pollId\n          in: path\n          required: true\n          schema:\n            type: string\n          description: 'Universally Unique IDentifier of the poll.'\n          example: 6c1c8973-2df3-4b5a-a17d-a3a921dba448\n        -\n          name: proposalId\n          in: path\n          required: true\n          schema:\n            type: string\n          description: 'Universally Unique IDentifier of the proposal.'\n          example: ebf2fda8-5f45-4a33-9758-40d7f5a74998\n        -\n          name: page\n          in: query\n          required: false\n          description: 'The collection page number'\n          schema:\n            type: integer\n            default: 1\n  '/proposals/{id}':\n    get:\n      tags:\n        - Proposal\n      operationId: getProposalItem\n      summary: 'Retrieves a Proposal resource.'\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n      responses:\n        200:\n          description: 'Proposal resource response'\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/Proposal:jsonld-read'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Proposal-read'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/Proposal-read'\n        404:\n          description: 'Resource not found'\n  '/proposals/{id}/ballots':\n    get:\n      tags:\n        - Ballot\n        - Proposal\n      operationId: api_proposals_ballots_get_subresource\n      summary: 'Retrieves the collection of Ballot resources.'\n      responses:\n        200:\n          description: 'Ballot collection response'\n          content:\n            application/ld+json:\n              schema:\n                type: object\n                properties:\n                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Ballot:jsonld' } }\n                  'hydra:totalItems': { type: integer, minimum: 0 }\n                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }\n                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }\n                required:\n                  - 'hydra:member'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Ballot'\n            text/html:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Ballot'\n        404:\n          description: 'Resource not found'\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n        -\n          name: page\n          in: query\n          required: false\n          description: 'The collection page number'\n          schema:\n            type: integer\n            default: 1\n  /users:\n    get:\n      summary: 'Retrieves the collection of Users.'\n      description: 'Only administrators are allowed to access this.'\n      tags:\n        - User\n        - Administration\n      operationId: getUserCollection\n      responses:\n        200:\n          description: 'User collection response'\n          content:\n            application/ld+json:\n              schema:\n                type: object\n                properties:\n                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/User:jsonld-read' } }\n                  'hydra:totalItems': { type: integer, minimum: 0 }\n                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }\n                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }\n                required:\n                  - 'hydra:member'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User-read'\n            text/html:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User-read'\n      parameters:\n        -\n          name: page\n          in: query\n          required: false\n          description: 'The collection page number'\n          schema:\n            type: integer\n            default: 1\n    post:\n      summary: 'Registers a new User.'\n      description: 'Registers a new User in the database.  The email is optional and will help you reset a forgotten password.'\n      tags:\n        - User\n        - Registration\n      operationId: postUserCollection\n      responses:\n        201:\n          description: 'User resource created'\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/User:jsonld-read'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User-read'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/User-read'\n          links:\n            GetUserItem:\n              parameters:\n                uuid: '$response.body#/uuid'\n              operationId: getUserItem\n              description: 'The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /users/{id}`.'\n        400:\n          description: 'Invalid input'\n        404:\n          description: 'Resource not found'\n      requestBody:\n        content:\n          application/ld+json:\n            schema:\n              $ref: '#/components/schemas/User:jsonld-create'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User-create'\n          text/html:\n            schema:\n              $ref: '#/components/schemas/User-create'\n        description: 'The new User resource'\n  '/users/{id}':\n    get:\n      summary: 'Gets information about a User.'\n      description: 'You are authorized to get information about yourself only.'\n      tags:\n        - User\n      operationId: getUserItem\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n      responses:\n        200:\n          description: 'User resource response'\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/User:jsonld-read'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User-read'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/User-read'\n        404:\n          description: 'Resource not found'\n    put:\n      summary: 'Updates information about a User.'\n      description: 'Logged-in users are authorized to update information about themselves only.'\n      tags:\n        - User\n      operationId: putUserItem\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n      responses:\n        200:\n          description: 'User resource updated'\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/User:jsonld-read'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User-read'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/User-read'\n        400:\n          description: 'Invalid input'\n        404:\n          description: 'Resource not found'\n      requestBody:\n        content:\n          application/ld+json:\n            schema:\n              $ref: '#/components/schemas/User:jsonld-edit'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User-edit'\n          text/html:\n            schema:\n              $ref: '#/components/schemas/User-edit'\n        description: 'The updated User resource'\n    delete:\n      tags:\n        - User\n      operationId: deleteUserItem\n      summary: 'Removes the User resource.'\n      responses:\n        204:\n          description: 'User resource deleted'\n        404:\n          description: 'Resource not found'\n      parameters:\n        -\n          name: id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: |\n            Universally Unique IDentifier (UUID)\n          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1\n  /_jwt:\n    post:\n      tags:\n        - Login\n        - User\n      operationId: postCredentialsItem\n      summary: 'Returns an authentication Token from login Credentials.'\n      description: 'Creating and participating to private polls require authentication.  The Token returned is a [JWT](https://jwt.io/) valid for one hour.'\n      responses:\n        200:\n          description: 'A JSON Web Token (JWT)'\n        400:\n          description: 'Bad credentials.'\n        401:\n          description: 'Unauthorized credentials.'\n        402:\n          schema:\n            $ref: '#/components/schemas/Token'\n      requestBody:\n        description: 'User Credentials'\n        content:\n          application/ld+json:\n            schema:\n              $ref: '#/components/schemas/Credentials'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Credentials'\n  /render/merit-profile.svg:\n    get:\n      tags:\n        - Tools\n      operationId: getSvgMeritProfileFromTally\n      summary: |\n        Generates a merit profile as SVG of the provided tally.\n      description: |\n        The resulting merit profile is not ranked, proposals are shown in the order they were submitted.\n        This endpoint requires no authentication.\n      responses:\n        200:\n          description: 'A SVG image.'\n        201: []\n  '/{tally}.json':\n    get:\n      tags:\n        - Tools\n      operationId: getJsonResultFromTally\n      summary: |\n        Resolves the provided tally.\n      description: |\n        This endpoint requires no authentication.\n      responses:\n        200:\n          description: 'A JSON with information about the proposals, notably their rank.'\n        201: []\nsecurity:\n  -\n    apiKey: []\ncomponents:\n  schemas:\n    Ballot:\n      type: object\n      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'\n      properties:\n        uuid:\n          description: 'Universally Unique IDentifier of the Ballot.'\n          type: string\n          format: uuid\n          nullable: true\n        id:\n          readOnly: true\n          description: |-\n            Internal, incrementing numerical id, unused by ApiPlatform\n            but used in tallying to ignore old|stale|overriden ballots by fetching the highest id,\n            since ballots are immutable and new submissions after opinion changes create new ballots.\n          type: integer\n        proposal:\n          description: 'The Majority Judgment Poll Proposal the author is giving a grade to.'\n          type: string\n          format: iri-reference\n        grade:\n          description: 'The Grade attributed by the Judge to the Proposal.'\n          type: string\n          format: iri-reference\n        participant:\n          type: string\n          format: iri-reference\n          nullable: true\n        createdAt:\n          type: string\n          format: date-time\n    Ballot-create:\n      type: object\n      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'\n      properties:\n        grade:\n          description: 'The Grade attributed by the Judge to the Proposal.'\n          $ref: '#/components/schemas/Grade-create'\n    Ballot-created:\n      type: object\n      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'\n      properties:\n        uuid:\n          description: 'Universally Unique IDentifier of the Ballot.'\n          type: string\n          format: uuid\n          nullable: true\n        proposal:\n          description: 'The Majority Judgment Poll Proposal the author is giving a grade to.'\n          type: string\n          format: iri-reference\n        grade:\n          description: 'The Grade attributed by the Judge to the Proposal.'\n          type: string\n          format: iri-reference\n    Ballot-read:\n      type: object\n      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'\n      properties:\n        uuid:\n          description: 'Universally Unique IDentifier of the Ballot.'\n          type: string\n          format: uuid\n          nullable: true\n        proposal:\n          description: 'The Majority Judgment Poll Proposal the author is giving a grade to.'\n          $ref: '#/components/schemas/Proposal-read'\n        grade:\n          description: 'The Grade attributed by the Judge to the Proposal.'\n          $ref: '#/components/schemas/Grade-read'\n    'Ballot:jsonld':\n      type: object\n      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'\n      properties:\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        uuid:\n          description: 'Universally Unique IDentifier of the Ballot.'\n          type: string\n          format: uuid\n          nullable: true\n        id:\n          readOnly: true\n          description: |-\n            Internal, incrementing numerical id, unused by ApiPlatform\n            but used in tallying to ignore old|stale|overriden ballots by fetching the highest id,\n            since ballots are immutable and new submissions after opinion changes create new ballots.\n          type: integer\n        proposal:\n          description: 'The Majority Judgment Poll Proposal the author is giving a grade to.'\n          type: string\n          format: iri-reference\n        grade:\n          description: 'The Grade attributed by the Judge to the Proposal.'\n          type: string\n          format: iri-reference\n        participant:\n          type: string\n          format: iri-reference\n          nullable: true\n        createdAt:\n          type: string\n          format: date-time\n    'Ballot:jsonld-create':\n      type: object\n      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        grade:\n          description: 'The Grade attributed by the Judge to the Proposal.'\n          $ref: '#/components/schemas/Grade:jsonld-create'\n    'Ballot:jsonld-created':\n      type: object\n      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        uuid:\n          description: 'Universally Unique IDentifier of the Ballot.'\n          type: string\n          format: uuid\n          nullable: true\n        proposal:\n          description: 'The Majority Judgment Poll Proposal the author is giving a grade to.'\n          type: string\n          format: iri-reference\n        grade:\n          description: 'The Grade attributed by the Judge to the Proposal.'\n          type: string\n          format: iri-reference\n    'Ballot:jsonld-read':\n      type: object\n      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        uuid:\n          description: 'Universally Unique IDentifier of the Ballot.'\n          type: string\n          format: uuid\n          nullable: true\n        proposal:\n          description: 'The Majority Judgment Poll Proposal the author is giving a grade to.'\n          $ref: '#/components/schemas/Proposal:jsonld-read'\n        grade:\n          description: 'The Grade attributed by the Judge to the Proposal.'\n          $ref: '#/components/schemas/Grade:jsonld-read'\n    Grade-create:\n      type: object\n      description: 'Grades are attributed to Proposals by Participants, in Ballots.'\n      properties:\n        name:\n          type: string\n        level:\n          description: |-\n            Used to compare grades procedurally.  \\n\n            Usually starts at zero (0) and ends at \u003cMAXIMUM_GRADES\u003e-1.  \\n\n            Grades of the same poll MUST have unique levels between themselves.\n          type: integer\n    Grade-read:\n      type: object\n      description: 'Grades are attributed to Proposals by Participants, in Ballots.'\n      properties:\n        uuid:\n          readOnly: true\n          description: 'Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92'\n          type: string\n          format: uuid\n          nullable: true\n        name:\n          type: string\n        level:\n          description: |-\n            Used to compare grades procedurally.  \\n\n            Usually starts at zero (0) and ends at \u003cMAXIMUM_GRADES\u003e-1.  \\n\n            Grades of the same poll MUST have unique levels between themselves.\n          type: integer\n    'Grade:jsonld-create':\n      type: object\n      description: 'Grades are attributed to Proposals by Participants, in Ballots.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        name:\n          type: string\n        level:\n          description: |-\n            Used to compare grades procedurally.  \\n\n            Usually starts at zero (0) and ends at \u003cMAXIMUM_GRADES\u003e-1.  \\n\n            Grades of the same poll MUST have unique levels between themselves.\n          type: integer\n    'Grade:jsonld-read':\n      type: object\n      description: 'Grades are attributed to Proposals by Participants, in Ballots.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        uuid:\n          readOnly: true\n          description: 'Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92'\n          type: string\n          format: uuid\n          nullable: true\n        name:\n          type: string\n        level:\n          description: |-\n            Used to compare grades procedurally.  \\n\n            Usually starts at zero (0) and ends at \u003cMAXIMUM_GRADES\u003e-1.  \\n\n            Grades of the same poll MUST have unique levels between themselves.\n          type: integer\n    Invitation-read:\n      type: object\n      description: 'An invitation to a poll.'\n      properties:\n        uuid:\n          readOnly: true\n          description: 'Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92'\n          type: string\n          format: uuid\n          nullable: true\n        poll:\n          description: 'The poll this invitation is for.'\n          $ref: '#/components/schemas/Poll-read'\n        accepted:\n          readOnly: true\n          description: 'Whether this invitation was accepted by someone already.'\n          type: boolean\n        acceptedByYou:\n          readOnly: true\n          description: 'Whether this invitation was accepted by the current user.'\n          type: boolean\n    'Invitation:jsonld-read':\n      type: object\n      description: 'An invitation to a poll.'\n      properties:\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        '@context':\n          readOnly: true\n          type: string\n        uuid:\n          readOnly: true\n          description: 'Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92'\n          type: string\n          format: uuid\n          nullable: true\n        poll:\n          description: 'The poll this invitation is for.'\n          $ref: '#/components/schemas/Poll:jsonld-read'\n        accepted:\n          readOnly: true\n          description: 'Whether this invitation was accepted by someone already.'\n          type: boolean\n        acceptedByYou:\n          readOnly: true\n          description: 'Whether this invitation was accepted by the current user.'\n          type: boolean\n    Poll-create:\n      type: object\n      description: 'A Liquid Majority Judgment Poll.'\n      properties:\n        slug:\n          description: 'A unique, short, human-friendly identifier for the Poll.'\n          type: string\n        scope:\n          description: |-\n            The scope defines how and by whom the poll is accessible:\n            `public`: Everyone may access the poll, and it will be publicly listed ;\n            `unlisted`: Everyone may access the poll if they know its URI ;\n            `private`: Only invited participants may participate ;\n            The default scope is `unlisted`.\n          type: string\n        subject:\n          description: 'The subject of the poll. Careful consideration should be taken in the writing of this.'\n          type: string\n        proposals:\n          description: |-\n            A list of Proposals to judge,\n            that MUST contain at least two proposals,\n            and can have at most 256 proposals\n            but that upper limit is arbitrary\n            and may wildly vary after benchmark and discussion.\n          type: array\n          items:\n            $ref: '#/components/schemas/Proposal-create'\n        grades:\n          description: |-\n            A list of Grades that Participants may give to Proposals â€“\n            That list MUST contain at least two Grades,\n            and at most 16 (another arbitrary limit to discuss).\n          type: array\n          items:\n            $ref: '#/components/schemas/Grade-create'\n      required:\n        - subject\n    Poll-read:\n      type: object\n      description: 'A Liquid Majority Judgment Poll.'\n      properties:\n        uuid:\n          description: |-\n            A Universally Unique IDentifier (version 4)\n            like b7e7d328-c1fb-4af7-b258-23d08f6ed2d4\n            and you may use the short prefix to fetch a poll as well,\n            like b7e7d328 or even b7e-7d-328 to make it more human-legible.\n          type: string\n        slug:\n          description: 'A unique, short, human-friendly identifier for the Poll.'\n          type: string\n        scope:\n          description: |-\n            The scope defines how and by whom the poll is accessible:\n            `public`: Everyone may access the poll, and it will be publicly listed ;\n            `unlisted`: Everyone may access the poll if they know its URI ;\n            `private`: Only invited participants may participate ;\n            The default scope is `unlisted`.\n          type: string\n        subject:\n          description: 'The subject of the poll. Careful consideration should be taken in the writing of this.'\n          type: string\n        proposals:\n          description: |-\n            A list of Proposals to judge,\n            that MUST contain at least two proposals,\n            and can have at most 256 proposals\n            but that upper limit is arbitrary\n            and may wildly vary after benchmark and discussion.\n          type: array\n          items:\n            $ref: '#/components/schemas/Proposal-read'\n        grades:\n          description: |-\n            A list of Grades that Participants may give to Proposals â€“\n            That list MUST contain at least two Grades,\n            and at most 16 (another arbitrary limit to discuss).\n          type: array\n          items:\n            $ref: '#/components/schemas/Grade-read'\n        canGenerateInvitations:\n          description: |-\n            Can the current user generate invitations for this poll or not?\n            Helps clients show the relevant links and forms.\n          type: boolean\n      required:\n        - subject\n    'Poll:jsonld-create':\n      type: object\n      description: 'A Liquid Majority Judgment Poll.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        slug:\n          description: 'A unique, short, human-friendly identifier for the Poll.'\n          type: string\n        scope:\n          description: |-\n            The scope defines how and by whom the poll is accessible:\n            `public`: Everyone may access the poll, and it will be publicly listed ;\n            `unlisted`: Everyone may access the poll if they know its URI ;\n            `private`: Only invited participants may participate ;\n            The default scope is `unlisted`.\n          type: string\n        subject:\n          description: 'The subject of the poll. Careful consideration should be taken in the writing of this.'\n          type: string\n        proposals:\n          description: |-\n            A list of Proposals to judge,\n            that MUST contain at least two proposals,\n            and can have at most 256 proposals\n            but that upper limit is arbitrary\n            and may wildly vary after benchmark and discussion.\n          type: array\n          items:\n            $ref: '#/components/schemas/Proposal:jsonld-create'\n        grades:\n          description: |-\n            A list of Grades that Participants may give to Proposals â€“\n            That list MUST contain at least two Grades,\n            and at most 16 (another arbitrary limit to discuss).\n          type: array\n          items:\n            $ref: '#/components/schemas/Grade:jsonld-create'\n      required:\n        - subject\n    'Poll:jsonld-read':\n      type: object\n      description: 'A Liquid Majority Judgment Poll.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        uuid:\n          description: |-\n            A Universally Unique IDentifier (version 4)\n            like b7e7d328-c1fb-4af7-b258-23d08f6ed2d4\n            and you may use the short prefix to fetch a poll as well,\n            like b7e7d328 or even b7e-7d-328 to make it more human-legible.\n          type: string\n        slug:\n          description: 'A unique, short, human-friendly identifier for the Poll.'\n          type: string\n        scope:\n          description: |-\n            The scope defines how and by whom the poll is accessible:\n            `public`: Everyone may access the poll, and it will be publicly listed ;\n            `unlisted`: Everyone may access the poll if they know its URI ;\n            `private`: Only invited participants may participate ;\n            The default scope is `unlisted`.\n          type: string\n        subject:\n          description: 'The subject of the poll. Careful consideration should be taken in the writing of this.'\n          type: string\n        proposals:\n          description: |-\n            A list of Proposals to judge,\n            that MUST contain at least two proposals,\n            and can have at most 256 proposals\n            but that upper limit is arbitrary\n            and may wildly vary after benchmark and discussion.\n          type: array\n          items:\n            $ref: '#/components/schemas/Proposal:jsonld-read'\n        grades:\n          description: |-\n            A list of Grades that Participants may give to Proposals â€“\n            That list MUST contain at least two Grades,\n            and at most 16 (another arbitrary limit to discuss).\n          type: array\n          items:\n            $ref: '#/components/schemas/Grade:jsonld-read'\n        canGenerateInvitations:\n          description: |-\n            Can the current user generate invitations for this poll or not?\n            Helps clients show the relevant links and forms.\n          type: boolean\n      required:\n        - subject\n    Proposal-create:\n      type: object\n      description: 'A Proposal (aka. Candidate) of a Poll, whom any Participant can give a Grade to.'\n      properties:\n        title:\n          description: 'The title of the proposal.'\n          type: string\n        poll:\n          description: 'The poll this proposal is attached to.'\n          $ref: '#/components/schemas/Poll-create'\n    Proposal-read:\n      type: object\n      description: 'A Proposal (aka. Candidate) of a Poll, whom any Participant can give a Grade to.'\n      properties:\n        uuid:\n          description: 'Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92'\n          type: string\n          format: uuid\n          nullable: true\n        title:\n          description: 'The title of the proposal.'\n          type: string\n    'Proposal:jsonld-create':\n      type: object\n      description: 'A Proposal (aka. Candidate) of a Poll, whom any Participant can give a Grade to.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        title:\n          description: 'The title of the proposal.'\n          type: string\n        poll:\n          description: 'The poll this proposal is attached to.'\n          $ref: '#/components/schemas/Poll:jsonld-create'\n    'Proposal:jsonld-read':\n      type: object\n      description: 'A Proposal (aka. Candidate) of a Poll, whom any Participant can give a Grade to.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        uuid:\n          description: 'Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92'\n          type: string\n          format: uuid\n          nullable: true\n        title:\n          description: 'The title of the proposal.'\n          type: string\n    ProposalGradeResult-read:\n      type: object\n      description: |-\n        Results for one Grade of one Proposal,\n        basically the tally of Ballots for this Grade and Proposal,\n        but there might be more information in there in the future.\n      properties:\n        grade:\n          description: 'The IRI of the Grade this Result is about.'\n          type: string\n          format: iri-reference\n        proposal:\n          description: 'The IRI of the Proposal this Result is about.'\n          type: string\n          format: iri-reference\n        tally:\n          description: 'Amount of Ballots emitted for this Grade on the Proposal.'\n          type: integer\n    'ProposalGradeResult:jsonld-read':\n      type: object\n      description: |-\n        Results for one Grade of one Proposal,\n        basically the tally of Ballots for this Grade and Proposal,\n        but there might be more information in there in the future.\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        grade:\n          description: 'The IRI of the Grade this Result is about.'\n          type: string\n          format: iri-reference\n        proposal:\n          description: 'The IRI of the Proposal this Result is about.'\n          type: string\n          format: iri-reference\n        tally:\n          description: 'Amount of Ballots emitted for this Grade on the Proposal.'\n          type: integer\n    ProposalResult-read:\n      type: object\n      description: 'The ranked Result of one Proposal in a Poll.'\n      properties:\n        proposal:\n          description: 'The Proposal this Result is for.'\n          $ref: '#/components/schemas/Proposal-read'\n        rank:\n          description: |-\n            The computed rank of the Proposal in the Poll â€”\n            Rank starts at 1 and goes upwards, and\n            two proposals may have the same rank.\n          type: integer\n        medianGrade:\n          description: 'The median Grade of the Proposal.'\n          $ref: '#/components/schemas/Grade-read'\n        tally:\n          description: 'Total Amount of Ballots emitted for the Proposal this Result is about.'\n          type: integer\n        gradesResults:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProposalGradeResultRead'\n          description: |-\n            Results for each Grade, on this Proposal â€”\n            This is the merit profile of the Proposal.\n    'ProposalResult:jsonld-read':\n      type: object\n      description: 'The ranked Result of one Proposal in a Poll.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        proposal:\n          description: 'The Proposal this Result is for.'\n          $ref: '#/components/schemas/Proposal:jsonld-read'\n        rank:\n          description: |-\n            The computed rank of the Proposal in the Poll â€”\n            Rank starts at 1 and goes upwards, and\n            two proposals may have the same rank.\n          type: integer\n        medianGrade:\n          description: 'The median Grade of the Proposal.'\n          $ref: '#/components/schemas/Grade:jsonld-read'\n        tally:\n          description: 'Total Amount of Ballots emitted for the Proposal this Result is about.'\n          type: integer\n        gradesResults:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProposalGradeResultRead'\n          description: |-\n            Results for each Grade, on this Proposal â€”\n            This is the merit profile of the Proposal.\n    Result-read:\n      type: object\n      description: 'A Result of a Majority Judgment Poll.  Holds a leaderboard of the proposals.'\n      properties:\n        poll:\n          description: 'The Poll this Result describes.'\n          $ref: '#/components/schemas/Poll-read'\n        algorithm:\n          description: 'The name of the algorithm used to derive this Result.'\n          type: string\n        leaderboard:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProposalResultRead'\n          description: |-\n            In order, each Proposals' Result.  In extreme,\n            low-participation polls, some Proposals may have the same rank ;\n            in that case, their order should be the order they were added to the poll.\n    'Result:jsonld-read':\n      type: object\n      description: 'A Result of a Majority Judgment Poll.  Holds a leaderboard of the proposals.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        poll:\n          description: 'The Poll this Result describes.'\n          $ref: '#/components/schemas/Poll:jsonld-read'\n        algorithm:\n          description: 'The name of the algorithm used to derive this Result.'\n          type: string\n        leaderboard:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProposalResultRead'\n          description: |-\n            In order, each Proposals' Result.  In extreme,\n            low-participation polls, some Proposals may have the same rank ;\n            in that case, their order should be the order they were added to the poll.\n    User-create:\n      type: object\n      description: 'Users create, maintain and participate in Polls.'\n      properties:\n        email:\n          description: 'When provided, the email must be unique amongst Users.'\n          type: string\n          nullable: true\n        username:\n          description: 'The username must be unique amongst Users.'\n          type: string\n        password:\n          description: 'The plain password of the User.'\n          type: string\n    User-edit:\n      type: object\n      description: 'Users create, maintain and participate in Polls.'\n      properties:\n        email:\n          description: 'When provided, the email must be unique amongst Users.'\n          type: string\n          nullable: true\n        username:\n          description: 'The username must be unique amongst Users.'\n          type: string\n        password:\n          description: 'The plain password of the User.'\n          type: string\n    User-read:\n      type: object\n      description: 'Users create, maintain and participate in Polls.'\n      properties:\n        uuid:\n          type: string\n          format: uuid\n          nullable: true\n        email:\n          description: 'When provided, the email must be unique amongst Users.'\n          type: string\n          nullable: true\n        username:\n          description: 'The username must be unique amongst Users.'\n          type: string\n        polls:\n          description: 'The polls authored by this User.'\n          type: array\n          items:\n            $ref: '#/components/schemas/Poll-read'\n    'User:jsonld-create':\n      type: object\n      description: 'Users create, maintain and participate in Polls.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        email:\n          description: 'When provided, the email must be unique amongst Users.'\n          type: string\n          nullable: true\n        username:\n          description: 'The username must be unique amongst Users.'\n          type: string\n        password:\n          description: 'The plain password of the User.'\n          type: string\n    'User:jsonld-edit':\n      type: object\n      description: 'Users create, maintain and participate in Polls.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        email:\n          description: 'When provided, the email must be unique amongst Users.'\n          type: string\n          nullable: true\n        username:\n          description: 'The username must be unique amongst Users.'\n          type: string\n        password:\n          description: 'The plain password of the User.'\n          type: string\n    'User:jsonld-read':\n      type: object\n      description: 'Users create, maintain and participate in Polls.'\n      properties:\n        '@context':\n          readOnly: true\n          type: string\n        '@id':\n          readOnly: true\n          type: string\n        '@type':\n          readOnly: true\n          type: string\n        uuid:\n          type: string\n          format: uuid\n          nullable: true\n        email:\n          description: 'When provided, the email must be unique amongst Users.'\n          type: string\n          nullable: true\n        username:\n          description: 'The username must be unique amongst Users.'\n          type: string\n        polls:\n          description: 'The polls authored by this User.'\n          type: array\n          items:\n            $ref: '#/components/schemas/Poll:jsonld-read'\n    Token:\n      type: object\n      description: 'An authentication token ([JWT](https://jwt.io/)) for the `Authorization: Bearer` header.'\n      properties:\n        token:\n          type: string\n          readOnly: true\n    Credentials:\n      type: object\n      description: 'User credentials to submit to the login endpoint in order to get a perishable authentication token (Json Web Token).'\n      properties:\n        usernameOrEmail:\n          type: string\n          example: michel\n          description: 'The email or username you chose during registration.'\n        password:\n          type: string\n          example: ~5Up3Â®$3cR3741337\n          description: 'The password or passphrase you chose during registration.'\n  securitySchemes:\n    apiKey:\n      type: apiKey\n      in: header\n      description: 'Value for the Authorization header'\n      name: Authorization\nservers:\n  -\n    url: 'https://oas.mieuxvoter.fr'\n    description: 'Demo server of the MieuxVoter association'\n\n"
		}
	},
	"Error": "json: cannot unmarshal array into Go struct field Operation.paths.get.responses of type ogen.Response"
}