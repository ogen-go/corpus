{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/JanssenProject/jans"
		},
		"file": {
			"name": "jans-config-api-swagger.yaml",
			"size": 0,
			"path": "jans-config-api/docs/jans-config-api-swagger.yaml",
			"byteSize": 235670,
			"content": "openapi: 3.0.1\ninfo:\n  title: jans-config-api\n  description: jans-config-api - Authorization services\n  contact:\n    email: xxx@gluu.org\n  license:\n    name: License\n    url: 'https://github.com/JanssenProject/blob/master/LICENSE'\n  version: '1.0.0'\nservers:\n  - url: 'https://jans.io/'\ntags:\n  - name: developers\n    description: jans-config-api enables access to the features available via the existing Jans Authorization Server API.\n  - name: Attribute\n  - name: Default Authentication Method\n  - name: Cache Configuration\n  - name: Cache Configuration – Memcached\n  - name: Cache Configuration – Redis\n  - name: Cache Configuration – in-Memory\n  - name: Cache Configuration – Native-Persistence\n  - name: Configuration – Properties\n  - name: Configuration – Fido2\n  - name: Configuration – SMTP\n  - name: Configuration – Logging\n  - name: Configuration – JWK - JSON Web Key (JWK)\n  - name: Custom Scripts\n  - name: Database - LDAP configuration\n  - name: Database - Couchbase configuration\n  - name: OAuth - OpenID Connect - Clients\n  - name: OAuth - UMA Resources\n  - name: OAuth - Scopes\n  - name: Statistics - User\n  - name: Health - Check\n  - name: Server Stats\n  - name: SCIM - User Management\n  - name: SCIM - Config Management\n  - name: Organization Configuration\n  - name: Auth Server Health - Check\n  - name: Admin UI - Role\n  - name: Admin UI - Permission\n  - name: Admin UI - Role-Permissions Mapping\n  - name: Admin UI - License\npaths:\n  /jans-config-api/api/v1/jans-auth-server/config:\n    get:\n      summary: Gets all Jans authorization server configuration properties.\n      description: Gets all Jans authorization server configuration properties.\n      operationId: get-properties\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/properties.readonly]\n      tags:\n        - Configuration – Properties\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: AppConfiguration\n                description: Jans Authorization Server config properties.\n                $ref: '#/components/schemas/AppConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    patch:\n      summary: Partially modifies Jans authorization server Application configuration properties.\n      description: Partially modifies Jans authorization server AppConfiguration properties.\n      operationId: patch-properties\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/properties.write]\n      tags:\n        - Configuration – Properties\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: loggingLevel, value: DEBUG } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: AppConfiguration\n                description: Jans authorization server config properties.\n                $ref: '#/components/schemas/AppConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /jans-config-api/api/v1/jans-auth-server/config/persistence:\n    get:\n      summary: Returns persistence type configured for Jans authorization server.\n      description: Returns persistence type configured for Jans authorization server.\n      operationId: get-properties-persistence\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/properties.readonly]\n      tags:\n        - Configuration – Properties\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: PersistenceConfiguration\n                description: Jans Authorization Persistence Configuration object.\n                $ref: '#/components/schemas/PersistenceConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /jans-config-api/api/v1/fido2/config:\n    get:\n      summary: Gets Jans Authorization Server Fido2 configuration properties.\n      description: Gets Jans Authorization Server Fido2 configuration properties.\n      operationId: get-properties-fido2\n      tags:\n        - Configuration – Fido2\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JansFido2DynConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/fido2.readonly]\n    put:\n      summary: Updates Fido2 configuration properties.\n      description: Updates Fido2 configuration properties.\n      operationId: put-properties-fido2\n      tags:\n        - Configuration – Fido2\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JansFido2DynConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JansFido2DynConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/fido2.write]\n    parameters: []\n  /jans-config-api/api/v1/attributes:\n    get:\n      summary: Gets a list of Gluu attributes.\n      description: 'Gets all attributes. Optionally max-size of the result, attribute status and pattern can be provided.'\n      operationId: get-attributes\n      tags:\n        - Attribute\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Gluu Attributes\n                description: List of all attribute.\n                type: array\n                items:\n                  $ref: '#/components/schemas/GluuAttribute'\n        '401':\n          description: Unauthorized\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/attributes.readonly]\n      parameters:\n        - schema:\n            type: integer\n            default: 50\n          in: query\n          name: limit\n          description: Search size - max size of the results to return.\n        - schema:\n            type: string\n          in: query\n          name: pattern\n          description: Search pattern.\n        - schema:\n            type: string\n            default: all\n          in: query\n          name: status\n          description: Status of the attribute\n    post:\n      summary: Adds a new attribute.\n      description: Adds a new attribute.\n      operationId: post-attributes\n      tags:\n        - Attribute\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GluuAttribute'\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GluuAttribute'\n        '401':\n          description: Unauthorized\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/attributes.write]\n    put:\n      summary: Updates an existing attribute.\n      description: Updates an existing attribute.\n      operationId: put-attributes\n      tags:\n        - Attribute\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GluuAttribute'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GluuAttribute'\n        '401':\n          description: Unauthorized\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/attributes.write]\n    parameters: []\n  '/jans-config-api/api/v1/attributes/{inum}':\n    parameters:\n      - name: inum\n        in: path\n        required: true\n        description: Attribute ID.\n        schema:\n          type: string\n    get:\n      summary: Gets an attribute based on inum.\n      description: Gets an attribute based on inum.\n      operationId: get-attributes-by-inum\n      tags:\n        - Attribute\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GluuAttribute'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/attributes.readonly]\n    delete:\n      summary: Deletes an attribute based on inum.\n      description: Deletes an attribute based on inum.\n      operationId: delete-attributes-by-inum\n      tags:\n        - Attribute\n      responses:\n        '204':\n          description: No Content\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/attributes.delete]\n    patch:\n      summary: Partially modify a GluuAttribute.\n      description: Partially modify a GluuAttribute.\n      operationId: patch-attributes-by-inum\n      security:\n        - oauth2: [https://jans.io/oauth/config/attributes.write]\n      tags:\n        - Attribute\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: displayName, value: \\\"CustomAttribute\\\" } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GluuAttribute'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /jans-config-api/api/v1/acrs:\n    get:\n      summary: Gets default authentication method.\n      description: Gets default authentication method.\n      operationId: get-acrs\n      tags:\n        - Default Authentication Method\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticationMethod'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/acrs.readonly]\n    put:\n      summary: Updates default authentication method.\n      description: Updates default authentication method.\n      operationId: put-acrs\n      tags:\n        - Default Authentication Method\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationMethod'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticationMethod'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/acrs.write]\n    parameters: []\n  /jans-config-api/api/v1/config/database/ldap:\n    get:\n      summary: Gets list of existing LDAP configurations.\n      description: Gets list of existing LDAP configurations.\n      operationId: get-config-database-ldap\n      tags:\n        - Database - LDAP configuration\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: LdapConfiguration\n                description: List of configured LDAP configuration.\n                type: array\n                items:\n                  $ref: '#/components/schemas/LdapConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/ldap.readonly]\n    post:\n      summary: Adds a new LDAP configuration.\n      description: Adds a new LDAP configuration.\n      operationId: post-config-database-ldap\n      tags:\n        - Database - LDAP configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LdapConfiguration'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LdapConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/ldap.write]\n    put:\n      summary: Updates LDAP configuration.\n      description: Updates LDAP configuration.\n      operationId: put-config-database-ldap\n      tags:\n        - Database - LDAP configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LdapConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LdapConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/ldap.write]\n    parameters: []\n  /jans-config-api/api/v1/config/database/ldap/{name}:\n    parameters:\n      - name: configId\n        in: path\n        required: true\n        description: Name of LDAP configuration.\n        schema:\n          type: string\n    get:\n      summary: Gets an LDAP configuration by name.\n      description: Gets an LDAP configuration by name.\n      operationId: get-config-database-ldap-by-name\n      tags:\n        - Database - LDAP configuration\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LdapConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/ldap.readonly]\n    delete:\n      summary: Deletes an LDAP configuration.\n      description: Deletes an LDAP configuration.\n      operationId: delete-config-database-ldap-by-name\n      tags:\n        - Database - LDAP configuration\n      responses:\n        '204':\n          description: No Content\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/ldap.delete]\n    patch:\n      summary: Partially modify an LDAP configuration.\n      description: Partially modify an LDAP configuration.\n      operationId: patch-config-database-ldap-by-name\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/ldap.write]\n      tags:\n        - Database - LDAP configuration\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: maxConnections, value: 8 } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LdapConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /jans-config-api/api/v1/config/database/ldap/test:\n    post:\n      summary: Tests an LDAP configuration.\n      description: Tests an LDAP configuration.\n      operationId: post-config-database-ldap-test\n      tags:\n        - Database - LDAP configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LdapConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: boolean\n                description: LDAP connection status true if connection is successfully established.\n\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/ldap.readonly]\n  /jans-config-api/api/v1/config/database/sql:\n    get:\n      summary: Gets list of existing sql configurations.\n      description: Gets list of existing sql configurations.\n      operationId: get-config-database-sql\n      tags:\n        - Database - Sql configuration\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: SqlConfiguration\n                description: List of configured Sql configuration.\n                items:\n                  $ref: '#/components/schemas/SqlConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/sql.readonly]\n    post:\n      summary: Adds a new Sql configuration.\n      description: Adds a new Sql configuration.\n      operationId: post-config-database-sql\n      tags:\n        - Database - Sql configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SqlConfiguration'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SqlConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/sql.write]\n    put:\n      summary: Updates Sql configuration.\n      description: Updates Sql configuration.\n      operationId: put-config-database-sql\n      tags:\n        - Database - Sql configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SqlConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SqlConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/sql.write]\n    parameters: []\n  /jans-config-api/api/v1/config/database/sql/{name}:\n    parameters:\n      - name: name\n        in: path\n        required: true\n        description: Name of Sql configuration.\n        schema:\n          type: string\n    get:\n      summary: Gets a Sql configurations by name.\n      description: Gets a Sql configurations by name.\n      operationId: get-config-database-sql-by-name\n      tags:\n        - Database - Sql configuration\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: SqlConfiguration\n                description: List of configured Sql configuration.\n                $ref: '#/components/schemas/SqlConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/sql.readonly]\n    patch:\n      summary: Partially modify an Sql configuration.\n      description: Partially modify an Sql configuration.\n      operationId: patch-config-database-sql-by-name\n      tags:\n        - Database - Sql configuration\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: maxConnections, value: 8 } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SqlConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/sql.write]\n    delete:\n      summary: Deletes a Sql configurations by name.\n      description: Deletes a Sql configurations by name.\n      operationId: delete-config-database-sql-by-name\n      tags:\n        - Database - Sql configuration\n      responses:\n        '204':\n          description: No Content\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/sql.delete]\n  /jans-config-api/api/v1/config/database/sql/test:\n    post:\n      summary: Tests a Sql configuration.\n      description: Tests a Sql configuration.\n      operationId: post-config-database-sql-test\n      tags:\n        - Database - Sql configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SqlConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: boolean\n                description: Sql connection status true if connection is successfully established.\n\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/sql.readonly]\n  /jans-config-api/api/v1/config/database/couchbase:\n    get:\n      summary: Gets list of existing Couchbase configurations.\n      description: Gets list of existing Couchbase configurations.\n      operationId: get-config-database-couchbase\n      tags:\n        - Database - Couchbase configuration\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: CouchbaseConfiguration\n                description: List of configured Couchbase configuration.\n                items:\n                  $ref: '#/components/schemas/CouchbaseConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/couchbase.readonly]\n    post:\n      summary: Adds a new Couchbase configuration.\n      description: Adds a new Couchbase configuration.\n      operationId: post-config-database-couchbase\n      tags:\n        - Database - Couchbase configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CouchbaseConfiguration'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CouchbaseConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/couchbase.write]\n    put:\n      summary: Updates Couchbase configuration.\n      description: Updates Couchbase configuration.\n      operationId: put-config-database-couchbase\n      tags:\n        - Database - Couchbase configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CouchbaseConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CouchbaseConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/couchbase.write]\n    parameters: []\n  /jans-config-api/api/v1/config/database/couchbase/{name}:\n    parameters:\n      - name: name\n        in: path\n        required: true\n        description: Name of Couchbase configuration.\n        schema:\n          type: string\n    get:\n      summary: Gets a Couchbase configurations by name.\n      description: Gets a Couchbase configurations by name.\n      operationId: get-config-database-couchbase-by-name\n      tags:\n        - Database - Couchbase configuration\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: CouchbaseConfiguration\n                description: List of configured Couchbase configuration.\n                $ref: '#/components/schemas/CouchbaseConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/couchbase.readonly]\n    patch:\n      summary: Partially modify an Couchbase configuration.\n      description: Partially modify an Couchbase configuration.\n      operationId: patch-config-database-couchbase-by-name\n      tags:\n        - Database - Couchbase configuration\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: maxConnections, value: 8 } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CouchbaseConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/couchbase.write]\n    delete:\n      summary: Deletes a Couchbase configurations by name.\n      description: Deletes a Couchbase configurations by name.\n      operationId: delete-config-database-couchbase-by-name\n      tags:\n        - Database - Couchbase configuration\n      responses:\n        '204':\n          description: No Content\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/couchbase.delete]\n  /jans-config-api/api/v1/config/database/couchbase/test:\n    post:\n      summary: Tests a Couchbase configuration.\n      description: Tests a Couchbase configuration.\n      operationId: post-config-database-couchbase-test\n      tags:\n        - Database - Couchbase configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CouchbaseConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: boolean\n                description: Couchbase connection status true if connection is successfully established.\n\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/database/couchbase.readonly]\n  /jans-config-api/api/v1/config/scripts:\n    get:\n      summary: Gets a list of custom scripts.\n      description: Gets a list of custom scripts.\n      operationId: get-config-scripts\n      tags:\n        - Custom Scripts\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/CustomScript'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/scripts.readonly]\n    post:\n      summary: Adds a new custom script.\n      description: Adds a new custom script.\n      operationId: post-config-scripts\n      tags:\n        - Custom Scripts\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomScript'\n      responses:\n        '201':\n          description: CREATED\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomScript'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/scripts.write]\n    put:\n      summary: Updates a custom script.\n      description: Updates a custom script.\n      operationId: put-config-scripts\n      x-cli-getdata: get-config-scripts-by-inum\n      tags:\n        - Custom Scripts\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomScript'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomScript'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/scripts.write]\n  /jans-config-api/api/v1/config/scripts/type/{type}:\n    parameters:\n      - schema:\n          type: string\n          enum:\n            - '- person_authentication'\n            - '- introspection'\n            - '- resource_owner_password_credentials'\n            - '- application_session'\n            - '- cache_refresh'\n            - '- update_user'\n            - '- user_registration'\n            - '- client_registration'\n            - '- id_generator'\n            - '- uma_rpt_policy'\n            - '- uma_rpt_claims'\n            - '- uma_claims_gathering'\n            - '- consent_gathering'\n            - '- dynamic_scope'\n            - '- spontaneous_scope'\n            - '- end_session'\n            - '- post_authn'\n            - '- scim'\n            - '- ciba_end_user_notification'\n            - '- persistence_extension'\n            - '- idp'\n        name: type\n        in: path\n        description: Script type.\n        required: true\n      - schema:\n          type: string\n        in: query\n        name: pattern\n        description: Search pattern.\n      - schema:\n          type: integer\n          default: 50\n        in: query\n        name: limit\n        description: Search size - max size of the results to return.\n    get:\n      summary: Gets list of scripts by type.\n      description: Gets list of scripts by type.\n      operationId: get-config-scripts-by-type\n      x-cli-ignore: true\n      tags:\n        - Custom Scripts\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/CustomScript'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/scripts.readonly]\n  /jans-config-api/api/v1/config/scripts/inum/{inum}:\n    parameters:\n      - schema:\n          type: string\n        name: inum\n        in: path\n        required: true\n        description: Script identifier.\n    get:\n      summary: Gets a script by Inum.\n      description: Gets a script by Inum.\n      operationId: get-config-scripts-by-inum\n      x-cli-ignore: true\n      tags:\n        - Custom Scripts\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomScript'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/scripts.readonly]\n  /jans-config-api/api/v1/config/scripts/{inum}:\n    parameters:\n      - schema:\n          type: string\n        name: inum\n        in: path\n        required: true\n        description: Script identifier.\n    delete:\n      summary: Deletes a custom script.\n      description: Deletes a custom script.\n      operationId: delete-config-scripts-by-inum\n      tags:\n        - Custom Scripts\n      responses:\n        '204':\n          description: No Content\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/scripts.delete]\n  /jans-config-api/api/v1/config/cache:\n    get:\n      summary: Returns cache configuration.\n      description: Returns cache configuration.\n      operationId: get-config-cache\n      tags:\n        - Cache Configuration\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CacheConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.readonly]\n    patch:\n      summary: Partially modifies cache configuration.\n      description: Partially modifies cache configuration.\n      operationId: patch-config-cache\n      tags:\n        - Cache Configuration\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: memcachedConfiguration, value: response.memcachedConfiguration } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CacheConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.write]\n  /jans-config-api/api/v1/config/cache/memcached:\n    get:\n      summary: Returns Memcached cache configuration.\n      description: Returns Memcached cache configuration.\n      operationId: get-config-cache-memcached\n      tags:\n        - Cache Configuration – Memcached\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MemcachedConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.readonly]\n    put:\n      summary: Updates Memcached cache configuration.\n      description: Updates Memcached cache configuration.\n      operationId: put-config-cache-memcached\n      tags:\n        - Cache Configuration – Memcached\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MemcachedConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MemcachedConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.write]\n    parameters: []\n    patch:\n      summary: Partially modifies Memcached cache configuration.\n      description: Partially modifies Memcached cache configuration.\n      operationId: patch-config-cache-memcached\n      tags:\n        - Cache Configuration – Memcached\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: memcachedConfiguration, value: response.memcachedConfiguration } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MemcachedConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.write]\n  /jans-config-api/api/v1/config/cache/redis:\n    get:\n      summary: Returns Redis cache configuration.\n      description: Returns Redis cache configuration.\n      operationId: get-config-cache-redis\n      tags:\n        - Cache Configuration – Redis\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RedisConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.readonly]\n    put:\n      summary: Updates Redis cache configuration.\n      description: Updates Redis cache configuration.\n      operationId: put-config-cache-redis\n      tags:\n        - Cache Configuration – Redis\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RedisConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RedisConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.write]\n    parameters: []\n    patch:\n      summary: Partially modifies Redis cache configuration.\n      description: Partially modifies Redis cache configuration.\n      operationId: patch-config-cache-redis\n      tags:\n        - Cache Configuration – Redis\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: redisConfiguration/defaultPutExpiration, value: 80 } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RedisConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.write]\n  /jans-config-api/api/v1/config/cache/in-memory:\n    get:\n      summary: Returns in-Memory cache configuration.\n      description: Returns in-Memory cache configuration.\n      operationId: get-config-cache-in-memory\n      tags:\n        - Cache Configuration – in-Memory\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InMemoryConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.readonly]\n    put:\n      summary: Updates in-Memory cache configuration.\n      description: Updates in-Memory cache configuration.\n      operationId: put-config-cache-in-memory\n      tags:\n        - Cache Configuration – in-Memory\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/InMemoryConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InMemoryConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.write]\n    parameters: []\n    patch:\n      summary: Partially modifies In-Memory cache configuration.\n      description: Partially modifies In-Memory cache configuration.\n      operationId: patch-config-cache-in-memory\n      tags:\n        - Cache Configuration – in-Memory\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: inMemoryConfiguration/defaultPutExpiration, value: 80 } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InMemoryConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.write]\n  /jans-config-api/api/v1/config/cache/native-persistence:\n    get:\n      summary: Returns native persistence cache configuration.\n      description: Returns native persistence cache configuration.\n      operationId: get-config-cache-native-persistence\n      tags:\n        - Cache Configuration – Native-Persistence\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NativePersistenceConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.readonly]\n    put:\n      summary: Updates native persistence cache configuration.\n      description: Updates native persistence cache configuration.\n      operationId: put-config-cache-native-persistence\n      tags:\n        - Cache Configuration – Native-Persistence\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NativePersistenceConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NativePersistenceConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.write]\n    parameters: []\n    patch:\n      summary: Partially modifies Native Persistence cache configuration.\n      description: Partially modifies Native Persistence cache configuration.\n      operationId: patch-config-cache-native-persistence\n      tags:\n        - Cache Configuration – Native-Persistence\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: nativePersistenceConfiguration/defaultPutExpiration, value: 80 } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NativePersistenceConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/cache.write]\n  /jans-config-api/api/v1/config/smtp:\n    get:\n      summary: Returns SMTP server configuration.\n      description: Returns SMTP server configuration.\n      operationId: get-config-smtp\n      tags:\n        - Configuration – SMTP\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SmtpConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/smtp.readonly]\n    post:\n      summary: Adds SMTP server configuration.\n      description: Adds SMTP server configuration.\n      operationId: post-config-smtp\n      tags:\n        - Configuration – SMTP\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SmtpConfiguration'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SmtpConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/smtp.write]\n    put:\n      summary: Updates SMTP server configuration.\n      description: Updates SMTP server configuration.\n      operationId: put-config-smtp\n      tags:\n        - Configuration – SMTP\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SmtpConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SmtpConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/smtp.write]\n    delete:\n      summary: Deletes SMTP server configuration.\n      description: Deletes SMTP server configuration.\n      operationId: delete-config-smtp\n      tags:\n        - Configuration – SMTP\n      responses:\n        '204':\n          description: No Content\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/smtp.delete]\n    parameters: []\n  /jans-config-api/api/v1/config/smtp/test:\n    post:\n      summary: Test SMTP server configuration.\n      description: Test SMTP server configuration.\n      operationId: test-config-smtp\n      tags:\n        - Configuration – SMTP\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: boolean\n                description: SMTP test status true if email sent is successful.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/smtp.readonly]\n  /jans-config-api/api/v1/logging:\n    get:\n      tags:\n        - Configuration – Logging\n      summary: Returns Jans Authorization Server logging settings.\n      description: Returns Jans Authorization Server logging settings.\n      operationId: get-config-logging\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoggingConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/logging.readonly]\n    put:\n      tags:\n        - Configuration – Logging\n      summary: Updates Jans Authorization Server logging settings.\n      description: Updates Jans Authorization Server logging settings.\n      operationId: put-config-logging\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoggingConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoggingConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/logging.write]\n    parameters: []\n  /jans-config-api/api/v1/config/jwks:\n    get:\n      tags:\n        - Configuration – JWK - JSON Web Key (JWK)\n      summary: Gets list of JSON Web Key (JWK) used by server.\n      description: 'Gets list of JSON Web Key (JWK) used by server. JWK is a JSON data structure that represents a set of public keys as a JSON object [RFC4627].'\n      operationId: get-config-jwks\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebKeysConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/jwks.readonly]\n    put:\n      tags:\n        - Configuration – JWK - JSON Web Key (JWK)\n      summary: Puts/replaces JWKS\n      description: Puts/replaces JSON Web Keys (JWKS).\n      operationId: put-config-jwks\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WebKeysConfiguration'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebKeysConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/jwks.write]\n    patch:\n      tags:\n        - Configuration – JWK - JSON Web Key (JWK)\n      summary: Patch JWKS\n      description: Patch JSON Web Keys (JWKS).\n      operationId: patch-config-jwks\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n              example: '[{\"op\": \"add\",\"path\": \"/keys/1\", \"value\": { \"kty\": \"RSA\", \"e\": \"AQAB\",\"use\": \"sig\",\"crv\": \"\",\"kid\": \"dd570bfb-276a-44aa-a97d-667b57587108_sig_rs256\",\"x5c\": [\"MIIDBDCC...\"],\"exp\": 1599751946863,\"alg\": \"RS256\",\"n\": \"zj1NE..\"}}]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebKeysConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/jwks.write]\n  /jans-config-api/api/v1/config/jwks/key:\n    post:\n      tags:\n        - Configuration – JWK - JSON Web Key (JWK)\n      summary: Adds a new key to JSON Web Keys (JWKS)\n      description: Adds a new key to JSON Web Keys (JWKS).\n      operationId: post-config-jwks-key\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JsonWebKey'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JsonWebKey'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/jwks.write]\n  /jans-config-api/api/v1/config/jwks/{kid}:\n    parameters:\n      - schema:\n          type: string\n        name: kid\n        in: path\n        description: The unique identifier for the key.\n        required: true\n    get:\n      tags:\n        - Configuration – JWK - JSON Web Key (JWK)\n      summary: Get a JSON Web Key based on kid\n      description: Get a JSON Web Key based on kid\n      operationId: put-config-jwk-kid\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JsonWebKey'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/jwks.readonly]\n    patch:\n      tags:\n        - Configuration – JWK - JSON Web Key (JWK)\n      summary: Patch a specific JSON Web Key based on kid\n      description: Patch a specific JSON Web Key based on kid\n      operationId: patch-config-jwk-kid\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n              example: '[{\"op\": \"add\",\"path\": \"/kty\", \"value\": \"RSA\"}]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JsonWebKey'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      security:\n        - oauth2: [https://jans.io/oauth/config/jwks.write]\n    delete:\n      tags:\n        - Configuration – JWK - JSON Web Key (JWK)\n      summary: Delete a JSON Web Key based on kid\n      description: Delete a JSON Web Key based on kid\n      operationId: delete-config-jwk-kid\n      responses:\n        '204':\n          description: No Content\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/jwks.write]\n  /jans-config-api/api/v1/openid/clients:\n    get:\n      tags:\n        - OAuth - OpenID Connect - Clients\n      summary: Gets list of OpenID Connect clients\n      description: Gets list of OpenID Connect clients\n      operationId: get-oauth-openid-clients\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: OpenID Clients.\n                description: List of OpenID clients.\n                items:\n                  $ref: '#/components/schemas/Client'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/openid/clients.readonly]\n      parameters:\n        - schema:\n            type: integer\n            default: 50\n          in: query\n          name: limit\n          description: Search size - max size of the results to return.\n        - schema:\n            type: string\n          in: query\n          name: pattern\n          description: Search pattern.\n        - schema:\n            type: integer\n            default: 1\n          in: query\n          name: startIndex\n          description: The 1-based index of the first query result.\n        - schema:\n            type: string\n            default: 1\n          in: query\n          name: sortBy\n          description: Attribute whose value will be used to order the returned response.\n        - schema:\n            type: string\n            default: 1\n            enum:\n              - ascending\n              - descending\n          in: query\n          name: sortOrder\n          description: Order in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\".\n    post:\n      tags:\n        - OAuth - OpenID Connect - Clients\n      summary: Create new OpenId connect client\n      description: Create new OpenId connect client\n      operationId: post-oauth-openid-clients\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: OpenID Connect Client Details.\n              description: OpenID Connect Client Details.\n              $ref: '#/components/schemas/Client'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                title: OpenID Connect Client Details.\n                $ref: '#/components/schemas/Client'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/openid/clients.write]\n    put:\n      tags:\n        - OAuth - OpenID Connect - Clients\n      summary: Update OpenId Connect client.\n      description: Update OpenId Connect client.\n      operationId: put-oauth-openid-clients\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: OpenID Connect Client Details.\n              $ref: '#/components/schemas/Client'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: OpenID Connect Client Details.\n                $ref: '#/components/schemas/Client'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/openid/clients.write]\n  /jans-config-api/api/v1/openid/clients/{inum}:\n    parameters:\n      - schema:\n          type: string\n        name: inum\n        in: path\n        description: Client identifier\n        required: true\n    get:\n      tags:\n        - OAuth - OpenID Connect - Clients\n      summary: Get OpenId Connect Client by Inum\n      description: Get OpenId Connect Client by Inum.\n      operationId: get-oauth-openid-clients-by-inum\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/openid/clients.readonly]\n    delete:\n      tags:\n        - OAuth - OpenID Connect - Clients\n      summary: Delete OpenId Connect client.\n      description: Delete OpenId Connect client.\n      operationId: delete-oauth-openid-clients-by-inum\n      responses:\n        '204':\n          description: No Content\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/openid/clients.delete]\n    patch:\n      tags:\n        - OAuth - OpenID Connect - Clients\n      summary: Update modified properties of OpenId Connect client by Inum.\n      description: Update modified properties of OpenId Connect client by Inum.\n      operationId: patch-oauth-openid-clients-by-inum\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: backchannel_authentication_request_signing_alg, value: false } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Client Details.\n                $ref: '#/components/schemas/Client'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/openid/clients.write]\n  /jans-config-api/api/v1/uma/resources:\n    get:\n      tags:\n        - OAuth - UMA Resources\n      summary: Gets list of UMA resources.\n      description: Gets list of UMA resources.\n      operationId: get-oauth-uma-resources\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: UMA Resource list.\n                description: List of UMA Resource.\n                items:\n                  $ref: '#/components/schemas/UmaResource'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/uma/resources.readonly]\n      parameters:\n        - schema:\n            type: integer\n            default: 50\n          in: query\n          name: limit\n          description: Search size - max size of the results to return.\n        - schema:\n            type: string\n          in: query\n          name: pattern\n          description: Search pattern.\n    post:\n      tags:\n        - OAuth - UMA Resources\n      summary: Creates an UMA resource.\n      description: Creates an UMA resource.\n      operationId: post-oauth-uma-resources\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UmaResource'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                title: UMAResource\n                $ref: '#/components/schemas/UmaResource'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/uma/resources.write]\n    put:\n      tags:\n        - OAuth - UMA Resources\n      summary: Updates an UMA resource.\n      description: Updates an UMA resource.\n      operationId: put-oauth-uma-resources\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UmaResource'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UmaResource'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/uma/resources.write]\n  /jans-config-api/api/v1/uma/resources/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Resource description ID.\n        schema:\n          type: string\n    get:\n      tags:\n        - OAuth - UMA Resources\n      summary: Gets an UMA resource by ID.\n      description: Gets an UMA resource by ID.\n      operationId: get-oauth-uma-resources-by-id\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: UMAResource\n                $ref: '#/components/schemas/UmaResource'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/uma/resources.readonly]\n    delete:\n      tags:\n        - OAuth - UMA Resources\n      summary: Deletes an UMA resource.\n      description: Deletes an UMA resource.\n      operationId: delete-oauth-uma-resources-by-id\n      responses:\n        '204':\n          description: No Content\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/uma/resources.delete]\n    patch:\n      tags:\n        - OAuth - UMA Resources\n      summary: Partially updates an UMA resource by Inum.\n      description: Partially updates an UMA resource by Inum.\n      operationId: patch-oauth-uma-resources-by-id\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: clients, value: [\\\"client_1\\\",\\\"client_2\\\"] },{op:add, path: clients/2, value: \\\"client_3\\\" } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: UMAResource\n                $ref: '#/components/schemas/UmaResource'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/uma/resources.write]\n  /jans-config-api/api/v1/scopes:\n    get:\n      tags:\n        - OAuth - Scopes\n      summary: Gets list of Scopes.\n      description: Gets list of Scopes. Optionally type to filter the scope, max-size of the result and pattern can be provided.\n      operationId: get-oauth-scopes\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Scope description list.\n                description: List of scope description.\n                items:\n                  $ref: '#/components/schemas/Scope'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/scopes.readonly]\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: type\n          description: Scope type.\n        - schema:\n            type: integer\n            default: 50\n          in: query\n          name: limit\n          description: Search size - max size of the results to return.\n        - schema:\n            type: string\n          in: query\n          name: pattern\n          description: Search pattern.\n    post:\n      tags:\n        - OAuth - Scopes\n      summary: Create Scope.\n      description: Create Scope.\n      operationId: post-oauth-scopes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Scope'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Scope'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/scopes.write]\n    put:\n      tags:\n        - OAuth - Scopes\n      summary: Updates existing Scope.\n      description: Updates existing Scope.\n      operationId: put-oauth-scopes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Scope'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Scope'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/scopes.write]\n    parameters: []\n  /jans-config-api/api/v1/scopes/{inum}:\n    parameters:\n      - schema:\n          type: string\n        name: inum\n        in: path\n        required: true\n    get:\n      tags:\n        - OAuth - Scopes\n      summary: Get Scope by Inum\n      description: Get Scope by Inum\n      operationId: get-oauth-scopes-by-inum\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Scope'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: ['https://jans.io/oauth/config/scopes.readonly']\n    delete:\n      tags:\n        - OAuth - Scopes\n      summary: Delete Scope.\n      description: Delete Scope.\n      operationId: delete-oauth-scopes-by-inum\n      responses:\n        '204':\n          description: No Content\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/scopes.delete]\n    patch:\n      tags:\n        - OAuth - Scopes\n      summary: Update modified attributes of existing Scope by Inum.\n      description: Update modified attributes of existing Scope by Inum.\n      operationId: patch-oauth-scopes-by-id\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: clients, value: [\\\"client_1\\\",\\\"client_2\\\"] },{op:add, path: clients/2, value: \\\"client_3\\\" } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Scope'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal Server Error\n      security:\n        - oauth2: [https://jans.io/oauth/config/scopes.write]\n  /jans-config-api/api/v1/stat:\n    get:\n      summary: Provides server with basic statistic.\n      description: Provides server with basic statistic.\n      operationId: get-stat\n      security:\n        - oauth2: [https://jans.io/oauth/config/stats.readonly jans_stat]\n      tags:\n        - Statistics - User\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: FlatStatResponse\n                description: Jans Authorization Server statistic data.\n                type: array\n                items:\n                  $ref: '#/components/schemas/StatResponseItem'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: month\n          description: Month for which the stat report is to be fetched.\n          example:  202012 (2020 Dec) 202101 (2021 Jan))\n          required: true\n        - schema:\n            type: string\n            enum:\n              - json\n              - openmetrics\n            default: json\n          in: query\n          name: format\n          description: Report format\n\n  /jans-config-api/api/v1/health:\n    get:\n      summary: Returns application health status.\n      description: Returns application health status.\n      operationId: get-config-health\n      tags:\n        - Health - Check\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthStatus'\n        '500':\n          description: Internal Server Error\n  /jans-config-api/api/v1/health/live:\n    get:\n      summary: Returns application liveness status.\n      description: Returns application liveness status.\n      operationId: get-config-health-live\n      tags:\n        - Health - Check\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthStatusItem'\n        '500':\n          description: Internal Server Error\n  /jans-config-api/api/v1/health/ready:\n    get:\n      summary: Returns application readiness status.\n      description: Returns application readiness status.\n      operationId: get-config-health-ready\n      tags:\n        - Health - Check\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthStatusItem'\n        '500':\n          description: Internal Server Error\n  \n  /jans-config-api/api/v1/health/server-stat:\n    get:\n      summary: Returns application server status.\n      description: Returns application server status.\n      operationId: get-server-stat\n      tags:\n        - Server Stats\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatsData'\n        '500':\n          description: Internal Server Error\n\n  /jans-config-api/scim/user:\n    get:\n      tags:\n        - SCIM - User Management\n      summary: Gets list of SCIM users\n      description: Gets list of SCIM users\n      operationId: get-scim-users\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/UserListResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserListResponse'\n        '400':\n          description: Parameter count exceeds the maximum allowed value or the filter\n            supplied was unparsable\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: There was an unexpected failure executing the operation\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      security:\n        - oauth2: [https://jans.io/oauth/config/scim/users.read https://jans.io/scim/users.read]\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: filter\n          description: Search filter pattern. For more details refer section 3.4.2.2 of RFC 7644\n          example: userName co \\\"mi\\\", userName eq \\\"admin\\\", displayName co \\\"1111\\\" or displayName co \\\"Group\\\"\n        - schema:\n            type: integer\n            default: 1\n          in: query\n          name: startIndex\n          description: The 1-based index of the first query result.\n        - schema:\n            type: integer\n          in: query\n          name: count\n          description: Search size - max size of the results to return.\n        - schema:\n            type: string\n          in: query\n          name: sortBy\n          description: The attribute whose value will be used to order the returned responses\n        - schema:\n            type: string\n            enum:\n              - '- ascending'\n              - '- descending'\n          in: query\n          name: sortOrder\n          description: Order in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\"\n        - schema:\n            type: string\n          in: query\n          name: attributes\n          description: A comma-separated list of attribute names to return in the response\n        - schema:\n            type: string\n          in: query\n          name: excludedAttributes\n          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list).\n\n    post:\n      tags:\n        - SCIM - User Management\n      operationId: post-create-user\n      summary: Create a SCIM user.\n      description: Allows creating a User resource via POST (see section 3.3 of RFC 7644)\n      security:\n        - oauth2: [https://jans.io/oauth/config/scim/users.write https://jans.io/scim/users.write]\n      parameters:\n        - name: attributes\n          in: query\n          description: A comma-separated list of attribute names to return in the response\n          schema:\n            type: string\n        - name: excludedAttributes\n          in: query\n          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)\n          schema:\n            type: string\n      requestBody:\n        description: Payload that represents the Group to create\n        content:\n          application/scim+json:\n            schema:\n              $ref: '#/components/schemas/UserResource'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserResource'\n        required: true\n      responses:\n        '201':\n          description: Successful operation\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/UserResource'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResource'\n        '400':\n          description: An invalid value was passed in the payload\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '409':\n          description: There is a conflict with an already existing user. Uniqueness\n            is assumed over userName\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: There was an unexpected failure executing the operation\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /jans-config-api/scim/user/{id}:\n    get:\n      tags:\n        - SCIM - User Management\n      operationId: get-user-by-id\n      summary: Retrieves SCIM user by Id.\n      description: Retrieves a User resource by Id (see section 3.4.1 of RFC 7644)\n      security:\n        - oauth2: [https://jans.io/oauth/config/scim/users.read https://jans.io/scim/users.read]\n      parameters:\n        - name: attributes\n          in: query\n          description: A comma-separated list of attribute names to return in the response\n          schema:\n            type: string\n        - name: excludedAttributes\n          in: query\n          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/UserResource'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResource'\n        404:\n          description: Id passed unknown\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: There was an unexpected failure executing the operation\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    put:\n      tags:\n        - SCIM - User Management\n      operationId: put-update-user-by-id\n      summary: Updates an SCIM user.\n      description: \"Updates a User resource (see section 3.5.1 of RFC 7644). Update\\\n        \\ works in a replacement fashion\u0026amp;#58; every\\nattribute value found in the\\\n        \\ payload sent will replace the one in the existing resource representation.\\\n        \\ Attributes \\nnot passed in the payload will be left intact.\\n\"\n      security:\n        - oauth2: [https://jans.io/oauth/config/scim/users.write https://jans.io/scim/users.write]\n      parameters:\n        - name: attributes\n          in: query\n          description: A comma-separated list of attribute names to return in the response\n          schema:\n            type: string\n        - name: excludedAttributes\n          in: query\n          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Payload with the data to replace in the existing user identified\n          by the id param\n        content:\n          application/scim+json:\n            schema:\n              $ref: '#/components/schemas/UserResource'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserResource'\n        required: true\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/UserResource'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResource'\n        400:\n          description: |\n            An invalid value was passed in the payload or there was an attempt to update an immutable attribute\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: Id passed unknown\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        409:\n          description: There is a conflict with an already existing group. Uniqueness\n            is assumed over displayName\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: There was an unexpected failure executing the operation\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      tags:\n        - SCIM - User Management\n      operationId: delete-user-by-id\n      summary: Deletes a SCIM user.\n      description: Deletes a user resource\n      security:\n        - oauth2: [https://jans.io/oauth/config/scim/users.write https://jans.io/scim/users.write]\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of the resource to delete\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successful operation. Empty response\n          content: {}\n        404:\n          description: Id passed unknown\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: There was an unexpected failure executing the operation\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    patch:\n      tags:\n        - SCIM - User Management\n      operationId: patch-user-by-id\n      summary: Patches SCIM User attributes.\n      description: \"Updates one or more attributes of a User resource using a sequence\\\n        \\ of additions, removals, and \\nreplacements operations. See section 3.5.2\\\n        \\ of RFC 7644\\n\"\n      security:\n        - oauth2: [https://jans.io/oauth/config/scim/users.write https://jans.io/scim/users.write]\n      parameters:\n        - name: attributes\n          in: query\n          description: A comma-separated list of attribute names to return in the response\n          schema:\n            type: string\n        - name: excludedAttributes\n          in: query\n          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Payload describing the patch operations to apply upon the resource\n          identified by param id\n        content:\n          application/scim+json:\n            schema:\n              $ref: '#/components/schemas/ScimPatchRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScimPatchRequest'\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/ScimPatchRequest'\n        required: true\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/UserResource'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResource'\n        400:\n          description: |\n            One or more operations supplied in the request are specified incorrectly, there were attempts to\n            modify immutable attributes, or the resulting resource cannot pass intrinsic validations\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: There was an unexpected failure executing the operation\n          content:\n            application/scim+json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /jans-config-api/scim/user/.search:\n    post:\n      tags:\n        - SCIM - User Management\n      summary: Search SCIM user.\n      description: Gets list of users\n      operationId: post-search-scim-users\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchRequest'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserListResponse'\n        '400':\n          description: Parameter count exceeds the maximum allowed value or the filter supplied was unparsable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: There was an unexpected failure executing the operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      security:\n        - oauth2: [https://jans.io/oauth/config/scim/users.read https://jans.io/scim/users.read]\n\n  /jans-config-api/scim/config:\n    get:\n      summary: Retrieves SCIM App configuration.\n      description: Retrieves SCIM configuration.\n      operationId: get-scim-config\n      security:\n        - oauth2: [https://jans.io/scim/config.readonly]\n      tags:\n        - SCIM - Config Management\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: ScimAppConfiguration\n                description:  SCIM App configuration.\n                $ref: '#/components/schemas/ScimAppConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    patch:\n      summary: Partially modifies SCIM App configuration.\n      description: Partially modifies SCIM App configuration.\n      operationId: patch-scim-config\n      security:\n        - oauth2: [https://jans.io/scim/config.write]\n      tags:\n        - SCIM - Config Management\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[ {op:replace, path: loggingLevel, value: DEBUG } ]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: ScimAppConfiguration\n                description: SCIM App configuration.\n                $ref: '#/components/schemas/ScimAppConfiguration'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  \n  /jans-config-api/api/v1/org:\n    get:\n      summary: Retrieves organization configuration.\n      description: Retrieves organization configuration.\n      operationId: get-organization-config\n      security:\n        - oauth2: [https://jans.io/oauth/config/organization.readonly]\n      tags:\n        - Organization Configuration\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Organization\n                description:  Organization configuration.\n                $ref: '#/components/schemas/Organization'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    patch:\n      summary: Partially modifies organization configuration.\n      description: Partially modifies organization configuration.\n      operationId: patch-organization-config\n      security:\n        - oauth2: [https://jans.io/oauth/config/organization.write]\n      tags:\n        - Organization Configuration\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PatchRequest'\n                description: String representing patch-document.\n                example: '[{\"op\": \"add\", \"path\": \"/jsFaviconPath\", \"value\": \"/opt/jans/jetty/jans-auth/custom/static/\"}]'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Organization\n                description: Organization configuration.\n                $ref: '#/components/schemas/Organization'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  \n  /jans-config-api/api/v1/jans-auth-server/health:\n    get:\n      summary: Returns auth server health status.\n      description: Returns auth server health status.\n      operationId: get-auth-server-health\n      tags:\n        - Auth Server Health - Check\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthHealthStatus'\n        '500':\n          description: Internal Server Error\n\n  /jans-config-api/admin-ui/user/roles:\n    get:\n      tags:\n        - Admin UI - Role\n      summary: Get all admin ui roles.\n      description: Get all admin ui roles.\n      operationId: get-adminui-roles\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/user/role.read]\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Get admin ui roles.\n                description: Get admin ui roles.\n                type: array\n                items:\n                  $ref: '#/components/schemas/AdminRole'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Admin UI - Role\n      summary: Add admin ui role.\n      description: Add admin ui role.\n      operationId: add-adminui-role\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/user/role.write]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - role\n              $ref: '#/components/schemas/AdminRole'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Add admin ui role.\n                description: Add admin ui role.\n                type: array\n                items:\n                  $ref: '#/components/schemas/AdminRole'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - Admin UI - Role\n      summary: Edit admin ui role.\n      description: Edit admin ui role.\n      operationId: edit-adminui-role\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/user/role.write]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdminRole'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Edit admin ui role.\n                description: Edit admin ui role.\n                type: array\n                items:\n                  $ref: '#/components/schemas/AdminRole'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - Admin UI - Role\n      summary: Delete admin ui role.\n      description: Delete admin ui role.\n      operationId: delete-adminui-role\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/user/role.write]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdminRole'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Delete admin ui role.\n                description: Delete admin ui role.\n                type: array\n                items:\n                  $ref: '#/components/schemas/AdminRole'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /jans-config-api/admin-ui/user/permissions:\n    get:\n      tags:\n        - Admin UI - Permission\n      summary: Get admin ui permissions.\n      description: Get admin ui permissions.\n      operationId: get-adminui-permissions\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/user/permission.read]\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Get admin ui permissions.\n                description: Get admin ui permissions.\n                type: array\n                items:\n                  $ref: '#/components/schemas/AdminPermission'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Admin UI - Permission\n      summary: Add admin ui permission.\n      description: Add admin ui permission.\n      operationId: add-adminui-permission\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/user/permission.write]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - permission\n              $ref: '#/components/schemas/AdminPermission'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Add admin ui permission.\n                description: Add admin ui permission.\n                type: array\n                items:\n                  $ref: '#/components/schemas/AdminPermission'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - Admin UI - Permission\n      summary: Edit admin ui permission.\n      description: Edit admin ui permission.\n      operationId: edit-adminui-permission\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/user/permission.write]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdminPermission'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Edit admin ui permission.\n                description: Edit admin ui permission.\n                type: array\n                items:\n                  $ref: '#/components/schemas/AdminPermission'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - Admin UI - Permission\n      summary: Delete admin ui permission.\n      description: Delete admin ui permission.\n      operationId: delete-adminui-permission\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/user/permission.write]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdminPermission'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Delete admin ui permission.\n                description: Delete admin ui permission.\n                type: array\n                items:\n                  $ref: '#/components/schemas/AdminPermission'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /jans-config-api/admin-ui/user/rolePermissionsMapping:\n    get:\n      tags:\n        - Admin UI - Role-Permissions Mapping\n      summary: Get admin ui role-permissions mapping.\n      description: Get admin ui role-permissions mapping.\n      operationId: get-adminui-role-permissions\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/user/rolePermissionMapping.readonly]\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Get admin ui role-permissions mapping.\n                description: Get admin ui role-permissions mapping.\n                type: array\n                items:\n                  $ref: '#/components/schemas/RolePermissionMapping'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Admin UI - Role-Permissions Mapping\n      summary: Add role-permissions mapping.\n      description: Add role-permissions mapping.\n      operationId: Add role-permissions mapping.\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/user/rolePermissionMapping.write]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RolePermissionMapping'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Add role-permissions mapping.\n                description: Add role-permissions mapping.\n                type: array\n                items:\n                  $ref: '#/components/schemas/RolePermissionMapping'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - Admin UI - Role-Permissions Mapping\n      summary: Map permissions to role.\n      description: Map permissions to role.\n      operationId: map-permissions-to-role\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/user/rolePermissionMapping.write]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RolePermissionMapping'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Map permissions to role.\n                description: Map permissions to role.\n                type: array\n                items:\n                  $ref: '#/components/schemas/RolePermissionMapping'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - Admin UI - Role-Permissions Mapping\n      summary: Remove role-permissions mapping.\n      description: Remove role-permissions mapping.\n      operationId: remove-role-permissions-permission\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/user/rolePermissionMapping.write]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RolePermissionMapping'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Remove role-permissions mapping.\n                description: Remove role-permissions mapping.\n                type: array\n                items:\n                  $ref: '#/components/schemas/RolePermissionMapping'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /jans-config-api/admin-ui/license/licenseDetails:\n    get:\n      tags:\n        - Admin UI - License\n      summary: Get admin ui license details.\n      description: Get admin ui license details.\n      operationId: get-adminui-license\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/license.readonly]\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Get admin ui license details.\n                description: Get admin ui license details.\n                $ref: '#/components/schemas/LicenseResponse'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - Admin UI - License\n      summary: Edit admin ui license details.\n      description: Edit admin ui license details.\n      operationId: edit-adminui-license\n      security:\n        - oauth2: [https://jans.io/oauth/jans-auth-server/config/adminui/license.write]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - role\n              $ref: '#/components/schemas/LicenseRequest'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Edit admin ui license details.\n                description: Edit admin ui license details.\n                $ref: '#/components/schemas/LicenseResponse'\n        '400':\n          $ref: '#/components/responses/NotAcceptable'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\ncomponents:\n  securitySchemes:\n    oauth2:\n      type: oauth2\n      description: Authorization\n      flows:\n        clientCredentials:\n          tokenUrl: 'https://{op-hostname}/.../token'\n          scopes:\n            https://jans.io/oauth/jans-auth-server/config/properties.readonly: View Auth Server properties related information\n            https://jans.io/oauth/jans-auth-server/config/properties.write: Manage Auth Server properties related information\n            https://jans.io/oauth/config/fido2.readonly: View FIDO2 related information\n            https://jans.io/oauth/config/fido2.write: Manage FIDO2 related information\n            https://jans.io/oauth/config/attributes.readonly: View attribute related information\n            https://jans.io/oauth/config/attributes.write: Manage attribute related information\n            https://jans.io/oauth/config/attributes.delete: Delete attribute related information\n            https://jans.io/oauth/config/acrs.readonly: View ACRS related information\n            https://jans.io/oauth/config/acrs.write: Manage ACRS related information\n            https://jans.io/oauth/config/database/ldap.readonly: View LDAP database related information\n            https://jans.io/oauth/config/database/ldap.write: Manage LDAP database related information\n            https://jans.io/oauth/config/database/ldap.delete: Delete LDAP database related information\n            https://jans.io/oauth/config/database/couchbase.readonly: View Couchbase database information\n            https://jans.io/oauth/config/database/couchbase.write: Manage Couchbase database related information\n            https://jans.io/oauth/config/database/couchbase.delete: Delete Couchbase database related information\n            https://jans.io/oauth/config/scripts.readonly: View cache scripts information\n            https://jans.io/oauth/config/scripts.write: Manage scripts related information\n            https://jans.io/oauth/config/scripts.delete: Delete scripts related information\n            https://jans.io/oauth/config/cache.readonly: View cache related information\n            https://jans.io/oauth/config/cache.write: Manage cache related information\n            https://jans.io/oauth/config/smtp.readonly: View SMTP related information\n            https://jans.io/oauth/config/smtp.write: Manage SMTP related information\n            https://jans.io/oauth/config/smtp.delete: Delete SMTP related information\n            https://jans.io/oauth/config/logging.readonly: View logging related information\n            https://jans.io/oauth/config/logging.write: Manage logging related information\n            https://jans.io/oauth/config/jwks.readonly: View JWKS related information\n            https://jans.io/oauth/config/jwks.write: Manage JWKS related information\n            https://jans.io/oauth/config/openid/clients.readonly: View clients related information\n            https://jans.io/oauth/config/openid/clients.write: Manage clients related information\n            https://jans.io/oauth/config/openid/clients.delete: Delete clients related information\n            https://jans.io/oauth/config/scopes.readonly: View scope related information\n            https://jans.io/oauth/config/scopes.write: Manage scope related information\n            https://jans.io/oauth/config/scopes.delete: Delete scope related information\n            https://jans.io/oauth/config/uma/resources.readonly: View UMA Resource related information\n            https://jans.io/oauth/config/uma/resources.write: Manage UMA Resource related information\n            https://jans.io/oauth/config/uma/resources.delete: Delete UMA Resource related information\n            https://jans.io/oauth/config/database/sql.readonly: View SQL database related information\n            https://jans.io/oauth/config/database/sql.write: Manage SQL database related information\n            https://jans.io/oauth/config/database/sql.delete: Delete SQL database related information\n            https://jans.io/oauth/config/stats.readonly: Vew server with basic statistic\n            https://jans.io/oauth/config/scim/users.read: Vew scim user related information\n            https://jans.io/oauth/config/scim/users.write: Manage scim user related information\n            https://jans.io/scim/config.readonly: Vew SCIM App configuration\n            https://jans.io/scim/config.write: Manage SCIM App configuration\n            https://jans.io/oauth/config/organization.readonly: View organization configuration information\n            https://jans.io/oauth/config/organization.write: Manage organization configuration information\n\n  responses:\n    Found:\n      description: Resource Found.\n      content: {}\n    InvalidRequest:\n      description: Invalid parameters are provided to endpoint.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    Unauthorized:\n      description: Access token is missing or invalid.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    AccessDenied:\n      description: Invalid details provided hence access denied.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    NotFound:\n      description: Resource Not Found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    NotAcceptable:\n      description: Request Not Acceptable.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    InternalServerError:\n      description: Internal error occurred. Please check log file for details.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n  schemas:\n    ErrorResponse:\n      required:\n        - error_code\n        - error_description\n      type: object\n      properties:\n        error_code:\n          type: string\n        error_description:\n          type: string\n        details:\n          type: string\n    CustomScript:\n      type: object\n      description: Script\n      required:\n        - name\n        - script\n        - scriptType\n        - programmingLanguage\n        - moduleProperties\n        - level\n      properties:\n        dn:\n          type: string\n        inum:\n          description: XRI i-number. Identifier to uniquely identify the script.\n          type: string\n        name:\n          type: string\n          pattern: '^[a-zA-Z0-9_\\\\-\\\\:\\\\/\\\\.]+$'\n          minLength: 1\n          maxLength: 60\n          description: 'Custom script name. Should contain only letters, digits and underscores.'\n        aliases:\n          type: array\n          description: List of possible aliases for the custom script.\n          items:\n            type: string\n        description:\n          type: string\n          description: Details describing the script.\n        script:\n          type: string\n          description: Actual script.\n        scriptType:\n          type: string\n          description: Type of script.\n          enum:\n            - PERSON_AUTHENTICATION\n            - INTROSPECTION\n            - RESOURCE_OWNER_PASSWORD_CREDENTIALS\n            - APPLICATION_SESSION\n            - CACHE_REFRESH\n            - UPDATE_USER\n            - USER_REGISTRATION\n            - CLIENT_REGISTRATION\n            - ID_GENERATOR\n            - UMA_RPT_POLICY\n            - UMA_RPT_CLAIMS\n            - UMA_CLAIMS_GATHERING\n            - CONSENT_GATHERING\n            - DYNAMIC_SCOPE\n            - SPONTANEOUS_SCOPE\n            - END_SESSION\n            - POST_AUTHN\n            - SCIM\n            - CIBA_END_USER_NOTIFICATION\n            - PERSISTENCE_EXTENSION\n            - IDP\n            - UPDATE_TOKEN\n        programmingLanguage:\n          type: string\n          enum:\n            - PYTHON\n            - JAVA_SCRIPT\n          description: Programming language of the custom script.\n        moduleProperties:\n          type: array\n          description: Module-level properties applicable to the script.\n          items:\n            $ref: '#/components/schemas/SimpleCustomProperty'\n        configurationProperties:\n          type: array\n          description: Configuration properties applicable to the script.\n          items:\n            $ref: '#/components/schemas/SimpleExtendedCustomProperty'\n        level:\n          type: integer\n          description: Script level.\n        revision:\n          type: integer\n          format: int64\n          description: Update revision number of the script.\n          default: 0\n        enabled:\n          type: boolean\n          description: boolean value indicating if script enabled.\n          default: false\n        scriptError:\n          type: object\n          description: Possible errors assosiated with the script.\n          $ref: '#/components/schemas/ScriptError'\n        modified:\n          type: boolean\n          description: boolean value indicating if the script is modified.\n          default: false\n        internal:\n          type: boolean\n          description: boolean value indicating if the script is internal.\n          default: false\n\n    LdapConfiguration:\n      type: object\n      required:\n        - configId\n        - bindDN\n        - maxConnections\n        - primaryKey\n        - localPrimaryKey\n        - bindPassword\n        - servers\n        - baseDNs\n        - useSSL\n      properties:\n        configId:\n          type: string\n          description: Unique identifier - Name\n          example: auth_ldap_server\n        bindDN:\n          type: string\n          description: This contains the username to connect to the backend server. You need to use full DN here. As for example, cn=jans,dc=company,dc=org.\n        bindPassword:\n          type: string\n          description: Ldap password for binding.\n        servers:\n          type: array\n          description: List of LDAP authentication servers.\n          items:\n            type: string\n            description: Unique name of the authentication server and port number.\n            example: 'authserver.org:63'\n        maxConnections:\n          type: integer\n          description: This value defines the maximum number of connections that are allowed to read the backend Active Directory/LDAP server.\n          format: int32\n          default: 2\n        useSSL:\n          type: boolean\n          description: Enable SSL communication between Jans Server and LDAP server.\n        baseDNs:\n          type: array\n          description: List contains the location of the Active Directory/LDAP tree from where the Gluu Server shall read the user information.\n          items:\n            type: string\n        primaryKey:\n          type: string\n          description: Used to search and bind operations in configured LDAP server.\n          example: 'SAMAccountName,uid, email'\n        localPrimaryKey:\n          type: string\n          description: Used to search local user entry in Gluu Server’s internal LDAP directory.\n          example: 'uid, email'\n        useAnonymousBind:\n          type: boolean\n          description: Boolean value used to indicate if the LDAP Server will allow anonymous bind request.\n          default: false\n        enabled:\n          type: boolean\n          description: Boolean value used to indicate if the LDAP Server is enabled. Do not use this unless the server administrator has entered all the required values.\n          default: false\n        version:\n          type: integer\n          description: LDAP server version.\n        level:\n          type: integer\n          description: A string that indicates the level.\n\n    CouchbaseConfiguration:\n      type: object\n      required:\n        - configId\n        - userName\n        - userPassword\n        - servers\n        - defaultBucket\n        - buckets\n        - passwordEncryptionMethod\n        - sslTrustStoreFile\n        - sslTrustStorePin\n        - sslTrustStoreFormat\n      properties:\n        configId:\n          type: string\n          description: Unique identifier\n        userName:\n          type: string\n          description: Couchbase server user.\n        userPassword:\n          type: string\n          description: Encoded Couchbase server user password.\n        servers:\n          type: array\n          items:\n            type: string\n          description: Couchbase server host and port.\n        defaultBucket:\n          type: string\n          description: Main bucket that application should use if other mapping rules were not applied.\n        buckets:\n          type: array\n          items:\n            type: string\n          description: List of buckets defining mapping rules.\n        passwordEncryptionMethod:\n          type: string\n          description: A list of the password encryption algorithms.\n          enum:\n            - SHA\n            - SSHA\n            - SHA-256\n            - SSHA-256\n            - SHA-384\n            - SSHA-384\n            - SHA-512\n            - SSHA-512\n            - MD5\n            - SMD5\n            - CRYPT\n            - CRYPT-MD5\n            - CRYPT-SHA-256\n            - CRYPT-SHA-512\n            - CRYPT-BCRYPT\n            - CRYPT-BCRYPT\n            - PKCS5S2\n        operationTracingEnabled:\n          type: boolean\n          description: Boolean value True if tracing is enabled on the environment.\n          default: false\n        mutationTokensEnabled:\n          type: boolean\n          description: If mutation tokens are enabled, they can be used for advanced durability requirements, as well as optimized RYOW consistency.\n        connectTimeout:\n          type: integer\n          description: The default timeout for connection timeout.\n          format: int32\n        computationPoolSize:\n          type: integer\n          format: int32\n          description: Sets the pool size (number of threads to use) for all non-blocking operations, default value is the number of CPUs.\n        useSSL:\n          type: boolean\n          description: Identifies if SSL should be enabled.\n          default: true\n        sslTrustStoreFile:\n          type: string\n          description: The path to the trust store file to use. It contains the trusted certificates.\n        sslTrustStorePin:\n          type: string\n          description: The PIN to use to access the contents of the trust store.\n        sslTrustStoreFormat:\n          type: string\n          description: The format to use for the trust store.\n        binaryAttributes:\n          type: array\n          description: List of binary attributes.\n          items:\n            type: string\n        certificateAttributes:\n          type: array\n          description: List of certificate attributes.\n          items:\n            type: string\n\n    SqlConfiguration:\n      type: object\n      required:\n        - configId\n        - userName\n        - userPassword\n        - connectionUri\n        - schemaName\n        - passwordEncryptionMethod\n      properties:\n        configId:\n          type: string\n          description: Unique identifier\n        userName:\n          type: string\n          description: Sql server user.\n        userPassword:\n          type: string\n          description: Encoded Sql server user password.\n        connectionUri:\n          type: array\n          items:\n            type: string\n          description: Sql server connection Uri.\n        schemaName:\n          type: string\n          description: Database schema name.\n        passwordEncryptionMethod:\n          type: string\n          description: A list of the password encryption algorithms.\n          enum:\n            - SHA\n            - SSHA\n            - SHA-256\n            - SSHA-256\n            - SHA-384\n            - SSHA-384\n            - SHA-512\n            - SSHA-512\n            - MD5\n            - SMD5\n            - CRYPT\n            - CRYPT-MD5\n            - CRYPT-SHA-256\n            - CRYPT-SHA-512\n            - CRYPT-BCRYPT\n            - CRYPT-BCRYPT\n            - PKCS5S2\n        serverTimezone:\n          type: string\n          description: Database schema name.\n        binaryAttributes:\n          type: array\n          description: List of binary attributes.\n          items:\n            type: string\n        certificateAttributes:\n          type: array\n          description: List of certificate attributes.\n          items:\n            type: string\n    JsonWebKey:\n      type: object\n      description: JsonWebKey\n      required:\n        - kid\n        - kty\n        - use\n        - alg\n        - exp\n      properties:\n        kid:\n          type: string\n          description: The unique identifier for the key.\n        kty:\n          type: string\n          description: The family of cryptographic algorithms used with the key.\n        use:\n          type: string\n          description: How the key was meant to be used; sig represents the signature.\n        alg:\n          type: string\n          description: The specific cryptographic algorithm used with the key.\n        crv:\n          type: string\n          description: The crv member identifies the cryptographic curve used with the key. Values defined by this specification are P-256, P-384 and P-521. Additional crv values MAY be used, provided they are understood by implementations using that Elliptic Curve key. The crv value is case sensitive.\n        exp:\n          type: integer\n          format: int64\n          description: Contains the token expiration timestamp\n        x5c:\n          type: array\n          description: The x.509 certificate chain. The first entry in the array is the certificate to use for token verification; the other certificates can be used to verify this first certificate.\n          items:\n            type: string\n        n:\n          type: string\n          description: The modulus for the RSA public key.\n        e:\n          type: string\n          description: The exponent for the RSA public key.\n        x:\n          type: string\n          description: The x member contains the x coordinate for the elliptic curve point. It is represented as the base64url encoding of the coordinate's big endian representation.\n        y:\n          type: string\n          description: The y member contains the y coordinate for the elliptic curve point. It is represented as the base64url encoding of the coordinate's big endian representation.\n\n    PersistenceConfiguration:\n      title: PersistenceConfiguration\n      description: Persistence configuration properties.\n      properties:\n        persistenceType:\n          type: string\n          description: Jans Auth Server persistence type configured.\n          enum:\n            - ldap\n            - couchbase\n            - sql\n            - spanner\n            - hybrid\n\n    AppConfiguration:\n      title: AppConfiguration\n      description: App configuration properties.\n      properties:\n        issuer:\n          type: string\n          description: URL using the https scheme that OP asserts as Issuer identifier.\n          example: 'https://server.example.com/'\n        baseEndpoint:\n          type: string\n          description: The base URL for endpoints.\n          example: 'https://server.example.com/restv1'\n        authorizationEndpoint:\n          type: string\n          description: The authorization endpoint URL.\n          example: 'https://server.example.com/restv1/authorize'\n        tokenEndpoint:\n          type: string\n          description: The token endpoint URL.\n          example: 'https://server.example.com/restv1/token'\n        tokenRevocationEndpoint:\n          type: string\n          description: The URL for the access_token or refresh_token revocation endpoint.\n          example: 'https://server.example.com/restv1/revoke'\n        userInfoEndpoint:\n          type: string\n          description: The User Info endpoint URL.\n          example: 'https://server.example.com/restv1/userinfo'\n        clientInfoEndpoint:\n          type: string\n          description: The Client Info endpoint URL.\n          example: 'https://server.example.com/restv1/clientinfo'\n        checkSessionIFrame:\n          type: string\n          description: URL for an OP IFrame that supports cross-origin communications for session state information with the RP Client using the HTML5 postMessage API.\n          example: 'https://server.example.com/opiframe.htm'\n        endSessionEndpoint:\n          type: string\n          description: URL at the OP to which an RP can perform a redirect to request that the end user be logged out at the OP.\n          example: 'https://server.example.com/restv1/end_session'\n        jwksUri:\n          type: string\n          description: URL of the OP\\'s JSON Web Key Set (JWK) document. This contains the signing key(s) the RP uses to validate signatures from the OP.\n          example: 'https://server.example.com/restv1/jwks'\n        registrationEndpoint:\n          type: string\n          description: URL of the Registration Endpoint.\n          example: 'https://server.example.com/restv1/register'\n        openIdDiscoveryEndpoint:\n          type: string\n          description: URL for the Discovery Endpoint.\n          example: 'https://server.example.com/.well-known/webfinger'\n        openIdConfigurationEndpoint:\n          type: string\n          description: URL for the Open ID Connect Configuration Endpoint.\n          example: 'https://server.example.com/.well-known/openid-configuration'\n        idGenerationEndpoint:\n          type: string\n          description: URL for the ID Generation Endpoint.\n          example: 'https://server.example.com/restv1/id'\n        introspectionEndpoint:\n          type: string\n          description: URL for the Introspection Endpoint.\n          example: 'https://server.example.com/restv1/introspection'\n        deviceAuthzEndpoint:\n          type: string\n          description: URL for the Device Authorization.\n          example: 'https://server.example.com/restv1/device_authorization'\n        sessionAsJwt:\n          type: boolean\n          description: Boolean value true saves session data as a JWT.\n        sectorIdentifierCacheLifetimeInMinutes:\n          type: integer\n          description:  Sector Identifier cache lifetime in minutes.\n        umaConfigurationEndpoint:\n          type: string\n          description: URL for the UMA Configuration Endpoint.\n          example: 'https://server.example.com/restv1/uma2-configuration'\n        umaRptAsJwt:\n          type: boolean\n          description: Issue RPT as JWT or as random string.\n        umaRptLifetime:\n          type: integer\n          description: UMA RPT lifetime.\n        umaTicketLifetime:\n          type: integer\n          description: UMA ticket lifetime.\n        umaPctLifetime:\n          type: integer\n          description: UMA PCT lifetime.\n        umaResourceLifetime:\n          type: integer\n          description: UMA PCT lifetime.\n        umaAddScopesAutomatically:\n          type: boolean\n          description: Add UMA scopes automatically if it is not registered yet.\n        umaValidateClaimToken:\n          type: boolean\n          description: Validate claim_token as id_token assuming it is issued by local idp.\n        umaGrantAccessIfNoPolicies:\n          type: boolean\n          description: Specifies whether to grant access to resources if there are no any policies associated with scopes.\n        umaRestrictResourceToAssociatedClient:\n          type: boolean\n          description: Restrict access to resource by associated client.\n        spontaneousScopeLifetime:\n          type: integer\n          description: The lifetime of spontaneous scope in seconds.\n        openidSubAttribute:\n          type: string\n          description: Specifies which LDAP attribute is used for the subject identifier claim.\n          example: inum\n        responseTypesSupported:\n          type: array\n          description: A list of the OAuth 2.0 response_type values that this OP supports.\n          items:\n            type: string\n          enum:\n            - code\n            - token\n            - id_token\n        responseModesSupported:\n          type: array\n          description: A list of the OAuth 2.0 Response Mode values that this OP supports.\n          items:\n            type: string\n          enum:\n            - query\n            - fragment\n            - form_post\n        grantTypesSupported:\n          type: array\n          description: A list of the OAuth 2.0 Grant Type values that this OP supports.\n          items:\n            type: string\n          enum:\n            - authorization_code\n            - implicit\n            - password\n            - client_credentials\n            - refresh_token\n            - '\\urn\\:ietf\\:params\\:oauth\\:grant-type\\:uma-ticket'\n            - '\\urn\\:openid\\:params\\:grant-type\\:ciba'\n        subjectTypesSupported:\n          type: array\n          description: A list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.\n          items:\n            type: string\n          enum:\n            - public\n            - pairwise\n        defaultSubjectType:\n          type: string\n          description: Default Subject Type used for Dynamic Client Registration.\n          enum:\n            - public\n            - pairwise\n        userInfoSigningAlgValuesSupported:\n          type: array\n          description: A list of the JWS signing algorithms (alg values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.\n          items:\n            type: string\n          enum:\n            - HS256\n            - HS384\n            - HS512\n            - RS256\n            - RS384\n            - RS512\n            - ES256\n            - ES384\n            - ES512\n            - PS256\n            - PS384\n            - PS512\n        userInfoEncryptionAlgValuesSupported:\n          type: array\n          description: A list of the JWE encryption algorithms (alg values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.\n          items:\n            type: string\n          enum:\n            - RSA1_5\n            - RSA-OAEP\n            - A128KW\n            - A256KW\n        userInfoEncryptionEncValuesSupported:\n          type: array\n          description: A list of the JWE encryption algorithms (enc values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.\n          items:\n            type: string\n          enum:\n            - A128CBC+HS256\n            - A256CBC+HS512\n            - A128GCM\n            - A256GCM\n        idTokenSigningAlgValuesSupported:\n          type: array\n          description: A list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.\n          items:\n            type: string\n          enum:\n            - none\n            - HS256\n            - HS384\n            - HS512\n            - RS256\n            - RS384\n            - RS512\n            - ES256\n            - ES384\n            - ES512\n            - PS256\n            - PS384\n            - PS512\n        idTokenEncryptionAlgValuesSupported:\n          type: array\n          description: A list of the JWE encryption algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.\n          items:\n            type: string\n          enum:\n            - RSA1_5\n            - RSA-OAEP\n            - A128KW\n            - A256KW\n        idTokenEncryptionEncValuesSupported:\n          type: array\n          description: A list of the JWE encryption algorithms (enc values) supported by the OP for the ID Token to encode the Claims in a JWT.\n          items:\n            type: string\n          enum:\n            - A128CBC+HS256\n            - A256CBC+HS512\n            - A128GCM\n            - A256GCM\n        requestObjectSigningAlgValuesSupported:\n          type: array\n          description: A list of the JWS signing algorithms (alg values) supported by the OP for Request Objects.\n          items:\n            type: string\n          enum:\n            - none\n            - HS256\n            - HS384\n            - HS512\n            - RS256\n            - RS384\n            - RS512\n            - ES256\n            - ES384\n            - ES512\n            - PS256\n            - PS384\n            - PS512\n        requestObjectEncryptionAlgValuesSupported:\n          type: array\n          description: A list of the JWE encryption algorithms (alg values) supported by the OP for Request Objects.\n          items:\n            type: string\n          enum:\n            - RSA1_5\n            - RSA-OAEP\n            - A128KW\n            - A256KW\n        requestObjectEncryptionEncValuesSupported:\n          type: array\n          description: A list of the JWE encryption algorithms (enc values) supported by the OP for Request Objects.\n          items:\n            type: string\n          enum:\n            - A128CBC+HS256\n            - A256CBC+HS512\n            - A128GCM\n            - A256GCM\n        tokenEndpointAuthMethodsSupported:\n          type: array\n          description: A list of Client Authentication methods supported by this Token Endpoint.\n          items:\n            type: string\n          enum:\n            - client_secret_basic\n            - client_secret_post\n            - client_secret_jwt\n            - private_key_jwt\n        tokenEndpointAuthSigningAlgValuesSupported:\n          type: array\n          description: A list of the JWS signing algorithms (alg values) supported by the Token Endpoint for the signature on the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods.\n          items:\n            type: string\n          enum:\n            - HS256\n            - HS384\n            - HS512\n            - RS256\n            - RS384\n            - RS512\n            - ES256\n            - ES384\n            - ES512\n            - PS256\n            - PS384\n            - PS512\n        dynamicRegistrationCustomAttributes:\n          type: array\n          description: Custom attributes for the Dynamic registration.\n          items:\n            type: string\n          enum:\n            - jansTrustedClnt\n        displayValuesSupported:\n          type: array\n          description: A list of the display parameter values that the OpenID Provider supports.\n          items:\n            type: string\n          enum:\n            - page\n            - popup\n        claimTypesSupported:\n          type: array\n          description: A list of the Claim Types that the OpenID Provider supports.\n          items:\n            type: string\n          enum:\n            - normal\n        jwksAlgorithmsSupported:\n          type: array\n          description: A list of algorithms that will be used in JWKS endpoint.\n          items:\n            type: string\n          enum:\n            - RS256\n            - RS384\n            - RS512\n            - ES256\n            - ES384\n            - ES512\n            - PS256\n            - PS384\n            - PS512\n            - RSA1_5\n            - RSA-OAEP\n        serviceDocumentation:\n          type: string\n          description: URL of a page containing human-readable information that developers might want or need to know when using the OpenID Provider.\n          format: url\n          example: 'http://gluu.org/docs'\n        claimsLocalesSupported:\n          type: array\n          description: Languages and scripts supported for values in Claims being returned.\n          items:\n            type: string\n          enum:\n            - en\n        idTokenTokenBindingCnfValuesSupported:\n          type: array\n          description: Array containing a list of the JWT Confirmation Method member names supported by the OP for Token Binding of ID Tokens. The presence of this parameter indicates that the OpenID Provider supports Token Binding of ID Tokens. If omitted, the default is that the OpenID Provider does not support Token Binding of ID Tokens.\n          items:\n            type: string\n          enum:\n            - tbh\n        uiLocalesSupported:\n          type: array\n          description: Languages and scripts supported for the user interface.\n          items:\n            type: string\n          enum:\n            - en\n            - es\n        claimsParameterSupported:\n          type: boolean\n          description: Specifies whether the OP supports use of the claim’s parameter.\n        requestParameterSupported:\n          type: boolean\n          description: Boolean value specifying whether the OP supports use of the request parameter.\n        requestUriParameterSupported:\n          type: boolean\n          description: Boolean value specifying whether the OP supports use of the request_uri parameter.\n        requestUriHashVerificationEnabled:\n          type: boolean\n          description: Boolean value specifying whether the OP supports use of the request_uri hash verification.\n        requireRequestUriRegistration:\n          type: boolean\n          description: Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.\n        opPolicyUri:\n          type: string\n          description: URL that the OpenID Provider provides to the person registering the Client to read about the OP\\'s requirements on how the Relying Party can use the data provided by the OP.\n          example: 'http://ox.gluu.org/doku.php?id=jans:policy'\n        opTosUri:\n          type: string\n          description: URL that the OpenID Provider provides to the person registering the Client to read about OpenID Provider's terms of service.\n          example: 'http://ox.gluu.org/doku.php?id=jans:tos'\n        authorizationCodeLifetime:\n          type: integer\n          description: The lifetime of the Authorization Code.\n        refreshTokenLifetime:\n          type: integer\n          description: The lifetime of the Refresh Token.\n        idTokenLifetime:\n          type: integer\n          description: The lifetime of the ID Token.\n          example: 3600\n        idTokenFilterClaimsBasedOnAccessToken:\n          type: boolean\n          description: Boolean value specifying whether idToken filters claims based on accessToken.\n        accessTokenLifetime:\n          type: integer\n          description: The lifetime of the short-lived Access Token.\n          example: 3600\n        cleanServiceInterval:\n          type: integer\n          description: Time interval for the Clean Service in seconds.\n          example: 60\n        cleanServiceBatchChunkSize:\n          type: integer\n          description: Each clean up iteration fetches chunk of expired data per base dn and removes it from storage.\n          example: 10000\n        keyRegenerationEnabled:\n          type: boolean\n          description: Boolean value specifying whether to regenerate keys.\n        keyRegenerationInterval:\n          type: integer\n          description: The interval for key regeneration in hours.\n          example: 48\n        defaultSignatureAlgorithm:\n          type: string\n          description: The default signature algorithm to sign ID Tokens.\n          enum:\n            - HS256\n            - HS384\n            - HS512\n            - RS256\n            - RS384\n            - RS512\n            - ES256\n            - ES384\n            - ES512\n        oxOpenIdConnectVersion:\n          type: string\n          description: OpenID Connect Version.\n          example: openidconnect-1.0\n        oxId:\n          type: string\n          description: URL for the Inum generator Service.\n          format: url\n          example: 'https://server.example.com/oxid/service/jans/inum'\n        dynamicRegistrationExpirationTime:\n          type: integer\n          description: Expiration time in seconds for clients created with dynamic registration, -1 means never expire.\n          example: -1\n        dynamicRegistrationPersistClientAuthorizations:\n          type: boolean\n          description: Boolean value specifying whether to persist client authorizations.\n        trustedClientEnabled:\n          type: boolean\n          description: Boolean value specifying whether a client is trusted and no authorization is required.\n        skipAuthorizationForOpenIdScopeAndPairwiseId:\n          type: boolean\n          description: If a client has only openid scope and pairwise id, person should not have to authorize.\n        dynamicRegistrationScopesParamEnabled:\n          type: boolean\n          description: Boolean value specifying whether to enable scopes parameter in dynamic registration.\n        dynamicRegistrationPasswordGrantTypeEnabled:\n          type: boolean\n          description: Boolean value specifying whether to enable Password Grant Type during Dynamic Registration.\n        dynamicRegistrationAllowedPasswordGrantScopes:\n          type: array\n          description: List of grant scopes for dynamic registration.\n          items:\n            type: string\n        dynamicRegistrationCustomObjectClass:\n          type: string\n          description: LDAP custom object class for dynamic registration.\n        personCustomObjectClassList:\n          type: array\n          description: LDAP custom object class list for dynamic person enrolment.\n          items:\n            type: string\n          enum:\n            - gluuCustomPerson\n            - gluuPerson\n        persistIdTokenInLdap:\n          type: boolean\n          description: Specifies whether to persist id_token into LDAP (otherwise saves into cache).\n        persistRefreshTokenInLdap:\n          type: boolean\n          description: Specifies whether to persist refresh_token into LDAP (otherwise saves into cache).\n        allowPostLogoutRedirectWithoutValidation:\n          type: boolean\n          description: Allows post logout redirect without validation for End Session Endpoint.\n        invalidateSessionCookiesAfterAuthorizationFlow:\n          type: boolean\n          description: Boolean value to specify whether to invalidate `session_id` and `consent_session_id` cookies right after successful or unsuccessful authorization.\n        returnClientSecretOnRead:\n          type: boolean\n          description: Boolean value specifying whether a client_secret is returned on client GET or PUT. False value means not to return secret.\n        rejectJwtWithNoneAlg:\n          type: boolean\n          description: Boolean value specifying whether reject JWT requested or validated with algorithm None.\n        expirationNotificatorEnabled:\n          type: boolean\n          description: Boolean value specifying whether expiration notificator is enabled (used to identify expiration for persistence that support TTL, like Couchbase).\n        useNestedJwtDuringEncryption:\n          type: boolean\n          description: Boolean value specifying whether to use nested Jwt during encryption.\n        expirationNotificatorMapSizeLimit:\n          type: integer\n          description: The expiration notificator maximum size limit.\n          example: 100000\n        expirationNotificatorIntervalInSeconds:\n          type: integer\n          description: The expiration notificator interval in seconds.\n          example: 600\n        authenticationFiltersEnabled:\n          type: boolean\n          description: Boolean value specifying whether to enable user authentication filters.\n        clientAuthenticationFiltersEnabled:\n          type: boolean\n          description: Boolean value specifying whether to enable client authentication filters.\n        clientRegDefaultToCodeFlowWithRefresh:\n          type: boolean\n          description: Boolean value specifying whether to add Authorization Code Flow with Refresh grant during client registration.\n        authenticationFilters:\n          type: array\n          description: List of authentication filters.\n          items:\n            $ref: '#/components/schemas/AuthenticationFilters'\n        clientAuthenticationFilters:\n          type: array\n          description: List of client authentication filters.\n          items:\n            $ref: '#/components/schemas/AuthenticationFilters'\n        corsConfigurationFilters:\n          type: array\n          description: CORS Configuration filters.\n          items:\n            $ref: '#/components/schemas/CorsConfigurationFilter'\n        sessionIdUnusedLifetime:\n          type: integer\n          description: The lifetime for unused session states.\n        sessionIdUnauthenticatedUnusedLifetime:\n          type: integer\n          description: The lifetime for unused unauthenticated session states.\n        sessionIdEnabled:\n          type: boolean\n          description: Boolean value specifying whether to enable authentication by session_id.\n        sessionIdPersistOnPromptNone:\n          type: boolean\n          description: Boolean value specifying whether to persist session ID on prompt none.\n        sessionIdRequestParameterEnabled:\n          type: boolean\n          description: Boolean value specifying whether to enable session_id HTTP request parameter.\n        changeSessionIdOnAuthentication:\n          type: boolean\n          description: Boolean value specifying whether to change session_id on authentication.\n        sessionIdPersistInCache:\n          type: boolean\n          description: Boolean value specifying whether to persist session_id in cache.\n        sessionIdLifetime:\n          type: integer\n          description: The lifetime of session id in seconds. If 0 or -1 then expiration is not set. `session_id` cookie expires when browser session ends.\n        serverSessionIdLifetime:\n          type: integer\n          description: The sessionId lifetime in seconds for sessionId. By default same as sessionIdLifetime.\n        configurationUpdateInterval:\n          type: integer\n          description: The interval for configuration update in seconds.\n        enableClientGrantTypeUpdate:\n          type: boolean\n          description: Boolean value to specify if client can update Grant Type values.\n        dynamicGrantTypeDefault:\n          type: array\n          description: list of the OAuth 2.0 Grant Type values that it\\'s possible to set via client registration API..\n          items:\n            type: string\n          enum:\n            - none\n            - authorization_code\n            - implicit\n            - password\n            - client_credentials\n            - refresh_token\n            - 'urn:ietf:params:oauth:grant-type:uma-ticket'\n            - 'urn:openid:params:grant-type:ciba'\n            - 'urn:ietf:params:oauth:grant-type:device_code'\n        cssLocation:\n          type: string\n          description: The location for CSS files.\n        jsLocation:\n          type: string\n          description: The location for JavaScript files.\n        imgLocation:\n          type: string\n          description: The location for image files.\n        metricReporterInterval:\n          type: integer\n          description: The interval for metric reporter in seconds.\n        metricReporterKeepDataDays:\n          type: integer\n          description: The days to keep metric reported data.\n        pairwiseIdType:\n          type: string\n          description: The pairwise ID type.\n        pairwiseCalculationKey:\n          type: string\n          description: Key to calculate algorithmic pairwise IDs.\n        pairwiseCalculationSalt:\n          type: string\n          description: Salt to calculate algorithmic pairwise IDs.\n        shareSubjectIdBetweenClientsWithSameSectorId:\n          type: boolean\n          description: Share Subject ID between clients with same Sector ID.\n        webKeysStorage:\n          type: string\n          description: Web Key Storage Type.\n          enum:\n            - keystore\n            - pkcs11\n        dnName:\n          type: string\n          description: DN of certificate issuer.\n        keyStoreFile:\n          type: string\n          description: The Key Store File (JKS).\n          example: /etc/certs/jans-auth-keys.jks\n        keyStoreSecret:\n          type: string\n          description: The password of the Key Store.\n        keySelectionStrategy:\n          type: string\n          description: Key Selection Strategy.\n          enum:\n            - OLDER\n            - NEWER\n            - FIRST\n        oxElevenTestModeToken:\n          type: string\n          description: oxEleven Test Mode Token.\n        oxElevenGenerateKeyEndpoint:\n          type: string\n          description: URL for the oxEleven Generate Key Endpoint.\n          example: 'https://server.example.com/oxeleven/rest/oxeleven/generateKey'\n        oxElevenSignEndpoint:\n          type: string\n          description: URL for the oxEleven Sign Endpoint.\n          example: 'https://server.example.com/oxeleven/rest/oxeleven/sign'\n        oxElevenVerifySignatureEndpoint:\n          type: string\n          description: URL for the oxEleven Verify Signature Endpoint.\n          example: 'https://server.example.com/oxeleven/rest/oxeleven/verifySignature'\n        oxElevenDeleteKeyEndpoint:\n          type: string\n          description: URL for the oxEleven Delete Key Endpoint.\n          example: 'https://server.example.com/oxeleven/rest/oxeleven/deleteKey'\n        introspectionAccessTokenMustHaveUmaProtectionScope:\n          type: boolean\n          description: Reject introspection requests if access_token in Authorization header does not have uma_protection scope.\n        endSessionWithAccessToken:\n          type: boolean\n          description: Accept access token to call end_session endpoint.\n        cookieDomain:\n          type: string\n          description: Sets cookie domain for all cookies created by OP.\n        enabledOAuthAuditLogging:\n          type: boolean\n          description: enabled OAuth Audit Logging.\n        jmsBrokerURISet:\n          type: array\n          description: JMS Broker URI Set.\n          format: select\n          items:\n            type: string\n        jmsUserName:\n          type: string\n          description: JMS UserName.\n        jmsPassword:\n          type: string\n          description: JMS Password.\n        clientWhiteList:\n          type: array\n          description: White List for Client Redirection URIs.\n          items:\n            type: string\n        clientBlackList:\n          type: array\n          description: Black List for Client Redirection URIs.\n          items:\n            type: string\n        legacyIdTokenClaims:\n          type: boolean\n          description: Include Claims in ID Token.\n        customHeadersWithAuthorizationResponse:\n          type: boolean\n          description: Boolean value specifying whether to enable Custom Response Header parameter to return custom headers with the Authorization Response.\n        frontChannelLogoutSessionSupported:\n          type: boolean\n          description: Boolean value to specify support for front channel logout session.\n        loggingLevel:\n          type: string\n          description: Logging level for jans-auth logger.\n          enum:\n            - TRACE\n            - DEBUG\n            - INFO\n            - WARN\n            - ERROR\n            - FATAL\n            - OFF\n        loggingLayout:\n          type: string\n          description: Logging layout used for Jans Authorization Server loggers.\n            - text\n            - json\n        updateUserLastLogonTime:\n          type: boolean\n          description: Boolean value to specify if application should update oxLastLogonTime attribute on user authentication.\n        updateClientAccessTime:\n          type: boolean\n          description: Boolean value to specify if application should update oxLastAccessTime/oxLastLogonTime attributes on client authentication.\n        logClientIdOnClientAuthentication:\n          type: boolean\n          description: Boolean value to specify if application should log the Client ID on client authentication.\n        logClientNameOnClientAuthentication:\n          type: boolean\n          description: Boolean value to specify if application should log the Client Name on client authentication.\n        disableJdkLogger:\n          type: boolean\n          description: Boolean value specifying whether to enable JDK Loggers.\n        authorizationRequestCustomAllowedParameters:\n          type: array\n          description: Authorization Request Custom Allowed Parameters.\n          items:\n            type: string\n        legacyDynamicRegistrationScopeParam:\n          type: boolean\n          description: Legacy Dynamic Registration Scopes JSON Array Param.\n        openidScopeBackwardCompatibility:\n          type: boolean\n          description: Set to false to only allow token endpoint request for openid scope with grant type equals to authorization_code, restrict access to userinfo to scope openid and only return id_token if scope contains openid.\n        disableU2fEndpoint:\n          type: boolean\n          description: Enable/Disable U2F endpoints.\n        useLocalCache:\n          type: boolean\n          description: Boolean value specifying whether to enable local in-memory cache.\n        fapiCompatibility:\n          type: boolean\n          description: Boolean value specifying whether turn on FAPI compatibility mode. If true AS behaves in more strict mode.\n        forceIdTokenHintPrecense:\n          type: boolean\n          description: Boolean value specifying whether force id_token_hint parameter presence.\n        forceOfflineAccessScopeToEnableRefreshToken:\n          type: boolean\n          description: Boolean value specifying whether force offline_access scope to enable refresh_token grant type.\n        errorReasonEnabled:\n          type: boolean\n          description: Boolean value specifying whether to return detailed reason of the error from AS..\n        removeRefreshTokensForClientOnLogout:\n          type: boolean\n          description: Boolean value specifying whether to remove refresh tokens on logout.\n        skipRefreshTokenDuringRefreshing:\n          type: boolean\n          description: Boolean value specifying whether to skip refreshing tokens on refreshing.\n        refreshTokenExtendLifetimeOnRotation:\n          type: boolean\n          description: Boolean value specifying whether to extend refresh tokens on rotation.\n        consentGatheringScriptBackwardCompatibility:\n          type: boolean\n          description: Boolean value specifying whether turn on Consent Gathering Script backward compatibility mode. If true AS will pick up script with higher level globally. If false AS will pick up script based on client configuration.\n        introspectionScriptBackwardCompatibility:\n          type: boolean\n          description: Boolean value specifying whether switch off client\\'s introspection scripts (true value) and run all scripts that exists on server.\n        introspectionResponseScopesBackwardCompatibility:\n          type: boolean\n          description: Boolean value specifying introspection response backward compatibility mode.\n        softwareStatementValidationType:\n          type: string\n          description: Validation type used for software statement.\n          enum:\n            - none\n            - jwks\n            - jwks_uri\n            - script\n        softwareStatementValidationClaimName:\n          type: string\n          description: Validation claim name for software statement.\n        authenticationProtectionConfiguration:\n          type: object\n          description: Authentication Brute Force Protection Configuration.\n          $ref: '#/components/schemas/AuthenticationProtectionConfiguration'\n        errorHandlingMethod:\n          type: string\n          description: A list of possible error handling methods.\n          enum:\n            - internal\n            - remote\n        keepAuthenticatorAttributesOnAcrChange:\n          type: boolean\n          description: Boolean value specifying whether to keep authenticator attributes on ACR change.\n        deviceAuthzRequestExpiresIn:\n          type: integer\n          description: Expiration time given for device authorization requests.\n        deviceAuthzTokenPollInterval:\n          type: integer\n          description: Default interval returned to the client to process device token requests.\n        deviceAuthzResponseTypeToProcessAuthz:\n          type: string\n          description: Response type used to process device authz requests.\n        backchannelClientId:\n          type: string\n          description: Backchannel Client Id.\n        backchannelRedirectUri:\n          type: string\n          description: Backchannel Redirect Uri.\n          example: 'https://server.example.com/oxeleven/rest/backchannel/backchannelRedirectUri'\n        backchannelAuthenticationEndpoint:\n          type: string\n          description: Backchannel Authentication Endpoint.\n          example: 'https://server.example.com/oxeleven/rest/backchannel/backchannelAuthenticationEndpoint()'\n        backchannelDeviceRegistrationEndpoint:\n          type: string\n          description: Backchannel Device Registration Endpoint.\n          example: 'https://server.example.com/oxeleven/rest/backchannel/backchannelDeviceRegistrationEndpoint'\n        backchannelTokenDeliveryModesSupported:\n          type: array\n          description: Backchannel Token Delivery Modes Supported.\n          items:\n            type: string\n            enum:\n              - poll\n              - ping\n              - push\n        backchannelAuthenticationRequestSigningAlgValuesSupported:\n          type: array\n          description: Backchannel Authentication Request Signing Alg Values Supported.\n          items:\n            type: string\n            enum:\n              - RS512\n              - ES256\n              - ES384\n              - ES512\n              - PS256\n              - PS384\n              - PS512\n              - RS384\n              - RS256\n        backchannelUserCodeParameterSupported:\n          type: boolean\n          description: Backchannel User Code Parameter Supported\n        backchannelBindingMessagePattern:\n          type: string\n          description: Backchannel Binding Message Pattern.\n        backchannelAuthenticationResponseExpiresIn:\n          type: integer\n          description: Backchannel Authentication Response Expires In.\n        backchannelAuthenticationResponseInterval:\n          type: integer\n          description: Backchannel Authentication Response Interval.\n        backchannelLoginHintClaims:\n          type: array\n          description: Backchannel Login Hint Claims.\n          items:\n            type: string\n        cibaEndUserNotificationConfig:\n          type: object\n          description: CIBA End User Notification Config.\n          $ref: '#/components/schemas/CIBAEndUserNotificationConfig'\n        backchannelRequestsProcessorJobIntervalSec:\n          type: integer\n          description: Specifies the allowable elapsed time in seconds backchannel request processor executes.\n        backchannelRequestsProcessorJobChunkSize:\n          type: integer\n          description: Each backchannel request processor iteration fetches chunk of data to be processed.\n        cibaGrantLifeExtraTimeSec:\n          type: integer\n          description: Specifies the CIBA Grant life extra time in seconds.\n        cibaMaxExpirationTimeAllowedSec:\n          type: integer\n          description: Specifies the CIBA token expiration time in seconds.\n        discoveryCacheLifetimeInMinutes:\n          type: integer\n          description: Lifetime of discovery cache.\n        httpLoggingEnabled:\n          type: boolean\n          description: Enable/Disable request/response logging filter.\n        httpLoggingExludePaths:\n          type: array\n          description: List of base URI for which request/response logging filter should not record activity.\n          items:\n            type: string\n          example: '\\\"/auth/img\\\", \\\"/auth/stylesheet\\\"'\n        externalLoggerConfiguration:\n          type: string\n          description: Path to external log4j2 logging configuration.\n          example: /identity/logviewer/configure\n        dcrSignatureValidationEnabled:\n          type: boolean\n          description: Boolean value enables DCR signature validation. Default is false.\n        dcrSignatureValidationSharedSecret:\n          type: string\n          description: Specifies shared secret for Dynamic Client Registration.\n        dcrSignatureValidationSoftwareStatementJwksURIClaim:\n          type: string\n          description: Specifies claim name inside software statement. Value of claim should point to JWKS URI.\n        dcrSignatureValidationSoftwareStatementJwksClaim:\n          type: string\n          description: Specifies claim name inside software statement. Value of claim should point to inlined JWKS.\n        dcrSignatureValidationJwks:\n          type: string\n          description: Specifies JWKS for all DCR's validations.\n        dcrSignatureValidationJwksUri:\n          type: string\n          description: Specifies JWKS URI for all DCR's validations.\n        dcrAuthorizationWithClientCredentials:\n          type: boolean\n          description: Boolean value indicating if DCR authorization to be performed using client credentials.\n        dcrSkipSignatureValidation:\n          type: boolean\n          description: Boolean value indicating if signature validation is to be skipped.\n        statTimerIntervalInSeconds:\n          type: integer\n          description: Statistical data capture time interval.\n        statWebServiceIntervalLimitInSeconds:\n          type: integer\n          description: Statistical data capture time interval limit.\n        keyAlgsAllowedForGeneration:\n          type: array\n          description: List of algorithm allowed to be used for key generation.\n          items:\n            type: string\n          example: '\\\"RS256\\\", \\\"RS512\\\", \\\"ES384\\\", \\\"PS256\\\"'\n        discoveryAllowedKeys:\n          type: array\n          description: List of configuration response claim allowed to be displayed in discovery endpoint.\n          items:\n            type: string\n          example: 'authorization_endpoint, token_endpoint, jwks_uri, scopes_supported, response_types_supported, response_modes_supported, etc..'\n        allowIdTokenWithoutImplicitGrantTypes:\n          type: boolean\n          description: Specifies if a token without implicit grant types is allowed.\n        keySignWithSameKeyButDiffAlg:\n          type: boolean\n          description: Specifies if signing to be done with same key but apply different algorithms.\n        enabledComponents:\n          type: array\n          description: List of auth components enabled\n          items:\n            type: string\n          example: 'HEALTH_CHECK, USERINFO, CLIENTINFO, ID_GENERATION, REGISTRATION, INTROSPECTION, etc..'\n        staticKid:\n          type: string\n          description: Specifies static Kid\n\n    GluuAttribute:\n      title: GluuAttribute\n      description: Attribute.\n      type: object\n      required:\n        - name\n        - description\n        - displayName\n        - dataType\n        - status\n        - viewType\n        - editType\n      properties:\n        dn:\n          type: string\n        inum:\n          description: XRI i-number. Identifier to uniquely identify the attribute.\n          type: string\n        name:\n          type: string\n          description: Name of the attribute.\n          example: 'name, displayName, birthdate, email'\n        displayName:\n          type: string\n        description:\n          type: string\n          description: User friendly descriptive detail of attribute.\n        dataType:\n          type: string\n          description: Data Type of attribute.\n          enum:\n            - STRING\n            - NUMERIC\n            - BOOLEAN\n            - BINARY\n            - CERTIFICATE\n            - DATE\n            - JSON\n        status:\n          type: string\n          description: Attrubute status\n          enum:\n            - ACTIVE\n            - INACTIVE\n            - EXPIRED\n            - REGISTER\n        lifetime:\n          type: string\n        sourceAttribute:\n          type: string\n        salt:\n          type: string\n        nameIdType:\n          type: string\n        origin:\n          type: string\n        editType:\n          type: array\n          description: GluuUserRole\n          items:\n            type: string\n            enum:\n              - ADMIN\n              - OWNER\n              - MANAGER\n              - USER\n              - WHITEPAGES\n        viewType:\n          type: array\n          description: GluuUserRole\n          items:\n            type: string\n            enum:\n              - ADMIN\n              - OWNER\n              - MANAGER\n              - USER\n              - WHITEPAGES\n        usageType:\n          type: object\n          description: GluuAttributeUsageType\n          items:\n            type: string\n        claimName:\n          type: string\n        seeAlso:\n          type: string\n        saml1Uri:\n          type: string\n        saml2Uri:\n          type: string\n        urn:\n          type: string\n        scimCustomAttr:\n          type: boolean\n          description: Boolean value indicating if the attribute is a SCIM custom attribute\n        oxMultiValuedAttribute:\n          type: boolean\n          description: Boolean value indicating if the attribute can hold multiple value.\n        attributeValidation:\n          type: object\n          description: Details of validations to be applied on the attribute\n          properties:\n            regexp:\n              type: string\n              description: Reguar expression to be used to validate the dataType.\n            minLength:\n              type: integer\n            maxLength:\n              type: integer\n        tooltip:\n          type: string\n        jansHideOnDiscovery:\n          type: boolean\n          description: Boolean value indicating if the attribute should be shown on that discovery page.\n    PatchRequest:\n      description: A JSONPatch document as defined by RFC 6902\n      required:\n        - \"op\"\n        - \"path\"\n      properties:\n        op:\n          type: string\n          description: The operation to be performed\n          enum:\n            - \"add\"\n            - \"remove\"\n            - \"replace\"\n            - \"move\"\n            - \"copy\"\n            - \"test\"\n        path:\n          type: string\n          description: A JSON-Pointer\n        value:\n          type: object\n          description: The value to be used within the operations.\n    Scope:\n      title: Scope\n      description: Auth Scope.\n      type: object\n      required:\n        - id\n        - scopeType\n      properties:\n        dn:\n          type: string\n        inum:\n          description: Unique id identifying the .\n          type: string\n        displayName:\n          description: A human-readable name of the scope.\n          type: string\n        id:\n          description: The base64url encoded id.\n          type: string\n        iconUrl:\n          description: A URL for a graphic icon representing the scope. The referenced icon MAY be used by the authorization server in any user interface it presents to the resource owner.\n          type: string\n        description:\n          description: A human-readable string describing the scope.\n          type: string\n        scopeType:\n          description: The scopes type associated with Access Tokens determine what resources will.\n          type: string\n          enum:\n            - openid\n            - dynamic\n            - uma\n            - spontaneous\n            - oauth\n        claims:\n          description: Claim attributes associated with the scope.\n          type: array\n          items:\n            type: string\n        defaultScope:\n          description: Boolean value to specify default scope.\n          type: boolean\n        groupClaims:\n          description: Specifies if the scope is group claims.\n          type: boolean\n        dynamicScopeScripts:\n          description: Dynamic Scope Scripts associated with the scope.\n          type: array\n          items:\n            type: string\n        umaAuthorizationPolicies:\n          description: Policies associated with scopes.\n          type: array\n          items:\n            type: string\n        attributes:\n          type: object\n          description: ScopeAttributes\n          properties:\n            spontaneousClientId:\n              type: string\n            spontaneousClientScopes:\n              type: array\n              items:\n                type: string\n            showInConfigurationEndpoint:\n              type: boolean\n        umaType:\n          description: Specifies if the scope is of type UMA.\n          type: boolean\n          default: false\n        deletable:\n          description: Specifies if the scope can be deleted.\n          type: boolean\n          default: false\n        expirationDate:\n          description: Expiry date of the Scope.\n          type: string\n          format: date\n    CustomAttribute:\n      title: CustomAttribute\n      description: Attribute.\n      type: object\n      required:\n        - name\n        - multiValued\n        - values\n      properties:\n        name:\n          type: string\n          description: Name of the attribute.\n          example: 'name, displayName, birthdate, email'\n        multiValued:\n          type: boolean\n          description: Indicates if the attribute can hold multiple values.\n        values:\n          type: array\n          items:\n            type: string\n    ClientAttributes:\n      title: ClientAttributes\n      description: Attribute.\n      type: object\n      properties:\n        tlsClientAuthSubjectDn:\n          type: string\n        runIntrospectionScriptBeforeAccessTokenAsJwtCreationAndIncludeClaims:\n          description: Run Introspection Script Before Access Token as Jwt Creation and Include Claims. Default value is false.\n          type: boolean\n        keepClientAuthorizationAfterExpiration:\n          description: Keep Client Authorization After Expiration.\n          type: boolean\n        allowSpontaneousScopes:\n          type: boolean\n        spontaneousScopes:\n          type: array\n          items:\n            type: string\n        spontaneousScopeScriptDns:\n          type: array\n          items:\n            type: string\n        backchannelLogoutUri:\n          type: array\n          items:\n            type: string\n        backchannelLogoutSessionRequired:\n          type: boolean\n        additionalAudience:\n          type: array\n          items:\n            type: string\n        postAuthnScripts:\n          type: array\n          items:\n            type: string\n        consentGatheringScripts:\n          type: array\n          items:\n            type: string\n        introspectionScripts:\n          type: array\n          items:\n            type: string\n        rptClaimsScripts:\n          type: array\n          items:\n            type: string\n    Client:\n      title: Client object\n      description: Client.\n      type: object\n      required:\n        - applicationType\n        - logout\n        - includeClaimsInIdToken\n        - displayName\n      properties:\n        dn:\n          type: string\n        inum:\n          description: XRI i-number. Client Identifier to uniquely identify the client.\n          type: string\n        displayName:\n          type: string\n          description: Name of the user suitable for display to end-users\n        clientSecret:\n          type: string\n          description: The client secret.  The client MAY omit the parameter if the client secret is an empty string.\n        frontChannelLogoutUri:\n          type: string\n        frontChannelLogoutSessionRequired:\n          type: boolean\n        registrationAccessToken:\n          type: string\n        clientIdIssuedAt:\n          type: string\n          format: date-time\n        clientSecretExpiresAt:\n          type: string\n          format: date-time\n        redirectUris:\n          description: Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request\n          type: array\n          items:\n            type: string\n          example:\n            - 'https://client.example.org/cb'\n        claimRedirectUris:\n          description: Array of The Claims Redirect URIs to which the client wishes the authorization server to direct the requesting party's user agent after completing its interaction.\n          type: array\n          items:\n            type: string\n        responseTypes:\n          description: 'A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token.'\n          type: array\n          items:\n            type: string\n            enum:\n              - code\n              - token\n              - id_token\n        grantTypes:\n          description: A list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using.\n          type: array\n          items:\n            type: string\n            enum:\n              - authorization_code\n              - implicit\n              - password\n              - client_credentials\n              - refresh_token\n              - urn:ietf:params:oauth:grant-type:uma-ticket\n              - urn:openid:params:grant-type:ciba\n              - urn:ietf:params:oauth:grant-type:device_code\n        applicationType:\n          description: 'Kind of the application. The default, if omitted, is web. The defined values are native or web. Web Clients using the OAuth Implicit Grant Type must only register URLs using the HTTPS scheme as redirect_uris, they must not use localhost as the hostname. Native Clients must only register redirect_uris using custom URI schemes or URLs using the http scheme with localhost as the hostname.'\n          type: string\n          enum:\n            - web\n            - native\n        contacts:\n          description: e-mail addresses of people responsible for this Client.\n          type: array\n          items:\n            type: string\n        clientName:\n          description: A human-readable name of the client.\n          type: string\n        idTokenTokenBindingCnf:\n          description: 'Specifies the JWT Confirmation Method member name (e.g. tbh) that the Relying Party expects when receiving Token Bound ID Tokens. The presence of this parameter indicates that the Relying Party supports Token Binding of ID Tokens. If omitted, the default is that the Relying Party does not support Token Binding of ID Tokens.'\n          type: string\n        logoUri:\n          description: URL that references a logo for the Client application.\n          type: string\n        clientUri:\n          description: URL of the home page of the Client. The value of this field must point to a valid Web page.\n          type: string\n        policyUri:\n          description: URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.\n          type: string\n        tosUri:\n          description: URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service.\n          type: string\n        jwksUri:\n          description: 'URL for the Client''s JSON Web Key Set (JWK) document containing key(s) that are used for signing requests to the OP. The JWK Set may also contain the Client''s encryption keys(s) that are used by the OP to encrypt the responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the document to indicate each key''s intended usage.'\n          type: string\n        jwks:\n          description: 'List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value.'\n          type: string\n          example: '{ \"keys\" : [ { \"e\" : \"AQAB\", \"n\" : \"gmlDX_mgMcHX..\" ] }'\n        sectorIdentifierUri:\n          description: URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.\n          type: string\n        subjectType:\n          description: Subject type requested for the Client ID. Valid types include pairwise and public.\n          type: string\n          enum:\n            - pairwise\n            - public\n        idTokenSignedResponseAlg:\n          description: JWS alg algorithm (JWA) required for signing the ID Token issued to this Client.\n          type: string\n          enum:\n            - HS256\n            - HS384\n            - HS512\n            - RS256\n            - RS384\n            - RS512\n            - ES256\n            - ES384\n            - ES512\n            - PS256\n            - PS384\n            - PS512\n        idTokenEncryptedResponseAlg:\n          description: JWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client.\n          type: string\n          enum:\n            - RSA1_5\n            - RSA-OAEP\n            - A128KW\n            - A256KW\n        idTokenEncryptedResponseEnc:\n          description: JWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client.\n          type: string\n          enum:\n            - A128CBC+HS256\n            - A256CBC+HS512\n            - A128GCM\n            - A256GCM\n        userInfoSignedResponseAlg:\n          description: JWS alg algorithm (JWA) required for signing UserInfo Responses.\n          type: string\n          enum:\n            - HS256\n            - HS384\n            - HS512\n            - RS256\n            - RS384\n            - RS512\n            - ES256\n            - ES384\n            - ES512\n            - PS256\n            - PS384\n            - PS512\n        userInfoEncryptedResponseAlg:\n          description: JWE alg algorithm (JWA) required for encrypting UserInfo Responses.\n          type: string\n          enum:\n            - RSA1_5\n            - RSA-OAEP\n            - A128KW\n            - A256KW\n        userInfoEncryptedResponseEnc:\n          description: JWE enc algorithm (JWA) required for encrypting UserInfo Responses.\n          type: string\n          enum:\n            - A128CBC+HS256\n            - A256CBC+HS512\n            - A128GCM\n            - A256GCM\n        requestObjectSigningAlg:\n          description: JWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP.\n          type: string\n          enum:\n            - HS256\n            - HS384\n            - HS512\n            - RS256\n            - RS384\n            - RS512\n            - ES256\n            - ES384\n            - ES512\n            - PS256\n            - PS384\n            - PS512\n        requestObjectEncryptionAlg:\n          description: JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.\n          type: string\n          enum:\n            - RSA1_5\n            - RSA-OAEP\n            - A128KW\n            - A256KW\n        requestObjectEncryptionEnc:\n          description: JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.\n          type: string\n          enum:\n            - A128CBC+HS256\n            - A256CBC+HS512\n            - A128GCM\n            - A256GCM\n        tokenEndpointAuthMethod:\n          description: Requested Client Authentication method for the Token Endpoint.\n          type: string\n          enum:\n            - client_secret_basic\n            - client_secret_post\n            - client_secret_jwt\n            - private_key_jwt\n            - tls_client_auth\n            - none\n        tokenEndpointAuthSigningAlg:\n          description: JWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods.\n          type: string\n          enum:\n            - HS256\n            - HS384\n            - HS512\n            - RS256\n            - RS384\n            - RS512\n            - ES256\n            - ES384\n            - ES512\n            - PS256\n            - PS384\n            - PS512\n        defaultMaxAge:\n          description: Specifies the Default Maximum Authentication Age.\n          type: integer\n          format: int32\n          example: 1000000\n        requireAuthTime:\n          description: Boolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true.\n          type: boolean\n        defaultAcrValues:\n          description: Array of default requested Authentication Context Class Reference values that the Authorization Server must use for processing requests from the Client.\n          type: array\n          items:\n            type: string\n        initiateLoginUri:\n          description: Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.\n          type: string\n        postLogoutRedirectUris:\n          description: Provide the URLs supplied by the RP to request that the user be redirected to this location after a logout has been performed.\n          type: array\n          items:\n            type: string\n          example:\n            - 'https://client.example.org/logout/page1'\n            - 'https://client.example.org/logout/page2'\n            - 'https://client.example.org/logout/page3'\n        requestUris:\n          description: Provide a list of requests_uri values that are pre-registered by the Client for use at the Authorization Server.\n          type: array\n          items:\n            type: string\n        scopes:\n          description: Provide list of scopes granted to the client.\n          type: array\n          items:\n            type: string\n          example:\n            - read write dolphin\n        claims:\n          description: Provide list of claims granted to the client.\n          type: array\n          items:\n            type: string\n            description: String containing a space-separated list of claims that can be requested individually.\n        trustedClient:\n          description: Attribute which corresponds to the \"Pre-Authorization\" property. Default value is false.\n          type: boolean\n          default: false\n        lastAccessTime:\n          description: 'Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating last access time.'\n          type: string\n          format: date-time\n        lastLogonTime:\n          description: 'Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating last login time.'\n          type: string\n          format: date-time\n        persistClientAuthorizations:\n          description: Specifies if the client authorization details are to be persisted. Default value is true.\n          type: boolean\n        includeClaimsInIdToken:\n          description: 'If true then claims are included in token id, default value is false.'\n          type: boolean\n          default: false\n        refreshTokenLifetime:\n          description: Specifies the Client-specific refresh token expiration.\n          type: integer\n          format: int32\n          example: 100000000\n        accessTokenLifetime:\n          description: Specifies the Client-specific access token expiration.\n          type: integer\n          format: int32\n          example: 100000000\n        customAttributes:\n          type: array\n          items:\n            $ref: '#/components/schemas/CustomAttribute'\n        customObjectClasses:\n          type: array\n          items:\n            type: string\n        rptAsJwt:\n          description: Specifies whether RPT should be return as signed JWT.\n          type: boolean\n        accessTokenAsJwt:\n          description: Specifies whether access token as signed JWT.\n          type: boolean\n        accessTokenSigningAlg:\n          description: 'Specifies signing algorithm that has to be used during JWT signing. If it''s not specified, then the default OP signing algorithm will be used.'\n          type: string\n          enum:\n            - HS256\n            - HS384\n            - HS512\n            - RS256\n            - RS384\n            - RS512\n            - ES256\n            - ES384\n            - ES512\n            - PS256\n            - PS384\n            - PS512\n        disabled:\n          description: Specifies whether client is disabled.\n          type: boolean\n          default: false\n        authorizedOrigins:\n          description: Specifies authorized JavaScript origins.\n          type: array\n          items:\n            type: string\n        softwareId:\n          description: Specifies a unique identifier string (UUID) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.\n          type: string\n          example: 4NRB1-0XZABZI9E6-5SM3R\n        softwareVersion:\n          description: Specifies a version identifier string for the client software identified by 'software_id'. The value of the 'software_version' should change on any update to the client software identified by the same 'software_id'.\n          type: string\n          example: '2.1'\n        softwareStatement:\n          description: Specifies a software statement containing client metadata values about the client software as claims. This is a string value containing the entire signed JWT.\n          type: string\n        attributes:\n          type: object\n          $ref: '#/components/schemas/ClientAttributes'\n        backchannelTokenDeliveryMode:\n          description: specifies how backchannel token will be delivered.\n          type: string\n          enum:\n            - poll\n            - ping\n            - push\n        backchannelClientNotificationEndpoint:\n          description: 'Client Initiated Backchannel Authentication (CIBA) enables a Client to initiate the authentication of an end-user by means of out-of-band mechanisms. Upon receipt of the notification, the Client makes a request to the token endpoint to obtain the tokens.'\n          type: string\n        backchannelAuthenticationRequestSigningAlg:\n          description: 'The JWS algorithm alg value that the Client will use for signing authentication request, as described in Section 7.1.1. of OAuth 2.0 [RFC6749]. When omitted, the Client will not send signed authentication requests.'\n          type: string\n          enum:\n            - RS256\n            - RS384\n            - RS512\n            - ES256\n            - ES384\n            - ES512\n            - PS256\n            - PS384\n            - PS512\n        backchannelUserCodeParameter:\n          description: 'Boolean value specifying whether the Client supports the user_code parameter. If omitted, the default value is false.'\n          type: boolean\n        expirationDate:\n          description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission will expire.\n          type: string\n          format: date-time\n        deletable:\n          description: Specifies whether client is deletable.\n          type: boolean\n          default: false\n        jansId:\n          description: Attribute Scope Id.\n          type: string\n\n    UmaResource:\n      title: UMAResource object\n      description: UMAResource\n      type: object\n      required:\n        - id\n        - type\n        - iconUri\n      properties:\n        dn:\n          type: string\n        inum:\n          description: XRI i-number. Client Identifier to uniquely identify the UMAResource.\n          type: string\n        id:\n          description: Resource id.\n          type: string\n        name:\n          description: A human-readable name of the scope.\n          type: string\n        iconUri:\n          description: A URL for a graphic icon representing the resource.\n          type: string\n        scopes:\n          description: Applicable resource scopes.\n          type: array\n          items:\n            type: string\n        scopeExpression:\n          description: Resource scope expression.\n          type: string\n        clients:\n          description: List of client assosiated with the resource.\n          type: array\n          items:\n            type: string\n        resources:\n          description: List of assosiated resource.\n          type: array\n          items:\n            type: string\n        rev:\n          description: Resource revision.\n          type: string\n        creator:\n          description: Resource creator or owner.\n          type: string\n        description:\n          description: Resource description.\n          type: string\n        type:\n          description: Resource type.\n          type: string\n        creationDate:\n          description: 'Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this resource will created.'\n          type: string\n          format: date-time\n        expirationDate:\n          description: 'Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this resource will expire.'\n          type: string\n          format: date-time\n        deletable:\n          description: Specifies whether client is deletable.\n          type: boolean\n          default: false\n    SectorIdentifier:\n      type: object\n      description: Sector Identifier Details.\n      required:\n        - id\n      properties:\n        id:\n          description: XRI i-number. Sector Identifier to uniquely identify the sector.\n          type: string\n        description:\n          description: A human-readable string describing the sector.\n          type: string\n        redirectUris:\n          description: Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request\n          type: array\n          items:\n            type: string\n          example:\n            - 'https://client.example.org/cb'\n        clientIds:\n          description: List of OAuth 2.0 Client Identifier valid at the Authorization Server.\n          type: array\n          items:\n            type: string\n            example: 1402.0ab17362-36cc-4ac8-9c73-20239de64364 API Requesting Party Client.\n    CacheConfiguration:\n      type: object\n      description: Cache Configuration Details.\n      properties:\n        cacheProviderType:\n          description: The cache Provider Type.\n          type: string\n          enum:\n            - IN_MEMORY\n            - MEMCACHED\n            - REDIS\n            - NATIVE_PERSISTENCE\n        memcachedConfiguration:\n          type: object\n          $ref: '#/components/schemas/MemcachedConfiguration'\n        redisConfiguration:\n          type: object\n          $ref: '#/components/schemas/RedisConfiguration'\n        inMemoryConfiguration:\n          type: object\n          $ref: '#/components/schemas/InMemoryConfiguration'\n        nativePersistenceConfiguration:\n          type: object\n          $ref: '#/components/schemas/NativePersistenceConfiguration'\n    MemcachedConfiguration:\n      description: Memcached cache configuration.\n      type: object\n      properties:\n        servers:\n          type: string\n          description: Server details separated by spaces.\n          format: url\n          minLength: 1\n        maxOperationQueueLength:\n          type: integer\n          description: Maximum operation Queue Length.\n        bufferSize:\n          type: integer\n          description: Buffer Size.\n        defaultPutExpiration:\n          type: integer\n          description: Expiration timeout value.\n        connectionFactoryType:\n          type: string\n          description: The MemcachedConnectionFactoryType Type.\n          enum:\n            - DEFAULT\n            - BINARY\n    RedisConfiguration:\n      type: object\n      description: Cache Configuration\n      properties:\n        redisProviderType:\n          description: Type of connection.\n          type: string\n          enum:\n            - STANDALONE\n            - CLUSTER\n            - SHARDED\n            - SENTINEL\n        servers:\n          description: 'server details separated by comma e.g. ''server1:8080server2:8081''.'\n          type: string\n          title: servers\n          format: url\n        password:\n          description: Redis password.\n          type: string\n        defaultPutExpiration:\n          description: defaultPutExpiration timeout value.\n          type: integer\n        sentinelMasterGroupName:\n          description: Sentinel Master Group Name (required if SENTINEL type of connection is selected).\n          type: string\n        useSSL:\n          description: Enable SSL communication between Gluu Server and Redis cache.\n          type: boolean\n        sslTrustStoreFilePath:\n          description: Directory Path to Trust Store.\n          type: string\n          format: url\n        maxIdleConnections:\n          description: The cap on the number of \\idle\\ instances in the pool. If max idle is set too low on heavily loaded systems it is possible you will see objects being destroyed and almost immediately new objects being created. This is a result of the active threads momentarily returning objects faster than they are requesting them causing the number of idle objects to rise above max idle. The best value for max idle for heavily loaded system will vary but the default is a good starting point.\n          type: integer\n        maxTotalConnections:\n          description: The number of maximum connection instances in the pool.\n          type: integer\n        connectionTimeout:\n          description: Connection time out.\n          type: integer\n        soTimeout:\n          description: With this option set to a non-zero timeout a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires a java.net.SocketTimeoutException is raised though the Socket is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be \u003e 0. A timeout of zero is interpreted as an infinite timeout.\n          type: integer\n        maxRetryAttempts:\n          description: Maximum retry attempts in case of failure.\n          type: integer\n    InMemoryConfiguration:\n      type: object\n      description: Cache configuration.\n      properties:\n        defaultPutExpiration:\n          description: defaultPutExpiration timeout value.\n          type: integer\n    NativePersistenceConfiguration:\n      type: object\n      description: Cache configuration.\n      properties:\n        defaultPutExpiration:\n          description: defaultPutExpiration timeout value.\n          type: integer\n        defaultCleanupBatchSize:\n          description: defaultCleanupBatchSize page size.\n          type: integer\n        deleteExpiredOnGetRequest:\n          type: boolean\n    SmtpConfiguration:\n      type: object\n      description: SMTP configuration.\n      properties:\n        host:\n          description: Hostname of the SMTP server.\n          type: string\n          format: url\n        port:\n          description: Port number of the SMTP server.\n          type: integer\n          format: int32\n          multipleOf: 1\n        requires_ssl:\n          description: Boolean value with default value false. If true, SSL will be enabled.\n          type: boolean\n        trust_host:\n          type: boolean\n          description: Boolean value with default value false.\n        from_name:\n          description: Name of the sender.\n          type: string\n        from_email_address:\n          description: Email Address of the Sender.\n          type: string\n        requires_authentication:\n          description: Boolean value with default value false. It true it will enable sender authentication.\n          type: boolean\n        user_name:\n          description: Username of the SMTP.\n          type: string\n        password:\n          description: Password for the SMTP.\n          type: string\n    LoggingConfiguration:\n      type: object\n      description: Log configuration.\n      properties:\n        loggingLevel:\n          type: string\n          description: Logging level for Jans Authorization Server logger.\n          enum:\n            - TRACE\n            - DEBUG\n            - INFO\n            - WARN\n            - ERROR\n            - FATAL\n            - 'OFF'\n        loggingLayout:\n          type: string\n          description: Logging layout used for Jans Authorization Server loggers.\n          enum:\n            - text\n            - json\n        httpLoggingEnabled:\n          description: To enable http request/response logging.\n          type: boolean\n        disableJdkLogger:\n          description: To enable/disable Jdk logging.\n          type: boolean\n        enabledOAuthAuditLogging:\n          description: To enable/disable OAuth audit logging.\n          type: boolean\n        externalLoggerConfiguration:\n          description: Path to external log4j2 configuration file.\n          type: string\n        httpLoggingExludePaths:\n          description: List of paths to exclude from logger.\n          type: array\n          items:\n            type: string\n          example:\n            - /auth/img\n            - /auth/stylesheet\n    WebKeysConfiguration:\n      type: object\n      description: 'JSON Web Key Set (JWKS) - A JSON object that represents a set of JWKs. The JSON object MUST have a keys member, which is an array of JWKs.'\n      required:\n        - keys\n      properties:\n        keys:\n          type: array\n          description: 'List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value.'\n          items:\n            $ref: '#/components/schemas/JsonWebKey'\n\n    AuthenticationMethod:\n      type: object\n      description: Authentication Method Configuration\n      properties:\n        defaultAcr:\n          type: string\n          description: This field controls the default authentication mechanism that is presented to users from all applications that leverage Janssen Server for authentication.\n\n    JansFido2DynConfiguration:\n      type: object\n      description: Jans Fido2 dynamic configuration properties.\n      properties:\n        issuer:\n          type: string\n          description: URL using the https scheme for Issuer identifier.\n          example: 'https://server.example.com/'\n        baseEndpoint:\n          type: string\n          description: The base URL for Fido2 endpoints.\n          example: 'https://server.example.com/fido2/restv1'\n        cleanServiceInterval:\n          type: integer\n          description: Time interval for the Clean Service in seconds.\n        cleanServiceBatchChunkSize:\n          type: integer\n          description: Each clean up iteration fetches chunk of expired data per base dn and removes it from storage.\n        useLocalCache:\n          description: Boolean value to indicate if Local Cache is to be used.\n          type: boolean\n        disableJdkLogger:\n          type: boolean\n          description: Boolean value specifying whether to enable JDK Loggers.\n        loggingLevel:\n          type: string\n          description: Logging level for Fido2 logger.\n        loggingLayout:\n          type: string\n          description: Logging layout used for Fido2.\n        externalLoggerConfiguration:\n          type: string\n          description: Path to external Fido2 logging configuration.\n        metricReporterInterval:\n          type: integer\n          description: The interval for metric reporter in seconds.\n        metricReporterKeepDataDays:\n          type: integer\n          description: The days to keep report data.\n        personCustomObjectClassList:\n          type: array\n          description: Custom object class list for dynamic person enrolment.\n          items:\n            type: string\n        fido2Configuration:\n          description: Fido2Configuration.\n          $ref: '#/components/schemas/Fido2Configuration'\n\n    Fido2Configuration:\n      type: object\n      description: Fido2 configuration properties.\n      properties:\n        authenticatorCertsFolder:\n          description: Authenticators certificates fodler.\n          type: string\n        mdsCertsFolder:\n          description: MDS TOC root certificates folder.\n          type: string\n        mdsTocsFolder:\n          description: MDS TOC files folder.\n          type: string\n        serverMetadataFolder:\n          description: Authenticators metadata in json format.\n          type: string\n        requestedParties:\n          description: Authenticators metadata in json format.\n          type: array\n          items:\n            $ref: '#/components/schemas/RequestedParties'\n        userAutoEnrollment:\n          description: Allow to enroll users on enrollment/authentication requests.\n          type: boolean\n        unfinishedRequestExpiration:\n          description: Expiration time in seconds for pending enrollment/authentication requests\n          type: integer\n        authenticationHistoryExpiration:\n          description: Expiration time in seconds for approved authentication requests.\n          type: integer\n        requestedCredentialTypes:\n          description: List of Requested Credential Types.\n          type: array\n          items:\n            type: string\n    RequestedParties:\n      type: object\n      description: Credential Type.\n      properties:\n        name:\n          description: Name of the Requested Party.\n          type: string\n          format: url\n        domains:\n          description: Requested Party domains.\n          type: array\n          items:\n            type: string\n    SimpleCustomProperty:\n      type: object\n      description: Simple Property.\n      properties:\n        value1:\n          type: string\n        value2:\n          type: string\n        description:\n          type: string\n    SimpleExtendedCustomProperty:\n      type: object\n      description: Simple Extended Property.\n      properties:\n        value1:\n          type: string\n        value2:\n          type: string\n        description:\n          type: string\n        hide:\n          type: boolean\n    ScriptError:\n      type: object\n      description: Possible errors assosiated with the script.\n      properties:\n        raisedAt:\n          type: string\n          format: date-time\n        stackTrace:\n          type: string\n    AuthenticationFilters:\n      type: object\n      description: Represents the authentication filter.\n      properties:\n        filter:\n          type: string\n          description: Filter to be used.\n          example: 'myCustomAttr1={0}'\n        bind:\n          type: boolean\n          description: Filter bind.\n        bind-password-attribute:\n          type: string\n          description: Filter bind password attribute.\n        base-dn:\n          type: string\n          description: Bind filter base distinguished name.\n          example: 'ou=clients,o=gluu'\n    CorsConfigurationFilter:\n      type: object\n      description: CORS Configuration Filter.\n      properties:\n        filterName:\n          type: string\n          description: Filter name.\n        corsEnabled:\n          type: boolean\n          description: Boolean value indicating if the filter is enabled.\n        corsAllowedOrigins:\n          type: string\n          description: A list of origins that are allowed to access the resource. A * can be specified to enable access to resource from any origin. Otherwise, a whitelist of comma separated origins can be provided.\n        corsAllowedMethods:\n          type: string\n          description: A comma separated list of HTTP methods that can be used to access the resource, using cross-origin requests. These are the methods which will also be included as part of Access-Control-Allow-Methods header in pre-flight response.\n        corsAllowedHeaders:\n          type: string\n          description: The names of the supported author request headers.\n        corsExposedHeaders:\n          type: string\n          description: A comma separated list of request headers that can be used when making an actual request. These headers will also be returned as part of Access-Control-Allow-Headers header in a pre-flight response.\n        corsSupportCredentials:\n          type: boolean\n          description: A flag that indicates whether the resource supports user credentials. This flag is exposed as part of Access-Control-Allow-Credentials header in a pre-flight response. It helps browser determine whether or not an actual request can be made using credentials.\n        corsLoggingEnabled:\n          type: boolean\n          description: Value to enable logging, Setting the value to False will disable logging.\n        corsPreflightMaxAge:\n          type: integer\n          description: The duration in seconds the browser is allowed to cache the result of the pre-flight request.\n        corsRequestDecorate:\n          type: boolean\n          description: A flag to control if CORS specific attributes should be added to the HttpServletRequest object.\n\n    AuthenticationProtectionConfiguration:\n      type: object\n      description: Authentication Brute Force Protection Configuration.\n      properties:\n        attemptExpiration:\n          type: integer\n          description: How long store in cache information about particular login attempt. It's needed to count login attempts withing specified period of time.\n        maximumAllowedAttemptsWithoutDelay:\n          type: integer\n          description: How many attempts application allow without delay.\n        delayTime:\n          type: integer\n          description: Delay time in seconds after reaching maximumAllowedAttemptsWithoutDelay limit.\n        bruteForceProtectionEnabled:\n          type: boolean\n          description: Enable or disable service, This functionality can be enabled dynamically.\n\n    CIBAEndUserNotificationConfig:\n      type: object\n      description: CIBA End User Notification Config.\n      properties:\n        apiKey:\n          type: string\n          description: API Key\n        authDomain:\n          type: string\n          description: Auth Domain\n        databaseURL:\n          type: string\n          description: Database URL\n        projectId:\n          type: string\n          description: Project ID\n        storageBucket:\n          type: string\n          description: Storage Bucket\n        messagingSenderId:\n          type: string\n          description: Messaging Sender ID\n        appId:\n          type: string\n          description: App ID\n        notificationUrl:\n          type: string\n          description: Notification URL\n        notificationKey:\n          type: string\n          description: Notification Key\n        publicVapidKey:\n          type: string\n          description: Public Vapid Key\n\n\n    StatResponseItem:\n      type: object\n      description: Server statistics data\n      properties:\n        month:\n          type: integer\n        monthly_active_users:\n          type: integer\n          format: int64\n          description: Number of active users\n          default: 0\n        token_count_per_granttype:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/TokenMapObject'\n\n    TokenMapObject:\n      type: object\n      description: A hashmap with statistical item as a key and the value as statistical value.\n      additionalProperties:\n        type: integer\n        format: int64\n\n    HealthStatus:\n      type: object\n      description: Server health data\n      properties:\n        status:\n          type: string\n          description: Health parameter name\n        error:\n          type: string\n          description: error message in case of error\n        checks:\n          type: array\n          items:\n            $ref: '#/components/schemas/HealthStatusItem'\n            description: health check status details.\n            example: '\"checks\": [{\"name\": \"jans-config-api liveness\",\"status\": \"UP\"},{\"name\": \"jans-config-api readiness\",\"status\": \"UP\"}],\"status\": \"UP\"}'\n\n\n    HealthStatusItem:\n      type: object\n      description: Server health data\n      properties:\n        name:\n          type: string\n          description: Health parameter name\n        status:\n          type: string\n          description: Health parameter status\n\n    SearchRequest:\n      type: object\n      description: Search Parameters.\n      properties:\n        schemas:\n          type: array\n          items:\n            type: string\n          description: schema details\n        attributes:\n          type: array\n          items:\n            type: string\n          description: attribute details\n        excludedAttributes:\n          type: array\n          items:\n            type: string\n          description: attribute to be excluded details\n        filter:\n          type: string\n          description: search filter\n        sortBy:\n          type: string\n          description: attribute to be used for sorting\n        sortOrder:\n          type: string\n          description: sorting order\n        startIndex:\n          type: integer\n          format: int32\n          description: result start index\n        count:\n          type: integer\n          format: int32\n          description: total count of records\n\n    UserListResponse:\n      description: Results for users search. See section 3.4.2.4 of RFC 7644\n      allOf:\n        - $ref: '#/components/schemas/BasicListResponse'\n        - type: object\n        - type: object\n          properties:\n            Resources:\n              type: array\n              items:\n                $ref: '#/components/schemas/UserResource'\n    BasicListResponse:\n      type: object\n      properties:\n        schemas:\n          type: array\n          items:\n            type: string\n            example: urn:ietf:params:scim:api:messages:2.0:ListResponse\n        totalResults:\n          type: integer\n          description: Total number of results returned by the search. The value may be larger than the number of resources returned due to pagination\n        startIndex:\n          type: integer\n          description: The 1-based index of the first result in the current set of search results\n        itemsPerPage:\n          type: integer\n          description: The number of resources returned in a results page\n\n    UserResource:\n      description: Represents a user resource. See section 4.1 of RFC 7643\n      allOf:\n        - $ref: '#/components/schemas/BaseResource'\n        - type: object\n        - type: object\n          properties:\n            externalId:\n              type: string\n              description: Identifier of the resource useful from the perspective of the provisioning client. See section 3.1 of RFC 7643\n            userName:\n              type: string\n              description: Identifier for the user, typically used by the user to directly authenticate (id and externalId are opaque identifiers generally not known by users)\n            name:\n              $ref: '#/components/schemas/Name'\n            displayName:\n              type: string\n              description: Name of the user suitable for display to end-users\n            nickName:\n              type: string\n              description: Casual way to address the user in real life\n            profileUrl:\n              type: string\n              description: URI pointing to a location representing the User's online profile\n            title:\n              type: string\n              example: Vice President\n            userType:\n              type: string\n              description: Used to identify the relationship between the organization and the user\n              example: Contractor\n            preferredLanguage:\n              type: string\n              description: Preferred language as used in the Accept-Language HTTP header\n              example: en\n            locale:\n              type: string\n              description: Used for purposes of localizing items such as currency and dates\n              example: en-US\n            timezone:\n              type: string\n              example: America/Los_Angeles\n            active:\n              type: boolean\n            password:\n              type: string\n            emails:\n              type: array\n              items:\n                $ref: '#/components/schemas/Email'\n            phoneNumbers:\n              type: array\n              items:\n                $ref: '#/components/schemas/PhoneNumber'\n            ims:\n              type: array\n              items:\n                $ref: '#/components/schemas/InstantMessagingAddress'\n            photos:\n              type: array\n              items:\n                $ref: '#/components/schemas/Photo'\n            addresses:\n              type: array\n              items:\n                $ref: '#/components/schemas/Address'\n            groups:\n              type: array\n              items:\n                $ref: '#/components/schemas/Group'\n            entitlements:\n              type: array\n              items:\n                $ref: '#/components/schemas/Entitlement'\n            roles:\n              type: array\n              items:\n                $ref: '#/components/schemas/Role'\n            x509Certificates:\n              type: array\n              items:\n                $ref: '#/components/schemas/X509Certificate'\n            urn:ietf:params:scim:schemas:extension:gluu:2.0:User:\n              type: object\n              properties: {}\n              description: Extended attributes\n\n    Name:\n      type: object\n      properties:\n        familyName:\n          type: string\n        givenName:\n          type: string\n        middleName:\n          type: string\n        honorificPrefix:\n          type: string\n          description: A \"title\" like \"Ms.\", \"Mrs.\"\n        honorificSuffix:\n          type: string\n          description: Name suffix, like \"Junior\", \"The great\", \"III\"\n        formatted:\n          type: string\n          description: Full name, including all middle names, titles, and suffixes as appropriate\n      description: See section 4.1.1 of RFC 7643\n    Email:\n      type: object\n      properties:\n        value:\n          type: string\n          example: gossow@nsfw.com\n        display:\n          type: string\n        type:\n          type: string\n          example: work\n        primary:\n          type: boolean\n          description: Denotes if this is the preferred e-mail among others, if any\n      description: See section 4.1.2 of RFC 7643\n    PhoneNumber:\n      type: object\n      properties:\n        value:\n          type: string\n          example: +1-555-555-8377\n        display:\n          type: string\n        type:\n          type: string\n          example: fax\n        primary:\n          type: boolean\n          description: Denotes if this is the preferred phone number among others, if any\n      description: See section 4.1.2 of RFC 7643\n    InstantMessagingAddress:\n      type: object\n      properties:\n        value:\n          type: string\n        display:\n          type: string\n        type:\n          type: string\n          example: gtalk\n        primary:\n          type: boolean\n          description: Denotes if this is the preferred messaging addressed among others, if any\n      description: See section 4.1.2 of RFC 7643\n    Photo:\n      type: object\n      properties:\n        value:\n          type: string\n          example: https://pics.nsfw.com/gossow.png\n        display:\n          type: string\n        type:\n          type: string\n          example: thumbnail\n        primary:\n          type: boolean\n          description: Denotes if this is the preferred photo among others, if any\n      description: Points to a resource location representing the user's image. See section 4.1.2 of RFC 7643\n    Address:\n      type: object\n      properties:\n        formatted:\n          type: string\n          description: Full mailing address, formatted for display or use with a mailing label\n        streetAddress:\n          type: string\n          example: 56 Acacia Avenue\n        locality:\n          type: string\n          description: City or locality of the address\n        region:\n          type: string\n          description: State or region of the address\n        postalCode:\n          type: string\n          description: Zip code\n        country:\n          type: string\n          description: Country expressed in ISO 3166-1 \"alpha-2\" code format\n          example: UK\n        type:\n          type: string\n          example: home\n        primary:\n          type: boolean\n          description: Denotes if this is the preferred address among others, if any\n      description: Physical mailing address for this user. See section 4.1.2 of RFC 7643\n    Role:\n      type: object\n      properties:\n        value:\n          type: string\n          example: Project manager\n        display:\n          type: string\n        type:\n          type: string\n        primary:\n          type: boolean\n          description: Denotes if this is the preferred role among others, if any\n      description: See section 4.1.2 of RFC 7643\n    BaseResource:\n      type: object\n      properties:\n        schemas:\n          type: array\n          description: URIs that are used to indicate the namespaces of the SCIM schemas that define the attributes present in the current structure\n          items:\n            type: string\n        id:\n          type: string\n          description: A unique identifier for a SCIM resource. See section 3.1 of RFC 7643\n        meta:\n          $ref: '#/components/schemas/Meta'\n    Group:\n      type: object\n      properties:\n        value:\n          type: string\n          description: Group identifier\n          example: 180ee84f0671b1\n        $ref:\n          type: string\n          description: URI associated to the group\n          example: https://nsfw.com/scim/restv1/v2/Groups/180ee84f0671b1\n        display:\n          type: string\n          example: Cult managers\n        type:\n          type: string\n          description: Describes how the group membership was derived\n          example: direct\n      description: See section 4.1.2 of RFC 7643\n    Entitlement:\n      type: object\n      properties:\n        value:\n          type: string\n          example: Stakeholder\n        display:\n          type: string\n        type:\n          type: string\n        primary:\n          type: boolean\n          description: Denotes if this is the preferred entitlement among others, if any\n      description: Entitlements represent things a user has, like rights. See section 4.1.2 of RFC 7643\n    X509Certificate:\n      type: object\n      properties:\n        value:\n          type: string\n          description: DER-encoded X.509 certificate\n        display:\n          type: string\n        type:\n          type: string\n        primary:\n          type: boolean\n          description: Denotes if this is the preferred certificate among others, if any\n      description: A certificate associated with the user. See section 4.1.2 of RFC 7643\n    Meta:\n      type: object\n      properties:\n        resourceType:\n          type: string\n        created:\n          type: string\n        lastModified:\n          type: string\n        location:\n          type: string\n      description: See section 3.1 of RFC 7643\n\n    ScimPatchOperation:\n      required:\n        - op\n      type: object\n      properties:\n        op:\n          type: string\n          description: The kind of operation to perform\n          enum:\n            - add\n            - remove\n            - replace\n        path:\n          type: string\n          description: Required when op is remove, optional otherwise\n        value:\n          $ref: '#/components/schemas/AnyValue'\n          description: Only required when op is add or replace\n      description: See section 3.5.2 of RFC 7644\n\n    ScimPatchRequest:\n      description: Stores one or more patch operations\n      required:\n        - operations\n      type: object\n      properties:\n        schemas:\n          type: array\n          items:\n            type: string\n            example: urn:ietf:params:scim:api:messages:2.0:PatchOp\n        operations:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScimPatchOperation'\n    AnyValue:\n      description: Can be any value - string, number, boolean, array or object\n\n    AuthHealthStatus:\n      type: object\n      description: Auth Server health data\n      additionalProperties:\n        type: string\n\n    AdminRole:\n      type: object\n      description: Admin role\n      required:\n        - role\n      properties:\n        role:\n          type: string\n          description: role\n        description:\n          type: string\n          description: role description\n    AdminPermission:\n      type: object\n      description: Admin permission\n      required:\n        - permission\n      properties:\n        permission:\n          type: string\n          description: permission\n        description:\n          type: string\n          description: permission description\n    RolePermissionMapping:\n      type: object\n      description: Admin role-permission mapping\n      required:\n        - role\n      properties:\n        role:\n          type: string\n          description: role\n        permissions:\n          type: array\n          items:\n            type: string\n          description: permissions\n    LicenseRequest:\n      type: object\n      description: Admin license request\n      required:\n        - validityPeriod\n      properties:\n        validityPeriod:\n          type: string\n          description: The license will expire on following date.\n        maxActivations:\n          type: string\n          description: The maximum allowed activations of this license on different machines.\n        licenseActive:\n          type: string\n          description: Is license active?\n    LicenseResponse:\n      type: object\n      description: Admin license response\n      properties:\n        licenseEnabled:\n          type: boolean\n          description: Is license module enabled in admin-ui application?\n          default: false\n        productName:\n          type: string\n          description: The license is registered under following product.\n        productCode:\n          type: string\n          description: The short code is used in our API calls in order to identify the product.\n        licenseType:\n          type: string\n          description: The type of license (eg Perpetual, Time-based, Subscription, and Consumption-based licenses).\n        maxActivations:\n          type: integer\n          description: The license key.\n        licenseKey:\n          type: string\n          description: The license key.\n        licenseActive:\n          type: boolean\n          description: Is license active?\n          default: false\n        validityPeriod:\n          type: string\n          description: The license validity period\n        companyName:\n          type: string\n          description: The company name of the registered license.\n        customerEmail:\n          type: string\n          description: The customer email address of the registered license.\n        customerFirstName:\n          type: string\n          description: The customer first name.\n        customerLastName:\n          type: string\n          description: The customer last name.\n    ScimAppConfiguration:\n      type: object\n      properties:\n        baseDN:\n          type: string\n          description: Application config Base DN\n        applicationUrl:\n          type: string\n          description: Application base URL\n        baseEndpoint:\n          type: string\n          description: SCIM base endpoint URL\n        personCustomObjectClass:\n          type: string\n          description: Person Object Class\n        oxAuthIssuer:\n          type: string\n          description: Jans Auth - Issuer identifier. \n        protectionMode:\n          type: string\n          enum:\n            - OAUTH\n            - BYPASS\n          description: SCIM Protection Mode \n        maxCount:\n          type: integer\n          example: Maximum number of results per page\n        userExtensionSchemaURI:\n          type: string\n          description: User Extension Schema URI\n        loggingLevel:\n          type: string\n          description: Logging level for scim logger.\n          enum:\n            - TRACE\n            - DEBUG\n            - INFO\n            - WARN\n            - ERROR\n            - FATAL\n            - OFF\n        loggingLayout:\n          type: string\n          description: Logging layout used for Server loggers.\n        externalLoggerConfiguration:\n          type: string\n          description: Path to external log4j2 logging configuration.\n        metricReporterInterval:\n          type: integer\n          description: The interval for metric reporter in seconds.\n        metricReporterKeepDataDays:\n          type: integer\n          description: The days to keep metric reported data.\n        metricReporterEnabled:\n          type: boolean\n          description: Metric reported data enabled flag.\n        disableJdkLogger:\n          type: boolean\n          description: Boolean value specifying whether to enable JDK Loggers.\n        useLocalCache:\n          type: boolean\n          description: Boolean value specifying whether to enable local in-memory cache.\n  \n    Organization:\n      type: object\n      properties:\n        displayName:\n          type: string\n          description: Organization name\n        description:\n          type: string\n          description: Organization description \n        member:\n          type: string\n          description: String describing memberOf\n        countryName:\n          type: string\n          description: Organization country name\n        organization:\n          type: string\n        status:\n          type: string\n        managerGroup:\n          type: string\n          description: qualified id of the group\n          example: inum=60B7,ou=groups,o=jans\n        themeColor:\n          type: string\n          description: color of the theme\n          example: 166309\n        shortName:\n          type: string\n        customMessages:\n          type: array\n          items:\n            type: string\n        title:\n          type: string\n        jsLogoPath:\n          type: string\n          description: Path to organization logo image\n        jsFaviconPath:\n          type: string\n          description: Path to organization favicon image\n  \n  \n    FacterData:\n      type: object\n      properties:\n        memoryfree:\n          type: string\n          description: Server free memory\n        swapfree:\n          type: string\n          description: Server swap free\n        hostname:\n          type: string\n          description: Server hostname\n        ipaddress:\n          type: string\n          description: Server ipaddress\n        uptime:\n          type: string\n          description: Server uptime\n        free_disk_space:\n          type: string\n          description: Server free disk space\n        load_average:\n          type: string\n          description: Server average load time\n\n\n    StatsData:\n      type: object\n      properties:\n        dbType:\n          type: string\n          description: Jans Server DB type\n        lastUpdate:\n          type: string\n          description: Stats update time\n        facterData:\n          type: object\n          $ref: '#/components/schemas/FacterData'\n          description: Underlying Server stats\n\n  \n"
		}
	},
	"Error": "parse: parse spec: paths: /jans-config-api/api/v1/config/database/sql/{name}: get: operation \"get-config-database-sql-by-name\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/SqlConfiguration\": parse schema: passwordEncryptionMethod: parse enum values: duplicate enum value: 'CRYPT-BCRYPT'"
}