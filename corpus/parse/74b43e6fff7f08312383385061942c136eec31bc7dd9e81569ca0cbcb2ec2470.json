{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "npm/readme/oas-examples"
		},
		"file": {
			"name": "schema-types.yaml",
			"size": 0,
			"path": "3.1/yaml/schema-types.yaml",
			"byteSize": 33755,
			"content": "openapi: 3.1.0\ninfo:\n  title: Support for different schema types\n  description: |-\n    Additionally some support for features that schema types may individually support.\n\n    https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schemaObject\n  version: 1.0.0\nservers:\n  - url: https://httpbin.org\ntags:\n  - name: Strings\n    description: 'Showcasing handling and support for `type: string` schemas.'\n  - name: Numbers\n    description: 'Showcasing handling and support for `type: integer` and `type: number`\n      schemas.'\n  - name: Booleans\n    description: 'Showcasing handling and support for `type: boolean` schemas.'\n  - name: Arrays\n    description: 'Showcasing handling and support for `type: array` schemas.'\n  - name: Objects\n    description: 'Showcasing handling and support for `type: object` schemas.'\n  - name: Circular references\n    description: Showcasing handling and support for circular references (`$ref` pointers).\n  - name: ReadMe-flavors\n    description: Showcasing handling and support for various ReadMe-flavored schema\n      additions.\n  - name: Quirks\n    description: Showcasing handling and support for various schema type quirks.\npaths:\n  '/anything/strings':\n    post:\n      operationId: string_schemaSupport\n      summary: String support\n      description: \"Support and handling of `type: string` schemas.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n*\n        [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\"\n      tags:\n        - Strings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                stock:\n                  type: string\n                description (markdown):\n                  type: string\n                  description: 'This is a string with a **markdown** description:\n                    [link](ref:action-object)'\n                title:\n                  type: string\n                  title: This string has a `title` property.\n                required:\n                  type: string\n                  description: This parameter should be required.\n                default:\n                  type: string\n                  description: This string has a `default` of `default value`.\n                  default: default value\n                default (null):\n                  type: string\n                  description: This string has a `default` of `null`.\n                  default:\n                enum:\n                  type: string\n                  enum:\n                    - available\n                    - pending\n                    - sold\n                enum (with default):\n                  type: string\n                  description: This enum has a `default` of `available`.\n                  enum:\n                    - available\n                    - pending\n                    - sold\n                  default: available\n                enum (with empty option):\n                  type: string\n                  description: This enum has a an empty string (`\"\"`) as one of its\n                    available options.\n                  enum:\n                    - ''\n                    - available\n                    - pending\n                    - sold\n                enum (with empty option and empty default):\n                  type: string\n                  description: This enum has a an empty string (`\"\"`) as its only\n                    available option, and that same value is set as its `default`.\n                  enum:\n                    - ''\n                  default: ''\n              required:\n                - required\n      responses:\n        '200':\n          description: OK\n    put:\n      operationId: string_formatSupport\n      summary: '`format` data types'\n      description: \"Handling of `format` data types on `type: string` schemas.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n*\n        [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\"\n      tags:\n        - Strings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                binary:\n                  type: string\n                  format: binary\n                binary (with default):\n                  type: string\n                  format: binary\n                  default: data:text/plain;name=file1.txt;base64,dGVzdDE=\n                blob:\n                  type: string\n                  description: 'Strings with `format: blob` should render a `\u003ctextarea\u003e`.'\n                  format: blob\n                  example: This is some example content for this parameter.\n                date:\n                  type: string\n                  format: date\n                date (with pattern):\n                  type: string\n                  description: This accepts a pattern of matching `(\\d{4})-(\\d{2})-(\\d{2})`\n                  format: date\n                  pattern: \"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\"\n                date-time:\n                  type: string\n                  description: Unsupported due to the varying ways that `date-time`\n                    is utilized in API definitions for representing dates, the [lack\n                    of wide browser support for the input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local#Browser_compatibility),\n                    and that it's not [RFC 3339](https://tools.ietf.org/html/rfc3339)\n                    compliant.\n                  format: date-time\n                html:\n                  type: string\n                  description: 'Strings with `format: html` should render a `\u003ctextarea\u003e`.'\n                  format: html\n                json:\n                  type: string\n                  description: This is a special ReadMe data type to render a `\u003ctextarea\u003e`\n                    to be parsed as JSON\n                  format: json\n                string:\n                  type: string\n                  format: string\n                password:\n                  type: string\n                  format: password\n                'password (minLength: 5, maxLength: 20)':\n                  type: string\n                  description: 'This `format: password` input has a `minLength` and\n                    `maxLength` configured.'\n                  format: password\n                  minLength: 5\n                  maxLength: 20\n                url:\n                  type: string\n                  format: url\n                unknown-format:\n                  type: string\n                  format: unknown-format\n      responses:\n        '200':\n          description: OK\n  '/anything/strings/top-level-payloads':\n    post:\n      operationId: string_topLevel\n      summary: Top-level payloads\n      description: \"Handling of a `requestBody` payload that's a single `type: string`.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n*\n        [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\"\n      tags:\n        - Strings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n      responses:\n        '200':\n          description: OK\n    patch:\n      operationId: string_topLevelJSON\n      summary: Top-level payloads (JSON)\n      description: \"Handling of a `requestBody` payload that's a single `type: string`\n        but `format: json`.\\n\\n\\U0001F4DA OpenAPI specification references:\\n\\n* [3.0.3\n        Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n*\n        [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\"\n      tags:\n        - Strings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n              format: json\n      responses:\n        '200':\n          description: OK\n  '/anything/numbers':\n    post:\n      operationId: number_schemaSupport\n      summary: Number support\n      description: \"Support and handling of `type: integer` and `type: number` schemas.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n*\n        [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\"\n      tags:\n        - Numbers\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                integer (stock):\n                  type: integer\n                integer (markdown description):\n                  type: integer\n                  description: 'This is an `integer` with a **markdown** description:\n                    [link](ref:action-object)'\n                integer (title):\n                  type: integer\n                  title: This integer has a `title` property.\n                integer (required):\n                  type: integer\n                  description: This parameter should be required.\n                integer (default):\n                  type: integer\n                  description: This integer has a `default` of `1234`.\n                  default: 1234\n                integer (default null):\n                  type: integer\n                  description: This integer has a `default` of `null`.\n                  default:\n                integer (minimum / maximum):\n                  type: integer\n                  description: This integer has a `minimum` of `100` and `maximum`\n                    of `999`.\n                  minimum: 100\n                  maximum: 999\n                number (stock):\n                  type: number\n                number (markdown description):\n                  type: number\n                  description: 'This is a `number` with a **markdown** description:\n                    [link](ref:action-object)'\n                number (title):\n                  type: number\n                  title: This number has a `title` property.\n                number (required):\n                  type: number\n                  description: This parameter should be required.\n                number (default):\n                  type: number\n                  description: This number has a `default` of `12.34`.\n                  default: 12.34\n                number (default null):\n                  type: number\n                  description: This number has a `default` of `null`.\n                  default:\n              required:\n                - integer (required)\n                - number (required)\n      responses:\n        '200':\n          description: OK\n    put:\n      operationId: number_formatSupport\n      summary: '`format` data types'\n      description: \"Handling `format` data types on `type: integer` and `type: number`\n        schemas.\\n\\n\\U0001F4DA OpenAPI specification references:\\n\\n* [3.0.3 Data\n        Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n*\n        [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\"\n      tags:\n        - Numbers\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                'integer (format: int8)':\n                  type: integer\n                  format: int8\n                'integer (format: uint8)':\n                  type: integer\n                  format: uint8\n                'integer (format: int16)':\n                  type: integer\n                  format: int16\n                'integer (format: uint16)':\n                  type: integer\n                  format: uint16\n                'integer (format: int32)':\n                  type: integer\n                  format: int32\n                'integer (format: int32, multipleOf: 2)':\n                  type: integer\n                  description: 'This `integer` input has `multipleOf: 2` set on itself\n                    to control the increment/decrement value set.'\n                  format: int32\n                  multipleOf: 2\n                'integer (format: uint32)':\n                  type: integer\n                  format: uint32\n                'integer (format: int64)':\n                  type: integer\n                  format: int64\n                'integer (format: uint64)':\n                  type: integer\n                  format: uint64\n                'number (format: float)':\n                  type: number\n                  format: float\n                'number (format: double)':\n                  type: number\n                  format: double\n      responses:\n        '200':\n          description: OK\n    patch:\n      operationId: number_topLevel\n      summary: Top-level payloads\n      description: \"Handling of a `requestBody` payload that's a single `type: integer`.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n*\n        [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\"\n      tags:\n        - Numbers\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int64\n      responses:\n        '200':\n          description: OK\n  '/anything/booleans':\n    post:\n      operationId: boolean_schemaSupport\n      summary: Boolean support\n      description: \"Support and handling of `type: boolean` schemas.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n*\n        [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\"\n      tags:\n        - Booleans\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                stock:\n                  type: boolean\n                description (markdown):\n                  type: boolean\n                  description: 'This is a `boolean` with a **markdown** description:\n                    [link](ref:action-object)'\n                title:\n                  type: boolean\n                  title: This boolean has a `title` property.\n                required:\n                  type: boolean\n                  description: This parameter should be required.\n                default:\n                  type: boolean\n                  description: This boolean has a `default` of `false`.\n                  default: false\n                inferred from enum:\n                  description: Though this is missing a `type` declaration it should\n                    be treated as `boolean` because it contains an enum of `true`\n                    and `false`.\n                  enum:\n                    - true\n                    - false\n              required:\n                - required\n      responses:\n        '200':\n          description: OK\n    patch:\n      operationId: boolean_topLevel\n      summary: Top-level payloads\n      description: \"Handling of a `requestBody` payload that's a single `type: boolean`.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n*\n        [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\"\n      tags:\n        - Booleans\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: boolean\n      responses:\n        '200':\n          description: OK\n  '/anything/arrays':\n    post:\n      operationId: array_schemaSupport\n      summary: Array support\n      description: \"Support and handling of `type: array` schemas.\\n\\n\\U0001F4DA OpenAPI\n        specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n*\n        [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\"\n      tags:\n        - Arrays\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                stock:\n                  type: array\n                  items: {}\n                with markdown description:\n                  type: array\n                  description: 'This is an `array` with a **markdown** description:\n                    [link](ref:action-object)'\n                  items: {}\n                with title:\n                  type: array\n                  title: This array has a `title` property.\n                  items: {}\n                array\u003cany\u003e:\n                  type: array\n                  items: {}\n                array\u003cany\u003e (but no `items` property):\n                  type: array\n                  description: |-\n                    Techncally this is a malformed schema, but we support it (for legacy reasons) and repair it to have `items: {}` when we generate JSON Schema for the form.\n\n                    Though its supported, not all OpenAPI validators allow it though so our support may regress at some point in the future.\n                array\u003cstring\u003e:\n                  type: array\n                  items:\n                    type: string\n                array\u003cstring\u003e (with overall `null` default):\n                  type: array\n                  items:\n                    type: string\n                  default:\n                array\u003cstring\u003e (loaded via a $ref):\n                  type: array\n                  items:\n                    '$ref': '#/components/schemas/string_enum'\n                array\u003cinteger\u003e:\n                  type: array\n                  items:\n                    type: integer\n                    format: int64\n                array\u003cnumber\u003e:\n                  type: array\n                  items:\n                    type: number\n                    format: float\n                array\u003cboolean\u003e:\n                  type: array\n                  items:\n                    type: boolean\n                array\u003cobject\u003e:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      string:\n                        type: string\n                      integer:\n                        type: integer\n                      number:\n                        type: number\n                      boolean:\n                        type: boolean\n                array\u003cobject\u003e (additionalProperties):\n                  type: array\n                  items:\n                    type: object\n                    additionalProperties: true\n                array\u003carray\u003cobject\u003e\u003e:\n                  type: array\n                  items:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        string:\n                          type: string\n      responses:\n        '200':\n          description: OK\n  '/anything/arrays/top-level-payloads':\n    post:\n      operationId: array_topLevelObjects\n      summary: Top-level payloads (objects)\n      description: \"Handling of a `requestBody` payload that's a `type: array` composed\n        of objects.\\n\\n\\U0001F4DA OpenAPI specification references:\\n\\n* [3.0.3 Data\n        Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n*\n        [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\"\n      tags:\n        - Arrays\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: object\n                properties:\n                  string:\n                    type: string\n                  integer:\n                    type: integer\n                  number:\n                    type: number\n                  boolean:\n                    type: boolean\n                  array:\n                    type: array\n                    items: {}\n                  object:\n                    type: object\n                    additionalProperties: true\n      responses:\n        '200':\n          description: OK\n    patch:\n      operationId: array_topLevelPrimitives\n      summary: Top-level payloads (primitives)\n      description: \"Handling of a `requestBody` payload that's a `type: array` composed\n        of primitives.\\n\\n\\U0001F4DA OpenAPI specification references:\\n\\n* [3.0.3\n        Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n*\n        [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\"\n      tags:\n        - Arrays\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n      responses:\n        '200':\n          description: OK\n  '/anything/objects':\n    post:\n      operationId: object_schemSupport\n      summary: Object support\n      description: \"Support and handling of `type: object` schemas.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n*\n        [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\"\n      tags:\n        - Objects\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                object:\n                  type: object\n                  properties:\n                    string:\n                      type: string\n                    integer:\n                      type: integer\n                    number:\n                      type: number\n                    object:\n                      type: object\n                      properties:\n                        string:\n                          type: string\n                    array:\n                      type: array\n                      items:\n                        type: string\n                object (with `title`):\n                  title: This object has a `title` property.\n                  type: object\n                  properties:\n                    string:\n                      type: string\n                    integer:\n                      type: integer\n                    number:\n                      type: number\n                    object:\n                      type: object\n                      properties:\n                        string:\n                          type: string\n                    array:\n                      type: array\n                      items:\n                        type: string\n                object (without an explicit `type`):\n                  description: 'Though this object is missing an explicit `type: object`\n                    property it should still be recognized as an object because it\n                    has `properties`.'\n                  properties:\n                    property1:\n                      type: integer\n                      format: int64\n                    property2:\n                      type: integer\n                      format: int64\n                object (additionalProperties):\n                  type: object\n                  additionalProperties: true\n                object (without `properties`):\n                  type: object\n                  description: 'Because this object is missing a `properties` declaration\n                    we should treat it as if `additionalProperties: true` were present\n                    on it so the enduser can still use it with the form.'\n      responses:\n        '200':\n          description: OK\n  '/anything/circular':\n    post:\n      operationId: circular_handling\n      summary: Nested circular $ref\n      description: \"Handling of a nested `$ref` that recursively references itself.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Reference Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#referenceObject)\\n\\n*\n        [3.1.0 Reference Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#referenceObject)\"\n      tags:\n        - Circular references\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                circular:\n                  '$ref': '#/components/schemas/Circular'\n      responses:\n        '200':\n          description: OK\n    patch:\n      operationId: circular_topLevel\n      summary: Top-level circular $ref\n      description: \"Handling of a top-level request body `$ref` that recursively references\n        itself.\\n\\n\\U0001F4DA OpenAPI specification references:\\n\\n* [3.0.3 Reference\n        Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#referenceObject)\\n\\n*\n        [3.1.0 Reference Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#referenceObject)\"\n      tags:\n        - Circular references\n      requestBody:\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/Circular'\n      responses:\n        '200':\n          description: OK\n  '/anything/raw_body/top-level-payloads':\n    post:\n      operationId: raw_body_topLevel\n      summary: Top-level RAW_BODY (string)\n      description: |-\n        This is a special value on ReadMe to denote a top level property. This can be done better using JSON Schema, but from ReadMe's dash, this is the only way to do it.\n\n        \u003chttps://docs.readme.com/docs/raw-body-content\u003e\n      tags:\n        - ReadMe-flavors\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                RAW_BODY:\n                  type: string\n      responses:\n        '200':\n          description: OK\n    patch:\n      operationId: raw_body_topLevelJSON\n      summary: Top-level RAW_BODY (JSON)\n      description: |-\n        This is a special value on ReadMe to denote a top level property. This can be done better using JSON Schema, but from ReadMe's dash, this is the only way to do it.\n\n        \u003chttps://docs.readme.com/docs/raw-body-content\u003e\n      tags:\n        - ReadMe-flavors\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                RAW_BODY:\n                  type: string\n                  format: json\n      responses:\n        '200':\n          description: OK\n  '/anything/quirks':\n    post:\n      operationId: quirks_missingType\n      summary: Missing schema type\n      description: \"Handling cases for when `type` is missing from a schema.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n*\n        [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\"\n      tags:\n        - Quirks\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                missing type:\n                  description: Though this request body property is missing a `type`\n                    declaration we should stil render a `string` input box so that\n                    the user can interact with it.\n                  default: default value\n                missing type (on completely empty schema): {}\n                implicit array:\n                  description: \"This array property is missing an explicit `type:\n                    array` but since it has an `items` declaration we're implicitly\n                    treating it as an array.\"\n                  items:\n                    type: integer\n                implicit object:\n                  description: \"This object property is missing an explicit `type:\n                    object` but since it has an `properties` declaration we're implicitly\n                    treating it as an object.\"\n                  properties:\n                    name:\n                      type: string\n                      default: buster\n  '/anything/quirks/polymorphism':\n    post:\n      operationId: quirks_incompatibleNestedAllOf\n      summary: Incompatible nested allOf schemas\n      description: \"Handling cases for when a nested `allOf` cannot be merged together.\\n\\n\\U0001F4DA\n        OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n*\n        [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\"\n      tags:\n        - Quirks\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                incompatible:\n                  description: |-\n                    This property consists of an `allOf` of a `string` and an `integer` schema. Since these two schemas are incompatible and we're unable to merge them per the `allOf` rules, we instead eliminate the `allOf` and render out a `string` instead.\n\n                    This is obviously less than ideal but it assures that the user can still interact with the property.\n                  allOf:\n                    - type: string\n                    - type: integer\n                compatible:\n                  description: Unlike the `incompatible` property above this `allOf`\n                    consists of two objects that **can** be merged.\n                  allOf:\n                    - type: object\n                      properties:\n                        name:\n                          type: string\n                    - type: object\n                      properties:\n                        name:\n                          example: buster\n        required: true\n    put:\n      operationId: quirks_entirelyIncompatibleAllOf\n      summary: Incompatible allOf schemas on a root requestBody\n      description: \"When an `allOf` sits at the top of a request body schema and it\n        cannot be merged, we're unable to render out anything for an input because\n        there's no usable schema for us.\\n\\n\\U0001F4DA OpenAPI specification references:\\n\\n*\n        [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n*\n        [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\"\n      tags:\n        - Quirks\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - type: string\n                - type: integer\n        required: true\n    patch:\n      operationId: quirks_partiallyUsableIncompatibleAllOf\n      summary: Incompatible allOf schemas on a root requestBody (with other schema\n        properties)\n      description: \"Like `quirks_entirelyIncompatibleAllOf`, when we're to merge an\n        `allOf` together we eliminate it, however this schema here has additional\n        properties (`description`) alongside that `allOf` so it's not a wholly empty\n        schema and we can use it. Unfortunately since we don't have any of the real\n        data for the request body to use we treat this as a string input with a `format`\n        of `json` so that the user can input a raw JSON input to make their request\n        with.\\n\\nUnfortunately in this case we don't support `description` on the\n        root schema so it won't show up, but a large input box still will for the\n        user. Obviously all of this less than ideal as we're losing request body schema\n        data but since the `allOf` present is incompatible it's unusable and this\n        is the best we can do under the circumstances.\\n\\n\\U0001F4DA OpenAPI specification\n        references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n*\n        [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\"\n      tags:\n        - Quirks\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: I am a description\n              allOf:\n                - type: string\n                - type: integer\n        required: true\ncomponents:\n  schemas:\n    string_enum:\n      enum:\n        - available\n        - pending\n        - sold\n      type: string\n    Circular:\n      type: object\n      properties:\n        string:\n          type: string\n        children:\n          type: array\n          items:\n            '$ref': '#/components/schemas/Circular'\n",
			"canonicalURL": "/npm/readme/oas-examples@c1172d94f9ee52c3c1847b73f9ae1ad55945824b/-/blob/3.1/yaml/schema-types.yaml",
			"externalURLs": []
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/anything/arrays\": post: operation \"array_schemaSupport\": requestBody: parse content: application/json: schema: parse schema: property \"array\u003cstring\u003e (with overall `null` default)\": at 1:2377: parse default: unexpected default \"null\" value"
}