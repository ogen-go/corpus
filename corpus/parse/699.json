{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hyecheol123/MakeBSSGreatAgain-API-Documentation"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "openapi/openapi.yaml",
			"content": "openapi: 3.0.3\ninfo:\n  version: 1.0.0\n  title: Make BSS Great Again (bshs.or.kr)\n  license:\n    name: BSD-3-Clause\n    url: https://opensource.org/licenses/BSD-3-Clause\n  termsOfService: 'https://bshs.or.kr/terms/'\n  contact:\n    email: hyecheol123@gmail.com\n    url: 'http://bshs.or.kr/contact'\n  x-logo:\n    url: 'logo.svg'\n  description:\n    $ref: description/main.md\nexternalDocs:\n  description: GitHub repository for this API Documentation.\n  url: 'https://github.com/hyecheol123/MakeBSSGreatAgin_API_Documentation'\ntags:\n  - name: Auth\n    description: Authorization/Authentication operations\n  - name: User\n    description: User account related operations\n  - name: Board\n    description: Articles/Threads/Posts related operations\n  - name: Comment\n    description: Comments related operations\n  - name: Notification\n    description: Notification related operations\nservers:\n  - url: 'https://api.bshs.or.kr'\npaths:\n  # auth APIs\n  /auth/login:\n    post:\n      $ref: paths/auth/login/post.yaml\n  /auth/logout:\n    delete:\n      $ref: paths/auth/logout/delete.yaml\n  /auth/logout/other-sessions:\n    delete:\n      $ref: paths/auth/logout/other-sessions/delete.yaml\n  /auth/renew:\n    get:\n      $ref: paths/auth/renew/get.yaml\n  /auth/password:\n    put:\n      $ref: paths/auth/password/put.yaml\n  # user APIs\n  /user:\n    post: # New user\n      $ref: paths/user/post.yaml\n    get: # Search Users - Also need to handle promotion (verified user)\n      $ref: paths/user/get.yaml\n  /user/{username}:\n    get: # Retrieve user information\n      $ref: paths/user/{username}/get.yaml\n    put: # Update user information\n      $ref: paths/user/{username}/put.yaml\n  /user/verify-email:\n    post: # Create verification ticket\n      $ref: paths/user/verify-email/post.yaml\n  /user/verify-email/{ticketID}:\n    put: # Verify Email\n      $ref: paths/user/verify-email/{ticketID}/put.yaml\n  /user/find-username:\n    get:\n      $ref: paths/user/find-username/get.yaml\n  /user/find-username/email:\n    post: # Send username to user's email\n      $ref: paths/user/find-username/email/post.yaml\n  /user/password-reset:\n    post: # Send password reset ticket/link to user's email\n      $ref: paths/user/password-reset/post.yaml\n  /user/password-reset/{ticketID}:\n    put: # Use password reset ticket to reset the password\n      $ref: paths/user/password-reset/{ticketID}/put.yaml\n  /user/report/{username}:\n    post: # Report fake/spam user to admin\n      $ref: paths/user/report/{username}/post.yaml\n  /user/promote:\n    get: # get instant-promote challenges\n      $ref: paths/user/promote/get.yaml\n  /user/promote/challenge-answer:\n    post: # send the answer of challenges, get the result back.\n      $ref: paths/user/promote/challenge-answer/post.yaml\n  /user/promote/{username}:\n    post: # Other user to upvote this user to be promoted (verify as a real alumni).\n      $ref: paths/user/promote/{username}/post.yaml\n    get: # retrieve list of upvoters.\n      $ref: paths/user/promote/{username}/get.yaml\n    delete: # Cancel upvote\n      $ref: paths/user/promote/{username}/delete.yaml\n  # board APIs\n  /board:\n    post: # Make new post and write\n      $ref: paths/board/post.yaml\n    get: # Retrieve list of articles / Support searching by using QueryString\n      $ref: paths/board/get.yaml\n  /board/category:\n    post: # Create new category\n      $ref: paths/board/category/post.yaml\n    get: # Retrieve list of categories\n      $ref: paths/board/category/get.yaml\n  /board/category/{categoryName}:\n    delete: # Remove category\n      $ref: paths/board/category/{categoryName}/delete.yaml\n  /board/{postID}:\n    delete: # Delete a post\n      $ref: paths/board/{postID}/delete.yaml\n    put: # Revise a post\n      $ref: paths/board/{postID}/put.yaml\n    get: # Retrieve a post\n      $ref: paths/board/{postID}/get.yaml\n  /board/like/{postID}:\n    post: # Press the like button\n      $ref: paths/board/like/{postID}/post.yaml\n    delete: # Un-press the like button\n      $ref: paths/board/like/{postID}/delete.yaml\n    get: # Retrieve the number of likes\n      $ref: paths/board/like/{postID}/get.yaml\n  /board/report/{postID}:\n    post: # Report harmful article to admin\n      $ref: paths/board/report/{postID}/post.yaml\n  # comment APIs\n  /comment:\n    post:  # New comment\n      $ref: paths/comment/post.yaml\n    get: # Retrieve comment - use page to divide long result\n      $ref: paths/comment/get.yaml\n  /comment/{commentID}:\n    delete: # Delete single comment\n      $ref: paths/comment/{commentID}/delete.yaml\n    put: # Update single comment\n      $ref: paths/comment/{commentID}/put.yaml\n  /comment/report/{commentID}:\n    post: # Report harmful comment to admin\n      $ref: paths/comment/report/{commentID}/post.yaml\n  # Notification API\n  /notification:\n    post: # Create new notification\n      $ref: paths/notification/post.yaml\n    get: # List notifications\n      $ref: paths/notification/get.yaml\n  /notification/read/{objectID}:\n    post: # Notification has been read\n      $ref: paths/notification/read/{objectID}/post.yaml\n  /notification/email:\n    post: # Send email\n      $ref: paths/notification/email/post.yaml\n  /notification/email/digest:\n    post: # Send user weekly activity digest - only specified admin can use this API\n      $ref: paths/notification/email/digest/post.yaml\ncomponents:\n  securitySchemes:\n    accessToken:\n      type: apiKey\n      in: cookie\n      name: X-ACCESS-TOKEN\n      description: |\n        Access token will be used to **authenticate/authorize user to use the API**.\n    refreshToken:\n      type: apiKey\n      in: cookie\n      name: X-REFRESH-TOKEN\n      description: |\n        Refresh token will be used to **renew expired access token**.\n        If the refresh token also expired, the user need to login again by using basic authentication.\n"
		}
	},
	"Error": "json: cannot unmarshal object into Go struct field Info.info.description of type string"
}