{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/openapi-generator"
		},
		"file": {
			"name": "3_0_3_unit_test_spec.yaml",
			"size": 0,
			"path": "modules/openapi-generator/src/test/resources/3_0/unit_test_spec/3_0_3_unit_test_spec.yaml",
			"byteSize": 151625,
			"content": "openapi: 3.0.3\nservers:\n- url: https://someserver.com/v1\ninfo:\n  title: openapi 3.0.3 sample spec\n  version: 0.0.1\n  description: sample spec for testing openapi functionality, built from json schema\n    tests for draft6\ntags:\n- name: operation.requestBody\n- name: path.post\n- name: contentType_json\npaths:\n  /requestBody/postAdditionalpropertiesAllowsASchemaWhichShouldValidateRequestBody:\n    post:\n      operationId: postAdditionalpropertiesAllowsASchemaWhichShouldValidateRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdditionalpropertiesAllowsASchemaWhichShouldValidate'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesAllowsASchemaWhichShouldValidate'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAdditionalpropertiesAllowsASchemaWhichShouldValidateResponseBodyForContentTypes:\n    post:\n      operationId: postAdditionalpropertiesAllowsASchemaWhichShouldValidateResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdditionalpropertiesAllowsASchemaWhichShouldValidate'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesAllowsASchemaWhichShouldValidate'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAdditionalpropertiesCanExistByItselfRequestBody:\n    post:\n      operationId: postAdditionalpropertiesCanExistByItselfRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdditionalpropertiesCanExistByItself'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesCanExistByItself'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAdditionalpropertiesCanExistByItselfResponseBodyForContentTypes:\n    post:\n      operationId: postAdditionalpropertiesCanExistByItselfResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdditionalpropertiesCanExistByItself'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesCanExistByItself'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAdditionalpropertiesAreAllowedByDefaultRequestBody:\n    post:\n      operationId: postAdditionalpropertiesAreAllowedByDefaultRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdditionalpropertiesAreAllowedByDefault'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesAreAllowedByDefault'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAdditionalpropertiesAreAllowedByDefaultResponseBodyForContentTypes:\n    post:\n      operationId: postAdditionalpropertiesAreAllowedByDefaultResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdditionalpropertiesAreAllowedByDefault'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesAreAllowedByDefault'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAdditionalpropertiesShouldNotLookInApplicatorsRequestBody:\n    post:\n      operationId: postAdditionalpropertiesShouldNotLookInApplicatorsRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdditionalpropertiesShouldNotLookInApplicators'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AdditionalpropertiesShouldNotLookInApplicators'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAdditionalpropertiesShouldNotLookInApplicatorsResponseBodyForContentTypes:\n    post:\n      operationId: postAdditionalpropertiesShouldNotLookInApplicatorsResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdditionalpropertiesShouldNotLookInApplicators'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AdditionalpropertiesShouldNotLookInApplicators'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAllofRequestBody:\n    post:\n      operationId: postAllofRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Allof'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/Allof'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAllofResponseBodyForContentTypes:\n    post:\n      operationId: postAllofResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Allof'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/Allof'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAllofWithBaseSchemaRequestBody:\n    post:\n      operationId: postAllofWithBaseSchemaRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AllofWithBaseSchema'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AllofWithBaseSchema'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAllofWithBaseSchemaResponseBodyForContentTypes:\n    post:\n      operationId: postAllofWithBaseSchemaResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AllofWithBaseSchema'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AllofWithBaseSchema'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAllofSimpleTypesRequestBody:\n    post:\n      operationId: postAllofSimpleTypesRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AllofSimpleTypes'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AllofSimpleTypes'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAllofSimpleTypesResponseBodyForContentTypes:\n    post:\n      operationId: postAllofSimpleTypesResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AllofSimpleTypes'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AllofSimpleTypes'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAllofWithOneEmptySchemaRequestBody:\n    post:\n      operationId: postAllofWithOneEmptySchemaRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AllofWithOneEmptySchema'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AllofWithOneEmptySchema'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAllofWithOneEmptySchemaResponseBodyForContentTypes:\n    post:\n      operationId: postAllofWithOneEmptySchemaResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AllofWithOneEmptySchema'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AllofWithOneEmptySchema'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAllofWithTwoEmptySchemasRequestBody:\n    post:\n      operationId: postAllofWithTwoEmptySchemasRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AllofWithTwoEmptySchemas'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AllofWithTwoEmptySchemas'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAllofWithTwoEmptySchemasResponseBodyForContentTypes:\n    post:\n      operationId: postAllofWithTwoEmptySchemasResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AllofWithTwoEmptySchemas'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AllofWithTwoEmptySchemas'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAllofWithTheFirstEmptySchemaRequestBody:\n    post:\n      operationId: postAllofWithTheFirstEmptySchemaRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AllofWithTheFirstEmptySchema'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AllofWithTheFirstEmptySchema'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAllofWithTheFirstEmptySchemaResponseBodyForContentTypes:\n    post:\n      operationId: postAllofWithTheFirstEmptySchemaResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AllofWithTheFirstEmptySchema'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AllofWithTheFirstEmptySchema'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAllofWithTheLastEmptySchemaRequestBody:\n    post:\n      operationId: postAllofWithTheLastEmptySchemaRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AllofWithTheLastEmptySchema'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AllofWithTheLastEmptySchema'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAllofWithTheLastEmptySchemaResponseBodyForContentTypes:\n    post:\n      operationId: postAllofWithTheLastEmptySchemaResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AllofWithTheLastEmptySchema'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AllofWithTheLastEmptySchema'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postNestedAllofToCheckValidationSemanticsRequestBody:\n    post:\n      operationId: postNestedAllofToCheckValidationSemanticsRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NestedAllofToCheckValidationSemantics'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/NestedAllofToCheckValidationSemantics'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postNestedAllofToCheckValidationSemanticsResponseBodyForContentTypes:\n    post:\n      operationId: postNestedAllofToCheckValidationSemanticsResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NestedAllofToCheckValidationSemantics'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/NestedAllofToCheckValidationSemantics'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAllofCombinedWithAnyofOneofRequestBody:\n    post:\n      operationId: postAllofCombinedWithAnyofOneofRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AllofCombinedWithAnyofOneof'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AllofCombinedWithAnyofOneof'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAllofCombinedWithAnyofOneofResponseBodyForContentTypes:\n    post:\n      operationId: postAllofCombinedWithAnyofOneofResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AllofCombinedWithAnyofOneof'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AllofCombinedWithAnyofOneof'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAnyofRequestBody:\n    post:\n      operationId: postAnyofRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Anyof'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/Anyof'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAnyofResponseBodyForContentTypes:\n    post:\n      operationId: postAnyofResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Anyof'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/Anyof'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAnyofWithBaseSchemaRequestBody:\n    post:\n      operationId: postAnyofWithBaseSchemaRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnyofWithBaseSchema'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AnyofWithBaseSchema'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAnyofWithBaseSchemaResponseBodyForContentTypes:\n    post:\n      operationId: postAnyofWithBaseSchemaResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnyofWithBaseSchema'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AnyofWithBaseSchema'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAnyofComplexTypesRequestBody:\n    post:\n      operationId: postAnyofComplexTypesRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnyofComplexTypes'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AnyofComplexTypes'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAnyofComplexTypesResponseBodyForContentTypes:\n    post:\n      operationId: postAnyofComplexTypesResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnyofComplexTypes'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AnyofComplexTypes'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postAnyofWithOneEmptySchemaRequestBody:\n    post:\n      operationId: postAnyofWithOneEmptySchemaRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnyofWithOneEmptySchema'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/AnyofWithOneEmptySchema'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postAnyofWithOneEmptySchemaResponseBodyForContentTypes:\n    post:\n      operationId: postAnyofWithOneEmptySchemaResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnyofWithOneEmptySchema'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/AnyofWithOneEmptySchema'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postNestedAnyofToCheckValidationSemanticsRequestBody:\n    post:\n      operationId: postNestedAnyofToCheckValidationSemanticsRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NestedAnyofToCheckValidationSemantics'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/NestedAnyofToCheckValidationSemantics'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postNestedAnyofToCheckValidationSemanticsResponseBodyForContentTypes:\n    post:\n      operationId: postNestedAnyofToCheckValidationSemanticsResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NestedAnyofToCheckValidationSemantics'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/NestedAnyofToCheckValidationSemantics'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postInvalidStringValueForDefaultRequestBody:\n    post:\n      operationId: postInvalidStringValueForDefaultRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/InvalidStringValueForDefault'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/InvalidStringValueForDefault'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postInvalidStringValueForDefaultResponseBodyForContentTypes:\n    post:\n      operationId: postInvalidStringValueForDefaultResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidStringValueForDefault'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/InvalidStringValueForDefault'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postTheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissingRequestBody:\n    post:\n      operationId: postTheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissingRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postTheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissingResponseBodyForContentTypes:\n    post:\n      operationId: postTheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissingResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postSimpleEnumValidationRequestBody:\n    post:\n      operationId: postSimpleEnumValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SimpleEnumValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/SimpleEnumValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postSimpleEnumValidationResponseBodyForContentTypes:\n    post:\n      operationId: postSimpleEnumValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleEnumValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/SimpleEnumValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postEnumsInPropertiesRequestBody:\n    post:\n      operationId: postEnumsInPropertiesRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EnumsInProperties'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/EnumsInProperties'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postEnumsInPropertiesResponseBodyForContentTypes:\n    post:\n      operationId: postEnumsInPropertiesResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnumsInProperties'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/EnumsInProperties'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postEnumWithEscapedCharactersRequestBody:\n    post:\n      operationId: postEnumWithEscapedCharactersRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EnumWithEscapedCharacters'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/EnumWithEscapedCharacters'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postEnumWithEscapedCharactersResponseBodyForContentTypes:\n    post:\n      operationId: postEnumWithEscapedCharactersResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnumWithEscapedCharacters'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/EnumWithEscapedCharacters'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postEnumWithFalseDoesNotMatch0RequestBody:\n    post:\n      operationId: postEnumWithFalseDoesNotMatch0RequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EnumWithFalseDoesNotMatch0'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/EnumWithFalseDoesNotMatch0'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postEnumWithFalseDoesNotMatch0ResponseBodyForContentTypes:\n    post:\n      operationId: postEnumWithFalseDoesNotMatch0ResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnumWithFalseDoesNotMatch0'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/EnumWithFalseDoesNotMatch0'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postEnumWithTrueDoesNotMatch1RequestBody:\n    post:\n      operationId: postEnumWithTrueDoesNotMatch1RequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EnumWithTrueDoesNotMatch1'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/EnumWithTrueDoesNotMatch1'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postEnumWithTrueDoesNotMatch1ResponseBodyForContentTypes:\n    post:\n      operationId: postEnumWithTrueDoesNotMatch1ResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnumWithTrueDoesNotMatch1'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/EnumWithTrueDoesNotMatch1'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postEnumWith0DoesNotMatchFalseRequestBody:\n    post:\n      operationId: postEnumWith0DoesNotMatchFalseRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EnumWith0DoesNotMatchFalse'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/EnumWith0DoesNotMatchFalse'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postEnumWith0DoesNotMatchFalseResponseBodyForContentTypes:\n    post:\n      operationId: postEnumWith0DoesNotMatchFalseResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnumWith0DoesNotMatchFalse'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/EnumWith0DoesNotMatchFalse'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postEnumWith1DoesNotMatchTrueRequestBody:\n    post:\n      operationId: postEnumWith1DoesNotMatchTrueRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EnumWith1DoesNotMatchTrue'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/EnumWith1DoesNotMatchTrue'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postEnumWith1DoesNotMatchTrueResponseBodyForContentTypes:\n    post:\n      operationId: postEnumWith1DoesNotMatchTrueResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnumWith1DoesNotMatchTrue'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/EnumWith1DoesNotMatchTrue'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postNulCharactersInStringsRequestBody:\n    post:\n      operationId: postNulCharactersInStringsRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NulCharactersInStrings'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/NulCharactersInStrings'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postNulCharactersInStringsResponseBodyForContentTypes:\n    post:\n      operationId: postNulCharactersInStringsResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NulCharactersInStrings'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/NulCharactersInStrings'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postEmailFormatRequestBody:\n    post:\n      operationId: postEmailFormatRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EmailFormat'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/EmailFormat'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postEmailFormatResponseBodyForContentTypes:\n    post:\n      operationId: postEmailFormatResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmailFormat'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/EmailFormat'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postIpv4FormatRequestBody:\n    post:\n      operationId: postIpv4FormatRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Ipv4Format'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/Ipv4Format'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postIpv4FormatResponseBodyForContentTypes:\n    post:\n      operationId: postIpv4FormatResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ipv4Format'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/Ipv4Format'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postIpv6FormatRequestBody:\n    post:\n      operationId: postIpv6FormatRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Ipv6Format'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/Ipv6Format'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postIpv6FormatResponseBodyForContentTypes:\n    post:\n      operationId: postIpv6FormatResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ipv6Format'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/Ipv6Format'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postHostnameFormatRequestBody:\n    post:\n      operationId: postHostnameFormatRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/HostnameFormat'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/HostnameFormat'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postHostnameFormatResponseBodyForContentTypes:\n    post:\n      operationId: postHostnameFormatResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HostnameFormat'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/HostnameFormat'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postDateTimeFormatRequestBody:\n    post:\n      operationId: postDateTimeFormatRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DateTimeFormat'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/DateTimeFormat'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postDateTimeFormatResponseBodyForContentTypes:\n    post:\n      operationId: postDateTimeFormatResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DateTimeFormat'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/DateTimeFormat'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postJsonPointerFormatRequestBody:\n    post:\n      operationId: postJsonPointerFormatRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JsonPointerFormat'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/JsonPointerFormat'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postJsonPointerFormatResponseBodyForContentTypes:\n    post:\n      operationId: postJsonPointerFormatResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JsonPointerFormat'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/JsonPointerFormat'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postUriFormatRequestBody:\n    post:\n      operationId: postUriFormatRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UriFormat'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/UriFormat'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postUriFormatResponseBodyForContentTypes:\n    post:\n      operationId: postUriFormatResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UriFormat'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/UriFormat'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postUriReferenceFormatRequestBody:\n    post:\n      operationId: postUriReferenceFormatRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UriReferenceFormat'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/UriReferenceFormat'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postUriReferenceFormatResponseBodyForContentTypes:\n    post:\n      operationId: postUriReferenceFormatResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UriReferenceFormat'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/UriReferenceFormat'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postUriTemplateFormatRequestBody:\n    post:\n      operationId: postUriTemplateFormatRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UriTemplateFormat'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/UriTemplateFormat'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postUriTemplateFormatResponseBodyForContentTypes:\n    post:\n      operationId: postUriTemplateFormatResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UriTemplateFormat'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/UriTemplateFormat'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postNestedItemsRequestBody:\n    post:\n      operationId: postNestedItemsRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NestedItems'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/NestedItems'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postNestedItemsResponseBodyForContentTypes:\n    post:\n      operationId: postNestedItemsResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NestedItems'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/NestedItems'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postMaximumValidationRequestBody:\n    post:\n      operationId: postMaximumValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MaximumValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/MaximumValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postMaximumValidationResponseBodyForContentTypes:\n    post:\n      operationId: postMaximumValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MaximumValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/MaximumValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postMaximumValidationWithUnsignedIntegerRequestBody:\n    post:\n      operationId: postMaximumValidationWithUnsignedIntegerRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MaximumValidationWithUnsignedInteger'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/MaximumValidationWithUnsignedInteger'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes:\n    post:\n      operationId: postMaximumValidationWithUnsignedIntegerResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MaximumValidationWithUnsignedInteger'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/MaximumValidationWithUnsignedInteger'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postMaxitemsValidationRequestBody:\n    post:\n      operationId: postMaxitemsValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MaxitemsValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/MaxitemsValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postMaxitemsValidationResponseBodyForContentTypes:\n    post:\n      operationId: postMaxitemsValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MaxitemsValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/MaxitemsValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postMaxlengthValidationRequestBody:\n    post:\n      operationId: postMaxlengthValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MaxlengthValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/MaxlengthValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postMaxlengthValidationResponseBodyForContentTypes:\n    post:\n      operationId: postMaxlengthValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MaxlengthValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/MaxlengthValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postMaxpropertiesValidationRequestBody:\n    post:\n      operationId: postMaxpropertiesValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MaxpropertiesValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/MaxpropertiesValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postMaxpropertiesValidationResponseBodyForContentTypes:\n    post:\n      operationId: postMaxpropertiesValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MaxpropertiesValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/MaxpropertiesValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postMaxproperties0MeansTheObjectIsEmptyRequestBody:\n    post:\n      operationId: postMaxproperties0MeansTheObjectIsEmptyRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Maxproperties0MeansTheObjectIsEmpty'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/Maxproperties0MeansTheObjectIsEmpty'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postMaxproperties0MeansTheObjectIsEmptyResponseBodyForContentTypes:\n    post:\n      operationId: postMaxproperties0MeansTheObjectIsEmptyResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Maxproperties0MeansTheObjectIsEmpty'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/Maxproperties0MeansTheObjectIsEmpty'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postMinimumValidationRequestBody:\n    post:\n      operationId: postMinimumValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MinimumValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/MinimumValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postMinimumValidationResponseBodyForContentTypes:\n    post:\n      operationId: postMinimumValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MinimumValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/MinimumValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postMinimumValidationWithSignedIntegerRequestBody:\n    post:\n      operationId: postMinimumValidationWithSignedIntegerRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MinimumValidationWithSignedInteger'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/MinimumValidationWithSignedInteger'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postMinimumValidationWithSignedIntegerResponseBodyForContentTypes:\n    post:\n      operationId: postMinimumValidationWithSignedIntegerResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MinimumValidationWithSignedInteger'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/MinimumValidationWithSignedInteger'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postMinitemsValidationRequestBody:\n    post:\n      operationId: postMinitemsValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MinitemsValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/MinitemsValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postMinitemsValidationResponseBodyForContentTypes:\n    post:\n      operationId: postMinitemsValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MinitemsValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/MinitemsValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postMinlengthValidationRequestBody:\n    post:\n      operationId: postMinlengthValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MinlengthValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/MinlengthValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postMinlengthValidationResponseBodyForContentTypes:\n    post:\n      operationId: postMinlengthValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MinlengthValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/MinlengthValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postMinpropertiesValidationRequestBody:\n    post:\n      operationId: postMinpropertiesValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MinpropertiesValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/MinpropertiesValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postMinpropertiesValidationResponseBodyForContentTypes:\n    post:\n      operationId: postMinpropertiesValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MinpropertiesValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/MinpropertiesValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postByIntRequestBody:\n    post:\n      operationId: postByIntRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ByInt'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/ByInt'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postByIntResponseBodyForContentTypes:\n    post:\n      operationId: postByIntResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ByInt'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/ByInt'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postByNumberRequestBody:\n    post:\n      operationId: postByNumberRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ByNumber'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/ByNumber'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postByNumberResponseBodyForContentTypes:\n    post:\n      operationId: postByNumberResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ByNumber'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/ByNumber'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postBySmallNumberRequestBody:\n    post:\n      operationId: postBySmallNumberRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BySmallNumber'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/BySmallNumber'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postBySmallNumberResponseBodyForContentTypes:\n    post:\n      operationId: postBySmallNumberResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BySmallNumber'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/BySmallNumber'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postInvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInfRequestBody:\n    post:\n      operationId: postInvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInfRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/InvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInf'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/InvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInf'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postInvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInfResponseBodyForContentTypes:\n    post:\n      operationId: postInvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInfResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInf'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/InvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInf'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postNotRequestBody:\n    post:\n      operationId: postNotRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Not'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/Not'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postNotResponseBodyForContentTypes:\n    post:\n      operationId: postNotResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Not'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/Not'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postNotMoreComplexSchemaRequestBody:\n    post:\n      operationId: postNotMoreComplexSchemaRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NotMoreComplexSchema'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/NotMoreComplexSchema'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postNotMoreComplexSchemaResponseBodyForContentTypes:\n    post:\n      operationId: postNotMoreComplexSchemaResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotMoreComplexSchema'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/NotMoreComplexSchema'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postForbiddenPropertyRequestBody:\n    post:\n      operationId: postForbiddenPropertyRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ForbiddenProperty'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/ForbiddenProperty'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postForbiddenPropertyResponseBodyForContentTypes:\n    post:\n      operationId: postForbiddenPropertyResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenProperty'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/ForbiddenProperty'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postOneofRequestBody:\n    post:\n      operationId: postOneofRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Oneof'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/Oneof'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postOneofResponseBodyForContentTypes:\n    post:\n      operationId: postOneofResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Oneof'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/Oneof'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postOneofWithBaseSchemaRequestBody:\n    post:\n      operationId: postOneofWithBaseSchemaRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OneofWithBaseSchema'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/OneofWithBaseSchema'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postOneofWithBaseSchemaResponseBodyForContentTypes:\n    post:\n      operationId: postOneofWithBaseSchemaResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OneofWithBaseSchema'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/OneofWithBaseSchema'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postOneofComplexTypesRequestBody:\n    post:\n      operationId: postOneofComplexTypesRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OneofComplexTypes'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/OneofComplexTypes'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postOneofComplexTypesResponseBodyForContentTypes:\n    post:\n      operationId: postOneofComplexTypesResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OneofComplexTypes'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/OneofComplexTypes'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postOneofWithEmptySchemaRequestBody:\n    post:\n      operationId: postOneofWithEmptySchemaRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OneofWithEmptySchema'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/OneofWithEmptySchema'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postOneofWithEmptySchemaResponseBodyForContentTypes:\n    post:\n      operationId: postOneofWithEmptySchemaResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OneofWithEmptySchema'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/OneofWithEmptySchema'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postNestedOneofToCheckValidationSemanticsRequestBody:\n    post:\n      operationId: postNestedOneofToCheckValidationSemanticsRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NestedOneofToCheckValidationSemantics'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/NestedOneofToCheckValidationSemantics'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postNestedOneofToCheckValidationSemanticsResponseBodyForContentTypes:\n    post:\n      operationId: postNestedOneofToCheckValidationSemanticsResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NestedOneofToCheckValidationSemantics'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/NestedOneofToCheckValidationSemantics'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postPatternValidationRequestBody:\n    post:\n      operationId: postPatternValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatternValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/PatternValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postPatternValidationResponseBodyForContentTypes:\n    post:\n      operationId: postPatternValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PatternValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/PatternValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postPatternIsNotAnchoredRequestBody:\n    post:\n      operationId: postPatternIsNotAnchoredRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatternIsNotAnchored'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/PatternIsNotAnchored'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postPatternIsNotAnchoredResponseBodyForContentTypes:\n    post:\n      operationId: postPatternIsNotAnchoredResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PatternIsNotAnchored'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/PatternIsNotAnchored'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postObjectPropertiesValidationRequestBody:\n    post:\n      operationId: postObjectPropertiesValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObjectPropertiesValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/ObjectPropertiesValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postObjectPropertiesValidationResponseBodyForContentTypes:\n    post:\n      operationId: postObjectPropertiesValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectPropertiesValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/ObjectPropertiesValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postPropertiesWithEscapedCharactersRequestBody:\n    post:\n      operationId: postPropertiesWithEscapedCharactersRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PropertiesWithEscapedCharacters'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/PropertiesWithEscapedCharacters'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postPropertiesWithEscapedCharactersResponseBodyForContentTypes:\n    post:\n      operationId: postPropertiesWithEscapedCharactersResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PropertiesWithEscapedCharacters'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/PropertiesWithEscapedCharacters'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postPropertyNamedRefThatIsNotAReferenceRequestBody:\n    post:\n      operationId: postPropertyNamedRefThatIsNotAReferenceRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/PropertyNamedRefThatIsNotAReference'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postPropertyNamedRefThatIsNotAReferenceResponseBodyForContentTypes:\n    post:\n      operationId: postPropertyNamedRefThatIsNotAReferenceResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/PropertyNamedRefThatIsNotAReference'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postRefInAdditionalpropertiesRequestBody:\n    post:\n      operationId: postRefInAdditionalpropertiesRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RefInAdditionalproperties'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/RefInAdditionalproperties'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postRefInAdditionalpropertiesResponseBodyForContentTypes:\n    post:\n      operationId: postRefInAdditionalpropertiesResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefInAdditionalproperties'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/RefInAdditionalproperties'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postRefInItemsRequestBody:\n    post:\n      operationId: postRefInItemsRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RefInItems'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/RefInItems'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postRefInItemsResponseBodyForContentTypes:\n    post:\n      operationId: postRefInItemsResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefInItems'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/RefInItems'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postRefInPropertyRequestBody:\n    post:\n      operationId: postRefInPropertyRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RefInProperty'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/RefInProperty'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postRefInPropertyResponseBodyForContentTypes:\n    post:\n      operationId: postRefInPropertyResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefInProperty'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/RefInProperty'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postRefInAllofRequestBody:\n    post:\n      operationId: postRefInAllofRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RefInAllof'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/RefInAllof'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postRefInAllofResponseBodyForContentTypes:\n    post:\n      operationId: postRefInAllofResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefInAllof'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/RefInAllof'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postRefInOneofRequestBody:\n    post:\n      operationId: postRefInOneofRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RefInOneof'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/RefInOneof'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postRefInOneofResponseBodyForContentTypes:\n    post:\n      operationId: postRefInOneofResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefInOneof'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/RefInOneof'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postRefInAnyofRequestBody:\n    post:\n      operationId: postRefInAnyofRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RefInAnyof'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/RefInAnyof'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postRefInAnyofResponseBodyForContentTypes:\n    post:\n      operationId: postRefInAnyofResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefInAnyof'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/RefInAnyof'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postRequiredValidationRequestBody:\n    post:\n      operationId: postRequiredValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequiredValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/RequiredValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postRequiredValidationResponseBodyForContentTypes:\n    post:\n      operationId: postRequiredValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequiredValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/RequiredValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postRequiredDefaultValidationRequestBody:\n    post:\n      operationId: postRequiredDefaultValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequiredDefaultValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/RequiredDefaultValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postRequiredDefaultValidationResponseBodyForContentTypes:\n    post:\n      operationId: postRequiredDefaultValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequiredDefaultValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/RequiredDefaultValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postRequiredWithEmptyArrayRequestBody:\n    post:\n      operationId: postRequiredWithEmptyArrayRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequiredWithEmptyArray'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/RequiredWithEmptyArray'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postRequiredWithEmptyArrayResponseBodyForContentTypes:\n    post:\n      operationId: postRequiredWithEmptyArrayResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequiredWithEmptyArray'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/RequiredWithEmptyArray'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postIntegerTypeMatchesIntegersRequestBody:\n    post:\n      operationId: postIntegerTypeMatchesIntegersRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IntegerTypeMatchesIntegers'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/IntegerTypeMatchesIntegers'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postIntegerTypeMatchesIntegersResponseBodyForContentTypes:\n    post:\n      operationId: postIntegerTypeMatchesIntegersResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IntegerTypeMatchesIntegers'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/IntegerTypeMatchesIntegers'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postNumberTypeMatchesNumbersRequestBody:\n    post:\n      operationId: postNumberTypeMatchesNumbersRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NumberTypeMatchesNumbers'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/NumberTypeMatchesNumbers'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postNumberTypeMatchesNumbersResponseBodyForContentTypes:\n    post:\n      operationId: postNumberTypeMatchesNumbersResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NumberTypeMatchesNumbers'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/NumberTypeMatchesNumbers'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postStringTypeMatchesStringsRequestBody:\n    post:\n      operationId: postStringTypeMatchesStringsRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StringTypeMatchesStrings'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/StringTypeMatchesStrings'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postStringTypeMatchesStringsResponseBodyForContentTypes:\n    post:\n      operationId: postStringTypeMatchesStringsResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StringTypeMatchesStrings'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/StringTypeMatchesStrings'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postObjectTypeMatchesObjectsRequestBody:\n    post:\n      operationId: postObjectTypeMatchesObjectsRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObjectTypeMatchesObjects'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/ObjectTypeMatchesObjects'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postObjectTypeMatchesObjectsResponseBodyForContentTypes:\n    post:\n      operationId: postObjectTypeMatchesObjectsResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectTypeMatchesObjects'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/ObjectTypeMatchesObjects'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postBooleanTypeMatchesBooleansRequestBody:\n    post:\n      operationId: postBooleanTypeMatchesBooleansRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BooleanTypeMatchesBooleans'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/BooleanTypeMatchesBooleans'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postBooleanTypeMatchesBooleansResponseBodyForContentTypes:\n    post:\n      operationId: postBooleanTypeMatchesBooleansResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BooleanTypeMatchesBooleans'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/BooleanTypeMatchesBooleans'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postNullTypeMatchesOnlyTheNullObjectRequestBody:\n    post:\n      operationId: postNullTypeMatchesOnlyTheNullObjectRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NullTypeMatchesOnlyTheNullObject'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/NullTypeMatchesOnlyTheNullObject'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes:\n    post:\n      operationId: postNullTypeMatchesOnlyTheNullObjectResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NullTypeMatchesOnlyTheNullObject'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/NullTypeMatchesOnlyTheNullObject'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postArrayTypeMatchesArraysRequestBody:\n    post:\n      operationId: postArrayTypeMatchesArraysRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ArrayTypeMatchesArrays'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/ArrayTypeMatchesArrays'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postArrayTypeMatchesArraysResponseBodyForContentTypes:\n    post:\n      operationId: postArrayTypeMatchesArraysResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ArrayTypeMatchesArrays'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/ArrayTypeMatchesArrays'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postUniqueitemsValidationRequestBody:\n    post:\n      operationId: postUniqueitemsValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UniqueitemsValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/UniqueitemsValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postUniqueitemsValidationResponseBodyForContentTypes:\n    post:\n      operationId: postUniqueitemsValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UniqueitemsValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/UniqueitemsValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\n  /requestBody/postUniqueitemsFalseValidationRequestBody:\n    post:\n      operationId: postUniqueitemsFalseValidationRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UniqueitemsFalseValidation'\n            x-schema-test-examples:\n              $ref: '#/components/x-schema-test-examples/UniqueitemsFalseValidation'\n        required: true\n      responses:\n        '200':\n          description: success\n      tags:\n      - operation.requestBody\n      - path.post\n      - contentType_json\n  /responseBody/postUniqueitemsFalseValidationResponseBodyForContentTypes:\n    post:\n      operationId: postUniqueitemsFalseValidationResponseBodyForContentTypes\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UniqueitemsFalseValidation'\n              x-schema-test-examples:\n                $ref: '#/components/x-schema-test-examples/UniqueitemsFalseValidation'\n      tags:\n      - response.content.contentType.schema\n      - path.post\n      - contentType_json\ncomponents:\n  schemas:\n    AdditionalpropertiesAllowsASchemaWhichShouldValidate:\n      properties:\n        foo: {}\n        bar: {}\n      additionalProperties:\n        type: boolean\n    AdditionalpropertiesCanExistByItself:\n      additionalProperties:\n        type: boolean\n    AdditionalpropertiesAreAllowedByDefault:\n      properties:\n        foo: {}\n        bar: {}\n    AdditionalpropertiesShouldNotLookInApplicators:\n      allOf:\n      - properties:\n          foo: {}\n      additionalProperties:\n        type: boolean\n    Allof:\n      allOf:\n      - properties:\n          bar:\n            type: integer\n        required:\n        - bar\n      - properties:\n          foo:\n            type: string\n        required:\n        - foo\n    AllofWithBaseSchema:\n      properties:\n        bar:\n          type: integer\n      required:\n      - bar\n      allOf:\n      - properties:\n          foo:\n            type: string\n        required:\n        - foo\n      - properties:\n          baz:\n            type: 'null'\n        required:\n        - baz\n    AllofSimpleTypes:\n      allOf:\n      - maximum: 30\n      - minimum: 20\n    AllofWithOneEmptySchema:\n      allOf:\n      - {}\n    AllofWithTwoEmptySchemas:\n      allOf:\n      - {}\n      - {}\n    AllofWithTheFirstEmptySchema:\n      allOf:\n      - {}\n      - type: number\n    AllofWithTheLastEmptySchema:\n      allOf:\n      - type: number\n      - {}\n    NestedAllofToCheckValidationSemantics:\n      allOf:\n      - allOf:\n        - type: 'null'\n    AllofCombinedWithAnyofOneof:\n      allOf:\n      - multipleOf: 2\n      anyOf:\n      - multipleOf: 3\n      oneOf:\n      - multipleOf: 5\n    Anyof:\n      anyOf:\n      - type: integer\n      - minimum: 2\n    AnyofWithBaseSchema:\n      type: string\n      anyOf:\n      - maxLength: 2\n      - minLength: 4\n    AnyofComplexTypes:\n      anyOf:\n      - properties:\n          bar:\n            type: integer\n        required:\n        - bar\n      - properties:\n          foo:\n            type: string\n        required:\n        - foo\n    AnyofWithOneEmptySchema:\n      anyOf:\n      - type: number\n      - {}\n    NestedAnyofToCheckValidationSemantics:\n      anyOf:\n      - anyOf:\n        - type: 'null'\n    InvalidStringValueForDefault:\n      properties:\n        bar:\n          type: string\n          minLength: 4\n          default: bad\n    TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing:\n      type: object\n      properties:\n        alpha:\n          type: number\n          maximum: 3\n          default: 5\n    SimpleEnumValidation:\n      enum:\n      - 1\n      - 2\n      - 3\n    EnumsInProperties:\n      type: object\n      properties:\n        foo:\n          enum:\n          - foo\n        bar:\n          enum:\n          - bar\n      required:\n      - bar\n    EnumWithEscapedCharacters:\n      enum:\n      - 'foo\n\n        bar'\n      - \"foo\\rbar\"\n    EnumWithFalseDoesNotMatch0:\n      enum:\n      - false\n    EnumWithTrueDoesNotMatch1:\n      enum:\n      - true\n    EnumWith0DoesNotMatchFalse:\n      enum:\n      - 0\n    EnumWith1DoesNotMatchTrue:\n      enum:\n      - 1\n    NulCharactersInStrings:\n      enum:\n      - \"hello\\0there\"\n    EmailFormat:\n      format: email\n    Ipv4Format:\n      format: ipv4\n    Ipv6Format:\n      format: ipv6\n    HostnameFormat:\n      format: hostname\n    DateTimeFormat:\n      format: date-time\n    JsonPointerFormat:\n      format: json-pointer\n    UriFormat:\n      format: uri\n    UriReferenceFormat:\n      format: uri-reference\n    UriTemplateFormat:\n      format: uri-template\n    NestedItems:\n      type: array\n      items:\n        type: array\n        items:\n          type: array\n          items:\n            type: array\n            items:\n              type: number\n    MaximumValidation:\n      maximum: 3.0\n    MaximumValidationWithUnsignedInteger:\n      maximum: 300\n    MaxitemsValidation:\n      maxItems: 2\n    MaxlengthValidation:\n      maxLength: 2\n    MaxpropertiesValidation:\n      maxProperties: 2\n    Maxproperties0MeansTheObjectIsEmpty:\n      maxProperties: 0\n    MinimumValidation:\n      minimum: 1.1\n    MinimumValidationWithSignedInteger:\n      minimum: -2\n    MinitemsValidation:\n      minItems: 1\n    MinlengthValidation:\n      minLength: 2\n    MinpropertiesValidation:\n      minProperties: 1\n    ByInt:\n      multipleOf: 2\n    ByNumber:\n      multipleOf: 1.5\n    BySmallNumber:\n      multipleOf: 0.0001\n    InvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInf:\n      type: integer\n      multipleOf: 0.123456789\n    Not:\n      not:\n        type: integer\n    NotMoreComplexSchema:\n      not:\n        type: object\n        properties:\n          foo:\n            type: string\n    ForbiddenProperty:\n      properties:\n        foo:\n          not: {}\n    Oneof:\n      oneOf:\n      - type: integer\n      - minimum: 2\n    OneofWithBaseSchema:\n      type: string\n      oneOf:\n      - minLength: 2\n      - maxLength: 4\n    OneofComplexTypes:\n      oneOf:\n      - properties:\n          bar:\n            type: integer\n        required:\n        - bar\n      - properties:\n          foo:\n            type: string\n        required:\n        - foo\n    OneofWithEmptySchema:\n      oneOf:\n      - type: number\n      - {}\n    NestedOneofToCheckValidationSemantics:\n      oneOf:\n      - oneOf:\n        - type: 'null'\n    PatternValidation:\n      pattern: ^a*$\n    PatternIsNotAnchored:\n      pattern: a+\n    ObjectPropertiesValidation:\n      properties:\n        foo:\n          type: integer\n        bar:\n          type: string\n    PropertiesWithEscapedCharacters:\n      properties:\n        ? 'foo\n\n          bar'\n        : type: number\n        foo\"bar:\n          type: number\n        foo\\bar:\n          type: number\n        \"foo\\rbar\":\n          type: number\n        \"foo\\tbar\":\n          type: number\n        \"foo\\fbar\":\n          type: number\n    PropertyNamedRefThatIsNotAReference:\n      properties:\n        $ref:\n          type: string\n    RefInAdditionalproperties:\n      additionalProperties:\n        $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'\n    RefInItems:\n      items:\n        $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'\n    RefInProperty:\n      properties:\n        a:\n          $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'\n    RefInAllof:\n      allOf:\n      - $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'\n    RefInOneof:\n      oneOf:\n      - $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'\n    RefInAnyof:\n      anyOf:\n      - $ref: '#/components/schemas/PropertyNamedRefThatIsNotAReference'\n    RequiredValidation:\n      properties:\n        foo: {}\n        bar: {}\n      required:\n      - foo\n    RequiredDefaultValidation:\n      properties:\n        foo: {}\n    RequiredWithEmptyArray:\n      properties:\n        foo: {}\n      required: []\n    IntegerTypeMatchesIntegers:\n      type: integer\n    NumberTypeMatchesNumbers:\n      type: number\n    StringTypeMatchesStrings:\n      type: string\n    ObjectTypeMatchesObjects:\n      type: object\n    BooleanTypeMatchesBooleans:\n      type: boolean\n    NullTypeMatchesOnlyTheNullObject:\n      type: 'null'\n    ArrayTypeMatchesArrays:\n      type: array\n      items: {}\n    UniqueitemsValidation:\n      uniqueItems: true\n    UniqueitemsFalseValidation:\n      uniqueItems: false\n  x-schema-test-examples:\n    AdditionalpropertiesAllowsASchemaWhichShouldValidate:\n      NoAdditionalPropertiesIsValid:\n        description: no additional properties is valid\n        data:\n          foo: 1\n        valid: true\n      AnAdditionalValidPropertyIsValid:\n        description: an additional valid property is valid\n        data:\n          foo: 1\n          bar: 2\n          quux: true\n        valid: true\n      AnAdditionalInvalidPropertyIsInvalid:\n        description: an additional invalid property is invalid\n        data:\n          foo: 1\n          bar: 2\n          quux: 12\n        valid: false\n    AdditionalpropertiesCanExistByItself:\n      AnAdditionalValidPropertyIsValid:\n        description: an additional valid property is valid\n        data:\n          foo: true\n        valid: true\n      AnAdditionalInvalidPropertyIsInvalid:\n        description: an additional invalid property is invalid\n        data:\n          foo: 1\n        valid: false\n    AdditionalpropertiesAreAllowedByDefault:\n      AdditionalPropertiesAreAllowed:\n        description: additional properties are allowed\n        data:\n          foo: 1\n          bar: 2\n          quux: true\n        valid: true\n    AdditionalpropertiesShouldNotLookInApplicators:\n      PropertiesDefinedInAllofAreNotExamined:\n        description: properties defined in allOf are not examined\n        data:\n          foo: 1\n          bar: true\n        valid: false\n      ValidTestCase:\n        description: valid test case\n        data:\n          foo: false\n          bar: true\n        valid: true\n    Allof:\n      Allof:\n        description: allOf\n        data:\n          foo: baz\n          bar: 2\n        valid: true\n      MismatchSecond:\n        description: mismatch second\n        data:\n          foo: baz\n        valid: false\n      MismatchFirst:\n        description: mismatch first\n        data:\n          bar: 2\n        valid: false\n      WrongType:\n        description: wrong type\n        data:\n          foo: baz\n          bar: quux\n        valid: false\n    AllofWithBaseSchema:\n      Valid:\n        description: valid\n        data:\n          foo: quux\n          bar: 2\n          baz: null\n        valid: true\n      MismatchBaseSchema:\n        description: mismatch base schema\n        data:\n          foo: quux\n          baz: null\n        valid: false\n      MismatchFirstAllof:\n        description: mismatch first allOf\n        data:\n          bar: 2\n          baz: null\n        valid: false\n      MismatchSecondAllof:\n        description: mismatch second allOf\n        data:\n          foo: quux\n          bar: 2\n        valid: false\n      MismatchBoth:\n        description: mismatch both\n        data:\n          bar: 2\n        valid: false\n    AllofSimpleTypes:\n      Valid:\n        description: valid\n        data: 25\n        valid: true\n      MismatchOne:\n        description: mismatch one\n        data: 35\n        valid: false\n    AllofWithOneEmptySchema:\n      AnyDataIsValid:\n        description: any data is valid\n        data: 1\n        valid: true\n    AllofWithTwoEmptySchemas:\n      AnyDataIsValid:\n        description: any data is valid\n        data: 1\n        valid: true\n    AllofWithTheFirstEmptySchema:\n      NumberIsValid:\n        description: number is valid\n        data: 1\n        valid: true\n      StringIsInvalid:\n        description: string is invalid\n        data: foo\n        valid: false\n    AllofWithTheLastEmptySchema:\n      NumberIsValid:\n        description: number is valid\n        data: 1\n        valid: true\n      StringIsInvalid:\n        description: string is invalid\n        data: foo\n        valid: false\n    NestedAllofToCheckValidationSemantics:\n      NullIsValid:\n        description: null is valid\n        data: null\n        valid: true\n      AnythingNonNullIsInvalid:\n        description: anything non-null is invalid\n        data: 123\n        valid: false\n    AllofCombinedWithAnyofOneof:\n      AllofFalseAnyofFalseOneofFalse:\n        description: 'allOf: false, anyOf: false, oneOf: false'\n        data: 1\n        valid: false\n      AllofFalseAnyofFalseOneofTrue:\n        description: 'allOf: false, anyOf: false, oneOf: true'\n        data: 5\n        valid: false\n      AllofFalseAnyofTrueOneofFalse:\n        description: 'allOf: false, anyOf: true, oneOf: false'\n        data: 3\n        valid: false\n      AllofFalseAnyofTrueOneofTrue:\n        description: 'allOf: false, anyOf: true, oneOf: true'\n        data: 15\n        valid: false\n      AllofTrueAnyofFalseOneofFalse:\n        description: 'allOf: true, anyOf: false, oneOf: false'\n        data: 2\n        valid: false\n      AllofTrueAnyofFalseOneofTrue:\n        description: 'allOf: true, anyOf: false, oneOf: true'\n        data: 10\n        valid: false\n      AllofTrueAnyofTrueOneofFalse:\n        description: 'allOf: true, anyOf: true, oneOf: false'\n        data: 6\n        valid: false\n      AllofTrueAnyofTrueOneofTrue:\n        description: 'allOf: true, anyOf: true, oneOf: true'\n        data: 30\n        valid: true\n    Anyof:\n      FirstAnyofValid:\n        description: first anyOf valid\n        data: 1\n        valid: true\n      SecondAnyofValid:\n        description: second anyOf valid\n        data: 2.5\n        valid: true\n      BothAnyofValid:\n        description: both anyOf valid\n        data: 3\n        valid: true\n      NeitherAnyofValid:\n        description: neither anyOf valid\n        data: 1.5\n        valid: false\n    AnyofWithBaseSchema:\n      MismatchBaseSchema:\n        description: mismatch base schema\n        data: 3\n        valid: false\n      OneAnyofValid:\n        description: one anyOf valid\n        data: foobar\n        valid: true\n      BothAnyofInvalid:\n        description: both anyOf invalid\n        data: foo\n        valid: false\n    AnyofComplexTypes:\n      FirstAnyofValidComplex:\n        description: first anyOf valid (complex)\n        data:\n          bar: 2\n        valid: true\n      SecondAnyofValidComplex:\n        description: second anyOf valid (complex)\n        data:\n          foo: baz\n        valid: true\n      BothAnyofValidComplex:\n        description: both anyOf valid (complex)\n        data:\n          foo: baz\n          bar: 2\n        valid: true\n      NeitherAnyofValidComplex:\n        description: neither anyOf valid (complex)\n        data:\n          foo: 2\n          bar: quux\n        valid: false\n    AnyofWithOneEmptySchema:\n      StringIsValid:\n        description: string is valid\n        data: foo\n        valid: true\n      NumberIsValid:\n        description: number is valid\n        data: 123\n        valid: true\n    NestedAnyofToCheckValidationSemantics:\n      NullIsValid:\n        description: null is valid\n        data: null\n        valid: true\n      AnythingNonNullIsInvalid:\n        description: anything non-null is invalid\n        data: 123\n        valid: false\n    InvalidStringValueForDefault:\n      ValidWhenPropertyIsSpecified:\n        description: valid when property is specified\n        data:\n          bar: good\n        valid: true\n      StillValidWhenTheInvalidDefaultIsUsed:\n        description: still valid when the invalid default is used\n        data: {}\n        valid: true\n    TheDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing:\n      AnExplicitPropertyValueIsCheckedAgainstMaximumPassing:\n        description: an explicit property value is checked against maximum (passing)\n        data:\n          alpha: 1\n        valid: true\n      AnExplicitPropertyValueIsCheckedAgainstMaximumFailing:\n        description: an explicit property value is checked against maximum (failing)\n        data:\n          alpha: 5\n        valid: false\n      MissingPropertiesAreNotFilledInWithTheDefault:\n        description: missing properties are not filled in with the default\n        data: {}\n        valid: true\n    SimpleEnumValidation:\n      OneOfTheEnumIsValid:\n        description: one of the enum is valid\n        data: 1\n        valid: true\n      SomethingElseIsInvalid:\n        description: something else is invalid\n        data: 4\n        valid: false\n    EnumsInProperties:\n      BothPropertiesAreValid:\n        description: both properties are valid\n        data:\n          foo: foo\n          bar: bar\n        valid: true\n      WrongFooValue:\n        description: wrong foo value\n        data:\n          foo: foot\n          bar: bar\n        valid: false\n      WrongBarValue:\n        description: wrong bar value\n        data:\n          foo: foo\n          bar: bart\n        valid: false\n      MissingOptionalPropertyIsValid:\n        description: missing optional property is valid\n        data:\n          bar: bar\n        valid: true\n      MissingRequiredPropertyIsInvalid:\n        description: missing required property is invalid\n        data:\n          foo: foo\n        valid: false\n      MissingAllPropertiesIsInvalid:\n        description: missing all properties is invalid\n        data: {}\n        valid: false\n    EnumWithEscapedCharacters:\n      Member1IsValid:\n        description: member 1 is valid\n        data: 'foo\n\n          bar'\n        valid: true\n      Member2IsValid:\n        description: member 2 is valid\n        data: \"foo\\rbar\"\n        valid: true\n      AnotherStringIsInvalid:\n        description: another string is invalid\n        data: abc\n        valid: false\n    EnumWithFalseDoesNotMatch0:\n      FalseIsValid:\n        description: false is valid\n        data: false\n        valid: true\n      IntegerZeroIsInvalid:\n        description: integer zero is invalid\n        data: 0\n        valid: false\n      FloatZeroIsInvalid:\n        description: float zero is invalid\n        data: 0.0\n        valid: false\n    EnumWithTrueDoesNotMatch1:\n      TrueIsValid:\n        description: true is valid\n        data: true\n        valid: true\n      IntegerOneIsInvalid:\n        description: integer one is invalid\n        data: 1\n        valid: false\n      FloatOneIsInvalid:\n        description: float one is invalid\n        data: 1.0\n        valid: false\n    EnumWith0DoesNotMatchFalse:\n      FalseIsInvalid:\n        description: false is invalid\n        data: false\n        valid: false\n      IntegerZeroIsValid:\n        description: integer zero is valid\n        data: 0\n        valid: true\n      FloatZeroIsValid:\n        description: float zero is valid\n        data: 0.0\n        valid: true\n    EnumWith1DoesNotMatchTrue:\n      TrueIsInvalid:\n        description: true is invalid\n        data: true\n        valid: false\n      IntegerOneIsValid:\n        description: integer one is valid\n        data: 1\n        valid: true\n      FloatOneIsValid:\n        description: float one is valid\n        data: 1.0\n        valid: true\n    NulCharactersInStrings:\n      MatchStringWithNul:\n        description: match string with nul\n        data: \"hello\\0there\"\n        valid: true\n      DoNotMatchStringLackingNul:\n        description: do not match string lacking nul\n        data: hellothere\n        valid: false\n    EmailFormat:\n      AllStringFormatsIgnoreIntegers:\n        description: all string formats ignore integers\n        data: 12\n        valid: true\n      AllStringFormatsIgnoreFloats:\n        description: all string formats ignore floats\n        data: 13.7\n        valid: true\n      AllStringFormatsIgnoreObjects:\n        description: all string formats ignore objects\n        data: {}\n        valid: true\n      AllStringFormatsIgnoreArrays:\n        description: all string formats ignore arrays\n        data: []\n        valid: true\n      AllStringFormatsIgnoreBooleans:\n        description: all string formats ignore booleans\n        data: false\n        valid: true\n      AllStringFormatsIgnoreNulls:\n        description: all string formats ignore nulls\n        data: null\n        valid: true\n    Ipv4Format:\n      AllStringFormatsIgnoreIntegers:\n        description: all string formats ignore integers\n        data: 12\n        valid: true\n      AllStringFormatsIgnoreFloats:\n        description: all string formats ignore floats\n        data: 13.7\n        valid: true\n      AllStringFormatsIgnoreObjects:\n        description: all string formats ignore objects\n        data: {}\n        valid: true\n      AllStringFormatsIgnoreArrays:\n        description: all string formats ignore arrays\n        data: []\n        valid: true\n      AllStringFormatsIgnoreBooleans:\n        description: all string formats ignore booleans\n        data: false\n        valid: true\n      AllStringFormatsIgnoreNulls:\n        description: all string formats ignore nulls\n        data: null\n        valid: true\n    Ipv6Format:\n      AllStringFormatsIgnoreIntegers:\n        description: all string formats ignore integers\n        data: 12\n        valid: true\n      AllStringFormatsIgnoreFloats:\n        description: all string formats ignore floats\n        data: 13.7\n        valid: true\n      AllStringFormatsIgnoreObjects:\n        description: all string formats ignore objects\n        data: {}\n        valid: true\n      AllStringFormatsIgnoreArrays:\n        description: all string formats ignore arrays\n        data: []\n        valid: true\n      AllStringFormatsIgnoreBooleans:\n        description: all string formats ignore booleans\n        data: false\n        valid: true\n      AllStringFormatsIgnoreNulls:\n        description: all string formats ignore nulls\n        data: null\n        valid: true\n    HostnameFormat:\n      AllStringFormatsIgnoreIntegers:\n        description: all string formats ignore integers\n        data: 12\n        valid: true\n      AllStringFormatsIgnoreFloats:\n        description: all string formats ignore floats\n        data: 13.7\n        valid: true\n      AllStringFormatsIgnoreObjects:\n        description: all string formats ignore objects\n        data: {}\n        valid: true\n      AllStringFormatsIgnoreArrays:\n        description: all string formats ignore arrays\n        data: []\n        valid: true\n      AllStringFormatsIgnoreBooleans:\n        description: all string formats ignore booleans\n        data: false\n        valid: true\n      AllStringFormatsIgnoreNulls:\n        description: all string formats ignore nulls\n        data: null\n        valid: true\n    DateTimeFormat:\n      AllStringFormatsIgnoreIntegers:\n        description: all string formats ignore integers\n        data: 12\n        valid: true\n      AllStringFormatsIgnoreFloats:\n        description: all string formats ignore floats\n        data: 13.7\n        valid: true\n      AllStringFormatsIgnoreObjects:\n        description: all string formats ignore objects\n        data: {}\n        valid: true\n      AllStringFormatsIgnoreArrays:\n        description: all string formats ignore arrays\n        data: []\n        valid: true\n      AllStringFormatsIgnoreBooleans:\n        description: all string formats ignore booleans\n        data: false\n        valid: true\n      AllStringFormatsIgnoreNulls:\n        description: all string formats ignore nulls\n        data: null\n        valid: true\n    JsonPointerFormat:\n      AllStringFormatsIgnoreIntegers:\n        description: all string formats ignore integers\n        data: 12\n        valid: true\n      AllStringFormatsIgnoreFloats:\n        description: all string formats ignore floats\n        data: 13.7\n        valid: true\n      AllStringFormatsIgnoreObjects:\n        description: all string formats ignore objects\n        data: {}\n        valid: true\n      AllStringFormatsIgnoreArrays:\n        description: all string formats ignore arrays\n        data: []\n        valid: true\n      AllStringFormatsIgnoreBooleans:\n        description: all string formats ignore booleans\n        data: false\n        valid: true\n      AllStringFormatsIgnoreNulls:\n        description: all string formats ignore nulls\n        data: null\n        valid: true\n    UriFormat:\n      AllStringFormatsIgnoreIntegers:\n        description: all string formats ignore integers\n        data: 12\n        valid: true\n      AllStringFormatsIgnoreFloats:\n        description: all string formats ignore floats\n        data: 13.7\n        valid: true\n      AllStringFormatsIgnoreObjects:\n        description: all string formats ignore objects\n        data: {}\n        valid: true\n      AllStringFormatsIgnoreArrays:\n        description: all string formats ignore arrays\n        data: []\n        valid: true\n      AllStringFormatsIgnoreBooleans:\n        description: all string formats ignore booleans\n        data: false\n        valid: true\n      AllStringFormatsIgnoreNulls:\n        description: all string formats ignore nulls\n        data: null\n        valid: true\n    UriReferenceFormat:\n      AllStringFormatsIgnoreIntegers:\n        description: all string formats ignore integers\n        data: 12\n        valid: true\n      AllStringFormatsIgnoreFloats:\n        description: all string formats ignore floats\n        data: 13.7\n        valid: true\n      AllStringFormatsIgnoreObjects:\n        description: all string formats ignore objects\n        data: {}\n        valid: true\n      AllStringFormatsIgnoreArrays:\n        description: all string formats ignore arrays\n        data: []\n        valid: true\n      AllStringFormatsIgnoreBooleans:\n        description: all string formats ignore booleans\n        data: false\n        valid: true\n      AllStringFormatsIgnoreNulls:\n        description: all string formats ignore nulls\n        data: null\n        valid: true\n    UriTemplateFormat:\n      AllStringFormatsIgnoreIntegers:\n        description: all string formats ignore integers\n        data: 12\n        valid: true\n      AllStringFormatsIgnoreFloats:\n        description: all string formats ignore floats\n        data: 13.7\n        valid: true\n      AllStringFormatsIgnoreObjects:\n        description: all string formats ignore objects\n        data: {}\n        valid: true\n      AllStringFormatsIgnoreArrays:\n        description: all string formats ignore arrays\n        data: []\n        valid: true\n      AllStringFormatsIgnoreBooleans:\n        description: all string formats ignore booleans\n        data: false\n        valid: true\n      AllStringFormatsIgnoreNulls:\n        description: all string formats ignore nulls\n        data: null\n        valid: true\n    NestedItems:\n      ValidNestedArray:\n        description: valid nested array\n        data:\n        - - - - 1\n          - - - 2\n            - - 3\n        - - - - 4\n            - - 5\n            - - 6\n        valid: true\n      NestedArrayWithInvalidType:\n        description: nested array with invalid type\n        data:\n        - - - - '1'\n          - - - 2\n            - - 3\n        - - - - 4\n            - - 5\n            - - 6\n        valid: false\n      NotDeepEnough:\n        description: not deep enough\n        data:\n        - - - 1\n          - - 2\n          - - 3\n        - - - 4\n          - - 5\n          - - 6\n        valid: false\n    MaximumValidation:\n      BelowTheMaximumIsValid:\n        description: below the maximum is valid\n        data: 2.6\n        valid: true\n      BoundaryPointIsValid:\n        description: boundary point is valid\n        data: 3.0\n        valid: true\n      AboveTheMaximumIsInvalid:\n        description: above the maximum is invalid\n        data: 3.5\n        valid: false\n      IgnoresNonNumbers:\n        description: ignores non-numbers\n        data: x\n        valid: true\n    MaximumValidationWithUnsignedInteger:\n      BelowTheMaximumIsInvalid:\n        description: below the maximum is invalid\n        data: 299.97\n        valid: true\n      BoundaryPointIntegerIsValid:\n        description: boundary point integer is valid\n        data: 300\n        valid: true\n      BoundaryPointFloatIsValid:\n        description: boundary point float is valid\n        data: 300.0\n        valid: true\n      AboveTheMaximumIsInvalid:\n        description: above the maximum is invalid\n        data: 300.5\n        valid: false\n    MaxitemsValidation:\n      ShorterIsValid:\n        description: shorter is valid\n        data:\n        - 1\n        valid: true\n      ExactLengthIsValid:\n        description: exact length is valid\n        data:\n        - 1\n        - 2\n        valid: true\n      TooLongIsInvalid:\n        description: too long is invalid\n        data:\n        - 1\n        - 2\n        - 3\n        valid: false\n      IgnoresNonArrays:\n        description: ignores non-arrays\n        data: foobar\n        valid: true\n    MaxlengthValidation:\n      ShorterIsValid:\n        description: shorter is valid\n        data: f\n        valid: true\n      ExactLengthIsValid:\n        description: exact length is valid\n        data: fo\n        valid: true\n      TooLongIsInvalid:\n        description: too long is invalid\n        data: foo\n        valid: false\n      IgnoresNonStrings:\n        description: ignores non-strings\n        data: 100\n        valid: true\n      TwoSupplementaryUnicodeCodePointsIsLongEnough:\n        description: two supplementary Unicode code points is long enough\n        data: \"\\U0001F4A9\\U0001F4A9\"\n        valid: true\n    MaxpropertiesValidation:\n      ShorterIsValid:\n        description: shorter is valid\n        data:\n          foo: 1\n        valid: true\n      ExactLengthIsValid:\n        description: exact length is valid\n        data:\n          foo: 1\n          bar: 2\n        valid: true\n      TooLongIsInvalid:\n        description: too long is invalid\n        data:\n          foo: 1\n          bar: 2\n          baz: 3\n        valid: false\n      IgnoresArrays:\n        description: ignores arrays\n        data:\n        - 1\n        - 2\n        - 3\n        valid: true\n      IgnoresStrings:\n        description: ignores strings\n        data: foobar\n        valid: true\n      IgnoresOtherNonObjects:\n        description: ignores other non-objects\n        data: 12\n        valid: true\n    Maxproperties0MeansTheObjectIsEmpty:\n      NoPropertiesIsValid:\n        description: no properties is valid\n        data: {}\n        valid: true\n      OnePropertyIsInvalid:\n        description: one property is invalid\n        data:\n          foo: 1\n        valid: false\n    MinimumValidation:\n      AboveTheMinimumIsValid:\n        description: above the minimum is valid\n        data: 2.6\n        valid: true\n      BoundaryPointIsValid:\n        description: boundary point is valid\n        data: 1.1\n        valid: true\n      BelowTheMinimumIsInvalid:\n        description: below the minimum is invalid\n        data: 0.6\n        valid: false\n      IgnoresNonNumbers:\n        description: ignores non-numbers\n        data: x\n        valid: true\n    MinimumValidationWithSignedInteger:\n      NegativeAboveTheMinimumIsValid:\n        description: negative above the minimum is valid\n        data: -1\n        valid: true\n      PositiveAboveTheMinimumIsValid:\n        description: positive above the minimum is valid\n        data: 0\n        valid: true\n      BoundaryPointIsValid:\n        description: boundary point is valid\n        data: -2\n        valid: true\n      BoundaryPointWithFloatIsValid:\n        description: boundary point with float is valid\n        data: -2.0\n        valid: true\n      FloatBelowTheMinimumIsInvalid:\n        description: float below the minimum is invalid\n        data: -2.0001\n        valid: false\n      IntBelowTheMinimumIsInvalid:\n        description: int below the minimum is invalid\n        data: -3\n        valid: false\n      IgnoresNonNumbers:\n        description: ignores non-numbers\n        data: x\n        valid: true\n    MinitemsValidation:\n      LongerIsValid:\n        description: longer is valid\n        data:\n        - 1\n        - 2\n        valid: true\n      ExactLengthIsValid:\n        description: exact length is valid\n        data:\n        - 1\n        valid: true\n      TooShortIsInvalid:\n        description: too short is invalid\n        data: []\n        valid: false\n      IgnoresNonArrays:\n        description: ignores non-arrays\n        data: ''\n        valid: true\n    MinlengthValidation:\n      LongerIsValid:\n        description: longer is valid\n        data: foo\n        valid: true\n      ExactLengthIsValid:\n        description: exact length is valid\n        data: fo\n        valid: true\n      TooShortIsInvalid:\n        description: too short is invalid\n        data: f\n        valid: false\n      IgnoresNonStrings:\n        description: ignores non-strings\n        data: 1\n        valid: true\n      OneSupplementaryUnicodeCodePointIsNotLongEnough:\n        description: one supplementary Unicode code point is not long enough\n        data: \"\\U0001F4A9\"\n        valid: false\n    MinpropertiesValidation:\n      LongerIsValid:\n        description: longer is valid\n        data:\n          foo: 1\n          bar: 2\n        valid: true\n      ExactLengthIsValid:\n        description: exact length is valid\n        data:\n          foo: 1\n        valid: true\n      TooShortIsInvalid:\n        description: too short is invalid\n        data: {}\n        valid: false\n      IgnoresArrays:\n        description: ignores arrays\n        data: []\n        valid: true\n      IgnoresStrings:\n        description: ignores strings\n        data: ''\n        valid: true\n      IgnoresOtherNonObjects:\n        description: ignores other non-objects\n        data: 12\n        valid: true\n    ByInt:\n      IntByInt:\n        description: int by int\n        data: 10\n        valid: true\n      IntByIntFail:\n        description: int by int fail\n        data: 7\n        valid: false\n      IgnoresNonNumbers:\n        description: ignores non-numbers\n        data: foo\n        valid: true\n    ByNumber:\n      ZeroIsMultipleOfAnything:\n        description: zero is multiple of anything\n        data: 0\n        valid: true\n      45IsMultipleOf15:\n        description: 4.5 is multiple of 1.5\n        data: 4.5\n        valid: true\n      35IsNotMultipleOf15:\n        description: 35 is not multiple of 1.5\n        data: 35\n        valid: false\n    BySmallNumber:\n      00075IsMultipleOf00001:\n        description: 0.0075 is multiple of 0.0001\n        data: 0.0075\n        valid: true\n      000751IsNotMultipleOf00001:\n        description: 0.00751 is not multiple of 0.0001\n        data: 0.00751\n        valid: false\n    InvalidInstanceShouldNotRaiseErrorWhenFloatDivisionInf:\n      AlwaysInvalidButNaiveImplementationsMayRaiseAnOverflowError:\n        description: always invalid, but naive implementations may raise an overflow\n          error\n        data: 1.0e+308\n        valid: false\n      ValidIntegerWithMultipleofFloat:\n        description: valid integer with multipleOf float\n        data: 123456789\n        valid: true\n    Not:\n      Allowed:\n        description: allowed\n        data: foo\n        valid: true\n      Disallowed:\n        description: disallowed\n        data: 1\n        valid: false\n    NotMoreComplexSchema:\n      Match:\n        description: match\n        data: 1\n        valid: true\n      OtherMatch:\n        description: other match\n        data:\n          foo: 1\n        valid: true\n      Mismatch:\n        description: mismatch\n        data:\n          foo: bar\n        valid: false\n    ForbiddenProperty:\n      PropertyPresent:\n        description: property present\n        data:\n          foo: 1\n          bar: 2\n        valid: false\n      PropertyAbsent:\n        description: property absent\n        data:\n          bar: 1\n          baz: 2\n        valid: true\n    Oneof:\n      FirstOneofValid:\n        description: first oneOf valid\n        data: 1\n        valid: true\n      SecondOneofValid:\n        description: second oneOf valid\n        data: 2.5\n        valid: true\n      BothOneofValid:\n        description: both oneOf valid\n        data: 3\n        valid: false\n      NeitherOneofValid:\n        description: neither oneOf valid\n        data: 1.5\n        valid: false\n    OneofWithBaseSchema:\n      MismatchBaseSchema:\n        description: mismatch base schema\n        data: 3\n        valid: false\n      OneOneofValid:\n        description: one oneOf valid\n        data: foobar\n        valid: true\n      BothOneofValid:\n        description: both oneOf valid\n        data: foo\n        valid: false\n    OneofComplexTypes:\n      FirstOneofValidComplex:\n        description: first oneOf valid (complex)\n        data:\n          bar: 2\n        valid: true\n      SecondOneofValidComplex:\n        description: second oneOf valid (complex)\n        data:\n          foo: baz\n        valid: true\n      BothOneofValidComplex:\n        description: both oneOf valid (complex)\n        data:\n          foo: baz\n          bar: 2\n        valid: false\n      NeitherOneofValidComplex:\n        description: neither oneOf valid (complex)\n        data:\n          foo: 2\n          bar: quux\n        valid: false\n    OneofWithEmptySchema:\n      OneValidValid:\n        description: one valid - valid\n        data: foo\n        valid: true\n      BothValidInvalid:\n        description: both valid - invalid\n        data: 123\n        valid: false\n    NestedOneofToCheckValidationSemantics:\n      NullIsValid:\n        description: null is valid\n        data: null\n        valid: true\n      AnythingNonNullIsInvalid:\n        description: anything non-null is invalid\n        data: 123\n        valid: false\n    PatternValidation:\n      AMatchingPatternIsValid:\n        description: a matching pattern is valid\n        data: aaa\n        valid: true\n      ANonMatchingPatternIsInvalid:\n        description: a non-matching pattern is invalid\n        data: abc\n        valid: false\n      IgnoresBooleans:\n        description: ignores booleans\n        data: true\n        valid: true\n      IgnoresIntegers:\n        description: ignores integers\n        data: 123\n        valid: true\n      IgnoresFloats:\n        description: ignores floats\n        data: 1.0\n        valid: true\n      IgnoresObjects:\n        description: ignores objects\n        data: {}\n        valid: true\n      IgnoresArrays:\n        description: ignores arrays\n        data: []\n        valid: true\n      IgnoresNull:\n        description: ignores null\n        data: null\n        valid: true\n    PatternIsNotAnchored:\n      MatchesASubstring:\n        description: matches a substring\n        data: xxaayy\n        valid: true\n    ObjectPropertiesValidation:\n      BothPropertiesPresentAndValidIsValid:\n        description: both properties present and valid is valid\n        data:\n          foo: 1\n          bar: baz\n        valid: true\n      OnePropertyInvalidIsInvalid:\n        description: one property invalid is invalid\n        data:\n          foo: 1\n          bar: {}\n        valid: false\n      BothPropertiesInvalidIsInvalid:\n        description: both properties invalid is invalid\n        data:\n          foo: []\n          bar: {}\n        valid: false\n      DoesnTInvalidateOtherProperties:\n        description: doesn't invalidate other properties\n        data:\n          quux: []\n        valid: true\n      IgnoresArrays:\n        description: ignores arrays\n        data: []\n        valid: true\n      IgnoresOtherNonObjects:\n        description: ignores other non-objects\n        data: 12\n        valid: true\n    PropertiesWithEscapedCharacters:\n      ObjectWithAllNumbersIsValid:\n        description: object with all numbers is valid\n        data:\n          ? 'foo\n\n            bar'\n          : 1\n          foo\"bar: 1\n          foo\\bar: 1\n          \"foo\\rbar\": 1\n          \"foo\\tbar\": 1\n          \"foo\\fbar\": 1\n        valid: true\n      ObjectWithStringsIsInvalid:\n        description: object with strings is invalid\n        data:\n          ? 'foo\n\n            bar'\n          : '1'\n          foo\"bar: '1'\n          foo\\bar: '1'\n          \"foo\\rbar\": '1'\n          \"foo\\tbar\": '1'\n          \"foo\\fbar\": '1'\n        valid: false\n    PropertyNamedRefThatIsNotAReference:\n      PropertyNamedRefValid:\n        description: property named $ref valid\n        data:\n          $ref: a\n        valid: true\n      PropertyNamedRefInvalid:\n        description: property named $ref invalid\n        data:\n          $ref: 2\n        valid: false\n    RefInAdditionalproperties:\n      PropertyNamedRefValid:\n        description: property named $ref valid\n        data:\n          someProp:\n            $ref: a\n        valid: true\n      PropertyNamedRefInvalid:\n        description: property named $ref invalid\n        data:\n          someProp:\n            $ref: 2\n        valid: false\n    RefInItems:\n      PropertyNamedRefValid:\n        description: property named $ref valid\n        data:\n        - $ref: a\n        valid: true\n      PropertyNamedRefInvalid:\n        description: property named $ref invalid\n        data:\n        - $ref: 2\n        valid: false\n    RefInProperty:\n      PropertyNamedRefValid:\n        description: property named $ref valid\n        data:\n          a:\n            $ref: a\n        valid: true\n      PropertyNamedRefInvalid:\n        description: property named $ref invalid\n        data:\n          a:\n            $ref: 2\n        valid: false\n    RefInAllof:\n      PropertyNamedRefValid:\n        description: property named $ref valid\n        data:\n          $ref: a\n        valid: true\n      PropertyNamedRefInvalid:\n        description: property named $ref invalid\n        data:\n          $ref: 2\n        valid: false\n    RefInOneof:\n      PropertyNamedRefValid:\n        description: property named $ref valid\n        data:\n          $ref: a\n        valid: true\n      PropertyNamedRefInvalid:\n        description: property named $ref invalid\n        data:\n          $ref: 2\n        valid: false\n    RefInAnyof:\n      PropertyNamedRefValid:\n        description: property named $ref valid\n        data:\n          $ref: a\n        valid: true\n      PropertyNamedRefInvalid:\n        description: property named $ref invalid\n        data:\n          $ref: 2\n        valid: false\n    RequiredValidation:\n      PresentRequiredPropertyIsValid:\n        description: present required property is valid\n        data:\n          foo: 1\n        valid: true\n      NonPresentRequiredPropertyIsInvalid:\n        description: non-present required property is invalid\n        data:\n          bar: 1\n        valid: false\n      IgnoresArrays:\n        description: ignores arrays\n        data: []\n        valid: true\n      IgnoresStrings:\n        description: ignores strings\n        data: ''\n        valid: true\n      IgnoresOtherNonObjects:\n        description: ignores other non-objects\n        data: 12\n        valid: true\n    RequiredDefaultValidation:\n      NotRequiredByDefault:\n        description: not required by default\n        data: {}\n        valid: true\n    RequiredWithEmptyArray:\n      PropertyNotRequired:\n        description: property not required\n        data: {}\n        valid: true\n    IntegerTypeMatchesIntegers:\n      AnIntegerIsAnInteger:\n        description: an integer is an integer\n        data: 1\n        valid: true\n      AFloatWithZeroFractionalPartIsAnInteger:\n        description: a float with zero fractional part is an integer\n        data: 1.0\n        valid: true\n      AFloatIsNotAnInteger:\n        description: a float is not an integer\n        data: 1.1\n        valid: false\n      AStringIsNotAnInteger:\n        description: a string is not an integer\n        data: foo\n        valid: false\n      AStringIsStillNotAnIntegerEvenIfItLooksLikeOne:\n        description: a string is still not an integer, even if it looks like one\n        data: '1'\n        valid: false\n      AnObjectIsNotAnInteger:\n        description: an object is not an integer\n        data: {}\n        valid: false\n      AnArrayIsNotAnInteger:\n        description: an array is not an integer\n        data: []\n        valid: false\n      ABooleanIsNotAnInteger:\n        description: a boolean is not an integer\n        data: true\n        valid: false\n      NullIsNotAnInteger:\n        description: null is not an integer\n        data: null\n        valid: false\n    NumberTypeMatchesNumbers:\n      AnIntegerIsANumber:\n        description: an integer is a number\n        data: 1\n        valid: true\n      AFloatWithZeroFractionalPartIsANumberAndAnInteger:\n        description: a float with zero fractional part is a number (and an integer)\n        data: 1.0\n        valid: true\n      AFloatIsANumber:\n        description: a float is a number\n        data: 1.1\n        valid: true\n      AStringIsNotANumber:\n        description: a string is not a number\n        data: foo\n        valid: false\n      AStringIsStillNotANumberEvenIfItLooksLikeOne:\n        description: a string is still not a number, even if it looks like one\n        data: '1'\n        valid: false\n      AnObjectIsNotANumber:\n        description: an object is not a number\n        data: {}\n        valid: false\n      AnArrayIsNotANumber:\n        description: an array is not a number\n        data: []\n        valid: false\n      ABooleanIsNotANumber:\n        description: a boolean is not a number\n        data: true\n        valid: false\n      NullIsNotANumber:\n        description: null is not a number\n        data: null\n        valid: false\n    StringTypeMatchesStrings:\n      1IsNotAString:\n        description: 1 is not a string\n        data: 1\n        valid: false\n      AFloatIsNotAString:\n        description: a float is not a string\n        data: 1.1\n        valid: false\n      AStringIsAString:\n        description: a string is a string\n        data: foo\n        valid: true\n      AStringIsStillAStringEvenIfItLooksLikeANumber:\n        description: a string is still a string, even if it looks like a number\n        data: '1'\n        valid: true\n      AnEmptyStringIsStillAString:\n        description: an empty string is still a string\n        data: ''\n        valid: true\n      AnObjectIsNotAString:\n        description: an object is not a string\n        data: {}\n        valid: false\n      AnArrayIsNotAString:\n        description: an array is not a string\n        data: []\n        valid: false\n      ABooleanIsNotAString:\n        description: a boolean is not a string\n        data: true\n        valid: false\n      NullIsNotAString:\n        description: null is not a string\n        data: null\n        valid: false\n    ObjectTypeMatchesObjects:\n      AnIntegerIsNotAnObject:\n        description: an integer is not an object\n        data: 1\n        valid: false\n      AFloatIsNotAnObject:\n        description: a float is not an object\n        data: 1.1\n        valid: false\n      AStringIsNotAnObject:\n        description: a string is not an object\n        data: foo\n        valid: false\n      AnObjectIsAnObject:\n        description: an object is an object\n        data: {}\n        valid: true\n      AnArrayIsNotAnObject:\n        description: an array is not an object\n        data: []\n        valid: false\n      ABooleanIsNotAnObject:\n        description: a boolean is not an object\n        data: true\n        valid: false\n      NullIsNotAnObject:\n        description: null is not an object\n        data: null\n        valid: false\n    BooleanTypeMatchesBooleans:\n      AnIntegerIsNotABoolean:\n        description: an integer is not a boolean\n        data: 1\n        valid: false\n      ZeroIsNotABoolean:\n        description: zero is not a boolean\n        data: 0\n        valid: false\n      AFloatIsNotABoolean:\n        description: a float is not a boolean\n        data: 1.1\n        valid: false\n      AStringIsNotABoolean:\n        description: a string is not a boolean\n        data: foo\n        valid: false\n      AnEmptyStringIsNotABoolean:\n        description: an empty string is not a boolean\n        data: ''\n        valid: false\n      AnObjectIsNotABoolean:\n        description: an object is not a boolean\n        data: {}\n        valid: false\n      AnArrayIsNotABoolean:\n        description: an array is not a boolean\n        data: []\n        valid: false\n      TrueIsABoolean:\n        description: true is a boolean\n        data: true\n        valid: true\n      FalseIsABoolean:\n        description: false is a boolean\n        data: false\n        valid: true\n      NullIsNotABoolean:\n        description: null is not a boolean\n        data: null\n        valid: false\n    NullTypeMatchesOnlyTheNullObject:\n      AnIntegerIsNotNull:\n        description: an integer is not null\n        data: 1\n        valid: false\n      AFloatIsNotNull:\n        description: a float is not null\n        data: 1.1\n        valid: false\n      ZeroIsNotNull:\n        description: zero is not null\n        data: 0\n        valid: false\n      AStringIsNotNull:\n        description: a string is not null\n        data: foo\n        valid: false\n      AnEmptyStringIsNotNull:\n        description: an empty string is not null\n        data: ''\n        valid: false\n      AnObjectIsNotNull:\n        description: an object is not null\n        data: {}\n        valid: false\n      AnArrayIsNotNull:\n        description: an array is not null\n        data: []\n        valid: false\n      TrueIsNotNull:\n        description: true is not null\n        data: true\n        valid: false\n      FalseIsNotNull:\n        description: false is not null\n        data: false\n        valid: false\n      NullIsNull:\n        description: null is null\n        data: null\n        valid: true\n    ArrayTypeMatchesArrays:\n      AnIntegerIsNotAnArray:\n        description: an integer is not an array\n        data: 1\n        valid: false\n      AFloatIsNotAnArray:\n        description: a float is not an array\n        data: 1.1\n        valid: false\n      AStringIsNotAnArray:\n        description: a string is not an array\n        data: foo\n        valid: false\n      AnObjectIsNotAnArray:\n        description: an object is not an array\n        data: {}\n        valid: false\n      AnArrayIsAnArray:\n        description: an array is an array\n        data: []\n        valid: true\n      ABooleanIsNotAnArray:\n        description: a boolean is not an array\n        data: true\n        valid: false\n      NullIsNotAnArray:\n        description: null is not an array\n        data: null\n        valid: false\n    UniqueitemsValidation:\n      UniqueArrayOfIntegersIsValid:\n        description: unique array of integers is valid\n        data:\n        - 1\n        - 2\n        valid: true\n      NonUniqueArrayOfIntegersIsInvalid:\n        description: non-unique array of integers is invalid\n        data:\n        - 1\n        - 1\n        valid: false\n      NonUniqueArrayOfMoreThanTwoIntegersIsInvalid:\n        description: non-unique array of more than two integers is invalid\n        data:\n        - 1\n        - 2\n        - 1\n        valid: false\n      NumbersAreUniqueIfMathematicallyUnequal:\n        description: numbers are unique if mathematically unequal\n        data:\n        - 1.0\n        - 1.0\n        - 1\n        valid: false\n      FalseIsNotEqualToZero:\n        description: false is not equal to zero\n        data:\n        - 0\n        - false\n        valid: true\n      TrueIsNotEqualToOne:\n        description: true is not equal to one\n        data:\n        - 1\n        - true\n        valid: true\n      UniqueArrayOfStringsIsValid:\n        description: unique array of strings is valid\n        data:\n        - foo\n        - bar\n        - baz\n        valid: true\n      NonUniqueArrayOfStringsIsInvalid:\n        description: non-unique array of strings is invalid\n        data:\n        - foo\n        - bar\n        - foo\n        valid: false\n      UniqueArrayOfObjectsIsValid:\n        description: unique array of objects is valid\n        data:\n        - foo: bar\n        - foo: baz\n        valid: true\n      NonUniqueArrayOfObjectsIsInvalid:\n        description: non-unique array of objects is invalid\n        data:\n        - foo: bar\n        - foo: bar\n        valid: false\n      UniqueArrayOfNestedObjectsIsValid:\n        description: unique array of nested objects is valid\n        data:\n        - foo:\n            bar:\n              baz: true\n        - foo:\n            bar:\n              baz: false\n        valid: true\n      NonUniqueArrayOfNestedObjectsIsInvalid:\n        description: non-unique array of nested objects is invalid\n        data:\n        - foo:\n            bar:\n              baz: true\n        - foo:\n            bar:\n              baz: true\n        valid: false\n      UniqueArrayOfArraysIsValid:\n        description: unique array of arrays is valid\n        data:\n        - - foo\n        - - bar\n        valid: true\n      NonUniqueArrayOfArraysIsInvalid:\n        description: non-unique array of arrays is invalid\n        data:\n        - - foo\n        - - foo\n        valid: false\n      NonUniqueArrayOfMoreThanTwoArraysIsInvalid:\n        description: non-unique array of more than two arrays is invalid\n        data:\n        - - foo\n        - - bar\n        - - foo\n        valid: false\n      1AndTrueAreUnique:\n        description: '[1] and [true] are unique'\n        data:\n        - - 1\n        - - true\n        valid: true\n      0AndFalseAreUnique:\n        description: '[0] and [false] are unique'\n        data:\n        - - 0\n        - - false\n        valid: true\n      Nested1AndTrueAreUnique:\n        description: nested [1] and [true] are unique\n        data:\n        - - - 1\n          - foo\n        - - - true\n          - foo\n        valid: true\n      Nested0AndFalseAreUnique:\n        description: nested [0] and [false] are unique\n        data:\n        - - - 0\n          - foo\n        - - - false\n          - foo\n        valid: true\n      UniqueHeterogeneousTypesAreValid:\n        description: unique heterogeneous types are valid\n        data:\n        - {}\n        - - 1\n        - true\n        - null\n        - 1\n        - '{}'\n        valid: true\n      NonUniqueHeterogeneousTypesAreInvalid:\n        description: non-unique heterogeneous types are invalid\n        data:\n        - {}\n        - - 1\n        - true\n        - null\n        - {}\n        - 1\n        valid: false\n      DifferentObjectsAreUnique:\n        description: different objects are unique\n        data:\n        - a: 1\n          b: 2\n        - a: 2\n          b: 1\n        valid: true\n      ObjectsAreNonUniqueDespiteKeyOrder:\n        description: objects are non-unique despite key order\n        data:\n        - a: 1\n          b: 2\n        - b: 2\n          a: 1\n        valid: false\n      AFalseAndA0AreUnique:\n        description: '{\"a\": false} and {\"a\": 0} are unique'\n        data:\n        - a: false\n        - a: 0\n        valid: true\n      ATrueAndA1AreUnique:\n        description: '{\"a\": true} and {\"a\": 1} are unique'\n        data:\n        - a: true\n        - a: 1\n        valid: true\n    UniqueitemsFalseValidation:\n      UniqueArrayOfIntegersIsValid:\n        description: unique array of integers is valid\n        data:\n        - 1\n        - 2\n        valid: true\n      NonUniqueArrayOfIntegersIsValid:\n        description: non-unique array of integers is valid\n        data:\n        - 1\n        - 1\n        valid: true\n      NumbersAreUniqueIfMathematicallyUnequal:\n        description: numbers are unique if mathematically unequal\n        data:\n        - 1.0\n        - 1.0\n        - 1\n        valid: true\n      FalseIsNotEqualToZero:\n        description: false is not equal to zero\n        data:\n        - 0\n        - false\n        valid: true\n      TrueIsNotEqualToOne:\n        description: true is not equal to one\n        data:\n        - 1\n        - true\n        valid: true\n      UniqueArrayOfObjectsIsValid:\n        description: unique array of objects is valid\n        data:\n        - foo: bar\n        - foo: baz\n        valid: true\n      NonUniqueArrayOfObjectsIsValid:\n        description: non-unique array of objects is valid\n        data:\n        - foo: bar\n        - foo: bar\n        valid: true\n      UniqueArrayOfNestedObjectsIsValid:\n        description: unique array of nested objects is valid\n        data:\n        - foo:\n            bar:\n              baz: true\n        - foo:\n            bar:\n              baz: false\n        valid: true\n      NonUniqueArrayOfNestedObjectsIsValid:\n        description: non-unique array of nested objects is valid\n        data:\n        - foo:\n            bar:\n              baz: true\n        - foo:\n            bar:\n              baz: true\n        valid: true\n      UniqueArrayOfArraysIsValid:\n        description: unique array of arrays is valid\n        data:\n        - - foo\n        - - bar\n        valid: true\n      NonUniqueArrayOfArraysIsValid:\n        description: non-unique array of arrays is valid\n        data:\n        - - foo\n        - - foo\n        valid: true\n      1AndTrueAreUnique:\n        description: 1 and true are unique\n        data:\n        - 1\n        - true\n        valid: true\n      0AndFalseAreUnique:\n        description: 0 and false are unique\n        data:\n        - 0\n        - false\n        valid: true\n      UniqueHeterogeneousTypesAreValid:\n        description: unique heterogeneous types are valid\n        data:\n        - {}\n        - - 1\n        - true\n        - null\n        - 1\n        valid: true\n      NonUniqueHeterogeneousTypesAreValid:\n        description: non-unique heterogeneous types are valid\n        data:\n        - {}\n        - - 1\n        - true\n        - null\n        - {}\n        - 1\n        valid: true\n",
			"canonicalURL": "/github.com/OpenAPITools/openapi-generator@4635dda5181fd34d50643d2b9dcfcaaef64db418/-/blob/modules/openapi-generator/src/test/resources/3_0/unit_test_spec/3_0_3_unit_test_spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenAPITools/openapi-generator/blob/4635dda5181fd34d50643d2b9dcfcaaef64db418/modules/openapi-generator/src/test/resources/3_0/unit_test_spec/3_0_3_unit_test_spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"EnumWith0DoesNotMatchFalse\": at 1:1838: parse enum values: parse value \"0\": unexpected type: \"\""
}